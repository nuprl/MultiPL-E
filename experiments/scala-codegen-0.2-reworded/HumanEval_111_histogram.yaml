name: HumanEval_111_histogram
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string representing a space separated lowercase letters, return\
  \ a map\n    // of the letter with the most repetition and containing the corresponding\
  \ count.\n    // If several letters have the same occurrence, return all of them.\n\
  \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
  a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n   \
  \ // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"a b c\
  \ a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
  b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>> histogram((\"\"\
  ))\n    // (Map[String,Long]())\n    def histogram(test : String) : Map[String,Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b\
  \ b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"\
  d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
  r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"\
  b\" -> 4l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\"\
  \ -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
  \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n    }\n\
  \n}\n"
completions: ["        val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ => letter.toLowerCase()).distinct().toMap\n        val maxCount = counts.maxBy[String](_\
    \ => counts.getOrElse(letter, 0L))\n        val maxCounts = counts.filter(letter\
    \ => counts.getOrElse(letter, 0L) == maxCount)\n        val maxCountsMap = maxCounts.toMap\n\
    \        maxCountsMap.foreach(counts::remove)\n        return counts", "     \
    \   val letters = test.split(\" \")\n        val counts = letters.map(letter ->\
    \ letter.toLowerCase()).map(letter -> letter).distinct().count()\n        val\
    \ maxCount = counts.max()\n        val maxCountLetters = counts.filter(count ->\
    \ count == maxCount).map(count -> letters.filter(letter -> letter.toLowerCase()\
    \ == count).head()).toList()\n        val result = maxCountLetters.map(letter\
    \ -> letter.toLowerCase()).collect(Collectors.toMap(letter -> letter, letter ->\
    \ 1l))\n        return result", "        val letters = test.split(\" \")\n   \
    \     val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCountLetter = counts.filter(count\
    \ -> count == maxCount).head()\n        val maxCountCount = counts.filter(count\
    \ -> count == maxCount).head()\n        val maxCountLetterCount = counts.filter(count\
    \ -> count == maxCountLetter).head()\n        val maxCountLetterCountCount = counts.filter(count\
    \ -> count == maxCountLetterCount).head()\n        val maxCountLetterCountCountCount\
    \ = counts.filter(count -> count == maxCountLetterCountCount).head()\n       \
    \ val maxCountLetterCountCountCountCount = counts.filter(count -> count == maxCountLetterCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCount = counts.filter(count ->\
    \ count == maxCountLetterCountCountCountCount).head()\n        val maxCountLetterCountCountCountCountCountCount\
    \ = counts.filter(count -> count == maxCountLetterCountCountCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCountCountCount = counts.filter(count\
    \ -> count == maxCountLetterCountCountCountCountCountCount).head()\n        val\
    \ maxCountLetterCountCountCountCountCountCountCountCount = counts.filter(count\
    \ -> count == maxCountLetterCountCountCountCountCountCountCount).head()\n    \
    \    val maxCountLetterCountCountCountCountCountCountCountCountCount = counts.filter(count\
    \ -> count == maxCountLetterCountCountCountCountCountCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCountCountCountCountCountCount\
    \ = counts.filter(count -> count == maxCountLetterCountCountCountCountCountCountCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCountCountCountCountCountCountCount\
    \ = counts.filter(count -> count == maxCountLetterCountCountCountCountCountCountCountCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = counts.filter(count -> count == maxCountLetterCountCountCountCountCountCountCountCountCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = counts.filter(count -> count == maxCountLetterCountCount", "        val letters\
    \ = test.split(\" \")\n        val counts = letters.map(letter => letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCounts = counts.filter(count\
    \ => count == maxCount).toSeq\n        val maxCountsMap = maxCounts.map(count\
    \ => count.toString()).toMap\n        val maxCountsMapWithCount = maxCountsMap.mapValues(count\
    \ => count + 1)\n        return maxCountsMapWithCount", "        val letters =\
    \ test.split(\" \")\n        val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCountLetters = counts.filter(count\
    \ -> count == maxCount).map(count -> letters.filter(letter -> letter.toLowerCase().equals(count)).head())\n\
    \        val result = maxCountLetters.map(letter -> letter.toLowerCase() + \"\
    :\" + count).toMap(String::split)\n        result.filter(pair -> pair.length >\
    \ 1).forEach(pair -> result.put(pair[0], Long.parseLong(pair[1])))\n        return\
    \ result", "        val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ -> letter.toLowerCase()).map(letter -> letter).distinct().count()\n        val\
    \ maxCount = counts.max()\n        val maxCountLetter = counts.filter(count ->\
    \ count == maxCount).head()\n        val maxCountCount = counts.filter(count ->\
    \ count == maxCount).head()\n        val result = counts.filter(count -> count\
    \ == maxCount).map(count -> maxCountLetter).toMap(letter -> letter)\n        return\
    \ result", "        val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ => letter.toLowerCase()).map(letter => letter.count()).toMap(count => count)\n\
    \        val maxCount = counts.maxBy(count => count)\n        val maxCounts =\
    \ counts.filter(count => count == maxCount)\n        val maxCountsMap = maxCounts.map(count\
    \ => count.key).toMap(key => key)\n        val maxCountsMapKeys = maxCountsMap.keys()\n\
    \        val maxCountsMapValues = maxCountsMap.values()\n        val maxCountsMapValuesArray\
    \ = maxCountsMapValues.toArray\n        val maxCountsMapValuesArrayLength = maxCountsMapValuesArray.length\n\
    \        val maxCountsMapValuesArrayElement = maxCountsMapValuesArray[0]\n   \
    \     val maxCountsMapValuesArrayElementString = maxCountsMapValuesArrayElement.toString\n\
    \        val maxCountsMapValuesArrayElementStringLength = maxCountsMapValuesArrayElementString.length\n\
    \        val maxCountsMapValuesArrayElementStringLengthInt = maxCountsMapValuesArrayElementStringLength.toInt\n\
    \        val maxCountsMapValuesArrayElementStringLengthIntZero = maxCountsMapValuesArrayElementStringLengthInt.zero\n\
    \        val maxCountsMapValuesArrayElementStringLengthIntOne = maxCountsMapValuesArrayElementStringLengthInt.one\n\
    \        val maxCountsMapValuesArrayElementStringLengthIntTwo = maxCountsMapValuesArrayElementStringLengthInt.two\n\
    \        val maxCountsMapValuesArrayElementStringLengthIntThree = maxCountsMapValuesArrayElementStringLengthInt.three\n\
    \        val maxCountsMapValuesArrayElementStringLengthIntFour = maxCountsMapValuesArrayElementStringLengthInt.four\n\
    \        val maxCountsMapValuesArrayElementStringLengthIntFive = maxCountsMapValuesArrayElementStringLengthInt.five\n\
    \        val maxCountsMapValuesArrayElementStringLengthIntSix = maxCountsMapValuesArrayElementStringLengthInt.six\n\
    \        val maxCountsMapValuesArrayElementStringLengthIntSeven = maxCountsMapValuesArrayElementStringLengthInt.seven\n\
    \        val maxCountsMapValuesArrayElementStringLengthIntEight = maxCountsMapValuesArrayElementStringLengthInt.eight\n\
    \        val maxCount", "        val letters = test.split(\" \")\n        val\
    \ counts = letters.map(letter -> letter.toLowerCase()).collectAsMap()\n      \
    \  val maxCount = counts.maxBy(letter -> counts.get(letter).get())\n        val\
    \ maxCounts = counts.filter(letter -> counts.get(letter).equals(maxCount)).map(letter\
    \ -> letter).collect()\n        val maxCountsMap = counts.filter(letter -> counts.get(letter).equals(maxCount)).collectAsMap()\n\
    \        val maxCountsMap2 = counts.filter(letter -> counts.get(letter).equals(maxCount)).collectAsMap()\n\
    \        val maxCountsMap3 = counts.filter(letter -> counts.get(letter).equals(maxCount)).collectAsMap()\n\
    \        val maxCountsMap4 = counts.filter(letter -> counts.get(letter).equals(maxCount)).collectAsMap()\n\
    \        val maxCountsMap5 = counts.filter(letter -> counts.get(letter).equals(maxCount)).collectAsMap()\n\
    \        val maxCountsMap6 = counts.filter(letter -> counts.get(letter).equals(maxCount)).collectAsMap()\n\
    \        val maxCountsMap7 = counts.filter(letter -> counts.get(letter).equals(maxCount)).collectAsMap()\n\
    \        val maxCountsMap8 = counts.filter(letter -> counts.get(letter).equals(maxCount)).collectAsMap()\n\
    \        val maxCountsMap9 = counts.filter(letter -> counts.get(letter).equals(maxCount)).collectAsMap()\n\
    \        val maxCountsMap10 = counts.filter(letter -> counts.get(letter).equals(maxCount)).collectAsMap()\n\
    \        val maxCountsMap11 = counts.filter(letter -> counts.get(letter).equals(maxCount)).collectAsMap()\n\
    \        val maxCountsMap12 = counts.filter(letter -> counts.get(letter).equals(maxCount)).collectAsMap()\n\
    \        val maxCountsMap13 = counts.filter(letter -> counts.get(letter).equals(maxCount)).collectAsMap()\n\
    \        val maxCountsMap14 = counts.filter(letter -> counts.get(letter).equals(",
  "        val letters = test.split(\" \")\n        val counts = mutable.HashMap[String,Long]()\n\
    \        for (i <- 0 until letters.length) {\n            val letter = letters[i]\n\
    \            if (counts.contains(letter)) {\n                counts.get(letter)\
    \ += 1\n            } else {\n                counts.put(letter, 1)\n        \
    \    }\n        }\n        counts", "        var result = Map[String,Long]()\n\
    \        var letters = test.split(\" \")\n        for (var letter : letters) {\n\
    \            if (result.containsKey(letter)) {\n                result.put(letter,\
    \ result.get(letter) + 1)\n            } else {\n                result.put(letter,\
    \ 1l)\n            }\n        }\n        return result", "        var result =\
    \ Map[String,Long]()\n        var letters = test.split(\" \")\n        for (var\
    \ letter : letters) {\n            if (result.containsKey(letter)) {\n       \
    \         result.put(letter, result.get(letter) + 1)\n            } else {\n \
    \               result.put(letter, 1l)\n            }\n        }\n        return\
    \ result", "        val letters = test.split(\" \")\n        val map = mutable.HashMap[String,Long]()\n\
    \        for (i <- 0 until letters.length) {\n            val letter = letters[i]\n\
    \            if (!map.contains(letter)) {\n                map.put(letter, 1l)\n\
    \            } else {\n                map.put(letter, map.get(letter) + 1)\n\
    \            }\n        }\n        return map", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter -> letter.toLowerCase()).map(letter\
    \ -> letter).distinct().toMap(letter -> letter)\n        val maxCount = counts.maxBy(letter\
    \ -> counts.get(letter))\n        val maxCounts = counts.filter(letter -> counts.get(letter)\
    \ == maxCount.get)\n        return maxCounts.toMap(letter -> letter)", "     \
    \   val letters = test.split(\" \")\n        val counts = letters.map(letter =>\
    \ letter.toLowerCase()).distinct().count()\n        val maxCount = counts.max()\n\
    \        val maxCounts = counts.filter(count => count == maxCount).toMap(key =>\
    \ key.toLowerCase())\n        return maxCounts", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCounts = counts.filter(count\
    \ -> count == maxCount).toMap(key -> key)\n        val maxCountsMap = maxCounts.mapValues(count\
    \ -> count.toString())\n        return maxCountsMap", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter => letter.toLowerCase()).collect()\n\
    \        val maxCount = counts.maxBy(letter => letter)\n        val maxCounts\
    \ = counts.filter(letter => letter == maxCount)\n        val maxCountsMap = maxCounts.map(letter\
    \ => letter.toLowerCase()).collectAsMap()\n        val maxCountsMap2 = maxCountsMap.filter(letter\
    \ => letter.contains(maxCount))\n        val maxCountsMap3 = maxCountsMap2.map(letter\
    \ => letter.toLowerCase()).collectAsMap()\n        return maxCountsMap3", "  \
    \      val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ -> letter.toLowerCase()).distinct().count()\n        val maxCount = counts.max()\n\
    \        val maxCounts = counts.filter(count -> count == maxCount).toMap(String::valueOf)\n\
    \        val maxCountsMap = maxCounts.map(count -> count + \" \" + letters.filter(letter\
    \ -> letter.toLowerCase().equals(count)).mkString(\" \")).toMap(String::valueOf)\n\
    \        return maxCountsMap", "        val letters = test.split(\" \")\n    \
    \    val counts = letters.map(letter -> letter.toLowerCase()).map(letter -> letter).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCountLetter = counts.filter(count\
    \ -> count == maxCount).head()\n        val maxCountCount = counts.filter(count\
    \ -> count == maxCount).head()\n        return counts.filter(count -> count ==\
    \ maxCount).map(count -> maxCountLetter + \" \" + count).toMap(String::toLowerCase)",
  "        val letters = test.split(\" \")\n        val map = mutable.HashMap[String,Long]()\n\
    \        for (i <- 0 until letters.length) {\n            val letter = letters[i]\n\
    \            if (!map.contains(letter)) {\n                map.put(letter, 1l)\n\
    \            } else {\n                map.put(letter, map.get(letter) + 1)\n\
    \            }\n        }\n        return map", "        var result = new HashMap[String,Long]()\n\
    \        for (var i = 0; i < test.length(); i++) {\n            var c = test.charAt(i)\n\
    \            if (result.containsKey(c)) {\n                result.put(c, result.get(c)\
    \ + 1)\n            } else {\n                result.put(c, 1l)\n            }\n\
    \        }\n        return result", "        val letters = test.split(\" \")\n\
    \        val map = mutable.HashMap[String,Long]()\n        for (i <- 0 until letters.length)\
    \ {\n            val letter = letters[i]\n            if (map.contains(letter))\
    \ {\n                map.put(letter, map.get(letter) + 1)\n            } else\
    \ {\n                map.put(letter, 1l)\n            }\n        }\n        return\
    \ map", "        val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ -> letter.toLowerCase()).map(letter -> letter.charAt(0)).distinct().countBy(letter\
    \ -> letter)\n        val maxCount = counts.maxBy(letter -> counts.get(letter).get())\n\
    \        val maxCounts = counts.filter(letter -> counts.get(letter).equals(maxCount)).map(letter\
    \ -> letter.toLowerCase()).collect()\n        val maxCountsMap = maxCounts.map(letter\
    \ -> letter + \":\" + counts.get(letter).get())\n        val result = maxCountsMap.reduce((a,\
    \ b) -> a + \" \" + b)\n        val resultMap = result.split(\" \").map(s -> s.split(\"\
    :\")).map(s -> s[0] + \":\" + s[1])\n        return resultMap", "        val letters\
    \ = test.split(\" \")\n        val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCounts = counts.filter(count\
    \ -> count == maxCount).toSeq\n        val maxCountsMap = maxCounts.map(count\
    \ -> count.toString()).toMap\n        val maxCountsMap2 = maxCountsMap.toMap\n\
    \        return maxCountsMap2", "        val result = mutable.HashMap[String,Long]()\n\
    \        for (i <- 0 until test.length) {\n            val c = test.charAt(i)\n\
    \            if (!result.contains(c)) {\n                result.put(c, 1l)\n \
    \           } else {\n                result.put(c, result.get(c) + 1)\n     \
    \       }\n        }\n        return result", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCountLetters = counts.filter(count\
    \ -> count == maxCount).map(count -> letters.find(letter -> letter.toLowerCase().equals(count.toString()))).toList()\n\
    \        val result = maxCountLetters.map(letter -> letter.toLowerCase() + \"\
    :\" + count).toMap(key -> key.split(\":\")[0], value -> Long.valueOf(key.split(\"\
    :\")[1]))\n        return result", "        val letters = test.split(\" \")\n\
    \        val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCounts = counts.filter(count\
    \ -> count == maxCount).toSeq\n        val maxCountsMap = maxCounts.map(count\
    \ -> count.toString()).toMap\n        val maxCountsMap2 = maxCountsMap.toMap\n\
    \        return maxCountsMap2", "        val letters = test.split(\" \")\n   \
    \     val counts = letters.map(letter => letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCountLetter = counts.filter(count\
    \ => count == maxCount).head()\n        val maxCountCount = counts.filter(count\
    \ => count == maxCount).head()\n        val maxCountCountLetter = counts.filter(count\
    \ => count == maxCount).head()\n        val result = counts.filter(count => count\
    \ == maxCount).map(count => maxCountLetter + \":\" + count).toMap(String::toString,\
    \ String::toString)\n        return result", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCountLetters = counts.filter(count\
    \ -> count == maxCount).map(count -> letter).toSeq()\n        val maxCountLettersMap\
    \ = maxCountLetters.toMap(letter -> letter)\n        return maxCountLettersMap",
  "        val letters = test.split(\" \")\n        val map = mutable.HashMap[String,Long]()\n\
    \        for (i <- 0 until letters.length) {\n            val letter = letters[i]\n\
    \            if (map.contains(letter)) {\n                map.update(letter, map.get(letter)\
    \ + 1)\n            } else {\n                map.put(letter, 1l)\n          \
    \  }\n        }\n        return map", "        val letters = test.split(\" \"\
    )\n        val map = mutable.HashMap[String,Long]()\n        for (i <- 0 until\
    \ letters.length) {\n            val letter = letters[i]\n            if (map.contains(letter))\
    \ {\n                map.put(letter, map.get(letter) + 1)\n            } else\
    \ {\n                map.put(letter, 1l)\n            }\n        }\n        return\
    \ map", "        val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ -> letter.toLowerCase()).collectAsMap()\n        val maxCount = counts.values().max()\n\
    \        val maxCountLetter = counts.keySet().filter(letter -> counts.get(letter)\
    \ == maxCount).head()\n        val maxCountCount = counts.get(maxCountLetter)\n\
    \        val maxCountCountLetters = counts.keySet().filter(letter -> counts.get(letter)\
    \ == maxCountCount).collect(Collectors.toList())\n        val maxCountCountLettersMap\
    \ = maxCountCountLetters.map(letter -> letter.toLowerCase()).collectAsMap()\n\
    \        return maxCountCountLettersMap", "        val result = mutable.HashMap()\n\
    \        for (i <- 0 until test.length) {\n            val c = test.charAt(i)\n\
    \            if (result.contains(c)) {\n                result.put(c, result.get(c)\
    \ + 1)\n            } else {\n                result.put(c, 1)\n            }\n\
    \        }\n        result", "        val letters = test.split(\" \")\n      \
    \  val map = mutable.HashMap[String,Long]()\n        for (i <- 0 until letters.length)\
    \ {\n            val letter = letters[i]\n            if (map.contains(letter))\
    \ {\n                map.put(letter, map.get(letter) + 1)\n            } else\
    \ {\n                map.put(letter, 1l)\n            }\n        }\n        return\
    \ map", "        val letters = test.split(\" \")\n        val counts = mutable.HashMap[String,Long]()\n\
    \        for (i <- 0 until letters.length) {\n            val letter = letters[i]\n\
    \            if (counts.contains(letter)) {\n                counts.put(letter,\
    \ counts.get(letter) + 1)\n            } else {\n                counts.put(letter,\
    \ 1l)\n            }\n        }\n        counts", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter => letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCounts = counts.filter(count\
    \ => count == maxCount).toMap(key => key.toLowerCase())\n        val maxCountsMap\
    \ = maxCounts.map(key => key.toLowerCase()).toMap(key => key)\n        return\
    \ maxCountsMap", "        val letters = test.split(\" \")\n        val counts\
    \ = letters.map(letter -> letter.toLowerCase()).distinct().count()\n        val\
    \ maxCount = counts.max()\n        val maxCounts = counts.filter(count -> count\
    \ == maxCount).toMap(key -> key, key -> 1l)\n        val maxCountsMap = maxCounts.mapValues(count\
    \ -> count + 1)\n        return maxCountsMap", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter => letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCounts = counts.filter(count\
    \ => count == maxCount).toMap(key => key)\n        val maxCountsMap = maxCounts.map(counts\
    \ => counts.keys().toMap(key => key))\n        val maxCountsMap2 = maxCountsMap.map(counts\
    \ => counts.keys().toMap(key => key))\n        val maxCountsMap3 = maxCountsMap2.map(counts\
    \ => counts.keys().toMap(key => key))\n        val maxCountsMap4 = maxCountsMap3.map(counts\
    \ => counts.keys().toMap(key => key))\n        val maxCountsMap5 = maxCountsMap4.map(counts\
    \ => counts.keys().toMap(key => key))\n        val maxCountsMap6 = maxCountsMap5.map(counts\
    \ => counts.keys().toMap(key => key))\n        val maxCountsMap7 = maxCountsMap6.map(counts\
    \ => counts.keys().toMap(key => key))\n        val maxCountsMap8 = maxCountsMap7.map(counts\
    \ => counts.keys().toMap(key => key))\n        val maxCountsMap9 = maxCountsMap8.map(counts\
    \ => counts.keys().toMap(key => key))\n        val maxCountsMap10 = maxCountsMap9.map(counts\
    \ => counts.keys().toMap(key => key))\n        val maxCountsMap11 = maxCountsMap10.map(counts\
    \ => counts.keys().toMap(key => key))\n        val maxCountsMap12 = maxCountsMap11.map(counts\
    \ => counts.keys().toMap(key => key))\n        val maxCountsMap13 = maxCountsMap12.map(counts\
    \ => counts.keys().toMap(key => key))\n        val maxCountsMap14 = maxCountsMap13.map(counts\
    \ => counts.keys().toMap(key => key))\n        val maxCountsMap15 = maxCountsMap14",
  "        val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ -> letter.toLowerCase()).distinct().count()\n        val maxCount = counts.max()\n\
    \        val maxCountLetter = counts.filter(count -> count == maxCount).head()\n\
    \        val maxCountCount = counts.filter(count -> count == maxCount).head()\n\
    \        val maxCountLetterCount = counts.filter(count -> count == maxCountLetter).head()\n\
    \        val maxCountLetterCountCount = counts.filter(count -> count == maxCountLetterCount).head()\n\
    \        val maxCountLetterCountCountCount = counts.filter(count -> count == maxCountLetterCountCount).head()\n\
    \        val maxCountLetterCountCountCountCount = counts.filter(count -> count\
    \ == maxCountLetterCountCountCount).head()\n        val maxCountLetterCountCountCountCountCount\
    \ = counts.filter(count -> count == maxCountLetterCountCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCountCount = counts.filter(count\
    \ -> count == maxCountLetterCountCountCountCountCount).head()\n        val maxCountLetterCountCountCountCountCountCountCount\
    \ = counts.filter(count -> count == maxCountLetterCountCountCountCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCountCountCountCount = counts.filter(count\
    \ -> count == maxCountLetterCountCountCountCountCountCountCount).head()\n    \
    \    val maxCountLetterCountCountCountCountCountCountCountCountCount = counts.filter(count\
    \ -> count == maxCountLetterCountCountCountCountCountCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCountCountCountCountCountCount\
    \ = counts.filter(count -> count == maxCountLetterCountCountCountCountCountCountCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCountCountCountCountCountCountCount\
    \ = counts.filter(count -> count == maxCountLetterCountCountCountCountCountCountCountCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = counts.filter(count -> count == maxCountLetterCountCountCountCountCountCountCountCountCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = counts.filter(count -> count == maxCountLetterCountCount", "        var letters\
    \ = test.split(\" \")\n        var counts = mutable.HashMap.empty()\n        for\
    \ (var letter : letters) {\n            counts = counts.updated(letter, 1)\n \
    \       }\n        return counts", "        val letters = test.split(\" \")\n\
    \        val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCounts = counts.filter(count\
    \ -> count == maxCount).toSeq\n        val maxCountsMap = maxCounts.map(count\
    \ -> count.toString()).toMap\n        val maxCountsMap2 = maxCountsMap.filter(count\
    \ -> count.length() == 1).toMap\n        val maxCountsMap3 = maxCountsMap2.filter(count\
    \ -> count.startsWith(\"a\") || count.startsWith(\"b\") || count.startsWith(\"\
    c\")).toMap\n        val maxCountsMap4 = maxCountsMap3.filter(count -> count.startsWith(\"\
    a\") || count.startsWith(\"b\") || count.startsWith(\"c\")).toMap\n        val\
    \ maxCountsMap5 = maxCountsMap4.filter(count -> count.startsWith(\"a\") || count.startsWith(\"\
    b\") || count.startsWith(\"c\")).toMap\n        val maxCountsMap6 = maxCountsMap5.filter(count\
    \ -> count.startsWith(\"a\") || count.startsWith(\"b\") || count.startsWith(\"\
    c\")).toMap\n        val maxCountsMap7 = maxCountsMap6.filter(count -> count.startsWith(\"\
    a\") || count.startsWith(\"b\") || count.startsWith(\"c\")).toMap\n        val\
    \ maxCountsMap8 = maxCountsMap7.filter(count -> count.startsWith(\"a\") || count.startsWith(\"\
    b\") || count.startsWith(\"c\")).toMap\n        val maxCountsMap9 = maxCountsMap8.filter(count\
    \ -> count.startsWith(\"a\") || count.startsWith(\"b\") || count.startsWith(\"\
    c\")).toMap\n        val maxCountsMap10 = maxCountsMap9.filter(count -> count.startsWith(\"\
    a\") || count.startsWith(\"b\") || count.startsWith(\"c\")).toMap\n        val\
    \ maxCountsMap11 = maxCountsMap", "        val letters = test.split(\" \")\n \
    \       val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCountLetters = counts.filter(count\
    \ -> count == maxCount).map(count -> letters.filter(letter -> letter.toLowerCase().equals(count)).head()).toList()\n\
    \        val result = maxCountLetters.map(letter -> letter.toLowerCase() + \"\
    :\" + count)\n        result", "        val letters = test.split(\" \")\n    \
    \    val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCounts = counts.filter(count\
    \ -> count == maxCount).toMap(key -> key)\n        val maxCountsMap = maxCounts.map(key\
    \ -> key.toLowerCase())\n        return maxCountsMap", "        val letters =\
    \ test.split(\" \")\n        val counts = letters.map(letter => letter.toLowerCase()).map(letter\
    \ => letter.count()).reduce(0l, (a, b) => a + b)\n        val maxCount = counts.max()\n\
    \        val maxCountLetters = counts.filter(count => count == maxCount).map(count\
    \ => letters.find(letter => letter.count() == count)).toList\n        val maxCountLettersMap\
    \ = maxCountLetters.map(letter => letter.toLowerCase()).toMap(letter => letter)\n\
    \        val maxCountLettersMapKeys = maxCountLettersMap.keys().toList\n     \
    \   val maxCountLettersMapValues = maxCountLettersMap.values().toList\n      \
    \  val maxCountLettersMapList = maxCountLettersMap.toSeq\n        val maxCountLettersMapSeq\
    \ = maxCountLettersMapList.toSeq\n        val maxCountLettersMapSeqIterator =\
    \ maxCountLettersMapSeq.iterator()\n        val maxCountLettersMapSeqIteratorValue\
    \ = maxCountLettersMapSeqIterator.next()\n        val maxCountLettersMapSeqIteratorValue2\
    \ = maxCountLettersMapSeqIterator.next()\n        val maxCountLettersMapSeqIteratorValue3\
    \ = maxCountLettersMapSeqIterator.next()\n        val maxCountLettersMapSeqIteratorValue4\
    \ = maxCountLettersMapSeqIterator.next()\n        val maxCountLettersMapSeqIteratorValue5\
    \ = maxCountLettersMapSeqIterator.next()\n        val maxCountLettersMapSeqIteratorValue6\
    \ = maxCountLettersMapSeqIterator.next()\n        val maxCountLettersMapSeqIteratorValue7\
    \ = maxCountLettersMapSeqIterator.next()\n        val maxCountLettersMapSeqIteratorValue8\
    \ = maxCountLettersMapSeqIterator.next()\n        val maxCountLettersMapSeqIteratorValue9\
    \ = maxCountLettersMapSeqIterator.next()\n        val maxCountLettersMapSeqIteratorValue10\
    \ = maxCountLettersMapSeqIterator.next()\n        val maxCountLettersMapSeqIteratorValue11\
    \ = maxCountLettersMapSeqIterator.next()\n        val", "        val letters =\
    \ test.split(\" \")\n        val counts = mutable.HashMap[String,Long]()\n   \
    \     for (i <- 0 until letters.length) {\n            val letter = letters[i]\n\
    \            counts.put(letter, counts.getOrElse(letter, 0L) + 1)\n        }\n\
    \        counts", "        val letters = test.split(\" \")\n        val counts\
    \ = letters.map(letter -> letter.toLowerCase()).distinct().count()\n        val\
    \ maxCount = counts.max()\n        val maxCountLetter = counts.filter(count ->\
    \ count == maxCount).head()\n        val maxCountCount = counts.filter(count ->\
    \ count == maxCount).head()\n        val result = counts.filter(count -> count\
    \ == maxCount).map(count -> maxCountLetter).toMap(letter -> letter)\n        return\
    \ result", "        var letters = test.split(\" \")\n        var counts = mutable.HashMap[String,Long]()\n\
    \        for(var letter : letters) {\n            counts.put(letter, counts.get(letter)\
    \ + 1)\n        }\n        counts.foreach((k, v) => {\n            if(v > 1) {\n\
    \                counts.put(k, v)\n            }\n        })\n        return counts",
  "        val result = new HashMap[String,Long]()\n        for (i <- 0 until test.length)\
    \ {\n            val c = test.charAt(i)\n            if (result.containsKey(c))\
    \ {\n                result.put(c, result.get(c) + 1)\n            } else {\n\
    \                result.put(c, 1l)\n            }\n        }\n        return result",
  "        val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ -> letter.toLowerCase()).map(letter -> letter).collect()\n        val maxCount\
    \ = counts.maxBy(letter -> letter)\n        val maxCounts = counts.filter(letter\
    \ -> letter == maxCount)\n        val maxCountsMap = maxCounts.map(letter -> letter.toLowerCase()).collectAsMap()\n\
    \        val maxCountsMap2 = maxCountsMap.entrySet().map(entry -> entry.getKey()\
    \ + \":\" + entry.getValue())\n        val maxCountsMap3 = maxCountsMap2.map(entry\
    \ -> entry.split(\":\"))\n        val maxCountsMap4 = maxCountsMap3.map(entry\
    \ -> entry[0] + \":\" + entry[1])\n        val maxCountsMap5 = maxCountsMap4.map(entry\
    \ -> entry.split(\":\"))\n        val maxCountsMap6 = maxCountsMap5.map(entry\
    \ -> entry[0])\n        val maxCountsMap7 = maxCountsMap6.map(entry -> entry[0])\n\
    \        val maxCountsMap8 = maxCountsMap7.map(entry -> entry[0])\n        val\
    \ maxCountsMap9 = maxCountsMap8.map(entry -> entry[0])\n        val maxCountsMap10\
    \ = maxCountsMap9.map(entry -> entry[0])\n        val maxCountsMap11 = maxCountsMap10.map(entry\
    \ -> entry[0])\n        val maxCountsMap12 = maxCountsMap11.map(entry -> entry[0])\n\
    \        val maxCountsMap13 = maxCountsMap12.map(entry -> entry[0])\n        val\
    \ maxCountsMap14 = maxCountsMap13.map(entry -> entry[0])\n        val maxCountsMap15\
    \ = maxCountsMap14.map(entry -> entry[0])\n        val maxCountsMap16 = maxCountsMap15.map(entry\
    \ -> entry[0])\n        val maxCountsMap17 = maxCountsMap16.map(entry -> entry[0])\n\
    \        val maxCountsMap18 = maxCountsMap17.map(entry -> entry[0])\n", "    \
    \    val letters = test.split(\" \")\n        val counts = mutable.HashMap[String,Long]()\n\
    \        for (i <- 0 until letters.length) {\n            val letter = letters[i]\n\
    \            if (counts.contains(letter)) {\n                counts.put(letter,\
    \ counts.get(letter) + 1)\n            } else {\n                counts.put(letter,\
    \ 1l)\n            }\n        }\n        counts", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter => letter.toLowerCase()).map(letter\
    \ => letter.count()).toMap(count => count)\n        val maxCount = counts.maxBy(count\
    \ => count)\n        val maxCounts = counts.filter(count => count == maxCount)\n\
    \        val maxCountsMap = maxCounts.map(count => count.key).toMap(key => key)\n\
    \        val maxCountsMapWithCount = maxCountsMap.map(count => count + 1).toMap(count\
    \ => count)\n        val maxCountsMapWithCountAndLetter = maxCountsMapWithCount.map(count\
    \ => count + \":\" + maxCountsMapWithCount.key).toMap(count => count)\n      \
    \  return maxCountsMapWithCountAndLetter", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter => letter.toLowerCase()).map(letter\
    \ => letter.count()).toMap(count => count)\n        val maxCount = counts.max()\n\
    \        val maxCountLetter = counts.keys().filter(letter => counts.get(letter)\
    \ == maxCount).head()\n        val maxCountCount = counts.get(maxCountLetter)\n\
    \        val maxCountLetters = counts.keys().filter(letter => counts.get(letter)\
    \ == maxCountCount).toList()\n        val maxCountLettersMap = maxCountLetters.map(letter\
    \ => letter.toLowerCase())\n        return maxCountLettersMap", "        val letters\
    \ = test.split(\" \")\n        val counts = mutable.HashMap[String,Long]()\n \
    \       for (i <- 0 until letters.length) {\n            val letter = letters[i]\n\
    \            counts.put(letter, counts.getOrElse(letter, 0L) + 1)\n        }\n\
    \        counts", "        var result = Map[String,Long]()\n        var letters\
    \ = test.split(\" \")\n        for (var letter : letters) {\n            var count\
    \ = result.getOrElse(letter, 0L)\n            result = result.put(letter, count\
    \ + 1)\n        }\n        return result", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCounts = counts.filter(count\
    \ -> count == maxCount).toMap(key -> key.toLowerCase())\n        val maxCountsMap\
    \ = maxCounts.map(key -> key + \":\" + maxCounts.get(key))\n        return maxCountsMap",
  "        val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ => letter.toLowerCase()).distinct().count()\n        val maxCount = counts.max()\n\
    \        val maxCountLetters = counts.filter(count => count == maxCount).map(count\
    \ => letters.filter(letter => letter.toLowerCase() == count).head())\n       \
    \ val result = maxCountLetters.map(letter => letter.toLowerCase() + \":\" + count).toMap(key\
    \ => key.split(\":\")[0], value => Long.parseLong(key.split(\":\")[1]))\n    \
    \    return result", "        val letters = test.split(\" \")\n        val counts\
    \ = letters.map(letter -> letter.toLowerCase()).distinct().count()\n        val\
    \ maxCount = counts.max()\n        val maxCountLetter = counts.filter(count ->\
    \ count == maxCount).head()\n        val maxCountCount = counts.filter(count ->\
    \ count == maxCount).head()\n        val maxCountCountLetter = counts.filter(count\
    \ -> count == maxCount).head()\n        val result = counts.filter(count -> count\
    \ == maxCount).map(count -> maxCountLetter + \":\" + count).collect()\n      \
    \  return result.head()", "        val letters = test.split(\" \")\n        val\
    \ counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n  \
    \      val maxCount = counts.max()\n        val maxCountLetter = counts.filter(count\
    \ -> count == maxCount).head()\n        val maxCountCount = counts.filter(count\
    \ -> count == maxCount).head()\n        val maxCountLetterCount = counts.filter(count\
    \ -> count == maxCountLetter).head()\n        val maxCountLetterCountCount = counts.filter(count\
    \ -> count == maxCountLetterCount).head()\n        val maxCountLetterCountCountCount\
    \ = counts.filter(count -> count == maxCountLetterCountCount).head()\n       \
    \ val maxCountLetterCountCountCountCount = counts.filter(count -> count == maxCountLetterCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCount = counts.filter(count ->\
    \ count == maxCountLetterCountCountCountCount).head()\n        val maxCountLetterCountCountCountCountCountCount\
    \ = counts.filter(count -> count == maxCountLetterCountCountCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCountCountCount = counts.filter(count\
    \ -> count == maxCountLetterCountCountCountCountCountCount).head()\n        val\
    \ maxCountLetterCountCountCountCountCountCountCountCount = counts.filter(count\
    \ -> count == maxCountLetterCountCountCountCountCountCountCount).head()\n    \
    \    val maxCountLetterCountCountCountCountCountCountCountCountCount = counts.filter(count\
    \ -> count == maxCountLetterCountCountCountCountCountCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCountCountCountCountCountCount\
    \ = counts.filter(count -> count == maxCountLetterCountCountCountCountCountCountCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCountCountCountCountCountCountCount\
    \ = counts.filter(count -> count == maxCountLetterCountCountCountCountCountCountCountCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = counts.filter(count -> count == maxCountLetterCountCountCountCountCountCountCountCountCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = counts.filter(count -> count == maxCountLetterCountCount", "        val letters\
    \ = test.split(\" \")\n        val counts = letters.map(letter => letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCountLetter = counts.filter(count\
    \ => count == maxCount).head()\n        val maxCountCount = counts.filter(count\
    \ => count == maxCount).head()\n        val maxCountLetterCount = counts.filter(count\
    \ => count == maxCountLetter).head()\n        val maxCountLetterCountCount = counts.filter(count\
    \ => count == maxCountLetterCount).head()\n        val maxCountLetterCountCountCount\
    \ = counts.filter(count => count == maxCountLetterCountCount).head()\n       \
    \ val maxCountLetterCountCountCountCount = counts.filter(count => count == maxCountLetterCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCount = counts.filter(count =>\
    \ count == maxCountLetterCountCountCountCount).head()\n        val maxCountLetterCountCountCountCountCountCount\
    \ = counts.filter(count => count == maxCountLetterCountCountCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCountCountCount = counts.filter(count\
    \ => count == maxCountLetterCountCountCountCountCountCount).head()\n        val\
    \ maxCountLetterCountCountCountCountCountCountCountCount = counts.filter(count\
    \ => count == maxCountLetterCountCountCountCountCountCountCount).head()\n    \
    \    val maxCountLetterCountCountCountCountCountCountCountCountCount = counts.filter(count\
    \ => count == maxCountLetterCountCountCountCountCountCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCountCountCountCountCountCount\
    \ = counts.filter(count => count == maxCountLetterCountCountCountCountCountCountCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCountCountCountCountCountCountCount\
    \ = counts.filter(count => count == maxCountLetterCountCountCountCountCountCountCountCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = counts.filter(count => count == maxCountLetterCountCountCountCountCountCountCountCountCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = counts.filter(count => count == maxCountLetterCountCount", "        val letters\
    \ = test.split(\" \")\n        val result = mutable.HashMap[String,Long]()\n \
    \       for (i <- 0 until letters.length) {\n            val letter = letters[i]\n\
    \            if (result.contains(letter)) {\n                result.update(letter,\
    \ result.get(letter) + 1)\n            } else {\n                result.put(letter,\
    \ 1l)\n            }\n        }\n        return result", "        val letters\
    \ = test.split(\" \")\n        val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCounts = counts.filter(count\
    \ -> count == maxCount).toMap(count -> letter)\n        val maxCountsMap = maxCounts.map(letter\
    \ -> letter + \":\" + count)\n        return maxCountsMap", "        val letters\
    \ = test.split(\" \")\n        val map = mutable.HashMap[String,Long]()\n    \
    \    for (i <- 0 until letters.length) {\n            val letter = letters[i]\n\
    \            if (!map.contains(letter)) {\n                map.put(letter, 1l)\n\
    \            } else {\n                map.put(letter, map.get(letter) + 1)\n\
    \            }\n        }\n        return map", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCounts = counts.filter(count\
    \ -> count == maxCount).toMap(String::valueOf)\n        val maxCountsMap = maxCounts.mapValues(count\
    \ -> count + 1)\n        return maxCountsMap", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter -> letter.toLowerCase()).map(letter\
    \ -> letter.charAt(0)).distinct().countBy\n        counts.filter(count -> count\
    \ > 1).map(count -> count._1).toMap", "        val letters = test.split(\" \"\
    )\n        val counts = letters.map(letter -> letter.toLowerCase()).map(letter\
    \ -> letter).collect()\n        val maxCount = counts.maxBy(letter -> letter)\n\
    \        val maxCounts = counts.filter(letter -> letter == maxCount)\n       \
    \ val maxCountsMap = maxCounts.map(letter -> letter.toLowerCase()).collectAsMap()\n\
    \        val maxCountsMap2 = maxCountsMap.entrySet().map(entry -> entry.getKey()\
    \ + \":\" + entry.getValue())\n        val maxCountsMap3 = maxCountsMap2.map(entry\
    \ -> entry.split(\":\")[0]).collectAsMap()\n        return maxCountsMap3", " \
    \       val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ -> letter.toLowerCase()).map(letter -> letter.charAt(0)).distinct().toMap(letter\
    \ -> letter)\n        val maxCount = counts.maxBy(letter -> counts.get(letter).get())\n\
    \        val maxCounts = counts.filter(letter -> counts.get(letter).get() == maxCount.get())\n\
    \        return maxCounts", "        var letters = test.split(\" \")\n       \
    \ var result = mutable.HashMap()\n        for (var letter : letters) {\n     \
    \       if (letter.length() == 1) {\n                result.put(letter, 1l)\n\
    \            } else {\n                var count = result.getOrElse(letter, 0l)\n\
    \                result.put(letter, count + 1)\n            }\n        }\n   \
    \     return result", "        val letters = test.split(\" \")\n        val counts\
    \ = letters.map(letter -> letter.toLowerCase()).distinct().count()\n        val\
    \ maxCount = counts.max()\n        val maxLetters = counts.filter(count -> count\
    \ == maxCount).map(count -> letters.filter(letter -> letter.toLowerCase().equals(count)).head()).toSeq()\n\
    \        val result = maxLetters.map(letter -> letter.toLowerCase() + \":\" +\
    \ count).toMap(key -> key.split(\":\")[0], value -> Long.parseLong(key.split(\"\
    :\")[1]))\n        return result", "        var letters = test.split(\" \")\n\
    \        var result = mutable.HashMap.empty()\n        for (var letter : letters)\
    \ {\n            var count = result.getOrElse(letter, 0L)\n            result\
    \ = result.put(letter, count + 1)\n        }\n        return result", "      \
    \  val letters = test.split(\" \")\n        val counts = letters.map(letter =>\
    \ letter.toLowerCase()).map(letter => letter.count()).toMap(count => count)\n\
    \        val maxCount = counts.max()\n        val maxCountLetter = counts.keys().filter(letter\
    \ => counts.get(letter) == maxCount).head()\n        val maxCountCount = counts.get(maxCountLetter)\n\
    \        val maxCountCountLetter = maxCountLetter.toLowerCase()\n        val maxCountCountLetterCount\
    \ = counts.get(maxCountLetter)\n        val maxCountCountLetterCountCount = maxCountCountLetterCount.count()\n\
    \        val maxCountCountLetterCountCountCount = maxCountCountLetterCountCount.count()\n\
    \        val maxCountCountLetterCountCountCountCount = maxCountCountLetterCountCountCount.count()\n\
    \        val maxCountCountLetterCountCountCountCountCount = maxCountCountLetterCountCountCountCount.count()\n\
    \        val maxCountCountLetterCountCountCountCountCountCount = maxCountCountLetterCountCountCountCountCount.count()\n\
    \        val maxCountCountLetterCountCountCountCountCountCountCount = maxCountCountLetterCountCountCountCountCountCount.count()\n\
    \        val maxCountCountLetterCountCountCountCountCountCountCountCount = maxCountCountLetterCountCountCountCountCountCountCount.count()\n\
    \        val maxCountCountLetterCountCountCountCountCountCountCountCountCount\
    \ = maxCountCountLetterCountCountCountCountCountCountCountCount.count()\n    \
    \    val maxCountCountLetterCountCountCountCountCountCountCountCountCountCount\
    \ = maxCountCountLetterCountCountCountCountCountCountCountCountCount.count()\n\
    \        val maxCountCountLetterCountCountCountCountCountCountCountCountCountCountCount\
    \ = maxCountCountLetterCountCountCountCountCountCountCountCountCountCount.count()\n\
    \        val maxCountCountLetterCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = maxCountCountLetterCountCountCountCountCountCountCountCountCountCountCount.count()\n\
    \        val maxCountCountLetterCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = maxCountCountLetterCountCountCountCountCountCountCountCountCountCountCountCount.count()\n\
    \        val maxCountCountLetterCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = maxCountCountLetterCountCountCountCountCountCountCountCountCount", "     \
    \   val letters = test.split(\" \")\n        val counts = letters.map(letter =>\
    \ letter.toLowerCase()).map(letter => letter.count()).toMap(count => count)\n\
    \        val maxCount = counts.max()\n        val maxCountLetter = counts.keys().filter(letter\
    \ => counts.get(letter) == maxCount).head()\n        val maxCountCount = counts.get(maxCountLetter)\n\
    \        val maxCountLetters = counts.keys().filter(letter => counts.get(letter)\
    \ == maxCountCount).toList()\n        val maxCountLettersMap = maxCountLetters.map(letter\
    \ => letter.toLowerCase())\n        val maxCountLettersMapMap = maxCountLettersMap.map(letter\
    \ => letter.count())\n        val maxCountLettersMapMapMap = maxCountLettersMapMap.map(count\
    \ => count.toMap(count => count))\n        val maxCountLettersMapMapMapMap = maxCountLettersMapMapMap.map(counts\
    \ => counts)\n        val maxCountLettersMapMapMapMapMap = maxCountLettersMapMapMapMapMap.map(counts\
    \ => counts)\n        val maxCountLettersMapMapMapMapMapMap = maxCountLettersMapMapMapMapMapMap.map(counts\
    \ => counts)\n        val maxCountLettersMapMapMapMapMapMapMap = maxCountLettersMapMapMapMapMapMapMap.map(counts\
    \ => counts)\n        val maxCountLettersMapMapMapMapMapMapMapMap = maxCountLettersMapMapMapMapMapMapMapMap.map(counts\
    \ => counts)\n        val maxCountLettersMapMapMapMapMapMapMapMapMap = maxCountLettersMapMapMapMapMapMapMapMapMap.map(counts\
    \ => counts)\n        val maxCountLettersMapMapMapMapMapMapMapMapMapMap = maxCountLettersMapMapMapMapMapMapMapMapMapMap.map(counts\
    \ => counts)\n        val maxCountLettersMapMapMapMapMapMapMapMapMapMapMap = maxCountLettersMapMapMapMapMapMapMapMapMapMapMap.map(counts\
    \ => counts)\n        val maxCountLettersMapMapMapMapMapMapMapMapMapMapMapMap\
    \ = maxCountLettersMapMapMapMap", "        val letters = test.split(\" \")\n \
    \       val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCounts = counts.filter(count\
    \ -> count == maxCount).toMap(String::toLowerCase)\n        val maxCountsMap =\
    \ maxCounts.mapValues(count -> count + 1)\n        return maxCountsMap", "   \
    \     val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ => letter.toLowerCase()).map(letter => letter.count()).toMap(count => count)\n\
    \        val maxCount = counts.max()\n        val maxCountLetter = counts.keys().filter(letter\
    \ => counts.get(letter) == maxCount).head()\n        val maxCountCount = counts.get(maxCountLetter)\n\
    \        val maxCountLetters = counts.keys().filter(letter => counts.get(letter)\
    \ == maxCountCount).toList()\n        val maxCountLettersMap = maxCountLetters.map(letter\
    \ => letter.toLowerCase()).toMap(letter => letter)\n        val maxCountLettersMapWithCount\
    \ = maxCountLettersMap.map(letter => letter + \":\" + counts.get(letter)).toMap(letter\
    \ => letter)\n        return maxCountLettersMapWithCount", "        val result\
    \ = mutable.HashMap()\n        for (i <- 0 until test.length) {\n            val\
    \ c = test.charAt(i)\n            if (!result.contains(c)) {\n               \
    \ result.put(c, 1l)\n            } else {\n                result.put(c, result.get(c)\
    \ + 1)\n            }\n        }\n        return result", "        var result\
    \ = Map.empty()\n        var letters = test.split(\" \")\n        for (var i =\
    \ 0; i < letters.length; i++) {\n            var letter = letters[i]\n       \
    \     var count = result.getOrElse(letter, 0l)\n            result = result.put(letter,\
    \ count + 1)\n        }\n        return result", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter => letter.toLowerCase()).collectAsMap()\n\
    \        val maxCount = counts.maxBy(letter => counts.get(letter).toLong)\n  \
    \      val maxCounts = counts.filter(letter => counts.get(letter).toLong == maxCount.get(letter).toLong)\n\
    \        maxCounts.foreach(counts::remove)\n        return counts", "        val\
    \ letters = test.split(\" \")\n        val counts = letters.map(letter => letter.toLowerCase()).collectAsMap()\n\
    \        val maxCount = counts.values().max()\n        val maxCounts = counts.filter(count\
    \ => count == maxCount).map(count => count.key)\n        val maxCountsMap = counts.filter(count\
    \ => count == maxCount).map(count => count.key).collectAsMap()\n        return\
    \ maxCountsMap", "        var result = new HashMap[String,Long]()\n        var\
    \ count = 0\n        for (var c : test.toLowerCase().split(\" \")) {\n       \
    \     if (result.containsKey(c)) {\n                result.put(c, result.get(c)\
    \ + 1)\n            } else {\n                result.put(c, 1l)\n            }\n\
    \            count += 1\n        }\n        if (count == 0) {\n            return\
    \ result\n        }\n        var max = result.entrySet().stream().max((e1, e2)\
    \ -> e1.getValue().compareTo(e2.getValue())).get().getKey()\n        result.put(max,\
    \ result.get(max) - 1)\n        return result", "        val letters = test.split(\"\
    \ \")\n        val map = mutable.HashMap[String,Long]()\n        for (i <- 0 until\
    \ letters.length) {\n            val letter = letters[i]\n            if (map.contains(letter))\
    \ {\n                map.put(letter, map.get(letter) + 1)\n            } else\
    \ {\n                map.put(letter, 1l)\n            }\n        }\n        return\
    \ map", "        val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ -> letter.toLowerCase()).distinct().count()\n        val maxCount = counts.max()\n\
    \        val maxCountLetter = counts.filter(count -> count == maxCount).head()\n\
    \        val maxCountCount = counts.filter(count -> count == maxCount).head()\n\
    \        val result = letters.map(letter -> letter.toLowerCase()).filter(letter\
    \ -> letter == maxCountLetter).map(letter -> letter + \":\" + maxCountCount).collect()\n\
    \        return result.toMap(String::toString, String::toString)", "        var\
    \ letters = test.split(\" \")\n        var counts = mutable.HashMap[String,Long]()\n\
    \        for (var letter : letters) {\n            counts.put(letter, counts.get(letter)\
    \ + 1)\n        }\n        var max = counts.max\n        var maxCount = max._2\n\
    \        var maxLetter = max._1\n        var result = mutable.HashMap[String,Long]()\n\
    \        for (var letter : counts.keys()) {\n            if (counts.get(letter)\
    \ == maxCount) {\n                result.put(letter, counts.get(letter))\n   \
    \         }\n        }\n        return result", "        var letters = test.split(\"\
    \ \")\n        var counts = mutable.HashMap[String,Long]()\n        for (var letter\
    \ : letters) {\n            counts.put(letter, counts.get(letter) + 1)\n     \
    \   }\n        var maxCount = counts.max\n        var maxCounts = mutable.HashMap[String,Long]()\n\
    \        for (var key : counts.keys) {\n            if (counts.get(key) == maxCount)\
    \ {\n                maxCounts.put(key, counts.get(key))\n            }\n    \
    \    }\n        return maxCounts", "        val letters = test.split(\" \")\n\
    \        val counts = letters.map(letter -> letter.toLowerCase()).map(letter ->\
    \ letter).distinct().count()\n        val maxCount = counts.max()\n        val\
    \ maxCountLetter = counts.filter(count -> count == maxCount).map(count -> letter).findFirst().get()\n\
    \        val maxCountCount = counts.filter(count -> count == maxCount).map(count\
    \ -> count).findFirst().get()\n        val maxCountCountLetter = counts.filter(count\
    \ -> count == maxCountCount).map(count -> letter).findFirst().get()\n        val\
    \ map = counts.filter(count -> count == maxCountCount).map(count -> letter).collect().toMap(letter\
    \ -> letter)\n        map.put(maxCountLetter, maxCountCount)\n        map.put(maxCountCountLetter,\
    \ maxCount)\n        return map", "        var result = mutable.HashMap()\n  \
    \      for (var i = 0; i < test.length(); i++) {\n            var c = test.charAt(i)\n\
    \            if (result.contains(c)) {\n                result.put(c, result.get(c)\
    \ + 1)\n            } else {\n                result.put(c, 1l)\n            }\n\
    \        }\n        return result", "        var result = Map[String,Long]()\n\
    \        var letters = test.split(\" \")\n        for (var i = 0; i < letters.length;\
    \ i++) {\n            var letter = letters[i]\n            if (result.contains(letter))\
    \ {\n                result.get(letter) += 1\n            } else {\n         \
    \       result.put(letter, 1)\n            }\n        }\n        return result",
  "        val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ -> letter.toLowerCase()).distinct().count()\n        val maxCount = counts.max()\n\
    \        val maxCounts = counts.filter(count -> count == maxCount).toSeq\n   \
    \     val maxCountsMap = maxCounts.map(count -> count.toString()).toMap\n    \
    \    val maxCountsMap2 = maxCountsMap.filter(count -> count.length() > 1).toMap\n\
    \        val maxCountsMap3 = maxCountsMap2.filter(count -> count.startsWith(\"\
    a\") || count.startsWith(\"b\") || count.startsWith(\"c\")).toMap\n        val\
    \ maxCountsMap4 = maxCountsMap3.filter(count -> count.endsWith(\"a\") || count.endsWith(\"\
    b\") || count.endsWith(\"c\")).toMap\n        val maxCountsMap5 = maxCountsMap4.filter(count\
    \ -> count.length() > 2).toMap\n        val maxCountsMap6 = maxCountsMap5.filter(count\
    \ -> count.length() > 2).toMap\n        val maxCountsMap7 = maxCountsMap6.filter(count\
    \ -> count.length() > 2).toMap\n        val maxCountsMap8 = maxCountsMap7.filter(count\
    \ -> count.length() > 2).toMap\n        val maxCountsMap9 = maxCountsMap8.filter(count\
    \ -> count.length() > 2).toMap\n        val maxCountsMap10 = maxCountsMap9.filter(count\
    \ -> count.length() > 2).toMap\n        val maxCountsMap11 = maxCountsMap10.filter(count\
    \ -> count.length() > 2).toMap\n        val maxCountsMap12 = maxCountsMap11.filter(count\
    \ -> count.length() > 2).toMap\n        val maxCountsMap13 = maxCountsMap12.filter(count\
    \ -> count.length() > 2).toMap\n        val maxCountsMap14 = maxCountsMap13.filter(count\
    \ -> count.length() > 2).toMap\n        val maxCountsMap15 = maxCountsMap14.filter(count\
    \ -> count.length() >", "        val letters = test.split(\" \")\n        val\
    \ counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n  \
    \      val maxCount = counts.max()\n        val maxCounts = counts.filter(count\
    \ -> count == maxCount).toSeq\n        val maxCountsMap = maxCounts.map(count\
    \ -> count.toString()).toMap\n        val maxCountsMapSeq = maxCountsMap.toSeq\n\
    \        val maxCountsMapSeqSeq = maxCountsMapSeq.toSeq\n        val maxCountsMapSeqSeqSeq\
    \ = maxCountsMapSeqSeq.toSeq\n        val maxCountsMapSeqSeqSeqSeq = maxCountsMapSeqSeqSeq.toSeq\n\
    \        val maxCountsMapSeqSeqSeqSeqSeq = maxCountsMapSeqSeqSeqSeq.toSeq\n  \
    \      val maxCountsMapSeqSeqSeqSeqSeqSeq = maxCountsMapSeqSeqSeqSeqSeq.toSeq\n\
    \        val maxCountsMapSeqSeqSeqSeqSeqSeqSeq = maxCountsMapSeqSeqSeqSeqSeqSeq.toSeq\n\
    \        val maxCountsMapSeqSeqSeqSeqSeqSeqSeqSeq = maxCountsMapSeqSeqSeqSeqSeqSeqSeq.toSeq\n\
    \        val maxCountsMapSeqSeqSeqSeqSeqSeqSeqSeqSeq = maxCountsMapSeqSeqSeqSeqSeqSeqSeqSeq.toSeq\n\
    \        val maxCountsMapSeqSeqSeqSeqSeqSeqSeqSeqSeqSeq = maxCountsMapSeqSeqSeqSeqSeqSeqSeqSeqSeq.toSeq\n\
    \        val maxCountsMapSeqSeqSeqSeqSeqSeqSeqSeqSeqSeqSeq = maxCountsMapSeqSeqSeqSeqSeqSeqSeqSeqSeqSeq.toSeq\n\
    \        val maxCounts", "        var result = mutable.HashMap()\n        for\
    \ (var i = 0; i < test.length(); i++) {\n            var c = test.charAt(i)\n\
    \            var count = result.getOrElse(c, 0l)\n            result = result.updated(c,\
    \ count + 1)\n        }\n        return result", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter => letter.toLowerCase()).map(letter\
    \ => letter.count()).toMap(count => count)\n        val maxCount = counts.maxBy(count\
    \ => count)\n        val maxCounts = counts.filter(count => count == maxCount)\n\
    \        val maxCountsMap = maxCounts.map(count => count.key)\n        val maxCountsMap2\
    \ = maxCountsMap.toMap(maxCountsMap2 => maxCountsMap2)\n        return maxCountsMap2",
  "        var result = mutable.HashMap.empty()\n        for (var i = 0; i < test.length();\
    \ i++) {\n            var c = test.charAt(i)\n            if (result.contains(c))\
    \ {\n                result.put(c, result.get(c) + 1)\n            } else {\n\
    \                result.put(c, 1l)\n            }\n        }\n        return result.toMap()",
  "        var letters = test.split(\" \")\n        var max = letters.length\n   \
    \     var counts = mutable.HashMap[String,Long]()\n        for (i <- 0 until max)\
    \ {\n            var letter = letters[i]\n            var count = counts.getOrElse(letter,\
    \ 0L)\n            counts = counts.put(letter, count + 1)\n        }\n       \
    \ return counts", "        var result = mutable.HashMap.empty()\n        for (var\
    \ i = 0; i < test.length(); i++) {\n            var c = test.charAt(i)\n     \
    \       if (result.contains(c)) {\n                result.update(c, result.get(c)\
    \ + 1)\n            } else {\n                result.update(c, 1)\n          \
    \  }\n        }\n        return result.toMap()", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter -> letter.toLowerCase()).collectAsMap()\n\
    \        val maxCount = counts.maxBy(letter -> counts.get(letter).get())\n   \
    \     val maxCounts = counts.filter(letter -> counts.get(letter).get() == maxCount.get())\n\
    \        return maxCounts", "        val letters = test.split(\" \")\n       \
    \ val counts = letters.map(letter => letter.toLowerCase()).map(letter => letter.count()).toMap(count\
    \ => count)\n        val maxCount = counts.maxBy(count => count)\n        val\
    \ maxCounts = counts.filter(count => count == maxCount)\n        val maxCountsMap\
    \ = maxCounts.map(count => count.key).toMap(key => key)\n        val maxCountsMapWithCount\
    \ = maxCountsMap.map(key => key + \":\" + maxCountsMap.get(key))\n        val\
    \ maxCountsMapWithCounts = maxCountsMapWithCount.map(count => count.split(\":\"\
    ))\n        val maxCountsMapWithCountsMap = maxCountsMapWithCounts.map(counts\
    \ => counts.map(count => count.toLowerCase()).toMap(count => count))\n       \
    \ return maxCountsMapWithCountsMap", "        val letters = test.split(\" \")\n\
    \        val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCounts = counts.filter(count\
    \ -> count == maxCount).toMap(key -> key)\n        val maxCountsMap = maxCounts.map(key\
    \ -> key.toLowerCase())\n        return maxCountsMap", "        val letters =\
    \ test.split(\" \")\n        val counts = letters.map(letter -> letter.toLowerCase()).map(letter\
    \ -> letter).collect(Collectors.groupingBy(letter -> letter, Collectors.counting()))\n\
    \        counts.forEach((letter, count) -> counts.put(letter, count))\n      \
    \  return counts", "        val letters = test.split(\" \")\n        val counts\
    \ = mutable.HashMap[String,Long]()\n        for (i <- 0 until letters.length)\
    \ {\n            val letter = letters[i]\n            counts.put(letter, counts.getOrElse(letter,\
    \ 0L) + 1)\n        }\n        counts", "        val letters = test.split(\" \"\
    )\n        val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCountLetters = counts.filter(count\
    \ -> count == maxCount).map(count -> letter).toList()\n        val result = maxCountLetters.map(letter\
    \ -> letter + \":\" + count).toMap(String::split)\n        return result", " \
    \       val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ -> letter.toLowerCase()).collectAsMap()\n        val maxCount = counts.maxBy(letter\
    \ -> counts.get(letter).toLong)\n        val maxCounts = counts.filter(letter\
    \ -> counts.get(letter).toLong == maxCount.get(letter).toLong)\n        val maxCountsMap\
    \ = maxCounts.collectAsMap()\n        maxCountsMap.forEach(counts::remove)\n \
    \       return counts", "        var letters = test.split(\" \")\n        var\
    \ counts = mutable.HashMap[String,Long]()\n        for (var letter : letters)\
    \ {\n            counts.put(letter, counts.getOrElse(letter, 0L) + 1)\n      \
    \  }\n        return counts", "        val letters = test.split(\" \")\n     \
    \   val counts = letters.map(letter => letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCounts = counts.filter(count\
    \ => count == maxCount).toSeq\n        val maxCountsMap = maxCounts.map(count\
    \ => count.toString()).toMap\n        val maxCountsMapWithCount = maxCountsMap.mapValues(count\
    \ => count + 1)\n        return maxCountsMapWithCount", "        val letters =\
    \ test.split(\" \")\n        val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCountLetters = counts.filter(count\
    \ -> count == maxCount).map(count -> letter).toSeq()\n        val result = maxCountLetters.map(letter\
    \ -> letter + \":\" + count).toMap(String::split)\n        return result", " \
    \       val result = mutable.HashMap.empty()\n        for (i <- test.toLowerCase.iterator())\
    \ {\n            val count = result.getOrElse(i.toString(), 0L)\n            result\
    \ = result.put(i.toString(), count + 1)\n        }\n        result", "       \
    \ val letters = test.split(\" \")\n        val counts = mutable.HashMap[String,Long]()\n\
    \        for (i <- 0 until letters.length) {\n            val letter = letters[i]\n\
    \            if (!counts.contains(letter)) {\n                counts.put(letter,\
    \ 1l)\n            } else {\n                counts.put(letter, counts.get(letter)\
    \ + 1)\n            }\n        }\n        counts", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCounts = counts.filter(count\
    \ -> count == maxCount).toMap(key -> key)\n        val maxCountsMap = maxCounts.map(key\
    \ -> key.toLowerCase())\n        return maxCountsMap", "        val letters =\
    \ test.split(\" \")\n        val counts = letters.map(letter -> letter.toLowerCase()).map(letter\
    \ -> letter.charAt(0)).distinct().countBy(letter -> letter)\n        val maxCount\
    \ = counts.maxBy(letter -> counts.get(letter)).get()\n        val maxCountLetters\
    \ = counts.filter(letter -> counts.get(letter) == maxCount).map(letter -> letter.toLowerCase()).toSet()\n\
    \        val result = maxCountLetters.map(letter -> letter + \":\" + counts.get(letter)).toMap(s\
    \ -> s.split(\":\")[0], s -> Long.valueOf(s.split(\":\")[1]))\n        return\
    \ result", "        val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ -> letter.toLowerCase()).distinct().count()\n        val maxCount = counts.max()\n\
    \        val maxCounts = counts.filter(count -> count == maxCount).toSeq\n   \
    \     val maxCountsMap = maxCounts.map(count -> count.toString()).toMap\n    \
    \    val maxCountsMapWithCount = maxCountsMap.mapValues(count -> count + 1)\n\
    \        return maxCountsMapWithCount", "        var letters = test.split(\" \"\
    )\n        var counts = mutable.HashMap[String,Long]()\n        for (var letter\
    \ : letters) {\n            counts.put(letter, counts.get(letter) + 1)\n     \
    \   }\n        return counts", "        val letters = test.split(\" \")\n    \
    \    val counts = mutable.HashMap[String,Long]()\n        for (i <- 0 until letters.length)\
    \ {\n            val letter = letters[i]\n            if (counts.contains(letter))\
    \ {\n                counts.put(letter, counts.get(letter) + 1)\n            }\
    \ else {\n                counts.put(letter, 1l)\n            }\n        }\n \
    \       counts", "        val letters = test.split(\" \")\n        val counts\
    \ = letters.map(letter -> letter.toLowerCase()).distinct().count()\n        val\
    \ maxCount = counts.max()\n        val maxCountLetters = counts.filter(count ->\
    \ count == maxCount).map(count -> letters.filter(letter -> letter.toLowerCase().equals(count)).head()).toList()\n\
    \        val maxCountLettersMap = maxCountLetters.map(letter -> letter.toLowerCase()).toMap(letter\
    \ -> letter, letter -> 1l)\n        return maxCountLettersMap", "        var result\
    \ = mutable.HashMap.empty()\n        for (var c : test.toLowerCase.split(\" \"\
    )) {\n            if (result.contains(c)) {\n                result.update(c,\
    \ result.get(c) + 1)\n            } else {\n                result.update(c, 1)\n\
    \            }\n        }\n        return result", "        val letters = test.split(\"\
    \ \")\n        val map = mutable.HashMap[String,Long]()\n        for (i <- 0 until\
    \ letters.length) {\n            val letter = letters[i]\n            if (map.contains(letter))\
    \ {\n                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        map", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter -> letter.toLowerCase()).collectAsMap()\n\
    \        val maxCount = counts.maxBy(letter -> counts.get(letter).get())\n   \
    \     val maxCounts = counts.filter(letter -> counts.get(letter).get() == maxCount.get())\n\
    \        return maxCounts", "        var result = Map[String,Long]()\n       \
    \ var letters = test.split(\" \")\n        for (var letter : letters) {\n    \
    \        if (result.containsKey(letter)) {\n                result.put(letter,\
    \ result.get(letter) + 1)\n            } else {\n                result.put(letter,\
    \ 1l)\n            }\n        }\n        return result", "        val letters\
    \ = test.split(\" \")\n        val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxLetters = counts.filter(count\
    \ -> count == maxCount).map(count -> letters.filter(letter -> letter.toLowerCase()\
    \ == count).head(1)).toList()\n        val result = maxLetters.map(letter -> letter.toLowerCase()).collect(Collectors.toMap(letter\
    \ -> letter, letter -> 1L))\n        return result", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter -> letter.toLowerCase()).map(letter\
    \ -> letter).collect(Collectors.groupingBy(letter -> letter, Collectors.counting()))\n\
    \        val maxCount = counts.max(Comparator.comparing(count -> count))\n   \
    \     val maxCounts = counts.filter(count -> count == maxCount).map(count -> count._2).collect(Collectors.toList())\n\
    \        val maxCountsMap = maxCounts.map(count -> count._1).collect(Collectors.toMap(count\
    \ -> count, count -> 1l))\n        val maxCountsMap2 = maxCountsMap.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey,\
    \ entry -> entry.getValue()))\n        return maxCountsMap2", "        val letters\
    \ = test.split(\" \")\n        val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCountLetters = counts.filter(count\
    \ -> count == maxCount).map(count -> letters.filter(letter -> letter.toLowerCase()\
    \ == count).head()).toList()\n        val result = maxCountLetters.map(letter\
    \ -> (letter, maxCount))\n        result.sort((a, b) -> b._2 - a._2)\n       \
    \ return result.map(tuple -> tuple._1).toMap()", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter => letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCounts = counts.filter(count\
    \ => count == maxCount).toMap(key => key)\n        val maxCountsMap = maxCounts.map(key\
    \ => key.toLowerCase())\n        return maxCountsMap", "        val letters =\
    \ test.split(\" \")\n        val counts = letters.map(letter -> letter.toLowerCase()).map(letter\
    \ -> letter.charAt(0)).distinct().count()\n        val maxCount = counts.max()\n\
    \        val maxCounts = counts.filter(count -> count == maxCount).toMap(key ->\
    \ key.toString())\n        val maxCountsMap = maxCounts.map(key -> key + \":\"\
    \ + maxCounts.get(key))\n        return maxCountsMap", "        val letters =\
    \ test.split(\" \")\n        val counts = mutable.HashMap[String,Long]()\n   \
    \     for (i <- 0 until letters.length) {\n            val letter = letters(i)\n\
    \            if (counts.contains(letter)) {\n                counts.put(letter,\
    \ counts.get(letter) + 1)\n            } else {\n                counts.put(letter,\
    \ 1l)\n            }\n        }\n        counts", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter -> letter.toLowerCase()).map(letter\
    \ -> letter).distinct().count()\n        val maxCount = counts.max()\n       \
    \ val maxLetters = counts.filter(count -> count == maxCount).map(count -> letters.filter(letter\
    \ -> letter.toLowerCase() == count).head()).toList()\n        val result = maxLetters.map(letter\
    \ -> letter.toLowerCase()).collect(Collectors.toMap(letter -> letter, letter ->\
    \ 1l))\n        return result", "        val letters = test.split(\" \")\n   \
    \     val counts = letters.map(letter => letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCounts = counts.filter(count\
    \ => count == maxCount).toSeq\n        val maxCountsMap = maxCounts.map(count\
    \ => count.toString()).toMap\n        val maxCountsMapWithCount = maxCountsMap.mapValues(count\
    \ => count + 1)\n        val maxCountsMapWithCountWithMax = maxCountsMapWithCount.mapValues(count\
    \ => count.max())\n        return maxCountsMapWithCountWithMax", "        val\
    \ letters = test.split(\" \")\n        val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCountLetters = counts.filter(count\
    \ -> count == maxCount).map(count -> letters.filter(letter -> letter.toLowerCase().equals(count)).head()).toList()\n\
    \        val result = maxCountLetters.map(letter -> letter.toLowerCase() + \"\
    :\" + count).toMap(key -> key.split(\":\")[0], value -> Long.parseLong(key.split(\"\
    :\")[1]))\n        return result", "        val letters = test.split(\" \")\n\
    \        val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCountLetter = counts.filter(count\
    \ -> count == maxCount).head()\n        val maxCountCount = counts.filter(count\
    \ -> count == maxCount).head()\n        val result = letters.map(letter -> letter.toLowerCase()).collect(Collectors.toMap(letter\
    \ -> letter, letter -> 1l))\n        result.put(maxCountLetter, maxCountCount)\n\
    \        return result", "        var result = Map[String,Long]()\n        var\
    \ letters = test.split(\" \")\n        for (var i = 0; i < letters.length; i++)\
    \ {\n            var letter = letters[i]\n            var count = result.getOrElse(letter,\
    \ 0l)\n            result = result.put(letter, count + 1)\n        }\n       \
    \ return result", "        var result = mutable.HashMap.empty()\n        for (var\
    \ i = 0; i < test.length(); i++) {\n            var c = test.charAt(i)\n     \
    \       if (result.contains(c)) {\n                result.update(c, result.get(c)\
    \ + 1)\n            } else {\n                result.update(c, 1)\n          \
    \  }\n        }\n        return result.toMap()", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter -> letter.toLowerCase()).map(letter\
    \ -> letter.charAt(0)).distinct().toMap(letter -> letter)\n        val maxCount\
    \ = counts.maxBy(letter -> counts.get(letter).get())\n        val maxCounts =\
    \ counts.filter(letter -> counts.get(letter).equals(maxCount)).map(letter -> letter).toMap(letter\
    \ -> letter)\n        return maxCounts", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter => letter.toLowerCase()).map(letter\
    \ => letter.count()).toMap(count => count)\n        val maxCount = counts.maxBy(count\
    \ => count)\n        val maxCounts = counts.filter(count => count == maxCount)\n\
    \        val maxCountsMap = maxCounts.map(count => count._1).toMap(count => count)\n\
    \        val maxCountsMapKeys = maxCountsMap.keys()\n        val maxCountsMapValues\
    \ = maxCountsMap.values()\n        val maxCountsMapValuesArray = maxCountsMapValues.toArray\n\
    \        val maxCountsMapValuesArrayLength = maxCountsMapValuesArray.length\n\
    \        val maxCountsMapValuesArrayElement = maxCountsMapValuesArray[0]\n   \
    \     val maxCountsMapValuesArrayElement2 = maxCountsMapValuesArrayElement._1\n\
    \        val maxCountsMapValuesArrayElement2Length = maxCountsMapValuesArrayElement2.length\n\
    \        val maxCountsMapValuesArrayElement2Element = maxCountsMapValuesArrayElement2[0]\n\
    \        val maxCountsMapValuesArrayElement2Element2 = maxCountsMapValuesArrayElement2Element._1\n\
    \        val maxCountsMapValuesArrayElement2Element2Length = maxCountsMapValuesArrayElement2Element2.length\n\
    \        val maxCountsMapValuesArrayElement2Element2Element = maxCountsMapValuesArrayElement2Element2[0]\n\
    \        val maxCountsMapValuesArrayElement2Element2Element2 = maxCountsMapValuesArrayElement2Element2Element._1\n\
    \        val maxCountsMapValuesArrayElement2Element2Element2Length = maxCountsMapValuesArrayElement2Element2Element2.length\n\
    \        val maxCountsMapValuesArrayElement2Element2Element2Element = maxCountsMapValuesArrayElement2Element2Element2[0]\n\
    \        val maxCountsMapValuesArrayElement2Element2Element2Element2 = maxCountsMapValuesArrayElement2Element2Element2Element._1\n\
    \        val maxCountsMapValuesArrayElement2Element2Element2Element2Length = maxCountsMapValuesArrayElement2Element2Element2Element2.length\n\
    \        val maxCountsMapValuesArrayElement2", "        val letters = test.split(\"\
    \ \")\n        val map = mutable.HashMap[String,Long]()\n        for (i <- 0 until\
    \ letters.length) {\n            val letter = letters[i]\n            if (!map.contains(letter))\
    \ {\n                map.put(letter, 1l)\n            } else {\n             \
    \   map.put(letter, map.get(letter) + 1)\n            }\n        }\n        return\
    \ map", "        val letters = test.split(\" \")\n        val counts = mutable.HashMap[String,Long]()\n\
    \        for (i <- 0 until letters.length) {\n            val letter = letters[i]\n\
    \            counts.put(letter, counts.getOrElse(letter, 0L) + 1)\n        }\n\
    \        counts", "        val letters = test.split(\" \")\n        val map =\
    \ mutable.HashMap[String,Long]()\n        for (i <- 0 until letters.length) {\n\
    \            val letter = letters[i]\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        return map", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter -> letter.toLowerCase()).map(letter\
    \ -> letter).collect(Collectors.groupingBy(letter -> letter, Collectors.counting()))\n\
    \        val maxCount = counts.maxBy(count -> count)\n        val maxCounts =\
    \ counts.filter(count -> count == maxCount)\n        val maxCountsMap = maxCounts.map(count\
    \ -> count.key).collect(Collectors.toMap(key -> key, key -> 1l))\n        return\
    \ maxCountsMap", "        val result = mutable.HashMap()\n        for (i <- 0\
    \ until test.length) {\n            val c = test.charAt(i)\n            if (result.contains(c))\
    \ {\n                result.update(c, result.get(c) + 1)\n            } else {\n\
    \                result.put(c, 1l)\n            }\n        }\n        return result",
  "        val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ -> letter.toLowerCase()).distinct().count()\n        val maxCount = counts.max()\n\
    \        val maxCounts = counts.filter(count -> count == maxCount).toMap(key ->\
    \ key.toLowerCase())\n        val maxCountsMap = maxCounts.map(key -> key + \"\
    :\" + maxCounts.get(key))\n        return maxCountsMap", "        val letters\
    \ = test.split(\" \")\n        val counts = letters.map(letter -> letter.toLowerCase()).map(letter\
    \ -> letter).distinct().count()\n        val maxCount = counts.max()\n       \
    \ val maxCountLetters = counts.filter(count -> count == maxCount).map(count ->\
    \ letter).collect(Collectors.toList())\n        val maxCountLettersMap = maxCountLetters.map(letter\
    \ -> letter.toLowerCase()).collectAsMap()\n        return maxCountLettersMap",
  "        val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ -> letter.toLowerCase()).map(letter -> letter).collect(Collectors.groupingBy(letter\
    \ -> letter, Collectors.counting()))\n        counts.forEach((letter, count) ->\
    \ {\n            if (count > 1) {\n                counts.put(letter, count)\n\
    \            }\n        })\n        counts.forEach((letter, count) -> {\n    \
    \        if (count > 1) {\n                counts.put(letter, count)\n       \
    \     }\n        })\n        counts.forEach((letter, count) -> {\n           \
    \ if (count > 1) {\n                counts.put(letter, count)\n            }\n\
    \        })\n        counts.forEach((letter, count) -> {\n            if (count\
    \ > 1) {\n                counts.put(letter, count)\n            }\n        })\n\
    \        counts.forEach((letter, count) -> {\n            if (count > 1) {\n \
    \               counts.put(letter, count)\n            }\n        })\n       \
    \ counts.forEach((letter, count) -> {\n            if (count > 1) {\n        \
    \        counts.put(letter, count)\n            }\n        })\n        counts.forEach((letter,\
    \ count) -> {\n            if (count > 1) {\n                counts.put(letter,\
    \ count)\n            }\n        })\n        counts.forEach((letter, count) ->\
    \ {\n            if (count > 1) {\n                counts.put(letter, count)\n\
    \            }\n        })\n        counts.forEach((letter, count) -> {\n    \
    \        if (count > 1) {\n                counts.put(letter, count)\n       \
    \     }\n        })\n        counts.forEach((letter, count) -> {\n           \
    \ if (count > 1) {\n                counts.put(letter, count)\n            }\n\
    \        })\n        counts.forEach((letter, count) -> {\n            if (count\
    \ > 1) {\n                counts.put(letter, count)\n            }\n        })\n\
    \        counts.forEach((letter, count) -> {\n            if (", "        val\
    \ letters = test.split(\" \")\n        val counts = letters.map(letter => letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCounts = counts.filter(count\
    \ => count == maxCount).toMap(key => key.toLowerCase())\n        val maxCountsMap\
    \ = maxCounts.map(key => key.toLowerCase()).toMap(key => key)\n        return\
    \ maxCountsMap", "        val letters = test.split(\" \")\n        val counts\
    \ = letters.map(letter -> letter.toLowerCase()).map(letter -> letter).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxLetters = counts.filter(count\
    \ -> count == maxCount).map(count -> letter).collect(Collectors.toList())\n  \
    \      val result = maxLetters.map(letter -> letter + \":\" + count).collect(Collectors.toMap(s\
    \ -> s.split(\":\")[0], s -> Long.parseLong(s.split(\":\")[1])))\n        return\
    \ result", "        val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ -> letter.toLowerCase()).distinct().count()\n        val maxCount = counts.max()\n\
    \        val maxCounts = counts.filter(count -> count == maxCount).toSeq\n   \
    \     val maxCountsMap = maxCounts.map(count -> count.toString()).toMap\n    \
    \    val maxCountsMap2 = maxCountsMap.toMap\n        return maxCountsMap2", " \
    \       val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ => letter.toLowerCase()).distinct().count()\n        val maxCount = counts.max()\n\
    \        val maxCounts = counts.filter(count => count == maxCount).toSeq\n   \
    \     val maxCountsMap = maxCounts.map(count => count.toString()).toMap\n    \
    \    return maxCountsMap", "        val letters = test.split(\" \")\n        val\
    \ counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n  \
    \      val maxCount = counts.max()\n        val maxCountLetters = counts.filter(count\
    \ -> count == maxCount).map(count -> letters.filter(letter -> letter.toLowerCase().equals(count)).head()).toList()\n\
    \        val result = maxCountLetters.map(letter -> (letter, maxCount)).toMap(tuple\
    \ -> tuple._1, tuple -> tuple._2)\n        return result", "        val letters\
    \ = test.split(\" \")\n        val counts = letters.map(letter => letter.toLowerCase()).map(letter\
    \ => letter.count()).toMap(count => count)\n        val maxCount = counts.maxBy(count\
    \ => count)\n        val maxCounts = counts.filter(count => count == maxCount)\n\
    \        val maxCountsMap = maxCounts.toMap(count => count.key)\n        val maxCountsMapKeys\
    \ = maxCountsMap.keys()\n        val maxCountsMapValues = maxCountsMap.values()\n\
    \        val maxCountsMapValuesArray = maxCountsMapValues.toArray\n        val\
    \ maxCountsMapValuesArrayLength = maxCountsMapValuesArray.length\n        val\
    \ maxCountsMapValuesArrayElements = maxCountsMapValuesArray.toArray\n        val\
    \ maxCountsMapValuesArrayElementsLength = maxCountsMapValuesArrayElements.length\n\
    \        val maxCountsMapValuesArrayElementsElements = maxCountsMapValuesArrayElements.toArray\n\
    \        val maxCountsMapValuesArrayElementsElementsLength = maxCountsMapValuesArrayElementsElements.length\n\
    \        val maxCountsMapValuesArrayElementsElementsElements = maxCountsMapValuesArrayElementsElements.toArray\n\
    \        val maxCountsMapValuesArrayElementsElementsElementsLength = maxCountsMapValuesArrayElementsElementsElements.length\n\
    \        val maxCountsMapValuesArrayElementsElementsElementsElements = maxCountsMapValuesArrayElementsElementsElements.toArray\n\
    \        val maxCountsMapValuesArrayElementsElementsElementsElementsLength = maxCountsMapValuesArrayElementsElementsElementsElements.length\n\
    \        val maxCountsMapValuesArrayElementsElementsElementsElementsElements =\
    \ maxCountsMapValuesArrayElementsElementsElementsElements.toArray\n        val\
    \ maxCountsMapValuesArrayElementsElementsElementsElementsElementsLength = maxCountsMapValuesArrayElementsElementsElementsElementsElements.length\n\
    \        val maxCountsMapValuesArrayElementsElementsElementsElementsElementsElements\
    \ = maxCountsMapValuesArrayElementsElementsElementsElementsElements.toArray\n\
    \        val max", "        val letters = test.split(\" \")\n        val counts\
    \ = letters.map(letter -> letter.toLowerCase()).collectAsMap()\n        val maxCount\
    \ = counts.entrySet().max(Comparator.comparing(e -> e.getValue()))\n        val\
    \ maxCounts = counts.entrySet().filter(e -> e.getValue() == maxCount.getValue()).collect(Collectors.toList())\n\
    \        val maxCountsMap = maxCounts.stream().collect(Collectors.toMap(e -> e.getKey(),\
    \ e -> e.getValue()))\n        return maxCountsMap", "        val letters = test.split(\"\
    \ \")\n        val counts = mutable.HashMap[String,Long]()\n        for (i <-\
    \ 0 until letters.length) {\n            val letter = letters[i]\n           \
    \ if (counts.contains(letter)) {\n                counts.put(letter, counts.get(letter)\
    \ + 1)\n            } else {\n                counts.put(letter, 1l)\n       \
    \     }\n        }\n        counts", "        val letters = test.split(\" \")\n\
    \        val map = mutable.HashMap[String,Long]()\n        for (i <- 0 until letters.length)\
    \ {\n            val letter = letters[i]\n            if (map.contains(letter))\
    \ {\n                map.put(letter, map.get(letter) + 1)\n            } else\
    \ {\n                map.put(letter, 1l)\n            }\n        }\n        return\
    \ map", "        val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ -> letter.toLowerCase()).collectAsMap()\n        val maxCount = counts.values().max()\n\
    \        val maxCountLetters = counts.entrySet().filter(e -> e.getValue() == maxCount).map(e\
    \ -> e.getKey()).collect()\n        val maxCountLettersMap = counts.entrySet().filter(e\
    \ -> e.getValue() == maxCount).collectAsMap()\n        return maxCountLettersMap",
  "        val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ -> letter.toLowerCase()).distinct().count()\n        val maxCount = counts.max()\n\
    \        val maxCounts = counts.filter(count -> count == maxCount).toMap(key ->\
    \ key.toLowerCase())\n        return maxCounts", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter -> letter.toLowerCase()).collectAsMap()\n\
    \        val maxCount = counts.entrySet().max(Comparator.comparing(e -> e.getValue()))\n\
    \        val maxCountLetter = maxCount._1\n        val maxCountCount = maxCount._2\n\
    \        val maxCountCountLetters = counts.entrySet().filter(e -> e.getValue()\
    \ == maxCountCount).map(e -> e.getKey()).collect(Collectors.toList())\n      \
    \  val maxCountCountLettersMap = maxCountCountLetters.map(letter -> letter.toLowerCase()).collectAsMap()\n\
    \        return maxCountCountLettersMap", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter => letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCounts = counts.filter(count\
    \ => count == maxCount).toSeq\n        val maxCountsMap = maxCounts.map(count\
    \ => count.toString()).toMap\n        val maxCountsMapWithCount = maxCountsMap.mapValues(count\
    \ => count + 1)\n        return maxCountsMapWithCount", "        val result =\
    \ mutable.HashMap()\n        for (i <- 0 until test.length) {\n            val\
    \ c = test.charAt(i)\n            if (result.contains(c)) {\n                result.put(c,\
    \ result.get(c) + 1)\n            } else {\n                result.put(c, 1l)\n\
    \            }\n        }\n        result", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter -> letter.toLowerCase()).map(letter\
    \ -> letter).distinct().count()\n        val maxCount = counts.max()\n       \
    \ val maxCounts = counts.filter(count -> count == maxCount).toMap(key -> key)\n\
    \        val maxCountsMap = maxCounts.map(count -> count.key + \":\" + count.value)\n\
    \        return maxCountsMap", "        val letters = test.split(\" \")\n    \
    \    val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxLetters = counts.filter(count\
    \ -> count == maxCount).map(count -> letter).toSeq()\n        val result = maxLetters.map(letter\
    \ -> letter + \":\" + count).toMap(String::split)\n        result.putIfAbsent(\"\
    \", 0l)\n        return result", "        var result = Map[String,Long]()\n  \
    \      var letters = test.split(\" \")\n        for (var letter : letters) {\n\
    \            var count = result.getOrElse(letter, 0l)\n            result = result.put(letter,\
    \ count + 1)\n        }\n        return result", "        var result = Map[String,Long]()\n\
    \        var letters = test.split(\" \")\n        for (var i = 0; i < letters.length;\
    \ i++) {\n            var letter = letters[i]\n            if (result.containsKey(letter))\
    \ {\n                result.put(letter, result.get(letter) + 1)\n            }\
    \ else {\n                result.put(letter, 1l)\n            }\n        }\n \
    \       return result", "        var result = new HashMap[String,Long]()\n   \
    \     var letters = test.split(\" \")\n        for (var i = 0; i < letters.length;\
    \ i++) {\n            var letter = letters[i]\n            var count = result.getOrElse(letter,\
    \ 0L)\n            result.put(letter, count + 1)\n        }\n        return result",
  "        val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ -> letter.toLowerCase()).collectAsMap()\n        val maxCount = counts.values().max()\n\
    \        val maxCountLetters = counts.entrySet().filter(e -> e.getValue() == maxCount).map(e\
    \ -> e.getKey()).collect()\n        val maxCountLettersMap = maxCountLetters.map(letter\
    \ -> letter.toLowerCase()).collectAsMap()\n        return maxCountLettersMap",
  "        val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ -> letter.toLowerCase()).distinct().count()\n        val maxCount = counts.max()\n\
    \        val maxCounts = counts.filter(count -> count == maxCount).toMap(key ->\
    \ key)\n        val maxCountsMap = maxCounts.map(key -> key.toLowerCase())\n \
    \       return maxCountsMap", "        val result = mutable.HashMap[String,Long]()\n\
    \        for (i <- 0 until test.length) {\n            val c = test.charAt(i)\n\
    \            if (result.contains(c)) {\n                result.put(c, result.get(c)\
    \ + 1)\n            } else {\n                result.put(c, 1l)\n            }\n\
    \        }\n        return result", "        val letters = test.split(\" \")\n\
    \        val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCounts = counts.filter(count\
    \ -> count == maxCount).toSeq\n        val maxCountsMap = maxCounts.map(count\
    \ -> count.toString()).toMap\n        return maxCountsMap", "        val result\
    \ = mutable.HashMap[String,Long]()\n        for (i <- 0 until test.length) {\n\
    \            val c = test.charAt(i)\n            if (!result.contains(c)) {\n\
    \                result.put(c, 1l)\n            } else {\n                result.put(c,\
    \ result.get(c) + 1)\n            }\n        }\n        result", "        val\
    \ letters = test.split(\" \")\n        val counts = letters.map(letter -> letter.toLowerCase()).collectAsMap()\n\
    \        val maxCount = counts.values().max()\n        val maxCountLetters = counts.entrySet().filter(e\
    \ -> e.getValue() == maxCount).map(e -> e.getKey()).collect()\n        return\
    \ maxCountLetters.map(letter -> new Tuple2(letter, counts.get(letter)))", "  \
    \      val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ => letter.toLowerCase()).map(letter => letter.count()).toMap(count => count)\n\
    \        val maxCount = counts.maxBy(count => count)\n        val maxCounts =\
    \ counts.filter(count => count == maxCount)\n        val maxCountsMap = maxCounts.map(count\
    \ => count.key).toMap(key => key)\n        val maxCountsMap2 = maxCountsMap.filter(key\
    \ => key.length() == 1)\n        val maxCountsMap3 = maxCountsMap2.map(key =>\
    \ key.toLowerCase())\n        return maxCountsMap3", "        val result = mutable.HashMap.empty()\n\
    \        for (i <- 0 until test.length) {\n            val c = test.charAt(i)\n\
    \            if (result.contains(c)) {\n                result.update(c, result.get(c)\
    \ + 1)\n            } else {\n                result.put(c, 1l)\n            }\n\
    \        }\n        return result", "        var letters = test.split(\" \")\n\
    \        var counts = mutable.HashMap[String,Long]()\n        for (var letter\
    \ : letters) {\n            counts.put(letter, counts.getOrElse(letter, 0L) +\
    \ 1)\n        }\n        return counts", "        val result = new HashMap[String,Long]()\n\
    \        for (i <- 0 until test.length) {\n            val c = test.charAt(i)\n\
    \            if (result.containsKey(c)) {\n                result.put(c, result.get(c)\
    \ + 1)\n            } else {\n                result.put(c, 1l)\n            }\n\
    \        }\n        return result", "        val letters = test.split(\" \")\n\
    \        val counts = letters.map(letter -> letter.toLowerCase()).map(letter ->\
    \ letter).distinct().count()\n        val maxCount = counts.max()\n        val\
    \ maxLetters = counts.filter(count -> count == maxCount).map(count -> letters.filter(letter\
    \ -> letter.toLowerCase().equals(count)).head()).toList()\n        val result\
    \ = maxLetters.map(letter -> letter.toLowerCase() + \":\" + count).toMap(key ->\
    \ key.split(\":\")[0], value -> Long.parseLong(key.split(\":\")[1]))\n       \
    \ return result", "        val letters = test.split(\" \")\n        val counts\
    \ = letters.map(letter -> letter.toLowerCase()).map(letter -> letter.charAt(0)).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCountLetter = counts.filter(count\
    \ -> count == maxCount).head()\n        val maxCountCount = counts.filter(count\
    \ -> count == maxCount).head()\n        val maxCountLetters = letters.filter(letter\
    \ -> letter.charAt(0) == maxCountLetter).map(letter -> letter.toLowerCase()).distinct()\n\
    \        val maxCountLettersCount = letters.filter(letter -> letter.charAt(0)\
    \ == maxCountLetter).map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val result = maxCountLetters.zip(maxCountLettersCount).map(tuple -> tuple._1\
    \ + \":\" + tuple._2).toMap(tuple -> tuple._1, tuple -> tuple._2)\n        result.put(\"\
    \", maxCountLettersCount)\n        return result", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter => letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCounts = counts.filter(count\
    \ => count == maxCount).toMap(key => key)\n        val maxCountsMap = maxCounts.map(key\
    \ => key.toLowerCase())\n        return maxCountsMap", "        val letters =\
    \ test.split(\" \")\n        val counts = letters.map(letter -> letter.toLowerCase()).collectAsMap()\n\
    \        val maxCount = counts.values().max()\n        val maxCounts = counts.entrySet().filter(e\
    \ -> e.getValue() == maxCount).map(e -> e.getKey()).collectAsMap()\n        return\
    \ maxCounts", "        val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ -> letter.toLowerCase()).collectAsMap()\n        val maxCount = counts.values().max()\n\
    \        val maxCounts = counts.entrySet().filter(e -> e.getValue() == maxCount).collectAsMap()\n\
    \        return maxCounts", "        val letters = test.split(\" \")\n       \
    \ val counts = letters.map(letter => letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCounts = counts.filter(count\
    \ => count == maxCount).toSeq\n        val maxCountsMap = maxCounts.map(count\
    \ -> count.toString()).toMap\n        val maxCountsMapSeq = maxCountsMap.toSeq\n\
    \        val maxCountsMapSeqSeq = maxCountsMapSeq.toSeq\n        val maxCountsMapSeqSeqSeq\
    \ = maxCountsMapSeqSeq.toSeq\n        val maxCountsMapSeqSeqSeqSeq = maxCountsMapSeqSeqSeq.toSeq\n\
    \        val maxCountsMapSeqSeqSeqSeqSeq = maxCountsMapSeqSeqSeqSeq.toSeq\n  \
    \      val maxCountsMapSeqSeqSeqSeqSeqSeq = maxCountsMapSeqSeqSeqSeqSeq.toSeq\n\
    \        val maxCountsMapSeqSeqSeqSeqSeqSeqSeq = maxCountsMapSeqSeqSeqSeqSeqSeq.toSeq\n\
    \        val maxCountsMapSeqSeqSeqSeqSeqSeqSeqSeq = maxCountsMapSeqSeqSeqSeqSeqSeqSeq.toSeq\n\
    \        val maxCountsMapSeqSeqSeqSeqSeqSeqSeqSeqSeq = maxCountsMapSeqSeqSeqSeqSeqSeqSeqSeq.toSeq\n\
    \        val maxCountsMapSeqSeqSeqSeqSeqSeqSeqSeqSeqSeq = maxCountsMapSeqSeqSeqSeqSeqSeqSeqSeqSeq.toSeq\n\
    \        val maxCountsMapSeqSeqSeqSeqSeqSeqSeqSeqSeqSeqSeq = maxCountsMapSeqSeqSeqSeqSeqSeqSeqSeqSeqSeq.toSeq\n\
    \        val maxCounts", "        var result = new HashMap[String,Long]()\n  \
    \      var letters = test.split(\" \")\n        for (var letter : letters) {\n\
    \            var count = result.getOrElse(letter, 0l)\n            result.put(letter,\
    \ count + 1)\n        }\n        return result", "        val result = mutable.HashMap[String,Long]()\n\
    \        for (i <- 0 until test.length) {\n            val c = test.charAt(i)\n\
    \            if (!result.contains(c)) {\n                result.put(c, 1l)\n \
    \           } else {\n                result.put(c, result.get(c) + 1)\n     \
    \       }\n        }\n        return result", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter => letter.toLowerCase()).map(letter\
    \ => letter.count()).toMap(count => count)\n        val maxCount = counts.max()\n\
    \        val maxCountLetter = counts.keys().filter(letter => counts.get(letter)\
    \ == maxCount).head()\n        val maxCountCount = counts.get(maxCountLetter)\n\
    \        val maxCountLetterCount = counts.keys().filter(letter => counts.get(letter)\
    \ == maxCountCount).head()\n        val maxCountLetterCountCount = counts.get(maxCountLetterCount)\n\
    \        val maxCountLetterCountCountCount = counts.keys().filter(letter => counts.get(letter)\
    \ == maxCountLetterCountCount).head()\n        val maxCountLetterCountCountCountCount\
    \ = counts.get(maxCountLetterCountCountCount)\n        val maxCountLetterCountCountCountCountCount\
    \ = counts.keys().filter(letter => counts.get(letter) == maxCountLetterCountCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCountCount = counts.get(maxCountLetterCountCountCountCountCount)\n\
    \        val maxCountLetterCountCountCountCountCountCountCount = counts.keys().filter(letter\
    \ => counts.get(letter) == maxCountLetterCountCountCountCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCountCountCountCount = counts.get(maxCountLetterCountCountCountCountCountCountCount)\n\
    \        val maxCountLetterCountCountCountCountCountCountCountCountCount = counts.keys().filter(letter\
    \ => counts.get(letter) == maxCountLetterCountCountCountCountCountCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCountCountCountCountCount = counts.get(maxCountLetterCountCountCountCountCountCountCountCountCount)\n\
    \        val maxCountLetterCountCountCountCountCountCountCountCountCountCount\
    \ = counts.keys().filter(letter => counts.get(letter) == maxCountLetterCountCountCountCountCountCountCountCountCount).head()\n\
    \        val maxCountLetterCountCountCountCountCountCountCountCountCountCountCount\
    \ = counts.get(maxCountLetterCountCountCountCountCountCountCountCountCountCountCount)\n\
    \        val maxCountLetterCountCountCountCountCountCountCountCountCountCountCountCount",
  "        val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ -> letter.toLowerCase()).distinct().count()\n        val maxCount = counts.max()\n\
    \        val maxCounts = counts.filter(count -> count == maxCount).toMap(String::valueOf)\n\
    \        return maxCounts", "        val letters = test.split(\" \")\n       \
    \ val counts = letters.map(letter => letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCounts = counts.filter(count\
    \ => count == maxCount).toSeq\n        val maxCountsMap = maxCounts.map(count\
    \ => count.toString()).toMap\n        val maxCountsMap2 = maxCountsMap.mapValues(count\
    \ => count - 1).toMap\n        val maxCountsMap3 = maxCountsMap2.mapValues(count\
    \ => count + 1).toMap\n        val maxCountsMap4 = maxCountsMap3.mapValues(count\
    \ => count * 2).toMap\n        val maxCountsMap5 = maxCountsMap4.mapValues(count\
    \ => count / 2).toMap\n        val maxCountsMap6 = maxCountsMap5.mapValues(count\
    \ => count % 2).toMap\n        val maxCountsMap7 = maxCountsMap6.mapValues(count\
    \ => count * 2).toMap\n        val maxCountsMap8 = maxCountsMap7.mapValues(count\
    \ => count / 2).toMap\n        val maxCountsMap9 = maxCountsMap8.mapValues(count\
    \ => count % 2).toMap\n        val maxCountsMap10 = maxCountsMap9.mapValues(count\
    \ => count * 2).toMap\n        val maxCountsMap11 = maxCountsMap10.mapValues(count\
    \ => count / 2).toMap\n        val maxCountsMap12 = maxCountsMap11.mapValues(count\
    \ => count % 2).toMap\n        val maxCountsMap13 = maxCountsMap12.mapValues(count\
    \ => count * 2).toMap\n        val maxCountsMap14 = maxCountsMap13.mapValues(count\
    \ => count / 2).toMap\n        val maxCountsMap15 = maxCountsMap14.mapValues(count\
    \ => count % 2).toMap\n        val maxCountsMap16 = maxCountsMap15.mapValues(count\
    \ => count * 2).toMap\n        val maxCountsMap17 = maxCountsMap16.mapValues(count\
    \ => count / 2).toMap\n        val maxCountsMap18 =", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxLetters = counts.filter(count\
    \ -> count == maxCount).map(count -> letters.filter(letter -> letter.toLowerCase().equals(count)).head()).toList()\n\
    \        val result = maxLetters.map(letter -> letter.toLowerCase() + \":\" +\
    \ count).toMap(String::split)\n        result.filter(pair -> pair.length == 2).toMap(pair\
    \ -> pair[0])", "        var result = Map[String,Long]()\n        var letters\
    \ = test.split(\" \")\n        for (var letter : letters) {\n            if (result.containsKey(letter))\
    \ {\n                result.put(letter, result.get(letter) + 1)\n            }\
    \ else {\n                result.put(letter, 1l)\n            }\n        }\n \
    \       return result", "        val letters = test.split(\" \")\n        val\
    \ counts = letters.map(letter => letter.toLowerCase()).map(letter => letter.count()).reduce(0,\
    \ (a, b) => a + b)\n        val maxCount = counts.max()\n        val maxCountIndex\
    \ = counts.indexOf(maxCount)\n        val maxCountLetters = letters.take(maxCountIndex)\n\
    \        val maxCountLettersMap = maxCountLetters.map(letter => letter.toLowerCase()).toMap(letter\
    \ => letter)\n        val maxCountLettersMap2 = maxCountLettersMap.toMap(letter\
    \ => letter)\n        return maxCountLettersMap2", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter -> letter.toLowerCase()).map(letter\
    \ -> letter).distinct().count()\n        val maxCount = counts.max()\n       \
    \ val maxLetters = counts.filter(count -> count == maxCount).map(count -> letters.filter(letter\
    \ -> letter.toLowerCase() == count).head()).toList()\n        val result = maxLetters.map(letter\
    \ -> letter.toLowerCase()).collect(Collectors.toMap(letter -> letter, letter ->\
    \ 1l))\n        return result", "        val letters = test.split(\" \")\n   \
    \     val counts = letters.map(letter -> letter.toLowerCase()).collectAsMap()\n\
    \        val maxCount = counts.values().max()\n        val maxCountLetter = counts.keys().filter(letter\
    \ -> counts.get(letter) == maxCount).head()\n        val maxCountCount = counts.get(maxCountLetter)\n\
    \        val maxCountCountLetter = maxCountLetter.toLowerCase()\n        return\
    \ Map(maxCountCountLetter, maxCountCount)", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCountLetters = counts.filter(count\
    \ -> count == maxCount).map(count -> letter).toList()\n        val maxCountLettersMap\
    \ = maxCountLetters.map(letter -> letter + \":\" + count).toMap(s -> s.split(\"\
    :\")[0], s -> Long.parseLong(s.split(\":\")[1]))\n        return maxCountLettersMap",
  "        val letters = test.split(\" \")\n        val counts = mutable.HashMap[String,Long]()\n\
    \        for (i <- 0 until letters.length) {\n            val letter = letters[i]\n\
    \            val count = counts.getOrElse(letter, 0l)\n            counts.put(letter,\
    \ count + 1)\n        }\n        counts", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCounts = counts.filter(count\
    \ -> count == maxCount).toMap(key -> key)\n        val maxCountsMap = maxCounts.map(key\
    \ -> key.toLowerCase())\n        return maxCountsMap", "        val letters =\
    \ test.split(\" \")\n        val counts = mutable.HashMap[String,Long]()\n   \
    \     for (i <- 0 until letters.length) {\n            val letter = letters[i]\n\
    \            if (!counts.contains(letter)) {\n                counts.put(letter,\
    \ 1l)\n            } else {\n                counts.put(letter, counts.get(letter)\
    \ + 1)\n            }\n        }\n        counts", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter => letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCounts = counts.filter(count\
    \ => count == maxCount).toSeq\n        val maxCountsMap = maxCounts.map(count\
    \ => count.toString()).toMap\n        val maxCountsMap2 = maxCountsMap.toMap\n\
    \        val maxCountsMap3 = maxCountsMap2.toMap\n        return maxCountsMap3",
  "        val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ -> letter.toLowerCase()).collectAsMap()\n        val maxCount = counts.values().max()\n\
    \        val maxCountLetter = counts.keySet().filter(letter -> counts.get(letter)\
    \ == maxCount).head()\n        val maxCountCount = counts.get(maxCountLetter)\n\
    \        return counts.filter(letter -> counts.get(letter) == maxCountCount).collectAsMap()",
  "        val letters = test.split(\" \")\n        val counts = mutable.HashMap[String,Long]()\n\
    \        for (i <- 0 until letters.length) {\n            val letter = letters[i]\n\
    \            if (counts.contains(letter)) {\n                counts.put(letter,\
    \ counts.get(letter) + 1)\n            } else {\n                counts.put(letter,\
    \ 1l)\n            }\n        }\n        counts", "        val letters = test.split(\"\
    \ \")\n        val counts = letters.map(letter -> letter.toLowerCase()).map(letter\
    \ -> letter).distinct().count()\n        val maxCount = counts.max()\n       \
    \ val maxCountLetters = counts.filter(count -> count == maxCount).map(count ->\
    \ letter).toSeq()\n        val maxCountLettersMap = maxCountLetters.groupBy(letter\
    \ -> letter)\n        val maxCountLettersMapSeq = maxCountLettersMap.toSeq()\n\
    \        val maxCountLettersMapSeqIterator = maxCountLettersMapSeq.iterator()\n\
    \        val maxCountLettersMapSeqIteratorValue = maxCountLettersMapSeqIterator.next()\n\
    \        val maxCountLettersMapSeqIteratorValueSeq = maxCountLettersMapSeqIteratorValue.toSeq()\n\
    \        val maxCountLettersMapSeqIteratorValueSeqIterator = maxCountLettersMapSeqIteratorValueSeq.iterator()\n\
    \        val maxCountLettersMapSeqIteratorValueSeqIteratorValue = maxCountLettersMapSeqIteratorValueSeqIterator.next()\n\
    \        val maxCountLettersMapSeqIteratorValueSeqIteratorValueSeq = maxCountLettersMapSeqIteratorValueSeqIteratorValue.toSeq()\n\
    \        val maxCountLettersMapSeqIteratorValueSeqIteratorValueSeqIterator = maxCountLettersMapSeqIteratorValueSeqIteratorValueSeq.iterator()\n\
    \        val maxCountLettersMapSeqIteratorValueSeqIteratorValueSeqIteratorValue\
    \ = maxCountLettersMapSeqIteratorValueSeqIteratorValueSeqIterator.next()\n   \
    \     val maxCountLettersMapSeqIteratorValueSeqIteratorValueSeqIteratorValueSeq\
    \ = maxCountLettersMapSeqIteratorValueSeqIteratorValueSeqIteratorValue.toSeq()\n\
    \        val maxCountLettersMapSeqIteratorValueSeqIteratorValueSeqIteratorValueSeqIterator\
    \ = maxCountLettersMapSeqIteratorValueSeqIteratorValueSeqIteratorValueSeq.iterator()\n\
    \        val maxCountLettersMapSeqIteratorValueSeqIteratorValueSeqIteratorValueSeqIteratorValue\
    \ = maxCountLettersMapSeqIteratorValueSeqIteratorValueSeqIteratorValueSeqIterator.next()\n",
  "        val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ => letter.toLowerCase()).distinct().count()\n        val maxCount = counts.max()\n\
    \        val maxCounts = counts.filter(count => count == maxCount).toSeq\n   \
    \     val maxCountsMap = maxCounts.map(count -> count.toString()).toMap\n    \
    \    val maxCountsMap2 = maxCountsMap.toMap\n        return maxCountsMap2", " \
    \       val result = mutable.HashMap()\n        for (i <- 0 until test.length)\
    \ {\n            val c = test.charAt(i)\n            if (result.contains(c)) {\n\
    \                result.put(c, result.get(c) + 1)\n            } else {\n    \
    \            result.put(c, 1l)\n            }\n        }\n        result", " \
    \       val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ -> letter.toLowerCase()).map(letter -> letter.charAt(0)).distinct().countBy\n\
    \        val maxCount = counts.maxBy(letter -> letter)\n        val maxCounts\
    \ = counts.filter(letter -> letter == maxCount).map(letter -> letter.key).toMap\n\
    \        val maxCountsWithCount = maxCounts.map(letter -> letter + \":\" + maxCount)\n\
    \        return maxCountsWithCount", "        val letters = test.split(\" \")\n\
    \        val counts = letters.map(letter -> letter.toLowerCase()).distinct().toMap(letter\
    \ -> letter)\n        val maxCount = counts.maxBy(count -> count)\n        val\
    \ maxCounts = counts.filter(count -> count == maxCount)\n        val maxCountsMap\
    \ = maxCounts.map(count -> count.key + \":\" + count.value)\n        return maxCountsMap",
  "        val result = mutable.HashMap()\n        for (i <- 0 until test.length)\
    \ {\n            val c = test.charAt(i)\n            if (result.contains(c)) {\n\
    \                result.update(c, result.get(c) + 1)\n            } else {\n \
    \               result.put(c, 1)\n            }\n        }\n        result", " \
    \       val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ -> letter.toLowerCase()).map(letter -> letter).distinct().count()\n        val\
    \ maxCount = counts.max()\n        val maxCounts = counts.filter(count -> count\
    \ == maxCount).toMap(String::valueOf)\n        val maxCountsMap = maxCounts.map(count\
    \ -> count + \": \" + count).toMap(String::valueOf)\n        val maxCountsMap2\
    \ = maxCounts.map(count -> count + \": \" + count).toMap(String::valueOf)\n  \
    \      val maxCountsMap3 = maxCounts.map(count -> count + \": \" + count).toMap(String::valueOf)\n\
    \        val maxCountsMap4 = maxCounts.map(count -> count + \": \" + count).toMap(String::valueOf)\n\
    \        val maxCountsMap5 = maxCounts.map(count -> count + \": \" + count).toMap(String::valueOf)\n\
    \        val maxCountsMap6 = maxCounts.map(count -> count + \": \" + count).toMap(String::valueOf)\n\
    \        val maxCountsMap7 = maxCounts.map(count -> count + \": \" + count).toMap(String::valueOf)\n\
    \        val maxCountsMap8 = maxCounts.map(count -> count + \": \" + count).toMap(String::valueOf)\n\
    \        val maxCountsMap9 = maxCounts.map(count -> count + \": \" + count).toMap(String::valueOf)\n\
    \        val maxCountsMap10 = maxCounts.map(count -> count + \": \" + count).toMap(String::valueOf)\n\
    \        val maxCountsMap11 = maxCounts.map(count -> count + \": \" + count).toMap(String::valueOf)\n\
    \        val maxCountsMap12 = maxCounts.map(count -> count + \": \" + count).toMap(String::valueOf)\n\
    \        val maxCountsMap13 = maxCounts.map(count -> count + \": \" + count).toMap(String::valueOf)\n\
    \        val maxCountsMap14 =", "        val letters = test.split(\" \")\n   \
    \     val counts = letters.map(letter -> letter.toLowerCase()).collectAsMap()\n\
    \        val maxCount = counts.maxBy(count -> count._2)\n        val maxCounts\
    \ = counts.filter(count -> count._2 == maxCount._2)\n        val maxCountsMap\
    \ = maxCounts.map(count -> count._1).collectAsMap()\n        val maxCountsMap2\
    \ = maxCountsMap.filter(count -> count._2 > 1)\n        val maxCountsMap3 = maxCountsMap2.map(count\
    \ -> count._1).collectAsMap()\n        val maxCountsMap4 = maxCountsMap3.filter(count\
    \ -> count._2 > 1)\n        val maxCountsMap5 = maxCountsMap4.map(count -> count._1).collectAsMap()\n\
    \        val maxCountsMap6 = maxCountsMap5.filter(count -> count._2 > 1)\n   \
    \     val maxCountsMap7 = maxCountsMap6.map(count -> count._1).collectAsMap()\n\
    \        val maxCountsMap8 = maxCountsMap7.filter(count -> count._2 > 1)\n   \
    \     val maxCountsMap9 = maxCountsMap8.map(count -> count._1).collectAsMap()\n\
    \        val maxCountsMap10 = maxCountsMap9.filter(count -> count._2 > 1)\n  \
    \      val maxCountsMap11 = maxCountsMap10.map(count -> count._1).collectAsMap()\n\
    \        val maxCountsMap12 = maxCountsMap11.filter(count -> count._2 > 1)\n \
    \       val maxCountsMap13 = maxCountsMap12.map(count -> count._1).collectAsMap()\n\
    \        val maxCountsMap14 = maxCountsMap13.filter(count -> count._2 > 1)\n \
    \       val maxCountsMap15 = maxCountsMap14.map(count -> count._1).collectAsMap()\n\
    \        val maxCountsMap16 = maxCountsMap15.filter(count -> count._2 > 1)\n \
    \       val maxCountsMap17 = maxCountsMap16.map(count -> count._1).collectAsMap()\n\
    \        ", "        var result = new HashMap[String,Long]()\n        var letters\
    \ = test.split(\" \")\n        for (var letter : letters) {\n            var count\
    \ = result.getOrElse(letter, 0L)\n            result.put(letter, count + 1)\n\
    \        }\n        return result", "        val result = mutable.HashMap()\n\
    \        for (i <- 0 until test.length) {\n            val c = test.charAt(i)\n\
    \            if (result.containsKey(c)) {\n                result.put(c, result.get(c)\
    \ + 1)\n            } else {\n                result.put(c, 1l)\n            }\n\
    \        }\n        result", "        val result = mutable.HashMap()\n       \
    \ for (i <- 0 until test.length) {\n            val c = test.charAt(i)\n     \
    \       if (!result.contains(c)) {\n                result.put(c, 1l)\n      \
    \      } else {\n                result.put(c, result.get(c) + 1)\n          \
    \  }\n        }\n        result.foreach((k, v) -> {\n            if (v == 1) {\n\
    \                result.remove(k)\n            }\n        })\n        return result",
  "        val letters = test.split(\" \")\n        val counts = letters.map(letter\
    \ -> letter.toLowerCase()).distinct().count()\n        val maxCount = counts.max()\n\
    \        val maxLetters = counts.filter(count -> count == maxCount).map(count\
    \ -> letters.filter(letter -> letter.toLowerCase().equals(count)).head()).toSeq()\n\
    \        val result = maxLetters.map(letter -> letter.toLowerCase() + \":\" +\
    \ count).toMap(key -> key.split(\":\")[0], value -> Long.parseLong(key.split(\"\
    :\")[1]))\n        return result", "        val letters = test.split(\" \")\n\
    \        val counts = letters.map(letter -> letter.toLowerCase()).distinct().count()\n\
    \        val maxCount = counts.max()\n        val maxCounts = counts.filter(count\
    \ -> count == maxCount).toSeq\n        val maxCountsMap = maxCounts.map(count\
    \ -> count.toString()).toMap\n        val maxCountsMapWithCount = maxCountsMap.mapValues(count\
    \ -> count + 1)\n        return maxCountsMapWithCount"]
stop_tokens:
- "\n    }\n"
