name: HumanEval_27_flip_case
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    def flipCase(string\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(flipCase((\"\")).equals((\"\
  \")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
  These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE\
  \ VIOLENT ENDS\")));\n    }\n\n}\n"
completions: ["        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            result += string.charAt(i).toUpperCase\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return the number of times a substring\
    \ is repeated.\n    // >>> repeatCount(\"abcabcabc\", \"abc\")\n    // 2\n   \
    \ def repeatCount(string : String, subString : String) : Int = {\n        var\
    \ count = 0\n        for (i <- 0 until string.length) {\n            if (string.substring(i,\
    \ i + subString.length) == subString) {\n                count += 1\n        \
    \    }\n        }\n        return count\n    }\n\n    // For a given string, return\
    \ the number of times a substring is repeated in reverse.\n    // >>> repeatCountReverse(\"\
    abcabcabc\", \"abc\")\n    // 2\n    def repeatCountReverse(string : String, subString\
    \ : String) : Int = {\n        var count = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.substring(string.length - i, string.length - i + subString.length)\
    \ == subString) {\n                count += 1\n            }\n        }\n    \
    \    return count\n    }\n\n    // For a given string, return the number of times\
    \ a substring is repeated in a given direction.\n    // >>> repeatCount(\"abcabcabc\"\
    , \"abc\", \"forward\")\n    // 2\n    def repeatCount(string : String, subString\
    \ : String, direction : String) : Int = {\n        var count = 0\n        for\
    \ (i <- 0 until string.length) {\n            if (string.substring(i, i + subString.length)\
    \ == subString) {\n                count += 1\n            }\n        }\n    \
    \    return count\n    }\n\n    // For a given string, return the number of times\
    \ a substring is repeated in a given direction.\n    // >>> repeatCountReverse(\"\
    abcabcabc\", \"abc\", \"forward\")\n    // 2\n    def repeatCountReverse(string\
    \ : String, subString : String, direction : String) : Int = {\n        var count\
    \ = 0\n        for (i <- 0 until string.length) {\n            ", "        var\
    \ result = \"\"\n        for (i <- 0 until string.length) {\n            var c\
    \ = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n              \
    \  result += c.toUpperCase\n            } else {\n                result += c.toLowerCase\n\
    \            }\n        }\n        return result\n    }\n\n    // For a given\
    \ string, return the number of times a substring is repeated in the string.\n\
    \    // >>> countSubstring(\"abcabcabcabc\", \"abc\")\n    // 3\n    def countSubstring(string\
    \ : String, substring : String) : Int = {\n        var count = 0\n        for\
    \ (i <- 0 until string.length) {\n            if (string.substring(i, i + substring.length)\
    \ == substring) {\n                count += 1\n            }\n        }\n    \
    \    return count\n    }\n\n    // For a given string, return the number of times\
    \ a substring is repeated in the string.\n    // >>> countSubstring(\"abcabcabcabc\"\
    , \"abcabc\")\n    // 3\n    def countSubstring2(string : String, substring :\
    \ String) : Int = {\n        var count = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.substring(i, i + substring.length) == substring) {\n\
    \                count += 1\n            }\n        }\n        return count\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated in the string.\n    // >>> countSubstring(\"abcabcabcabc\", \"abcabc\"\
    )\n    // 3\n    def countSubstring3(string : String, substring : String) : Int\
    \ = {\n        var count = 0\n        for (i <- 0 until string.length) {\n   \
    \         if (string.substring(i, i + substring.length) == substring) {\n    \
    \            count += 1\n            }\n        }\n        return count\n    }\n\
    \n    // For a given string, return the number of times a substring is repeated\
    \ in the string.\n    // >>> countSubstring(\"abcabcabcabc\", \"abcabc\")\n  \
    \  // 3\n    def countSubstring4(string : String, substring : String", "     \
    \   var result = \"\"\n        for (i <- 0 until string.length) {\n          \
    \  result = result + string.charAt(i).toUpperCase()\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return a string where adjacent characters\
    \ that are the same have been\n    // separated by a space.\n    // >>> separateAdjacentLetters(\"\
    abcd\")\n    // \"a b c d\"\n    def separateAdjacentLetters(string : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            if (i == string.length - 1) {\n                result = result\
    \ + string.charAt(i)\n            } else {\n                result = result +\
    \ string.charAt(i) + \" \"\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where adjacent characters\
    \ that are not the same have\n    // been separated by a space.\n    // >>> separateAdjacentLetters(\"\
    aabcd\")\n    // \"a a b c d\"\n    def separateAdjacentLetters2(string : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            if (i == string.length - 1) {\n                result = result\
    \ + string.charAt(i)\n            } else {\n                result = result +\
    \ string.charAt(i) + \" \"\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where all characters that\
    \ are not in the alphabet\n    // have been removed.\n    // >>> removeExtraLetters(\"\
    abcd\")\n    // \"ab\"\n    def removeExtraLetters(string : String) : String =\
    \ {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n \
    \           if (string.charAt(i) in \"abcdefghijklmnopqrstuvwxyz\") {\n      \
    \          result = result + string.charAt(i)\n            }\n        }\n    \
    \    return result\n    }\n\n    // For a given string, return a string where\
    \ all characters that are not in the alphabet\n    // have been removed.\n   \
    \ // >>>", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result += c.toUpperCase\n            } else {\n         \
    \       result += c.toLowerCase\n            }\n        }\n        return result",
  "        var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n    \
    \            result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return the number of times a substring is repeated.\n\
    \    // >>> repeatCount(\"abcabcabc\", \"abc\")\n    // 2\n    def repeatCount(string\
    \ : String, substring : String) : Int = {\n        var count = 0\n        for\
    \ (i <- 0 until string.length) {\n            if (string.substring(i, i + substring.length)\
    \ == substring) {\n                count += 1\n            }\n        }\n    \
    \    return count\n    }\n\n    // For a given string, return the number of times\
    \ a substring is repeated, ignoring case.\n    // >>> repeatCountIgnoreCase(\"\
    abcabcabc\", \"ABC\")\n    // 2\n    def repeatCountIgnoreCase(string : String,\
    \ substring : String) : Int = {\n        var count = 0\n        for (i <- 0 until\
    \ string.length) {\n            if (string.substring(i, i + substring.length).equalsIgnoreCase(substring))\
    \ {\n                count += 1\n            }\n        }\n        return count\n\
    \    }\n\n    // For a given string, return the longest substring that is a palindrome.\n\
    \    // >>> longestPalindrome(\"abccba\")\n    // \"ccb\"\n    def longestPalindrome(string\
    \ : String) : String = {\n        var max = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var sub = string.substring(i, i + 1)\n            var count =\
    \ repeatCount(string, sub)\n            if (count > 1 && count == repeatCountIgnoreCase(string,\
    \ sub)) {\n                max = sub\n            }\n        }\n        return\
    \ max\n    }\n\n    // For a given string, return the longest substring that is\
    \ a palindrome, ignoring case.\n    // >>> longestPalindromeIgnoreCase(\"abccba\"\
    )\n    ", "        var s = string.toLowerCase.toUpperCase\n        return s\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ contained in the string.\n    // >>> countSubstring(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     result = result + string.charAt(i).toUpperCase()\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string.\n    // >>> count(\"Hello world\")\n    // 1\n\
    \    def count(string : String) : Int = {\n        var result = 0\n        for\
    \ (i <- 0 until string.length) {\n            if (string.substring(i, i + \"world\"\
    .length).equals(\"world\")) {\n                result += 1\n            }\n  \
    \      }\n        return result\n    }\n\n    // For a given string, return the\
    \ number of times the substring \"world\" occurs in the string,\n    // ignoring\
    \ case.\n    // >>> countIgnoreCase(\"hello world\")\n    // 1\n    def countIgnoreCase(string\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.substring(i, i + \"world\".length).equalsIgnoreCase(\"\
    world\")) {\n                result += 1\n            }\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string,\n    // ignoring case, and ignoring leading\
    \ and trailing whitespace.\n    // >>> countIgnoreCaseTrim(\"  hello world  \"\
    )\n    // 1\n    def countIgnoreCaseTrim(string : String) : Int = {\n        var\
    \ result = 0\n        for (i <- 0 until string.length) {\n            if (string.substring(i,\
    \ i + \"world\".length).equalsIgnoreCase(\"world\")) {\n                result\
    \ += 1\n            }\n        }\n        return result\n    }\n\n    // For a\
    \ given string, return the number of times the substring \"world\" occurs in the\
    \ string,\n    // ignoring case, ignoring leading and trailing whitespace, and\
    \ ignoring case of letters.\n    // >>> countIgnoreCaseTrim(\"  hello world  \"\
    )\n    // 1\n    def countIgnoreCaseTrim2(string : String) : Int = {\n       \
    \ var result = 0\n", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            result = result + string.charAt(i).toUpperCase\n        }\n \
    \       return result\n    }\n\n    // For a given string, return the number of\
    \ times the substring \"world\" occurs in the string.\n    // >>> count(\"Hello\
    \ world!\")\n    // 1\n    def count(string : String) : Int = {\n        var result\
    \ = 0\n        for (i <- 0 until string.length) {\n            if (string.substring(i,\
    \ i + \"world\".length).equals(\"world\")) {\n                result += 1\n  \
    \          }\n        }\n        return result\n    }\n\n    // For a given string,\
    \ return a new string where \"not \" has been added to the front,\n    // and\
    \ \"beautiful\" has been added to the back.\n    // >>> makeNice(\"Hello\")\n\
    \    // \"not beautiful\"\n    def makeNice(string : String) : String = {\n  \
    \      var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     if (string.charAt(i) == \"H\") {\n                result = result + \"not\
    \ \"\n            } else {\n                result = result + string.charAt(i)\n\
    \            }\n        }\n        result = result + \" beautiful\"\n        return\
    \ result\n    }\n\n    // For a given string, return a string where the first\
    \ and last chars have been exchanged.\n    // >>> makeAnagram(\"code\")\n    //\
    \ \"eodc\"\n    def makeAnagram(string : String) : String = {\n        var result\
    \ = \"\"\n        for (i <- 0 until string.length) {\n            result = result\
    \ + string.charAt(string.length - 1 - i)\n        }\n        result = result +\
    \ string.charAt(0)\n        return result\n    }\n\n    // For a given string,\
    \ return a string where \"not \" has been added to the front,\n    // \"beautiful\"\
    \ has been added to the back, and all lowercase letters have been converted to\
    \ uppercase.\n    // >>> makeNiceAnagram(\"code\")\n    // \"Not beautiful\"\n\
    \    def makeNiceAnagram(string : String) : String = {\n        var result =",
  "        var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n    \
    \            result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return a string where all characters that are not\
    \ in the alphabet are removed.\n    // >>> removeNonAlphabetChars(\"Hello\")\n\
    \    // \"ello\"\n    def removeNonAlphabetChars(string : String) : String = {\n\
    \        var result = \"\"\n        for (i <- 0 until string.length) {\n     \
    \       var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n  \
    \              result += c\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where all adjacent characters\
    \ that are the same are removed.\n    // >>> removeAdjacentDuplicates(\"code\"\
    )\n    // \"cde\"\n    def removeAdjacentDuplicates(string : String) : String\
    \ = {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            var c = string.charAt(i)\n            if (i == 0 || string.charAt(i\
    \ - 1) != c) {\n                result += c\n            }\n        }\n      \
    \  return result\n    }\n\n    // For a given string, return a string where all\
    \ adjacent characters that are in the same alphabet are removed.\n    // >>> removeAdjacentAlphabetChars(\"\
    code\")\n    // \"e\"\n    def removeAdjacentAlphabetChars(string : String) :\
    \ String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (i == 0 || string.charAt(i\
    \ - 1) >= 'a' && string.charAt(i - 1) <= 'z') {\n                result += c\n\
    \            }\n        }\n        return result\n    }\n\n    // For a given\
    \ string, return a string where all adjacent characters that are in the same alphabet\
    \ are", "        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            result = result.concat(string.charAt(i).toUpperCase)\n        }\n\
    \        return result\n    }\n\n    // For a given string, return the number\
    \ of times the substring \"world\" occurs in the string.\n    // >>> count(\"\
    Hello world\")\n    // 1\n    def count(string : String) : Int = {\n        var\
    \ result = 0\n        for (i <- 0 until string.length) {\n            if (string.substring(i,\
    \ i + \"world\".length).equals(\"world\")) {\n                result = result\
    \ + 1\n            }\n        }\n        return result\n    }\n\n    // For a\
    \ given string, return the number of times the substring \"world\" occurs in the\
    \ string,\n    // ignoring case.\n    // >>> countIgnoreCase(\"hello world\")\n\
    \    // 1\n    def countIgnoreCase(string : String) : Int = {\n        var result\
    \ = 0\n        for (i <- 0 until string.length) {\n            if (string.substring(i,\
    \ i + \"world\".length).equalsIgnoreCase(\"world\")) {\n                result\
    \ = result + 1\n            }\n        }\n        return result\n    }\n\n   \
    \ // For a given string, return the number of times the substring \"world\" occurs\
    \ in the string,\n    // ignoring case, and ignoring the case of the letters.\n\
    \    // >>> countIgnoreCaseAndCase(\"hello world\")\n    // 1\n    def countIgnoreCaseAndCase(string\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.substring(i, i + \"world\".length).equalsIgnoreCaseAndCase(\"\
    world\")) {\n                result = result + 1\n            }\n        }\n \
    \       return result\n    }\n\n    // For a given string, return the number of\
    \ times the substring \"world\" occurs in the string,\n    // ignoring case, and\
    \ ignoring the case of the letters, and ignoring the case of the letters\n   \
    \ // of the substring \"world\".\n    // >>> countIgnoreCaseAndCaseAndIgnore(\"\
    hello world\")\n    // 1\n    def count", "        var result = \"\"\n       \
    \ for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n \
    \           if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times the substring \"world\" occurs in the string.\n    // >>>\
    \ count(\"Hello world\")\n    // 1\n    def count(string : String) : Int = {\n\
    \        var result = 0\n        for (i <- 0 until string.length) {\n        \
    \    var c = string.charAt(i)\n            if (c == \"world\") {\n           \
    \     result += 1\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return the number of times the substring \"world\"\
    \ occurs in the string,\n    // ignoring case.\n    // >>> countIgnoreCase(\"\
    Hello world\")\n    // 1\n    def countIgnoreCase(string : String) : Int = {\n\
    \        var result = 0\n        for (i <- 0 until string.length) {\n        \
    \    var c = string.charAt(i)\n            if (c == \"world\") {\n           \
    \     result += 1\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return the number of times the substring \"world\"\
    \ occurs in the string,\n    // ignoring case, and ignoring the case of the letters\
    \ in the substring.\n    // >>> countIgnoreCaseAndIgnoreCase(\"Hello world\")\n\
    \    // 1\n    def countIgnoreCaseAndIgnoreCase(string : String) : Int = {\n \
    \       var result = 0\n        for (i <- 0 until string.length) {\n         \
    \   var c = string.charAt(i)\n            if (c == \"world\") {\n            \
    \    result += 1\n            }\n        }\n        return result\n    }\n\n \
    \   // For a given string, return the number of times the substring \"world\"\
    \ occurs in the string,\n    // ignoring case, and ignoring the case of the letters\
    \ in the substring.\n    // >>> countIgnoreCaseAndIgnoreCase(\"Hello world\")",
  "        var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     result = result + string.charAt(i).toUpperCase()\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string.\n    // >>> count(\"Hello world!\")\n    //\
    \ 1\n    def count(string : String) : Int = {\n        var result = 0\n      \
    \  for (i <- 0 until string.length) {\n            if (string.substring(i, i +\
    \ \"world\".length).equals(\"world\")) {\n                result += 1\n      \
    \      }\n        }\n        return result\n    }\n\n    // For a given string,\
    \ return the number of times the substring \"world\" occurs in the string,\n \
    \   // ignoring case.\n    // >>> countIgnoreCase(\"Hello world!\")\n    // 1\n\
    \    def countIgnoreCase(string : String) : Int = {\n        var result = 0\n\
    \        for (i <- 0 until string.length) {\n            if (string.substring(i,\
    \ i + \"world\".length).equalsIgnoreCase(\"world\")) {\n                result\
    \ += 1\n            }\n        }\n        return result\n    }\n\n    // For a\
    \ given string, return the number of times the substring \"world\" occurs in the\
    \ string,\n    // ignoring case, and ignoring the case of the letters in the substring.\n\
    \    // >>> countIgnoreCaseAndIgnoreCase(\"Hello world!\")\n    // 1\n    def\
    \ countIgnoreCaseAndIgnoreCase(string : String) : Int = {\n        var result\
    \ = 0\n        for (i <- 0 until string.length) {\n            if (string.substring(i,\
    \ i + \"world\".length).equalsIgnoreCase(\"world\")) {\n                result\
    \ += 1\n            }\n        }\n        return result\n    }\n\n    // For a\
    \ given string, return the number of times the substring \"world\" occurs in the\
    \ string,\n    // ignoring case, and ignoring the case of the letters in the substring.\n\
    \    // >>> countIgnoreCaseAndIgnoreCase(\"Hello world!\")\n    // 1\n    def\
    \ countIgnoreCaseAndIgnoreCase2(string : String)", "        var result = \"\"\n\
    \        for (i <- 0 until string.length) {\n            result += string.charAt(i).toUpperCase\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times it appears in the string.\n    // >>> countAppearances(\"\
    hello\", \"hello\")\n    // 2\n    def countAppearances(string : String, substring\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.charAt(i) == substring.charAt(0)) {\n            \
    \    result += 1\n            }\n        }\n        return result\n    }\n\n \
    \   // For a given string, return the number of times it appears in the string,\
    \ ignoring case.\n    // >>> countAppearancesIgnoreCase(\"hello\", \"HELLO\")\n\
    \    // 2\n    def countAppearancesIgnoreCase(string : String, substring : String)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.charAt(i).toUpperCase == substring.charAt(0).toUpperCase)\
    \ {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times it appears in\
    \ the string, ignoring case, and\n    // ignoring case of the substring.\n   \
    \ // >>> countAppearancesIgnoreCase(\"hello\", \"HELLO\")\n    // 2\n    def countAppearancesIgnoreCase(string\
    \ : String, substring : String) : Int = {\n        var result = 0\n        for\
    \ (i <- 0 until string.length) {\n            if (string.charAt(i).toUpperCase\
    \ == substring.charAt(0).toUpperCase) {\n                result += 1\n       \
    \     }\n        }\n        return result\n    }\n\n    // For a given string,\
    \ return the number of times it appears in the string, ignoring case, and\n  \
    \  // ignoring case of the substring.\n    // >>> countAppearancesIgnoreCase(\"\
    hello\", \"HELLO\")\n    // 2\n    def countAppearancesIgnoreCase(string : String,\
    \ substring : String) : Int = {\n        var result = 0", "        var result\
    \ = \"\"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times a substring is repeated.\n    // >>> repeatCount(\"abcabcabc\"\
    , \"abc\")\n    // 3\n    def repeatCount(string : String, subString : String)\
    \ : Int = {\n        var count = 0\n        for (i <- 0 until string.length) {\n\
    \            if (string.substring(i, i + subString.length) == subString) {\n \
    \               count += 1\n            }\n        }\n        return count\n \
    \   }\n\n    // For a given string, return the number of times a substring is\
    \ repeated,\n    // ignoring case.\n    // >>> repeatCountIgnoreCase(\"abcabcabc\"\
    , \"ABC\")\n    // 3\n    def repeatCountIgnoreCase(string : String, subString\
    \ : String) : Int = {\n        var count = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.substring(i, i + subString.length).equalsIgnoreCase(subString))\
    \ {\n                count += 1\n            }\n        }\n        return count\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated,\n    // ignoring case, and ignoring the case of the first character.\n\
    \    // >>> repeatCountIgnoreCaseFirst(\"abcabcabc\", \"ABC\")\n    // 3\n   \
    \ def repeatCountIgnoreCaseFirst(string : String, subString : String) : Int =\
    \ {\n        var count = 0\n        for (i <- 0 until string.length) {\n     \
    \       if (string.substring(i, i + subString.length).equalsIgnoreCase(subString))\
    \ {\n                count += 1\n            }\n        }\n        return count\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated,\n    // ignoring case, and ignoring the case of the first character,\
    \ and ignoring", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            result += string.charAt(i).toUpperCase\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return the number of times a substring\
    \ is contained in the string.\n    // >>> countSubstring(\"abcabcabc\", \"abc\"\
    )\n    // 3\n    def countSubstring(string : String, substring : String) : Int\
    \ = {\n        var result = 0\n        for (i <- 0 until string.length) {\n  \
    \          if (string.substring(i, i + substring.length).equals(substring)) {\n\
    \                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ contained in the string,\n    // ignoring case.\n    // >>> countSubstringIgnoreCase(\"\
    abcABCabc\", \"abc\")\n    // 3\n    def countSubstringIgnoreCase(string : String,\
    \ substring : String) : Int = {\n        var result = 0\n        for (i <- 0 until\
    \ string.length) {\n            if (string.substring(i, i + substring.length).equalsIgnoreCase(substring))\
    \ {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ contained in the string,\n    // ignoring case, and ignoring the case of the\
    \ substring.\n    // >>> countSubstringIgnoreCase(\"abcABCabc\", \"ABC\")\n  \
    \  // 3\n    def countSubstringIgnoreCaseIgnoreCase(string : String, substring\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.substring(i, i + substring.length).equalsIgnoreCase(substring))\
    \ {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ contained in the string,\n    // ignoring case, and ignoring the case of the\
    \ substring.\n    // >>> countSubstringIgnoreCaseIgnoreCase(\"abcABCabc\", \"\
    ABC\")", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            result = result + string.charAt(i).toUpperCase\n        }\n \
    \       return result\n    }\n\n    // For a given string, return the number of\
    \ times a substring is repeated in the string.\n    // >>> countSubstring(\"abcabcabc\"\
    , \"abc\")\n    // 2\n    def countSubstring(string : String, substring : String)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.substring(i, i + substring.length).equals(substring))\
    \ {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated in the string,\n    // ignoring case.\n    // >>> countSubstringIgnoreCase(\"\
    abcabcabc\", \"ABC\")\n    // 2\n    def countSubstringIgnoreCase(string : String,\
    \ substring : String) : Int = {\n        var result = 0\n        for (i <- 0 until\
    \ string.length) {\n            if (string.substring(i, i + substring.length).equalsIgnoreCase(substring))\
    \ {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated in the string,\n    // ignoring case and non-alphabetical characters.\n\
    \    // >>> countSubstringIgnoreCase(\"abcabcabc\", \"ABC\")\n    // 2\n    def\
    \ countSubstringIgnoreCaseAndNonAlpha(string : String, substring : String) : Int\
    \ = {\n        var result = 0\n        for (i <- 0 until string.length) {\n  \
    \          if (string.substring(i, i + substring.length).equalsIgnoreCase(substring)\
    \ &&\n                string.substring(i, i + substring.length).chars().allMatch(Character.isLetter))\
    \ {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated in the string,\n    // ignoring case and non-", "        var result\
    \ = \"\"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result", "        var result = \"\"\n        for (i\
    \ <- 0 until string.length) {\n            var c = string.charAt(i)\n        \
    \    if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n  \
    \          } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        result\n    }\n\n    // For a given string, return the number\
    \ of times a substring is contained in the string.\n    // >>> countSubstring(\"\
    abcabcabcabc\", \"abc\")\n    // 3\n    def countSubstring(string : String, substring\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var j = i\n            while (j < string.length && substring.charAt(0)\
    \ == string.charAt(j)) {\n                j += 1\n            }\n            if\
    \ (j - i >= substring.length) {\n                result += 1\n            }\n\
    \            i = j\n        }\n        result\n    }\n\n    // For a given string,\
    \ return the number of times a substring is contained in the string,\n    // ignoring\
    \ case.\n    // >>> countSubstringIgnoreCase(\"abcabcabcabc\", \"ABC\")\n    //\
    \ 3\n    def countSubstringIgnoreCase(string : String, substring : String) : Int\
    \ = {\n        var result = 0\n        for (i <- 0 until string.length) {\n  \
    \          var j = i\n            while (j < string.length && substring.charAt(0)\
    \ == string.charAt(j).toUpperCase()) {\n                j += 1\n            }\n\
    \            if (j - i >= substring.length) {\n                result += 1\n \
    \           }\n            i = j\n        }\n        result\n    }\n\n    // For\
    \ a given string, return the number of times a substring is contained in the string,\n\
    \    // ignoring case and order.\n    // >>> countSubstringIgnoreCaseOrder(\"\
    abcabcabcabc\", \"ABC\")\n    // 3\n    def countSubstringIgnoreCaseOrder(string\
    \ : String, substring : String) : Int = {\n        var result = 0\n        for\
    \ (i <- 0 until string.length) {", "        var result = \"\"\n        for (i\
    \ <- 0 until string.length) {\n            var ch = string.charAt(i)\n       \
    \     if (ch >= 'a' && ch <= 'z') {\n                result += ch.toUpperCase\n\
    \            } else {\n                result += ch.toLowerCase\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times that the string appears in the string.\n    // >>> countAppearances(\"\
    hello\", \"hello\")\n    // 2\n    def countAppearances(string : String, substring\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.charAt(i) == substring.charAt(0)) {\n            \
    \    result += 1\n            }\n        }\n        return result\n    }\n\n \
    \   // For a given string, return the number of times that the string appears\
    \ in the string.\n    // >>> countAppearances(\"hello\", \"lo\")\n    // 1\n \
    \   def countAppearances2(string : String, substring : String) : Int = {\n   \
    \     var result = 0\n        for (i <- 0 until string.length) {\n           \
    \ if (string.charAt(i) == substring.charAt(0)) {\n                result += 1\n\
    \            }\n        }\n        return result\n    }\n\n    // For a given\
    \ string, return the number of times that the string appears in the string.\n\
    \    // >>> countAppearances(\"hello\", \"ll\")\n    // 0\n    def countAppearances3(string\
    \ : String, substring : String) : Int = {\n        var result = 0\n        for\
    \ (i <- 0 until string.length) {\n            if (string.charAt(i) == substring.charAt(0))\
    \ {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times that the string\
    \ appears in the string.\n    // >>> countAppearances(\"hello\", \"ll\")\n   \
    \ // 0\n    def countAppearances4(string : String, substring : String) : Int =\
    \ {\n        var result = 0\n        for (i <- 0 until string.length) {\n    \
    \        if (string.charAt(", "        var s = string.toLowerCase\n        var\
    \ r = \"\"\n        for (i <- 0 until string.length) {\n            r = r + s(string.charAt(i))\n\
    \        }\n        return r", "        var result = \"\"\n        for (i <- 0\
    \ until string.length) {\n            var c = string.charAt(i)\n            if\
    \ (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n        \
    \    } else {\n                result += c.toLowerCase\n            }\n      \
    \  }\n        return result\n    }\n\n    // For a given string, return the number\
    \ of times a substring is repeated in the string.\n    // >>> countSubstring(\"\
    abcabcabcabc\", \"abc\")\n    // 3\n    def countSubstring(string : String, substring\
    \ : String) : Int = {\n        var count = 0\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (substring.contains(c))\
    \ {\n                count += 1\n            }\n        }\n        return count\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated in the string.\n    // >>> countSubstring(\"abcabcabcabc\", \"abc\"\
    )\n    // 3\n    def countSubstring2(string : String, substring : String) : Int\
    \ = {\n        var count = 0\n        for (i <- 0 until string.length) {\n   \
    \         var c = string.charAt(i)\n            if (substring.contains(c)) {\n\
    \                count += 1\n            }\n        }\n        return count\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated in the string.\n    // >>> countSubstring(\"abcabcabcabc\", \"abc\"\
    )\n    // 3\n    def countSubstring3(string : String, substring : String) : Int\
    \ = {\n        var count = 0\n        for (i <- 0 until string.length) {\n   \
    \         var c = string.charAt(i)\n            if (substring.contains(c)) {\n\
    \                count += 1\n            }\n        }\n        return count\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated in the string.\n    // >>> countSubstring(\"abcabcabcabc\", \"abc\"\
    )\n    // 3\n    def countSubstring4(string : String, subst", "        var result\
    \ = \"\"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times the substring appears in the string.\n    // >>> countSubstring(\"\
    hello\", \"ll\")\n    // 2\n    def countSubstring(string : String, substring\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (substring.contains(c))\
    \ {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times the substring\
    \ appears in the string.\n    // >>> countSubstring(\"hello\", \"ll\")\n    //\
    \ 2\n    def countSubstring2(string : String, substring : String) : Int = {\n\
    \        var result = 0\n        for (i <- 0 until string.length) {\n        \
    \    var c = string.charAt(i)\n            if (substring.contains(c)) {\n    \
    \            result += 1\n            }\n        }\n        return result\n  \
    \  }\n\n    // For a given string, return the number of times the substring appears\
    \ in the string.\n    // >>> countSubstring(\"hello\", \"ll\")\n    // 2\n   \
    \ def countSubstring3(string : String, substring : String) : Int = {\n       \
    \ var result = 0\n        for (i <- 0 until string.length) {\n            var\
    \ c = string.charAt(i)\n            if (substring.contains(c)) {\n           \
    \     result += 1\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return the number of times the substring appears in\
    \ the string.\n    // >>> countSubstring(\"hello\", \"ll\")\n    // 2\n    def\
    \ countSubstring4(string : String, substring : String) : Int = {\n        var\
    \ result = 0\n        ", "        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (c >=\
    \ 'a' && c <= 'z') {\n                result += c.toUpperCase\n            } else\
    \ {\n                result += c.toLowerCase\n            }\n        }\n     \
    \   result\n    }\n\n    // For a given string, return a string where all characters\
    \ that are not in the given set are removed.\n    // >>> removeChars(\"Hello\"\
    , \"hl\")\n    // \"eo\"\n    def removeChars(string : String, chars : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (!chars.contains(c))\
    \ {\n                result += c\n            }\n        }\n        result\n \
    \   }\n\n    // For a given string, return a string where all adjacent characters\
    \ that are the same are removed.\n    // >>> removeAdjacent(\"code\")\n    //\
    \ \"odc\"\n    def removeAdjacent(string : String) : String = {\n        var result\
    \ = \"\"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (i + 1 < string.length && string.charAt(i + 1) == c) {\n     \
    \           continue\n            }\n            result += c\n        }\n    \
    \    result\n    }\n\n    // For a given string, return a new string where all\
    \ the words in lowercase are replaced with their uppercase equivalent.\n    //\
    \ Words are defined as groups of non-space characters.\n    // >>> toUpper(\"\
    Let's code in Java.\")\n    // \"Let's Code In Java.\"\n    def toUpper(string\
    \ : String) : String = {\n        var result = \"\"\n        var word = \"\"\n\
    \        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c == ' ') {\n                if (word.length > 0) {\n       \
    \             result += word.toUpper\n                }\n                word\
    \ = \"\"\n            } else {\n                word += c\n            }\n   \
    \     }\n        ", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result += c.toUpperCase\n            } else {\n         \
    \       result += c.toLowerCase\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where all characters that\
    \ are not in the alphabet are removed.\n    // >>> removeNonAlphabetChars(\"Hello\"\
    )\n    // \"ello\"\n    def removeNonAlphabetChars(string : String) : String =\
    \ {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n \
    \           var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n\
    \                result += c\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where all adjacent characters\
    \ that are the same are removed.\n    // >>> removeAdjacentDuplicates(\"code\"\
    )\n    // \"cde\"\n    def removeAdjacentDuplicates(string : String) : String\
    \ = {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            var c = string.charAt(i)\n            if (i < string.length - 1)\
    \ {\n                var d = string.charAt(i + 1)\n                if (c == d)\
    \ {\n                    continue\n                }\n            }\n        \
    \    result += c\n        }\n        return result\n    }\n\n    // For a given\
    \ string, return a string where all adjacent characters that are in the alphabet\
    \ are removed.\n    // >>> removeAdjacentAlphabetChars(\"code\")\n    // \"e\"\
    \n    def removeAdjacentAlphabetChars(string : String) : String = {\n        var\
    \ result = \"\"\n        for (i <- 0 until string.length) {\n            var c\
    \ = string.charAt(i)\n            if (i < string.length - 1) {\n             \
    \   var d = string.charAt(i + 1)\n                if (c >= 'a' && c <= 'z' &&\
    \ d >= 'a' && d <= 'z') {\n", "        var result = \"\"\n        for (i <- 0\
    \ until string.length) {\n            var c = string.charAt(i)\n            if\
    \ (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n        \
    \    } else {\n                result += c.toLowerCase\n            }\n      \
    \  }\n        result\n    }\n\n    // For a given string, return the number of\
    \ times the substring \"world\" occurs in the string.\n    // >>> count(\"Hello\
    \ world\")\n    // 1\n    def count(string : String) : Int = {\n        var result\
    \ = 0\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c == \"world\") {\n                result += 1\n            }\n\
    \        }\n        result\n    }\n\n    // For a given string, return the number\
    \ of times the substring \"world\" occurs in the string.\n    // >>> count(\"\
    Hello world\")\n    // 1\n    def count2(string : String) : Int = {\n        var\
    \ result = 0\n        for (i <- 0 until string.length) {\n            var c =\
    \ string.charAt(i)\n            if (c == \"world\") {\n                result\
    \ += 1\n            }\n        }\n        result\n    }\n\n    // For a given\
    \ string, return the number of times the substring \"world\" occurs in the string.\n\
    \    // >>> count(\"Hello world\")\n    // 1\n    def count3(string : String)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c == \"world\") {\n\
    \                result += 1\n            }\n        }\n        result\n    }\n\
    \n    // For a given string, return the number of times the substring \"world\"\
    \ occurs in the string.\n    // >>> count(\"Hello world\")\n    // 1\n    def\
    \ count4(string : String) : Int = {\n        var result = 0\n        for (i <-\
    \ 0 until string.length) {\n            var c = string.charAt(i)\n           \
    \ if (c == \"world\") {\n                result += 1\n            }\n        }\n",
  "        var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n    \
    \            result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return the number of times the substring \"world\"\
    \ occurs in the string.\n    // >>> count(\"Hello world\")\n    // 1\n    def\
    \ count(string : String) : Int = {\n        var result = 0\n        for (i <-\
    \ 0 until string.length) {\n            var c = string.charAt(i)\n           \
    \ if (c == \"world\") {\n                result += 1\n            }\n        }\n\
    \        return result\n    }\n\n    // For a given string, return a string where\
    \ \"not \" has been added to the front, and \"beautiful\"\n    // has been added\
    \ to the back.\n    // >>> makeNice(\"Hello\")\n    // \"not beautiful\"\n   \
    \ def makeNice(string : String) : String = {\n        var result = \"not \" +\
    \ string\n        result += \" beautiful\"\n        return result\n    }\n\n \
    \   // For a given string, return a string where \"not \" has been added to the\
    \ front, and \"beautiful\"\n    // has been added to the back. The string should\
    \ only contain lowercase letters.\n    // >>> makeNiceLower(\"Hello\")\n    //\
    \ \"not beautiful\"\n    def makeNiceLower(string : String) : String = {\n   \
    \     var result = \"not \" + string\n        result += \" beautiful\"\n     \
    \   return result\n    }\n\n    // For a given string, return a string where \"\
    not \" has been added to the front, and \"beautiful\"\n    // has been added to\
    \ the back. The string should only contain lowercase letters.\n    // >>> makeNiceLower(\"\
    Hello\")\n    // \"not beautiful\"\n    def makeNiceLower2(string : String) :\
    \ String = {\n        var result = \"not \" + string\n        result += \" beautiful\"\
    \n        return result\n    }\n\n    // For a given string, return a string where\
    \ \"not \" has been added to the front, and \"", "        var result = \"\"\n\
    \        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result", "        var result = \"\"\n        for (i\
    \ <- 0 until string.length) {\n            result = result + string.charAt(i).toUpperCase()\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ a string where adjacent characters that are the same have been\n    // separated\
    \ by a space.\n    // >>> separateSpaces(\"Hello\")\n    // (\"H e l l o\")\n\
    \    def separateSpaces(string : String) : String = {\n        var result = \"\
    \"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (i + 1 < string.length && c == string.charAt(i + 1)) {\n     \
    \           result = result + c + \" \"\n            } else {\n              \
    \  result = result + c\n            }\n        }\n        return result\n    }\n\
    \n    // For a given string, return a string where adjacent characters that are\
    \ digits have been\n    // separated by a space.\n    // >>> separateDigits(\"\
    12345\")\n    // (\"1 2 3 4 5\")\n    def separateDigits(string : String) : String\
    \ = {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            var c = string.charAt(i)\n            if (Character.isDigit(c)) {\n\
    \                result = result + c + \" \"\n            } else {\n         \
    \       result = result + c\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where adjacent characters\
    \ that are either a digit or a\n    // lowercase letter have been separated by\
    \ a space.\n    // >>> separateWords(\"123abc5\")\n    // (\"1 2 3 a b c 5\")\n\
    \    def separateWords(string : String) : String = {\n        var result = \"\"\
    \n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (Character.isLetter(c) || Character.isDigit(c)) {\n          \
    \      result = result + c + \" \"\n            } else {\n                result\
    \ = result + c\n            }\n        }\n        return result\n    }\n\n   \
    \ // For a given string, return a string where adjacent", "        var result\
    \ = \"\"\n        for (i <- 0 until string.length) {\n            result += string.charAt(i).toUpperCase()\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ a string where adjacent characters that are the same have been\n    // merged\
    \ into a single character.\n    // >>> mergeAdjacent((\"code\"))\n    // (\"cod\"\
    )\n    def mergeAdjacent(string : String) : String = {\n        var result = \"\
    \"\n        for (i <- 0 until string.length) {\n            if (i < string.length\
    \ - 1) {\n                if (string.charAt(i) == string.charAt(i + 1)) {\n  \
    \                  result += string.charAt(i)\n                } else {\n    \
    \                result += string.charAt(i) + string.charAt(i + 1)\n         \
    \           i += 1\n                }\n            } else {\n                result\
    \ += string.charAt(i)\n            }\n        }\n        return result\n    }\n\
    \n    // For a given string, return a string where adjacent characters that are\
    \ digits have been\n    // merged into a single digit.\n    // >>> mergeNumbers((\"\
    code123\"))\n    // (\"code1 2 3\")\n    def mergeNumbers(string : String) : String\
    \ = {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            if (i < string.length - 1) {\n                if (string.charAt(i).isDigit()\
    \ && string.charAt(i + 1).isDigit()) {\n                    result += string.charAt(i)\
    \ + string.charAt(i + 1)\n                    i += 1\n                } else {\n\
    \                    result += string.charAt(i)\n                }\n         \
    \   } else {\n                result += string.charAt(i)\n            }\n    \
    \    }\n        return result\n    }\n\n    // For a given string, return a string\
    \ where adjacent characters that are either a letter or a\n    // digit have been\
    \ merged into a single character.\n    // >>> mergeLettersOrDigits((\"code123\"\
    ))\n    // (\"code12 3\")\n    def mergeLettersOrDigits(string : String) : String\
    \ = {\n        var result =", "        var result = \"\"\n        for (i <- 0\
    \ until string.length) {\n            result = result + string.charAt(i).toUpperCase\n\
    \        }\n        result\n    }\n\n    // For a given string, return a string\
    \ where adjacent characters that are the same have been\n    // separated by a\
    \ space.\n    // >>> separateAdjacentLetters(\"abcd\")\n    // \"a b c d\"\n \
    \   def separateAdjacentLetters(string : String) : String = {\n        var result\
    \ = \"\"\n        for (i <- 0 until string.length) {\n            result = result\
    \ + string.charAt(i)\n            if (i + 1 < string.length && string.charAt(i)\
    \ == string.charAt(i + 1)) {\n                result = result + \" \"\n      \
    \      }\n        }\n        result\n    }\n\n    // For a given string, return\
    \ a string where adjacent characters that are not the same have been\n    // separated\
    \ by a space.\n    // >>> separateAdjacentLetters(\"aabcd\")\n    // \"a a b c\
    \ d\"\n    def separateAdjacentLetters2(string : String) : String = {\n      \
    \  var result = \"\"\n        for (i <- 0 until string.length) {\n           \
    \ result = result + string.charAt(i)\n            if (i + 1 < string.length &&\
    \ string.charAt(i) != string.charAt(i + 1)) {\n                result = result\
    \ + \" \"\n            }\n        }\n        result\n    }\n\n    // For a given\
    \ string, return a string where adjacent characters that are not the same have\
    \ been\n    // separated by a space.\n    // >>> separateAdjacentLetters2(\"aabcd\"\
    )\n    // \"a a b c d\"\n    def separateAdjacentLetters3(string : String) : String\
    \ = {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            result = result + string.charAt(i)\n            if (i + 1 < string.length\
    \ && string.charAt(i) != string.charAt(i + 1)) {\n                result = result\
    \ + \" \"\n            }\n        }\n        result\n    }\n\n    // For a given",
  "        var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n    \
    \            result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return a string where adjacent characters that are\
    \ the same have been\n    // merged into a single character.\n    // >>> mergeAdjacent((\"\
    code\"))\n    // (\"cod\")\n    def mergeAdjacent(string : String) : String =\
    \ {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n \
    \           var c = string.charAt(i)\n            if (i < string.length - 1 &&\
    \ string.charAt(i + 1) == c) {\n                result += c\n                i\
    \ += 1\n            } else {\n                result += c\n            }\n   \
    \     }\n        return result\n    }\n\n    // For a given string, return a string\
    \ where adjacent characters that are digits have been\n    // merged into a single\
    \ digit.\n    // >>> mergeNumbers((\"code123\"))\n    // (\"code1\")\n    def\
    \ mergeNumbers(string : String) : String = {\n        var result = \"\"\n    \
    \    for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (i < string.length - 1 && Character.isDigit(string.charAt(i +\
    \ 1))) {\n                result += c\n                i += 1\n            } else\
    \ {\n                result += c\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where adjacent characters\
    \ that are either a letter or a\n    // digit have been merged into a single character.\n\
    \    // >>> mergeLettersNumbers((\"code123\"))\n    // (\"code12\")\n    def mergeLettersNumbers(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (i <\
    \ string.length - 1 && (Character.isLetter(string.charAt(i +", "        var s\
    \ = string.toLowerCase\n        var r = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            r = r + s.charAt(i).toUpperCase\n        }\n        r\n    }\n\
    \n    // For a given string, return the number of times a substring is repeated.\n\
    \    // >>> repeatCount(\"abcabcabc\", \"abc\")\n    // 2\n    def repeatCount(string\
    \ : String, substring : String) : Int = {\n        var count = 0\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).equals(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        count\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated,\n    // starting at the given index.\n    // >>> repeatCount(\"abcabcabc\"\
    , \"abc\", 2)\n    // 2\n    def repeatCount(string : String, substring : String,\
    \ startIndex : Int) : Int = {\n        var count = 0\n        var i = startIndex\n\
    \        while (i < string.length) {\n            if (string.substring(i).equals(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        count\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated,\n    // starting at the given index, and working backwards.\n    //\
    \ >>> repeatCount(\"abcabcabc\", \"abc\", 2, -1)\n    // 2\n    def repeatCount(string\
    \ : String, substring : String, startIndex : Int, direction : Int) : Int = {\n\
    \        var count = 0\n        var i = startIndex\n        while (i >= 0) {\n\
    \            if (string.substring(i).equals(substring)) {\n                count\
    \ += 1\n                i -= substring.length\n            } else {\n        \
    \        i -= 1\n            }\n        }\n        count\n    }\n\n    // For\
    \ a given string, return the number of times a substring is repeated,", "    \
    \    var result = \"\"\n        for (i <- 0 until string.length) {\n         \
    \   var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n      \
    \          result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result", "      \
    \  var result = \"\"\n        for (i <- 0 until string.length) {\n           \
    \ var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n        \
    \        result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return a string where adjacent characters that are\
    \ the same have been\n    // merged into a single character.\n    // >>> mergeAdjacent((\"\
    code\"))\n    // (\"cod\")\n    def mergeAdjacent(string : String) : String =\
    \ {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n \
    \           var c = string.charAt(i)\n            if (i < string.length - 1 &&\
    \ string.charAt(i + 1) == c) {\n                result += c\n                i\
    \ += 1\n            } else {\n                result += c\n            }\n   \
    \     }\n        return result\n    }\n\n    // For a given string, return a string\
    \ where adjacent characters that are digits have been\n    // merged into a single\
    \ digit.\n    // >>> mergeNumbers((\"code123\"))\n    // (\"code1\")\n    def\
    \ mergeNumbers(string : String) : String = {\n        var result = \"\"\n    \
    \    for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= '0' && c <= '9') {\n                result += c\n      \
    \      } else {\n                result += c\n            }\n        }\n     \
    \   return result\n    }\n\n    // For a given string, return a string where adjacent\
    \ characters that are either a letter or a\n    // digit have been merged into\
    \ a single character.\n    // >>> mergeLettersNumbers((\"code123\"))\n    // (\"\
    code12\")\n    def mergeLettersNumbers(string : String) : String = {\n       \
    \ var result = \"\"\n        for (i <- 0 until string.length) {\n            var\
    \ c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n            \
    \    result += c\n            } else if (c >= '0' && c <= '9') {\n           \
    \     result", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result += c.toUpperCase\n            } else {\n         \
    \       result += c.toLowerCase\n            }\n        }\n        result", " \
    \       var result = \"\"\n        for (i <- 0 until string.length) {\n      \
    \      result = result + string.charAt(i).toUpperCase()\n        }\n        return\
    \ result\n    }\n\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flipCase(\"Hello\")\n    // (\"hELLO\"\
    )\n    def flipCase2(string : String) : String = {\n        var result = \"\"\n\
    \        for (i <- 0 until string.length) {\n            result = result + string.charAt(i).toUpperCase()\n\
    \        }\n        return result\n    }\n\n    // For a given string, flip lowercase\
    \ characters to uppercase and uppercase to lowercase.\n    // >>> flipCase(\"\
    Hello\")\n    // (\"hELLO\")\n    def flipCase3(string : String) : String = {\n\
    \        var result = \"\"\n        for (i <- 0 until string.length) {\n     \
    \       result = result + string.charAt(i).toUpperCase()\n        }\n        return\
    \ result\n    }\n\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flipCase(\"Hello\")\n    // (\"hELLO\"\
    )\n    def flipCase4(string : String) : String = {\n        var result = \"\"\n\
    \        for (i <- 0 until string.length) {\n            result = result + string.charAt(i).toUpperCase()\n\
    \        }\n        return result\n    }\n\n    // For a given string, flip lowercase\
    \ characters to uppercase and uppercase to lowercase.\n    // >>> flipCase(\"\
    Hello\")\n    // (\"hELLO\")\n    def flipCase5(string : String) : String = {\n\
    \        var result = \"\"\n        for (i <- 0 until string.length) {\n     \
    \       result = result + string.charAt(i).toUpperCase()\n        }\n        return\
    \ result\n    }\n\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flipCase(\"Hello\")\n    // (\"hELLO\"\
    )\n    def flipCase6(string : String) : String", "        var result = \"\"\n\
    \        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        result\n    }\n\n    // For a given string, return the number\
    \ of times that a substring is contained in the string.\n    // >>> countSubstring(\"\
    abcabcabc\", \"abc\")\n    // 3\n    def countSubstring(string : String, substring\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var j = i + substring.length\n            if (j <= string.length)\
    \ {\n                if (string.substring(i, j).equals(substring)) {\n       \
    \             result += 1\n                }\n            }\n        }\n     \
    \   result\n    }\n\n    // For a given string, return the number of times that\
    \ a substring is contained in the string,\n    // ignoring case.\n    // >>> countSubstringIgnoreCase(\"\
    abcABCabc\", \"abc\")\n    // 3\n    def countSubstringIgnoreCase(string : String,\
    \ substring : String) : Int = {\n        var result = 0\n        for (i <- 0 until\
    \ string.length) {\n            var j = i + substring.length\n            if (j\
    \ <= string.length) {\n                if (string.substring(i, j).equalsIgnoreCase(substring))\
    \ {\n                    result += 1\n                }\n            }\n     \
    \   }\n        result\n    }\n\n    // For a given string, return the number of\
    \ times that a substring is contained in the string,\n    // ignoring case, and\
    \ ignoring the case of the substring.\n    // >>> countSubstringIgnoreCase(\"\
    abcABCabc\", \"abc\")\n    // 3\n    def countSubstringIgnoreCaseIgnoreCase(string\
    \ : String, substring : String) : Int = {\n        var result = 0\n        for\
    \ (i <- 0 until string.length) {\n            var j = i + substring.length\n \
    \           if (j <= string.length) {\n                ", "        var result\
    \ = \"\"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase()\n\
    \            } else {\n                result += c.toLowerCase()\n           \
    \ }\n        }\n        return result\n    }\n\n    // For a given string, return\
    \ a string where adjacent characters that are the same have been\n    // merged\
    \ into a single character.\n    // >>> mergeAdjacent((\"code\"))\n    // (\"cod\"\
    )\n    def mergeAdjacent(string : String) : String = {\n        var result = \"\
    \"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (i < string.length - 1 && string.charAt(i + 1) == c) {\n     \
    \           result += c\n                i += 1\n            } else {\n      \
    \          result += c\n            }\n        }\n        return result\n    }\n\
    \n    // For a given string, return a string where adjacent characters that are\
    \ digits have been\n    // merged into a single digit.\n    // >>> mergeNumbers((\"\
    code123\"))\n    // (\"code1\")\n    def mergeNumbers(string : String) : String\
    \ = {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            var c = string.charAt(i)\n            if (c >= '0' && c <= '9') {\n\
    \                result += c\n            } else {\n                result +=\
    \ c\n            }\n        }\n        return result\n    }\n\n    // For a given\
    \ string, return a string where adjacent characters that are either a letter or\
    \ a\n    // digit have been merged into a single character.\n    // >>> mergeLettersNumbers((\"\
    code123\"))\n    // (\"code12\")\n    def mergeLettersNumbers(string : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result += c\n            } else if (c >= '0' && c <= '9')\
    \ {\n", "        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            result += string.charAt(i).toUpperCase\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string.\n    // >>> count(\"Hello world!\")\n    //\
    \ 1\n    def count(string : String) : Int = {\n        var result = 0\n      \
    \  for (i <- 0 until string.length) {\n            if (string.substring(i, i +\
    \ \"world\".length).equals(\"world\")) {\n                result += 1\n      \
    \      }\n        }\n        return result\n    }\n\n    // For a given string,\
    \ return the number of times the substring \"world\" occurs in the string,\n \
    \   // ignoring case.\n    // >>> countIgnoreCase(\"Hello world!\")\n    // 1\n\
    \    def countIgnoreCase(string : String) : Int = {\n        var result = 0\n\
    \        for (i <- 0 until string.length) {\n            if (string.substring(i,\
    \ i + \"world\".length).equalsIgnoreCase(\"world\")) {\n                result\
    \ += 1\n            }\n        }\n        return result\n    }\n\n    // For a\
    \ given string, return the number of times the substring \"world\" occurs in the\
    \ string,\n    // ignoring case, and ignoring the case of the letters.\n    //\
    \ >>> countIgnoreCaseAndIgnoreCase(\"Hello world!\")\n    // 1\n    def countIgnoreCaseAndIgnoreCase(string\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.substring(i, i + \"world\".length).equalsIgnoreCase(\"\
    world\")) {\n                result += 1\n            }\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string,\n    // ignoring case, and ignoring the case\
    \ of the letters, and ignoring the case of the letters\n    // in the substring\
    \ \"world\".\n    // >>> countIgnoreCaseAndIgnoreCaseAndIgnoreCase(\"Hello world!\"\
    )\n    // 1\n    def countIgnoreCase", "        var result = \"\"\n        for\
    \ (i <- 0 until string.length) {\n            result += string.charAt(i).toUpperCase\n\
    \        }\n        return result\n    }\n\n    // For a given string, flip lowercase\
    \ characters to uppercase and uppercase to lowercase.\n    // >>> flipCase(\"\
    Hello\")\n    // \"hELLO\"\n    def flipCase2(string : String) : String = {\n\
    \        var result = \"\"\n        for (i <- 0 until string.length) {\n     \
    \       result += string.charAt(i).toUpperCase\n        }\n        return result\n\
    \    }\n\n    // For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n    // >>> flipCase(\"Hello\")\n    // \"hELLO\"\n\
    \    def flipCase3(string : String) : String = {\n        var result = \"\"\n\
    \        for (i <- 0 until string.length) {\n            result += string.charAt(i).toUpperCase\n\
    \        }\n        return result\n    }\n\n    // For a given string, flip lowercase\
    \ characters to uppercase and uppercase to lowercase.\n    // >>> flipCase(\"\
    Hello\")\n    // \"hELLO\"\n    def flipCase4(string : String) : String = {\n\
    \        var result = \"\"\n        for (i <- 0 until string.length) {\n     \
    \       result += string.charAt(i).toUpperCase\n        }\n        return result\n\
    \    }\n\n    // For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n    // >>> flipCase(\"Hello\")\n    // \"hELLO\"\n\
    \    def flipCase5(string : String) : String = {\n        var result = \"\"\n\
    \        for (i <- 0 until string.length) {\n            result += string.charAt(i).toUpperCase\n\
    \        }\n        return result\n    }\n\n    // For a given string, flip lowercase\
    \ characters to uppercase and uppercase to lowercase.\n    // >>> flipCase(\"\
    Hello\")\n    // \"hELLO\"\n    def flipCase6(string : String) : String = {\n\
    \        var result = \"\"\n        for (i <- 0", "        var result = \"\"\n\
    \        for (i <- 0 until string.length) {\n            result += string.charAt(i).toUpperCase()\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times a substring is contained in the string.\n    // >>> countSubstring(\"\
    abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     result = result + string.charAt(i).toUpperCase()\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return the number of times a substring\
    \ is repeated.\n    // >>> repeatCount(\"abcabcabc\", \"abc\")\n    // 3\n   \
    \ def repeatCount(string : String, substring : String) : Int = {\n        var\
    \ count = 0\n        for (i <- 0 until string.length) {\n            if (string.substring(i,\
    \ i + substring.length).equals(substring)) {\n                count = count +\
    \ 1\n            }\n        }\n        return count\n    }\n\n    // For a given\
    \ string, return the number of times a substring is repeated in the reverse order.\n\
    \    // >>> repeatCount(\"abcabcabc\", \"abc\", true)\n    // 3\n    def repeatCount(string\
    \ : String, substring : String, reverse : Boolean) : Int = {\n        var count\
    \ = 0\n        for (i <- 0 until string.length) {\n            if (string.substring(i,\
    \ i + substring.length).equals(substring)) {\n                count = count +\
    \ 1\n            }\n        }\n        return count\n    }\n\n    // For a given\
    \ string, return the number of times a substring is repeated in the given direction.\n\
    \    // >>> repeatCount(\"abcabcabc\", \"abc\", true, true)\n    // 2\n    def\
    \ repeatCount(string : String, substring : String, reverse : Boolean, direction\
    \ : Boolean) : Int = {\n        var count = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.substring(i, i + substring.length).equals(substring))\
    \ {\n                count = count + 1\n            }\n            if (direction)\
    \ {\n                i = i + 1\n            } else {\n                i = i -\
    \ 1\n            }\n        }\n        return count\n    }\n\n    // For a given\
    \ string, return the number of times a substring is repeated in the given direction.\n\
    \    // >>> repeatCount(\"abcabcabc\", \"abc\", true, true, true)\n    // 2\n\
    \    def repeat", "        var s = string.toLowerCase\n        var r = \"\"\n\
    \        for (i <- 0 until s.length) {\n            r = r + s.charAt(i).toUpperCase\n\
    \        }\n        r\n    }\n\n    // For a given string, return a string where\
    \ \"bad\" characters are replaced with \"good\" characters.\n    // >>> replaceBadChars(\"\
    bad\")\n    // \"good\"\n    def replaceBadChars(string : String) : String = {\n\
    \        var s = string.toLowerCase\n        var r = \"\"\n        for (i <- 0\
    \ until s.length) {\n            if (s.charAt(i) == \"b\") {\n               \
    \ r = r + \"g\"\n            } else {\n                r = r + s.charAt(i)\n \
    \           }\n        }\n        r\n    }\n\n    // For a given string, return\
    \ a string where \"bad\" characters are replaced with \"good\" characters.\n \
    \   // >>> replaceBadChars(\"bad\")\n    // \"good\"\n    def replaceBadChars2(string\
    \ : String) : String = {\n        var s = string.toLowerCase\n        var r =\
    \ \"\"\n        for (i <- 0 until s.length) {\n            if (s.charAt(i) ==\
    \ \"b\") {\n                r = r + \"g\"\n            } else {\n            \
    \    r = r + s.charAt(i)\n            }\n        }\n        r\n    }\n\n    //\
    \ For a given string, return a string where \"bad\" characters are replaced with\
    \ \"good\" characters.\n    // >>> replaceBadChars(\"bad\")\n    // \"good\"\n\
    \    def replaceBadChars3(string : String) : String = {\n        var s = string.toLowerCase\n\
    \        var r = \"\"\n        for (i <- 0 until s.length) {\n            if (s.charAt(i)\
    \ == \"b\") {\n                r = r + \"g\"\n            } else {\n         \
    \       r = r + s.charAt(i)\n            }\n        }\n        r\n    }\n\n  \
    \  // For a given string, return a string where \"bad\" characters are replaced\
    \ with \"good\" characters.\n    // >>> replaceBadChars(\"", "        var result\
    \ = \"\"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times that the string appears in the string.\n    // >>> countAppearances(\"\
    hello\", \"hello\")\n    // 2\n    def countAppearances(string : String, substring\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c == substring.charAt(0))\
    \ {\n                result += 1\n                for (j <- 1 until substring.length)\
    \ {\n                    if (string.charAt(i + j) != substring.charAt(j)) {\n\
    \                        break\n                    }\n                    result\
    \ += 1\n                }\n            }\n        }\n        return result\n \
    \   }\n\n    // For a given string, return the number of times that the substring\
    \ appears in the string.\n    // >>> countSubstringAppearances(\"hello\", \"lo\"\
    )\n    // 2\n    def countSubstringAppearances(string : String, substring : String)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c == substring.charAt(0))\
    \ {\n                result += 1\n                for (j <- 1 until substring.length)\
    \ {\n                    if (string.charAt(i + j) != substring.charAt(j)) {\n\
    \                        break\n                    }\n                    result\
    \ += 1\n                }\n            }\n        }\n        return result\n \
    \   }\n\n    // For a given string, return the number of times that the substring\
    \ appears in the string.\n    // >>> countSubstringAppearances(\"hello\", \"lo\"\
    )\n    // 2\n    def countSubstringAppearances2(string : String, substring : String)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n", "        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n\
    \                result += c.toUpperCase\n            } else {\n             \
    \   result += c.toLowerCase\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated.\n    // >>> repeatCount(\"abcabcabc\", \"abc\")\n    // 3\n    def\
    \ repeatCount(string : String, substring : String) : Int = {\n        var count\
    \ = 0\n        for (i <- 0 until string.length) {\n            var i2 = string.indexOf(substring,\
    \ i)\n            if (i2 >= 0) {\n                count += 1\n               \
    \ i = i2 + substring.length\n            }\n        }\n        return count\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated starting at a given index.\n    // >>> repeatCount(\"abcabcabc\", \"\
    abc\", 2)\n    // 2\n    def repeatCount(string : String, substring : String,\
    \ startIndex : Int) : Int = {\n        var count = 0\n        for (i <- 0 until\
    \ string.length) {\n            var i2 = string.indexOf(substring, i)\n      \
    \      if (i2 >= 0 && i2 >= startIndex) {\n                count += 1\n      \
    \          i = i2 + substring.length\n            }\n        }\n        return\
    \ count\n    }\n\n    // For a given string, return the number of times a substring\
    \ is repeated starting at a given index.\n    // >>> repeatCount(\"abcabcabc\"\
    , \"abc\", 2)\n    // 2\n    def repeatCount(string : String, substring : String,\
    \ startIndex : Int) : Int = {\n        var count = 0\n        for (i <- 0 until\
    \ string.length) {\n            var i2 = string.indexOf(substring, i)\n      \
    \      if (i2 >= 0 && i2 >= startIndex) {\n                count += 1\n      \
    \          i = i2 + substring.length\n            }\n        }\n        return\
    \ count\n    }\n\n    //", "        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            result += string.charAt(i).toUpperCase\n     \
    \   }\n        return result\n    }\n\n    // For a given string, return the number\
    \ of times that the substring \"world\" occurs in the string.\n    // >>> count(\"\
    Hello world!\")\n    // 1\n    def count(string : String) : Int = {\n        var\
    \ result = 0\n        for (i <- 0 until string.length) {\n            if (string.substring(i,\
    \ i + \"world\".length).equals(\"world\")) {\n                result += 1\n  \
    \          }\n        }\n        return result\n    }\n\n    // For a given string,\
    \ return the number of times that the substring \"world\" occurs in the string,\n\
    \    // ignoring case.\n    // >>> countCase(\"hello world!\")\n    // 1\n   \
    \ def countCase(string : String) : Int = {\n        var result = 0\n        for\
    \ (i <- 0 until string.length) {\n            if (string.substring(i, i + \"world\"\
    .length).equalsIgnoreCase(\"world\")) {\n                result += 1\n       \
    \     }\n        }\n        return result\n    }\n\n    // For a given string,\
    \ return the number of times that the substring \"world\" occurs in the string,\n\
    \    // ignoring case, and ignoring the case of the letters.\n    // >>> countCaseIgnore(\"\
    hello world!\")\n    // 1\n    def countCaseIgnore(string : String) : Int = {\n\
    \        var result = 0\n        for (i <- 0 until string.length) {\n        \
    \    if (string.substring(i, i + \"world\".length).equalsIgnoreCase(\"world\"\
    )) {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times that the substring\
    \ \"world\" occurs in the string,\n    // ignoring case, ignoring the case of\
    \ the letters, and ignoring the case of the letters.\n    // >>> countCaseIgnoreIgnore(\"\
    hello world!\")\n    // 1\n    def countCaseIgnoreIgnore(string : String) : Int\
    \ = {\n        var result = 0\n        for (i <- 0", "        var result = \"\"\
    \n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        result\n    }\n\n    // For a given string, return the number\
    \ of times a substring is repeated in the string.\n    // >>> countSubstring(\"\
    abcabcabc\", \"abc\")\n    // 3\n    def countSubstring(string : String, substring\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var j = i + substring.length\n            if (j <= string.length)\
    \ {\n                if (string.substring(i, j).equals(substring)) {\n       \
    \             result += 1\n                }\n            }\n        }\n     \
    \   result\n    }\n\n    // For a given string, return the number of times a substring\
    \ is repeated in the string.\n    // >>> countSubstring(\"abcabcabc\", \"abc\"\
    )\n    // 3\n    def countSubstring2(string : String, substring : String) : Int\
    \ = {\n        var result = 0\n        for (i <- 0 until string.length) {\n  \
    \          var j = i + substring.length\n            if (j <= string.length) {\n\
    \                if (string.substring(i, j).equals(substring)) {\n           \
    \         result += 1\n                }\n            }\n        }\n        result\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated in the string.\n    // >>> countSubstring(\"abcabcabc\", \"abc\")\n\
    \    // 3\n    def countSubstring3(string : String, substring : String) : Int\
    \ = {\n        var result = 0\n        for (i <- 0 until string.length) {\n  \
    \          var j = i + substring.length\n            if (j <= string.length) {\n\
    \                if (string.substring(i, j).equals(substring)) {\n           \
    \         result += 1\n                }\n            }\n        }\n        result\n\
    \    }\n\n    ", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result += c.toUpperCase\n            } else {\n         \
    \       result += c.toLowerCase\n            }\n        }\n        result", " \
    \       var result = \"\"\n        for (i <- 0 until string.length) {\n      \
    \      var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n   \
    \             result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return the number of times that the substring \"world\"\
    \ occurs in the string.\n    // >>> count(\"Hello world\")\n    // 1\n    def\
    \ count(string : String) : Int = {\n        var result = 0\n        for (i <-\
    \ 0 until string.length) {\n            var c = string.charAt(i)\n           \
    \ if (c == \"world\") {\n                result += 1\n            }\n        }\n\
    \        return result\n    }\n\n    // For a given string, return the number\
    \ of times that the substring \"world\" occurs in the string,\n    // ignoring\
    \ case.\n    // >>> countIgnoreCase(\"Hello world\")\n    // 1\n    def countIgnoreCase(string\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c == \"world\") {\n\
    \                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times that the substring\
    \ \"world\" occurs in the string,\n    // ignoring case, and ignoring the case\
    \ of the letters in the substring.\n    // >>> countIgnoreCaseAndIgnoreCase(\"\
    Hello world\")\n    // 1\n    def countIgnoreCaseAndIgnoreCase(string : String)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c == \"world\") {\n\
    \                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times that the substring\
    \ \"world\" occurs in the string,\n    // ignoring case, and ignoring the case\
    \ of the letters in the substring.\n    // >>> countIgnoreCaseAndIgnoreCase",
  "        var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n    \
    \            result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        result\n    }\n\n    //\
    \ For a given string, return the number of times the substring \"world\" occurs\
    \ in the string.\n    // >>> count(\"Hello world!\")\n    // 1\n    def count(string\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c == \"world\") {\n\
    \                result += 1\n            }\n        }\n        result\n    }\n\
    \n    // For a given string, return the number of times the substring \"world\"\
    \ occurs in the string.\n    // >>> count(\"Hello world!\")\n    // 1\n    def\
    \ count2(string : String) : Int = {\n        var result = 0\n        for (i <-\
    \ 0 until string.length) {\n            var c = string.charAt(i)\n           \
    \ if (c == \"world\") {\n                result += 1\n            }\n        }\n\
    \        result\n    }\n\n    // For a given string, return the number of times\
    \ the substring \"world\" occurs in the string.\n    // >>> count(\"Hello world!\"\
    )\n    // 1\n    def count3(string : String) : Int = {\n        var result = 0\n\
    \        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c == \"world\") {\n                result += 1\n            }\n\
    \        }\n        result\n    }\n\n    // For a given string, return the number\
    \ of times the substring \"world\" occurs in the string.\n    // >>> count(\"\
    Hello world!\")\n    // 1\n    def count4(string : String) : Int = {\n       \
    \ var result = 0\n        for (i <- 0 until string.length) {\n            var\
    \ c = string.charAt(i)\n            if (c == \"world\") {\n                result\
    \ += 1\n            }", "        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (c >=\
    \ 'a' && c <= 'z') {\n                result += c.toUpperCase\n            } else\
    \ {\n                result += c.toLowerCase\n            }\n        }\n     \
    \   return result\n    }\n\n    // For a given string, return a string where all\
    \ characters that are not in the given set are removed.\n    // >>> removeChars((\"\
    Hello\", \"hi\"), \"hl\")\n    // (\"eo\")\n    def removeChars(string : String,\
    \ chars : String) : String = {\n        var result = \"\"\n        for (i <- 0\
    \ until string.length) {\n            var c = string.charAt(i)\n            if\
    \ (!chars.contains(c)) {\n                result += c\n            }\n       \
    \ }\n        return result\n    }\n\n    // For a given string, return a string\
    \ where all adjacent characters that are the same are removed.\n    // >>> removeAdjacent((\"\
    code\"), \"cd\")\n    // (\"e\")\n    def removeAdjacent(string : String, c :\
    \ String) : String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c1 = string.charAt(i)\n            if (i < string.length\
    \ - 1) {\n                var c2 = string.charAt(i + 1)\n                if (c1\
    \ == c2) {\n                    continue\n                }\n            }\n \
    \           result += c1\n        }\n        return result\n    }\n\n    // For\
    \ a given string, return a string where all the letters that appear only once\
    \ are removed.\n    // >>> removeDuplicates((\"code\"))\n    // (\"cde\")\n  \
    \  def removeDuplicates(string : String) : String = {\n        var result = \"\
    \"\n        var chars = Set.empty[String]\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (!chars.contains(c))\
    \ {\n                chars += c\n            }\n        }\n        for (c <- 0\
    \ until chars.length) {\n            result +=", "        var result = \"\"\n\
    \        for (i <- 0 until string.length) {\n            result = result + string.charAt(i).toUpperCase()\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times the substring \"world\" occurs in the string.\n    // >>>\
    \ count(\"Hello world!\")\n    // 1\n    def count(string : String) : Int = {\n\
    \        var result = 0\n        for (i <- 0 until string.length) {\n        \
    \    if (string.substring(i, i + \"world\".length).equals(\"world\")) {\n    \
    \            result += 1\n            }\n        }\n        return result\n  \
    \  }\n\n    // For a given string, return the number of times the substring \"\
    world\" occurs in the string,\n    // ignoring case.\n    // >>> countIgnoreCase(\"\
    hello world!\")\n    // 1\n    def countIgnoreCase(string : String) : Int = {\n\
    \        var result = 0\n        for (i <- 0 until string.length) {\n        \
    \    if (string.substring(i, i + \"world\".length).equalsIgnoreCase(\"world\"\
    )) {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string,\n    // ignoring case, and ignoring the case\
    \ of the letters.\n    // >>> countIgnoreCaseAndCase(\"hello world!\")\n    //\
    \ 1\n    def countIgnoreCaseAndCase(string : String) : Int = {\n        var result\
    \ = 0\n        for (i <- 0 until string.length) {\n            if (string.substring(i,\
    \ i + \"world\".length).equalsIgnoreCaseAndCase(\"world\")) {\n              \
    \  result += 1\n            }\n        }\n        return result\n    }\n\n   \
    \ // For a given string, return the number of times the substring \"world\" occurs\
    \ in the string,\n    // ignoring case, and ignoring the case of the letters,\
    \ and ignoring the case of the letters\n    // of the substring \"world\".\n \
    \   // >>> countIgnoreCaseAndCaseAndIgnore(\"hello world!\")\n    // 1\n    def\
    \ countIgnoreCaseAndCase", "        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (c >=\
    \ 'a' && c <= 'z') {\n                result += c.toUpperCase\n            } else\
    \ {\n                result += c.toLowerCase\n            }\n        }\n     \
    \   result\n    }\n\n    // For a given string, return a string where adjacent\
    \ characters that are the same have been\n    // merged into a single character.\n\
    \    // >>> mergeAdjacent((\"code\"))\n    // (\"cod\")\n    def mergeAdjacent(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (i <\
    \ string.length - 1 && string.charAt(i + 1) == c) {\n                result +=\
    \ c\n                i += 1\n            } else {\n                result += c\n\
    \            }\n        }\n        result\n    }\n\n    // For a given string,\
    \ return a string where adjacent characters that are digits have been\n    //\
    \ merged into a single digit.\n    // >>> mergeNumbers((\"code123\"))\n    //\
    \ (\"code1\")\n    def mergeNumbers(string : String) : String = {\n        var\
    \ result = \"\"\n        for (i <- 0 until string.length) {\n            var c\
    \ = string.charAt(i)\n            if (i < string.length - 1 && string.charAt(i\
    \ + 1).isDigit()) {\n                result += c\n                i += 1\n   \
    \         } else {\n                result += c\n            }\n        }\n  \
    \      result\n    }\n\n    // For a given string, return a string where adjacent\
    \ characters that are either a letter or a\n    // digit have been merged into\
    \ a single character.\n    // >>> mergeLettersNumbers((\"code123\"))\n    // (\"\
    code12\")\n    def mergeLettersNumbers(string : String) : String = {\n       \
    \ var result = \"\"\n        for (i <- 0 until string.length) {\n            var\
    \ c = string.charAt(i)\n            if (i < string.length - 1 && (string.charAt(i\
    \ + 1).isLetter() || string.charAt", "        var result = \"\"\n        for (i\
    \ <- 0 until string.length) {\n            var c = string.charAt(i)\n        \
    \    if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n  \
    \          } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times a substring is repeated.\n    // >>> repeatCount(\"abcabcabc\"\
    , \"abc\")\n    // 2\n    def repeatCount(string : String, substring : String)\
    \ : Int = {\n        var count = 0\n        for (i <- 0 until string.length) {\n\
    \            if (string.substring(i, i + substring.length) == substring) {\n \
    \               count += 1\n            }\n        }\n        return count\n \
    \   }\n\n    // For a given string, return the number of times a substring is\
    \ repeated, ignoring case.\n    // >>> repeatCountIgnoreCase(\"abcABCabc\", \"\
    abc\")\n    // 2\n    def repeatCountIgnoreCase(string : String, substring : String)\
    \ : Int = {\n        var count = 0\n        for (i <- 0 until string.length) {\n\
    \            if (string.substring(i, i + substring.length).toLowerCase == substring.toLowerCase)\
    \ {\n                count += 1\n            }\n        }\n        return count\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated, ignoring case and\n    // ignoring case.\n    // >>> repeatCountIgnoreCaseIgnoreCase(\"\
    abcABCabc\", \"abc\")\n    // 2\n    def repeatCountIgnoreCaseIgnoreCase(string\
    \ : String, substring : String) : Int = {\n        var count = 0\n        for\
    \ (i <- 0 until string.length) {\n            if (string.substring(i, i + substring.length).toLowerCase\
    \ == substring.toLowerCase) {\n                count += 1\n            }\n   \
    \     }\n        return count\n    }\n\n    // For a given string, return the\
    \ number of times a substring is repeated, ignoring case and\n    // ignoring\
    \ case.\n    // >>> repeatCountIgnoreCase", "        var result = \"\"\n     \
    \   for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ a string where adjacent characters that are the same have been\n    // merged\
    \ into a single character.\n    // >>> mergeAdjacent((\"mississippi\"))\n    //\
    \ (\"miSsSiSiSiPi\")\n    def mergeAdjacent(string : String) : String = {\n  \
    \      var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     var c = string.charAt(i)\n            if (i + 1 < string.length && string.charAt(i\
    \ + 1) == c) {\n                result += c\n                i += 1\n        \
    \    } else {\n                result += c\n            }\n        }\n       \
    \ return result\n    }\n\n    // For a given string, return a string where adjacent\
    \ characters that are digits have been\n    // merged into a single digit.\n \
    \   // >>> mergeNumbers((\"1-2 3\"))\n    // (\"1-2 3\")\n    def mergeNumbers(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (i +\
    \ 1 < string.length && string.charAt(i + 1).isDigit()) {\n                result\
    \ += c\n                i += 1\n            } else {\n                result +=\
    \ c\n            }\n        }\n        return result\n    }\n\n    // For a given\
    \ string, return a string where adjacent characters that are either a letter or\
    \ a\n    // digit have been merged into a single character.\n    // >>> mergeLettersNumbers((\"\
    1-2 3\"))\n    // (\"1-2 3\")\n    def mergeLettersNumbers(string : String) :\
    \ String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (i + 1 < string.length",
  "        var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n    \
    \            result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return the number of times a substring appears in\
    \ the string.\n    // >>> countSubstring(\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        var s = string.toLowerCase.map(_.toUpper)\n        s.toUpperCase.map(_.toLower)\n\
    \        s\n    }\n\n    // For a given string, return the number of times a substring\
    \ is repeated.\n    // >>> repeatCount(\"abcabcabc\", \"abc\")\n    // 2\n   \
    \ def repeatCount(string : String, subString : String) : Int = {\n        var\
    \ count = 0\n        var i = 0\n        while(i < string.length) {\n         \
    \   if(string.substring(i, i + subString.length) == subString) {\n           \
    \     count += 1\n                i += subString.length\n            } else {\n\
    \                i += 1\n            }\n        }\n        count\n    }\n\n  \
    \  // For a given string, return the number of times a substring is repeated in\
    \ reverse.\n    // >>> repeatCountReverse(\"abcabcabc\", \"abc\")\n    // 2\n\
    \    def repeatCountReverse(string : String, subString : String) : Int = {\n \
    \       var count = 0\n        var i = string.length - 1\n        while(i >= 0)\
    \ {\n            if(string.substring(i, i + subString.length) == subString) {\n\
    \                count += 1\n                i -= subString.length\n         \
    \   } else {\n                i -= 1\n            }\n        }\n        count\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated in a given direction.\n    // >>> repeatCountDirection(\"abcabcabc\"\
    , \"abc\", \"forward\")\n    // 2\n    def repeatCountDirection(string : String,\
    \ subString : String, direction : String) : Int = {\n        var count = 0\n \
    \       var i = 0\n        if(direction == \"forward\") {\n            while(i\
    \ < string.length) {\n                if(string.substring(i, i + subString.length)\
    \ == subString) {\n                    count += 1\n                    i += subString.length\n\
    \                } else {\n                    i += 1\n                }\n   \
    \         }\n        } else {\n            while(i >= 0) {\n                if(string.substring(i,\
    \ i + subString.length) == sub", "        var result = \"\"\n        for (i <-\
    \ 0 until string.length) {\n            var c = string.charAt(i)\n           \
    \ if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n     \
    \       } else {\n                result += c.toLowerCase\n            }\n   \
    \     }\n        return result\n    }\n\n    // For a given string, return a new\
    \ string where the first and last characters are swapped.\n    // >>> swapFirstLast((\"\
    code\"))\n    // (\"eodc\")\n    def swapFirstLast(string : String) : String =\
    \ {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n \
    \           var c = string.charAt(i)\n            result += c\n            if\
    \ (i == 0 || i == string.length - 1) {\n                result += string.charAt(string.length\
    \ - 1)\n                result += string.charAt(0)\n            }\n        }\n\
    \        return result\n    }\n\n    // For a given string, return a new string\
    \ where every other character is\n    // swapped with the next one.\n    // >>>\
    \ swapPairs((\"code\"))\n    // (\"oecd\")\n    def swapPairs(string : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            result += c\n         \
    \   if (i % 2 == 1) {\n                result += string.charAt(string.length -\
    \ 1)\n            } else {\n                result += string.charAt(0)\n     \
    \       }\n        }\n        return result\n    }\n\n    // For a given string,\
    \ return a new string where the first and last characters are exchanged,\n   \
    \ // and every other character is exchanged with the next one.\n    // >>> swapFirstLastPairs((\"\
    code\"))\n    // (\"oecod\")\n    def swapFirstLastPairs(string : String) : String\
    \ = {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            var c = string.charAt(i)\n            result += c\n            if\
    \ (i == 0 || i == string.length - 1) {\n                result += string.", " \
    \       var result = \"\"\n        for (i <- 0 until string.length) {\n      \
    \      var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n   \
    \             result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        result", "        var result\
    \ = \"\"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result", "        var result = \"\"\n        for (i\
    \ <- 0 until string.length) {\n            var c = string.charAt(i)\n        \
    \    if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n  \
    \          } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times a substring is repeated.\n    // >>> repeatCount(\"abcabcabc\"\
    , \"abc\")\n    // 2\n    def repeatCount(string : String, substring : String)\
    \ : Int = {\n        var count = 0\n        for (i <- 0 until string.length) {\n\
    \            if (string.substring(i, i + substring.length) == substring) {\n \
    \               count += 1\n            }\n        }\n        return count\n \
    \   }\n\n    // For a given string, return the number of times a substring is\
    \ repeated, ignoring case.\n    // >>> repeatCountIgnoreCase(\"abcabcabc\", \"\
    abc\")\n    // 2\n    def repeatCountIgnoreCase(string : String, substring : String)\
    \ : Int = {\n        var count = 0\n        for (i <- 0 until string.length) {\n\
    \            if (string.substring(i, i + substring.length).toLowerCase == substring.toLowerCase)\
    \ {\n                count += 1\n            }\n        }\n        return count\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated, ignoring case,\n    // and ignoring case in the substring.\n    //\
    \ >>> repeatCountIgnoreCase(\"abcabcabc\", \"abc\", \"abc\")\n    // 2\n    def\
    \ repeatCountIgnoreCase2(string : String, substring : String, substring2 : String)\
    \ : Int = {\n        var count = 0\n        for (i <- 0 until string.length) {\n\
    \            if (string.substring(i, i + substring.length).toLowerCase == substring.toLowerCase\
    \ &&\n                string.substring(i, i + substring2.length).toLowerCase ==\
    \ substring2.toLowerCase) {\n                count += 1\n            }\n     \
    \   }\n        return count\n    ", "        var result = \"\"\n        for (i\
    \ <- 0 until string.length) {\n            result += string.charAt(i).toUpperCase()\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ a string where all characters that are not in the alphabet are removed.\n  \
    \  // >>> removeNonAlphabetChars(\"Hello\")\n    // \"ello\"\n    def removeNonAlphabetChars(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            if (string.charAt(i) in alphabet) {\n        \
    \        result += string.charAt(i)\n            }\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return a string where all adjacent\
    \ characters that are the same are removed.\n    // >>> removeAdjacentDuplicates(\"\
    code\")\n    // \"cde\"\n    def removeAdjacentDuplicates(string : String) : String\
    \ = {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            if (i == 0 or string.charAt(i) != string.charAt(i - 1)) {\n     \
    \           result += string.charAt(i)\n            }\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return a string where all repeating\
    \ characters are removed,\n    // except for the first and last character.\n \
    \   // >>> removeRepeatingChars(\"code\")\n    // \"e\"\n    def removeRepeatingChars(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length - 1) {\n            if (i == 0 or string.charAt(i) != string.charAt(i\
    \ - 1)) {\n                result += string.charAt(i)\n            }\n       \
    \ }\n        return result\n    }\n\n    // For a given string, return a string\
    \ where all repeating characters are removed,\n    // including the first and\
    \ last character.\n    // >>> removeRepeatingChars(\"code\")\n    // \"cde\"\n\
    \    def removeRepeatingChars2(string : String) : String = {\n        var result\
    \ = \"\"\n        for (i <- 0 until string.length) {", "        var result = \"\
    \"\n        for (i <- 0 until string.length) {\n            result = result +\
    \ string.charAt(i).toUpperCase()\n        }\n        return result\n    }\n\n\
    \    // For a given string, return the number of times it appears in the string.\n\
    \    // >>> countAppearances(\"hello\", \"hello\")\n    // 2\n    def countAppearances(string\
    \ : String, substring : String) : Int = {\n        var result = 0\n        for\
    \ (i <- 0 until string.length) {\n            if (string.charAt(i) == substring.charAt(0))\
    \ {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times it appears in\
    \ the string.\n    // >>> countAppearances(\"hello\", \"lo\")\n    // 1\n    def\
    \ countAppearances2(string : String, substring : String) : Int = {\n        var\
    \ result = 0\n        for (i <- 0 until string.length) {\n            if (string.charAt(i)\
    \ == substring.charAt(0)) {\n                result += 1\n            }\n    \
    \    }\n        return result\n    }\n\n    // For a given string, return the\
    \ number of times it appears in the string.\n    // >>> countAppearances(\"hello\"\
    , \"ll\")\n    // 0\n    def countAppearances3(string : String, substring : String)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.charAt(i) == substring.charAt(0)) {\n            \
    \    result += 1\n            }\n        }\n        return result\n    }\n\n \
    \   // For a given string, return the number of times it appears in the string.\n\
    \    // >>> countAppearances(\"hello\", \"\")\n    // 1\n    def countAppearances4(string\
    \ : String, substring : String) : Int = {\n        var result = 0\n        for\
    \ (i <- 0 until string.length) {\n            if (string.charAt(i) == substring.charAt(0))\
    \ {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times it appears in",
  "        var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     result = result + string.charAt(i).toUpperCase()\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return a string where \"not \" has\
    \ been added to the front,\n    // and \"not\" has been removed from the back.\n\
    \    // >>> notNotify((\"not good\"))\n    // (\"good\")\n    def notNotify(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            if (string.charAt(i) == \"n\") {\n           \
    \     result = result + \"not \"\n            } else {\n                result\
    \ = result + string.charAt(i)\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where \"not \" has been added\
    \ to the front,\n    // and \"not\" has been removed from the back.\n    // >>>\
    \ notNotify((\"not good\"))\n    // (\"good\")\n    def notNotify2(string : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            if (string.charAt(i) == \"n\") {\n                result = result\
    \ + \"not \"\n            } else {\n                result = result + string.charAt(i)\n\
    \            }\n        }\n        return result\n    }\n\n    // For a given\
    \ string, return a string where \"not \" has been added to the front,\n    //\
    \ and \"not\" has been removed from the back.\n    // >>> notNotify((\"not good\"\
    ))\n    // (\"good\")\n    def notNotify3(string : String) : String = {\n    \
    \    var result = \"\"\n        for (i <- 0 until string.length) {\n         \
    \   if (string.charAt(i) == \"n\") {\n                result = result + \"not\
    \ \"\n            } else {\n                result = result + string.charAt(i)\n\
    \            }\n        }\n        return result\n    }\n\n    // For a given\
    \ string, return a string where \"not \" has been added to the front,\n    //\
    \ and \"not\" has been removed", "        var result = \"\"\n        for (i <-\
    \ 0 until string.length) {\n            var c = string.charAt(i)\n           \
    \ if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n     \
    \       } else {\n                result += c.toLowerCase\n            }\n   \
    \     }\n        return result\n    }\n\n    // For a given string, return the\
    \ number of times the substring \"world\" occurs in the string.\n    // >>> count(\"\
    Hello world!\")\n    // 1\n    def count(string : String) : Int = {\n        var\
    \ result = 0\n        for (i <- 0 until string.length) {\n            var c =\
    \ string.charAt(i)\n            if (c == \"world\") {\n                result\
    \ += 1\n            }\n        }\n        return result\n    }\n\n    // For a\
    \ given string, return the number of times the substring \"world\" occurs in the\
    \ string,\n    // ignoring case.\n    // >>> countIgnoreCase(\"Hello world!\"\
    )\n    // 1\n    def countIgnoreCase(string : String) : Int = {\n        var result\
    \ = 0\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c == \"world\") {\n                result += 1\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times the substring \"world\" occurs in the string,\n    // ignoring\
    \ case, and ignoring the case of the letters in the substring.\n    // >>> countIgnoreCaseAndIgnoreCase(\"\
    Hello world!\")\n    // 1\n    def countIgnoreCaseAndIgnoreCase(string : String)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c == \"world\") {\n\
    \                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string,\n    // ignoring case, and ignoring the case\
    \ of the letters in the substring.\n    // >>> countIgnoreCaseAndIgnoreCase(\"",
  "        var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n    \
    \            result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return the number of times a substring is repeated.\n\
    \    // >>> repeatCount(\"abcabcabc\", \"abc\")\n    // 3\n    def repeatCount(string\
    \ : String, substring : String) : Int = {\n        var result = 0\n        for\
    \ (i <- 0 until string.length) {\n            var c = string.charAt(i)\n     \
    \       if (c == substring) {\n                result += 1\n            }\n  \
    \      }\n        return result\n    }\n\n    // For a given string, return the\
    \ number of times a substring is repeated, ignoring case.\n    // >>> repeatCountIgnoreCase(\"\
    abcabcabc\", \"abc\")\n    // 3\n    def repeatCountIgnoreCase(string : String,\
    \ substring : String) : Int = {\n        var result = 0\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (c.toLowerCase\
    \ == substring.toLowerCase) {\n                result += 1\n            }\n  \
    \      }\n        return result\n    }\n\n    // For a given string, return the\
    \ number of times a substring is repeated, ignoring case and\n    // ignoring\
    \ case of the substring.\n    // >>> repeatCountIgnoreCaseAndIgnoreCase(\"abcabcabc\"\
    , \"abc\")\n    // 3\n    def repeatCountIgnoreCaseAndIgnoreCase(string : String,\
    \ substring : String) : Int = {\n        var result = 0\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (c.toLowerCase\
    \ == substring.toLowerCase) {\n                result += 1\n            }\n  \
    \      }\n        return result\n    }\n\n    // For a given string, return the\
    \ number of times a substring is repeated, ignoring case and\n    // ignoring\
    \ case of the substring,", "        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (c >=\
    \ 'a' && c <= 'z') {\n                result += c.toUpperCase\n            } else\
    \ {\n                result += c.toLowerCase\n            }\n        }\n     \
    \   return result\n    }\n\n    // For a given string, return the number of times\
    \ a substring is repeated in the string.\n    // >>> repeatCount(\"abcabcabc\"\
    , \"abc\")\n    // 2\n    def repeatCount(string : String, subString : String)\
    \ : Int = {\n        var count = 0\n        for (i <- 0 until string.length) {\n\
    \            var c = string.charAt(i)\n            if (c == subString.charAt(0))\
    \ {\n                count += 1\n                for (j <- 1 until subString.length)\
    \ {\n                    if (string.charAt(i + j) != subString.charAt(j)) {\n\
    \                        break\n                    }\n                    count\
    \ += 1\n                }\n            }\n        }\n        return count\n  \
    \  }\n\n    // For a given string, return the number of times a substring is repeated\
    \ in the string,\n    // ignoring case.\n    // >>> repeatCountIgnoreCase(\"abcabcabc\"\
    , \"abc\")\n    // 2\n    def repeatCountIgnoreCase(string : String, subString\
    \ : String) : Int = {\n        var count = 0\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c == subString.charAt(0))\
    \ {\n                count += 1\n                for (j <- 1 until subString.length)\
    \ {\n                    if (string.charAt(i + j).toLowerCase() != subString.charAt(j).toLowerCase())\
    \ {\n                        break\n                    }\n                  \
    \  count += 1\n                }\n            }\n        }\n        return count\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated in the string,\n    // ignoring case, and ignoring the case of the\
    \ substring.\n    // >>> repeatCountIgnoreCaseAndIgnoreCase(\"abcabcabc\", \"\
    abc\")\n    //", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result += c.toUpperCase\n            } else {\n         \
    \       result += c.toLowerCase\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where adjacent characters\
    \ that are the same have been\n    // merged into a single character.\n    //\
    \ >>> mergeAdjacent((\"mississippi\"))\n    // (\"miSsSiSiSpi\")\n    def mergeAdjacent(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (i <\
    \ string.length - 1 && string.charAt(i + 1) == c) {\n                result +=\
    \ c\n                i += 1\n            } else {\n                result += c\n\
    \            }\n        }\n        return result\n    }\n\n    // For a given\
    \ string, return a string where adjacent characters that are digits have been\n\
    \    // merged into a single digit.\n    // >>> mergeNumbers((\"1-2 3\"))\n  \
    \  // (\"1-2 3\")\n    def mergeNumbers(string : String) : String = {\n      \
    \  var result = \"\"\n        for (i <- 0 until string.length) {\n           \
    \ var c = string.charAt(i)\n            if (i < string.length - 1 && string.charAt(i\
    \ + 1).isDigit()) {\n                result += c\n                i += 1\n   \
    \         } else {\n                result += c\n            }\n        }\n  \
    \      return result\n    }\n\n    // For a given string, return a string where\
    \ adjacent characters that are either a letter or a\n    // digit have been merged\
    \ into a single character.\n    // >>> mergeLettersNumbers((\"1-2 3\"))\n    //\
    \ (\"1-2 3\")\n    def mergeLettersNumbers(string : String) : String = {\n   \
    \     var result = \"\"\n        for (i <- 0 until string.length) {\n        \
    \    var c = string.charAt(i)\n            if (i < string.length - 1", "     \
    \   var result = \"\"\n        for (i <- 0 until string.length) {\n          \
    \  var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n       \
    \         result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result", "      \
    \  var result = \"\"\n        for (i <- 0 until string.length) {\n           \
    \ var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n        \
    \        result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return the number of times a substring is repeated\
    \ in the string.\n    // >>> countSubstring(\"abcabcabcabc\", \"abc\")\n    //\
    \ 3\n    def countSubstring(string : String, substring : String) : Int = {\n \
    \       var count = 0\n        for (i <- 0 until string.length) {\n          \
    \  var c = string.charAt(i)\n            if (substring.contains(c)) {\n      \
    \          count += 1\n            }\n        }\n        return count\n    }\n\
    \n    // For a given string, return the number of times a substring is repeated\
    \ in the string.\n    // >>> countSubstring(\"abcabcabcabc\", \"abc\")\n    //\
    \ 3\n    def countSubstring2(string : String, substring : String) : Int = {\n\
    \        var count = 0\n        for (i <- 0 until string.length) {\n         \
    \   var c = string.charAt(i)\n            if (substring.contains(c)) {\n     \
    \           count += 1\n            }\n        }\n        return count\n    }\n\
    \n    // For a given string, return the number of times a substring is repeated\
    \ in the string.\n    // >>> countSubstring(\"abcabcabcabc\", \"abc\")\n    //\
    \ 3\n    def countSubstring3(string : String, substring : String) : Int = {\n\
    \        var count = 0\n        for (i <- 0 until string.length) {\n         \
    \   var c = string.charAt(i)\n            if (substring.contains(c)) {\n     \
    \           count += 1\n            }\n        }\n        return count\n    }\n\
    \n    // For a given string, return the number of times a substring is repeated\
    \ in the string.\n    // >>> countSubstring(\"abcabcabcabc\", \"abc\")\n    //\
    \ 3\n    def countSubstring4(string : String, subst", "        var s = string.toLowerCase.toUpperCase\n\
    \        return s\n    }\n\n    // For a given string, return the number of times\
    \ that a substring is repeated in the string.\n    // >>> countOccurrences(\"\
    abab\", \"ab\")\n    // 2\n    def countOccurrences(string : String, subString\
    \ : String) : Int = {\n        var s = string.split(subString)\n        var count\
    \ = 0\n        for (i <- 0 until s.length) {\n            if (s(i).equals(s(i\
    \ + 1))) {\n                count += 1\n            }\n        }\n        return\
    \ count\n    }\n\n    // For a given string, return the number of times that a\
    \ substring is repeated in the string,\n    // ignoring case.\n    // >>> countOccurrencesIgnoreCase(\"\
    abab\", \"ab\")\n    // 2\n    def countOccurrencesIgnoreCase(string : String,\
    \ subString : String) : Int = {\n        var s = string.toLowerCase.split(subString.toLowerCase)\n\
    \        var count = 0\n        for (i <- 0 until s.length) {\n            if\
    \ (s(i).equals(s(i + 1))) {\n                count += 1\n            }\n     \
    \   }\n        return count\n    }\n\n    // For a given string, return the number\
    \ of times that a substring is repeated in the string,\n    // ignoring case and\
    \ ignoring non-alphabetic characters.\n    // >>> countOccurrencesIgnoreCaseAndNonAlpha(\"\
    abab\", \"ab\")\n    // 2\n    def countOccurrencesIgnoreCaseAndNonAlpha(string\
    \ : String, subString : String) : Int = {\n        var s = string.toLowerCase.split(subString.toLowerCase)\n\
    \        var count = 0\n        for (i <- 0 until s.length) {\n            if\
    \ (s(i).equals(s(i + 1))) {\n                count += 1\n            }\n     \
    \   }\n        return count\n    }\n\n    // For a given string, return the number\
    \ of times that a substring is repeated in the string,\n    // ignoring case and\
    \ ignoring non-alphabetic characters.\n    // >>> countOccurrencesIgnoreCaseAnd",
  "        var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n    \
    \            result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, replace all spaces with '%20'.\n    // >>> replaceSpaces(\"\
    Hello\")\n    // \"Hello\"\n    def replaceSpaces(string : String) : String =\
    \ {\n        return string.replaceAll(\" \", \"%20\")\n    }\n\n    // For a given\
    \ string, return a string where all characters that are not in the alphabet are\
    \ removed.\n    // >>> removeNonAlpha(\"Hello\")\n    // \"ello\"\n    def removeNonAlpha(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (c >=\
    \ 'a' && c <= 'z') {\n                result += c\n            }\n        }\n\
    \        return result\n    }\n\n    // For a given string, return a string where\
    \ all characters that are not in the alphabet are removed.\n    // >>> removeNonAlpha(\"\
    Hello\")\n    // \"ello\"\n    def removeNonAlpha2(string : String) : String =\
    \ {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n \
    \           var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n\
    \                result += c\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where all characters that\
    \ are not in the alphabet are removed.\n    // >>> removeNonAlpha(\"Hello\")\n\
    \    // \"ello\"\n    def removeNonAlpha3(string : String) : String = {\n    \
    \    var result = \"\"\n        for (i <- 0 until string.length) {\n         \
    \   var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n      \
    \          result += c\n            }\n        }\n        return result\n    }\n\
    \n    // For a given string,", "        var result = \"\"\n        for (i <- 0\
    \ until string.length) {\n            var c = string.charAt(i)\n            if\
    \ (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n        \
    \    } else {\n                result += c.toLowerCase\n            }\n      \
    \  }\n        return result\n    }\n\n    // For a given string, return a string\
    \ where all characters that are not in the alphabet are removed.\n    // >>> removeNonAlphabetChars(\"\
    Hello\")\n    // \"ello\"\n    def removeNonAlphabetChars(string : String) : String\
    \ = {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n\
    \                result += c\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where all adjacent characters\
    \ that are the same are removed.\n    // >>> removeAdjacentDuplicates(\"code\"\
    )\n    // \"cd\"\n    def removeAdjacentDuplicates(string : String) : String =\
    \ {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n \
    \           var c = string.charAt(i)\n            if (i == 0 || string.charAt(i\
    \ - 1) != c) {\n                result += c\n            }\n        }\n      \
    \  return result\n    }\n\n    // For a given string, return a string where all\
    \ repeating characters are removed,\n    // except for the last one.\n    // >>>\
    \ removeRepeatingChars(\"code\")\n    // \"e\"\n    def removeRepeatingChars(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (i ==\
    \ 0 || string.charAt(i - 1) != c) {\n                result += c\n           \
    \ }\n        }\n        return result\n    }\n\n    // For a given string, return\
    \ a string where all repeating characters are removed,\n    // including the last\
    \ one.\n    // >>> removeAllRepeatingChars(\"code\")\n    ", "        var result\
    \ = \"\"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, replace\
    \ all spaces with %20.\n    // >>> replaceSpaces((\"Hello World\"))\n    // (\"\
    Hello%20World\")\n    def replaceSpaces(string : String) : String = {\n      \
    \  var result = \"\"\n        for (i <- 0 until string.length) {\n           \
    \ var c = string.charAt(i)\n            if (c == ' ') {\n                result\
    \ += \"%20\"\n            } else {\n                result += c\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the string reversed.\n    // >>> reverse((\"Hello\"))\n    // (\"olleH\")\n\
    \    def reverse(string : String) : String = {\n        var result = \"\"\n  \
    \      for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            result += c\n        }\n        return result\n    }\n\n    // For\
    \ a given string, return the string with the first letter capitalized.\n    //\
    \ >>> capitalize((\"hello\"))\n    // (\"Hello\")\n    def capitalize(string :\
    \ String) : String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (i == 0) {\n       \
    \         result += c.toUpperCase\n            } else {\n                result\
    \ += c\n            }\n        }\n        return result\n    }\n\n    // For a\
    \ given string, return the string with the first letter capitalized and the rest\
    \ lowercased.\n    // >>> capitalizeAndLowercase((\"Hello\"))\n    // (\"Hello\"\
    )\n    def capitalizeAndLowercase(string : String) : String = {\n        var result\
    \ = \"\"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (i == 0) {\n", "        var result = \"\"\n        for (i <- 0\
    \ until string.length) {\n            result += string.charAt(i).toUpperCase\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times a substring is repeated.\n    // >>> repeatCount(\"abcabcabc\"\
    , \"abc\")\n    // 2\n    def repeatCount(string : String, substring : String)\
    \ : Int = {\n        var count = 0\n        for (i <- 0 until string.length) {\n\
    \            if (string.substring(i, i + substring.length) == substring) {\n \
    \               count += 1\n            }\n        }\n        return count\n \
    \   }\n\n    // For a given string, return the number of times a substring is\
    \ repeated in reverse order.\n    // >>> repeatCountReverse(\"abcabcabc\", \"\
    abc\")\n    // 2\n    def repeatCountReverse(string : String, substring : String)\
    \ : Int = {\n        var count = 0\n        for (i <- 0 until string.length) {\n\
    \            if (string.substring(string.length - i - substring.length, string.length\
    \ - i) == substring) {\n                count += 1\n            }\n        }\n\
    \        return count\n    }\n\n    // For a given string, return the number of\
    \ times a substring is repeated in the given direction.\n    // >>> repeatCount(\"\
    abcabcabc\", \"abc\", \"forward\")\n    // 2\n    def repeatCount(string : String,\
    \ substring : String, direction : String) : Int = {\n        if (direction ==\
    \ \"forward\") {\n            return repeatCount(string, substring)\n        }\
    \ else {\n            return repeatCountReverse(string, substring)\n        }\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated in the given direction.\n    // >>> repeatCount(\"abcabcabc\", \"abc\"\
    , \"backward\")\n    // 2\n    def repeatCountReverse(string : String, substring\
    \ : String, direction : String) : Int = {\n        if (direction == \"forward\"\
    ) {\n            return repeatCountReverse(string, substring)\n        } else\
    \ {\n            return repeatCount(string", "        var s = string.toLowerCase.toUpperCase\n\
    \        return s\n    }\n\n    // For a given string, return the number of times\
    \ the substring \"world\" occurs in the string.\n    // >>> count(\"Hello world!\"\
    )\n    // 1\n    def count(string : String) : Int = {\n        var s = string.split(\"\
    \ \")\n        var count = 0\n        for (i <- 0 to s.length - 1) {\n       \
    \     if (s[i].equals(\"world\")) {\n                count = count + 1\n     \
    \       }\n        }\n        return count\n    }\n\n    // For a given string,\
    \ return a string where \"not \" has been added to the front,\n    // and \"beautiful\"\
    \ has been removed.\n    // >>> fixOdds(\"This string has some words in it.\"\
    )\n    // \"This string has some words in it.\"\n    def fixOdds(string : String)\
    \ : String = {\n        var s = string.toLowerCase.toUpperCase\n        var s2\
    \ = s.replaceAll(\"not \", \"\")\n        var s3 = s2.replaceAll(\"beautiful\"\
    , \"\")\n        return s3\n    }\n\n    // For a given string, return a string\
    \ where \"not \" has been added to the front,\n    // and \"beautiful\" has been\
    \ removed.\n    // >>> fixOdds2((\"This string has some words in it.\"))\n   \
    \ // \"This string has some words in it.\"\n    def fixOdds2(string : String)\
    \ : String = {\n        var s = string.toLowerCase.toUpperCase\n        var s2\
    \ = s.replaceAll(\"not \", \"\")\n        var s3 = s2.replaceAll(\"beautiful\"\
    , \"\")\n        return s3\n    }\n\n    // For a given string, return a string\
    \ where \"not \" has been added to the front,\n    // and \"beautiful\" has been\
    \ removed.\n    // >>> fixOdds3((\"This string has some words in it.\"))\n   \
    \ // \"This string has some words in it.\"\n    def fixOdds3(string : String)\
    \ : String = {\n        var s = string.toLowerCase.toUpperCase\n        var s2\
    \ = s.replaceAll", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result += c.toUpperCase\n            } else {\n         \
    \       result += c.toLowerCase\n            }\n        }\n        return result",
  "        var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     result += string.charAt(i).toUpperCase\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where adjacent characters\
    \ that are the same have been\n    // separated by a space.\n    // >>> separateAdjacentLetters(\"\
    abcd\")\n    // \"a b c d\"\n    def separateAdjacentLetters(string : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            result += string.charAt(i)\n            if (i < string.length\
    \ - 1) {\n                result += \" \"\n            }\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return a string where adjacent characters\
    \ that are not the same have\n    // been separated by a space.\n    // >>> separateAdjacentLetters(\"\
    aabcd\")\n    // \"a a b c d\"\n    def separateAdjacentLetters2(string : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            result += string.charAt(i)\n            if (i < string.length\
    \ - 1) {\n                result += \" \"\n            }\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return a string where adjacent characters\
    \ that are not the same have\n    // been separated by a space.\n    // >>> separateAdjacentLetters3(\"\
    aabcd\")\n    // \"a a b c d\"\n    def separateAdjacentLetters3(string : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            result += string.charAt(i)\n            if (i < string.length\
    \ - 1) {\n                result += \" \"\n            }\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return a string where adjacent characters\
    \ that are not the same have\n    // been separated by a space.\n    // >>> separateAdjacentLetters4(\"\
    aabcd\")\n    // \"a a b c d\"\n    def separateAdjacentLetters4(string", "  \
    \      var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n    \
    \            result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return a new string where the first character is in\
    \ upper case and the rest are in lower case.\n    // >>> capitalize(\"Hello\"\
    )\n    // (\"HELLO\")\n    def capitalize(string : String) : String = {\n    \
    \    var result = \"\"\n        for (i <- 0 until string.length) {\n         \
    \   var c = string.charAt(i)\n            if (i == 0) {\n                result\
    \ += c.toUpperCase\n            } else {\n                result += c.toLowerCase\n\
    \            }\n        }\n        return result\n    }\n\n    // For a given\
    \ string, return a new string where the first character is in lower case and the\
    \ rest are in upper case.\n    // >>> lowercaseFirst(\"Hello\")\n    // (\"hello\"\
    )\n    def lowercaseFirst(string : String) : String = {\n        var result =\
    \ \"\"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (i == 0) {\n                result += c.toLowerCase\n        \
    \    } else {\n                result += c.toUpperCase\n            }\n      \
    \  }\n        return result\n    }\n\n    // For a given string, return a new\
    \ string where the first character is in upper case and the rest are in lower\
    \ case.\n    // >>> uppercaseFirst(\"Hello\")\n    // (\"HELLO\")\n    def uppercaseFirst(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (i ==\
    \ 0) {\n                result += c.toUpperCase\n            } else {\n      \
    \          result += c.toLowerCase\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a new string where the first character\
    \ is in lower", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            result += string.charAt(i).toUpperCase\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return the number of times that\
    \ a substring is repeated.\n    // >>> repeatCount(\"abcabcabc\", \"abc\")\n \
    \   // 2\n    def repeatCount(string : String, substring : String) : Int = {\n\
    \        var result = 0\n        for (i <- 0 until string.length) {\n        \
    \    if (string.substring(i, i + substring.length) == substring) {\n         \
    \       result += 1\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return the number of times that a substring is repeated\
    \ in reverse order.\n    // >>> repeatCount(\"abcabcabc\", \"abc\", true)\n  \
    \  // 2\n    def repeatCount(string : String, substring : String, reverse : Boolean)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.substring(i, i + substring.length) == substring) {\n\
    \                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times that a substring\
    \ is repeated in a given direction.\n    // >>> repeatCount(\"abcabcabc\", \"\
    abc\", \"forward\")\n    // 2\n    // >>> repeatCount(\"abcabcabc\", \"abc\",\
    \ \"backward\")\n    // 0\n    def repeatCount(string : String, substring : String,\
    \ direction : String) : Int = {\n        if (direction == \"forward\") {\n   \
    \         return repeatCount(string, substring)\n        } else if (direction\
    \ == \"backward\") {\n            return repeatCount(string, substring, true)\n\
    \        } else {\n            throw new IllegalArgumentException(\"Invalid direction:\
    \ \" + direction)\n        }\n    }\n\n    // For a given string, return the number\
    \ of times that a substring is repeated in a given direction.\n    // >>> repeatCount(\"\
    abcabcabc\", \"abc\", \"forward\")\n    // 2\n    // >>> repeatCount(\"abcabcabc\"\
    , \"abc\", \"backward", "        var s = string.toLowerCase\n        var r = \"\
    \"\n        for (i <- 0 until s.length) {\n            r = r + s.charAt(i).toUpperCase\n\
    \        }\n        r\n    }\n\n    // For a given string, return the number of\
    \ times a substring is repeated.\n    // >>> repeatCount(\"abcabcabc\", \"abc\"\
    )\n    // 2\n    def repeatCount(string : String, substring : String) : Int =\
    \ {\n        var count = 0\n        var i = 0\n        while (i < string.length)\
    \ {\n            var j = i + substring.length\n            if (j <= string.length)\
    \ {\n                if (string.substring(i, j).equals(substring)) {\n       \
    \             count += 1\n                }\n                i = j\n         \
    \   } else {\n                break\n            }\n        }\n        count\n\
    \    }\n\n    // For a given string, return the longest substring that is a palindrome.\n\
    \    // >>> longestPalindrome(\"abccba\")\n    // \"ba\"\n    def longestPalindrome(string\
    \ : String) : String = {\n        var max = \"\"\n        var i = 0\n        while\
    \ (i < string.length) {\n            var j = i + 1\n            while (j < string.length)\
    \ {\n                if (string.substring(i, j).equals(string.substring(j, i)))\
    \ {\n                    j += 1\n                } else {\n                  \
    \  break\n                }\n            }\n            if (j - i > max.length)\
    \ {\n                max = string.substring(i, j)\n            }\n           \
    \ i = j\n        }\n        max\n    }\n\n    // For a given string, return the\
    \ longest substring that is a palindrome.\n    // >>> longestPalindrome(\"abccba\"\
    )\n    // \"ba\"\n    def longestPalindrome2(string : String) : String = {\n \
    \       var max = \"\"\n        var i = 0\n        while (i < string.length) {\n\
    \            var j = i + 1\n            while (j < string.length) {\n        \
    \        if (string.substring(i, j).equals(string.substring(", "        var s\
    \ = string.toLowerCase\n        var r = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            r = r + s.charAt(i).toUpperCase\n        }\n        r\n    }\n\
    \n    // For a given string, return the number of times that the substring \"\
    world\" occurs in the string.\n    // >>> count(\"Hello world!\")\n    // 1\n\
    \    def count(string : String) : Int = {\n        var s = string.toLowerCase\n\
    \        var r = 0\n        for (i <- 0 until s.length) {\n            if (s.substring(i,\
    \ i + \"world\".length).equals(\"world\")) {\n                r = r + 1\n    \
    \        }\n        }\n        r\n    }\n\n    // For a given string, return the\
    \ number of times that the substring \"world\" occurs in the string,\n    // ignoring\
    \ case.\n    // >>> countCase(\"Hello world!\")\n    // 1\n    def countCase(string\
    \ : String) : Int = {\n        var s = string.toLowerCase\n        var r = 0\n\
    \        for (i <- 0 until s.length) {\n            if (s.substring(i, i + \"\
    world\".length).equals(\"world\")) {\n                r = r + 1\n            }\n\
    \        }\n        r\n    }\n\n    // For a given string, return the number of\
    \ times that the substring \"world\" occurs in the string,\n    // ignoring case,\
    \ and ignoring leading and trailing whitespace.\n    // >>> countCaseTrim(\" \
    \ Hello world!  \")\n    // 1\n    def countCaseTrim(string : String) : Int =\
    \ {\n        var s = string.toLowerCase\n        var r = 0\n        for (i <-\
    \ 0 until s.length) {\n            if (s.substring(i, i + \"world\".length).equals(\"\
    world\")) {\n                r = r + 1\n            }\n        }\n        r\n\
    \    }\n\n    // For a given string, return the number of times that the substring\
    \ \"world\" occurs in the string,\n    // ignoring case, ignoring leading and\
    \ trailing whitespace, and ignoring case of the letters.\n    // >>> countCaseTrimIgnoreCase",
  "        var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     result = result + string.charAt(i).toUpperCase\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string.\n    // >>> count(\"Hello world\")\n    // 1\n\
    \    def count(string : String) : Int = {\n        var result = 0\n        for\
    \ (i <- 0 until string.length) {\n            if (string.substring(i, i + \"world\"\
    .length).equals(\"world\")) {\n                result += 1\n            }\n  \
    \      }\n        return result\n    }\n\n    // For a given string, return the\
    \ number of times the substring \"world\" occurs in the string,\n    // ignoring\
    \ case.\n    // >>> countIgnoreCase(\"hello WORLD\")\n    // 1\n    def countIgnoreCase(string\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.substring(i, i + \"world\".length).equalsIgnoreCase(\"\
    world\")) {\n                result += 1\n            }\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string,\n    // ignoring case, and ignoring the case\
    \ of the letters.\n    // >>> countIgnoreCaseAndIgnoreCase(\"hello WORLD\")\n\
    \    // 1\n    def countIgnoreCaseAndIgnoreCase(string : String) : Int = {\n \
    \       var result = 0\n        for (i <- 0 until string.length) {\n         \
    \   if (string.substring(i, i + \"world\".length).equalsIgnoreCase(\"world\"))\
    \ {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string,\n    // ignoring case, and ignoring the case\
    \ of the letters.\n    // >>> countIgnoreCaseAndIgnoreCase(\"hello WORLD\")\n\
    \    // 1\n    def countIgnoreCaseAndIgnoreCase2(string : String) : Int = {\n\
    \        var result = 0\n        for", "        var result = \"\"\n        for\
    \ (i <- 0 until string.length) {\n            result += string.charAt(i).toUpperCase\n\
    \        }\n        return result\n    }\n\n    // For a given string, flip lowercase\
    \ characters to uppercase and uppercase to lowercase.\n    // >>> flipCase(\"\
    Hello\")\n    // \"hELLO\"\n    def flipCase2(string : String) : String = {\n\
    \        var result = \"\"\n        for (i <- 0 until string.length) {\n     \
    \       result += string.charAt(i).toUpperCase\n        }\n        return result\n\
    \    }\n\n    // For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n    // >>> flipCase(\"Hello\")\n    // \"hELLO\"\n\
    \    def flipCase3(string : String) : String = {\n        var result = \"\"\n\
    \        for (i <- 0 until string.length) {\n            result += string.charAt(i).toUpperCase\n\
    \        }\n        return result\n    }\n\n    // For a given string, flip lowercase\
    \ characters to uppercase and uppercase to lowercase.\n    // >>> flipCase(\"\
    Hello\")\n    // \"hELLO\"\n    def flipCase4(string : String) : String = {\n\
    \        var result = \"\"\n        for (i <- 0 until string.length) {\n     \
    \       result += string.charAt(i).toUpperCase\n        }\n        return result\n\
    \    }\n\n    // For a given string, flip lowercase characters to uppercase and\
    \ uppercase to lowercase.\n    // >>> flipCase(\"Hello\")\n    // \"hELLO\"\n\
    \    def flipCase5(string : String) : String = {\n        var result = \"\"\n\
    \        for (i <- 0 until string.length) {\n            result += string.charAt(i).toUpperCase\n\
    \        }\n        return result\n    }\n\n    // For a given string, flip lowercase\
    \ characters to uppercase and uppercase to lowercase.\n    // >>> flipCase(\"\
    Hello\")\n    // \"hELLO\"\n    def flipCase6(string : String) : String = {\n\
    \        var result = \"\"\n        for (i <- 0", "        var result = \"\"\n\
    \        for (i <- 0 until string.length) {\n            result += string.charAt(i).toUpperCase\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of lowercase characters.\n    // >>> countLowercase((\"Hello\"))\n\
    \    // 5\n    def countLowercase(string : String) : Int = {\n        var result\
    \ = 0\n        for (i <- 0 until string.length) {\n            if (string.charAt(i).toLowerCase\
    \ == string.charAt(i)) {\n                result += 1\n            }\n       \
    \ }\n        return result\n    }\n\n    // For a given string, return the number\
    \ of uppercase characters.\n    // >>> countUppercase((\"Hello\"))\n    // 5\n\
    \    def countUppercase(string : String) : Int = {\n        var result = 0\n \
    \       for (i <- 0 until string.length) {\n            if (string.charAt(i).toUpperCase\
    \ == string.charAt(i)) {\n                result += 1\n            }\n       \
    \ }\n        return result\n    }\n\n    // For a given string, return the number\
    \ of lowercase characters.\n    // >>> countLowercase((\"Hello\"))\n    // 5\n\
    \    def countLowercase(string : String) : Int = {\n        var result = 0\n \
    \       for (i <- 0 until string.length) {\n            if (string.charAt(i).toLowerCase\
    \ == string.charAt(i)) {\n                result += 1\n            }\n       \
    \ }\n        return result\n    }\n\n    // For a given string, return the number\
    \ of uppercase characters.\n    // >>> countUppercase((\"Hello\"))\n    // 5\n\
    \    def countUppercase(string : String) : Int = {\n        var result = 0\n \
    \       for (i <- 0 until string.length) {\n            if (string.charAt(i).toUpperCase\
    \ == string.charAt(i)) {\n                result += 1\n            }\n       \
    \ }\n        return result\n    }\n\n    // For a given string, return the number\
    \ of lowercase characters.\n    // >>> countLowercase((\"Hello\"))\n    // 5\n\
    \    def countLowercase", "        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (c >=\
    \ 'a' && c <= 'z') {\n                result += (c - 'a' + 'A')\n            }\
    \ else {\n                result += c\n            }\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return the number of times a substring\
    \ is repeated.\n    // >>> repeatCount(\"abcabcabc\", \"abc\")\n    // 2\n   \
    \ def repeatCount(string : String, substring : String) : Int = {\n        var\
    \ count = 0\n        for (i <- 0 until string.length) {\n            var i1 =\
    \ string.indexOf(substring, i)\n            if (i1 >= 0) {\n                count\
    \ += 1\n                i = i1 + substring.length\n            }\n        }\n\
    \        return count\n    }\n\n    // For a given string, return the number of\
    \ times a substring is repeated in the reverse direction.\n    // >>> repeatCountReverse(\"\
    abcabcabc\", \"abc\")\n    // 2\n    def repeatCountReverse(string : String, substring\
    \ : String) : Int = {\n        var count = 0\n        for (i <- 0 until string.length)\
    \ {\n            var i1 = string.lastIndexOf(substring, i)\n            if (i1\
    \ >= 0) {\n                count += 1\n                i = i1\n            }\n\
    \        }\n        return count\n    }\n\n    // For a given string, return the\
    \ number of times a substring is repeated in the forward direction.\n    // >>>\
    \ repeatCountForward(\"abcabcabc\", \"abc\")\n    // 2\n    def repeatCountForward(string\
    \ : String, substring : String) : Int = {\n        var count = 0\n        for\
    \ (i <- 0 until string.length) {\n            var i1 = string.indexOf(substring,\
    \ i)\n            if (i1 >= 0) {\n                count += 1\n               \
    \ i = i1 + substring.length\n            }\n        }\n        return count\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated in the reverse direction.\n    // >>>", "        var result = \"\"\n\
    \        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times a substring is repeated.\n    // >>> repeatCount(\"abcabcabc\"\
    , \"abc\")\n    // 3\n    def repeatCount(string : String, substring : String)\
    \ : Int = {\n        var count = 0\n        for (i <- 0 until string.length) {\n\
    \            if (string.substring(i, i + substring.length) == substring) {\n \
    \               count += 1\n            }\n        }\n        return count\n \
    \   }\n\n    // For a given string, return the number of times a substring is\
    \ repeated starting at a given index.\n    // >>> repeatCount(\"abcabcabc\", \"\
    abc\", 2)\n    // 2\n    def repeatCount(string : String, substring : String,\
    \ startIndex : Int) : Int = {\n        var count = 0\n        for (i <- startIndex\
    \ until string.length) {\n            if (string.substring(i, i + substring.length)\
    \ == substring) {\n                count += 1\n            }\n        }\n    \
    \    return count\n    }\n\n    // For a given string, return the number of times\
    \ a substring is repeated starting at a given index.\n    // >>> repeatCount(\"\
    abcabcabc\", \"abc\", 2)\n    // 2\n    def repeatCount(string : String, substring\
    \ : String, startIndex : Int) : Int = {\n        var count = 0\n        for (i\
    \ <- startIndex until string.length) {\n            if (string.substring(i, i\
    \ + substring.length) == substring) {\n                count += 1\n          \
    \  }\n        }\n        return count\n    }\n\n    // For a given string, return\
    \ the number of times a substring is repeated starting at a given index.\n   \
    \ // >>> repeatCount(\"abcabcabc\", \"abc\", 2)\n    // 2\n    def repeatCount(string\
    \ : String, subst", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            result += string.charAt(i).toUpperCase()\n        }\n       \
    \ return result\n    }\n\n    // For a given string, return the number of times\
    \ a substring is contained in the string.\n    // >>> countSubstring(\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n    \
    \            result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        result\n    }\n\n    //\
    \ For a given string, return the number of times that the string appears in the\
    \ string.\n    // >>> countAppearances(\"hello\", \"hello\")\n    // 2\n    def\
    \ countAppearances(string : String, substring : String) : Int = {\n        var\
    \ result = 0\n        for (i <- 0 until string.length) {\n            if (string.charAt(i)\
    \ == substring.charAt(0)) {\n                result += 1\n            }\n    \
    \    }\n        result\n    }\n\n    // For a given string, return the number\
    \ of times that the string appears in the string.\n    // >>> countAppearances(\"\
    hello\", \"lo\")\n    // 0\n    def countAppearances2(string : String, substring\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.charAt(i) == substring.charAt(0)) {\n            \
    \    result += 1\n                for (j <- 1 until substring.length) {\n    \
    \                if (string.charAt(i + j) != substring.charAt(j)) {\n        \
    \                break\n                    } else {\n                       \
    \ result += 1\n                    }\n                }\n            }\n     \
    \   }\n        result\n    }\n\n    // For a given string, return the number of\
    \ times that the string appears in the string.\n    // >>> countAppearances(\"\
    hello\", \"ll\")\n    // 1\n    def countAppearances3(string : String, substring\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.charAt(i) == substring.charAt(0)) {\n            \
    \    result += 1\n                for (j <- 1 until substring.length) {\n    \
    \                if (string.charAt(i + j) != substring.charAt(j)) {\n        \
    \                break\n                    } else {", "        var result = \"\
    \"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times the substring \"world\" occurs in the string.\n    // >>>\
    \ count(\"Hello world!\")\n    // 1\n    def count(string : String) : Int = {\n\
    \        var result = 0\n        for (i <- 0 until string.length) {\n        \
    \    var c = string.charAt(i)\n            if (c == \"world\") {\n           \
    \     result += 1\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return a string where \"not \" has been added to the\
    \ front, and \"!\" has been added to the back.\n    // >>> fix(\"Hello, world!\"\
    )\n    // \"not Hello, world!\"\n    def fix(string : String) : String = {\n \
    \       var result = \"\"\n        for (i <- 0 until string.length) {\n      \
    \      var c = string.charAt(i)\n            if (c == \",\") {\n             \
    \   result += \"not \"\n            } else {\n                result += c\n  \
    \          }\n        }\n        result += \"!\"\n        return result\n    }\n\
    \n    // For a given string, return a string where the first and last characters\
    \ have been exchanged.\n    // >>> flipFirstAndLast(\"code\")\n    // \"eodc\"\
    \n    def flipFirstAndLast(string : String) : String = {\n        var result =\
    \ \"\"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            result += c\n        }\n        return result\n    }\n\n    // For\
    \ a given string, return a string where \"not\" has been added in front of every\
    \ substring that starts with an \"n\".\n    // >>> fixN(\"annoying\")\n    //\
    \ \"not annoying\"\n    def fixN(string : String) : String = {\n        var result\
    \ = \"\"\n        for (i <-", "        var result = \"\"\n        for (i <- 0\
    \ until string.length) {\n            result += string.charAt(i).toUpperCase()\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times the substring \"world\" occurs in the string.\n    // >>>\
    \ count(\"Hello world!\")\n    // 1\n    def count(string : String) : Int = {\n\
    \        var result = 0\n        for (i <- 0 until string.length) {\n        \
    \    if (string.substring(i, i + \"world\".length).equals(\"world\")) {\n    \
    \            result += 1\n            }\n        }\n        return result\n  \
    \  }\n\n    // For a given string, return the number of times the substring \"\
    world\" occurs in the string,\n    // ignoring case.\n    // >>> countIgnoreCase(\"\
    hello world!\")\n    // 1\n    def countIgnoreCase(string : String) : Int = {\n\
    \        var result = 0\n        for (i <- 0 until string.length) {\n        \
    \    if (string.substring(i, i + \"world\".length).equalsIgnoreCase(\"world\"\
    )) {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string,\n    // ignoring case, and ignoring the case\
    \ of the letters.\n    // >>> countIgnoreCaseAndIgnoreCase(\"hello world!\")\n\
    \    // 1\n    def countIgnoreCaseAndIgnoreCase(string : String) : Int = {\n \
    \       var result = 0\n        for (i <- 0 until string.length) {\n         \
    \   if (string.substring(i, i + \"world\".length).equalsIgnoreCase(\"world\"))\
    \ {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string,\n    // ignoring case, and ignoring the case\
    \ of the letters.\n    // >>> countIgnoreCaseAndIgnoreCase(\"hello world!\")\n\
    \    // 1\n    def countIgnoreCaseAndIgnoreCase2(string : String) : Int = {\n\
    \        var result = 0", "        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (c >=\
    \ 'a' && c <= 'z') {\n                result += c.toUpperCase\n            } else\
    \ {\n                result += c.toLowerCase\n            }\n        }\n     \
    \   return result", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result += c.toUpperCase\n            } else {\n         \
    \       result += c.toLowerCase\n            }\n        }\n        result", " \
    \       var result = \"\"\n        for (i <- 0 until string.length) {\n      \
    \      result += string.charAt(i).toUpperCase\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where adjacent characters\
    \ that are the same have been\n    // separated by a space.\n    // >>> separateAdjacent((\"\
    abcd\"))\n    // (\"a bcd\")\n    def separateAdjacent(string : String) : String\
    \ = {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            if (i == string.length - 1) {\n                result += string.charAt(i)\n\
    \            } else {\n                result += string.charAt(i) + \" \"\n  \
    \          }\n        }\n        return result\n    }\n\n    // For a given string,\
    \ return a string where adjacent characters that are not the same have\n    //\
    \ been separated by a space.\n    // >>> separateNonAdjacent((\"abcd\"))\n   \
    \ // (\"a b c d\")\n    def separateNonAdjacent(string : String) : String = {\n\
    \        var result = \"\"\n        for (i <- 0 until string.length) {\n     \
    \       if (i == string.length - 1) {\n                result += string.charAt(i)\n\
    \            } else {\n                result += string.charAt(i) + \" \"\n  \
    \          }\n        }\n        return result\n    }\n\n    // For a given string,\
    \ return a string where adjacent characters that are not the same have\n    //\
    \ been separated by a space.\n    // >>> separateNonAdjacent2((\"abcd\"))\n  \
    \  // (\"a b c d\")\n    def separateNonAdjacent2(string : String) : String =\
    \ {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n \
    \           if (i == string.length - 1) {\n                result += string.charAt(i)\n\
    \            } else {\n                result += string.charAt(i) + \" \"\n  \
    \          }\n        }\n        return result\n    }\n\n    // For a given string,\
    \ return a string where adjacent characters that are not the same have\n    //\
    \ been separated by a space.\n    // >>> separateNonAdjacent3", "        var result\
    \ = \"\"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result", "        var result = \"\"\n        for (i\
    \ <- 0 until string.length) {\n            var c = string.charAt(i)\n        \
    \    if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n  \
    \          } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        result\n    }\n\n    // For a given string, return the number\
    \ of times that a substring is repeated.\n    // >>> repeatCount(\"abcabcabc\"\
    , \"abc\")\n    // 3\n    def repeatCount(string : String, substring : String)\
    \ : Int = {\n        var count = 0\n        for (i <- 0 until string.length) {\n\
    \            if (string.substring(i, i + substring.length) == substring) {\n \
    \               count += 1\n            }\n        }\n        count\n    }\n\n\
    \    // For a given string, return the number of times that a substring is repeated,\
    \ ignoring case.\n    // >>> repeatCountIgnoreCase(\"abcabcabc\", \"abc\")\n \
    \   // 3\n    def repeatCountIgnoreCase(string : String, substring : String) :\
    \ Int = {\n        var count = 0\n        for (i <- 0 until string.length) {\n\
    \            if (string.substring(i, i + substring.length).equalsIgnoreCase(substring))\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n\n    // For a given string, return the number of times that a substring\
    \ is repeated, ignoring case,\n    // and ignoring the case of the substring.\n\
    \    // >>> repeatCountIgnoreCaseAndCase(\"abcabcabc\", \"abc\")\n    // 3\n \
    \   def repeatCountIgnoreCaseAndCase(string : String, substring : String) : Int\
    \ = {\n        var count = 0\n        for (i <- 0 until string.length) {\n   \
    \         if (string.substring(i, i + substring.length).equalsIgnoreCase(substring))\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n\n    // For a given string, return the number of times that a substring\
    \ is repeated, ignoring case,\n    // and ignoring the case of the substring.\n\
    \    //", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result += c.toUpperCase\n            } else {\n         \
    \       result += c.toLowerCase\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where the first and last\
    \ characters are swapped.\n    // >>> swapFirstLast((\"code\"))\n    // (\"eodc\"\
    )\n    def swapFirstLast(string : String) : String = {\n        var result = \"\
    \"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            result += c\n            if (i == 0 || i == string.length - 1) {\n\
    \                result += string.charAt(string.length - 1 - i)\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ a string where every other character is\n    // swapped with the next one.\n\
    \    // >>> swapPairs((\"code\"))\n    // (\"oec\")\n    def swapPairs(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            result +=\
    \ c\n            if (i % 2 == 1) {\n                result += string.charAt(string.length\
    \ - 1 - i / 2)\n            }\n        }\n        return result\n    }\n\n   \
    \ // For a given string, return a string where the first and last characters are\n\
    \    // swapped and every other character is swapped with the next one.\n    //\
    \ >>> swapFirstLastPairs((\"code\"))\n    // (\"oec\")\n    def swapFirstLastPairs(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            result +=\
    \ c\n            if (i == 0 || i == string.length - 1) {\n                result\
    \ += string.charAt(string.length - 1 - i)\n            } else if (i % 2 == 1)\
    \ {\n                ", "        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (c >=\
    \ 'a' && c <= 'z') {\n                result += c.toUpperCase\n            } else\
    \ {\n                result += c.toLowerCase\n            }\n        }\n     \
    \   return result\n    }\n\n    // For a given string, return a string where all\
    \ characters that are not in the alphabet are removed.\n    // >>> removeNonAlphabetChars(\"\
    Hello\")\n    // \"ello\"\n    def removeNonAlphabetChars(string : String) : String\
    \ = {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n\
    \                result += c\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where all adjacent characters\
    \ that are the same are removed.\n    // >>> removeAdjacentDuplicates(\"code\"\
    )\n    // \"cde\"\n    def removeAdjacentDuplicates(string : String) : String\
    \ = {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            var c = string.charAt(i)\n            if (i < string.length - 1 &&\
    \ string.charAt(i + 1) == c) {\n                continue\n            }\n    \
    \        result += c\n        }\n        return result\n    }\n\n    // For a\
    \ given string, return a string where all repeating characters are removed,\n\
    \    // except for the first and last character.\n    // >>> removeRepeatingChars(\"\
    code\")\n    // \"e\"\n    def removeRepeatingChars(string : String) : String\
    \ = {\n        var result = \"\"\n        for (i <- 0 until string.length - 1)\
    \ {\n            var c = string.charAt(i)\n            if (i > 0 && string.charAt(i\
    \ - 1) == c) {\n                continue\n            }\n            if (i < string.length\
    \ - 1 && string.charAt(i + 1) == c) {\n                continue\n            }\n\
    \            result += c\n        }\n        ", "        var result = \"\"\n \
    \       for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times a substring appears in the string.\n    // >>> countSubstring(\"\
    abcabcabc\", \"abc\")\n    // 3\n    def countSubstring(string : String, substring\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var j = i + substring.length\n            if (j <= string.length)\
    \ {\n                if (string.substring(i, j).equals(substring)) {\n       \
    \             result += 1\n                }\n            }\n        }\n     \
    \   return result\n    }\n\n    // For a given string, return the number of times\
    \ a substring appears in the string.\n    // >>> countSubstring(\"abcabcabc\"\
    , \"abc\")\n    // 3\n    def countSubstring2(string : String, substring : String)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var j = i + substring.length\n            if (j <= string.length)\
    \ {\n                if (string.substring(i, j).equals(substring)) {\n       \
    \             result += 1\n                }\n            }\n        }\n     \
    \   return result\n    }\n\n    // For a given string, return the number of times\
    \ a substring appears in the string.\n    // >>> countSubstring(\"abcabcabc\"\
    , \"abc\")\n    // 3\n    def countSubstring3(string : String, substring : String)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var j = i + substring.length\n            if (j <= string.length)\
    \ {\n                if (string.substring(i, j).equals(substring)) {\n       \
    \             result += 1\n                }\n            }\n        }\n     \
    \   return result\n    }\n\n", "        var result = \"\"\n        for (i <- 0\
    \ until string.length) {\n            var c = string.charAt(i)\n            if\
    \ (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n        \
    \    } else {\n                result += c.toLowerCase\n            }\n      \
    \  }\n        return result\n    }\n\n    // For a given string, return the number\
    \ of times the substring \"world\" occurs in the string.\n    // >>> count(\"\
    Hello world\")\n    // 1\n    def count(string : String) : Int = {\n        var\
    \ result = 0\n        for (i <- 0 until string.length) {\n            var c =\
    \ string.charAt(i)\n            if (c == \"world\") {\n                result\
    \ += 1\n            }\n        }\n        return result\n    }\n\n    // For a\
    \ given string, return the number of times the substring \"world\" occurs in the\
    \ string,\n    // ignoring case.\n    // >>> countIgnoreCase(\"Hello world\")\n\
    \    // 1\n    def countIgnoreCase(string : String) : Int = {\n        var result\
    \ = 0\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c == \"world\") {\n                result += 1\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times the substring \"world\" occurs in the string,\n    // ignoring\
    \ case, and ignoring the case of the letters.\n    // >>> countIgnoreCaseAndIgnoreCase(\"\
    Hello world\")\n    // 1\n    def countIgnoreCaseAndIgnoreCase(string : String)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c == \"world\") {\n\
    \                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string,\n    // ignoring case, and ignoring the case\
    \ of the letters, and ignoring the case of the letters\n    // of the substring\
    \ \"world\".\n    // >>> countIgnore", "        var result = \"\"\n        for\
    \ (i <- 0 until string.length) {\n            if (string.charAt(i).isLowerCase())\
    \ {\n                result += string.charAt(i).toUpperCase()\n            } else\
    \ {\n                result += string.charAt(i).toLowerCase()\n            }\n\
    \        }\n        result", "        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (c >=\
    \ 'a' && c <= 'z') {\n                result += c.toUpperCase\n            } else\
    \ {\n                result += c.toLowerCase\n            }\n        }\n     \
    \   result", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result += c.toUpperCase\n            } else {\n         \
    \       result += c.toLowerCase\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string.\n    // >>> count(\"Hello world!\")\n    //\
    \ 1\n    def count(string : String) : Int = {\n        var result = 0\n      \
    \  for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c == \"world\") {\n                result += 1\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times the substring \"world\" occurs in the string,\n    // ignoring\
    \ case.\n    // >>> countIgnoreCase(\"Hello world!\")\n    // 1\n    def countIgnoreCase(string\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c == \"world\") {\n\
    \                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string,\n    // ignoring case, and ignoring the case\
    \ of the letters in the substring.\n    // >>> countIgnoreCaseAndIgnoreCase(\"\
    Hello world!\")\n    // 1\n    def countIgnoreCaseAndIgnoreCase(string : String)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c == \"world\") {\n\
    \                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string,\n    // ignoring case, and ignoring the case\
    \ of the letters in the substring.\n    // >>> countIgnoreCaseAndIgnoreCase(\"",
  "        var s = string.toLowerCase\n        var r = \"\"\n        for (i <- 0 until\
    \ s.length) {\n            r = r + s.charAt(i).toUpperCase\n        }\n      \
    \  r\n    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string.\n    // >>> count(\"Hello world!\")\n    //\
    \ 1\n    def count(string : String) : Int = {\n        var s = string.toLowerCase\n\
    \        var r = 0\n        for (i <- 0 until s.length) {\n            if (s.substring(i,\
    \ i + \"world\".length).equals(\"world\")) {\n                r = r + 1\n    \
    \        }\n        }\n        r\n    }\n\n    // For a given string, return the\
    \ number of times the substring \"world\" occurs in the string,\n    // ignoring\
    \ case.\n    // >>> countCase(\"Hello world!\")\n    // 1\n    def countCase(string\
    \ : String) : Int = {\n        var s = string.toLowerCase\n        var r = 0\n\
    \        for (i <- 0 until s.length) {\n            if (s.substring(i, i + \"\
    world\".length).equals(\"world\")) {\n                r = r + 1\n            }\n\
    \        }\n        r\n    }\n\n    // For a given string, return the number of\
    \ times the substring \"world\" occurs in the string,\n    // ignoring case, ignoring\
    \ leading and trailing whitespace.\n    // >>> countCaseTrim(\"  Hello world!\
    \  \")\n    // 1\n    def countCaseTrim(string : String) : Int = {\n        var\
    \ s = string.toLowerCase\n        var r = 0\n        for (i <- 0 until s.length)\
    \ {\n            if (s.substring(i, i + \"world\".length).equals(\"world\")) {\n\
    \                r = r + 1\n            }\n        }\n        r\n    }\n\n   \
    \ // For a given string, return the number of times the substring \"world\" occurs\
    \ in the string,\n    // ignoring case, ignoring leading and trailing whitespace.\n\
    \    // >>> countCaseTrim2(\"  Hello world!  \")\n    // 1\n    def", "      \
    \  var result = \"\"\n        for (i <- 0 until string.length) {\n           \
    \ var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n        \
    \        result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return a string where adjacent characters that are\
    \ the same have been\n    // merged into a single character.\n    // >>> mergeAdjacent((\"\
    mississippi\"))\n    // (\"miSsSiSiSiSpi\")\n    def mergeAdjacent(string : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (i + 1 < string.length\
    \ && string.charAt(i + 1) == c) {\n                result += c\n             \
    \   i += 1\n            } else {\n                result += c\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ a string where adjacent characters that are digits have been\n    // merged\
    \ into a single digit.\n    // >>> mergeNumbers((\"1-2 3\"))\n    // (\"1-2 3\"\
    )\n    def mergeNumbers(string : String) : String = {\n        var result = \"\
    \"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (i + 1 < string.length && string.charAt(i + 1).isDigit()) {\n\
    \                result += c\n                i += 1\n            } else {\n \
    \               result += c\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where adjacent characters\
    \ that are either a letter or a\n    // digit have been merged into a single character.\n\
    \    // >>> mergeLettersNumbers((\"1-2 3\"))\n    // (\"1-2 3\")\n    def mergeLettersNumbers(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (i +\
    \ 1 < string.", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result += c.toUpperCase\n            } else {\n         \
    \       result += c.toLowerCase\n            }\n        }\n        result\n  \
    \  }\n\n    // For a given string, return a string where adjacent characters that\
    \ are the same have been\n    // merged into a single character.\n    // >>> mergeAdjacent((\"\
    mississippi\"))\n    // (\"miSsIssIppI\")\n    def mergeAdjacent(string : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (i < string.length -\
    \ 1 && string.charAt(i + 1) == c) {\n                result += c\n           \
    \     i += 1\n            } else {\n                result += c\n            }\n\
    \        }\n        result\n    }\n\n    // For a given string, return a string\
    \ where adjacent characters that are digits have been\n    // merged into a single\
    \ digit.\n    // >>> mergeNumbers((\"1-2 3\"))\n    // (\"1-2 3\")\n    def mergeNumbers(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (i <\
    \ string.length - 1 && string.charAt(i + 1).isDigit()) {\n                result\
    \ += c\n                i += 1\n            } else {\n                result +=\
    \ c\n            }\n        }\n        result\n    }\n\n    // For a given string,\
    \ return a string where adjacent characters that are either a letter or a\n  \
    \  // digit have been merged into a single character.\n    // >>> mergeLettersNumbers((\"\
    1-2 3\"))\n    // (\"1-2 3\")\n    def mergeLettersNumbers(string : String) :\
    \ String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (i < string.length -\
    \ 1 && (", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result += c.toUpperCase\n            } else {\n         \
    \       result += c.toLowerCase\n            }\n        }\n        result", " \
    \       var result = \"\"\n        for (i <- 0 until string.length) {\n      \
    \      var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n   \
    \             result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result", "      \
    \  var result = \"\"\n        for (i <- 0 until string.length) {\n           \
    \ var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n        \
    \        result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return the number of times a substring is contained\
    \ in the string.\n    // >>> countSubstring(\"abcabcabc\", \"abc\")\n    // 3\n\
    \    def countSubstring(string : String, substring : String) : Int = {\n     \
    \   var result = 0\n        for (i <- 0 until string.length) {\n            var\
    \ j = i + substring.length\n            if (j <= string.length) {\n          \
    \      if (string.substring(i, j).equals(substring)) {\n                    result\
    \ += 1\n                }\n            }\n        }\n        return result\n \
    \   }\n\n    // For a given string, return the number of times a substring is\
    \ contained in the string,\n    // ignoring case.\n    // >>> countSubstringIgnoreCase(\"\
    abcabcabc\", \"ABC\")\n    // 3\n    def countSubstringIgnoreCase(string : String,\
    \ substring : String) : Int = {\n        var result = 0\n        for (i <- 0 until\
    \ string.length) {\n            var j = i + substring.length\n            if (j\
    \ <= string.length) {\n                if (string.substring(i, j).equalsIgnoreCase(substring))\
    \ {\n                    result += 1\n                }\n            }\n     \
    \   }\n        return result\n    }\n\n    // For a given string, return the number\
    \ of times a substring is contained in the string,\n    // ignoring case and leading\
    \ characters.\n    // >>> countSubstringIgnoreCaseLeading(\"abcabcabc\", \"ABC\"\
    )\n    // 3\n    def countSubstringIgnoreCaseLeading(string : String, substring\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var j = i + substring.length\n            if (j <= string.length)\
    \ {\n                if (string.sub", "        var result = \"\"\n        for\
    \ (i <- 0 until string.length) {\n            result += string.charAt(i).toUpperCase\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ a string where adjacent characters that are the same have been\n    // merged\
    \ into a single character.\n    // >>> mergeAdjacent((\"mississippi\"))\n    //\
    \ (\"misisipi\")\n    def mergeAdjacent(string : String) : String = {\n      \
    \  var result = \"\"\n        for (i <- 0 until string.length) {\n           \
    \ result += string.charAt(i)\n            if (i + 1 < string.length && string.charAt(i)\
    \ == string.charAt(i + 1)) {\n                result += string.charAt(i + 1)\n\
    \                i += 1\n            }\n        }\n        return result\n   \
    \ }\n\n    // For a given string, return a string where adjacent characters that\
    \ are digits have been\n    // merged into a single digit character.\n    // >>>\
    \ mergeNumbers((\"1 2 3\"))\n    // (\"12 3\")\n    def mergeNumbers(string :\
    \ String) : String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            result += string.charAt(i)\n            if (i + 1 < string.length\
    \ && string.charAt(i) >= '0' && string.charAt(i) <= '9' && string.charAt(i + 1)\
    \ >= '0' && string.charAt(i + 1) <= '9') {\n                result += string.charAt(i\
    \ + 1)\n                i += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where adjacent characters\
    \ that are not letters or\n    // digits have been merged into a single character.\n\
    \    // >>> mergePunctuation((\"Hello!\"))\n    // (\"Helo!\")\n    def mergePunctuation(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            result += string.charAt(i)\n            if (i\
    \ + 1 < string.length && !(string.charAt(i) >= 'a'", "        var result = \"\"\
    \n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += (c - 'a' +\
    \ 'A')\n            } else {\n                result += c\n            }\n   \
    \     }\n        return result\n    }\n\n    // For a given string, return the\
    \ number of times the substring \"world\" occurs in the string.\n    // >>> count(\"\
    Hello world\")\n    // 1\n    def count(string : String) : Int = {\n        var\
    \ result = 0\n        for (i <- 0 until string.length) {\n            var c =\
    \ string.charAt(i)\n            if (c == 'w' && string.substring(i).equals(\"\
    world\")) {\n                result += 1\n            }\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string,\n    // ignoring case.\n    // >>> countIgnoreCase(\"\
    hello world\")\n    // 1\n    def countIgnoreCase(string : String) : Int = {\n\
    \        var result = 0\n        for (i <- 0 until string.length) {\n        \
    \    var c = string.charAt(i)\n            if (c == 'W' && string.substring(i).equalsIgnoreCase(\"\
    world\")) {\n                result += 1\n            }\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string,\n    // ignoring case and leading and trailing\
    \ whitespace.\n    // >>> countIgnoreCaseTrim(\"  hello world  \")\n    // 1\n\
    \    def countIgnoreCaseTrim(string : String) : Int = {\n        var result =\
    \ 0\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c == 'W' && string.substring(i).equalsIgnoreCase(\"world\"))\
    \ {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in", "        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (c >=\
    \ 'a' && c <= 'z') {\n                result += c.toUpperCase\n            } else\
    \ {\n                result += c.toLowerCase\n            }\n        }\n     \
    \   return result\n    }\n\n    // For a given string, return the number of times\
    \ a substring is repeated.\n    // >>> repeatCount(\"abcabcabc\", \"abc\")\n \
    \   // 3\n    def repeatCount(string : String, substring : String) : Int = {\n\
    \        var count = 0\n        for (i <- 0 until string.length) {\n         \
    \   var index = string.indexOf(substring, i)\n            if (index >= 0) {\n\
    \                count += 1\n                i = index + substring.length\n  \
    \          }\n        }\n        return count\n    }\n\n    // For a given string,\
    \ return the number of times a substring is repeated in the reverse direction.\n\
    \    // >>> repeatCountReverse(\"abcabcabc\", \"abc\")\n    // 3\n    def repeatCountReverse(string\
    \ : String, substring : String) : Int = {\n        var count = 0\n        for\
    \ (i <- 0 until string.length) {\n            var index = string.lastIndexOf(substring,\
    \ i)\n            if (index >= 0) {\n                count += 1\n            \
    \    i = index - substring.length\n            }\n        }\n        return count\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated in the forward direction.\n    // >>> repeatCountForward(\"abcabcabc\"\
    , \"abc\")\n    // 3\n    def repeatCountForward(string : String, substring :\
    \ String) : Int = {\n        var count = 0\n        for (i <- 0 until string.length)\
    \ {\n            var index = string.indexOf(substring, i)\n            if (index\
    \ >= 0) {\n                count += 1\n                i = index + substring.length\n\
    \            }\n        }\n        return count\n    }\n\n    // For a given string,\
    \ return the number of times a substring is repeated in the backward direction.\n\
    \    // >>> repeatCountBackward", "        var result = \"\"\n        for (i <-\
    \ 0 until string.length) {\n            var c = string.charAt(i)\n           \
    \ if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n     \
    \       } else {\n                result += c.toLowerCase\n            }\n   \
    \     }\n        return result", "        var result = \"\"\n        for (i <-\
    \ 0 until string.length) {\n            result = result + string.charAt(i).toUpperCase()\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ a string where adjacent characters that are the same have been\n    // separated\
    \ by a space.\n    // >>> separateSpaces(\"Hello\")\n    // (\"H e l l o\")\n\
    \    def separateSpaces(string : String) : String = {\n        var result = \"\
    \"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c == result.charAt(result.length - 1)) {\n                result\
    \ = result + \" \"\n            }\n            result = result + c\n        }\n\
    \        return result\n    }\n\n    // For a given string, return a string where\
    \ adjacent characters that are not the same have\n    // been separated by a space.\n\
    \    // >>> separateSpaces(\"Hello\")\n    // (\"H e l l o\")\n    def separateNonSpaces(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (c !=\
    \ result.charAt(result.length - 1)) {\n                result = result + \" \"\
    \n            }\n            result = result + c\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where adjacent characters\
    \ that are not the same have\n    // been separated by a space.\n    // >>> separateSpaces(\"\
    Hello\")\n    // (\"H e l l o\")\n    def separateNonSpaces2(string : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c != result.charAt(result.length\
    \ - 1)) {\n                result = result + \" \"\n            }\n          \
    \  result = result + c\n        }\n        return result\n    }\n\n    // For\
    \ a given string, return a string where adjacent characters that are not the same\
    \ have\n    // been separated by a space.\n    // >>> separateSpaces(\"Hello\"\
    )\n    ", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result += c.toUpperCase\n            } else {\n         \
    \       result += c.toLowerCase\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated.\n    // >>> repeatCount(\"abcabcabc\", \"abc\")\n    // 3\n    def\
    \ repeatCount(string : String, substring : String) : Int = {\n        var count\
    \ = 0\n        for (i <- 0 until string.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) {\n                count += 1\n        \
    \        i += substring.length - 1\n            }\n        }\n        return count\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated,\n    // starting at the given index.\n    // >>> repeatCount(\"abcabcabc\"\
    , \"abc\", 2)\n    // 2\n    def repeatCount(string : String, substring : String,\
    \ startIndex : Int) : Int = {\n        var count = 0\n        for (i <- startIndex\
    \ until string.length) {\n            if (string.substring(i, i + substring.length)\
    \ == substring) {\n                count += 1\n                i += substring.length\
    \ - 1\n            }\n        }\n        return count\n    }\n\n    // For a given\
    \ string, return the number of times a substring is repeated,\n    // starting\
    \ at the given index, and using the given replacement string.\n    // >>> repeatCount(\"\
    abcabcabc\", \"abc\", 2, \"ABC\")\n    // 2\n    def repeatCount(string : String,\
    \ substring : String, startIndex : Int, replacement : String) : Int = {\n    \
    \    var count = 0\n        for (i <- startIndex until string.length) {\n    \
    \        if (string.substring(i, i + substring.length) == substring) {\n     \
    \           count += 1\n                i += substring.length - 1\n          \
    \  }\n        }\n        return count\n    }\n\n    //", "        var result =\
    \ \"\"\n        for (i <- 0 until string.length) {\n            result += string.charAt(i).toUpperCase\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times that a substring is contained in the string.\n    // >>>\
    \ countSubstring(\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        var s = string\n        for (i <- 0 until s.length) {\n            var\
    \ c = s.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n                s\
    \ = s.substring(0, i) + c.toUpperCase() + s.substring(i + 1)\n            }\n\
    \        }\n        return s\n    }\n\n    // For a given string, return a string\
    \ where adjacent characters that are the same have been\n    // merged into a\
    \ single character.\n    // >>> mergeAdjacent((\"abcba\"))\n    // (\"abcb\")\n\
    \    def mergeAdjacent(string : String) : String = {\n        var s = string\n\
    \        for (i <- 0 until s.length) {\n            var c = s.charAt(i)\n    \
    \        if (i + 1 < s.length && c == s.charAt(i + 1)) {\n                s =\
    \ s.substring(0, i) + c + s.substring(i + 2)\n            }\n        }\n     \
    \   return s\n    }\n\n    // For a given string, return a string where adjacent\
    \ characters that are digits have been\n    // merged into a single digit.\n \
    \   // >>> mergeNumbers((\"abcd1234\"))\n    // (\"abcd1234\")\n    def mergeNumbers(string\
    \ : String) : String = {\n        var s = string\n        for (i <- 0 until s.length)\
    \ {\n            var c = s.charAt(i)\n            if (i + 1 < s.length && Character.isDigit(c)\
    \ && Character.isDigit(s.charAt(i + 1))) {\n                s = s.substring(0,\
    \ i) + c + s.substring(i + 2)\n            }\n        }\n        return s\n  \
    \  }\n\n    // For a given string, return a string where adjacent characters that\
    \ are either a letter or a\n    // digit have been merged into a single character.\n\
    \    // >>> mergeLettersNumbers((\"abcd1234\"))\n    // (\"abc1234\")\n    def\
    \ mergeLettersNumbers(string : String) : String = {\n        var s = string\n\
    \        for (i <- 0 until s.length) {\n            var", "        var result\
    \ = \"\"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times that a substring is repeated.\n    // >>> repeatCount(\"\
    abcabcabc\", \"abc\")\n    // 3\n    def repeatCount(string : String, substring\
    \ : String) : Int = {\n        var count = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.substring(i, i + substring.length) == substring) {\n\
    \                count += 1\n            }\n        }\n        return count\n\
    \    }\n\n    // For a given string, return the number of times that a substring\
    \ is repeated,\n    // ignoring case.\n    // >>> repeatCountIgnoreCase(\"abcABCabc\"\
    , \"abc\")\n    // 3\n    def repeatCountIgnoreCase(string : String, substring\
    \ : String) : Int = {\n        var count = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.substring(i, i + substring.length).equalsIgnoreCase(substring))\
    \ {\n                count += 1\n            }\n        }\n        return count\n\
    \    }\n\n    // For a given string, return the number of times that a substring\
    \ is repeated,\n    // ignoring case, and ignoring the case of the letters in\
    \ the substring.\n    // >>> repeatCountIgnoreCase(\"abcABCabc\", \"abc\")\n \
    \   // 3\n    def repeatCountIgnoreCaseAndCase(string : String, substring : String)\
    \ : Int = {\n        var count = 0\n        for (i <- 0 until string.length) {\n\
    \            if (string.substring(i, i + substring.length).equalsIgnoreCase(substring))\
    \ {\n                count += 1\n            }\n        }\n        return count\n\
    \    }\n\n    // For a given string, return the number of times that a substring\
    \ is repeated,\n    // ignoring case, and ignoring the case", "        var result\
    \ = \"\"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ a string where all characters that are not in the given set are removed.\n \
    \   // >>> removeChars(\"Hello\", \"hl\")\n    // \"eo\"\n    def removeChars(string\
    \ : String, chars : String) : String = {\n        var result = \"\"\n        for\
    \ (i <- 0 until string.length) {\n            var c = string.charAt(i)\n     \
    \       if (!chars.contains(c)) {\n                result += c\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ a string where all adjacent characters that are the same are removed.\n    //\
    \ >>> removeAdjacent(\"code\")\n    // \"odc\"\n    def removeAdjacent(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (i +\
    \ 1 < string.length && string.charAt(i + 1) == c) {\n                continue\n\
    \            }\n            result += c\n        }\n        return result\n  \
    \  }\n\n    // For a given string, return a new string where all the words in\
    \ lowercase are replaced with their uppercase equivalent.\n    // Words are defined\
    \ as groups of non-space characters.\n    // >>> replaceWords(\"Let's eat, Grandma!\"\
    )\n    // \"Let's eat, Grandma!\"\n    def replaceWords(string : String) : String\
    \ = {\n        var result = \"\"\n        var words = string.split(\" \")\n  \
    \      for (word <- words) {\n            var upperWord = word.toUpperCase\n \
    \           result += upperWord + \" \"\n        }\n        return result.trim()\n\
    \    }\n\n    // For a given string, return a string where all the words are reversed.\n\
    \    // Words are defined as groups of non", "        var s = string.toLowerCase.replaceAll(\"\
    (.)\", (_, $1).toUpperCase)\n        s = s.toUpperCase.replaceAll(\"(.)\", (_,\
    \ $1).toLowerCase)\n        return s\n    }\n\n    // For a given string, return\
    \ the number of times that a substring is repeated.\n    // >>> repeatCount(\"\
    abcabcabc\", \"abc\")\n    // 3\n    def repeatCount(string : String, subString\
    \ : String) : Int = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < string.length) {\n            var j = string.indexOf(subString, i)\n  \
    \          if (j == -1) break\n            i = j + 1\n            count += 1\n\
    \        }\n        return count\n    }\n\n    // For a given string, return the\
    \ number of times that a substring is repeated in reverse.\n    // >>> repeatCountReverse(\"\
    abcabcabc\", \"abc\")\n    // 3\n    def repeatCountReverse(string : String, subString\
    \ : String) : Int = {\n        var count = 0\n        var i = string.length -\
    \ 1\n        while (i >= 0) {\n            var j = string.lastIndexOf(subString,\
    \ i)\n            if (j == -1) break\n            i = j - 1\n            count\
    \ += 1\n        }\n        return count\n    }\n\n    // For a given string, return\
    \ the number of times that a substring is repeated in a given direction.\n   \
    \ // >>> repeatCountDirection(\"abcabcabc\", \"abc\", Direction.FORWARD)\n   \
    \ // 3\n    def repeatCountDirection(string : String, subString : String, direction\
    \ : Direction) : Int = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < string.length) {\n            var j = string.indexOf(subString, i)\n  \
    \          if (j == -1) break\n            i = j + 1\n            if (direction\
    \ == Direction.FORWARD) {\n                count += 1\n            } else {\n\
    \                count -= 1\n            }\n        }\n        return count\n\
    \    }\n\n    // For a given string, return the number of times that a substring\
    \ is repeated", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            result += string.charAt(i).toUpperCase\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return the number of lowercase characters.\n\
    \    // >>> countLowercase((\"Hello\"))\n    // 5\n    def countLowercase(string\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.charAt(i).toLowerCase == string.charAt(i)) {\n   \
    \             result += 1\n            }\n        }\n        return result\n \
    \   }\n\n    // For a given string, return the number of uppercase characters.\n\
    \    // >>> countUppercase((\"Hello\"))\n    // 5\n    def countUppercase(string\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.charAt(i).toUpperCase == string.charAt(i)) {\n   \
    \             result += 1\n            }\n        }\n        return result\n \
    \   }\n\n    // For a given string, return the number of lowercase characters.\n\
    \    // >>> countLowercase((\"Hello\"))\n    // 5\n    def countLowercase(string\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.charAt(i).toLowerCase == string.charAt(i)) {\n   \
    \             result += 1\n            }\n        }\n        return result\n \
    \   }\n\n    // For a given string, return the number of uppercase characters.\n\
    \    // >>> countUppercase((\"Hello\"))\n    // 5\n    def countUppercase(string\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.charAt(i).toUpperCase == string.charAt(i)) {\n   \
    \             result += 1\n            }\n        }\n        return result\n \
    \   }\n\n    // For a given string, return the number of lowercase characters.\n\
    \    // >>> countLowercase((\"Hello\"))\n    // 5\n    def countLowercase", " \
    \       var result = \"\"\n        for (i <- 0 until string.length) {\n      \
    \      var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n   \
    \             result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return a string where adjacent characters that are\
    \ the same have been\n    // merged into a single character.\n    // >>> mergeAdjacent((\"\
    mississippi\"))\n    // (\"miSsSiSiSiPi\")\n    def mergeAdjacent(string : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (i + 1 < string.length\
    \ && string.charAt(i + 1) == c) {\n                result += c\n             \
    \   i += 1\n            } else {\n                result += c\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ a string where adjacent characters that are digits have been\n    // merged\
    \ into a single digit.\n    // >>> mergeNumbers((\"1-2 3\"))\n    // (\"1-2 3\"\
    )\n    def mergeNumbers(string : String) : String = {\n        var result = \"\
    \"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= '0' && c <= '9') {\n                result += c\n      \
    \      } else {\n                if (i + 1 < string.length && string.charAt(i\
    \ + 1) >= '0' && string.charAt(i + 1) <= '9') {\n                    result +=\
    \ string.charAt(i + 1)\n                    i += 1\n                } else {\n\
    \                    result += c\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // For a given string, return a string where\
    \ adjacent characters that are either a letter or a\n    // digit have been merged\
    \ into a single character.\n    // >>> mergeLettersOrDigits((\"1-2 3\"))\n   \
    \ // (\"1-2 3\")\n    def mergeLet", "        var result = \"\"\n        for (i\
    \ <- 0 until string.length) {\n            var c = string.charAt(i)\n        \
    \    if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n  \
    \          } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times a substring is repeated.\n    // >>> repeatCount(\"abcabcabc\"\
    , \"abc\")\n    // 3\n    def repeatCount(string : String, substring : String)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c == substring) {\n\
    \                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated,\n    // ignoring case.\n    // >>> repeatCountIgnoreCase(\"abcabcabc\"\
    , \"ABC\")\n    // 3\n    def repeatCountIgnoreCase(string : String, substring\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c.toUpperCase == substring.toUpperCase)\
    \ {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated,\n    // ignoring case, and ignoring non-alphabetic characters.\n \
    \   // >>> repeatCountIgnoreCaseAndNonAlpha(\"abcabcabc\", \"ABC\")\n    // 3\n\
    \    def repeatCountIgnoreCaseAndNonAlpha(string : String, substring : String)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c.isLetter() && substring.toUpperCase\
    \ == c.toUpperCase) {\n                result += 1\n            }\n        }\n\
    \        return result\n    }\n\n    // For a given string, return the number\
    \ of times a substring is repeated,\n", "        var result = \"\"\n        for\
    \ (i <- 0 until string.length) {\n            result += string.charAt(i).toUpperCase\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ a string where adjacent characters that are the same have been\n    // separated\
    \ by a space.\n    // >>> separateAdjacentLetters(\"abcd\")\n    // \"a b c d\"\
    \n    def separateAdjacentLetters(string : String) : String = {\n        var result\
    \ = \"\"\n        for (i <- 0 until string.length) {\n            if (i + 1 <\
    \ string.length && string.charAt(i) == string.charAt(i + 1)) {\n             \
    \   result += string.charAt(i) + \" \"\n            } else {\n               \
    \ result += string.charAt(i)\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where adjacent characters\
    \ that are not the same have been\n    // separated by a space.\n    // >>> separateAdjacentLetters(\"\
    abcd\")\n    // \"a b c d\"\n    def separateAdjacentLetters2(string : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            if (i + 1 < string.length && string.charAt(i) != string.charAt(i\
    \ + 1)) {\n                result += string.charAt(i) + \" \"\n            } else\
    \ {\n                result += string.charAt(i)\n            }\n        }\n  \
    \      return result\n    }\n\n    // For a given string, return a string where\
    \ all characters that are not a letter are removed.\n    // >>> removeNonLetters(\"\
    Hello, world!\")\n    // \"ello, world\"\n    def removeNonLetters(string : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            if (Character.isLetter(string.charAt(i))) {\n               \
    \ result += string.charAt(i)\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where all characters that\
    \ are not a letter are removed.\n    //", "        var result = \"\"\n       \
    \ for (i <- 0 until string.length) {\n            result += string.charAt(i).toUpperCase\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times a substring is repeated.\n    // >>> repeatCount(\"abcabcabc\"\
    , \"abc\")\n    // 2\n    def repeatCount(string : String, substring : String)\
    \ : Int = {\n        var count = 0\n        for (i <- 0 until string.length) {\n\
    \            if (string.substring(i, i + substring.length) == substring) {\n \
    \               count += 1\n            }\n        }\n        return count\n \
    \   }\n\n    // For a given string, return the longest substring that is a palindrome.\n\
    \    // >>> longestPalindrome(\"abccccdd\")\n    // \"cccc\"\n    def longestPalindrome(string\
    \ : String) : String = {\n        var max = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            for (j <- i until string.length) {\n                if (string.substring(i,\
    \ j).equals(string.substring(j, i))) {\n                    if (j - i > max.length)\
    \ {\n                        max = string.substring(i, j)\n                  \
    \  }\n                }\n            }\n        }\n        return max\n    }\n\
    \n    // For a given string, return the longest substring that contains only lowercase\
    \ letters.\n    // >>> longestLowerCasePalindrome(\"abccccdd\")\n    // \"cccc\"\
    \n    def longestLowerCasePalindrome(string : String) : String = {\n        var\
    \ max = \"\"\n        for (i <- 0 until string.length) {\n            for (j <-\
    \ i until string.length) {\n                if (string.substring(i, j).toLowerCase\
    \ == string.substring(j, i).toLowerCase) {\n                    if (j - i > max.length)\
    \ {\n                        max = string.substring(i, j)\n                  \
    \  }\n                }\n            }\n        }\n        return max\n    }\n\
    \n    // For a given string, return the longest substring that contains only uppercase\
    \ letters.\n    //", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result += c.toUpperCase\n            } else {\n         \
    \       result += c.toLowerCase\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where adjacent characters\
    \ that are the same have been\n    // merged into a single character.\n    //\
    \ >>> mergeAdjacent((\"mississippi\"))\n    // (\"miSsSiSiSiSiSpi\")\n    def\
    \ mergeAdjacent(string : String) : String = {\n        var result = \"\"\n   \
    \     for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (i < string.length - 1 && string.charAt(i + 1) == c) {\n     \
    \           result += c\n                i += 1\n            } else {\n      \
    \          result += c\n            }\n        }\n        return result\n    }\n\
    \n    // For a given string, return a string where adjacent characters that are\
    \ digits have been\n    // merged into a single digit.\n    // >>> mergeNumbers((\"\
    1-2 3\"))\n    // (\"1-2 3\")\n    def mergeNumbers(string : String) : String\
    \ = {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            var c = string.charAt(i)\n            if (c >= '0' && c <= '9') {\n\
    \                result += c\n            } else {\n                if (i < string.length\
    \ - 1 && string.charAt(i + 1) >= '0' && string.charAt(i + 1) <= '9') {\n     \
    \               result += string.charAt(i)\n                    i += 1\n     \
    \           } else {\n                    result += c\n                }\n   \
    \         }\n        }\n        return result\n    }\n\n    // For a given string,\
    \ return a string where adjacent characters that are either a letter or a\n  \
    \  // digit have been merged into a single character.\n    // >>> mergeLettersNumbers((\"\
    1-2 3\"))\n    // (\"1-2 3\")\n    def mergeLettersNumbers", "        var result\
    \ = \"\"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ a string where adjacent characters that are the same have been\n    // merged\
    \ into a single character.\n    // >>> mergeAdjacent((\"code\"))\n    // (\"cod\"\
    )\n    def mergeAdjacent(string : String) : String = {\n        var result = \"\
    \"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (i < string.length - 1 && string.charAt(i + 1) == c) {\n     \
    \           result += c\n                i += 1\n            } else {\n      \
    \          result += c\n            }\n        }\n        return result\n    }\n\
    \n    // For a given string, return a string where adjacent characters that are\
    \ digits have been\n    // merged into a single digit.\n    // >>> mergeNumbers((\"\
    code123\"))\n    // (\"code1\")\n    def mergeNumbers(string : String) : String\
    \ = {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            var c = string.charAt(i)\n            if (c >= '0' && c <= '9') {\n\
    \                result += c\n            } else {\n                result +=\
    \ c\n            }\n        }\n        return result\n    }\n\n    // For a given\
    \ string, return a string where adjacent characters that are either a letter or\
    \ a\n    // digit have been merged into a single character.\n    // >>> mergeLettersNumbers((\"\
    code123\"))\n    // (\"code12\")\n    def mergeLettersNumbers(string : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result += c\n            } else if (c >= '0' && c <= '9')\
    \ {\n                result", "        var result = \"\"\n        for (i <- 0\
    \ until string.length) {\n            result += string.charAt(i).toUpperCase\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times the substring \"world\" occurs in the string.\n    // >>>\
    \ count(\"Hello world!\")\n    // 1\n    def count(string : String) : Int = {\n\
    \        var result = 0\n        for (i <- 0 until string.length) {\n        \
    \    if (string.substring(i, i + \"world\".length).equals(\"world\")) {\n    \
    \            result += 1\n            }\n        }\n        return result\n  \
    \  }\n\n    // For a given string, return the number of times the substring \"\
    world\" occurs in the string,\n    // ignoring case.\n    // >>> countIgnoreCase(\"\
    Hello world!\")\n    // 1\n    def countIgnoreCase(string : String) : Int = {\n\
    \        var result = 0\n        for (i <- 0 until string.length) {\n        \
    \    if (string.substring(i, i + \"world\".length).equalsIgnoreCase(\"world\"\
    )) {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string,\n    // ignoring case, and ignoring the case\
    \ of the letters.\n    // >>> countIgnoreCaseAndIgnoreCase(\"Hello world!\")\n\
    \    // 1\n    def countIgnoreCaseAndIgnoreCase(string : String) : Int = {\n \
    \       var result = 0\n        for (i <- 0 until string.length) {\n         \
    \   if (string.substring(i, i + \"world\".length).equalsIgnoreCase(\"world\"))\
    \ {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string,\n    // ignoring case, and ignoring the case\
    \ of the letters.\n    // >>> countIgnoreCaseAndIgnoreCase(\"Hello world!\")\n\
    \    // 1\n    def countIgnoreCaseAndIgnoreCase2(string : String) : Int = {\n\
    \        var result = 0\n", "        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (c >=\
    \ 'a' && c <= 'z') {\n                result += c.toUpperCase\n            } else\
    \ {\n                result += c.toLowerCase\n            }\n        }\n     \
    \   return result\n    }\n\n    // For a given string, return a string where adjacent\
    \ characters that are the same have been\n    // merged into a single character.\n\
    \    // >>> mergeAdjacent((\"mississippi\"))\n    // (\"miSsSiSiPi\")\n    def\
    \ mergeAdjacent(string : String) : String = {\n        var result = \"\"\n   \
    \     for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (i + 1 < string.length && string.charAt(i + 1) == c) {\n     \
    \           result += c\n                i += 1\n            } else {\n      \
    \          result += c\n            }\n        }\n        return result\n    }\n\
    \n    // For a given string, return a string where adjacent characters that are\
    \ digits have been\n    // merged into a single digit.\n    // >>> mergeNumbers((\"\
    1-2 3\"))\n    // (\"1-2 3\")\n    def mergeNumbers(string : String) : String\
    \ = {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            var c = string.charAt(i)\n            if (i + 1 < string.length &&\
    \ string.charAt(i + 1).isDigit()) {\n                result += c\n           \
    \     i += 1\n            } else {\n                result += c\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ a string where adjacent characters that are either a letter or a\n    // digit\
    \ have been merged into a single character.\n    // >>> mergeLettersNumbers((\"\
    1-2 3\"))\n    // (\"1-2 3\")\n    def mergeLettersNumbers(string : String) :\
    \ String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (i + 1 < string.length\
    \ &&", "        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n\
    \                result += c.toUpperCase\n            } else {\n             \
    \   result += c.toLowerCase\n            }\n        }\n        result\n    }\n\
    \n    // For a given string, return a string where adjacent characters that are\
    \ the same have been\n    // merged into a single character.\n    // >>> mergeAdjacent((\"\
    mississippi\"))\n    // (\"miSsSiSiSiSpi\")\n    def mergeAdjacent(string : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (i < string.length -\
    \ 1 && string.charAt(i + 1) == c) {\n                result += c\n           \
    \     i += 1\n            } else {\n                result += c\n            }\n\
    \        }\n        result\n    }\n\n    // For a given string, return a string\
    \ where adjacent characters that are digits have been\n    // merged into a single\
    \ digit.\n    // >>> mergeNumbers((\"1-2 3\"))\n    // (\"1-2 3\")\n    def mergeNumbers(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (c >=\
    \ '0' && c <= '9') {\n                result += c\n            } else {\n    \
    \            if (i < string.length - 1 && string.charAt(i + 1) >= '0' && string.charAt(i\
    \ + 1) <= '9') {\n                    result += string.charAt(i)\n           \
    \         i += 1\n                } else {\n                    result += c\n\
    \                }\n            }\n        }\n        result\n    }\n\n    //\
    \ For a given string, return a string where adjacent characters that are either\
    \ a letter or a\n    // digit have been merged into a single character.\n    //\
    \ >>> mergeLettersNumbers((\"1-2 3\"))\n    // (\"1-2 3\")\n    def mergeLettersNumbers(string\
    \ : String", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                c = c.toUpperCase()\n            } else {\n             \
    \   c = c.toLowerCase()\n            }\n            result += c\n        }\n \
    \       return result\n    }\n\n    // For a given string, return the number of\
    \ times that a substring is repeated.\n    // >>> repeatCount(\"abcabcabc\", \"\
    abc\")\n    // 3\n    def repeatCount(string : String, substring : String) : Int\
    \ = {\n        var count = 0\n        for (i <- 0 until string.length) {\n   \
    \         if (string.substring(i, i + substring.length) == substring) {\n    \
    \            count += 1\n            }\n        }\n        return count\n    }\n\
    \n    // For a given string, return the number of times that a substring is repeated,\n\
    \    // ignoring case.\n    // >>> repeatCountIgnoreCase(\"abcabcabc\", \"abc\"\
    )\n    // 3\n    def repeatCountIgnoreCase(string : String, substring : String)\
    \ : Int = {\n        var count = 0\n        for (i <- 0 until string.length) {\n\
    \            if (string.substring(i, i + substring.length).equalsIgnoreCase(substring))\
    \ {\n                count += 1\n            }\n        }\n        return count\n\
    \    }\n\n    // For a given string, return the number of times that a substring\
    \ is repeated,\n    // ignoring case, and ignoring the case of the characters\
    \ in the substring.\n    // >>> repeatCountIgnoreCaseAndCase(\"abcabcabc\", \"\
    abc\")\n    // 3\n    def repeatCountIgnoreCaseAndCase(string : String, substring\
    \ : String) : Int = {\n        var count = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.substring(i, i + substring.length).equalsIgnoreCase(substring))\
    \ {\n                count += 1\n            }\n        }\n        return count\n\
    \    }\n\n    // For a given string, return the number of times that a substring\
    \ is repeated,\n", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result += c.toUpperCase\n            } else {\n         \
    \       result += c.toLowerCase\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where adjacent characters\
    \ that are the same have been\n    // merged into a single character.\n    //\
    \ >>> mergeAdjacent((\"mississippi\"))\n    // (\"miSsSiSiSiPi\")\n    def mergeAdjacent(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (i <\
    \ string.length - 1 && string.charAt(i + 1) == c) {\n                result +=\
    \ c\n                i += 1\n            } else {\n                result += c\n\
    \            }\n        }\n        return result\n    }\n\n    // For a given\
    \ string, return a string where adjacent characters that are digits have been\n\
    \    // merged into a single digit.\n    // >>> mergeNumbers((\"1-2 3\"))\n  \
    \  // (\"1-2 3\")\n    def mergeNumbers(string : String) : String = {\n      \
    \  var result = \"\"\n        for (i <- 0 until string.length) {\n           \
    \ var c = string.charAt(i)\n            if (i < string.length - 1 && string.charAt(i\
    \ + 1).isDigit()) {\n                result += c\n                i += 1\n   \
    \         } else {\n                result += c\n            }\n        }\n  \
    \      return result\n    }\n\n    // For a given string, return a string where\
    \ adjacent characters that are either a letter or a\n    // digit have been merged\
    \ into a single character.\n    // >>> mergeLettersNumbers((\"1-2 3\"))\n    //\
    \ (\"1-2 3\")\n    def mergeLettersNumbers(string : String) : String = {\n   \
    \     var result = \"\"\n        for (i <- 0 until string.length) {\n        \
    \    var c = string.charAt(i)\n            if (i < string.length - 1", "     \
    \   var result = \"\"\n        for (i <- 0 until string.length) {\n          \
    \  var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n       \
    \         result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return the number of times that a substring is repeated\
    \ in the string.\n    // >>> repeatCount(\"abcabcabc\", \"abc\")\n    // 2\n \
    \   def repeatCount(string : String, substring : String) : Int = {\n        var\
    \ count = 0\n        for (i <- 0 until string.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) {\n                count += 1\n        \
    \    }\n        }\n        return count\n    }\n\n    // For a given string, return\
    \ the number of times that a substring is repeated in the string,\n    // ignoring\
    \ case.\n    // >>> repeatCountIgnoreCase(\"abcABCabc\", \"abc\")\n    // 2\n\
    \    def repeatCountIgnoreCase(string : String, substring : String) : Int = {\n\
    \        var count = 0\n        for (i <- 0 until string.length) {\n         \
    \   if (string.substring(i, i + substring.length).toLowerCase == substring.toLowerCase)\
    \ {\n                count += 1\n            }\n        }\n        return count\n\
    \    }\n\n    // For a given string, return the number of times that a substring\
    \ is repeated in the string,\n    // ignoring case, and ignoring non-alphabetic\
    \ characters.\n    // >>> repeatCountIgnoreCaseAndNonAlpha(\"abcABCabc\", \"abc\"\
    )\n    // 2\n    def repeatCountIgnoreCaseAndNonAlpha(string : String, substring\
    \ : String) : Int = {\n        var count = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.substring(i, i + substring.length).toLowerCase ==\
    \ substring.toLowerCase &&\n                string.charAt(i) >= 'a' && string.charAt(i)\
    \ <= 'z') {\n                count += 1\n            }\n        ", "        var\
    \ result = \"\"\n        for (i <- 0 until string.length) {\n            result\
    \ = result + string.charAt(i).toUpperCase()\n        }\n        result\n    }\n\
    \n    // For a given string, return a string where adjacent characters that are\
    \ the same have been\n    // separated by a space.\n    // >>> separateSpaces(\"\
    Hello\")\n    // (\"H e l l o\")\n    def separateSpaces(string : String) : String\
    \ = {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            var c = string.charAt(i)\n            if (c == result.charAt(result.length\
    \ - 1)) {\n                result = result + \" \" + c\n            } else {\n\
    \                result = result + c\n            }\n        }\n        result\n\
    \    }\n\n    // For a given string, return a string where adjacent characters\
    \ that are not the same have\n    // been separated by a space.\n    // >>> separateSpaces(\"\
    Hello\")\n    // (\"H e l l o\")\n    def separateNonSpaces(string : String) :\
    \ String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c != result.charAt(result.length\
    \ - 1)) {\n                result = result + \" \" + c\n            } else {\n\
    \                result = result + c\n            }\n        }\n        result\n\
    \    }\n\n    // For a given string, return a string where adjacent characters\
    \ that are not the same have\n    // been separated by a space.\n    // >>> separateNonSpaces(\"\
    Hello\")\n    // (\"H e l l o\")\n    def separateNonSpaces2(string : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c != result.charAt(result.length\
    \ - 1)) {\n                result = result + \" \" + c\n            } else {\n\
    \                result = result + c\n            }\n        }\n        result\n\
    \    }\n\n    // For a given string, return a string where adjacent characters\
    \ that are not the same have\n    //", "        var result = \"\"\n        for\
    \ (i <- 0 until string.length) {\n            var c = string.charAt(i)\n     \
    \       if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times a substring is repeated in the string.\n    // >>> countSubstring(\"\
    abcabcabcabc\", \"abc\")\n    // 3\n    def countSubstring(string : String, substring\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var j = i + substring.length\n            if (j <= string.length)\
    \ {\n                if (string.substring(i, j).equals(substring)) {\n       \
    \             result += 1\n                }\n            }\n        }\n     \
    \   return result\n    }\n\n    // For a given string, return the number of times\
    \ a substring is repeated in the string.\n    // >>> countSubstring(\"abcabcabcabc\"\
    , \"abc\")\n    // 3\n    def countSubstring2(string : String, substring : String)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var j = i + substring.length\n            if (j <= string.length)\
    \ {\n                if (string.substring(i, j).equals(substring)) {\n       \
    \             result += 1\n                }\n            }\n        }\n     \
    \   return result\n    }\n\n    // For a given string, return the number of times\
    \ a substring is repeated in the string.\n    // >>> countSubstring(\"abcabcabcabc\"\
    , \"abc\")\n    // 3\n    def countSubstring3(string : String, substring : String)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var j = i + substring.length\n            if (j <= string.length)\
    \ {\n                if (string.substring(i, j).equals(substring)) {\n       \
    \             result += 1\n                }\n            }\n        }\n     \
    \   ", "        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n\
    \                result += c.toUpperCase\n            } else {\n             \
    \   result += c.toLowerCase\n            }\n        }\n        result\n    }\n\
    \n    // For a given string, return the number of times a substring is repeated\
    \ in the string.\n    // >>> countSubstring(\"abcabcabcabc\")\n    // 3\n    def\
    \ countSubstring(string : String) : Int = {\n        var result = 0\n        for\
    \ (i <- 0 until string.length) {\n            var j = i\n            while (j\
    \ < string.length && string.charAt(j) == string.charAt(i)) {\n               \
    \ j += 1\n            }\n            result += j - i\n            i = j\n    \
    \    }\n        result\n    }\n\n    // For a given string, return the number\
    \ of times a substring is repeated in the string.\n    // >>> countSubstring(\"\
    abcabcabcabc\")\n    // 3\n    def countSubstring2(string : String) : Int = {\n\
    \        var result = 0\n        for (i <- 0 until string.length) {\n        \
    \    var j = i\n            while (j < string.length && string.charAt(j) == string.charAt(i))\
    \ {\n                j += 1\n            }\n            result += j - i\n    \
    \        i = j\n        }\n        result\n    }\n\n    // For a given string,\
    \ return the number of times a substring is repeated in the string.\n    // >>>\
    \ countSubstring(\"abcabcabcabc\")\n    // 3\n    def countSubstring3(string :\
    \ String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var j = i\n            while (j < string.length && string.charAt(j)\
    \ == string.charAt(i)) {\n                j += 1\n            }\n            result\
    \ += j - i\n            i = j\n        }\n        result\n    }\n\n    // For\
    \ a given string, return the number of times a substring is repeated in the string.\n\
    \    // >>>", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result += c.toUpperCase\n            } else {\n         \
    \       result += c.toLowerCase\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times that a substring\
    \ is repeated in the string.\n    // >>> countSubstring(\"abcabcabcabc\", \"abc\"\
    )\n    // 3\n    def countSubstring(string : String, substring : String) : Int\
    \ = {\n        var result = 0\n        for (i <- 0 until string.length) {\n  \
    \          var j = i\n            while (j < string.length && string.charAt(j)\
    \ == substring.charAt(0)) {\n                j += 1\n            }\n         \
    \   if (j - i >= substring.length) {\n                result += 1\n          \
    \  }\n            i = j\n        }\n        return result\n    }\n\n    // For\
    \ a given string, return the number of times that a substring is repeated in the\
    \ string,\n    // ignoring case.\n    // >>> countSubstringIgnoreCase(\"abcabcabcabc\"\
    , \"ABC\")\n    // 3\n    def countSubstringIgnoreCase(string : String, substring\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var j = i\n            while (j < string.length && string.charAt(j).toUpperCase()\
    \ == substring.charAt(0).toUpperCase()) {\n                j += 1\n          \
    \  }\n            if (j - i >= substring.length) {\n                result +=\
    \ 1\n            }\n            i = j\n        }\n        return result\n    }\n\
    \n    // For a given string, return the number of times that a substring is repeated\
    \ in the string,\n    // ignoring case, and ignoring the case of the substring.\n\
    \    // >>> countSubstringIgnoreCaseIgnoreCase(\"abcabcabcabc\", \"ABC\")\n  \
    \  // 3\n    def countSubstringIgnoreCaseIgnoreCase(string : String, substring\
    \ : String) :", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result += c.toUpperCase\n            } else {\n         \
    \       result += c.toLowerCase\n            }\n        }\n        return result",
  "        var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     result = result + string.charAt(i).toUpperCase()\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return the number of times a substring\
    \ is repeated.\n    // >>> countSubstring(\"abcabcabcabc\", \"abc\")\n    // 3\n\
    \    def countSubstring(string : String, substring : String) : Int = {\n     \
    \   var result = 0\n        for (i <- 0 until string.length) {\n            if\
    \ (string.substring(i, i + substring.length).equals(substring)) {\n          \
    \      result += 1\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return the number of times a substring is repeated\
    \ in reverse order.\n    // >>> countSubstring(\"abcabcabcabc\", \"abc\")\n  \
    \  // 3\n    def countSubstringReverse(string : String, substring : String) :\
    \ Int = {\n        var result = 0\n        for (i <- 0 until string.length) {\n\
    \            if (string.substring(i, i + substring.length).equals(substring))\
    \ {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated in the given direction.\n    // >>> countSubstring(\"abcabcabcabc\"\
    , \"abc\", \"forward\")\n    // 3\n    def countSubstring(string : String, substring\
    \ : String, direction : String) : Int = {\n        var result = 0\n        for\
    \ (i <- 0 until string.length) {\n            if (string.substring(i, i + substring.length).equals(substring))\
    \ {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated in the given direction.\n    // >>> countSubstring(\"abcabcabcabc\"\
    , \"abc\", \"reverse\")\n    // 3\n    def countSubstringReverse(string : String,\
    \ substring : String, direction : String) : Int = {\n        var result = 0\n\
    \        for (i <- 0", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result += c.toUpperCase\n            } else {\n         \
    \       result += c.toLowerCase\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a new string where the first character\
    \ is in upper case and the rest are in lower case.\n    // >>> capitalize(\"Hello\"\
    )\n    // (\"HELLO\")\n    def capitalize(string : String) : String = {\n    \
    \    var result = \"\"\n        for (i <- 0 until string.length) {\n         \
    \   var c = string.charAt(i)\n            if (i == 0) {\n                result\
    \ += c.toUpperCase\n            } else {\n                result += c.toLowerCase\n\
    \            }\n        }\n        return result\n    }\n\n    // For a given\
    \ string, return a new string where the first character is in lower case and the\
    \ rest are in upper case.\n    // >>> lowercaseFirst(\"Hello\")\n    // (\"hello\"\
    )\n    def lowercaseFirst(string : String) : String = {\n        var result =\
    \ \"\"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (i == 0) {\n                result += c.toLowerCase\n        \
    \    } else {\n                result += c.toUpperCase\n            }\n      \
    \  }\n        return result\n    }\n\n    // For a given string, return a new\
    \ string where the first character is in upper case and the rest are in lower\
    \ case.\n    // >>> upperCaseFirst(\"Hello\")\n    // (\"HELLO\")\n    def upperCaseFirst(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (i ==\
    \ 0) {\n                result += c.toUpperCase\n            } else {\n      \
    \          result += c.toLowerCase\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a new string where the first character\
    \ is in lower case and", "        var s = string.toLowerCase\n        var r =\
    \ \"\"\n        for (i <- 0 until s.length) {\n            r = r + s.charAt(i).toUpperCase\n\
    \        }\n        r\n    }\n\n    // For a given string, return the number of\
    \ times the substring \"world\" occurs in the string.\n    // >>> count(\"Hello\
    \ world\")\n    // 1\n    def count(string : String) : Int = {\n        var s\
    \ = string.toLowerCase\n        var r = 0\n        for (i <- 0 until s.length)\
    \ {\n            if (s.substring(i, i + \"world\".length).equals(\"world\")) {\n\
    \                r = r + 1\n            }\n        }\n        r\n    }\n\n   \
    \ // For a given string, return a string where \"not \" has been added to the\
    \ front,\n    // and \"beautiful\" has been removed from the end.\n    // >>>\
    \ fix(\"This dinner is not beautiful\")\n    // \"This dinner is not not\"\n \
    \   def fix(string : String) : String = {\n        var s = string.toLowerCase\n\
    \        var r = \"\"\n        for (i <- 0 until s.length) {\n            if (s.substring(i,\
    \ i + \"not\".length) == \"not\") {\n                r = r + \"not \"\n      \
    \      }\n            if (s.substring(i, i + \"beautiful\".length) == \"beautiful\"\
    ) {\n                break\n            }\n            r = r + s.charAt(i)\n \
    \       }\n        r\n    }\n\n    // For a given string, return a string where\
    \ \"not \" has been added to the front,\n    // and \"beautiful\" has been removed\
    \ from the end.\n    // >>> fix(\"This dinner is not beautiful\")\n    // \"This\
    \ dinner is not not\"\n    def fix2(string : String) : String = {\n        var\
    \ s = string.toLowerCase\n        var r = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            if (s.substring(i, i + \"not\".length) == \"not\") {\n      \
    \          r = r + \"not \"\n            }\n            if (s.substring(i", " \
    \       var result = \"\"\n        for (i <- 0 until string.length) {\n      \
    \      result = result + string.charAt(i).toUpperCase\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return the number of times it appears\
    \ in the string.\n    // >>> countAppearances(\"hello\", \"hello\")\n    // 2\n\
    \    def countAppearances(string : String, substring : String) : Int = {\n   \
    \     var result = 0\n        for (i <- 0 until string.length) {\n           \
    \ if (string.charAt(i) == substring.charAt(0)) {\n                result += 1\n\
    \            }\n        }\n        return result\n    }\n\n    // For a given\
    \ string, return the number of times it appears in the string, ignoring case.\n\
    \    // >>> countAppearancesIgnoreCase(\"hello\", \"hello\")\n    // 2\n    def\
    \ countAppearancesIgnoreCase(string : String, substring : String) : Int = {\n\
    \        var result = 0\n        for (i <- 0 until string.length) {\n        \
    \    if (string.charAt(i).toLowerCase == substring.charAt(0).toLowerCase) {\n\
    \                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times it appears in\
    \ the string, ignoring case and\n    // ignoring case.\n    // >>> countAppearancesIgnoreCaseIgnoreCase(\"\
    hello\", \"hello\")\n    // 2\n    def countAppearancesIgnoreCaseIgnoreCase(string\
    \ : String, substring : String) : Int = {\n        var result = 0\n        for\
    \ (i <- 0 until string.length) {\n            if (string.charAt(i).toLowerCase\
    \ == substring.charAt(0).toLowerCase) {\n                result += 1\n       \
    \     }\n        }\n        return result\n    }\n\n    // For a given string,\
    \ return the number of times it appears in the string, ignoring case and\n   \
    \ // ignoring case.\n    // >>> countAppearancesIgnoreCaseIgnoreCase(\"hello\"\
    , \"hello\")\n    // 2\n    def countAppearancesIgnoreCaseIgnoreCase(string :\
    \ String, substring : String) : Int = {\n        var result = 0\n        for (i\
    \ <-", "        var s = string.toLowerCase\n        var r = \"\"\n        for\
    \ (i <- 0 until s.length) {\n            r = r + s.charAt(i).toUpperCase\n   \
    \     }\n        r\n    }\n\n    // For a given string, return the number of times\
    \ a substring is repeated.\n    // >>> repeatCount(\"abcabcabc\", \"abc\")\n \
    \   // 2\n    def repeatCount(string : String, substring : String) : Int = {\n\
    \        var count = 0\n        var i = 0\n        while (i < string.length) {\n\
    \            if (string.substring(i).equals(substring)) {\n                count\
    \ = count + 1\n                i = i + substring.length\n            } else {\n\
    \                i = i + 1\n            }\n        }\n        count\n    }\n\n\
    \    // For a given string, return the number of times a substring is repeated\
    \ in reverse order.\n    // >>> repeatCountReverse(\"abcabcabc\", \"abc\")\n \
    \   // 2\n    def repeatCountReverse(string : String, substring : String) : Int\
    \ = {\n        var count = 0\n        var i = string.length - substring.length\n\
    \        while (i >= 0) {\n            if (string.substring(i).equals(substring))\
    \ {\n                count = count + 1\n                i = i - substring.length\n\
    \            } else {\n                i = i - 1\n            }\n        }\n \
    \       count\n    }\n\n    // For a given string, return the number of times\
    \ a substring is repeated in the given direction.\n    // >>> repeatCountDirection(\"\
    abcabcabc\", \"abc\", \"forward\")\n    // 2\n    def repeatCountDirection(string\
    \ : String, substring : String, direction : String) : Int = {\n        var count\
    \ = 0\n        var i = 0\n        if (direction == \"forward\") {\n          \
    \  while (i < string.length) {\n                if (string.substring(i).equals(substring))\
    \ {\n                    count = count + 1\n                    i = i + substring.length\n\
    \                } else {\n                    i = i + 1\n                }\n\
    \            }\n        } else {\n            i = string.", "        var s = string.toLowerCase\n\
    \        var t = string.toUpperCase\n        return t\n    }\n\n    // For a given\
    \ string, return the number of times a substring is repeated.\n    // >>> repeatCount(\"\
    abcabcabc\", \"abc\")\n    // 3\n    def repeatCount(string : String, subString\
    \ : String) : Int = {\n        var count = 0\n        var index = 0\n        while\
    \ (index < string.length) {\n            var i = string.indexOf(subString, index)\n\
    \            if (i == -1) break\n            index = i + 1\n            count\
    \ += 1\n        }\n        return count\n    }\n\n    // For a given string, return\
    \ the number of times a substring is repeated in reverse order.\n    // >>> repeatCountReverse(\"\
    abcabcabc\", \"abc\")\n    // 3\n    def repeatCountReverse(string : String, subString\
    \ : String) : Int = {\n        var count = 0\n        var index = 0\n        while\
    \ (index < string.length) {\n            var i = string.lastIndexOf(subString,\
    \ index)\n            if (i == -1) break\n            index = i + 1\n        \
    \    count += 1\n        }\n        return count\n    }\n\n    // For a given\
    \ string, return the number of times a substring is repeated in the given direction.\n\
    \    // >>> repeatCount(\"abcabcabc\", \"abc\", \"forward\")\n    // 3\n    def\
    \ repeatCount(string : String, subString : String, direction : String) : Int =\
    \ {\n        var count = 0\n        var index = 0\n        if (direction == \"\
    forward\") {\n            while (index < string.length) {\n                var\
    \ i = string.indexOf(subString, index)\n                if (i == -1) break\n \
    \               index = i + 1\n                count += 1\n            }\n   \
    \     } else {\n            while (index < string.length) {\n                var\
    \ i = string.lastIndexOf(subString, index)\n                if (i == -1) break\n\
    \                index = i + 1\n                count += 1\n            }\n  \
    \      }\n        return count\n    }\n\n    // For a given string, return the\
    \ number of times a substring", "        var result = \"\"\n        for (i <-\
    \ 0 until string.length) {\n            var c = string.charAt(i)\n           \
    \ if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n     \
    \       } else {\n                result += c.toLowerCase\n            }\n   \
    \     }\n        return result\n    }\n\n    // For a given string, return a string\
    \ where all characters that are not in the given set are removed.\n    // >>>\
    \ removeChars(\"Hello\", \"hl\")\n    // \"eo\"\n    def removeChars(string :\
    \ String, chars : String) : String = {\n        var result = \"\"\n        for\
    \ (i <- 0 until string.length) {\n            var c = string.charAt(i)\n     \
    \       if (!chars.contains(c)) {\n                result += c\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ a string where all adjacent characters that are the same are removed.\n    //\
    \ >>> removeAdjacent(\"code\")\n    // \"odec\"\n    def removeAdjacent(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (i +\
    \ 1 < string.length && string.charAt(i + 1) == c) {\n                continue\n\
    \            }\n            result += c\n        }\n        return result\n  \
    \  }\n\n    // For a given string, return a string where all the lowercase letters\
    \ in the string are moved to the front,\n    // and all the uppercase letters\
    \ to the end.\n    // >>> moveLetters(\"code\")\n    // \"ecod\"\n    def moveLetters(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (c >=\
    \ 'a' && c <= 'z') {\n                result += c.toUpperCase\n            } else\
    \ {\n                result += c.toLowerCase\n            }\n        }\n     \
    \   return result\n    }\n\n    // For a given string, return a string where the\
    \ first and", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result += c.toUpperCase\n            } else {\n         \
    \       result += c.toLowerCase\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string.\n    // >>> count(\"Hello world!\")\n    //\
    \ 1\n    def count(string : String) : Int = {\n        var result = 0\n      \
    \  for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c == \"world\") {\n                result += 1\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times the substring \"world\" occurs in the string.\n    // >>>\
    \ count(\"Hello world!\")\n    // 1\n    def count2(string : String) : Int = {\n\
    \        var result = 0\n        for (i <- 0 until string.length) {\n        \
    \    var c = string.charAt(i)\n            if (c == \"world\") {\n           \
    \     result += 1\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return the number of times the substring \"world\"\
    \ occurs in the string.\n    // >>> count(\"Hello world!\")\n    // 1\n    def\
    \ count3(string : String) : Int = {\n        var result = 0\n        for (i <-\
    \ 0 until string.length) {\n            var c = string.charAt(i)\n           \
    \ if (c == \"world\") {\n                result += 1\n            }\n        }\n\
    \        return result\n    }\n\n    // For a given string, return the number\
    \ of times the substring \"world\" occurs in the string.\n    // >>> count(\"\
    Hello world!\")\n    // 1\n    def count4(string : String) : Int = {\n       \
    \ var result = 0\n        for (i <- 0 until string.length) {\n            var\
    \ c = string.charAt(i)\n            if (c == \"world\") {\n                result\
    \ +=", "        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n\
    \                result += c.toUpperCase\n            } else {\n             \
    \   result += c.toLowerCase\n            }\n        }\n        return result",
  "        var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     result = result + string.charAt(i).toUpperCase()\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return a string where adjacent characters\
    \ that are the same have been\n    // exchanged.\n    // >>> exchangeCase(\"code\"\
    )\n    // (\"eodc\")\n    // >>> exchangeCase(\"abAB\")\n    // (\"AbBA\")\n \
    \   def exchangeCase(string : String) : String = {\n        var result = \"\"\n\
    \        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (i + 1 < string.length && c == string.charAt(i + 1)) {\n     \
    \           result = result + c.toLowerCase()\n                i = i + 1\n   \
    \         } else {\n                result = result + c\n            }\n     \
    \   }\n        return result\n    }\n\n    // For a given string, return a string\
    \ where \"not \" has been added to the front, and \"mr.\"\n    // has been added\
    \ to the back.\n    // >>> addNotAndMr((\"Hello\"))\n    // (\"not Hello mr.\"\
    )\n    def addNotAndMr(string : String) : String = {\n        var result = \"\"\
    \n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c == \" \") {\n                result = result + \" not \"\n\
    \            } else if (c == \".\") {\n                result = result + \" mr.\"\
    \n            } else {\n                result = result + c\n            }\n \
    \       }\n        return result\n    }\n\n    // For a given string, return a\
    \ string where the first and last characters have been exchanged,\n    // so \"\
    Hello\" yields \"lllo\". The original string will be length 1 or more.\n    //\
    \ >>> frontBack((\"Hello\"))\n    // (\"lllo\")\n    def frontBack(string : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (i == 0) {\n       \
    \         result = result + c.toLowerCase", "        var result = \"\"\n     \
    \   for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ a string where adjacent characters that are the same have been\n    // merged\
    \ into a single character.\n    // >>> mergeAdjacent((\"mississippi\"))\n    //\
    \ (\"miSsSiSiPi\")\n    def mergeAdjacent(string : String) : String = {\n    \
    \    var result = \"\"\n        for (i <- 0 until string.length) {\n         \
    \   var c = string.charAt(i)\n            if (i < string.length - 1 && string.charAt(i\
    \ + 1) == c) {\n                result += c\n                i += 1\n        \
    \    } else {\n                result += c\n            }\n        }\n       \
    \ return result\n    }\n\n    // For a given string, return a string where adjacent\
    \ characters that are digits have been\n    // merged into a single digit.\n \
    \   // >>> mergeNumbers((\"1-2-3\"))\n    // (\"1-23\")\n    def mergeNumbers(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (c >=\
    \ '0' && c <= '9') {\n                result += c\n            } else {\n    \
    \            result += c\n            }\n        }\n        return result\n  \
    \  }\n\n    // For a given string, return a string where adjacent characters that\
    \ are either a letter or a\n    // digit have been merged into a single character.\n\
    \    // >>> mergeLettersNumbers((\"1-2-3\"))\n    // (\"123\")\n    def mergeLettersNumbers(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (c >=\
    \ 'a' && c <= 'z') {\n                result += c\n            } else if (c >=",
  "        var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n    \
    \            result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return a string where all characters that are not\
    \ in the alphabet are removed.\n    // >>> removeNonAlpha((\"Hello\"))\n    //\
    \ (\"e\")\n    def removeNonAlpha(string : String) : String = {\n        var result\
    \ = \"\"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c\n      \
    \      }\n        }\n        return result\n    }\n\n    // For a given string,\
    \ return a string where all adjacent characters that are the same are removed.\n\
    \    // >>> removeAdjacent((\"code\"))\n    // (\"co\")\n    def removeAdjacent(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (i <\
    \ string.length - 1) {\n                var next = string.charAt(i + 1)\n    \
    \            if (c == next) {\n                    i += 1\n                } else\
    \ {\n                    result += c\n                }\n            } else {\n\
    \                result += c\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where all adjacent characters\
    \ that are in the alphabet are removed.\n    // >>> removePunctuation((\"code.\"\
    ))\n    // (\"cod\")\n    def removePunctuation(string : String) : String = {\n\
    \        var result = \"\"\n        for (i <- 0 until string.length) {\n     \
    \       var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n  \
    \              result += c\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where all characters that\
    \ are not in the alphabet are removed", "        var s = string.toLowerCase\n\
    \        var r = \"\"\n        for (i <- 0 until s.length) {\n            r =\
    \ r + s.charAt(i).toUpperCase\n        }\n        r\n    }\n\n    // For a given\
    \ string, return the number of times the substring \"world\" occurs in the string.\n\
    \    // >>> count(\"Hello world\")\n    // 1\n    def count(string : String) :\
    \ Int = {\n        var s = string.toLowerCase\n        var r = 0\n        for\
    \ (i <- 0 until s.length) {\n            if (s.substring(i, i + \"world\".length).equals(\"\
    world\")) {\n                r = r + 1\n            }\n        }\n        r\n\
    \    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string.\n    // >>> count(\"Hello world\")\n    // 1\n\
    \    def count2(string : String) : Int = {\n        var s = string.toLowerCase\n\
    \        var r = 0\n        for (i <- 0 until s.length) {\n            if (s.substring(i,\
    \ i + \"world\".length).equals(\"world\")) {\n                r = r + 1\n    \
    \        }\n        }\n        r\n    }\n\n    // For a given string, return the\
    \ number of times the substring \"world\" occurs in the string.\n    // >>> count(\"\
    Hello world\")\n    // 1\n    def count3(string : String) : Int = {\n        var\
    \ s = string.toLowerCase\n        var r = 0\n        for (i <- 0 until s.length)\
    \ {\n            if (s.substring(i, i + \"world\".length).equals(\"world\")) {\n\
    \                r = r + 1\n            }\n        }\n        r\n    }\n\n   \
    \ // For a given string, return the number of times the substring \"world\" occurs\
    \ in the string.\n    // >>> count(\"Hello world\")\n    // 1\n    def count4(string\
    \ : String) : Int = {\n        var s = string.toLowerCase\n        var r = 0\n\
    \        for (i <- 0 until s.length) {\n            if (s.substring(i", "    \
    \    var result = \"\"\n        for (i <- 0 until string.length) {\n         \
    \   var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n      \
    \          result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return a string where adjacent characters that are\
    \ the same have been\n    // merged into a single character.\n    // >>> mergeAdjacent((\"\
    code\"))\n    // (\"cod\")\n    def mergeAdjacent(string : String) : String =\
    \ {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n \
    \           var c = string.charAt(i)\n            if (i < string.length - 1 &&\
    \ string.charAt(i + 1) == c) {\n                result += c\n                i\
    \ += 1\n            } else {\n                result += c\n            }\n   \
    \     }\n        return result\n    }\n\n    // For a given string, return a string\
    \ where adjacent characters that are digits have been\n    // merged into a single\
    \ digit.\n    // >>> mergeNumbers((\"code123\"))\n    // (\"code1\")\n    def\
    \ mergeNumbers(string : String) : String = {\n        var result = \"\"\n    \
    \    for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (i < string.length - 1 && Character.isDigit(string.charAt(i +\
    \ 1))) {\n                result += c\n                i += 1\n            } else\
    \ {\n                result += c\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where adjacent characters\
    \ that are either a letter or a\n    // digit have been merged into a single character.\n\
    \    // >>> mergeLettersOrDigits((\"code123\"))\n    // (\"code12\")\n    def\
    \ mergeLettersOrDigits(string : String) : String = {\n        var result = \"\"\
    \n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (i < string.length - 1 && (Character.isLetter(string.char", " \
    \       var result = \"\"\n        for (i <- 0 until string.length) {\n      \
    \      var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n   \
    \             result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result", "      \
    \  var result = \"\"\n        for (i <- 0 until string.length) {\n           \
    \ result += string.charAt(i).toUpperCase\n        }\n        return result\n \
    \   }\n\n    // For a given string, return a new string where the first character\
    \ is uppercase and the rest are lowercase.\n    // >>> capitalize(\"Hello\")\n\
    \    // (\"HELLO\")\n    def capitalize(string : String) : String = {\n      \
    \  var result = \"\"\n        result += string.charAt(0).toUpperCase\n       \
    \ for (i <- 1 until string.length) {\n            result += string.charAt(i).toLowerCase\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ a new string where the first character is lowercase and the rest are uppercase.\n\
    \    // >>> capitalize(\"Hello\")\n    // (\"hello\")\n    def uncapitalize(string\
    \ : String) : String = {\n        var result = \"\"\n        result += string.charAt(0).toLowerCase\n\
    \        for (i <- 1 until string.length) {\n            result += string.charAt(i).toUpperCase\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ a new string where the first character is uppercase and the rest are lowercase.\n\
    \    // >>> capitalize(\"Hello\")\n    // (\"HELLO\")\n    def capitalizeFirst(string\
    \ : String) : String = {\n        var result = \"\"\n        result += string.charAt(0).toUpperCase\n\
    \        for (i <- 1 until string.length) {\n            result += string.charAt(i)\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ a new string where the first character is lowercase and the rest are uppercase.\n\
    \    // >>> capitalize(\"Hello\")\n    // (\"hello\")\n    def uncapitalizeFirst(string\
    \ : String) : String = {\n        var result = \"\"\n        result += string.charAt(0).toLowerCase\n\
    \        for (i <- 1 until string.length) {\n            result += string.charAt(i)\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ a new string where the first character", "        var result = \"\"\n      \
    \  for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result", "        var s = string.toLowerCase\n    \
    \    var upper = s.toUpperCase\n        return upper\n    }\n\n    // For a given\
    \ string, return the number of lowercase characters.\n    // >>> countLowercase((\"\
    Hello\"))\n    // 5\n    def countLowercase(string : String) : Int = {\n     \
    \   var s = string.toLowerCase\n        var count = 0\n        while (s.nonEmpty)\
    \ {\n            count = count + 1\n            s = s.tail\n        }\n      \
    \  return count\n    }\n\n    // For a given string, return the number of uppercase\
    \ characters.\n    // >>> countUppercase((\"Hello\"))\n    // 5\n    def countUppercase(string\
    \ : String) : Int = {\n        var s = string.toUpperCase\n        var count =\
    \ 0\n        while (s.nonEmpty) {\n            count = count + 1\n           \
    \ s = s.tail\n        }\n        return count\n    }\n\n    // For a given string,\
    \ return the number of lowercase characters.\n    // >>> countLowercase((\"Hello\"\
    ))\n    // 5\n    def countLowercase(string : String) : Int = {\n        var s\
    \ = string.toLowerCase\n        var count = 0\n        while (s.nonEmpty) {\n\
    \            count = count + 1\n            s = s.tail\n        }\n        return\
    \ count\n    }\n\n    // For a given string, return the number of uppercase characters.\n\
    \    // >>> countUppercase((\"Hello\"))\n    // 5\n    def countUppercase(string\
    \ : String) : Int = {\n        var s = string.toUpperCase\n        var count =\
    \ 0\n        while (s.nonEmpty) {\n            count = count + 1\n           \
    \ s = s.tail\n        }\n        return count\n    }\n\n    // For a given string,\
    \ return the number of lowercase characters.\n    // >>> countLowercase((\"Hello\"\
    ))\n    // 5\n    def countLowercase(string : String) : Int = {\n        var s\
    \ = string.toLowerCase\n        var count = 0\n        while (s.nonEmpty) {\n\
    \            count = count + 1\n            s = s.tail\n        }\n        return\
    \ count", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result += c.toUpperCase\n            } else {\n         \
    \       result += c.toLowerCase\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string.\n    // >>> count(\"Hello world!\")\n    //\
    \ 1\n    def count(string : String) : Int = {\n        var result = 0\n      \
    \  for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c == \"world\") {\n                result += 1\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times the substring \"world\" occurs in the string,\n    // ignoring\
    \ case.\n    // >>> countIgnoreCase(\"Hello world!\")\n    // 1\n    def countIgnoreCase(string\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c == \"world\") {\n\
    \                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string,\n    // ignoring case, and ignoring the case\
    \ of the letters in the substring.\n    // >>> countIgnoreCaseAndIgnoreCase(\"\
    Hello world!\")\n    // 1\n    def countIgnoreCaseAndIgnoreCase(string : String)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c == \"world\") {\n\
    \                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string,\n    // ignoring case, and ignoring the case\
    \ of the letters in the substring.\n    // >>> countIgnoreCaseAndIgnoreCase(\"",
  "        var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     result += string.charAt(i).toUpperCase()\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times that a substring\
    \ is repeated.\n    // >>> repeatCount(\"abcabcabc\", \"abc\")\n    // 2\n   \
    \ def repeatCount(string : String, subString : String) : Int = {\n        var\
    \ count = 0\n        for (i <- 0 until string.length) {\n            if (string.substring(i,\
    \ i + subString.length) == subString) {\n                count += 1\n        \
    \    }\n        }\n        return count\n    }\n\n    // For a given string, return\
    \ the number of times that a substring is repeated, ignoring case.\n    // >>>\
    \ repeatCountIgnoreCase(\"abcabcabc\", \"ABC\")\n    // 2\n    def repeatCountIgnoreCase(string\
    \ : String, subString : String) : Int = {\n        var count = 0\n        for\
    \ (i <- 0 until string.length) {\n            if (string.substring(i, i + subString.length).toUpperCase()\
    \ == subString.toUpperCase()) {\n                count += 1\n            }\n \
    \       }\n        return count\n    }\n\n    // For a given string, return the\
    \ number of times that a substring is repeated, ignoring case and\n    // lowercase.\n\
    \    // >>> repeatCountIgnoreCaseAndLowercase(\"abcabcabc\", \"ABC\")\n    //\
    \ 2\n    def repeatCountIgnoreCaseAndLowercase(string : String, subString : String)\
    \ : Int = {\n        var count = 0\n        for (i <- 0 until string.length) {\n\
    \            if (string.substring(i, i + subString.length).toUpperCase() == subString.toUpperCase()\
    \ &&\n                string.charAt(i).toLowerCase() == string.charAt(i).toLowerCase())\
    \ {\n                count += 1\n            }\n        }\n        return count\n\
    \    }\n\n    // For a given string, return the number of times that a substring\
    \ is repeated, ignoring case and\n    // lowercase.\n    // >>> repeatCountIgnoreCaseAndLowercase",
  "        var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n    \
    \            result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return the number of times it appears in the string.\n\
    \    // >>> countAppearances(\"hello\", \"hello\")\n    // 2\n    def countAppearances(string\
    \ : String, substring : String) : Int = {\n        var count = 0\n        for\
    \ (i <- 0 until string.length) {\n            if (string.charAt(i) == substring.charAt(0))\
    \ {\n                count += 1\n            }\n        }\n        return count\n\
    \    }\n\n    // For a given string, return the number of times it appears in\
    \ the string, ignoring case.\n    // >>> countAppearancesIgnoreCase(\"hello\"\
    , \"HELLO\")\n    // 2\n    def countAppearancesIgnoreCase(string : String, substring\
    \ : String) : Int = {\n        var count = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.charAt(i).toUpperCase == substring.charAt(0).toUpperCase)\
    \ {\n                count += 1\n            }\n        }\n        return count\n\
    \    }\n\n    // For a given string, return the number of times it appears in\
    \ the string, ignoring case.\n    // >>> countAppearancesIgnoreCase(\"hello\"\
    , \"HELLO\")\n    // 2\n    def countAppearancesIgnoreCase(string : String, substring\
    \ : String) : Int = {\n        var count = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.charAt(i).toUpperCase == substring.charAt(0).toUpperCase)\
    \ {\n                count += 1\n            }\n        }\n        return count\n\
    \    }\n\n    // For a given string, return the number of times it appears in\
    \ the string, ignoring case.\n    // >>> countAppearancesIgnoreCase(\"hello\"\
    , \"HELLO\")\n    // 2\n    def countAppearancesIgnoreCase(string", "        var\
    \ result = \"\"\n        for (i <- 0 until string.length) {\n            var c\
    \ = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n              \
    \  result += c.toUpperCase\n            } else {\n                result += c.toLowerCase\n\
    \            }\n        }\n        result", "        var result = \"\"\n     \
    \   for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times the substring \"world\" occurs in the string.\n    // >>>\
    \ count(\"Hello world\")\n    // 1\n    def count(string : String) : Int = {\n\
    \        var result = 0\n        for (i <- 0 until string.length) {\n        \
    \    var c = string.charAt(i)\n            if (c == \"world\") {\n           \
    \     result += 1\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return the number of times the substring \"world\"\
    \ occurs in the string,\n    // ignoring case.\n    // >>> countIgnoreCase(\"\
    hello world\")\n    // 1\n    def countIgnoreCase(string : String) : Int = {\n\
    \        var result = 0\n        for (i <- 0 until string.length) {\n        \
    \    var c = string.charAt(i)\n            if (c == \"world\") {\n           \
    \     result += 1\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return the number of times the substring \"world\"\
    \ occurs in the string,\n    // ignoring case, and ignoring the case of the letters.\n\
    \    // >>> countIgnoreCaseAndIgnoreCase(\"hello world\")\n    // 1\n    def countIgnoreCaseAndIgnoreCase(string\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c == \"world\") {\n\
    \                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string,\n    // ignoring case, and ignoring the case\
    \ of the letters.\n    // >>> countIgnoreCaseAndIgnoreCase(\"hello world\")\n\
    \    // 1\n    def count", "        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (c >=\
    \ 'a' && c <= 'z') {\n                result += (c - 'a' + 'A')\n            }\
    \ else {\n                result += c\n            }\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return the number of times a substring\
    \ is repeated in the string.\n    // >>> countSubstring(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n    \
    \            result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        result\n    }\n\n    //\
    \ For a given string, return the number of times that a substring is contained\
    \ in the string.\n    // >>> countSubstring(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n    \
    \            result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return a string where adjacent characters that are\
    \ the same have been\n    // merged into a single character.\n    // >>> mergeAdjacent((\"\
    mississippi\"))\n    // (\"misisipi\")\n    def mergeAdjacent(string : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (i < string.length -\
    \ 1 && string.charAt(i + 1) == c) {\n                result += c\n           \
    \     i += 1\n            } else {\n                result += c\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ a string where adjacent characters that are digits have been\n    // merged\
    \ into a single digit.\n    // >>> mergeNumbers((\"1-2 3\"))\n    // (\"12 3\"\
    )\n    def mergeNumbers(string : String) : String = {\n        var result = \"\
    \"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= '0' && c <= '9') {\n                result += c\n      \
    \      } else {\n                result += c\n            }\n        }\n     \
    \   return result\n    }\n\n    // For a given string, return a string where adjacent\
    \ characters that are either a letter or a\n    // digit have been merged into\
    \ a single character.\n    // >>> mergeLettersNumbers((\"1-2 3\"))\n    // (\"\
    123\")\n    def mergeLettersNumbers(string : String) : String = {\n        var\
    \ result = \"\"\n        for (i <- 0 until string.length) {\n            var c\
    \ = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n              \
    \  result += c\n            } else if (c >= '0' && c", "        var result = \"\
    \"\n        for (i <- 0 until string.length) {\n            result += string.charAt(i).toUpperCase\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times a substring is repeated.\n    // >>> repeatCount(\"abcabcabc\"\
    , \"abc\")\n    // 2\n    def repeatCount(string : String, substring : String)\
    \ : Int = {\n        var count = 0\n        for (i <- 0 until string.length) {\n\
    \            if (string.substring(i, i + substring.length).equals(substring))\
    \ {\n                count += 1\n            }\n        }\n        return count\n\
    \    }\n\n    // For a given string, return the number of times a substring is\
    \ repeated in the reverse order.\n    // >>> repeatCountReverse(\"abcabcabc\"\
    , \"abc\")\n    // 2\n    def repeatCountReverse(string : String, substring :\
    \ String) : Int = {\n        var count = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.substring(string.length - i - substring.length, string.length\
    \ - i).equals(substring)) {\n                count += 1\n            }\n     \
    \   }\n        return count\n    }\n\n    // For a given string, return the number\
    \ of times a substring is repeated in the order of first occurrence.\n    // >>>\
    \ repeatCountFirst(\"abcabcabc\", \"abc\")\n    // 2\n    def repeatCountFirst(string\
    \ : String, substring : String) : Int = {\n        var count = 0\n        for\
    \ (i <- 0 until string.length) {\n            if (string.substring(i, i + substring.length).equals(substring))\
    \ {\n                count += 1\n                break\n            }\n      \
    \  }\n        return count\n    }\n\n    // For a given string, return the number\
    \ of times a substring is repeated in the order of last occurrence.\n    // >>>\
    \ repeatCountLast(\"abcabcabc\", \"abc\")\n    // 2\n    def repeatCountLast(string\
    \ : String, substring : String) : Int = {\n        var count = 0\n        for\
    \ (i <- 0 until string.length) {\n            if", "        var result = \"\"\n\
    \        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        result", "        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            result += string.charAt(i).toUpperCase\n     \
    \   }\n        return result\n    }\n\n    // For a given string, return a string\
    \ where all characters that are not in the alphabet are removed.\n    // >>> removeNonAlphabetChars(\"\
    Hello\")\n    // \"ello\"\n    def removeNonAlphabetChars(string : String) : String\
    \ = {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            if (string.charAt(i) in alphabet) {\n                result += string.charAt(i)\n\
    \            }\n        }\n        return result\n    }\n\n    // For a given\
    \ string, return a string where all adjacent characters that are the same are\
    \ removed.\n    // >>> removeAdjacentDuplicates(\"code\")\n    // \"cde\"\n  \
    \  def removeAdjacentDuplicates(string : String) : String = {\n        var result\
    \ = \"\"\n        for (i <- 0 until string.length) {\n            if (i == 0 or\
    \ string.charAt(i) != string.charAt(i - 1)) {\n                result += string.charAt(i)\n\
    \            }\n        }\n        return result\n    }\n\n    // For a given\
    \ string, return a string where all adjacent characters that are in the alphabet\
    \ are removed.\n    // >>> removeAdjacentAlphabetChars(\"code\")\n    // \"e\"\
    \n    def removeAdjacentAlphabetChars(string : String) : String = {\n        var\
    \ result = \"\"\n        for (i <- 0 until string.length) {\n            if (string.charAt(i)\
    \ in alphabet and i != 0) {\n                result += string.charAt(i)\n    \
    \        }\n        }\n        return result\n    }\n\n    // For a given string,\
    \ return a string where all adjacent characters that are not in the alphabet are\
    \ removed.\n    // >>> removeNonAlphabetChars(\"code\")\n    // \"cde\"\n    def\
    \ removeNonAlphabetChars2(string : String) : String = {\n        var result =\
    \ \"\"\n        for (i <- 0 until string.length) {\n            if (string.charAt(i)\
    \ in", "        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            result = result.concat(string.charAt(i).toUpperCase)\n        }\n\
    \        return result\n    }\n\n    // For a given string, return the number\
    \ of times that the string appears in the string.\n    // >>> countAppearances(\"\
    Hello\", \"ll\")\n    // 2\n    def countAppearances(string : String, substring\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.charAt(i) == substring.charAt(0)) {\n            \
    \    result += 1\n            }\n        }\n        return result\n    }\n\n \
    \   // For a given string, return the number of times that the substring appears\
    \ in the string.\n    // >>> countSubstringAppearances(\"Hello\", \"ll\")\n  \
    \  // 2\n    def countSubstringAppearances(string : String, substring : String)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.substring(i, i + substring.length).equals(substring))\
    \ {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times that the substring\
    \ appears in the string.\n    // >>> countSubstringAppearances(\"Hello\", \"ll\"\
    )\n    // 2\n    def countSubstringAppearances2(string : String, substring : String)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.substring(i, i + substring.length).equals(substring))\
    \ {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times that the substring\
    \ appears in the string.\n    // >>> countSubstringAppearances(\"Hello\", \"ll\"\
    )\n    // 2\n    def countSubstringAppearances3(string : String, substring : String)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.substring(i, i + substring.length).equals(", "   \
    \     var s = string.toLowerCase\n        var r = \"\"\n        for (i <- 0 until\
    \ s.length) {\n            r = r + s.charAt(i).toUpperCase\n        }\n      \
    \  r\n    }\n\n    // For a given string, return the number of times a substring\
    \ is contained in the string.\n    // >>> countSubstring(\"hello\", \"ll\")\n\
    \    // 2\n    def countSubstring(string : String, substring : String) : Int =\
    \ {\n        var count = 0\n        var i = 0\n        while (i < string.length)\
    \ {\n            var j = i + substring.length\n            if (j <= string.length)\
    \ {\n                if (string.substring(i, j).equals(substring)) {\n       \
    \             count += 1\n                }\n            }\n            i += 1\n\
    \        }\n        count\n    }\n\n    // For a given string, return the number\
    \ of times a substring is contained in the string,\n    // ignoring case.\n  \
    \  // >>> countSubstringIgnoreCase(\"hello\", \"ll\")\n    // 2\n    def countSubstringIgnoreCase(string\
    \ : String, substring : String) : Int = {\n        var count = 0\n        var\
    \ i = 0\n        while (i < string.length) {\n            var j = i + substring.length\n\
    \            if (j <= string.length) {\n                if (string.substring(i,\
    \ j).equalsIgnoreCase(substring)) {\n                    count += 1\n        \
    \        }\n            }\n            i += 1\n        }\n        count\n    }\n\
    \n    // For a given string, return the number of times a substring is contained\
    \ in the string,\n    // ignoring case, and ignoring the case of the substring.\n\
    \    // >>> countSubstringIgnoreCase(\"hello\", \"ll\")\n    // 2\n    def countSubstringIgnoreCaseAndIgnoreCase(string\
    \ : String, substring : String) : Int = {\n        var count = 0\n        var\
    \ i = 0\n        while (i < string.length) {\n            var j = i + substring.length\n\
    \            if (j <= string.length) {\n                if (string.substring(i,\
    \ j).equalsIgn", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            result = result + string.charAt(i).toUpperCase()\n        }\n\
    \        result\n    }\n\n    // For a given string, return a string where adjacent\
    \ characters that are the same have been\n    // separated by a space.\n    //\
    \ >>> separateAdjacentLetters(\"abcd\")\n    // \"a b c d\"\n    def separateAdjacentLetters(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            if (i + 1 < string.length && string.charAt(i)\
    \ == string.charAt(i + 1)) {\n                result = result + string.charAt(i)\
    \ + \" \"\n            } else {\n                result = result + string.charAt(i)\n\
    \            }\n        }\n        result\n    }\n\n    // For a given string,\
    \ return a string where adjacent characters that are not the same have been\n\
    \    // separated by a space.\n    // >>> separateAdjacentLetters(\"Able was I\
    \ ere I saw Elba\")\n    // \"Able was I ere I saw Elba\"\n    def separateAdjacentLetters2(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            if (i + 1 < string.length && string.charAt(i)\
    \ != string.charAt(i + 1)) {\n                result = result + string.charAt(i)\
    \ + \" \"\n            } else {\n                result = result + string.charAt(i)\n\
    \            }\n        }\n        result\n    }\n\n    // For a given string,\
    \ return a string where all characters that are not a letter are removed.\n  \
    \  // >>> removeNonLetters(\"Able was I ere I saw Elba\")\n    // \"I saw Elba\"\
    \n    def removeNonLetters(string : String) : String = {\n        var result =\
    \ \"\"\n        for (i <- 0 until string.length) {\n            if (string.charAt(i).isLetter())\
    \ {\n                result = result + string.charAt(i)\n            }\n     \
    \   }\n        result", "        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            result += string.charAt(i).toUpperCase\n     \
    \   }\n        return result\n    }\n\n    // For a given string, return the number\
    \ of times that the string appears in the string.\n    // >>> countAppearances(\"\
    Hello\", \"ll\")\n    // 2\n    def countAppearances(string : String, substring\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.charAt(i) == substring.charAt(0)) {\n            \
    \    result += 1\n                for (j <- 1 until substring.length) {\n    \
    \                if (string.charAt(i + j) != substring.charAt(j)) {\n        \
    \                break\n                    }\n                    result += 1\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return the number of times that the string appears\
    \ in the string.\n    // >>> countAppearances(\"Hello\", \"ll\")\n    // 2\n \
    \   def countAppearances2(string : String, substring : String) : Int = {\n   \
    \     var result = 0\n        for (i <- 0 until string.length) {\n           \
    \ if (string.charAt(i) == substring.charAt(0)) {\n                result += 1\n\
    \                for (j <- 1 until substring.length) {\n                    if\
    \ (string.charAt(i + j) != substring.charAt(j)) {\n                        break\n\
    \                    }\n                    result += 1\n                }\n \
    \           }\n        }\n        return result\n    }\n\n    // For a given string,\
    \ return the number of times that the string appears in the string.\n    // >>>\
    \ countAppearances(\"Hello\", \"ll\")\n    // 2\n    def countAppearances3(string\
    \ : String, substring : String) : Int = {\n        var result = 0\n        for\
    \ (i <- 0 until string.length) {\n            if (string.charAt(i) == substring.charAt(0))\
    \ {\n                result += 1\n                for (j <- 1 until substring.length)\
    \ {\n                    if (string.charAt(i + j) != substring.charAt(j))", " \
    \       var result = \"\"\n        for (i <- 0 until string.length) {\n      \
    \      var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n   \
    \             result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, replace all spaces with '%20'.\n    // >>> replaceSpaces(\"\
    Hello\")\n    // \"Hello\"\n    def replaceSpaces(string : String) : String =\
    \ {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n \
    \           var c = string.charAt(i)\n            if (c == ' ') {\n          \
    \      result += \"%20\"\n            } else {\n                result += c\n\
    \            }\n        }\n        return result\n    }\n\n    // For a given\
    \ string, return a string where all characters that are not in the alphabet are\
    \ removed.\n    // >>> removeExtraChars(\"Hello\")\n    // \"ello\"\n    def removeExtraChars(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (c >=\
    \ 'a' && c <= 'z') {\n                result += c\n            }\n        }\n\
    \        return result\n    }\n\n    // For a given string, return a string where\
    \ all characters that are not in the alphabet are removed.\n    // >>> removeExtraChars(\"\
    Hello\")\n    // \"ello\"\n    def removeExtraChars2(string : String) : String\
    \ = {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n\
    \                result += c\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where all characters that\
    \ are not in the alphabet are removed.\n    // >>> removeExtraChars(\"Hello\"\
    )\n    // \"ello\"\n    def removeExtraChars3(string : String) : String = {\n\
    \        var result = \"\"\n        for (i", "        var result = \"\"\n    \
    \    for (i <- 0 until string.length) {\n            var ch = string.charAt(i)\n\
    \            if (ch >= 'a' && ch <= 'z') {\n                result += ch.toUpperCase\n\
    \            } else {\n                result += ch.toLowerCase\n            }\n\
    \        }\n        result\n    }\n\n    // For a given string, return the number\
    \ of times the substring \"world\" occurs in the string.\n    // >>> count(\"\
    Hello world\")\n    // 1\n    def count(string : String) : Int = {\n        var\
    \ result = 0\n        for (i <- 0 until string.length) {\n            var ch =\
    \ string.charAt(i)\n            if (ch == \"world\") {\n                result\
    \ += 1\n            }\n        }\n        result\n    }\n\n    // For a given\
    \ string, return the number of times the substring \"world\" occurs in the string,\n\
    \    // ignoring case.\n    // >>> countIgnoreCase(\"Hello world\")\n    // 1\n\
    \    def countIgnoreCase(string : String) : Int = {\n        var result = 0\n\
    \        for (i <- 0 until string.length) {\n            var ch = string.charAt(i)\n\
    \            if (ch == \"world\") {\n                result += 1\n           \
    \ }\n        }\n        result\n    }\n\n    // For a given string, return the\
    \ number of times the substring \"world\" occurs in the string,\n    // ignoring\
    \ case, and ignoring the first letter of each word.\n    // >>> countIgnoreCase2(\"\
    Hello world\")\n    // 1\n    def countIgnoreCase2(string : String) : Int = {\n\
    \        var result = 0\n        for (i <- 0 until string.length) {\n        \
    \    var ch = string.charAt(i)\n            if (ch == \"world\") {\n         \
    \       result += 1\n            } else if (ch == \" \") {\n                result\
    \ = 0\n            }\n        }\n        result\n    }\n\n    // For a given string,\
    \ return the number of times the substring \"world\" occurs in the string,\n \
    \   // ignoring case, and ignoring the first letter of each word.\n    // >>>\
    \ countIgnoreCase3(\"Hello world\")\n    ", "        var result = \"\"\n     \
    \   for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ a string where adjacent characters that are the same have been\n    // merged\
    \ into a single character.\n    // >>> mergeAdjacent((\"abcba\"))\n    // (\"\
    abcb\")\n    def mergeAdjacent(string : String) : String = {\n        var result\
    \ = \"\"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (i < string.length - 1 && string.charAt(i + 1) == c) {\n     \
    \           result += c\n                i += 1\n            } else {\n      \
    \          result += c\n            }\n        }\n        return result\n    }\n\
    \n    // For a given string, return a string where adjacent characters that are\
    \ digits have been\n    // merged into a single digit.\n    // >>> mergeNumbers((\"\
    1a2b3c\"))\n    // (\"123\")\n    def mergeNumbers(string : String) : String =\
    \ {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n \
    \           var c = string.charAt(i)\n            if (c >= '0' && c <= '9') {\n\
    \                result += c\n            } else {\n                result +=\
    \ c\n            }\n        }\n        return result\n    }\n\n    // For a given\
    \ string, return a string where adjacent characters that are either a letter or\
    \ a\n    // digit have been merged into a single character.\n    // >>> mergeLettersNumbers((\"\
    1a2b3c\"))\n    // (\"abc123\")\n    def mergeLettersNumbers(string : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result += c\n            } else if (c >= '0' &&", "     \
    \   var result = \"\"\n        for (i <- 0 until string.length) {\n          \
    \  result += string.charAt(i).toUpperCase\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times that the substring\
    \ \"world\" occurs in the string.\n    // >>> count(\"Hello world\")\n    // 1\n\
    \    def count(string : String) : Int = {\n        var result = 0\n        for\
    \ (i <- 0 until string.length) {\n            if (string.substring(i, i + \"world\"\
    .length).equals(\"world\")) {\n                result += 1\n            }\n  \
    \      }\n        return result\n    }\n\n    // For a given string, return the\
    \ number of times that the substring \"world\" occurs in the string,\n    // ignoring\
    \ case.\n    // >>> countCase(\"hello world\")\n    // 1\n    def countCase(string\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.substring(i, i + \"world\".length).equalsIgnoreCase(\"\
    world\")) {\n                result += 1\n            }\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return the number of times that\
    \ the substring \"world\" occurs in the string,\n    // ignoring case, and ignoring\
    \ leading and trailing whitespace.\n    // >>> countCaseTrim(\"  hello world \
    \ \")\n    // 1\n    def countCaseTrim(string : String) : Int = {\n        var\
    \ result = 0\n        for (i <- 0 until string.length) {\n            if (string.substring(i,\
    \ i + \"world\".length).equalsIgnoreCase(\"world\")) {\n                result\
    \ += 1\n            }\n        }\n        return result\n    }\n\n    // For a\
    \ given string, return the number of times that the substring \"world\" occurs\
    \ in the string,\n    // ignoring case, ignoring leading and trailing whitespace,\
    \ and treating the string as a list of words.\n    // >>> countCaseTrimSplit(\"\
    \  hello world  \")\n    // 1\n    def countCaseTrimSplit(string : String) : Int\
    \ = {\n        var result = 0\n        for (i <- 0", "        var result = \"\"\
    \n        for (i <- 0 until string.length) {\n            result = result + string.charAt(i).toUpperCase\n\
    \        }\n        return result", "        var result = \"\"\n        for (i\
    \ <- 0 until string.length) {\n            var c = string.charAt(i)\n        \
    \    if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n  \
    \          } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times the substring \"world\" occurs in the string.\n    // >>>\
    \ count(\"Hello world\")\n    // 1\n    def count(string : String) : Int = {\n\
    \        var result = 0\n        for (i <- 0 until string.length) {\n        \
    \    var c = string.charAt(i)\n            if (c == \"world\") {\n           \
    \     result += 1\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return the number of times the substring \"world\"\
    \ occurs in the string,\n    // ignoring case.\n    // >>> countIgnoreCase(\"\
    hello world\")\n    // 1\n    def countIgnoreCase(string : String) : Int = {\n\
    \        var result = 0\n        for (i <- 0 until string.length) {\n        \
    \    var c = string.charAt(i)\n            if (c == \"world\") {\n           \
    \     result += 1\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return the number of times the substring \"world\"\
    \ occurs in the string,\n    // ignoring case, and ignoring the case of the letters\
    \ in the substring.\n    // >>> countIgnoreCaseAndIgnoreCase(\"hello world\")\n\
    \    // 1\n    def countIgnoreCaseAndIgnoreCase(string : String) : Int = {\n \
    \       var result = 0\n        for (i <- 0 until string.length) {\n         \
    \   var c = string.charAt(i)\n            if (c == \"world\") {\n            \
    \    result += 1\n            }\n        }\n        return result\n    }\n\n \
    \   // For a given string, return the number of times the substring \"world\"\
    \ occurs in the string,\n    // ignoring case, and ignoring the case of the letters\
    \ in the substring.\n    // >>> countIgnoreCaseAndIgnoreCase(\"hello world\")",
  "        var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     result += string.charAt(i).toUpperCase\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times that a substring\
    \ is repeated.\n    // >>> repeatCount(\"abcabcabc\", \"abc\")\n    // 3\n   \
    \ def repeatCount(string : String, substring : String) : Int = {\n        var\
    \ count = 0\n        for (i <- 0 until string.length) {\n            if (string.substring(i,\
    \ i + substring.length).equals(substring)) {\n                count += 1\n   \
    \         }\n        }\n        return count\n    }\n\n    // For a given string,\
    \ return the longest substring that is a palindrome.\n    // >>> longestPalindrome(\"\
    abccba\")\n    // \"abc\"\n    def longestPalindrome(string : String) : String\
    \ = {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            var j = i\n            while (j < string.length && string.charAt(j)\
    \ == string.charAt(i)) {\n                j += 1\n            }\n            if\
    \ (j - i > result.length) {\n                result = string.substring(i, j)\n\
    \            }\n        }\n        return result\n    }\n\n    // For a given\
    \ string, return the longest substring that is a palindrome.\n    // >>> longestPalindrome(\"\
    abccba\")\n    // \"abc\"\n    def longestPalindrome2(string : String) : String\
    \ = {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            var j = i\n            while (j < string.length && string.charAt(j)\
    \ == string.charAt(i)) {\n                j += 1\n            }\n            if\
    \ (j - i > result.length) {\n                result = string.substring(i, j)\n\
    \            }\n        }\n        return result\n    }\n\n    // For a given\
    \ string, return the longest substring that is a palindrome.\n    // >>> longestPalindrome(\"\
    abccba\")\n    // \"abc\"\n    def longest", "        var result = \"\"\n    \
    \    for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ a string where adjacent characters that are the same have been\n    // merged\
    \ into a single character.\n    // >>> mergeAdjacent((\"mississippi\"))\n    //\
    \ (\"miSsSiSiSiSpi\")\n    def mergeAdjacent(string : String) : String = {\n \
    \       var result = \"\"\n        for (i <- 0 until string.length) {\n      \
    \      var c = string.charAt(i)\n            if (i < string.length - 1 && string.charAt(i\
    \ + 1) == c) {\n                result += c\n                i += 1\n        \
    \    } else {\n                result += c\n            }\n        }\n       \
    \ return result\n    }\n\n    // For a given string, return a string where adjacent\
    \ characters that are digits have been\n    // merged into a single digit.\n \
    \   // >>> mergeNumbers((\"1-2 3\"))\n    // (\"1-2 3\")\n    def mergeNumbers(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (c >=\
    \ '0' && c <= '9') {\n                result += c\n            } else {\n    \
    \            if (i < string.length - 1 && string.charAt(i + 1) >= '0' && string.charAt(i\
    \ + 1) <= '9') {\n                    result += string.charAt(i)\n           \
    \         i += 1\n                } else {\n                    result += c\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return a string where adjacent characters that are\
    \ either a letter or a\n    // digit have been merged into a single character.\n\
    \    // >>> mergeLettersNumbers((\"1-2 3\"))\n    // (\"1-2 3\")\n    def mergeLettersNumbers(",
  "        var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n    \
    \            result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return the number of times the substring \"world\"\
    \ occurs in the string.\n    // >>> count(\"Hello world\")\n    // 1\n    def\
    \ count(string : String) : Int = {\n        var result = 0\n        for (i <-\
    \ 0 until string.length) {\n            var c = string.charAt(i)\n           \
    \ if (c == \"world\") {\n                result += 1\n            }\n        }\n\
    \        return result\n    }\n\n    // For a given string, return the number\
    \ of times the substring \"world\" occurs in the string,\n    // ignoring case.\n\
    \    // >>> countIgnoreCase(\"Hello world\")\n    // 1\n    def countIgnoreCase(string\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c == \"world\") {\n\
    \                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string,\n    // ignoring case, and ignoring the case\
    \ of the letters in the substring.\n    // >>> countIgnoreCaseAndIgnoreCase(\"\
    Hello world\")\n    // 1\n    def countIgnoreCaseAndIgnoreCase(string : String)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c == \"world\") {\n\
    \                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string,\n    // ignoring case, and ignoring the case\
    \ of the letters in the substring.\n    // >>> countIgnoreCaseAndIgnoreCase(\"\
    Hello world\")", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result += c.toUpperCase\n            } else {\n         \
    \       result += c.toLowerCase\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where adjacent characters\
    \ that are the same have been\n    // merged into a single character.\n    //\
    \ >>> mergeAdjacent((\"code\"))\n    // (\"cod\")\n    def mergeAdjacent(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (i <\
    \ string.length - 1 && string.charAt(i + 1) == c) {\n                result +=\
    \ c\n                i += 1\n            } else {\n                result += c\n\
    \            }\n        }\n        return result\n    }\n\n    // For a given\
    \ string, return a string where adjacent characters that are digits have been\n\
    \    // merged into a single digit.\n    // >>> mergeNumbers((\"code123\"))\n\
    \    // (\"code1\")\n    def mergeNumbers(string : String) : String = {\n    \
    \    var result = \"\"\n        for (i <- 0 until string.length) {\n         \
    \   var c = string.charAt(i)\n            if (i < string.length - 1 && string.charAt(i\
    \ + 1).isDigit()) {\n                result += c\n                i += 1\n   \
    \         } else {\n                result += c\n            }\n        }\n  \
    \      return result\n    }\n\n    // For a given string, return a string where\
    \ adjacent characters that are either a letter or a\n    // digit have been merged\
    \ into a single character.\n    // >>> mergeLettersOrDigits((\"code123\"))\n \
    \   // (\"code12\")\n    def mergeLettersOrDigits(string : String) : String =\
    \ {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n \
    \           var c = string.charAt(i)\n            if (i < string.length - 1 &&\
    \ (string.charAt(i + 1).is", "        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            result += string.charAt(i).toUpperCase\n     \
    \   }\n        return result\n    }\n\n    // For a given string, return a string\
    \ where all characters that are not in the alphabet are removed.\n    // >>> removeNonAlphabetChars(\"\
    Hello\")\n    // \"ello\"\n    def removeNonAlphabetChars(string : String) : String\
    \ = {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            if (string.charAt(i) in alphabet) {\n                result += string.charAt(i)\n\
    \            }\n        }\n        return result\n    }\n\n    // For a given\
    \ string, return a string where all adjacent characters that are the same are\
    \ removed.\n    // >>> removeAdjacentDuplicates(\"code\")\n    // \"cde\"\n  \
    \  def removeAdjacentDuplicates(string : String) : String = {\n        var result\
    \ = \"\"\n        for (i <- 0 until string.length) {\n            if (i == 0 or\
    \ string.charAt(i) != string.charAt(i - 1)) {\n                result += string.charAt(i)\n\
    \            }\n        }\n        return result\n    }\n\n    // For a given\
    \ string, return a string where all adjacent characters that are not the same\
    \ are removed.\n    // >>> removeAdjacentDifferences(\"code\")\n    // \"e\"\n\
    \    def removeAdjacentDifferences(string : String) : String = {\n        var\
    \ result = \"\"\n        for (i <- 0 until string.length) {\n            if (i\
    \ == 0 or string.charAt(i) != string.charAt(i - 1)) {\n                result\
    \ += string.charAt(i)\n            }\n        }\n        return result\n    }\n\
    \n    // For a given string, return a string where all adjacent characters that\
    \ are not the same are removed.\n    // >>> removeAdjacentDifferences(\"code\"\
    )\n    // \"e\"\n    def removeAdjacentDifferences2(string : String) : String\
    \ = {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            if (i == 0 or string.char", "        var result = \"\"\n        for\
    \ (i <- 0 until string.length) {\n            var c = string.charAt(i)\n     \
    \       if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times that a substring is repeated in the string.\n    // >>>\
    \ countOccurrences(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     result = result + string.charAt(i).toUpperCase\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return the number of times that\
    \ the substring \"world\" occurs in the string.\n    // >>> count(\"Hello world!\"\
    )\n    // 1\n    def count(string : String) : Int = {\n        var result = 0\n\
    \        for (i <- 0 until string.length) {\n            if (string.substring(i,\
    \ i + \"world\".length).equals(\"world\")) {\n                result += 1\n  \
    \          }\n        }\n        return result\n    }\n\n    // For a given string,\
    \ return the number of times that the substring \"world\" occurs in the string,\n\
    \    // ignoring case.\n    // >>> countCase(\"hello world!\")\n    // 1\n   \
    \ def countCase(string : String) : Int = {\n        var result = 0\n        for\
    \ (i <- 0 until string.length) {\n            if (string.substring(i, i + \"world\"\
    .length).equalsIgnoreCase(\"world\")) {\n                result += 1\n       \
    \     }\n        }\n        return result\n    }\n\n    // For a given string,\
    \ return the number of times that the substring \"world\" occurs in the string,\n\
    \    // ignoring case, and ignoring the case of the letters.\n    // >>> countCaseIgnoreCase(\"\
    hello world!\")\n    // 1\n    def countCaseIgnoreCase(string : String) : Int\
    \ = {\n        var result = 0\n        for (i <- 0 until string.length) {\n  \
    \          if (string.substring(i, i + \"world\".length).equalsIgnoreCase(\"world\"\
    )) {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times that the substring\
    \ \"world\" occurs in the string,\n    // ignoring case, and ignoring the case\
    \ of the letters.\n    // >>> countIgnoreCase(\"hello world!\")\n    // 1\n  \
    \  def countIgnoreCase(string : String) : Int = {\n        var result = 0\n  \
    \      for (i <- 0 until string.length) {\n", "        var result = \"\"\n   \
    \     for (i <- 0 until string.length) {\n            result += string.charAt(i).toUpperCase\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times it appears in the string.\n    // >>> countAppearances(\"\
    Hello\", \"ll\")\n    // 2\n    def countAppearances(string : String, substring\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.charAt(i) == substring.charAt(0)) {\n            \
    \    result += 1\n            }\n        }\n        return result\n    }\n\n \
    \   // For a given string, return the number of times it appears in the string.\n\
    \    // >>> countAppearances(\"Hello\", \"ll\")\n    // 2\n    def countAppearances2(string\
    \ : String, substring : String) : Int = {\n        var result = 0\n        for\
    \ (i <- 0 until string.length) {\n            if (string.charAt(i) == substring.charAt(0))\
    \ {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times it appears in\
    \ the string.\n    // >>> countAppearances(\"Hello\", \"ll\")\n    // 2\n    def\
    \ countAppearances3(string : String, substring : String) : Int = {\n        var\
    \ result = 0\n        for (i <- 0 until string.length) {\n            if (string.charAt(i)\
    \ == substring.charAt(0)) {\n                result += 1\n            }\n    \
    \    }\n        return result\n    }\n\n    // For a given string, return the\
    \ number of times it appears in the string.\n    // >>> countAppearances(\"Hello\"\
    , \"ll\")\n    // 2\n    def countAppearances4(string : String, substring : String)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.charAt(i) == substring.charAt(0)) {\n            \
    \    result += 1\n            }\n        }\n        return result\n    }\n\n \
    \   // For a given string, return the number of times it appears in the string",
  "        var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n    \
    \            result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        result\n    }\n\n    //\
    \ For a given string, return a string where all characters that are not in the\
    \ alphabet are removed.\n    // >>> removeNonAlphabet((\"Hello\"))\n    // (\"\
    ello\")\n    def removeNonAlphabet(string : String) : String = {\n        var\
    \ result = \"\"\n        for (i <- 0 until string.length) {\n            var c\
    \ = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n              \
    \  result += c\n            }\n        }\n        result\n    }\n\n    // For\
    \ a given string, return a string where all adjacent characters that are the same\
    \ are removed.\n    // >>> removeAdjacent((\"abcd\"))\n    // (\"cd\")\n    def\
    \ removeAdjacent(string : String) : String = {\n        var result = \"\"\n  \
    \      for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (i < string.length - 1) {\n                var c2 = string.charAt(i\
    \ + 1)\n                if (c == c2) {\n                    continue\n       \
    \         }\n            }\n            result += c\n        }\n        result\n\
    \    }\n\n    // For a given string, return a string where all characters that\
    \ are not in the alphabet are removed,\n    // and all adjacent characters that\
    \ are the same are removed.\n    // >>> removeNonAlphabetAndAdjacent((\"abcd\"\
    ))\n    // (\"cd\")\n    def removeNonAlphabetAndAdjacent(string : String) : String\
    \ = {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n\
    \            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n\
    \                result += c\n            }\n        }\n        result\n    }\n\
    \n    // For a given string, return a string where all characters that are", " \
    \       var result = \"\"\n        for (i <- 0 until string.length) {\n      \
    \      result += string.charAt(i).toUpperCase()\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times that a substring\
    \ is contained in the string.\n    // >>> countSubstring(\"Hello\", \"lo\")\n\
    \    // 2\n    def countSubstring(string : String, substring : String) : Int =\
    \ {\n        var result = 0\n        for (i <- 0 until string.length) {\n    \
    \        if (string.substring(i, i + substring.length).equals(substring)) {\n\
    \                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times that a substring\
    \ is contained in the string,\n    // ignoring case.\n    // >>> countSubstringIgnoreCase(\"\
    Hello\", \"lo\")\n    // 2\n    def countSubstringIgnoreCase(string : String,\
    \ substring : String) : Int = {\n        var result = 0\n        for (i <- 0 until\
    \ string.length) {\n            if (string.substring(i, i + substring.length).equalsIgnoreCase(substring))\
    \ {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times that a substring\
    \ is contained in the string,\n    // ignoring case, and ignoring the case of\
    \ the substring.\n    // >>> countSubstringIgnoreCase(\"Hello\", \"lo\")\n   \
    \ // 2\n    def countSubstringIgnoreCaseIgnoreCase(string : String, substring\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string.substring(i, i + substring.length).equalsIgnoreCase(substring))\
    \ {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times that a substring\
    \ is contained in the string,\n    // ignoring case, and ignoring the case of\
    \ the substring.\n    // >>> countSubstringIgnoreCase(\"Hello\", \"lo\")\n   \
    \ // 2\n    ", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            result += string.charAt(i).toUpperCase()\n        }\n       \
    \ return result\n    }\n\n    // For a given string, return the number of times\
    \ the substring \"world\" occurs in the string.\n    // >>> count(\"Hello world\"\
    )\n    // 1\n    def count(string : String) : Int = {\n        var result = 0\n\
    \        for (i <- 0 until string.length) {\n            if (string.substring(i,\
    \ i + \"world\".length).equals(\"world\")) {\n                result += 1\n  \
    \          }\n        }\n        return result\n    }\n\n    // For a given string,\
    \ return the number of times the substring \"world\" occurs in the string,\n \
    \   // ignoring case.\n    // >>> countIgnoreCase(\"Hello world\")\n    // 1\n\
    \    def countIgnoreCase(string : String) : Int = {\n        var result = 0\n\
    \        for (i <- 0 until string.length) {\n            if (string.substring(i,\
    \ i + \"world\".length).equalsIgnoreCase(\"world\")) {\n                result\
    \ += 1\n            }\n        }\n        return result\n    }\n\n    // For a\
    \ given string, return the number of times the substring \"world\" occurs in the\
    \ string,\n    // ignoring case, and ignoring the case of the letters in the substring\
    \ \"world\".\n    // >>> countIgnoreCaseAndIgnoreCase(\"Hello world\")\n    //\
    \ 1\n    def countIgnoreCaseAndIgnoreCase(string : String) : Int = {\n       \
    \ var result = 0\n        for (i <- 0 until string.length) {\n            if (string.substring(i,\
    \ i + \"world\".length).equalsIgnoreCase(\"world\")) {\n                result\
    \ += 1\n            }\n        }\n        return result\n    }\n\n    // For a\
    \ given string, return the number of times the substring \"world\" occurs in the\
    \ string,\n    // ignoring case, and ignoring the case of the letters in the substring\
    \ \"world\".\n    // >>> countIgnoreCaseAndIgnoreCase(\"Hello world\")\n    //\
    \ 1\n    def countIgnoreCaseAndIgnoreCase2(string : String) : Int", "        var\
    \ result = \"\"\n        for (i <- 0 until string.length) {\n            var c\
    \ = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n              \
    \  result += c.toUpperCase\n            } else {\n                result += c.toLowerCase\n\
    \            }\n        }\n        result", "        var result = \"\"\n     \
    \   for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, replace\
    \ all spaces with '%20'.\n    // >>> replaceSpaces((\"Hello World\"))\n    //\
    \ (\"Hello%20World\")\n    def replaceSpaces(string : String) : String = {\n \
    \       var result = \"\"\n        for (i <- 0 until string.length) {\n      \
    \      var c = string.charAt(i)\n            if (c == ' ') {\n               \
    \ result += \"%20\"\n            } else {\n                result += c\n     \
    \       }\n        }\n        return result\n    }\n\n    // For a given string,\
    \ return the number of times it appears in the string.\n    // >>> countAppearances((\"\
    hello\"), (\"hello\"))\n    // 2\n    def countAppearances(string : String, subString\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c == subString) {\n\
    \                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times it appears in\
    \ the string.\n    // >>> countAppearances((\"hello\"), (\"hello\"), (\"hello\"\
    ))\n    // 3\n    def countAppearances(string : String, subString : String, subString2\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c == subString || c\
    \ == subString2) {\n                result += 1\n            }\n        }\n  \
    \      return result\n    }\n\n    // For a given string, return the number of\
    \ times it appears in the string.\n    // >>> countAppearances((\"hello\"), (\"\
    hello\"), (\"hello\"), (\"hello\"))\n    // 6\n    def countAppearances(string\
    \ : String, subString : String, subString2 : String,", "        var result = \"\
    \"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ a string where all characters that are not in the alphabet are removed.\n  \
    \  // >>> removeNonAlphabet((\"Hello\"))\n    // (\"e\")\n    def removeNonAlphabet(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (c >=\
    \ 'a' && c <= 'z') {\n                result += c\n            }\n        }\n\
    \        return result\n    }\n\n    // For a given string, return a string where\
    \ all adjacent characters that are the same are removed.\n    // >>> removeAdjacent((\"\
    code\"))\n    // (\"co\")\n    def removeAdjacent(string : String) : String =\
    \ {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n \
    \           var c = string.charAt(i)\n            if (i < string.length - 1 &&\
    \ string.charAt(i + 1) == c) {\n                continue\n            }\n    \
    \        result += c\n        }\n        return result\n    }\n\n    // For a\
    \ given string, return a string where all repeating characters are removed.\n\
    \    // >>> removeRepeating((\"GeeksforGeeks\"))\n    // (\"GE\")\n    def removeRepeating(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (i <\
    \ string.length - 1 && string.charAt(i + 1) == c) {\n                continue\n\
    \            }\n            result += c\n        }\n        return result\n  \
    \  }\n\n    // For a given string, return a string where all repeating characters\
    \ are removed.\n    // >>> removeRepeating((\"GeeksforGeeks\"))\n    // (\"GE\"\
    )\n    def remove", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result += c.toUpperCase\n            } else {\n         \
    \       result += c.toLowerCase\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return a string where adjacent characters\
    \ that are the same have been\n    // merged into a single character.\n    //\
    \ >>> mergeAdjacent((\"mississippi\"))\n    // (\"misisipi\")\n    def mergeAdjacent(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (i <\
    \ string.length - 1 && string.charAt(i + 1) == c) {\n                result +=\
    \ c\n                i += 1\n            } else {\n                result += c\n\
    \            }\n        }\n        return result\n    }\n\n    // For a given\
    \ string, return a string where adjacent characters that are digits have been\n\
    \    // merged into a single digit.\n    // >>> mergeNumbers((\"1-2 3\"))\n  \
    \  // (\"12 3\")\n    def mergeNumbers(string : String) : String = {\n       \
    \ var result = \"\"\n        for (i <- 0 until string.length) {\n            var\
    \ c = string.charAt(i)\n            if (i < string.length - 1 && Character.isDigit(string.charAt(i\
    \ + 1))) {\n                result += c\n                i += 1\n            }\
    \ else {\n                result += c\n            }\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return a string where adjacent characters\
    \ that are either a letter or a\n    // digit have been merged into a single character.\n\
    \    // >>> mergeLettersNumbers((\"1-2 3\"))\n    // (\"123\")\n    def mergeLettersNumbers(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            var c = string.charAt(i)\n            if (i <\
    \ string.length - 1 && (Character.isLetter", "        var result = \"\"\n    \
    \    for (i <- 0 until string.length) {\n            result = result + string.charAt(i).toUpperCase()\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times the substring \"world\" occurs in the string.\n    // >>>\
    \ count(\"Hello world\")\n    // 1\n    def count(string : String) : Int = {\n\
    \        var result = 0\n        for (i <- 0 until string.length) {\n        \
    \    if (string.substring(i, i + \"world\".length).equals(\"world\")) {\n    \
    \            result += 1\n            }\n        }\n        return result\n  \
    \  }\n\n    // For a given string, return the number of times the substring \"\
    world\" occurs in the string,\n    // ignoring case.\n    // >>> countIgnoreCase(\"\
    hello world\")\n    // 1\n    def countIgnoreCase(string : String) : Int = {\n\
    \        var result = 0\n        for (i <- 0 until string.length) {\n        \
    \    if (string.substring(i, i + \"world\".length).equalsIgnoreCase(\"world\"\
    )) {\n                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string,\n    // ignoring case, and ignoring the case\
    \ of the letters.\n    // >>> countIgnoreCaseAndCase(\"hello world\")\n    //\
    \ 1\n    def countIgnoreCaseAndCase(string : String) : Int = {\n        var result\
    \ = 0\n        for (i <- 0 until string.length) {\n            if (string.substring(i,\
    \ i + \"world\".length).equalsIgnoreCaseAndCase(\"world\")) {\n              \
    \  result += 1\n            }\n        }\n        return result\n    }\n\n   \
    \ // For a given string, return the number of times the substring \"world\" occurs\
    \ in the string,\n    // ignoring case, and ignoring the case of the letters,\
    \ and ignoring the case of the letters.\n    // >>> countIgnoreCaseAndCase(\"\
    hello world\")\n    // 1\n    def countIgnoreCaseAndCase2(string : String) : Int\
    \ = {\n        var result = 0", "        var result = \"\"\n        for (i <-\
    \ 0 until string.length) {\n            var c = string.charAt(i)\n           \
    \ if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n     \
    \       } else {\n                result += c.toLowerCase\n            }\n   \
    \     }\n        return result\n    }\n\n    // For a given string, return a string\
    \ where the first and last characters are swapped.\n    // >>> swapFirstLast((\"\
    code\"))\n    // (\"eodc\")\n    def swapFirstLast(string : String) : String =\
    \ {\n        var result = \"\"\n        for (i <- 0 until string.length) {\n \
    \           var c = string.charAt(i)\n            result += c\n            if\
    \ (i == 0 || i == string.length - 1) {\n                result += string.charAt(string.length\
    \ - 1 - i)\n            }\n        }\n        return result\n    }\n\n    // For\
    \ a given string, return a string where every other character is\n    // swapped\
    \ with the next one, starting with the first.\n    // >>> swapPairs((\"code\"\
    ))\n    // (\"oec\")\n    def swapPairs(string : String) : String = {\n      \
    \  var result = \"\"\n        for (i <- 0 until string.length) {\n           \
    \ var c = string.charAt(i)\n            result += c\n            if (i % 2 ==\
    \ 1) {\n                result += string.charAt(string.length - 1 - i)\n     \
    \       }\n        }\n        return result\n    }\n\n    // For a given string,\
    \ return a string where every other character is\n    // swapped with the previous\
    \ one, starting with the last.\n    // >>> swapPairsReverse((\"code\"))\n    //\
    \ (\"cod\")\n    def swapPairsReverse(string : String) : String = {\n        var\
    \ result = \"\"\n        for (i <- 0 until string.length) {\n            var c\
    \ = string.charAt(i)\n            result += c\n            if (i % 2 == 1) {\n\
    \                result += string.charAt(i - 1)\n            }\n        }\n  \
    \      return result\n    }\n\n    // For a given string, return a string", " \
    \       var result = \"\"\n        for (i <- 0 until string.length) {\n      \
    \      var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n   \
    \             result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return the number of times a substring is repeated.\n\
    \    // >>> repeatCount(\"abcabcabc\", \"abc\")\n    // 2\n    def repeatCount(string\
    \ : String, substring : String) : Int = {\n        var result = 0\n        for\
    \ (i <- 0 until string.length) {\n            var c = string.charAt(i)\n     \
    \       if (c == substring) {\n                result += 1\n            }\n  \
    \      }\n        return result\n    }\n\n    // For a given string, return the\
    \ number of times a substring is repeated in the reverse order.\n    // >>> repeatCountReverse(\"\
    abcabcabc\", \"abc\")\n    // 2\n    def repeatCountReverse(string : String, substring\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(string.length - i - 1)\n            if\
    \ (c == substring) {\n                result += 1\n            }\n        }\n\
    \        return result\n    }\n\n    // For a given string, return the number\
    \ of times a substring is repeated in the order of first occurrence.\n    // >>>\
    \ repeatCountFirst(\"abcabcabc\", \"abc\")\n    // 2\n    def repeatCountFirst(string\
    \ : String, substring : String) : Int = {\n        var result = 0\n        for\
    \ (i <- 0 until string.length) {\n            var c = string.charAt(i)\n     \
    \       if (c == substring) {\n                result += 1\n                break\n\
    \            }\n        }\n        return result\n    }\n\n    // For a given\
    \ string, return the number of times a substring is repeated in the order of last\
    \ occurrence.\n    // >>> repeatCountLast(\"abcabcabc\", \"abc\")\n    // 2\n\
    \    def repeatCountLast(string : String, substring", "        var result = \"\
    \"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        return result\n    }\n\n    // For a given string, return\
    \ the number of times the substring \"world\" occurs in the string.\n    // >>>\
    \ count(\"Hello world\")\n    // 1\n    def count(string : String) : Int = {\n\
    \        var result = 0\n        for (i <- 0 until string.length) {\n        \
    \    var c = string.charAt(i)\n            if (c == \"world\") {\n           \
    \     result += 1\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return the number of times the substring \"world\"\
    \ occurs in the string,\n    // ignoring case.\n    // >>> countIgnoreCase(\"\
    Hello world\")\n    // 1\n    def countIgnoreCase(string : String) : Int = {\n\
    \        var result = 0\n        for (i <- 0 until string.length) {\n        \
    \    var c = string.charAt(i)\n            if (c == \"world\") {\n           \
    \     result += 1\n            }\n        }\n        return result\n    }\n\n\
    \    // For a given string, return the number of times the substring \"world\"\
    \ occurs in the string,\n    // ignoring case, and ignoring the case of the letters.\n\
    \    // >>> countIgnoreCaseAndIgnoreCase(\"Hello world\")\n    // 1\n    def countIgnoreCaseAndIgnoreCase(string\
    \ : String) : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c == \"world\") {\n\
    \                result += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // For a given string, return the number of times the substring\
    \ \"world\" occurs in the string,\n    // ignoring case, and ignoring the case\
    \ of the letters.\n    // >>> countIgnoreCaseAndIgnoreCase(\"Hello world\")\n\
    \    // 1\n    def count", "        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            result += string.charAt(i).toUpperCase\n     \
    \   }\n        return result\n    }\n\n    // For a given string, return a string\
    \ where adjacent characters that are the same have been\n    // merged into a\
    \ single character.\n    // >>> mergeAdjacent((\"mississippi\"))\n    // (\"miSsSiSiSiSp\"\
    )\n    def mergeAdjacent(string : String) : String = {\n        var result = \"\
    \"\n        for (i <- 0 until string.length) {\n            if (i + 1 < string.length\
    \ && string.charAt(i) == string.charAt(i + 1)) {\n                result += string.charAt(i)\n\
    \            } else {\n                result += string.charAt(i)\n          \
    \  }\n        }\n        return result\n    }\n\n    // For a given string, return\
    \ a string where adjacent characters that are digits have been\n    // merged\
    \ into a single digit character.\n    // >>> mergeNumbers((\"1 2 3\"))\n    //\
    \ (\"1 2 3\")\n    def mergeNumbers(string : String) : String = {\n        var\
    \ result = \"\"\n        for (i <- 0 until string.length) {\n            if (i\
    \ + 1 < string.length && string.charAt(i) == string.charAt(i + 1) && Character.isDigit(string.charAt(i)))\
    \ {\n                result += string.charAt(i)\n            } else {\n      \
    \          result += string.charAt(i)\n            }\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return a string where adjacent characters\
    \ that are either a letter or a\n    // digit have been merged into a single character.\n\
    \    // >>> mergeLettersNumbers((\"1a2b3c\"))\n    // (\"1a2b3c\")\n    def mergeLettersNumbers(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            if (i + 1 < string.length && (Character.isLetter(string.charAt(i))\
    \ || Character.isDigit(string.charAt(i)))) {\n                result += string.char",
  "        var result = \"\"\n        for (i <- 0 until string.length) {\n       \
    \     var c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n    \
    \            result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        result", "        var result\
    \ = \"\"\n        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += c.toUpperCase\n\
    \            } else {\n                result += c.toLowerCase\n            }\n\
    \        }\n        result\n    }\n\n    // For a given string, return the number\
    \ of times the substring \"world\" occurs in the string.\n    // >>> count(\"\
    Hello world\")\n    // 1\n    def count(string : String) : Int = {\n        var\
    \ result = 0\n        for (i <- 0 until string.length) {\n            var c =\
    \ string.charAt(i)\n            if (c == \"world\") {\n                result\
    \ += 1\n            }\n        }\n        result\n    }\n\n    // For a given\
    \ string, return the number of times the substring \"world\" occurs in the string.\n\
    \    // >>> count(\"Hello world\")\n    // 1\n    def count2(string : String)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until string.length)\
    \ {\n            var c = string.charAt(i)\n            if (c == \"world\") {\n\
    \                result += 1\n            }\n        }\n        result\n    }\n\
    \n    // For a given string, return the number of times the substring \"world\"\
    \ occurs in the string.\n    // >>> count(\"Hello world\")\n    // 1\n    def\
    \ count3(string : String) : Int = {\n        var result = 0\n        for (i <-\
    \ 0 until string.length) {\n            var c = string.charAt(i)\n           \
    \ if (c == \"world\") {\n                result += 1\n            }\n        }\n\
    \        result\n    }\n\n    // For a given string, return the number of times\
    \ the substring \"world\" occurs in the string.\n    // >>> count(\"Hello world\"\
    )\n    // 1\n    def count4(string : String) : Int = {\n        var result = 0\n\
    \        for (i <- 0 until string.length) {\n            var c = string.charAt(i)\n\
    \            if (c == \"world\") {\n                result += 1\n            }\n\
    \        }\n", "        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            result += string.charAt(i).toUpperCase\n        }\n        return\
    \ result\n    }\n\n    // For a given string, return a string where adjacent characters\
    \ that are the same have been\n    // separated by a space.\n    // >>> separateAdjacentLetters(\"\
    abcd\")\n    // \"a b c d\"\n    def separateAdjacentLetters(string : String)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            if (i + 1 < string.length && string.charAt(i) == string.charAt(i\
    \ + 1)) {\n                result += string.charAt(i) + \" \"\n            } else\
    \ {\n                result += string.charAt(i)\n            }\n        }\n  \
    \      return result\n    }\n\n    // For a given string, return a string where\
    \ adjacent characters that are not the same have been\n    // separated by a space.\n\
    \    // >>> separateAdjacentLetters(\"abcd\")\n    // \"a b c d\"\n    def separateAdjacentLetters2(string\
    \ : String) : String = {\n        var result = \"\"\n        for (i <- 0 until\
    \ string.length) {\n            if (i + 1 < string.length && string.charAt(i)\
    \ != string.charAt(i + 1)) {\n                result += string.charAt(i) + \"\
    \ \"\n            } else {\n                result += string.charAt(i)\n     \
    \       }\n        }\n        return result\n    }\n\n    // For a given string,\
    \ return a string where all characters that are not in the given set\n    // have\
    \ been removed.\n    // >>> removeChars(\"aabbccddeeff\", \"abc\")\n    // \"\
    eee\"\n    def removeChars(string : String, chars : String) : String = {\n   \
    \     var result = \"\"\n        for (i <- 0 until string.length) {\n        \
    \    if (!chars.contains(string.charAt(i))) {\n                result += string.charAt(i)\n\
    \            }\n        }\n        return result\n    }\n\n    // For a given\
    \ string, return a string where"]
stop_tokens:
- "\n    }\n"
