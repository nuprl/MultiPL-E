{
  "name": "HumanEval_134_check_if_last_char_is_a_letter",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) %>= 97 && txt.charAt(txt.length - 1) %<= 122)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie pi\"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie pi e\"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"\"))\n    // (false)\n    def checkIfStringContainsAtLeastOneWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length > 0\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie pi\"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie pi e\"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"\"))\n    // (false)\n    def checkIfStringContainsAtLeastOneWord2(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \"\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_jejyvqt.scala:64:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_jejyvqt.scala:21:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) %>= \u001b[31m97\u001b[0m && txt.charAt(txt.length - \u001b[31m1\u001b[0m) %<= \u001b[31m122\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               value %>= is not a member of Char - did you mean Char.>=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_jejyvqt.scala:21:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) %>= \u001b[31m97\u001b[0m && txt.charAt(txt.length - \u001b[31m1\u001b[0m) %<= \u001b[31m122\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         value && is not a member of Int\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_jejyvqt.scala:63:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.split(\u001b[31m\" \"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    Array[String]\n\u001b[31m   |\u001b[0m               Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"mam\")\n    // (false)\n    // >>> isPermutation(\"madam\", \"mam madam\")\n    // (true\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293288,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjrlji0xn.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjrlji0xn.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjrlji0xn.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjrlji0xn.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjrlji0xn.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjrlji0xn.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return !isLetter(txt[txt.length - 1]) && !isWord(txt[0:txt.length - 1])\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return isLetter(txt[0]) && isWord(txt[1:txt.length])\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am\")\n    // (false)\n    // >>> isPalindrome(\"madam am \")\n    // (true)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dma\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"mad\")\n    // (false)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n    def isPermutation(txt1 : String, t\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293289,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5fap65bt.scala:19:62 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isWord(txt[\u001b[31m0\u001b[0m:txt.length - \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             ']' expected, but ':' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5fap65bt.scala:36:47 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mreturn\u001b[0m isLetter(txt[\u001b[31m0\u001b[0m]) && isWord(txt[\u001b[31m1\u001b[0m:txt.length])\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             ']' expected, but ':' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5fap65bt.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ':' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5fap65bt.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5fap65bt.scala:19:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isWord(txt[\u001b[31m0\u001b[0m:txt.length - \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5fap65bt.scala:19:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isWord(txt[\u001b[31m0\u001b[0m:txt.length - \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type -\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found E",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z') && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> is\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293288,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbnaogg1d.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbnaogg1d.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbnaogg1d.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbnaogg1d.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbnaogg1d.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbnaogg1d.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1).isLetter() && !isPartOfWord(txt))\n    }\n\n    // Create a function that returns true if a given string is\n    // a part of a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPartOfWord(\"apple\")\n    // (true)\n    // >>> isPartOfWord(\"apple pie\")\n    // (true)\n    // >>> isPartOfWord(\"apple pie \")\n    // (true)\n    // >>> isPartOfWord(\"\")\n    // (false)\n    def isPartOfWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if a given string is\n    // a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"A man, a plan, a canal: Panama\")\n    // (true)\n    // >>> isPalindrome(\"race a car\")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if a given string is\n    // a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"A man, a plan, a canal: Panama\", \"canal,man,plan,a\")\n    // (true)\n    // >>> isPermutation(\"A man, a plan, a canal: Panama\", \"canal,plan,man,a\")\n    // (false)\n    // >>> isPermutation(\"A man, a plan, a canal: Panama\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293289,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfawrhcsf.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpfawrhcsf.scala:21:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m).isLetter() && !isPartOfWord(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              \u001b[33mmethod\u001b[0m \u001b[35misLetter\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mRichChar\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfawrhcsf.scala:57:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfawrhcsf.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfawrhcsf.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfawrhcsf.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) return false\n        if (txt.length() == 1) return true\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp0slu1fxi.scala:42:10 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mif\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0slu1fxi.scala:20:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0slu1fxi.scala:21:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0slu1fxi.scala:22:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0slu1fxi.scala:23:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0slu1fxi.scala:24:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1 && txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"dama \")\n    // (false)\n    // >>> isPermutation(\"madam\", \"dama madam\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293289,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfsgjljzp.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfsgjljzp.scala:59:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.split(\u001b[31m\" \"\u001b[0m).length == \u001b[31m1\u001b[0m && txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfsgjljzp.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfsgjljzp.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfsgjljzp.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfsgjljzp.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") return false\n        if (txt.length() == 1) return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0vajqg_s.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0vajqg_s.scala:20:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0vajqg_s.scala:21:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0vajqg_s.scala:22:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0vajqg_s.scala:23:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0vajqg_s.scala:24:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String canno",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !isLetter(txt[txt.length - 1]) && !isLetter(txt[txt.length - 2])\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie\"))\n    // (false)\n    def checkIfStringContainsWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length > 1\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie\"))\n    // (false)\n    def checkIfStringContainsWord2(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length > 1\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293288,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphcv8gdgf.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphcv8gdgf.scala:21:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m2\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphcv8gdgf.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m2\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type -\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphcv8gdgf.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphcv8gdgf.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphcv8gdgf.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isInWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie pie pie pie\"))\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293288,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpe08afcgf.scala:71:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe08afcgf.scala:21:90 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.charAt(txt.length - \u001b[31m1\u001b[0m) >= \u001b[31m'a'\u001b[0m && txt.charAt(txt.length - \u001b[31m1\u001b[0m) <= \u001b[31m'z'\u001b[0m && !isInWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Not found: isInWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe08afcgf.scala:59:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe08afcgf.scala:60:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe08afcgf.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe08afcgf.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    asser",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1).isLetter() && txt.contains(\" \"))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    \n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293289,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptprmobdt.scala:75:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmptprmobdt.scala:21:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m).isLetter() && txt.contains(\u001b[31m\" \"\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              \u001b[33mmethod\u001b[0m \u001b[35misLetter\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mRichChar\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptprmobdt.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptprmobdt.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptprmobdt.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptprmobdt.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtru",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPermutation(\"\",\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293288,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpe6ljfjfh.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6ljfjfh.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6ljfjfh.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6ljfjfh.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6ljfjfh.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6ljfjfh.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string is\n    // a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string is\n    // a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string is\n    // a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"abcd\", \"cdab\")\n    // (true)\n    // >>> isPermutation(\"abcd\", \"abcd\")\n    // (true)\n    // >>> isPermutation(\"abcd\", \"abdc\")\n    // (false)\n    // >>> isPerm\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293288,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxvkoxma1.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxvkoxma1.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxvkoxma1.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxvkoxma1.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxvkoxma1.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxvkoxma1.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") return false\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt == \"\") return false\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt == \"\") return false\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string is a\n    // permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"mam\")\n    // (false)\n    // >>> isPermutation(\"madam\", \"\")\n    // (false)\n    def isPermutation(txt1 : String, txt2 : String) : Boolean = {\n        \n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293290,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwlwljso2.scala:53:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwlwljso2.scala:66:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36misPermutation\u001b[0m(\u001b[36mtxt1\u001b[0m : \u001b[35mString\u001b[0m, \u001b[36mtxt2\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mBoolean\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Found:    Unit\n\u001b[31m   |\u001b[0m                                                       Required: Boolean\n\u001b[31m67 |\u001b[0m        \n\u001b[31m68 |\u001b[0m    }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) < 'a' || txt.charAt(txt.length() - 1) > 'z') && !(txt.split(\" \").find(x => x.length() > 0) != -1)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsAPalindrome((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsAPalindrome((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAPalindrome((\"apple pie apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsAPalindrome((\"apple pie apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAPalindrome((\"\"))\n    // (false)\n    def checkIfStringContainsAPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").find(x => checkIfLastCharIsALetter(x)) != -1\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsAPalindrome2((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsAPalindrome2((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAPalindrome2((\"apple pie apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsAPalindrome2((\"apple pie apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsAPalindrome2((\"\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzyfoy661.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzyfoy661.scala:21:96 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) < \u001b[31m'a'\u001b[0m || txt.charAt(txt.length() - \u001b[31m1\u001b[0m) > \u001b[31m'z'\u001b[0m) && !(txt.split(\u001b[31m\" \"\u001b[0m).find(\u001b[36mx\u001b[0m => x.length() > \u001b[31m0\u001b[0m) != -\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m Values of types Option[String] and Int cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzyfoy661.scala:43:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.split(\u001b[31m\" \"\u001b[0m).find(\u001b[36mx\u001b[0m => checkIfLastCharIsALetter(x)) != -\u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m Values of types Option[String] and Int cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzyfoy661.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzyfoy661.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzyfoy661.scala:64:11 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) < 'a' || txt.charAt(txt.length - 1) > 'z') && !(txt.split(\" \").find(s => s.length > 0) != -1)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with \"pi\" and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPi((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsPi((\"apple pi e\"))\n    // (true)\n    // >>> checkIfStringContainsPi((\"apple pi e \"))\n    // (false)\n    // >>> checkIfStringContainsPi((\"\"))\n    // (false)\n    def checkIfStringContainsPi(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").find(s => s.startsWith(\"pi\")) != -1\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with \"pie\" and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPie((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsPie((\"apple pi e\"))\n    // (false)\n    // >>> checkIfStringContainsPie((\"apple pi e \"))\n    // (true)\n    // >>> checkIfStringContainsPie((\"\"))\n    // (false)\n    def checkIfStringContainsPie(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").find(s => s.startsWith(\"pie\")) != -1\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprp1dn_iw.scala:80:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmprp1dn_iw.scala:21:92 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) < \u001b[31m'a'\u001b[0m || txt.charAt(txt.length - \u001b[31m1\u001b[0m) > \u001b[31m'z'\u001b[0m) && !(txt.split(\u001b[31m\" \"\u001b[0m).find(\u001b[36ms\u001b[0m => s.length > \u001b[31m0\u001b[0m) != -\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m Values of types Option[String] and Int cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmprp1dn_iw.scala:41:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.split(\u001b[31m\" \"\u001b[0m).find(\u001b[36ms\u001b[0m => s.startsWith(\u001b[31m\"pi\"\u001b[0m)) != -\u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m Values of types Option[String] and Int cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmprp1dn_iw.scala:61:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.split(\u001b[31m\" \"\u001b[0m).find(\u001b[36ms\u001b[0m => s.startsWith(\u001b[31m\"pie\"\u001b[0m)) != -\u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m Values of types Option[String] and Int cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprp1dn_iw.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprp1dn_iw.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) < \"a\" || txt.charAt(txt.length - 1) > \"z\") &&\n            !(txt.split(\" \").exists(s => s.length > 0 && s.charAt(s.length - 1) < \"a\" || s.charAt(s.length - 1) > \"z\"))\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293290,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpt44zhag4.scala:21:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) < \u001b[31m\"a\"\u001b[0m || txt.charAt(txt.length - \u001b[31m1\u001b[0m) > \u001b[31m\"z\"\u001b[0m) &&\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m<\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mChar\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double): Boolean\n\u001b[31m   |\u001b[0m (x: Float): Boolean\n\u001b[31m   |\u001b[0m (x: Long): Boolean\n\u001b[31m   |\u001b[0m (x: Int): Boolean\n\u001b[31m   |\u001b[0m (x: Char): Boolean\n\u001b[31m   |\u001b[0m (x: Short): Boolean\n\u001b[31m   |\u001b[0m (x: Byte): Boolean\n\u001b[31m   |\u001b[0mmatch arguments ((\u001b[32m\"a\"\u001b[0m : String))\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z'\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"abcd\", \"cdab\")\n    // (true)\n    // >>> isPermutation(\"abcd\", \"abcd\")\n    // (true)\n    // >>> isPermutation(\"abcd\", \"abdc\")\n    // (false)\n    // >>> isPermutation(\"ab\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293289,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfgg9ppuk.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfgg9ppuk.scala:53:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfgg9ppuk.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfgg9ppuk.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfgg9ppuk.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfgg9ppuk.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) return false\n        if (txt.length() == 1) return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293289,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpgk0kbh7l.scala:42:10 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mif\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdzej_60n.scala:25)\n\tat Problem.main(tmpdzej_60n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !isLetter(txt[txt.length - 1]) && !isLetter(txt[txt.length - 2])\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"a bb ccc bb\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a bb ccc bb a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        var words = txt.split(\" \")\n        for (word in words) {\n            if (isPalindrome(word)) {\n                return true\n            }\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome2(\"a bb ccc bb\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome2(\"a bb ccc bb a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome2(\"\")\n    // (false)\n    def checkIfStringContainsPalindrome2(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        var words = txt.split(\" \")\n        for (word in words) {\n            if (isPalindrome2(word)) {\n                return true\n            }\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplka32sl4.scala:39:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mfor\u001b[0m (word in words) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplka32sl4.scala:62:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m        \u001b[33mfor\u001b[0m (word in words) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplka32sl4.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplka32sl4.scala:21:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m2\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplka32sl4.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m2\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type -\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplka32sl4.scala:43:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) < 65 || txt.charAt(txt.length() - 1) > 90) && !(txt.split(\" \").length > 1)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        var words = txt.split(\" \")\n        for (var i = 0; i < words.length; i++) {\n            if (words[i].equals(words[words.length - 1 - i])) {\n                return true\n            }\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    //\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp8tql89o4.scala:48:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < words.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8tql89o4.scala:48:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < words.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp8tql89o4.scala:48:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < words.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8tql89o4.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8tql89o4.scala:48:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < words.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPermutation(\"\",\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293288,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpe6ljfjfh.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6ljfjfh.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6ljfjfh.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6ljfjfh.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6ljfjfh.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6ljfjfh.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) < 'a' || txt.charAt(txt.length - 1) > 'z') && !(txt.split(\" \").length > 1)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"apple pie\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie pie pie\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return checkIfLastCharIsALetter(txt) && checkIfStringContainsPalindrome(txt.substring(1, txt.length - 1))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie pie pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie pie pie pie pie\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie pie pie pie pie pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie pie pie pie pie pie pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie pie pie pie pie pie\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293288,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyu74ubvl.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyu74ubvl.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyu74ubvl.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyu74ubvl.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyu74ubvl.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyu74ubvl.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"Pumpkin pie \"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !isLetter(txt[txt.length - 1]) && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pi e\")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return isLetter(txt[0]) && !isLetter(txt[txt.length - 1])\n    }\n\n    // Create a function that returns true if the given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pi e\")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isLetter(c : String) : Boolean = {\n        return c.isLetter()\n    }\n\n    // Create a function that returns true if the given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pi e\")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return isLetter(txt[0]) && !isLetter(txt[txt.length - 1])\n    }\n\n    // Create a function that returns\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp20jmzfjv.scala:93:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m93 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp20jmzfjv.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type -\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp20jmzfjv.scala:40:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mreturn\u001b[0m isLetter(txt[\u001b[31m0\u001b[0m]) && !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp20jmzfjv.scala:40:60 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mreturn\u001b[0m isLetter(txt[\u001b[31m0\u001b[0m]) && !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: type -\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp20jmzfjv.scala:56:17 ------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m        \u001b[33mreturn\u001b[0m c.isLetter()\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               value isLetter is not a member of String\n\u001b[31m\u001b[31m-- Error: /tmp/tmp20jmzfjv.scala:75:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m        \u001b[33mreturn\u001b[0m isLetter(txt[\u001b[31m0\u001b[0m]) && !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !isLetter(txt[txt.length() - 1]) && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return isLetter(txt[0]) && !isLetter(txt[txt.length() - 1])\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (true)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return isPalindrome(txt.substring(0, txt.length() / 2)) &&\n            isPalindrome(txt.substring(txt.length() / 2, txt.length()))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"apple\", \"papel\")\n    // (true)\n    // >>> isPermutation(\"apple\", \"papel \")\n    // (\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_svekpxu.scala:21:39 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length() - \u001b[31m1\u001b[0m]) && !isWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       ']' expected, but '(' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_svekpxu.scala:40:59 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mreturn\u001b[0m isLetter(txt[\u001b[31m0\u001b[0m]) && !isLetter(txt[txt.length() - \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             ']' expected, but '(' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_svekpxu.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_svekpxu.scala:21:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length() - \u001b[31m1\u001b[0m]) && !isWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_svekpxu.scala:40:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mreturn\u001b[0m isLetter(txt[\u001b[31m0\u001b[0m]) && !isLetter(txt[txt.length() - \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp_svekpxu.scala:40:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mreturn\u001b[0m isLetter(txt[\u001b[31m0\u001b[0m]) && !isLetter(txt[txt.length() - \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take type parameters\n\u001b[31m\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1).isLetter() && txt.lastIndexOf(\" \") == -1)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with the given prefix\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPrefix((\"apple pie\"), (\"apple\"))\n    // (true)\n    // >>> checkIfStringContainsPrefix((\"apple pie\"), (\"pie\"))\n    // (true)\n    // >>> checkIfStringContainsPrefix((\"apple pie\"), (\"pi\"))\n    // (false)\n    // >>> checkIfStringContainsPrefix((\"apple pie\"), (\"\"))\n    // (false)\n    def checkIfStringContainsPrefix(txt : String, prefix : String) : Boolean = {\n        if (txt.length == 0 || prefix.length == 0) {\n            return false\n        }\n        return txt.toLowerCase().contains(prefix.toLowerCase()) && txt.lastIndexOf(\" \") == -1\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with the given prefix\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPrefix((\"apple pie\"), (\"apple\"))\n    // (true)\n    // >>> checkIfStringContainsPrefix((\"apple pie\"), (\"pie\"))\n    // (true)\n    // >>> checkIfStringContainsPrefix((\"apple pie\"), (\"pi\"))\n    // (false)\n    // >>> checkIfStringContainsPrefix((\"apple pie\"), (\"\"))\n    // (false)\n    def checkIfStringContainsPrefix2(txt : String, prefix : String) : Boolean = {\n        if (txt.length == 0 || prefix.length == 0) {\n            return false\n        }\n        return txt.toLowerCase().contains(prefix.toLowerCase())\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpn26cjns_.scala:21:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m).isLetter() && txt.lastIndexOf(\u001b[31m\" \"\u001b[0m) == -\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              \u001b[33mmethod\u001b[0m \u001b[35misLetter\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mRichChar\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"apple\", \"papel\")\n    // (true)\n    // >>> isPermutation(\"apple\", \"papel \")\n    // (false)\n    // >>> isPermutation(\"apple\", \"\")\n    // (false)\n    def isPermutation(txt\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8d36yomk.scala:73:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ':' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8d36yomk.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8d36yomk.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8d36yomk.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8d36yomk.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8d36yomk.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8d36yomk.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.charAt(txt.length - 1) == \" \") && !(txt.\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293303,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpinwnheoc.scala:22:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpinwnheoc.scala:37:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpinwnheoc.scala:21:21 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.leng",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) < \"a\" || txt.charAt(txt.length - 1) > \"z\") &&\n            !(txt.split(\" \").exists(s => s.length > 0 && s.charAt(s.length - 1) < \"a\" || s.charAt(s.length - 1) > \"z\"))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a \")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f g\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f g h\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f g h i\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f g h i j\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f g h i j k\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp507yo57n.scala:71:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp507yo57n.scala:21:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) < \u001b[31m\"a\"\u001b[0m || txt.charAt(txt.length - \u001b[31m1\u001b[0m) > \u001b[31m\"z\"\u001b[0m) &&\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m<\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mChar\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double): Boolean\n\u001b[31m   |\u001b[0m (x: Float): Boolean\n\u001b[31m   |\u001b[0m (x: Long): Boolean\n\u001b[31m   |\u001b[0m (x: Int): Boolean\n\u001b[31m   |\u001b[0m (x: Char): Boolean\n\u001b[31m   |\u001b[0m (x: Short): Boolean\n\u001b[31m   |\u001b[0m (x: Byte): Boolean\n\u001b[31m   |\u001b[0mmatch arguments ((\u001b[32m\"a\"\u001b[0m : String))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp507yo57n.scala:59:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp507yo57n.scala:60:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp507yo57n.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer expl",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) < 'a' || txt.charAt(txt.length() - 1) > 'z') && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am\")\n    // (true)\n    // >>> isPalindrome(\"madam am \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"dama \")\n    // (false)\n    // >>> isPermutation(\"madam\", \"\")\n    // (false)\n    def is\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E019] Syntax Error: /tmp/tmpm766oqtp.scala:72:10 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mis\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          Missing return type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm766oqtp.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm766oqtp.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm766oqtp.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm766oqtp.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm766oqtp.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            false\n        } else {\n            true\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpklrdqhev.scala:25)\n\tat Problem.main(tmpklrdqhev.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \".\")\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"\")\n    // (true)\n    // >>> isPalindrome(\"a\")\n    // (true)\n    // >>> isPalindrome(\"ab\")\n    // (true)\n    // >>> isPalindrome(\"abba\")\n    // (true)\n    // >>> isPalindrome(\"abba \")\n    // (false)\n    // >>> isPalindrome(\"a b\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return true\n        }\n        if (txt.length() == 1) {\n            return true\n        }\n        if (txt.length() == 2) {\n            return txt == txt.reverse()\n        }\n        if (txt.length() == 3) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt.length() == 4) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt.length() == 5) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt.length() == 6) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt.length() == 7) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt.length() == 8) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt.length() == 9) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293300,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp17e5et74.scala:72:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp17e5et74.scala:21:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\".\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp17e5et74.scala:21:59 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\".\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp17e5et74.scala:48:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m txt == txt.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmp17e5et74.scala:51:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m            \u001b[33mreturn\u001b[0m txt == txt.reverse().substring(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmp17e5et74.scala:54:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m            \u001b[33mreturn\u001b[0m txt == txt.reverse().substring(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if a given string is a\n    // permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"apple\", \"pale\")\n    // (true)\n    // >>> isPermutation(\"apple\", \"pale pie\")\n    // (false)\n    // >>> isPermutation(\"apple\", \"pale pie \")\n    // (false)\n    // >>> isPerm\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjds1yvj7.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjds1yvj7.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjds1yvj7.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjds1yvj7.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjds1yvj7.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjds1yvj7.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPermutation(\"\",\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf88u8da8.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf88u8da8.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf88u8da8.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf88u8da8.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf88u8da8.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf88u8da8.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1 && txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpihfr3z82.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpihfr3z82.scala:59:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.split(\u001b[31m\" \"\u001b[0m).length == \u001b[31m1\u001b[0m && txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpihfr3z82.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpihfr3z82.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpihfr3z82.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpihfr3z82.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !isLetter(txt[txt.length - 1]) && !isPartOfWord(txt)\n    }\n\n    // Create a function that returns true if the given string is\n    // a part of a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPartOfWord(\"apple\")\n    // (false)\n    // >>> isPartOfWord(\"apple pie\")\n    // (true)\n    // >>> isPartOfWord(\"apple pie \")\n    // (true)\n    // >>> isPartOfWord(\"\")\n    // (false)\n    def isPartOfWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return isLetter(txt[0]) || txt[0] == \" \"\n    }\n\n    // Create a function that returns true if the given string is\n    // a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return isPartOfWord(txt) && !isPartOfWord(txt + \" \")\n    }\n\n    // Create a function that returns true if the given string is\n    // a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (true)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnpxrzms2.scala:75:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnpxrzms2.scala:89:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnpxrzms2.scala:21:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isPartOfWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnpxrzms2.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isPartOfWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type -\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnpxrzms2.scala:40:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mreturn\u001b[0m isLetter(txt[\u001b[31m0\u001b[0m]) || txt[\u001b[31m0\u001b[0m] == \u001b[31m\" \"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnpxrzms2.scala:40:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mreturn\u001b[0m isLetter(txt[\u001b[31m0\u001b[0m]) || txt[\u001b[31m0\u001b[0m] == \u001b[31m\" \"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnpxrzms2.scala:77:11 ------------------------\u001b[0m\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !isLetter(txt.charAt(txt.length() - 1)) && !isWord(txt.substring(0, txt.length() - 1))\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return isLetter(txt.charAt(0)) && isLetter(txt.charAt(txt.length() - 1)) && !isLetter(txt.charAt(txt.length() - 2))\n    }\n\n    // Create a function that returns true if a given string is a\n    // palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return isWord(txt) && txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if a given string is a\n    // permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"ab\", \"ba\")\n    // (true)\n    // >>> isPermutation(\"ab\", \"ab\")\n\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3kkfjkg8.scala:84:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3kkfjkg8.scala:21:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt.charAt(txt.length() - \u001b[31m1\u001b[0m)) && !isWord(txt.substring(\u001b[31m0\u001b[0m, txt.length() - \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3kkfjkg8.scala:40:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mreturn\u001b[0m isLetter(txt.charAt(\u001b[31m0\u001b[0m)) && isLetter(txt.charAt(txt.length() - \u001b[31m1\u001b[0m)) && !isLetter(txt.charAt(txt.length() - \u001b[31m2\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3kkfjkg8.scala:59:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m isWord(txt) && txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3kkfjkg8.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3kkfjkg8.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !isLetter(txt[txt.length() - 1]) && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return isLetter(txt[0]) && !isLetter(txt[txt.length() - 1])\n    }\n\n    // Create a function that returns true if the given string\n    // is a sentence and false otherwise.\n    // Note: \"sentence\" is a group of characters separated by space.\n    // Examples:\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie \")\n    // (true)\n    // >>> isSentence(\"apple pie \")\n    // (true)\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie\")\n    // (\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm220dsha.scala:21:39 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length() - \u001b[31m1\u001b[0m]) && !isWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       ']' expected, but '(' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm220dsha.scala:40:59 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mreturn\u001b[0m isLetter(txt[\u001b[31m0\u001b[0m]) && !isLetter(txt[txt.length() - \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             ']' expected, but '(' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm220dsha.scala:91:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm220dsha.scala:21:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length() - \u001b[31m1\u001b[0m]) && !isWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm220dsha.scala:40:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mreturn\u001b[0m isLetter(txt[\u001b[31m0\u001b[0m]) && !isLetter(txt[txt.length() - \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpm220dsha.scala:40:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mreturn\u001b[0m isLetter(txt[\u001b[31m0\u001b[0m]) && !isLetter(txt[txt.length() - \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take type parameters\n\u001b[31m\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1).isLetter() && txt.lastIndexOf(\" \") == -1)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"apple pie\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie pie\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        var words = txt.split(\" \")\n        for (word in words) {\n            if (isPalindrome(word)) {\n                return true\n            }\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome2(\"apple pie\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome2(\"apple pie apple\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome2(\"apple pie apple pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome2(\"apple pie apple pie pie\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome2(\"\")\n    // (false)\n    def checkIfStringContainsPalindrome2(txt : String) : Boolean = {\n        if (txt\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo61a0v9g.scala:44:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mfor\u001b[0m (word in words) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo61a0v9g.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpo61a0v9g.scala:21:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m).isLetter() && txt.lastIndexOf(\u001b[31m\" \"\u001b[0m) == -\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              \u001b[33mmethod\u001b[0m \u001b[35misLetter\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mRichChar\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo61a0v9g.scala:48:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set a",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isInWord(txt)\n    }\n\n    // Create a function that returns true if a given string is\n    // a part of a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isInWord(\"apple\")\n    // (true)\n    // >>> isInWord(\"apple pie\")\n    // (true)\n    // >>> isInWord(\"apple pie \")\n    // (true)\n    // >>> isInWord(\"\")\n    // (false)\n    def isInWord(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z'\n    }\n\n    // Create a function that returns true if a given string is\n    // a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (true)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        if (txt.length() == 1) {\n            return true\n        }\n        if (txt.charAt(0) != txt.charAt(txt.length() - 1)) {\n            return false\n        }\n        return isPalindrome(txt.substring(1, txt.length() - 1))\n    }\n\n    // Create a function that returns true if a given string is\n    // a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293300,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpibthh82o.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpibthh82o.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpibthh82o.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpibthh82o.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpibthh82o.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpibthh82o.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"Pumpkin pie \"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !isLetter(txt[txt.length - 1]) && !isPartOfWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return isPartOfWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a part\n    // of a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPartOfWord(\"apple\")\n    // (false)\n    // >>> isPartOfWord(\"apple pie\")\n    // (true)\n    // >>> isPartOfWord(\"apple pie \")\n    // (true)\n    // >>> isPartOfWord(\"\")\n    // (false)\n    def isPartOfWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if a given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (true)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293304,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2pzu__k6.scala:92:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m92 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2pzu__k6.scala:21:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isPartOfWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2pzu__k6.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isPartOfWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type -\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2pzu__k6.scala:91:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp2pzu__k6.scala:78:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m78 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pi e\")\n    // (true)\n    // >>> isWord(\"apple pi e \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"apple\", \"papel\")\n    // (true)\n    // >>> isPermutation(\"apple\", \"papel \")\n    // (false)\n    // >>> isPermutation(\"apple\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293300,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_6sff0oq.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_6sff0oq.scala:61:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_6sff0oq.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_6sff0oq.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_6sff0oq.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_6sff0oq.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) < 'a' || txt.charAt(txt.length() - 1) > 'z') && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord2(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord3(txt : String) : Boolean = {\n        if (txt.length() == 0\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293300,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpu0g2qbek.scala:76:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"\"))\n    // (false)\n    def checkIfStringContainsWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"\"))\n    // (false)\n    def checkIfStringContainsWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"\"))\n    // (false)\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbgv1ay_k.scala:91:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpbgv1ay_k.scala:57:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mcheckIfStringContainsWord\u001b[0m(\u001b[36mtxt\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mBoolean\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef checkIfStringContainsWord(txt: String): Boolean in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 37 and\n\u001b[31m   |\u001b[0mdef checkIfStringContainsWord(txt: String): Boolean in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 57\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbgv1ay_k.scala:79:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbgv1ay_k.scala:80:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbgv1ay_k.scala:81:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compil",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \"\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293309,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpfhmsjqxn.scala:21:1099 ---------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \"\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                                                             ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"abcd\", \"cdab\")\n    // (true)\n    // >>> isPermutation(\"abcd\", \"abcd\")\n    // (true)\n    // >>> isPermutation(\"abcd\", \"abdc\")\n    // (false)\n    // >>> isPermutation(\"abcd\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpebvt_vrg.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpebvt_vrg.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpebvt_vrg.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpebvt_vrg.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpebvt_vrg.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpebvt_vrg.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        } else {\n            return !(txt.charAt(txt.length() - 1) == \" \") && !(isWord(txt.substring(0, txt.length() - 1)))\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        } else {\n            return txt.charAt(0) != \" \"\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        } else {\n            return txt.equals(reverse(txt))\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293306,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpu97rspc5.scala:88:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpu97rspc5.scala:21:21 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(isWord(txt.substring(\u001b[31m0\u001b[0m, txt.length() - \u001b[31m1\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpu97rspc5.scala:41:19 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m txt.charAt(\u001b[31m0\u001b[0m) != \u001b[31m\" \"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu97rspc5.scala:61:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m            \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu97rspc5.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu97rspc5.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1).isLetter() && txt.lastIndexOf(\" \") == -1)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"apple pie\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie apple pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293302,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6ewpspev.scala:52:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp6ewpspev.scala:21:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m).isLetter() && txt.lastIndexOf(\u001b[31m\" \"\u001b[0m) == -\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              \u001b[33mmethod\u001b[0m \u001b[35misLetter\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mRichChar\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6ewpspev.scala:40:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6ewpspev.scala:41:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6ewpspev.scala:42:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6ewpspev.scala:43:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return !isLetter(txt[txt.length - 1]) && !isWord(txt.substring(0, txt.length - 1))\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return isLetter(txt[0]) && isWord(txt.substring(1))\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a sentence and false otherwise.\n    // Note: \"sentence\" is a group of characters separated by space.\n    // Examples:\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie \")\n    // (true)\n    // >>> isSentence(\"apple\")\n    // (false)\n    // >>> isSentence(\"\")\n    // (false)\n    def isSentence(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return isLetter(txt[0]) && isSentence(txt.substring(1))\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a paragraph and false otherwise.\n    // Note: \"paragraph\" is a group of characters separated by newline.\n    // Examples:\n    // >>> isParagraph(\"apple pie\\npie\")\n    // (true)\n    // >>> isParagraph(\"apple pie\\npie\\n\")\n    // (true)\n    // >>> isParagraph(\"apple pie\")\n    // (false)\n    // >>> is\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293304,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpoevinyuq.scala:90:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m90 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoevinyuq.scala:21:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isWord(txt.substring(\u001b[31m0\u001b[0m, txt.length - \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoevinyuq.scala:21:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isWord(txt.substring(\u001b[31m0\u001b[0m, txt.length - \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Not found: type -\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoevinyuq.scala:41:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m isLetter(txt[\u001b[31m0\u001b[0m]) && isWord(txt.substring(\u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpoevinyuq.scala:41:31 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m isLetter(txt[\u001b[31m0\u001b[0m]) && isWord(txt.substring(\u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoevinyuq.scala:61:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m            \u001b[33mreturn\u001b[0m isLetter(txt[\u001b[31m0\u001b[0m]) &",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !isLetter(txt[txt.length - 1]) && !isLetter(txt[txt.length - 2])\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293304,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8imkb5k5.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8imkb5k5.scala:21:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m2\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8imkb5k5.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m2\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type -\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8imkb5k5.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8imkb5k5.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8imkb5k5.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return !(txt.charAt(txt.length - 1) < 'a' || txt.charAt(txt.length - 1) > 'z') &&\n            !(txt.split(\" \").exists(w => w.length > 0 && w.charAt(0) < 'a' || w.charAt(0) > 'z'))\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"\")\n    // (true)\n    // >>> isPalindrome(\"a\")\n    // (true)\n    // >>> isPalindrome(\"ab\")\n    // (true)\n    // >>> isPalindrome(\"abba\")\n    // (true)\n    // >>> isPalindrome(\"abba \")\n    // (false)\n    // >>> isPalindrome(\"abba a\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) return true\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n    // >>> isPermutation(\"a\", \"a\")\n    // (true)\n    // >>> isPermutation(\"ab\", \"ba\")\n    // (true)\n    // >>> isPermutation(\"ab\", \"ab\")\n    // (true)\n    // >>> isPermutation(\"ab\", \"ba\")\n    // (false)\n    // >>> isPermutation(\"ab\", \"ab \")\n    // (false)\n    def isPermutation(txt : String, txt2 : String) : Boolean = {\n        if (txt.length == 0 || txt2.length == 0) return true\n        return txt.equals(reverse(\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293304,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpfjcsnzsn.scala:62:34 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                  expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfjcsnzsn.scala:41:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfjcsnzsn.scala:62:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1).isLetter() && txt.contains(\" \"))\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293304,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpn9eo1xjf.scala:21:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m).isLetter() && txt.contains(\u001b[31m\" \"\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              \u001b[33mmethod\u001b[0m \u001b[35misLetter\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mRichChar\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) %>= 97 && txt.charAt(txt.length() - 1) %<= 122)\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"A man, a plan, a canal: Panama\")\n    // (true)\n    // >>> isPalindrome(\"race a car\")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (true)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return true\n        }\n        if (txt.length() == 1) {\n            return true\n        }\n        if (txt.length() == 2) {\n            return txt.equals(txt.reverse())\n        }\n        if (txt.length() % 2 == 0) {\n            return txt.equals(txt.substring(0, txt.length() / 2).reverse()) && txt.equals(txt.substring(txt.length() / 2, txt.length()).reverse())\n        } else {\n            return txt.equals(txt.substring(0, txt.length() / 2).reverse()) && txt.equals(txt.substring(txt.length() / 2, txt.length()).reverse())\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"ab\", \"ba\")\n    // (true)\n    // >>> isPermutation(\"ab\", \"ab\")\n    // (true)\n    // >>> isPermutation(\"ab\", \"abc\")\n    // (false)\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n    def\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4gak438e.scala:64:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4gak438e.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4gak438e.scala:21:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) %>= \u001b[31m97\u001b[0m && txt.charAt(txt.length() - \u001b[31m1\u001b[0m) %<= \u001b[31m122\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               value %>= is not a member of Char - did you mean Char.>=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4gak438e.scala:21:53 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) %>= \u001b[31m97\u001b[0m && txt.charAt(txt.length() - \u001b[31m1\u001b[0m) %<= \u001b[31m122\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         value && is not a member of Int\n\u001b[31m\u001b[31m-- Error: /tmp/tmp4gak438e.scala:42:41 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m            \u001b[33mreturn\u001b[0m txt.equals(txt.reverse())\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmp4gak438e.scala:45:72 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m            \u001b[33mreturn\u001b[0m txt.equals(txt.substring(\u001b[31m0\u001b[0m, txt.length() / \u001b[31m2\u001b[0m).reverse()) && txt.equals(txt.substring(txt.length() / \u001b[31m2\u001b[0m, txt.length()).reverse())\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") {\n            false\n        } else {\n            (txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z') && !(txt.split(\" \").exists(s => s.length > 0))\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f g\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt == \"\") {\n            false\n        } else {\n            (txt.split(\" \").exists(s => s.length > 0) && s.length > 1) && s.length % 2 == 0 && s.length >= 2 && s.length <= 1000 && s.length % 2 == 0 && s.length >= 2 && s.length <= 1000 && s.length % 2 == 0 && s.length >= 2 && s.length <= 1000 && s.length % 2 == 0 && s.length >= 2 && s.length <= 1000 && s.length % 2 == 0 && s.length >= 2 && s.length <= 1000 && s.length % 2 == 0 && s.length >= 2 && s.length <= 1000 && s.length % 2 ==\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293309,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpgtttnp04.scala:50:437 --------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m            (txt.split(\u001b[31m\" \"\u001b[0m).exists(\u001b[36ms\u001b[0m => s.length > \u001b[31m0\u001b[0m) && s.length > \u001b[31m1\u001b[0m) && s.length % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m && s.length >= \u001b[31m2\u001b[0m && s.length <= \u001b[31m1000\u001b[0m && s.length % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m && s.length >= \u001b[31m2\u001b[0m && s.length <= \u001b[31m1000\u001b[0m && s.length % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m && s.length >= \u001b[31m2\u001b[0m && s.length <= \u001b[31m1000\u001b[0m && s.length % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m && s.length >= \u001b[31m2\u001b[0m && s.length <= \u001b[31m1000\u001b[0m && s.length % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m && s.length >= \u001b[31m2\u001b[0m && s.length <= \u001b[31m1000\u001b[0m && s.length % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m && s.length >= \u001b[31m2\u001b[0m && s.length <= \u001b[31m1000\u001b[0m && s.length % \u001b[31m2\u001b[0m ==\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                                                                                                                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgtttnp04.scala:66:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgtttnp04.scala:50:57 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m            (txt.split(\u001b[31m\" \"\u001b[0m).exists(\u001b[36ms\u001b[0m => s.length > \u001b[31m0\u001b[0m) && s.length > \u001b[31m1\u001b[0m) && s.length % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m && s.length >= \u001b[31m2\u001b[0m && s.length <= \u001b[31m1000\u001b[0m && s.length % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m && s.length >= \u001b[31m2\u001b[0m && s.length <= \u001b[31m1000\u001b[0m && s.len",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") return false\n        return !(txt.charAt(txt.length - 1) in \"abcdefghijklmnopqrstuvwxyz\") && !(txt.charAt(txt.length - 1) in \"0123456789\")\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293307,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpykuoratq.scala:19:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) in \u001b[31m\"abcdefghijklmnopqrstuvwxyz\"\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) in \u001b[31m\"0123456789\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value in is not a member of Char\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.equals(new StringBuilder(txt).reverse().toString())\n    }\n\n    // Create a function that returns true if a given string is a\n    // permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"dama m\")\n    // (false)\n    // >>> isPermutation(\"madam\", \"dama m a\")\n    // (true)\n    // >>> isPermutation(\"\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbumg23_e.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbumg23_e.scala:53:56 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(\u001b[33mnew\u001b[0m \u001b[35mStringBuilder\u001b[0m(txt).reverse().toString())\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringBuilder\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbumg23_e.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbumg23_e.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbumg23_e.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbumg23_e.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie apple\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293307,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgm8le9bs.scala:71:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgm8le9bs.scala:21:94 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.charAt(txt.length() - \u001b[31m1\u001b[0m) >= \u001b[31m'a'\u001b[0m && txt.charAt(txt.length() - \u001b[31m1\u001b[0m) <= \u001b[31m'z'\u001b[0m && !isWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                              ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: isWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgm8le9bs.scala:59:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgm8le9bs.scala:60:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgm8le9bs.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgm8le9bs.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    a",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord2(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord3(txt : String) : Boolean = {\n        if (txt.length() == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293306,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpabxf4bz7.scala:76:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1).isLetter() && txt.lastIndexOf(\" \") == -1)\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293307,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp772mar7k.scala:21:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m).isLetter() && txt.lastIndexOf(\u001b[31m\" \"\u001b[0m) == -\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              \u001b[33mmethod\u001b[0m \u001b[35misLetter\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mRichChar\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return !(txt.charAt(txt.length - 1).isLetter() && txt.lastIndexOf(\" \") == -1)\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            var words = txt.split(\" \")\n            for (word in words) {\n                if (isPalindrome(word)) {\n                    return true\n                }\n            }\n            return false\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (false)\n    // >>>\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293313,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgjaylplb.scala:47:32 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m            \u001b[33mfor\u001b[0m (word in words) {\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgjaylplb.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpgjaylplb.scala:21:48 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m).isLetter() && txt.lastIndexOf(\u001b[31m\" \"\u001b[0m) == -\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              \u001b[33mmethod\u001b[0m \u001b[35misLetter\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mRichChar\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgjaylplb.scala:51:13 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m            }\n\u001b[31m\u001b[31m   |\u001b[0m             ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitC",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return !isLetter(txt.charAt(txt.length - 1)) && !isWord(txt.substring(0, txt.length - 1))\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return isLetter(txt.charAt(0)) && !isLetter(txt.charAt(txt.length - 1))\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isLetter(c : String) : Boolean = {\n        return c.isLetter()\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isLetter(c : String) : Boolean = {\n        return c.isLetter()\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7_9_w_6n.scala:92:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m92 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7_9_w_6n.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt.charAt(txt.length - \u001b[31m1\u001b[0m)) && !isWord(txt.substring(\u001b[31m0\u001b[0m, txt.length - \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Char\n\u001b[31m   |\u001b[0m                         Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7_9_w_6n.scala:40:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mreturn\u001b[0m isLetter(txt.charAt(\u001b[31m0\u001b[0m)) && !isLetter(txt.charAt(txt.length - \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    Char\n\u001b[31m   |\u001b[0m                        Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7_9_w_6n.scala:40:62 --------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mreturn\u001b[0m isLetter(txt.charAt(\u001b[31m0\u001b[0m)) && !isLetter(txt.charAt(txt.length - \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    Char\n\u001b[31m   |\u001b[0m                                                    Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7_9_w_6n.scala:56:17 ------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m        \u001b[33mreturn\u001b[0m c.isLetter()\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               value isLetter is not a member of String\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) < 'a' || txt.charAt(txt.length - 1) > 'z') &&\n            !(txt.charAt(txt.length - 1) < 'A' || txt.charAt(txt.length - 1) > 'Z') &&\n            !(txt.charAt(txt.length - 1) < '0' || txt.charAt(txt.length - 1) > '9') &&\n            !(txt.charAt(txt.length - 1) == ' ')\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false otherwise.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"a bb ccc bb\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a bb ccc bb a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        var words = txt.split(\" \")\n        for (word in words) {\n            if (isPalindrome(word)) {\n                return true\n            }\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false otherwise.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"a bb ccc bb\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a bb ccc bb a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    def checkIfStringContainsPalindrome2(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        var words = txt.split(\" \")\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293314,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4hwsq9xo.scala:41:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mfor\u001b[0m (word in words) {\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4hwsq9xo.scala:45:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4hwsq9xo.scala:63:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") return false\n        if (txt.length() == 1) return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0vajqg_s.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0vajqg_s.scala:20:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0vajqg_s.scala:21:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0vajqg_s.scala:22:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0vajqg_s.scala:23:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0vajqg_s.scala:24:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String canno",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \", \"pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \", \"pie\", \"pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \", \"pie\", \"pie\", \"pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie \", \"pie\", \"pie\", \"pie\", \"pie\"))\n    // (false)\n    def checkIfStringContainsWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \", \"pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \", \"pie\", \"pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \", \"pie\", \"pie\", \"pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie \", \"pie\", \"pie\", \"pie\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293307,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppeaa6wmr.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppeaa6wmr.scala:21:94 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.charAt(txt.length() - \u001b[31m1\u001b[0m) >= \u001b[31m'a'\u001b[0m && txt.charAt(txt.length() - \u001b[31m1\u001b[0m) <= \u001b[31m'z'\u001b[0m && !isWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                              ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: isWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppeaa6wmr.scala:44:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mreturn\u001b[0m isWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: isWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppeaa6wmr.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppeaa6wmr.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppeaa6wmr.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m)",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1).isLetter() && !isWord(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam \")\n    // (true)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (true)\n    // >>> isPermutation(\"madam\", \"\")\n    //\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293310,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsu6h_04p.scala:88:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpsu6h_04p.scala:21:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m).isLetter() && !isWord(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              \u001b[33mmethod\u001b[0m \u001b[35misLetter\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mRichChar\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsu6h_04p.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsu6h_04p.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsu6h_04p.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsu6h_04p.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z' && checkIfLastCharIsALetter(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        if (txt.length == 1) return true\n        if (txt.length == 2) return txt == txt.reverse()\n        return txt.substring(0, txt.length / 2) == txt.substring(txt.length / 2, txt.length)\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"apple\",\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293310,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcw2_5btu.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcw2_5btu.scala:54:54 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m        \u001b[33mif\u001b[0m (txt.length == \u001b[31m2\u001b[0m) \u001b[33mreturn\u001b[0m txt == txt.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcw2_5btu.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcw2_5btu.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcw2_5btu.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcw2_5btu.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           No",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293316,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzxl3tsfj.scala:19:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzxl3tsfj.scala:20:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzxl3tsfj.scala:21:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzxl3tsfj.scala:22:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzxl3tsfj.scala:23:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzxl3tsfj.scala:24:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mre",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1).isLetter() && txt.split(\" \").length == 1)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f g\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1 && isPalindrome(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293311,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgp5lw3a9.scala:80:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpgp5lw3a9.scala:21:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m).isLetter() && txt.split(\u001b[31m\" \"\u001b[0m).length == \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              \u001b[33mmethod\u001b[0m \u001b[35misLetter\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mRichChar\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgp5lw3a9.scala:49:45 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.split(\u001b[31m\" \"\u001b[0m).length == \u001b[31m1\u001b[0m && isPalindrome(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Not found: isPalindrome\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgp5lw3a9.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgp5lw3a9.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgp5lw3a9.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord2(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord3(txt : String) : Boolean = {\n        if (txt.length() == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgx08dsma.scala:76:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1).isLetter() && !txt.contains(\" \"))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"apple pie\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        var words = txt.split(\" \")\n        for (var i = 0; i < words.length; i++) {\n            if (isPalindrome(words[i])) {\n                return true\n            }\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome2(\"apple pie\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome2(\"apple pie apple\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome2(\"apple pie apple pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome2(\"\")\n    // (false)\n    def checkIfStringContainsPalindrome2(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        var words = txt.split(\" \")\n        for (var i = 0; i < words.length; i++) {\n            if (isPalind\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293319,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpmwqsdmw_.scala:41:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < words.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmwqsdmw_.scala:41:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < words.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpmwqsdmw_.scala:41:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < words.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpmwqsdmw_.scala:66:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < words.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmwqsdmw_.scala:66:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < words.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpmwqsdmw_.scala:66:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < words.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                      ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) return false\n        if (txt.length() == 1) return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293289,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpgk0kbh7l.scala:42:10 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mif\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") {\n            false\n        } else {\n            (txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z') && !(txt.split(\" \").exists(s => s.length > 1))\n        }\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a digit and false otherwise.\n    // Note: \"digit\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsADigit((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsADigit((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"\"))\n    // (false)\n    def checkIfLastCharIsADigit(txt : String) : Boolean = {\n        if (txt == \"\") {\n            false\n        } else {\n            (txt.charAt(txt.length - 1) >= '0' && txt.charAt(txt.length - 1) <= '9')\n        }\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a lowercase character and false otherwise.\n    // Note: \"lowercase\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALowercase((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALowercase((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALowercase((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALowercase((\"\"))\n    // (false)\n    def checkIfLastCharIsALowercase(txt : String) : Boolean = {\n        if (txt == \"\") {\n            false\n        } else {\n            (txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= '\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293316,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp74oj4bcd.scala:61:80 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m            (txt.charAt(txt.length - \u001b[31m1\u001b[0m) >= \u001b[31m'a'\u001b[0m && txt.charAt(txt.length - \u001b[31m1\u001b[0m) <= '\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                              unclosed character literal\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp74oj4bcd.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp74oj4bcd.scala:61:77 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m            (txt.charAt(txt.length - \u001b[31m1\u001b[0m) >= \u001b[31m'a'\u001b[0m && txt.charAt(txt.length - \u001b[31m1\u001b[0m) <= '\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m<=\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mChar\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double): Boolean\n\u001b[31m   |\u001b[0m (x: Float): Boolean\n\u001b[31m   |\u001b[0m (x: Long): Boolean\n\u001b[31m   |\u001b[0m (x: Int): Boolean\n\u001b[31m   |\u001b[0m (x: Char): Boolean\n\u001b[31m   |\u001b[0m (x: Short): Boolean\n\u001b[31m   |\u001b[0m (x: Byte): Boolean\n\u001b[31m   |\u001b[0mmatch arguments (Null)\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp74oj4bcd.scala:76:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp74oj4bcd.scala:63:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m63 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") {\n            false\n        } else {\n            if (txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z') {\n                true\n            } else {\n                false\n            }\n        }\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a digit and false otherwise.\n    // Note: \"digit\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsADigit((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsADigit((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"\"))\n    // (false)\n    def checkIfLastCharIsADigit(txt : String) : Boolean = {\n        if (txt == \"\") {\n            false\n        } else {\n            if (txt.charAt(txt.length - 1) >= '0' && txt.charAt(txt.length - 1) <= '9') {\n                true\n            } else {\n                false\n            }\n        }\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a special character and false otherwise.\n    // Note: \"special\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsASpecial((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsASpecial((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsASpecial((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsASpecial((\"\"))\n    // (false)\n    def checkIfLastCharIsASpecial(txt : String) : Boolean = {\n        if (txt == \"\") {\n            false\n        } else {\n            if (txt.charAt(txt.length - 1) >= '!') {\n                true\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293315,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpska4tixf.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpska4tixf.scala:85:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpska4tixf.scala:72:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m72 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n\u001b[33m\u001b[33m-- [E129] Potential Issue Warning: /tmp/tmpska4tixf.scala:70:16 ----------------\u001b[0m\u001b[0m\n\u001b[33m70 |\u001b[0m                \u001b[31mtrue\u001b[0m\n\u001b[33m\u001b[33m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[33m   |\u001b[0mA pure expression does nothing in statement position; you may be omitting necessary parentheses\n\u001b[33m   |\u001b[0m\n\u001b[33m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 warnings found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdzej_60n.scala:25)\n\tat Problem.main(tmpdzej_60n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) %>= 97 && txt.charAt(txt.length - 1) %<= 122)\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"A man, a plan, a canal: Panama\")\n    // (true)\n    // >>> isPalindrome(\"race a car\")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (true)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return true\n        }\n        if (txt.length == 1) {\n            return true\n        }\n        if (txt.length == 2) {\n            return txt == txt.reverse()\n        }\n        if (txt.length % 2 == 0) {\n            return txt.substring(0, txt.length / 2) == txt.substring(txt.length / 2, txt.length)\n        } else {\n            return txt.substring(0, txt.length / 2) == txt.substring(txt.length / 2, txt.length)\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"A man, a plan, a canal: Panama\", \"canal,man,plan,a\")\n    // (true)\n    // >>> isPermutation(\"A man, a plan, a canal: Panama\", \"canal,plan,man,a\")\n    // (false)\n    // >>> isPermutation(\"A man, a plan, a canal: Panama\", \"canal,plan,man,a\")\n    // (true)\n    // >>> isPermutation(\"A man, a plan, a\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293317,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkauqf3le.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkauqf3le.scala:21:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) %>= \u001b[31m97\u001b[0m && txt.charAt(txt.length - \u001b[31m1\u001b[0m) %<= \u001b[31m122\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               value %>= is not a member of Char - did you mean Char.>=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkauqf3le.scala:21:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) %>= \u001b[31m97\u001b[0m && txt.charAt(txt.length - \u001b[31m1\u001b[0m) %<= \u001b[31m122\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         value && is not a member of Int\n\u001b[31m\u001b[31m-- Error: /tmp/tmpkauqf3le.scala:42:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m            \u001b[33mreturn\u001b[0m txt == txt.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkauqf3le.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkauqf3le.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsA",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) == \" \") &&\n            !(txt.charAt(txt.length - 1) == \".\") &&\n            !(txt.charAt(txt.length - 1) == \",\") &&\n            !(txt.charAt(txt.length - 1) == \"!\") &&\n            !(txt.charAt(txt.length - 1) == \"?\") &&\n            !(txt.charAt(txt.length - 1) == \";\") &&\n            !(txt.charAt(txt.length - 1) == \":\") &&\n            !(txt.charAt(txt.length - 1) == \"\\\"\") &&\n            !(txt.charAt(txt.length - 1) == \"'\") &&\n            !(txt.charAt(txt.length - 1) == \"(\" ||\n              txt.charAt(txt.length - 1) == \")\") &&\n            !(txt.charAt(txt.length - 1) == \"{\" ||\n              txt.charAt(txt.length - 1) == \"}\") &&\n            !(txt.charAt(txt.length - 1) == \"*\") &&\n            !(txt.charAt(txt.length - 1) == \"&\") &&\n            !(txt.charAt(txt.length - 1) == \"|\") &&\n            !(txt.charAt(txt.length - 1) == \";\") &&\n            !(txt.charAt(txt.length - 1) == \"?\") &&\n            !(txt.charAt(txt.length - 1) == \"!\") &&\n            !(txt.charAt(txt.length - 1) == \",\") &&\n            !(txt.charAt(txt.length - 1) == \".\") &&\n            !(txt.charAt(txt.length - 1) == \":\") &&\n            !(txt.charAt(txt.length - 1) == \"\\\"\") &&\n            !(txt.charAt(txt.length - 1) == \"'\") &&\n            !(txt.charAt(txt.length - 1) == \"(\" ||\n              txt.char\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293319,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvygfe94d.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvygfe94d.scala:21:17 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) &&\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvygfe94d.scala:22:14 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\".\"\u001b[0m) &&\n\u001b[31m\u001b[31m   |\u001b[0m              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvygfe94d.scala:23:14 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\",\"\u001b[0m) &&\n\u001b[31m\u001b[31m   |\u001b[0m              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvygfe94d.scala:24:14 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\"!\"\u001b[0m) &&\n\u001b[31m\u001b[31m   |\u001b[0m              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvygfe94d.scala:25:14 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\"?\"\u001b[0m) &&\n\u001b[31m\u001b[31m   |\u001b[0m              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvygfe94d.scala:26:14 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            !(txt.charAt(txt.length - \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) < 'a' || txt.charAt(txt.length() - 1) > 'z') && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord2(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord3(txt : String) : Boolean = {\n        if (txt.length() == 0\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293313,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpylgaiz4v.scala:76:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        if (txt.length == 1) return true\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293315,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6kz4f40t.scala:44:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") return false\n        return !(txt.charAt(txt.length - 1) in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") && !(txt.split(\" \").exists(x => x.length > 1))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt == \"\") return false\n        return txt.split(\" \").exists(x => x.length > 1 && x.equals(reverse(x)))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a double palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsDoublePalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsDoublePalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsDoublePalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsDoublePalindrome(\"a b c\")\n    // (false)\n    // >>> check\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293317,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0ds3an8d.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0ds3an8d.scala:19:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) in \u001b[31m\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\u001b[0m) && !(txt.split(\u001b[31m\" \"\u001b[0m).exists(\u001b[36mx\u001b[0m => x.length > \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value in is not a member of Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0ds3an8d.scala:43:67 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.split(\u001b[31m\" \"\u001b[0m).exists(\u001b[36mx\u001b[0m => x.length > \u001b[31m1\u001b[0m && x.equals(reverse(x)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0ds3an8d.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0ds3an8d.scala:63:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0ds3an8d.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(che",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1 && txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if a given string\n    // is a sentence and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isSentence(\"This is a sentence.\")\n    // (true)\n    // >>> isSentence(\"This is a sentence. \")\n    // (false)\n    // >>> isSentence(\"\")\n    // (false)\n    def isSentence\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293313,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E019] Syntax Error: /tmp/tmpjtse6lat.scala:72:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36misSentence\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Missing return type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjtse6lat.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjtse6lat.scala:59:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.split(\u001b[31m\" \"\u001b[0m).length == \u001b[31m1\u001b[0m && txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjtse6lat.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjtse6lat.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjtse6lat.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           No",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdzej_60n.scala:25)\n\tat Problem.main(tmpdzej_60n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) %>= 97 && txt.charAt(txt.length - 1) %<= 122)\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"\")\n    // (true)\n    // >>> isPalindrome(\"a\")\n    // (true)\n    // >>> isPalindrome(\"racecar\")\n    // (true)\n    // >>> isPalindrome(\"race car\")\n    // (true)\n    // >>> isPalindrome(\"race car \")\n    // (false)\n    // >>> isPalindrome(\"race car \")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return true\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n    // >>> isPermutation(\"a\", \"a\")\n    // (true)\n    // >>> isPermutation(\"a\", \"b\")\n    // (false)\n    // >>> isPermutation(\"ab\", \"ba\")\n    // (true)\n    // >>> isPermutation(\"ab\", \"ab\")\n    // (true)\n    // >>> isPermutation(\"ab\", \"a\")\n    // (false)\n    // >>> isPermutation(\"ab\", \"ab \")\n    // (false)\n    def isPermutation(txt : String, txt2 : String) : Boolean = {\n        if (txt.length == 0) {\n            return true\n        }\n        if (txt2.length == 0) {\n            return false\n        }\n        if\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293319,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpk01rqmug.scala:72:10 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m        \u001b[33mif\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpk01rqmug.scala:21:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) %>= \u001b[31m97\u001b[0m && txt.charAt(txt.length - \u001b[31m1\u001b[0m) %<= \u001b[31m122\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               value %>= is not a member of Char - did you mean Char.>=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpk01rqmug.scala:21:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) %>= \u001b[31m97\u001b[0m && txt.charAt(txt.length - \u001b[31m1\u001b[0m) %<= \u001b[31m122\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         value && is not a member of Int\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk01rqmug.scala:44:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z') && !(txt.contains(\" \"))\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"\")\n    // (true)\n    // >>> isPalindrome(\"a\")\n    // (true)\n    // >>> isPalindrome(\"ab\")\n    // (true)\n    // >>> isPalindrome(\"abba\")\n    // (true)\n    // >>> isPalindrome(\"abba a\")\n    // (false)\n    // >>> isPalindrome(\"abba a \")\n    // (true)\n    // >>> isPalindrome(\"abba a b\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return true\n        }\n        if (txt.length() == 1) {\n            return true\n        }\n        if (txt.length() == 2) {\n            return txt == txt.reverse()\n        }\n        if (txt.length() == 3) {\n            return txt == txt.reverse()\n        }\n        if (txt.length() == 4) {\n            return txt == txt.reverse()\n        }\n        if (txt.length() == 5) {\n            return txt == txt.reverse()\n        }\n        if (txt.length() == 6) {\n            return txt == txt.reverse()\n        }\n        if (txt.length() == 7) {\n            return txt == txt.reverse()\n        }\n        if (txt.length() == 8) {\n            return txt == txt.reverse()\n        }\n        if (txt.length() == 9) {\n            return txt == txt.reverse()\n        }\n        if (txt.length() == 10\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293317,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprwmp7657.scala:74:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmprwmp7657.scala:50:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m            \u001b[33mreturn\u001b[0m txt == txt.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmprwmp7657.scala:53:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m            \u001b[33mreturn\u001b[0m txt == txt.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmprwmp7657.scala:56:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m            \u001b[33mreturn\u001b[0m txt == txt.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmprwmp7657.scala:59:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m            \u001b[33mreturn\u001b[0m txt == txt.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmprwmp7657.scala:62:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m            \u001b[33mreturn\u001b[0m txt == txt.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmprwmp7657.scala:65:37 ----------------------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z') && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1 && txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\",\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293315,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp69axzunp.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp69axzunp.scala:59:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.split(\u001b[31m\" \"\u001b[0m).length == \u001b[31m1\u001b[0m && txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp69axzunp.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp69axzunp.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp69axzunp.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp69axzunp.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z') && !(txt.charAt(txt.length - 1) >= 'A' && txt.charAt(txt.length - 1) <= 'Z') && !(txt.charAt(txt.length - 1) >= '0' && txt.charAt(txt.length - 1) <= '9') && !(txt.charAt(txt.length - 1) == ' ')\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"apple pie\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie apple pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie apple pie\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293317,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgakql4ur.scala:50:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgakql4ur.scala:38:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgakql4ur.scala:39:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgakql4ur.scala:40:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgakql4ur.scala:41:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgakql4ur.scala:42:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"Pumpkin pie \"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1).isLetter() && txt.contains(\" \"))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.split(\" \").allMatch(word -> isPalindrome(word))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (true)\n    def checkIfStringContainsPalindrome2(txt : String) : Boolean = {\n\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293321,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpqr7c3eph.scala:21:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m).isLetter() && txt.contains(\u001b[31m\" \"\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              \u001b[33mmethod\u001b[0m \u001b[35misLetter\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mRichChar\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqr7c3eph.scala:45:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.split(\u001b[31m\" \"\u001b[0m).allMatch(word -> isPalindrome(word))\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               value allMatch is not a member of Array[String]\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqr7c3eph.scala:45:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.split(\u001b[31m\" \"\u001b[0m).allMatch(word -> isPalindrome(word))\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Not found: word\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqr7c3eph.scala:65:67 --------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mcheckIfStringContainsPalindrome2\u001b[0m(\u001b[36mtxt\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mBoolean\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Found:    Unit\n\u001b[31m   |\u001b[0m                                                       Required: Boolean\n\u001b[31m66 |\u001b[0m    }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z'\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293316,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpatkh2uln.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpatkh2uln.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpatkh2uln.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpatkh2uln.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpatkh2uln.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpatkh2uln.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        if (txt.length == 1) return false\n        if (txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z') return true\n        if (txt.charAt(txt.length - 1) >= 'A' && txt.charAt(txt.length - 1) <= 'Z') return true\n        if (txt.charAt(txt.length - 1) >= '0' && txt.charAt(txt.length - 1) <= '9') return true\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == '.') return false\n        if (txt.charAt(txt.length - 1) == ',') return false\n        if (txt.charAt(txt.length - 1) == '!') return false\n        if (txt.charAt(txt.length - 1) == '?') return false\n        if (txt.charAt(txt.length - 1) == ';') return false\n        if (txt.charAt(txt.length - 1) == ':') return false\n        if (txt.charAt(txt.length - 1) == '-') return false\n        if (txt.charAt(txt.length - 1) == '_') return false\n        if (txt.charAt(txt.length - 1) == '+') return false\n        if (txt.charAt(txt.length - 1) == '*') return false\n        if (txt.charAt(txt.length - 1) == '/') return false\n        if (txt.charAt(txt.length - 1) == '%') return false\n        if (txt.charAt(txt.length - 1) == '(') return false\n        if (txt.charAt(txt.length - 1) == ')') return false\n        if (txt.charAt(txt.length - 1) == '=') return false\n        if (txt.charAt(txt.length - 1) == '&') return false\n        if (txt.charAt(txt.length - 1) == '|')\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293319,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpr66j9h2c.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        if (txt.length == 1) return true\n        if (txt.charAt(txt.length - 1) % 128 == 0) return false\n        if (txt.charAt(txt.length - 1) % 128 == 32) return false\n        if (txt.charAt(txt.length - 1) % 128 == 9) return false\n        if (txt.charAt(txt.length - 1) % 128 == 10) return false\n        if (txt.charAt(txt.length - 1) % 128 == 11) return false\n        if (txt.charAt(txt.length - 1) % 128 == 12) return false\n        if (txt.charAt(txt.length - 1) % 128 == 13) return false\n        if (txt.charAt(txt.length - 1) % 128 == 14) return false\n        if (txt.charAt(txt.length - 1) % 128 == 15) return false\n        if (txt.charAt(txt.length - 1) % 128 == 16) return false\n        if (txt.charAt(txt.length - 1) % 128 == 17) return false\n        if (txt.charAt(txt.length - 1) % 128 == 18) return false\n        if (txt.charAt(txt.length - 1) % 128 == 19) return false\n        if (txt.charAt(txt.length - 1) % 128 == 20) return false\n        if (txt.charAt(txt.length - 1) % 128 == 21) return false\n        if (txt.charAt(txt.length - 1) % 128 == 22) return false\n        if (txt.charAt(txt.length - 1) % 128 == 23) return false\n        if (txt.charAt(txt.length - 1) % 128 == 24) return false\n        if (txt.charAt(txt.length - 1) % 128 == 25) return false\n        if (txt.charAt(txt.length - 1) % 128 == 26) return false\n        if (txt.charAt(txt.length - 1) % 128 == 27) return false\n        if (txt.charAt(txt.length - 1) % 128 == 28) return false\n        if (txt\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293321,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_hs54wei.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_hs54wei.scala:42:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mif\u001b[0m (txt\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    (txt : String)\n\u001b[31m   |\u001b[0m            Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z'\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord2(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z'\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    \n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293319,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpa6da63rz.scala:88:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa6da63rz.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa6da63rz.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa6da63rz.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa6da63rz.scala:79:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa6da63rz.scala:80:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"Pumpkin pie \"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) return false\n        if (txt.length() == 1) return true\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if (txt.charAt(txt.length() - 1) == ' ') return false\n        if\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293320,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpzywkju8c.scala:42:10 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mif\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isInWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie\"))\n    // (false)\n    def checkIfStringContainsWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return isInWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie\"))\n    // (false)\n    def checkIfStringContainsWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdeurlwy2.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdeurlwy2.scala:21:90 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.charAt(txt.length - \u001b[31m1\u001b[0m) >= \u001b[31m'a'\u001b[0m && txt.charAt(txt.length - \u001b[31m1\u001b[0m) <= \u001b[31m'z'\u001b[0m && !isInWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Not found: isInWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdeurlwy2.scala:44:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mreturn\u001b[0m isInWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: isInWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdeurlwy2.scala:65:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m            \u001b[33mreturn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    Unit\n\u001b[31m   |\u001b[0m            Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdeurlwy2.scala:80:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpdeurlwy2.scala:63:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mcheckIfStringContainsWord\u001b[0m(\u001b[36mtxt\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mBoolean\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef checkIfStringContainsWord(txt: String): Bo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"abcd\", \"cdab\")\n    // (true)\n    // >>> isPermutation(\"abcd\", \"abcd\")\n    // (true)\n    // >>> isPermutation(\"abcd\", \"abdc\")\n    // (false)\n    // >>> isPermutation(\"abcd\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpebvt_vrg.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpebvt_vrg.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpebvt_vrg.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpebvt_vrg.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpebvt_vrg.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpebvt_vrg.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) < 'a' || txt.charAt(txt.length() - 1) > 'z') && !(txt.contains(\" \"))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        var words = txt.split(\" \")\n        for (var word : words) {\n            if (isPalindrome(word)) {\n                return true\n            }\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293326,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpai9kh1ra.scala:46:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m word : words) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpai9kh1ra.scala:46:31 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m word : words) {\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpai9kh1ra.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpai9kh1ra.scala:50:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpai9kh1ra.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"appl",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            (txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z') && !(txt.split(\" \").exists(x => x.length > 0))\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with \"pi\" and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPi((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsPi((\"apple pi e\"))\n    // (true)\n    // >>> checkIfStringContainsPi((\"apple pi e \"))\n    // (false)\n    // >>> checkIfStringContainsPi((\"\"))\n    // (false)\n    def checkIfStringContainsPi(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            (txt.split(\" \").exists(x => x.startsWith(\"pi\")) && !(txt.split(\" \").exists(x => x.length > 0)))\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with \"pie\" and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPie((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsPie((\"apple pi e\"))\n    // (false)\n    // >>> checkIfStringContainsPie((\"apple pi e \"))\n    // (true)\n    // >>> checkIfStringContainsPie((\"\"))\n    // (false)\n    def checkIfStringContainsPie(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            (txt.split(\" \").exists(x => x.startsWith(\"pie\")) && !(txt.split(\"\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpd_co9282.scala:63:76 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m            (txt.split(\u001b[31m\" \"\u001b[0m).exists(\u001b[36mx\u001b[0m => x.startsWith(\u001b[31m\"pie\"\u001b[0m)) && !(txt.split(\"\n\u001b[31m\u001b[31m   |\u001b[0m                                                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpd_co9282.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd_co9282.scala:78:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpd_co9282.scala:65:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m65 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return !isLetter(txt[txt.length - 1]) && !isWord(txt[:txt.length - 1])\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return isLetter(txt[0]) && isWord(txt[1:])\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return isPalindrome(txt[1:]) && txt[0] == txt[txt.length - 1]\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPermutation(\"\", \"\")\n    // (\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293322,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp96hixtk1.scala:19:61 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isWord(txt[:txt.length - \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   an identifier expected, but ':' found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp96hixtk1.scala:36:47 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mreturn\u001b[0m isLetter(txt[\u001b[31m0\u001b[0m]) && isWord(txt[\u001b[31m1\u001b[0m:])\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             ']' expected, but ':' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp96hixtk1.scala:53:33 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m        \u001b[33mreturn\u001b[0m isPalindrome(txt[\u001b[31m1\u001b[0m:]) && txt[\u001b[31m0\u001b[0m] == txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 ']' expected, but ':' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp96hixtk1.scala:82:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp96hixtk1.scala:19:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isWord(txt[:txt.length - \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp96hixtk1.scala:19:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isWord(txt[:txt.length - \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                      ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        if (txt.length == 1) return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpunt7n7bb.scala:44:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpunt7n7bb.scala:20:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpunt7n7bb.scala:21:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpunt7n7bb.scala:22:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpunt7n7bb.scala:23:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpunt7n7bb.scala:24:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with =",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        if (txt.length == 1) return true\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293315,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6kz4f40t.scala:44:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        } else {\n            return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n        }\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        } else {\n            return txt.split(\" \").length == 1\n        }\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord2(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        } else {\n            return txt.split(\" \").length == 1\n        }\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord3(txt : String)\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293322,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E019] Syntax Error: /tmp/tmpo_c2c99l.scala:77:29 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36misWord3\u001b[0m(\u001b[36mtxt\u001b[0m : \u001b[35mString\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Missing return type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo_c2c99l.scala:92:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m92 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo_c2c99l.scala:80:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo_c2c99l.scala:81:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo_c2c99l.scala:82:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo_c2c99l.scala:83:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsA",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) < \"a\" || txt.charAt(txt.length - 1) > \"z\") && !(txt.split(\" \").find(x => x.length > 0) != -1)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"ab\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").find(x => checkIfLastCharIsALetter(x)) != -1\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a mirror image of itself\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsMirror(\"\")\n    // (false)\n    // >>> checkIfStringContainsMirror(\"a\")\n    // (false)\n    // >>> checkIfStringContainsMirror(\"ab\")\n    // (true)\n    // >>> checkIfStringContainsMirror(\"a b\")\n    // (true)\n    // >>> checkIfStringContainsMirror(\"a b c\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293327,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpt_qe3xt2.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpt_qe3xt2.scala:21:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) < \u001b[31m\"a\"\u001b[0m || txt.charAt(txt.length - \u001b[31m1\u001b[0m) > \u001b[31m\"z\"\u001b[0m) && !(txt.split(\u001b[31m\" \"\u001b[0m).find(\u001b[36mx\u001b[0m => x.length > \u001b[31m0\u001b[0m) != -\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m<\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mChar\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double): Boolean\n\u001b[31m   |\u001b[0m (x: Float): Boolean\n\u001b[31m   |\u001b[0m (x: Long): Boolean\n\u001b[31m   |\u001b[0m (x: Int): Boolean\n\u001b[31m   |\u001b[0m (x: Char): Boolean\n\u001b[31m   |\u001b[0m (x: Short): Boolean\n\u001b[31m   |\u001b[0m (x: Byte): Boolean\n\u001b[31m   |\u001b[0mmatch arguments ((\u001b[32m\"a\"\u001b[0m : String))\n\u001b[31m\u001b[31m-- Error: /tmp/tmpt_qe3xt2.scala:47:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.split(\u001b[31m\" \"\u001b[0m).find(\u001b[36mx\u001b[0m => checkIfLastCharIsALetter(x)) != -\u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m Values of types Option[String] and Int cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt_qe3xt2.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt_qe3xt2.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        if (txt.length == 1) return false\n        if (txt.length > 1) {\n            if (isLetter(txt[txt.length - 1])) {\n                if (txt.length == 2) return true\n                if (txt.length > 2) {\n                    if (isLetter(txt[txt.length - 2])) return true\n                }\n            }\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie pie pie pie pie pie pie pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293322,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2w5ehc9e.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2w5ehc9e.scala:21:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mif\u001b[0m (isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m])) {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2w5ehc9e.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mif\u001b[0m (isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m])) {\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type -\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2w5ehc9e.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m                    \u001b[33mif\u001b[0m (isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m2\u001b[0m])) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2w5ehc9e.scala:24:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m                    \u001b[33mif\u001b[0m (isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m2\u001b[0m])) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Not found: type -\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2w5ehc9e.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if a given string is a\n    // permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293323,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp04t0kd11.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp04t0kd11.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp04t0kd11.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp04t0kd11.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp04t0kd11.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp04t0kd11.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie pi\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie pi e\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie pi e \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"\"))\n    // (false)\n    def checkIfStringContainsWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return isWord(txt)\n    }\n\n    // Create a function that returns true if a given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie pi\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie pi e\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie pi e \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"\"))\n    // (false)\n    def checkIfStringContainsWord2(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293323,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmmr4y7qt.scala:21:94 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.charAt(txt.length() - \u001b[31m1\u001b[0m) >= \u001b[31m'a'\u001b[0m && txt.charAt(txt.length() - \u001b[31m1\u001b[0m) <= \u001b[31m'z'\u001b[0m && !isWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                              ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: isWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmmr4y7qt.scala:44:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mreturn\u001b[0m isWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: isWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmmr4y7qt.scala:67:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m        \u001b[33mreturn\u001b[0m !\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: !\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z') && !(txt.charAt(txt.length - 1) >= 'A' && txt.charAt(txt.length - 1) <= 'Z') && !(txt.charAt(txt.length - 1) >= '0' && txt.charAt(txt.length - 1) <= '9') && !(txt.charAt(txt.length - 1) == ' ')\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        var words = txt.split(\" \")\n        for (var i = 0; i < words.length; i++) {\n            if (words[i].equals(words[words.length - 1 - i])) {\n                return true\n            }\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpo2rt650i.scala:46:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < words.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo2rt650i.scala:46:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < words.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpo2rt650i.scala:46:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < words.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo2rt650i.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo2rt650i.scala:46:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < words.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !isLetter(txt[txt.length - 1]) && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIf\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplu_20b_7.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplu_20b_7.scala:21:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplu_20b_7.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type -\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplu_20b_7.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplu_20b_7.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplu_20b_7.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !isLetter(txt.charAt(txt.length() - 1)) && !isWord(txt.substring(0, txt.length() - 1))\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"A man, a plan, a canal: Panama\")\n    // (true)\n    // >>> isPalindrome(\"race a car\")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (true)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return true\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"A man, a plan, a canal: Panama\")\n    // (true)\n    // >>> isWord(\"race a car\")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return isLetter(txt.charAt(0)) && isLetter(txt.charAt(txt.length() - 1))\n    }\n\n    // Create a function that returns true if the given string\n    // is a sentence and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isSentence(\"A man, a plan, a canal: Panama\")\n    // (true)\n    // >>> isSentence(\"race a car\")\n    // (false)\n    // >>> isSentence(\"\")\n    // (false)\n    def isSentence(txt : String) : Boolean = {\n        if (txt.length() == 0\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6s92f9wu.scala:70:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6s92f9wu.scala:21:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt.charAt(txt.length() - \u001b[31m1\u001b[0m)) && !isWord(txt.substring(\u001b[31m0\u001b[0m, txt.length() - \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6s92f9wu.scala:38:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6s92f9wu.scala:55:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m        \u001b[33mreturn\u001b[0m isLetter(txt.charAt(\u001b[31m0\u001b[0m)) && isLetter(txt.charAt(txt.length() - \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if a given string is a\n    // permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"ab\", \"ba\")\n    // (true)\n    // >>> isPermutation(\"ab\", \"ab\")\n    // (true)\n    // >>> isPermutation(\"ab\", \"abc\")\n    // (false)\n    // >>> isPermutation(\"\", \"\")\n\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293324,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_c8awex_.scala:88:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_c8awex_.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_c8awex_.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_c8awex_.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_c8awex_.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_c8awex_.scala:79:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (true)\n    def checkIfStringContainsPalindrome2(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n\n    // Create a function\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293324,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1whzwcvc.scala:90:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m90 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1whzwcvc.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1whzwcvc.scala:79:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1whzwcvc.scala:80:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1whzwcvc.scala:81:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1whzwcvc.scala:82:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"Pumpkin pie \"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt.substring(0, txt.length - 1))\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z' && checkIfLastCharIsALetter(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        if (txt.length == 1) return true\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"apple\", \"pale\")\n    // (true)\n    // >>> isPermutation(\"apple\", \"pale pie\")\n    // (\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpiv4o5nui.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiv4o5nui.scala:54:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiv4o5nui.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiv4o5nui.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiv4o5nui.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiv4o5nui.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !isLetter(txt[txt.length() - 1]) && !isPartOfWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a part of a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPartOfWord(\"apple\")\n    // (false)\n    // >>> isPartOfWord(\"apple pie\")\n    // (true)\n    // >>> isPartOfWord(\"apple pie \")\n    // (true)\n    // >>> isPartOfWord(\"\")\n    // (false)\n    def isPartOfWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (false)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !isPartOfWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam \")\n    // (true)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2k24o472.scala:21:39 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length() - \u001b[31m1\u001b[0m]) && !isPartOfWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       ']' expected, but '(' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2k24o472.scala:21:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length() - \u001b[31m1\u001b[0m]) && !isPartOfWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2k24o472.scala:74:47 --------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36misPalindrome\u001b[0m(\u001b[36mtxt\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mBoolean\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Found:    Unit\n\u001b[31m   |\u001b[0m                                               Required: Boolean\n\u001b[31m75 |\u001b[0m    }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string is a\n    // permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"apple\", \"papel\")\n    // (true)\n    // >>> isPermutation(\"apple\", \"papel \")\n    // (false)\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n    // >>> isPermutation(\"\", \" \")\n\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293326,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo153r4f1.scala:88:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo153r4f1.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo153r4f1.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo153r4f1.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo153r4f1.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo153r4f1.scala:79:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdzej_60n.scala:25)\n\tat Problem.main(tmpdzej_60n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return txt.charAt(txt.length - 1).isLetter() && !isWord(txt)\n        }\n    }\n\n    // Create a function that returns true if the given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return txt.split(\" \").length == 1\n        }\n    }\n\n    // Create a function that returns true if the given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return txt.equals(reverse(txt))\n        }\n    }\n\n    // Create a function that returns true if the given string is a\n    // permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPermutation(\"\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293327,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi2wsdi7u.scala:90:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m90 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpi2wsdi7u.scala:21:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mreturn\u001b[0m txt.charAt(txt.length - \u001b[31m1\u001b[0m).isLetter() && !isWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              \u001b[33mmethod\u001b[0m \u001b[35misLetter\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mRichChar\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi2wsdi7u.scala:61:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m            \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi2wsdi7u.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi2wsdi7u.scala:79:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi2wsdi7u.scala:80:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie pi\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie pi e\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie pi e \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"\"))\n    // (false)\n    def checkIfStringContainsWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie pi\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie pi e\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie pi e \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"\"))\n    // (false)\n    def checkIfStringContainsWord2(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293326,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq1r2yyy.scala:21:94 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.charAt(txt.length() - \u001b[31m1\u001b[0m) >= \u001b[31m'a'\u001b[0m && txt.charAt(txt.length() - \u001b[31m1\u001b[0m) <= \u001b[31m'z'\u001b[0m && !isWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                              ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: isWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq1r2yyy.scala:44:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mreturn\u001b[0m isWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: isWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq1r2yyy.scala:67:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m        \u001b[33mreturn\u001b[0m !\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: !\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"A man, a plan, a canal: Panama\")\n    // (true)\n    // >>> isPalindrome(\"race a car\")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (true)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            true\n        } else {\n            true\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"A man, a plan, a canal: Panama\", \"canal,man,plan,a\")\n    // (true)\n    // >>> isPermutation(\"A man, a plan, a canal: Panama\", \"canal,plan,man,a\")\n    // (false)\n    // >>> isPermutation(\"A man, a plan, a canal: Panama\", \"\")\n    // (true)\n    def isPermutation(txt : String, txt2 : String) : Boolean = {\n        if (txt.length == 0) {\n            true\n        } else {\n            true\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"A man, a plan, a canal: Panama\", \"canal,man,plan,a\")\n    // (true)\n    // >>> isPermutation(\"A man, a plan, a canal: Panama\", \"canal,plan,man,a\")\n    // (false)\n    // >>> isPermutation(\"A man, a\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpntxqg_75.scala:84:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpntxqg_75.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpntxqg_75.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpntxqg_75.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpntxqg_75.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpntxqg_75.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"Pumpkin pie \"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isInWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isInWord(\"apple\")\n    // (true)\n    // >>> isInWord(\"apple pie\")\n    // (true)\n    // >>> isInWord(\"apple pie \")\n    // (true)\n    // >>> isInWord(\"\")\n    // (false)\n    def isInWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isInWord(\"apple\")\n    // (true)\n    // >>> isInWord(\"apple pie\")\n    // (true)\n    // >>> isInWord(\"apple pie \")\n    // (true)\n    // >>> isInWord(\"\")\n    // (false)\n    def isInWord2(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isInWord(\"apple\")\n    // (true)\n    // >>> isInWord(\"apple pie\")\n    // (true)\n    // >>> isInWord(\"apple pie \")\n    // (true)\n    // >>> isInWord(\"\")\n    // (false)\n    def isInWord3(txt : String) : Boolean = {\n        if (\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293328,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmprch683nq.scala:75:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m        \u001b[33mif\u001b[0m (\n\u001b[31m\u001b[31m   |\u001b[0m            ^\u001b[0m\n\u001b[31m   |\u001b[0m            expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1).isLetter() && !isWord(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n    def isPer\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E019] Syntax Error: /tmp/tmphvop2k7k.scala:74:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36misPer\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m             ^\u001b[0m\n\u001b[31m   |\u001b[0m             Missing return type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphvop2k7k.scala:89:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphvop2k7k.scala:21:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m).isLetter() && !isWord(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              \u001b[33mmethod\u001b[0m \u001b[35misLetter\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mRichChar\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphvop2k7k.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphvop2k7k.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphvop2k7k.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        if (txt.length == 1) return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.charAt(txt.length - 1) == ' ') return false\n        if (txt.\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpik7uo515.scala:44:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (true)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if a given string is a\n    // permutation of another given string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"apple\", \"papel\")\n    // (true)\n    // >>> isPermutation(\"apple\", \"papel \")\n    // (false)\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n    def isPermutation(txt\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293329,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqito2hnc.scala:73:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ':' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqito2hnc.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqito2hnc.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqito2hnc.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqito2hnc.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqito2hnc.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqito2hnc.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z'\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        if (txt.length == 1) {\n            return true\n        }\n        if (txt.charAt(0) != txt.charAt(txt.length - 1)) {\n            return false\n        }\n        return isPalindrome(txt.substring(1, txt.length - 1))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp976vtydp.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp976vtydp.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp976vtydp.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp976vtydp.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp976vtydp.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp976vtydp.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"Pumpkin pie \"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return !(txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z') &&\n            !(txt.charAt(txt.length - 1) >= 'A' && txt.charAt(txt.length - 1) <= 'Z') &&\n            !(txt.charAt(txt.length - 1) >= '0' && txt.charAt(txt.length - 1) <= '9') &&\n            !(txt.charAt(txt.length - 1) == ' ')\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"\")\n    // (true)\n    // >>> isPalindrome(\"a\")\n    // (true)\n    // >>> isPalindrome(\"ab\")\n    // (true)\n    // >>> isPalindrome(\"abba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba\")\n    // (false)\n    // >>> isPalindrome(\"abab\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) return true\n        if (txt.length == 1) return true\n        if (txt.length == 2) return txt == txt.reverse()\n        if (txt.length % 2 == 0) {\n            return txt.substring(0, txt.length / 2).equals(txt.substring(txt.length / 2).reverse())\n        } else {\n            return txt.substring(0, txt.length / 2).equals(txt.substring(txt.length / 2).reverse()) &&\n                txt.substring(txt.length / 2).equals(txt.substring(0, txt.length / 2).reverse())\n        }\n    }\n\n    // Create a function that returns true if the given string\n\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293331,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9vic2yp6.scala:71:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9vic2yp6.scala:46:54 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mif\u001b[0m (txt.length == \u001b[31m2\u001b[0m) \u001b[33mreturn\u001b[0m txt == txt.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9vic2yp6.scala:48:96 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m txt.substring(\u001b[31m0\u001b[0m, txt.length / \u001b[31m2\u001b[0m).equals(txt.substring(txt.length / \u001b[31m2\u001b[0m).reverse())\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9vic2yp6.scala:50:96 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m            \u001b[33mreturn\u001b[0m txt.substring(\u001b[31m0\u001b[0m, txt.length / \u001b[31m2\u001b[0m).equals(txt.substring(txt.length / \u001b[31m2\u001b[0m).reverse()) &&\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9vic2yp6.scala:51:93 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m                txt.substring(txt.length / \u001b[31m2\u001b[0m).equals(txt.substring(\u001b[31m0\u001b[0m, txt.length / \u001b[31m2\u001b[0m).reverse())\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) %>= 97 && txt.charAt(txt.length - 1) %<= 122)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pi e\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pi e \"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"\"))\n    // (false)\n    def checkIfStringContainsWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length > 1\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pi e\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pi e \"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"\"))\n    // (false)\n    def checkIfStringContainsWord2(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length > 1\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293334,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9qgk0su5.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9qgk0su5.scala:21:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) %>= \u001b[31m97\u001b[0m && txt.charAt(txt.length - \u001b[31m1\u001b[0m) %<= \u001b[31m122\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               value %>= is not a member of Char - did you mean Char.>=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9qgk0su5.scala:21:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) %>= \u001b[31m97\u001b[0m && txt.charAt(txt.length - \u001b[31m1\u001b[0m) %<= \u001b[31m122\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         value && is not a member of Int\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9qgk0su5.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9qgk0su5.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9qgk0su5.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z'\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        if (txt.length == 1) return true\n        if (txt.charAt(0) != txt.charAt(txt.length - 1)) return false\n        return isPalindrome(txt.substring(1, txt.length - 1))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"abcd\", \"dcba\")\n    // (true)\n    // >>> isPerm\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5zuzbh5v.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5zuzbh5v.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5zuzbh5v.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5zuzbh5v.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5zuzbh5v.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5zuzbh5v.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"Pumpkin pie \"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return !(txt.charAt(txt.length - 1) % \"abcdefghijklmnopqrstuvwxyz\".toCharArray(0).length == 0) && !(txt.split(\" \").length > 1)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with \"pi\" and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfPiIsInTheString(\"apple pie\")\n    // (false)\n    // >>> checkIfPiIsInTheString(\"apple pie pi\")\n    // (true)\n    // >>> checkIfPiIsInTheString(\"apple pie pi e\")\n    // (true)\n    // >>> checkIfPiIsInTheString(\"apple pie pi e \")\n    // (false)\n    // >>> checkIfPiIsInTheString(\"\")\n    // (false)\n    def checkIfPiIsInTheString(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.split(\" \").find(s => s.startsWith(\"pi\")) != -1\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with \"pie\" and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfPieIsInTheString(\"apple pie\")\n    // (false)\n    // >>> checkIfPieIsInTheString(\"apple pie pie\")\n    // (true)\n    // >>> checkIfPieIsInTheString(\"apple pie pie e\")\n    // (true)\n    // >>> checkIfPieIsInTheString(\"apple pie pie e \")\n    // (false)\n    // >>> checkIfPieIsInTheString(\"\")\n    // (false)\n    def checkIfPieIsInTheString(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.split(\" \").find(s => s.startsWith(\"pie\"))\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpe3os6u9c.scala:19:87 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) % \u001b[31m\"abcdefghijklmnopqrstuvwxyz\"\u001b[0m.toCharArray(\u001b[31m0\u001b[0m).length == \u001b[31m0\u001b[0m) && !(txt.split(\u001b[31m\" \"\u001b[0m).length > \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0mtoo many arguments for \u001b[33mmethod\u001b[0m \u001b[35mtoCharArray\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mString\u001b[0m: (): Array[Char]\n\u001b[31m\u001b[31m-- Error: /tmp/tmpe3os6u9c.scala:39:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.split(\u001b[31m\" \"\u001b[0m).find(\u001b[36ms\u001b[0m => s.startsWith(\u001b[31m\"pi\"\u001b[0m)) != -\u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m Values of types Option[String] and Int cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe3os6u9c.scala:59:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.split(\u001b[31m\" \"\u001b[0m).find(\u001b[36ms\u001b[0m => s.startsWith(\u001b[31m\"pie\"\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    Option[String]\n\u001b[31m   |\u001b[0m               Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt.substring(0, txt.length - 1))\n        }\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z'\n        }\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord2(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z'\n        }\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> is\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293331,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplv9sz2ff.scala:88:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplv9sz2ff.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplv9sz2ff.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplv9sz2ff.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplv9sz2ff.scala:79:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplv9sz2ff.scala:80:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"Pumpkin pie \"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1).isLetter() && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if a given string is a\n    // permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"mam\")\n    // (false)\n    // >>> isPermutation(\"madam\", \"\")\n    // (false)\n    def isPermutation(txt1 : String, txt2 :\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293332,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf6rwo9q5.scala:73:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf6rwo9q5.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpf6rwo9q5.scala:21:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.charAt(txt.length() - \u001b[31m1\u001b[0m).isLetter() && !isWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              \u001b[33mmethod\u001b[0m \u001b[35misLetter\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mRichChar\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf6rwo9q5.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf6rwo9q5.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf6rwo9q5.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return !isLetter(txt[txt.length - 1]) && !isWord(txt)\n        }\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return isLetter(txt[0]) && isLetter(txt[txt.length - 1])\n        }\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isLetter(c : String) : Boolean = {\n        return c.isLetter()\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return isLetter(txt[0]) && isLetter(txt[txt.length - 1])\n\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293338,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpivi9npq_.scala:94:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m94 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpivi9npq_.scala:21:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Not found: type -\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpivi9npq_.scala:41:31 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m isLetter(txt[\u001b[31m0\u001b[0m]) && isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpivi9npq_.scala:41:63 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m isLetter(txt[\u001b[31m0\u001b[0m]) && isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: type -\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpivi9npq_.scala:58:17 ------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m        \u001b[33mreturn\u001b[0m c.isLetter()\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               value isLetter is not a member of String\n\u001b[31m\u001b[31m-- Error: /tmp/tmpivi9npq_.scala:77:31 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m            \u001b[33mreturn\u001b[0m isLetter(txt[\u001b[31m0\u001b[0m]) && isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pi e\")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z'\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam madam madam\")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        if (txt.length() == 1) {\n            return true\n        }\n        if (txt.charAt(0) != txt.charAt(txt.length() - 1)) {\n            return false\n        }\n        return isPalindrome(txt.substring(1, txt.length() - 1))\n    }\n\n    // Create a function that returns true if the given string\n    \n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293332,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpotopmwdq.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpotopmwdq.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpotopmwdq.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpotopmwdq.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpotopmwdq.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpotopmwdq.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"Pumpkin pie \"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !isLetter(txt.charAt(txt.length() - 1)) && !isLetter(txt.charAt(txt.length() - 2))\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"\")\n    // (true)\n    // >>> isPalindrome(\"a\")\n    // (true)\n    // >>> isPalindrome(\"ab\")\n    // (true)\n    // >>> isPalindrome(\"aba\")\n    // (false)\n    // >>> isPalindrome(\"abab\")\n    // (true)\n    // >>> isPalindrome(\"ababab\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return true\n        }\n        if (txt.length() == 1) {\n            return true\n        }\n        if (txt.length() == 2) {\n            return txt == txt.reverse()\n        }\n        if (txt.length() == 3) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt.length() == 4) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt.length() == 5) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt.length() == 6) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt.length() == 7) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt.length() == 8) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt.length() == 9) {\n            return txt == txt.reverse().substring(1)\n        }\n        if (txt.length\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7jcgszf0.scala:72:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7jcgszf0.scala:21:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt.charAt(txt.length() - \u001b[31m1\u001b[0m)) && !isLetter(txt.charAt(txt.length() - \u001b[31m2\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7jcgszf0.scala:48:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m            \u001b[33mreturn\u001b[0m txt == txt.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7jcgszf0.scala:51:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m            \u001b[33mreturn\u001b[0m txt == txt.reverse().substring(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7jcgszf0.scala:54:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m            \u001b[33mreturn\u001b[0m txt == txt.reverse().substring(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7jcgszf0.scala:57:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m            \u001b[33mreturn\u001b[0m txt == txt.reverse().substring(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z'\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord2(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z'\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    \n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293332,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcr2yjrt5.scala:88:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcr2yjrt5.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcr2yjrt5.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcr2yjrt5.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcr2yjrt5.scala:79:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcr2yjrt5.scala:80:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"Pumpkin pie \"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !isLetter(txt.charAt(txt.length() - 1)) && !isWord(txt.substring(0, txt.length() - 1))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie\", \"pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie\", \"pie\", \"pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie\", \"pie\", \"pie\", \"pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie\", \"pie\", \"pie\", \"pie\", \"pie\"))\n    // (false)\n    def checkIfStringContainsWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie\", \"pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie\", \"pie\", \"pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie\", \"pie\", \"pie\", \"pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie\", \"pie\", \"pie\", \"pie\", \"pie\"))\n    \n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293332,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpp76ea8ca.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp76ea8ca.scala:21:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt.charAt(txt.length() - \u001b[31m1\u001b[0m)) && !isWord(txt.substring(\u001b[31m0\u001b[0m, txt.length() - \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp76ea8ca.scala:44:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mreturn\u001b[0m isWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: isWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp76ea8ca.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp76ea8ca.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp76ea8ca.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        } else {\n            return !isLetter(txt.charAt(txt.length() - 1)) && !isWord(txt.substring(0, txt.length() - 1))\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        } else {\n            return isLetter(txt.charAt(0)) && isWord(txt.substring(1))\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a sentence and false otherwise.\n    // Note: \"sentence\" is a group of characters separated by space.\n    // Examples:\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie \")\n    // (true)\n    // >>> isSentence(\"apple pie \")\n    // (true)\n    // >>> isSentence(\"\")\n    // (false)\n    def isSentence(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        } else {\n            return isLetter(txt.charAt(0)) && isSentence(txt.substring(1))\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a paragraph and false otherwise.\n    // Note: \"paragraph\" is a group of characters separated by newline.\n    // Examples:\n    // >>> isParagraph(\"apple pie\")\n    // (true)\n    // >>> isParagraph(\"apple pie\\n\")\n    // (true)\n    // >>> isParagraph(\"apple pie\\n\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293332,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplnb_hnna.scala:88:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplnb_hnna.scala:21:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mreturn\u001b[0m !isLetter(txt.charAt(txt.length() - \u001b[31m1\u001b[0m)) && !isWord(txt.substring(\u001b[31m0\u001b[0m, txt.length() - \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplnb_hnna.scala:41:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m isLetter(txt.charAt(\u001b[31m0\u001b[0m)) && isWord(txt.substring(\u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplnb_hnna.scala:61:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m            \u001b[33mreturn\u001b[0m isLetter(txt.charAt(\u001b[31m0\u001b[0m)) && isSentence(txt.substring(\u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplnb_hnna.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplnb_hnna.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return !(txt.charAt(txt.length - 1).isLetter() && !isPartOfWord(txt))\n        }\n    }\n\n    // Create a function that returns true if the given string is\n    // a part of a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPartOfWord(\"apple\")\n    // (true)\n    // >>> isPartOfWord(\"apple pie\")\n    // (true)\n    // >>> isPartOfWord(\"apple pie \")\n    // (true)\n    // >>> isPartOfWord(\"\")\n    // (false)\n    def isPartOfWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return txt.contains(\" \")\n        }\n    }\n\n    // Create a function that returns true if the given string is\n    // a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam \")\n    // (true)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return isPalindromeHelper(txt, 0, txt.length - 1)\n        }\n    }\n\n    def isPalindromeHelper(txt : String, start : Int, end : Int) : Boolean = {\n        if (start == end) {\n            return true\n        } else if (start == end - 1) {\n            return txt.charAt(start) == txt.charAt(end)\n        } else {\n            return isPalindromeHelper(txt, start + 1, end) && txt.char\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293338,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0jy7_emf.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp0jy7_emf.scala:21:48 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m).isLetter() && !isPartOfWord(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              \u001b[33mmethod\u001b[0m \u001b[35misLetter\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mRichChar\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0jy7_emf.scala:71:66 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m            \u001b[33mreturn\u001b[0m isPalindromeHelper(txt, start + \u001b[31m1\u001b[0m, end) && txt.char\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          value char is not a member of String - did you mean txt.chars?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0jy7_emf.scala:86:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp0jy7_emf.scala:73:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m73 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) %>= 97 && txt.charAt(txt.length() - 1) %<= 122)\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a digit and is not a part of a word,\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsADigit((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsADigit((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"\"))\n    // (false)\n    def checkIfLastCharIsADigit(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) %>= 48 && txt.charAt(txt.length() - 1) %<= 57)\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a special character and is not a part\n    // of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsASpecialChar((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsASpecialChar((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsASpecialChar((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsASpecialChar((\"\"))\n    // (false)\n    def checkIfLastCharIsASpecialChar(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) %>= 33 && txt.\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293339,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9s6jykss.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9s6jykss.scala:21:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) %>= \u001b[31m97\u001b[0m && txt.charAt(txt.length() - \u001b[31m1\u001b[0m) %<= \u001b[31m122\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               value %>= is not a member of Char - did you mean Char.>=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9s6jykss.scala:21:53 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) %>= \u001b[31m97\u001b[0m && txt.charAt(txt.length() - \u001b[31m1\u001b[0m) %<= \u001b[31m122\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         value && is not a member of Int\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9s6jykss.scala:41:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) %>= \u001b[31m48\u001b[0m && txt.charAt(txt.length() - \u001b[31m1\u001b[0m) %<= \u001b[31m57\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               value %>= is not a member of Char - did you mean Char.>=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9s6jykss.scala:41:53 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) %>= \u001b[31m48\u001b[0m && txt.charAt(txt.length() - \u001b[31m1\u001b[0m) %<= \u001b[31m57\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         value && is not a member of Int\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9s6jykss.scala:61:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) %>= \u001b[31m33\u001b[0m && txt.\n\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) < 'a' || txt.charAt(txt.length() - 1) > 'z') && !(txt.split(\" \").length > 1)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with \"pi\" and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPi((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsPi((\"apple pi e\"))\n    // (true)\n    // >>> checkIfStringContainsPi((\"apple pi e \"))\n    // (false)\n    // >>> checkIfStringContainsPi((\"\"))\n    // (false)\n    def checkIfStringContainsPi(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").find(s => s.startsWith(\"pi\")) != -1\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with \"pie\" and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPie((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsPie((\"apple pi e\"))\n    // (false)\n    // >>> checkIfStringContainsPie((\"apple pi e \"))\n    // (true)\n    // >>> checkIfStringContainsPie((\"\"))\n    // (false)\n    def checkIfStringContainsPie(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").find(s => s.startsWith(\"pie\")) != -1\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with \"pie\"\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293339,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj_2aedzy.scala:80:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj_2aedzy.scala:41:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.split(\u001b[31m\" \"\u001b[0m).find(\u001b[36ms\u001b[0m => s.startsWith(\u001b[31m\"pi\"\u001b[0m)) != -\u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m Values of types Option[String] and Int cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj_2aedzy.scala:61:15 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.split(\u001b[31m\" \"\u001b[0m).find(\u001b[36ms\u001b[0m => s.startsWith(\u001b[31m\"pie\"\u001b[0m)) != -\u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m Values of types Option[String] and Int cannot be compared with == or !=\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj_2aedzy.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj_2aedzy.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj_2aedzy.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not f",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) < 'a' || txt.charAt(txt.length - 1) > 'z') && !(txt.split(\" \").exists(x => x.length > 1))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with \"pi\" and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPi((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsPi((\"apple pi e\"))\n    // (true)\n    // >>> checkIfStringContainsPi((\"apple pi e \"))\n    // (false)\n    // >>> checkIfStringContainsPi((\"\"))\n    // (false)\n    def checkIfStringContainsPi(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").exists(x => x.startsWith(\"pi\"))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with \"pie\" and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPie((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsPie((\"apple pi e\"))\n    // (false)\n    // >>> checkIfStringContainsPie((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsPie((\"\"))\n    // (false)\n    def checkIfStringContainsPie(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").exists(x => x.startsWith(\"pie\"))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that starts with \"pie\" and false\n\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgt2ce4mq.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgt2ce4mq.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgt2ce4mq.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgt2ce4mq.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgt2ce4mq.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgt2ce4mq.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"Pumpkin pie \"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"apple pi\")\n    // (false)\n    // >>> isWord(\"apple pi e\")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (true)\n    // >>> isPalindrome(\"madam madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam madam madam\")\n    // (true)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    //\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpk3qazj62.scala:88:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk3qazj62.scala:67:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk3qazj62.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk3qazj62.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk3qazj62.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk3qazj62.scala:79:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1 && txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"dama \")\n    // (false)\n    // >>> isPermutation(\"madam\", \"dama madam\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293289,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfsgjljzp.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfsgjljzp.scala:59:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.split(\u001b[31m\" \"\u001b[0m).length == \u001b[31m1\u001b[0m && txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfsgjljzp.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfsgjljzp.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfsgjljzp.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfsgjljzp.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am\")\n    // (true)\n    // >>> isPalindrome(\"madam am \")\n    // (true)\n    // >>> isPalindrome(\"madam am madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am madam am\")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if a given string is a\n    // permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"apple\", \"pale\")\n    // (true)\n    // >>> isPermutation(\"apple\",\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpozqh4tyl.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpozqh4tyl.scala:63:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpozqh4tyl.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpozqh4tyl.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpozqh4tyl.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpozqh4tyl.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord2(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord3(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293341,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptnchpoi0.scala:93:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m93 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptnchpoi0.scala:92:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m92 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmptnchpoi0.scala:79:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m79 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1).isLetter() && !isWord(txt))\n    }\n\n    // Create a function that returns true if the given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string is a\n    // permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n    def isPer\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293337,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E019] Syntax Error: /tmp/tmp77rc6qhb.scala:74:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36misPer\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m             ^\u001b[0m\n\u001b[31m   |\u001b[0m             Missing return type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp77rc6qhb.scala:89:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp77rc6qhb.scala:21:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m).isLetter() && !isWord(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              \u001b[33mmethod\u001b[0m \u001b[35misLetter\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mRichChar\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp77rc6qhb.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp77rc6qhb.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp77rc6qhb.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPer\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptrwn0bw6.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptrwn0bw6.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptrwn0bw6.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptrwn0bw6.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptrwn0bw6.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptrwn0bw6.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !isLetter(txt.charAt(txt.length() - 1)) && !isWord(txt.substring(0, txt.length() - 1))\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return isLetter(txt.charAt(0)) && isLetter(txt.charAt(txt.length() - 1)) && !isWord(txt.substring(1, txt.length() - 1))\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord2(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return isLetter(txt.charAt(0)) && isLetter(txt.charAt(txt.length() - 1)) && !isWord2(txt.substring(1, txt.length() - 1))\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293337,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjx_z_kps.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjx_z_kps.scala:21:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt.charAt(txt.length() - \u001b[31m1\u001b[0m)) && !isWord(txt.substring(\u001b[31m0\u001b[0m, txt.length() - \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjx_z_kps.scala:40:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mreturn\u001b[0m isLetter(txt.charAt(\u001b[31m0\u001b[0m)) && isLetter(txt.charAt(txt.length() - \u001b[31m1\u001b[0m)) && !isWord(txt.substring(\u001b[31m1\u001b[0m, txt.length() - \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjx_z_kps.scala:59:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m isLetter(txt.charAt(\u001b[31m0\u001b[0m)) && isLetter(txt.charAt(txt.length() - \u001b[31m1\u001b[0m)) && !isWord2(txt.substring(\u001b[31m1\u001b[0m, txt.length() - \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjx_z_kps.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjx_z_kps.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"dama m\")\n    // (false)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293337,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxs4idey2.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxs4idey2.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxs4idey2.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxs4idey2.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxs4idey2.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxs4idey2.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !isLetter(txt[txt.length - 1]) && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return isLetter(txt[0]) && !isLetter(txt[txt.length - 1])\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt == reverse(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"apple\", \"pale\")\n    // (true)\n    // >>> isPermutation(\"apple\", \"pale pie\")\n    // (false)\n    // >>> isPermutation(\"apple\", \"pale pie \")\n    // (false)\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n    def\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293339,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm61i77k2.scala:75:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm61i77k2.scala:89:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm61i77k2.scala:21:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm61i77k2.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type -\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm61i77k2.scala:40:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mreturn\u001b[0m isLetter(txt[\u001b[31m0\u001b[0m]) && !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpm61i77k2.scala:40:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mreturn\u001b[0m isLetter(txt[\u001b[31m0\u001b[0m]) && !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm61i77k2.scala:59:22 --------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am\")\n    // (true)\n    // >>> isPalindrome(\"madam am \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1 && txt.equals(new StringBuilder(txt).reverse().toString())\n    }\n\n    // Create a function that returns true if a given string is a\n    // permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"apple\", \"papel\")\n    // (true)\n    // >>> isPermutation(\"apple\", \"papel \")\n    // (false)\n    // >>> isPerm\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293339,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpn7pjfhhd.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpn7pjfhhd.scala:59:86 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.split(\u001b[31m\" \"\u001b[0m).length == \u001b[31m1\u001b[0m && txt.equals(\u001b[33mnew\u001b[0m \u001b[35mStringBuilder\u001b[0m(txt).reverse().toString())\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringBuilder\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn7pjfhhd.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn7pjfhhd.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn7pjfhhd.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn7pjfhhd.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1).isLetter() && !isWord(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293339,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_v1sto1w.scala:89:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp_v1sto1w.scala:21:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m).isLetter() && !isWord(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              \u001b[33mmethod\u001b[0m \u001b[35misLetter\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mRichChar\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_v1sto1w.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_v1sto1w.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_v1sto1w.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_v1sto1w.scala:79:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1 && txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293339,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpb6fayaur.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb6fayaur.scala:59:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.split(\u001b[31m\" \"\u001b[0m).length == \u001b[31m1\u001b[0m && txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb6fayaur.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb6fayaur.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb6fayaur.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb6fayaur.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") && !(txt.charAt(txt.length() - 1) == \" \") &&\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpotcz8ef_.scala:21:1106 -------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) && !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) &&\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) < 65 || txt.charAt(txt.length() - 1) > 90) && !(txt.charAt(txt.length() - 1) > 122 && txt.charAt(txt.length() - 1) < 127) && !(txt.charAt(txt.length() - 1) > 47 && txt.charAt(txt.length() - 1) < 58)\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a digit and false otherwise.\n    // Note: \"digit\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsADigit((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsADigit((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"\"))\n    // (false)\n    def checkIfLastCharIsADigit(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) < 48 || txt.charAt(txt.length() - 1) > 57\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a lowercase character and false otherwise.\n    // Note: \"lowercase\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALowercase((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALowercase((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALowercase((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALowercase((\"\"))\n    // (false)\n    def checkIfLastCharIsALowercase(txt : String) : Boolean = {\n        if (\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293340,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpdg48lthp.scala:56:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m        \u001b[33mif\u001b[0m (\n\u001b[31m\u001b[31m   |\u001b[0m            ^\u001b[0m\n\u001b[31m   |\u001b[0m            expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return !(txt.charAt(txt.length - 1) == ' ') && !(txt.charAt(txt.length - 1) == '\\n') && !(txt.charAt(txt.length - 1) == '\\r') && !(txt.charAt(txt.length - 1) == '\\t') && !(txt.charAt(txt.length - 1) == '\\b') && !(txt.charAt(txt.length - 1) == '\\f') && !(txt.charAt(txt.length - 1) == '\\a') && !(txt.charAt(txt.length - 1) == '\\v') && !(txt.charAt(txt.length - 1) == '\\0') && !(txt.charAt(txt.length - 1) == '\\f') && !(txt.charAt(txt.length - 1) == '\\b') && !(txt.charAt(txt.length - 1) == '\\a') && !(txt.charAt(txt.length - 1) == '\\v') && !(txt.charAt(txt.length - 1) == '\\0') && !(txt.charAt(txt.length - 1) == '\\f') && !(txt.charAt(txt.length - 1) == '\\b') && !(txt.charAt(txt.length - 1) == '\\a') && !(txt.charAt(txt.length - 1) == '\\v') && !(txt.charAt(txt.length - 1) == '\\0') && !(txt.charAt(txt.length - 1) == '\\f') && !(txt.charAt(txt.length - 1) == '\\b') && !(txt.charAt(txt.length - 1) == '\\a') && !(txt.charAt(txt.length - 1) == '\\v') && !(txt.charAt(txt.length - 1) == '\\0') && !(txt.charAt(txt.length - 1) == '\\f') && !(txt.charAt(txt.length - 1) == '\\\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293340,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpszgn39xo.scala:21:298 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m' '\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m'\\n'\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m'\\r'\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m'\\t'\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m'\\b'\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m'\\f'\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m'\\a'\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m'\\v'\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m'\\0'\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m'\\f'\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m'\\b'\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m'\\a'\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m'\\v'\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m'\\0'\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m'\\f'\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m'\\b'\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m'\\a'\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m'\\v'\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m'\\0'\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m'\\f'\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m'\\b'\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m'\\a'\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m'\\v'\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m'\\0'\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m'\\f'\u001b[0m) && !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) == '\\\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                invalid",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !isLetter(txt[txt.length() - 1]) && !isPartOfWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a part of a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPartOfWord(\"apple\")\n    // (false)\n    // >>> isPartOfWord(\"apple pie\")\n    // (true)\n    // >>> isPartOfWord(\"apple pie \")\n    // (true)\n    // >>> isPartOfWord(\"\")\n    // (false)\n    def isPartOfWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !isPartOfWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293342,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpc8d9a7bm.scala:21:39 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length() - \u001b[31m1\u001b[0m]) && !isPartOfWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       ']' expected, but '(' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc8d9a7bm.scala:21:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length() - \u001b[31m1\u001b[0m]) && !isPartOfWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc8d9a7bm.scala:74:47 --------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36misPalindrome\u001b[0m(\u001b[36mtxt\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mBoolean\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Found:    Unit\n\u001b[31m   |\u001b[0m                                               Required: Boolean\n\u001b[31m75 |\u001b[0m    }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdzej_60n.scala:25)\n\tat Problem.main(tmpdzej_60n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) < 'a' || txt.charAt(txt.length - 1) > 'z') &&\n            !(txt.split(\" \").exists(x => x.length > 1))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"ab\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"abba\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"abba bca\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"abba bca bcb\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"abba bca bcb cba\")\n    // (false)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").exists(x => checkIfStringIsPalindrome(x))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Examples:\n    // >>> checkIfStringIsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringIsPalindrome(\"a\")\n    // (true)\n    // >>> checkIfStringIsPalindrome(\"ab\")\n    // (true)\n    // >>> checkIfStringIsPalindrome(\"abba\")\n    // (true)\n    // >>> checkIfStringIsPalindrome(\"abba bca\")\n    // (true)\n    // >>> checkIfStringIsPalindrome(\"abba bca bcb\")\n    // (true)\n    // >>> checkIf\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293342,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0xc8_qny.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0xc8_qny.scala:47:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.split(\u001b[31m\" \"\u001b[0m).exists(\u001b[36mx\u001b[0m => checkIfStringIsPalindrome(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Not found: checkIfStringIsPalindrome\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0xc8_qny.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0xc8_qny.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0xc8_qny.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0xc8_qny.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) %>= 97 && txt.charAt(txt.length - 1) %<= 122)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> containsAtLeastOneWord((\"apple pie\"))\n    // (true)\n    // >>> containsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> containsAtLeastOneWord((\"apple pi e\"))\n    // (true)\n    // >>> containsAtLeastOneWord((\"apple pi e \"))\n    // (true)\n    // >>> containsAtLeastOneWord((\"\"))\n    // (false)\n    def containsAtLeastOneWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length > 0\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> containsAtLeastOneWord2((\"apple pie\"))\n    // (true)\n    // >>> containsAtLeastOneWord2((\"apple pie \"))\n    // (true)\n    // >>> containsAtLeastOneWord2((\"apple pi e\"))\n    // (true)\n    // >>> containsAtLeastOneWord2((\"apple pi e \"))\n    // (true)\n    // >>> containsAtLeastOneWord2((\"\"))\n    // (false)\n    def containsAtLeastOneWord2(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length > 0\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1_0l0ugi.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1_0l0ugi.scala:21:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) %>= \u001b[31m97\u001b[0m && txt.charAt(txt.length - \u001b[31m1\u001b[0m) %<= \u001b[31m122\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               value %>= is not a member of Char - did you mean Char.>=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1_0l0ugi.scala:21:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) %>= \u001b[31m97\u001b[0m && txt.charAt(txt.length - \u001b[31m1\u001b[0m) %<= \u001b[31m122\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         value && is not a member of Int\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1_0l0ugi.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1_0l0ugi.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1_0l0ugi.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z') &&\n            !(txt.charAt(txt.length - 1) >= 'A' && txt.charAt(txt.length - 1) <= 'Z') &&\n            !(txt.charAt(txt.length - 1) >= '0' && txt.charAt(txt.length - 1) <= '9') &&\n            !(txt.charAt(txt.length - 1) == ' ')\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        var words = txt.split(\" \")\n        for (var i = 0; i < words.length; i++) {\n            var word = words[i]\n            if (word.length == 0) {\n                continue\n            }\n            if (isPalindrome(word)) {\n                return true\n            }\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    \n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpr23xca42.scala:48:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < words.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpr23xca42.scala:48:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < words.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpr23xca42.scala:48:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < words.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpr23xca42.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr23xca42.scala:48:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < words.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        if (txt.length() == 1) {\n            return true\n        }\n        if (txt.length() == 2) {\n            return txt == txt.reverse()\n        }\n        if (txt.length() % 2 == 0) {\n            return txt.substring(0, txt.length() / 2).equals(txt.substring(txt.length() / 2, txt.length()))\n        } else {\n            return txt.substring(0, txt.length() / 2).equals(txt.substring(txt.length()\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzuxn2a7n.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzuxn2a7n.scala:84:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzuxn2a7n.scala:63:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m            \u001b[33mreturn\u001b[0m txt == txt.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzuxn2a7n.scala:83:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpzuxn2a7n.scala:70:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m70 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return false\n        if (txt.charAt(txt.length - 1) == \" \") return\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293316,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzxl3tsfj.scala:19:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzxl3tsfj.scala:20:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzxl3tsfj.scala:21:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzxl3tsfj.scala:22:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzxl3tsfj.scala:23:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzxl3tsfj.scala:24:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mre",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") return false\n        if (txt.length() == 1) return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0vajqg_s.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0vajqg_s.scala:20:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0vajqg_s.scala:21:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0vajqg_s.scala:22:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0vajqg_s.scala:23:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0vajqg_s.scala:24:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String canno",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n    def isPerm\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293343,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E019] Syntax Error: /tmp/tmp2qpkuwmg.scala:68:14 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36misPerm\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m              ^\u001b[0m\n\u001b[31m   |\u001b[0m              Missing return type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2qpkuwmg.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2qpkuwmg.scala:53:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2qpkuwmg.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2qpkuwmg.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2qpkuwmg.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-expla",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    //\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293343,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpv0fj2vty.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv0fj2vty.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv0fj2vty.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv0fj2vty.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv0fj2vty.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv0fj2vty.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) return false\n        return !(txt.charAt(txt.length() - 1) %>= 97 && txt.charAt(txt.length() - 1) %<= 122)\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdb7p610g.scala:19:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) %>= \u001b[31m97\u001b[0m && txt.charAt(txt.length() - \u001b[31m1\u001b[0m) %<= \u001b[31m122\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               value %>= is not a member of Char - did you mean Char.>=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdb7p610g.scala:19:53 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m) %>= \u001b[31m97\u001b[0m && txt.charAt(txt.length() - \u001b[31m1\u001b[0m) %<= \u001b[31m122\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         value && is not a member of Int\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n        }\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return txt.split(\" \").length == 1\n        }\n    }\n\n    // Create a function that returns true if a given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return txt.split(\" \").length == 1 && txt.equals(reverse(txt))\n        }\n    }\n\n    // Create a function that returns true if a given string is a\n    // mirror image of itself (reversed words) and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isMirror(\"madam\")\n    // (true)\n    // >>> isMirror(\"madam am I am madam\")\n    //\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293343,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6i5mlis_.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6i5mlis_.scala:61:60 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m            \u001b[33mreturn\u001b[0m txt.split(\u001b[31m\" \"\u001b[0m).length == \u001b[31m1\u001b[0m && txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6i5mlis_.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6i5mlis_.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6i5mlis_.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6i5mlis_.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1 && txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"abcd\", \"cdab\")\n    // (true)\n    // >>> isPermutation(\"abcd\", \"abcd\")\n    // (true)\n    // >>> isPermutation(\"abcd\", \"abdc\")\n    \n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293344,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp79pyzezg.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp79pyzezg.scala:59:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.split(\u001b[31m\" \"\u001b[0m).length == \u001b[31m1\u001b[0m && txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp79pyzezg.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp79pyzezg.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp79pyzezg.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp79pyzezg.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pi e\")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pi e\")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord2(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pi e\")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord3(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        \n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxchp0ydm.scala:75:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m        \u001b[33mif\u001b[0m (txt.length == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: Boolean\n\u001b[31m   |\u001b[0m        Maybe you are missing an else part for the conditional?\n\u001b[31m76 |\u001b[0m            \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m77 |\u001b[0m        }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a digit and false otherwise.\n    // Note: \"digit\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsADigit((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsADigit((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"\"))\n    // (false)\n    def checkIfLastCharIsADigit(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a lowercase character and false otherwise.\n    // Note: \"lowercase\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALowercase((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALowercase((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALowercase((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALowercase((\"\"))\n    // (false)\n    def checkIfLastCharIsALowercase(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is an uppercase character and false otherwise.\n    // Note: \"uppercase\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsAnUppercase((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsAnUppercase((\"apple pi e\"))\n    // (true\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpflx02xyj.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpflx02xyj.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpflx02xyj.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpflx02xyj.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpflx02xyj.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpflx02xyj.scala:79:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"Pumpkin pie \"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord2(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord3(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return t\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3f3tizbw.scala:78:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m        \u001b[33mreturn\u001b[0m t\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: t\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") return false\n        if (txt.length() == 1) return true\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.charAt(txt.length() - 1) == \" \") return false\n        if (txt.\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293351,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpu_2yfr3f.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpu_2yfr3f.scala:20:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpu_2yfr3f.scala:21:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpu_2yfr3f.scala:22:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpu_2yfr3f.scala:23:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmpu_2yfr3f.scala:24:12 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length() - \u001b[31m1\u001b[0m) == \u001b[31m\" \"\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Values of types Char and String canno",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return !isLetter(txt[txt.length - 1])\n        }\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a digit and false otherwise.\n    // Note: \"digit\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsADigit((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsADigit((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"\"))\n    // (false)\n    def checkIfLastCharIsADigit(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return isDigit(txt[txt.length - 1])\n        }\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a space and false otherwise.\n    // Note: \"space\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsASpace((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsASpace((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsASpace((\"apple pi e \"))\n    // (true)\n    // >>> checkIfLastCharIsASpace((\"\"))\n    // (false)\n    def checkIfLastCharIsASpace(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return isSpace(txt[txt.length - 1])\n        }\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a period and false otherwise.\n    // Note: \"period\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsAPeriod((\"apple pie\"))\n    // (false)\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpruc3ppux.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpruc3ppux.scala:21:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpruc3ppux.scala:21:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Not found: type -\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpruc3ppux.scala:41:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m isDigit(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: isDigit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpruc3ppux.scala:41:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m isDigit(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: type -\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpruc3ppux.scala:61:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m            \u001b[33mreturn\u001b[0m isSpace(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord2(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord3(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return t\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3f3tizbw.scala:78:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m        \u001b[33mreturn\u001b[0m t\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: t\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"ab\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"ab cd\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"ab cd ef\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"ab cd ef gh\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"ab cd ef gh ij\")\n    // (false)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"ab\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"ab cd\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"ab cd ef\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"ab cd ef gh\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"ab cd ef gh ij\")\n    // (false)\n    def checkIf\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E019] Syntax Error: /tmp/tmprt_c3p9t.scala:71:15 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mcheckIf\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               Missing return type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprt_c3p9t.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprt_c3p9t.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprt_c3p9t.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprt_c3p9t.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprt_c3p9t.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation availa",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) < \"a\" || txt.charAt(txt.length - 1) > \"z\") && !(txt.split(\" \").length > 1)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        var words = txt.split(\" \")\n        for (i <- 0 until words.length - 1) {\n            if (words[i].equals(words[words.length - 1 - i])) {\n                return true\n            }\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphs8teow7.scala:82:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmphs8teow7.scala:21:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) < \u001b[31m\"a\"\u001b[0m || txt.charAt(txt.length - \u001b[31m1\u001b[0m) > \u001b[31m\"z\"\u001b[0m) && !(txt.split(\u001b[31m\" \"\u001b[0m).length > \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m<\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mChar\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double): Boolean\n\u001b[31m   |\u001b[0m (x: Float): Boolean\n\u001b[31m   |\u001b[0m (x: Long): Boolean\n\u001b[31m   |\u001b[0m (x: Int): Boolean\n\u001b[31m   |\u001b[0m (x: Char): Boolean\n\u001b[31m   |\u001b[0m (x: Short): Boolean\n\u001b[31m   |\u001b[0m (x: Byte): Boolean\n\u001b[31m   |\u001b[0mmatch arguments ((\u001b[32m\"a\"\u001b[0m : String))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphs8teow7.scala:49:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            \u001b[33mif\u001b[0m (words[\u001b[35mi\u001b[0m].equals(words[words.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m \u001b[35m-\u001b[0m \u001b[35mi\u001b[0m])) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphs8teow7.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphs8teow7.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        if (txt.length == 1) return true\n        if (txt.charAt(txt.length - 1) %>= 97 && txt.charAt(txt.length - 1) %<= 122) return true\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"\")\n    // (true)\n    // >>> isPalindrome(\"a\")\n    // (true)\n    // >>> isPalindrome(\"racecar\")\n    // (true)\n    // >>> isPalindrome(\"racecar \")\n    // (false)\n    // >>> isPalindrome(\"race car\")\n    // (true)\n    // >>> isPalindrome(\"race car \")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) return true\n        if (txt.length == 1) return true\n        if (txt.length == 2) return txt.equals(txt.reverse())\n        if (txt.length % 2 == 0) {\n            return txt.substring(0, txt.length / 2).equals(txt.substring(txt.length / 2, txt.length))\n        } else {\n            return txt.substring(0, txt.length / 2).equals(txt.substring(txt.length / 2, txt.length))\n        }\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n    // >>> isPermutation(\"a\", \"a\")\n    // (true)\n    // >>> isPermutation(\"a\", \"b\")\n    // (false)\n    // >>> isPermutation(\"ab\", \"ba\")\n    // (true)\n    //\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293351,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphee1tuh_.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphee1tuh_.scala:20:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length - \u001b[31m1\u001b[0m) %>= \u001b[31m97\u001b[0m && txt.charAt(txt.length - \u001b[31m1\u001b[0m) %<= \u001b[31m122\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value %>= is not a member of Char - did you mean Char.>=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphee1tuh_.scala:20:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mif\u001b[0m (txt.charAt(txt.length - \u001b[31m1\u001b[0m) %>= \u001b[31m97\u001b[0m && txt.charAt(txt.length - \u001b[31m1\u001b[0m) %<= \u001b[31m122\u001b[0m) \u001b[33mreturn\u001b[0m \u001b[31mtrue\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         value && is not a member of Int\n\u001b[31m\u001b[31m-- Error: /tmp/tmphee1tuh_.scala:43:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mif\u001b[0m (txt.length == \u001b[31m2\u001b[0m) \u001b[33mreturn\u001b[0m txt.equals(txt.reverse())\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphee1tuh_.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphee1tuh_.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isInWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isInWord(\"apple pie\")\n    // (false)\n    // >>> isInWord(\"apple pie \")\n    // (true)\n    // >>> isInWord(\"apple pie pi\")\n    // (true)\n    // >>> isInWord(\"\")\n    // (false)\n    def isInWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if the given string\n    // contains a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> containsWord(\"apple pie\")\n    // (false)\n    // >>> containsWord(\"apple pie \")\n    // (true)\n    // >>> containsWord(\"apple pie pi\")\n    // (true)\n    // >>> containsWord(\"\")\n    // (false)\n    def containsWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if the given string\n    // contains a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> containsWord(\"apple pie\")\n    // (false)\n    // >>> containsWord(\"apple pie \")\n    // (true)\n    // >>> containsWord(\"apple pie pi\")\n    // (true)\n    // >>> containsWord(\"\")\n    // (false)\n    def containsWord2(txt : String) : Boolean = {\n        if (txt.length == 0\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2ulpuea4.scala:76:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1).isLetter() && txt.lastIndexOf(\" \") == -1)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"apple pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie \")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").filter(x => checkIfLastCharIsALetter(x)).exists(x => x.equals(reverse(x)))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"apple pie\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"apple pie \")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    def checkIfStringContainsPalindrome2(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").filter(x => checkIfLastCharIsALetter(x)).exists(x => x.equals(reverse(x)))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    //\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxmgyjx1h.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpxmgyjx1h.scala:21:46 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length() - \u001b[31m1\u001b[0m).isLetter() && txt.lastIndexOf(\u001b[31m\" \"\u001b[0m) == -\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              \u001b[33mmethod\u001b[0m \u001b[35misLetter\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mRichChar\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxmgyjx1h.scala:39:92 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.split(\u001b[31m\" \"\u001b[0m).filter(\u001b[36mx\u001b[0m => checkIfLastCharIsALetter(x)).exists(\u001b[36mx\u001b[0m => x.equals(reverse(x)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxmgyjx1h.scala:57:92 ------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.split(\u001b[31m\" \"\u001b[0m).filter(\u001b[36mx\u001b[0m => checkIfLastCharIsALetter(x)).exists(\u001b[36mx\u001b[0m => x.equals(reverse(x)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxmgyjx1h.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt == \"\") {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPermutation(\"\",\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293288,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpe6ljfjfh.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6ljfjfh.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6ljfjfh.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6ljfjfh.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6ljfjfh.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6ljfjfh.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        if (txt.length == 1) return true\n        if (txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z') {\n            for (i <- 0 until txt.length - 1) {\n                if (txt.charAt(i) == ' ') continue\n                if (txt.charAt(i) >= 'a' && txt.charAt(i) <= 'z') continue\n                return false\n            }\n            return true\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: A palindrome is a word or a phrase that is the same\n    // forward and backward.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam madam madam\")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        if (txt.length == 1) return true\n        if (txt.length == 2) return txt == txt.reverse()\n        if (txt.length == 3) return txt == txt.reverse().substring(1)\n        if (txt.length == 4) return txt == txt.reverse().substring(1)\n        if (txt.length == 5) return txt == txt.reverse().substring(2)\n        if (txt.length == 6) return txt == txt.reverse().substring(2)\n        if (txt.length == 7) return txt == txt.reverse().substring(3)\n        if (txt.length == 8) return txt == txt.reverse().substring(3)\n        if (txt.length == 9) return\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2el8bs82.scala:22:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                \u001b[33mif\u001b[0m (txt.charAt(i) == \u001b[31m' '\u001b[0m) continue\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: continue\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2el8bs82.scala:23:66 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                \u001b[33mif\u001b[0m (txt.charAt(i) >= \u001b[31m'a'\u001b[0m && txt.charAt(i) <= \u001b[31m'z'\u001b[0m) continue\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Not found: continue\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2el8bs82.scala:49:54 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mif\u001b[0m (txt.length == \u001b[31m2\u001b[0m) \u001b[33mreturn\u001b[0m txt == txt.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2el8bs82.scala:50:54 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mif\u001b[0m (txt.length == \u001b[31m3\u001b[0m) \u001b[33mreturn\u001b[0m txt == txt.reverse().substring(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2el8bs82.scala:51:54 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        \u001b[33mif\u001b[0m (txt.length == \u001b[31m4\u001b[0m) \u001b[33mreturn\u001b[0m txt == txt.reverse().substring(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) < 'a' || txt.charAt(txt.length - 1) > 'z') && !(txt.split(\" \").exists(s => s.length > 0 && s.charAt(s.length - 1) < 'a' || s.charAt(s.length - 1) > 'z'))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e f g\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        var words = txt.split(\" \")\n        for (var i = 0; i < words.length; i++) {\n            if (words[i].length > 0 && isPalindrome(words[i])) {\n                return true\n            }\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmprgsl27zc.scala:49:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < words.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprgsl27zc.scala:49:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < words.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmprgsl27zc.scala:49:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < words.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprgsl27zc.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprgsl27zc.scala:49:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < words.length; i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) %>= 97 && txt.charAt(txt.length - 1) %<= 122)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> containsAtLeastOneWord((\"apple pie\"))\n    // (true)\n    // >>> containsAtLeastOneWord((\"apple pie \"))\n    // (true)\n    // >>> containsAtLeastOneWord((\"apple pie pi\"))\n    // (true)\n    // >>> containsAtLeastOneWord((\"apple pie pi e\"))\n    // (true)\n    // >>> containsAtLeastOneWord((\"apple pie pi e \"))\n    // (true)\n    // >>> containsAtLeastOneWord((\"\"))\n    // (false)\n    def containsAtLeastOneWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length > 0\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> containsAtLeastOneWord2((\"apple pie\"))\n    // (true)\n    // >>> containsAtLeastOneWord2((\"apple pie \"))\n    // (true)\n    // >>> containsAtLeastOneWord2((\"apple pie pi\"))\n    // (true)\n    // >>> containsAtLeastOneWord2((\"apple pie pi e\"))\n    // (true)\n    // >>> containsAtLeastOneWord2((\"apple pie pi e \"))\n    // (true)\n    // >>> containsAtLeastOneWord2((\"\"))\n    // (false)\n    def containsAtLeastOneWord2(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpc9cviems.scala:21:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) %>= \u001b[31m97\u001b[0m && txt.charAt(txt.length - \u001b[31m1\u001b[0m) %<= \u001b[31m122\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               value %>= is not a member of Char - did you mean Char.>=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpc9cviems.scala:21:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) %>= \u001b[31m97\u001b[0m && txt.charAt(txt.length - \u001b[31m1\u001b[0m) %<= \u001b[31m122\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         value && is not a member of Int\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc9cviems.scala:67:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m        \u001b[33mreturn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) return false\n        return !(txt.charAt(txt.length() - 1) < 'a' || txt.charAt(txt.length() - 1) > 'z') && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) return false\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) return false\n        return txt.equals(new StringBuilder(txt).reverse().toString())\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPermutation(\"\", \"\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp43ys_i0_.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp43ys_i0_.scala:53:56 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(\u001b[33mnew\u001b[0m \u001b[35mStringBuilder\u001b[0m(txt).reverse().toString())\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringBuilder\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp43ys_i0_.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp43ys_i0_.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp43ys_i0_.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp43ys_i0_.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam amad\")\n    // (true)\n    // >>> isPalindrome(\"madam amad\")\n    // (true)\n    // >>> isPalindrome(\"madam amad m\")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"mada\")\n    // (false)\n    // >>>\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293349,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphw4naj50.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphw4naj50.scala:61:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphw4naj50.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphw4naj50.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphw4naj50.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphw4naj50.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if a given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if a given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPermutation\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5pyrj_9z.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5pyrj_9z.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5pyrj_9z.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5pyrj_9z.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5pyrj_9z.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5pyrj_9z.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !isLetter(txt[txt.length - 1]) && !isWord(txt.substring(0, txt.length - 1))\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return isLetter(txt[0]) && isWord(txt.substring(1))\n    }\n\n    // Create a function that returns true if the given string\n    // is a sentence and false otherwise.\n    // Note: \"sentence\" is a group of characters separated by space.\n    // Examples:\n    // >>> isSentence(\"apple pie\")\n    // (true)\n    // >>> isSentence(\"apple pie \")\n    // (true)\n    // >>> isSentence(\"apple\")\n    // (false)\n    // >>> isSentence(\"\")\n    // (false)\n    def isSentence(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return isLetter(txt[0]) && isSentence(txt.substring(1))\n    }\n\n    // Create a function that returns true if the given string\n    // is a paragraph and false otherwise.\n    // Note: \"paragraph\" is a group of characters separated by new line.\n    // Examples:\n    // >>> isParagraph(\"apple pie\\npie\")\n    // (true)\n    // >>> isParagraph(\"apple pie\\npie\\n\")\n    // (true)\n    // >>> isParagraph(\"apple pie\")\n    // (false)\n    // >>> isParagraph(\"\")\n    // (false)\n    def isPar\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293351,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E019] Syntax Error: /tmp/tmpu9dk0rrn.scala:74:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36misPar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m             ^\u001b[0m\n\u001b[31m   |\u001b[0m             Missing return type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpu9dk0rrn.scala:89:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu9dk0rrn.scala:21:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isWord(txt.substring(\u001b[31m0\u001b[0m, txt.length - \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu9dk0rrn.scala:21:40 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isWord(txt.substring(\u001b[31m0\u001b[0m, txt.length - \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: type -\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu9dk0rrn.scala:40:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mreturn\u001b[0m isLetter(txt[\u001b[31m0\u001b[0m]) && isWord(txt.substring(\u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpu9dk0rrn.scala:40:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mreturn\u001b[0m isLetter(txt[\u001b[31m0\u001b[0m]) && isWord(txt.substring(\u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie\"))\n    // (true)\n    def checkIfStringContainsWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsWord((\"apple pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie \"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie\"))\n    // (true)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie\"))\n    // (false)\n    // >>> checkIfStringContainsWord((\"apple pie apple pie pie pie\"))\n    // (true)\n    def checkIfStringContainsWord2(txt : String) : Boolean = {\n        if (txt.length() == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjbuv15mp.scala:65:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    'then' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjbuv15mp.scala:21:94 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.charAt(txt.length() - \u001b[31m1\u001b[0m) >= \u001b[31m'a'\u001b[0m && txt.charAt(txt.length() - \u001b[31m1\u001b[0m) <= \u001b[31m'z'\u001b[0m && !isWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                              ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: isWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjbuv15mp.scala:44:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mreturn\u001b[0m isWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: isWord\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1).isLetter() && txt.lastIndexOf(\" \") == -1)\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"\")\n    // (true)\n    // >>> isPalindrome(\"a\")\n    // (true)\n    // >>> isPalindrome(\"abba\")\n    // (true)\n    // >>> isPalindrome(\"abba b\")\n    // (false)\n    // >>> isPalindrome(\"abba ba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba b\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba ba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba ba ba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba ba ba ba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba ba ba ba ba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba ba ba ba ba ba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba ba ba ba ba ba ba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba ba ba ba ba ba ba ba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba ba ba ba ba ba ba ba ba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba ba ba ba ba ba ba ba ba ba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba ba ba ba ba ba ba ba ba ba ba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba ba ba ba ba ba ba ba ba ba ba ba\")\n    // (true)\n    // >>> isPalindrome(\"abba ba ba ba\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprzt7at9d.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmprzt7at9d.scala:21:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m).isLetter() && txt.lastIndexOf(\u001b[31m\" \"\u001b[0m) == -\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              \u001b[33mmethod\u001b[0m \u001b[35misLetter\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mRichChar\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprzt7at9d.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprzt7at9d.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprzt7at9d.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprzt7at9d.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.charAt(0) >= 'a' && txt.charAt(0) <= 'z'\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am\")\n    // (false)\n    // >>> isPalindrome(\"madam am \")\n    // (true)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        if (txt.length() == 1) {\n            return true\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"apple\", \"pale\")\n    // (true)\n    // >>> isPermutation(\"apple\", \"pale pie\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzb166u2z.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzb166u2z.scala:62:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzb166u2z.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzb166u2z.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzb166u2z.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzb166u2z.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) < 'a' || txt.charAt(txt.length() - 1) > 'z') && !isWord(txt)\n    }\n\n    // Create a function that returns true if a given string is a word\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if a given string is a palindrome\n    // and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam\")\n    // (true)\n    // >>> isPalindrome(\"madam am I am madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if a given string is a\n    // permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dma\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"mad\")\n    // (false)\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppvlzjsqp.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppvlzjsqp.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppvlzjsqp.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppvlzjsqp.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppvlzjsqp.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppvlzjsqp.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) %>= 97 && txt.charAt(txt.length - 1) %<= 122)\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"\")\n    // (true)\n    // >>> isPalindrome(\"a\")\n    // (true)\n    // >>> isPalindrome(\"racecar\")\n    // (true)\n    // >>> isPalindrome(\"racecar \")\n    // (false)\n    // >>> isPalindrome(\"racecar car\")\n    // (true)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return true\n        }\n        if (txt.length == 1) {\n            return true\n        }\n        if (txt.length == 2) {\n            return txt.equals(txt.reverse())\n        }\n        if (txt.length == 3) {\n            return txt.equals(txt.reverse())\n        }\n        if (txt.length == 4) {\n            return txt.equals(txt.reverse())\n        }\n        if (txt.length == 5) {\n            return txt.equals(txt.reverse())\n        }\n        if (txt.length == 6) {\n            return txt.equals(txt.reverse())\n        }\n        if (txt.length == 7) {\n            return txt.equals(txt.reverse())\n        }\n        if (txt.length == 8) {\n            return txt.equals(txt.reverse())\n        }\n        if (txt.length == 9) {\n            return txt.equals(txt.reverse())\n        }\n        if (txt.length == 10) {\n            return txt.equals(txt.reverse())\n        }\n        if (txt.length == 11) {\n            return txt.equals(txt.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293355,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumxil63x.scala:74:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumxil63x.scala:89:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumxil63x.scala:21:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) %>= \u001b[31m97\u001b[0m && txt.charAt(txt.length - \u001b[31m1\u001b[0m) %<= \u001b[31m122\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               value %>= is not a member of Char - did you mean Char.>=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpumxil63x.scala:21:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) %>= \u001b[31m97\u001b[0m && txt.charAt(txt.length - \u001b[31m1\u001b[0m) %<= \u001b[31m122\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         value && is not a member of Int\n\u001b[31m\u001b[31m-- Error: /tmp/tmpumxil63x.scala:46:41 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m            \u001b[33mreturn\u001b[0m txt.equals(txt.reverse())\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmpumxil63x.scala:49:41 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            \u001b[33mreturn\u001b[0m txt.equals(txt.reverse())\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmpumxil63x.scala:52:41 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m            \u001b[33mreturn\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1).isLetter() && !isPartOfAWord(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a part of a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPartOfAWord(\"apple\")\n    // (true)\n    // >>> isPartOfAWord(\"apple pie\")\n    // (true)\n    // >>> isPartOfAWord(\"apple pie \")\n    // (true)\n    // >>> isPartOfAWord(\"apple pie \")\n    // (true)\n    // >>> isPartOfAWord(\"apple pie pi\")\n    // (true)\n    // >>> isPartOfAWord(\"apple pie pi \")\n    // (true)\n    // >>> isPartOfAWord(\"\")\n    // (false)\n    def isPartOfAWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.contains(\" \")\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"apple\")\n    // (true)\n    // >>> isPalindrome(\"apple pie\")\n    // (true)\n    // >>> isPalindrome(\"apple pie \")\n    // (true)\n    // >>> isPalindrome(\"apple pie pi\")\n    // (true)\n    // >>> isPalindrome(\"apple pie pi \")\n    // (true)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkvka8cmy.scala:88:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpkvka8cmy.scala:21:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m).isLetter() && !isPartOfAWord(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              \u001b[33mmethod\u001b[0m \u001b[35misLetter\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mRichChar\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkvka8cmy.scala:69:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkvka8cmy.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkvka8cmy.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkvka8cmy.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z') && !(txt.charAt(txt.length - 1) >= 'A' && txt.charAt(txt.length - 1) <= 'Z' && txt.contains(\" \"))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a \")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a ba\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        var words = txt.split(\" \")\n        for (var word : words) {\n            if (isPalindrome(word)) {\n                return true\n            }\n        }\n        return false\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a \")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293355,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpiolljqwa.scala:46:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m word : words) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpiolljqwa.scala:46:31 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m word : words) {\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               '<-' expected, but '{' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpiolljqwa.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpiolljqwa.scala:50:9 -------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        }\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiolljqwa.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"appl",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return !(txt.charAt(txt.length - 1) % \"abcdefghijklmnopqrstuvwxyz\".toCharArray(0).length == 0) && !(txt.split(\" \").length > 1)\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a digit and false otherwise.\n    // Note: \"digit\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsADigit((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsADigit((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"\"))\n    // (false)\n    def checkIfLastCharIsADigit(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.charAt(txt.length - 1) % \"0123456789\".toCharArray(0).length == 0\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a special character and false otherwise.\n    // Note: \"special\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsASpecial((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsASpecial((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsASpecial((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsASpecial((\"\"))\n    // (false)\n    def checkIfLastCharIsASpecial(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.charAt(txt.length - 1) % \"!@#$%^&*()_+-=[]{}|;:,.<>/?`~\".toCharArray(0).length == 0\n    }\n\n    // Create a\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcwobz6j6.scala:71:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcwobz6j6.scala:19:87 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) % \u001b[31m\"abcdefghijklmnopqrstuvwxyz\"\u001b[0m.toCharArray(\u001b[31m0\u001b[0m).length == \u001b[31m0\u001b[0m) && !(txt.split(\u001b[31m\" \"\u001b[0m).length > \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0mtoo many arguments for \u001b[33mmethod\u001b[0m \u001b[35mtoCharArray\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mString\u001b[0m: (): Array[Char]\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcwobz6j6.scala:36:69 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.charAt(txt.length - \u001b[31m1\u001b[0m) % \u001b[31m\"0123456789\"\u001b[0m.toCharArray(\u001b[31m0\u001b[0m).length == \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0mtoo many arguments for \u001b[33mmethod\u001b[0m \u001b[35mtoCharArray\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mString\u001b[0m: (): Array[Char]\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcwobz6j6.scala:53:88 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.charAt(txt.length - \u001b[31m1\u001b[0m) % \u001b[31m\"!@#$%^&*()_+-=[]{}|;:,.<>/?`~\"\u001b[0m.toCharArray(\u001b[31m0\u001b[0m).length == \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0mtoo many arguments for \u001b[33mmethod\u001b[0m \u001b[35mtoCharArray\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mString\u001b[0m: (): Array[Char]\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcwobz6j6.scala:59:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z') && !(txt.contains(\" \"))\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a digit and false otherwise.\n    // Note: \"digit\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsADigit((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsADigit((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsADigit((\"\"))\n    // (false)\n    def checkIfLastCharIsADigit(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= '0' && txt.charAt(txt.length - 1) <= '9'\n    }\n\n    // Create a function that returns true if the last character\n    // of a given string is a lowercase character and false otherwise.\n    // Note: \"lowercase\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALowercase((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALowercase((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALowercase((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALowercase((\"\"))\n    // (false)\n    def checkIfLastCharIsALowercase(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z'\n    }\n\n    // Create\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwca0r6w1.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwca0r6w1.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwca0r6w1.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwca0r6w1.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwca0r6w1.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwca0r6w1.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"Pumpkin pie \"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not fou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (true)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (true)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1 && txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"dama \")\n    // (false)\n    // >>> isPermutation(\"madam\", \"dama madam\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpr8lc1fdl.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr8lc1fdl.scala:59:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.split(\u001b[31m\" \"\u001b[0m).length == \u001b[31m1\u001b[0m && txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr8lc1fdl.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr8lc1fdl.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr8lc1fdl.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr8lc1fdl.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length - 1) %>= 97 && txt.charAt(txt.length - 1) %<= 122)\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: A palindrome is a word or phrase that is the same\n    // forward and backward.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madamam\")\n    // (true)\n    // >>> isPalindrome(\"madam am\")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: A permutation is a rearrangement of letters.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dma\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madamam\")\n    // (false)\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n    def isPermutation(txt1 : String, txt2 : String) : Boolean = {\n        if (txt1.length == 0 || txt2.length == 0) {\n            return true\n        }\n        return txt1.equals(reverse(txt2))\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: A word is a group of letters separated by space.\n    // Examples:\n    // >>> isWord(\"madam\")\n    // (true)\n    // >>> isWord(\"madam \")\n    // (false\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293355,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7vjxf84r.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7vjxf84r.scala:21:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) %>= \u001b[31m97\u001b[0m && txt.charAt(txt.length - \u001b[31m1\u001b[0m) %<= \u001b[31m122\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               value %>= is not a member of Char - did you mean Char.>=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7vjxf84r.scala:21:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mreturn\u001b[0m !(txt.charAt(txt.length - \u001b[31m1\u001b[0m) %>= \u001b[31m97\u001b[0m && txt.charAt(txt.length - \u001b[31m1\u001b[0m) %<= \u001b[31m122\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         value && is not a member of Int\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7vjxf84r.scala:41:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7vjxf84r.scala:60:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m        \u001b[33mreturn\u001b[0m txt1.equals(reverse(txt2))\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7vjxf84r.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return false\n        }\n        return !(txt.charAt(txt.length() - 1) >= 'a' && txt.charAt(txt.length() - 1) <= 'z') && !(txt.charAt(txt.length() - 1) >= 'A' && txt.charAt(txt.length() - 1) <= 'Z') && !(txt.charAt(txt.length() - 1) >= '0' && txt.charAt(txt.length() - 1) <= '9') && !(txt.charAt(txt.length() - 1) == ' ')\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"\")\n    // (true)\n    // >>> isPalindrome(\"a\")\n    // (true)\n    // >>> isPalindrome(\"ab\")\n    // (true)\n    // >>> isPalindrome(\"abba\")\n    // (true)\n    // >>> isPalindrome(\"abba b\")\n    // (false)\n    // >>> isPalindrome(\"abba ba\")\n    // (false)\n    // >>> isPalindrome(\"abba ba b\")\n    // (true)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length() == 0) {\n            return true\n        }\n        return txt.equals(new StringBuilder(txt).reverse().toString())\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"\", \"\")\n    // (true)\n    // >>> isPermutation(\"a\", \"a\")\n    // (true)\n    // >>> isPermutation(\"ab\", \"ba\")\n    // (true)\n    // >>> isPermutation(\"ab\", \"ba\")\n    // (true)\n    // >>> is\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpg7i27s2f.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpg7i27s2f.scala:46:56 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(\u001b[33mnew\u001b[0m \u001b[35mStringBuilder\u001b[0m(txt).reverse().toString())\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringBuilder\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg7i27s2f.scala:64:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg7i27s2f.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg7i27s2f.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg7i27s2f.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return !isLetter(txt[txt.length - 1]) && !isPartOfWord(txt)\n        }\n    }\n\n    // Create a function that returns true if the given string is\n    // a part of a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPartOfWord(\"apple\")\n    // (false)\n    // >>> isPartOfWord(\"apple pie\")\n    // (true)\n    // >>> isPartOfWord(\"apple pie \")\n    // (true)\n    // >>> isPartOfWord(\"\")\n    // (false)\n    def isPartOfWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return isLetter(txt[0]) && isLetter(txt[txt.length - 1])\n        }\n    }\n\n    // Create a function that returns true if the given string is\n    // a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (true)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        } else {\n            return isPartOfWord(txt) && !isPartOfWord(txt.substring(0, txt.length - 1))\n        }\n    }\n\n    // Create a function that returns true if the given string is\n    // a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"apple\")\n    // (true)\n    // >>> isPalindrome(\"apple pie\")\n    // (true)\n    // >>> isPalindrome(\"apple pie \")\n    // (false)\n    \n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpq5hob1v7.scala:90:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m90 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq5hob1v7.scala:21:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isPartOfWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq5hob1v7.scala:21:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mreturn\u001b[0m !isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) && !isPartOfWord(txt)\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Not found: type -\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq5hob1v7.scala:41:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m isLetter(txt[\u001b[31m0\u001b[0m]) && isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: isLetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpq5hob1v7.scala:41:31 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            \u001b[33mreturn\u001b[0m isLetter(txt[\u001b[31m0\u001b[0m]) && isLetter(txt[txt.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq5hob1v7.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            false\n        } else {\n            true\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293292,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdzej_60n.scala:25)\n\tat Problem.main(tmpdzej_60n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.charAt(txt.length - 1) >= 'a' && txt.charAt(txt.length - 1) <= 'z' && !isWord(txt)\n    }\n\n    // Create a function that returns true if the given string\n    // is a word and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isWord(\"apple\")\n    // (true)\n    // >>> isWord(\"apple pie\")\n    // (false)\n    // >>> isWord(\"apple pie \")\n    // (false)\n    // >>> isWord(\"\")\n    // (false)\n    def isWord(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.split(\" \").length == 1\n    }\n\n    // Create a function that returns true if the given string\n    // is a palindrome and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPalindrome(\"madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam\")\n    // (true)\n    // >>> isPalindrome(\"madam madam \")\n    // (false)\n    // >>> isPalindrome(\"\")\n    // (false)\n    def isPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) {\n            return false\n        }\n        return txt.equals(reverse(txt))\n    }\n\n    // Create a function that returns true if the given string\n    // is a permutation of another string and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> isPermutation(\"madam\", \"dama\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam\")\n    // (true)\n    // >>> isPermutation(\"madam\", \"madam \")\n    // (false)\n    // >>> isPer\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptrwn0bw6.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptrwn0bw6.scala:59:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.equals(reverse(txt))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: reverse\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptrwn0bw6.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptrwn0bw6.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptrwn0bw6.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptrwn0bw6.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"A\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return !(txt.charAt(txt.length - 1) < 'a' || txt.charAt(txt.length - 1) > 'z') &&\n            !(txt.split(\" \").exists(x => x.length > 1))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringContainsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringContainsPalindrome(\"a b c d\")\n    // (false)\n    // >>> checkIfStringContainsPalindrome(\"a b c d e\")\n    // (true)\n    def checkIfStringContainsPalindrome(txt : String) : Boolean = {\n        if (txt.length == 0) return false\n        return txt.split(\" \").exists(x => checkIfStringIsPalindrome(x))\n    }\n\n    // Create a function that returns true if the given string\n    // contains at least one word that is a palindrome and false\n    // otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfStringIsPalindrome(\"\")\n    // (false)\n    // >>> checkIfStringIsPalindrome(\"a\")\n    // (true)\n    // >>> checkIfStringIsPalindrome(\"a b\")\n    // (false)\n    // >>> checkIfStringIsPalindrome(\"a b c\")\n    // (true)\n    // >>> checkIfStringIsPalindrome(\"a b c d\")\n    // (false)\n    // >>> checkIfStringIsPalindrome(\"a b c d e\")\n    // (true)\n    def\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkbjzjeb4.scala:63:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkbjzjeb4.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkbjzjeb4.scala:42:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mreturn\u001b[0m txt.split(\u001b[31m\" \"\u001b[0m).exists(\u001b[36mx\u001b[0m => checkIfStringIsPalindrome(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Not found: checkIfStringIsPalindrome\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkbjzjeb4.scala:65:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkbjzjeb4.scala:66:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"apple pi e\"\u001b[0m)) == (\u001b[31mtrue\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkbjzjeb4.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(checkIfLastCharIsALetter((\u001b[31m\"eeeee\"\u001b[0m)) == (\u001b[31mfalse\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: checkIfLastCharIsALetter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}