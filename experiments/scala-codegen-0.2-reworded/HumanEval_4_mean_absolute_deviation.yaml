name: HumanEval_4_mean_absolute_deviation
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // For a given list of input numbers, calculate Mean Absolute Deviation\n \
  \   // around the mean of this dataset.\n    // Mean Absolute Deviation is the average\
  \ absolute difference between each\n    // element and a centerpoint (mean in this\
  \ case):\n    // MAD = average | x - x_mean |\n    // >>> meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def meanAbsoluteDeviation(numbers\
  \ : List[Float]) : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
  \n}\n"
completions: ["        var mean = mean(numbers)\n        var sum = 0.0f\n        for\
    \ (i <- numbers.size) {\n            sum += Math.abs(numbers[i] - mean)\n    \
    \    }\n        return sum / numbers.size\n    }\n\n    // For a given list of\
    \ input numbers, calculate the mean of this dataset.\n    // >>> mean((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.5f)\n    def mean(numbers\
    \ : List[Float]) : Float = {\n        var sum = 0.0f\n        for (i <- numbers.size)\
    \ {\n            sum += numbers[i]\n        }\n        return sum / numbers.size\n\
    \    }\n\n    // For a given list of input numbers, calculate the median of this\
    \ dataset.\n    // >>> median((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (2.5f)\n    def median(numbers : List[Float]) : Float\
    \ = {\n        var sorted = numbers.toSeq().sort(Comparator.comparing(x -> x))\n\
    \        var size = numbers.size\n        var middle = size / 2\n        if (size\
    \ % 2 == 1) {\n            return sorted.apply(middle)\n        } else {\n   \
    \         var lower = middle - 1\n            var upper = middle\n           \
    \ return (sorted.apply(lower) + sorted.apply(upper)) / 2.0f\n        }\n    }\n\
    \n    // For a given list of input numbers, calculate the standard deviation of\
    \ this dataset.\n    // >>> standardDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def standardDeviation(numbers\
    \ : List[Float]) : Float = {\n        var mean = mean(numbers)\n        var sum\
    \ = 0.0f\n        for (i <- numbers.size) {\n            sum += Math.pow(numbers[i]",
  "        val mean = numbers.reduce((x, y) -> x + y) / numbers.size()\n        val\
    \ result = numbers.map(x -> Math.abs(x - mean)).reduce((x, y) -> x + y) / numbers.size()\n\
    \        result", "        val mean = mean(numbers)\n        val result = 0.0f\n\
    \        for (i <- numbers.size) {\n            result += Math.abs(numbers[i]\
    \ - mean)\n        }\n        result /= numbers.size\n        return result",
  "        val mean = numbers.reduce((a, b) -> a + b) / numbers.size()\n        val\
    \ mad = numbers.map(x -> Math.abs(x - mean)).reduce((a, b) -> a + b) / numbers.size()\n\
    \        return mad", "        val mean = numbers.reduce((a, b) -> a + b) / numbers.size()\n\
    \        val result = numbers.map(x -> Math.abs(x - mean)).reduce((a, b) -> a\
    \ + b) / numbers.size()\n        result", "        val mean = mean(numbers)\n\
    \        val sum = 0.0f\n        for (i <- numbers.size) {\n            sum +=\
    \ Math.abs(numbers[i] - mean)\n        }\n        return sum / numbers.size",
  "        var mean = numbers.reduce((x, y) -> x + y) / numbers.size()\n        var\
    \ result = numbers.map(x -> Math.abs(x - mean)).reduce((x, y) -> x + y) / numbers.size()\n\
    \        return result", "        val mean = mean(numbers)\n        val result\
    \ = 0.0f\n        for (i <- numbers.size()) {\n            val diff = numbers[i]\
    \ - mean\n            result += Math.abs(diff)\n        }\n        result /= numbers.size()\n\
    \        return result\n    }\n\n    // For a given list of input numbers, calculate\
    \ the mean of this dataset.\n    // >>> mean((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (3.0f)\n    def mean(numbers : List[Float])\
    \ : Float = {\n        val result = 0.0f\n        for (i <- numbers.size()) {\n\
    \            result += numbers[i]\n        }\n        result /= numbers.size()\n\
    \        return result\n    }\n\n    // For a given list of input numbers, calculate\
    \ the median of this dataset.\n    // >>> median((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers : List[Float])\
    \ : Float = {\n        val result = numbers.toJavaList().stream().sorted().collect(Collectors.toList()).get(numbers.size()\
    \ / 2)\n        return result\n    }\n\n    // For a given list of input numbers,\
    \ calculate the standard deviation of this dataset.\n    // >>> standardDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def standardDeviation(numbers\
    \ : List[Float]) : Float = {\n        val mean = mean(numbers)\n        val result\
    \ = 0.0f\n        for (i <- numbers.size()) {\n            val diff = numbers[i]\
    \ - mean\n            result += diff * diff\n        }\n        result /= numbers.size()\n\
    \        return Math.sqrt(result)\n    }\n\n    // For a given list of input numbers,\
    \ calculate the variance of this dataset.\n    //", "        var sum = 0.0f\n\
    \        for (i <- numbers.size) {\n            sum += Math.abs(numbers[i] - mean(numbers))\n\
    \        }\n        return sum / numbers.size", "        val mean = numbers.reduce((a,\
    \ b) -> a + b) / numbers.size()\n        val result = numbers.map(x -> Math.abs(x\
    \ - mean)).sum() / numbers.size()\n        result", "        var sum = 0.0f\n\
    \        for (i <- numbers.size) {\n            sum += Math.abs(numbers.get(i)\
    \ - mean(numbers))\n        }\n        return sum / numbers.size", "        val\
    \ mean = numbers.reduce((a, b) -> a + b) / numbers.size()\n        val result\
    \ = numbers.map(x -> Math.abs(x - mean)).reduce((a, b) -> a + b) / numbers.size()\n\
    \        result", "        var mean = 0.0f\n        var sum = 0.0f\n        for\
    \ (x : Float) {\n            sum += x\n        }\n        mean = sum / numbers.length\n\
    \        var sum_diff = 0.0f\n        for (x : Float) {\n            sum_diff\
    \ += Math.abs(x - mean)\n        }\n        return sum_diff / numbers.length",
  "        val mean = mean(numbers)\n        val deviations = map(numbers, (x -> x\
    \ - mean))\n        val mad = sum(deviations) / length(deviations)\n        return\
    \ mad", "        val mean = mean(numbers)\n        val sum = 0.0f\n        for\
    \ (i <- numbers.size) {\n            sum += Math.abs(numbers[i] - mean)\n    \
    \    }\n        return sum / numbers.size\n    }\n\n    // For a given list of\
    \ input numbers, calculate the Mean.\n    // Mean is the average of all elements\
    \ in the list:\n    // >>> mean((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (2.5f)\n    def mean(numbers : List[Float]) : Float\
    \ = {\n        val sum = 0.0f\n        for (i <- numbers.size) {\n           \
    \ sum += numbers[i]\n        }\n        return sum / numbers.size\n    }\n\n \
    \   // For a given list of input numbers, calculate the Median.\n    // Median\
    \ is the middle value in the list.\n    // >>> median((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers\
    \ : List[Float]) : Float = {\n        val sorted = numbers.toSeq().toList()\n\
    \        val middle = (sorted.size() / 2)\n        return sorted.get(middle)\n\
    \    }\n\n    // For a given list of input numbers, calculate the Mode.\n    //\
    \ Mode is the value that appears the most frequently in the list.\n    // >>>\
    \ mode((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (3.0f)\n    def mode(numbers : List[Float]) : Float = {\n        val sorted\
    \ = numbers.toSeq().toList()\n        val mode = sorted.head\n        val count\
    \ = 1\n        for (i <- sorted.size) {\n            if (sorted.get(i) == mode)\
    \ {\n                count += 1\n            } else {\n                if (count\
    \ > 1) {\n                    return mode\n                }\n               \
    \ mode", "        val mean = mean(numbers)\n        val result = 0.0f\n      \
    \  for (val number : numbers) {\n            result += Math.abs(number - mean)\n\
    \        }\n        return result / numbers.length\n    }\n\n    // For a given\
    \ list of input numbers, calculate the mean of this dataset.\n    // >>> mean((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.5f)\n    def mean(numbers\
    \ : List[Float]) : Float = {\n        val result = 0.0f\n        for (val number\
    \ : numbers) {\n            result += number\n        }\n        return result\
    \ / numbers.length\n    }\n\n    // For a given list of input numbers, calculate\
    \ the median of this dataset.\n    // >>> median((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.5f)\n    def median(numbers : List[Float])\
    \ : Float = {\n        val result = numbers.toSeq().sort(Comparator.comparing(x\
    \ -> x)).get(numbers.length / 2)\n        return result\n    }\n\n    // For a\
    \ given list of input numbers, calculate the standard deviation of this dataset.\n\
    \    // >>> standardDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (1.0f)\n    def standardDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = mean(numbers)\n        val result = 0.0f\n \
    \       for (val number : numbers) {\n            result += Math.pow(number -\
    \ mean, 2)\n        }\n        return Math.sqrt(result / numbers.length)\n   \
    \ }\n\n    // For a given list of input numbers, calculate the variance of this\
    \ dataset.\n    // >>> variance((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.", "        val mean = numbers.reduce((a, b) -> a + b) / numbers.size()\n\
    \        val result = numbers.map(x -> Math.abs(x - mean)).reduce((a, b) -> a\
    \ + b) / numbers.size()\n        result", "        val mean = mean(numbers)\n\
    \        val sum = 0.0\n        for (i <- numbers.size()) {\n            sum +=\
    \ Math.abs(numbers[i] - mean)\n        }\n        return sum / numbers.size()\n\
    \    }\n\n    // For a given list of input numbers, calculate the Mean.\n    //\
    \ Mean is the sum of all elements divided by the number of elements:\n    // >>>\
    \ mean((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (3.0f)\n    def mean(numbers : List[Float]) : Float = {\n        val sum\
    \ = 0.0\n        for (i <- numbers.size()) {\n            sum += numbers[i]\n\
    \        }\n        return sum / numbers.size()\n    }\n\n    // For a given list\
    \ of input numbers, calculate the Median.\n    // Median is the middle number\
    \ in the list.\n    // >>> median((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers : List[Float]) : Float\
    \ = {\n        val sorted = numbers.toJavaList().sorted()\n        return sorted[sorted.size()\
    \ / 2]\n    }\n\n    // For a given list of input numbers, calculate the Mode.\n\
    \    // Mode is the number that appears the most often in the list.\n    // >>>\
    \ mode((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (3.0f)\n    def mode(numbers : List[Float]) : Float = {\n        val sorted\
    \ = numbers.toJavaList().sorted()\n        val max = 0.0\n        val maxCount\
    \ = 0\n        for (i <- sorted.size()) {\n            if (sorted.size() == 1)\
    \ {\n                return sorted[i]\n            }\n            if (sorted.size()\
    \ > 1) {\n                if (sorted[i] == sorted[i -", "        var mean = numbers.reduce((a,\
    \ b) -> a + b) / numbers.size()\n        var sum = numbers.map(x -> Math.abs(x\
    \ - mean)).reduce((a, b) -> a + b)\n        return sum / numbers.size()", "  \
    \      var sum = 0.0f\n        for (x : Float) {\n            sum += Math.abs(x\
    \ - mean(numbers))\n        }\n        return sum / numbers.length\n    }\n\n\
    \    // For a given list of input numbers, calculate the Mean of this dataset.\n\
    \    // Mean is the sum of all elements divided by the number of elements:\n \
    \   // >>> mean(List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))\n\
    \    // (3.0f)\n    def mean(numbers : List[Float]) : Float = {\n        var sum\
    \ = 0.0f\n        for (x : Float) {\n            sum += x\n        }\n       \
    \ return sum / numbers.length\n    }\n\n    // For a given list of input numbers,\
    \ calculate the Median of this dataset.\n    // Median is the middle value of\
    \ the sorted list:\n    // >>> median(List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat))\n    // (2.0f)\n    def median(numbers : List[Float])\
    \ : Float = {\n        var sorted = numbers.toJavaList().sort(Comparator.naturalOrder())\n\
    \        return sorted.get(sorted.length() / 2)\n    }\n\n    // For a given list\
    \ of input numbers, calculate the Median of this dataset.\n    // Median is the\
    \ middle value of the sorted list:\n    // >>> median(List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))\n    // (2.0f)\n    def median(numbers\
    \ : List[Float]) : Float = {\n        var sorted = numbers.toJavaList().sort(Comparator.naturalOrder())\n\
    \        return sorted.get(sorted.length() / 2)\n    }\n\n    // For a given list\
    \ of input numbers, calculate the Mode of this dataset.\n    // Mode is the value\
    \ that appears the most often in the list:\n    // >>> mode(List[Float](1.0f.toFloat,\
    \ 2.0f.", "        var mean = numbers.reduce(0.0f) / numbers.size()\n        var\
    \ sum = 0.0f\n        for (i <- numbers.size()) {\n            sum += Math.abs(numbers[i]\
    \ - mean)\n        }\n        return sum / numbers.size()", "        var sum =\
    \ 0.0f\n        for (i <- numbers.size) {\n            sum += Math.abs(numbers[i]\
    \ - mean(numbers))\n        }\n        return sum / numbers.size\n    }\n\n  \
    \  // For a given list of input numbers, calculate the median of this dataset.\n\
    \    // Median is the middle value in the sorted list of numbers:\n    // >>>\
    \ median((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (2.0f)\n    def median(numbers : List[Float]) : Float = {\n        var\
    \ sorted = numbers.toJavaList().sorted()\n        return sorted.get(sorted.size()\
    \ / 2)\n    }\n\n    // For a given list of input numbers, calculate the standard\
    \ deviation of this dataset.\n    // Standard deviation is the square root of\
    \ the variance:\n    // >>> standardDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def standardDeviation(numbers\
    \ : List[Float]) : Float = {\n        var sum = 0.0f\n        for (i <- numbers.size)\
    \ {\n            sum += Math.pow(numbers[i] - mean(numbers), 2)\n        }\n \
    \       return Math.sqrt(sum / numbers.size)\n    }\n\n    // For a given list\
    \ of input numbers, calculate the variance of this dataset.\n    // Variance is\
    \ the sum of squared deviations from the mean:\n    // >>> variance((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def variance(numbers\
    \ : List[Float]) : Float = {\n        var sum = 0.0f\n        for (i <- numbers.size)\
    \ {\n            sum += Math.pow(numbers[i] - mean(numbers), 2)\n        }\n \
    \       return sum / numbers.size\n    }\n\n    // For a given list", "      \
    \  val mean = numbers.reduce((a, b) -> a + b) / numbers.size()\n        val result\
    \ = numbers.map(x -> Math.abs(x - mean)).reduce((a, b) -> a + b) / numbers.size()\n\
    \        result", "        var sum = 0.0f\n        var mean = 0.0f\n        for\
    \ (x : Float) {\n            sum += Math.abs(x - mean)\n            mean += x\n\
    \        }\n        mean /= numbers.length\n        return sum / numbers.length",
  "        val mean = mean(numbers)\n        val result = 0.0f\n        for (i <-\
    \ numbers.size()) {\n            val diff = numbers[i] - mean\n            result\
    \ += Math.abs(diff)\n        }\n        result /= numbers.size()\n        return\
    \ result", "        val mean = mean(numbers)\n        val result = 0.0f\n    \
    \    for (i <- numbers.size) {\n            val diff = numbers[i] - mean\n   \
    \         result += Math.abs(diff)\n        }\n        result /= numbers.size\n\
    \        return result", "        var sum = 0.0f\n        for (x : numbers) {\n\
    \            sum += Math.abs(x - mean(numbers))\n        }\n        return sum\
    \ / numbers.length\n    }\n\n    // For a given list of input numbers, calculate\
    \ the median of this dataset.\n    // The median is the number that would divide\
    \ the dataset in half.\n    // >>> median((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers : List[Float])\
    \ : Float = {\n        var sorted = numbers.toJavaList().sort(Comparator.naturalOrder())\n\
    \        var mid = sorted.length / 2\n        if (sorted.length % 2 == 0) {\n\
    \            return (sorted.get(mid - 1) + sorted.get(mid)) / 2.0f\n        }\
    \ else {\n            return sorted.get(mid)\n        }\n    }\n\n    // For a\
    \ given list of input numbers, calculate the mode of this dataset.\n    // The\
    \ mode is the number that appears the most frequently in the dataset.\n    //\
    \ >>> mode((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (2.0f)\n    def mode(numbers : List[Float]) : Float = {\n        var counts\
    \ = new HashMap[Float]()\n        for (x : numbers) {\n            counts.put(x,\
    \ counts.getOrElse(x, 0) + 1)\n        }\n        var maxCount = 0\n        var\
    \ maxValue = 0.0f\n        for (x : counts.keys()) {\n            if (counts.get(x)\
    \ > maxCount) {\n                maxCount = counts.get(x)\n                maxValue\
    \ = x\n            }\n        }\n        return maxValue\n    }\n\n    // For\
    \ a given list of input numbers, calculate the range of this dataset.\n    //\
    \ The range is the difference between the maximum and minimum values in the dataset.\n\
    \    // >>> range((List[Float](1.0f.toFloat,", "        var sum = 0.0f\n     \
    \   for (x : Float) {\n            sum += Math.abs(x - mean(numbers))\n      \
    \  }\n        return sum / numbers.length\n    }\n\n    // For a given list of\
    \ input numbers, calculate the Mean.\n    // Mean is the average of all elements\
    \ in the list:\n    // >>> mean((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (2.5f)\n    def mean(numbers : List[Float]) : Float\
    \ = {\n        var sum = 0.0f\n        for (x : Float) {\n            sum += x\n\
    \        }\n        return sum / numbers.length\n    }\n\n    // For a given list\
    \ of input numbers, calculate the Median.\n    // Median is the middle value in\
    \ the list:\n    // >>> median((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers : List[Float]) : Float\
    \ = {\n        var sorted = numbers.toSeq().toList()\n        sorted.sort()\n\
    \        return sorted.get(sorted.length() / 2)\n    }\n\n    // For a given list\
    \ of input numbers, calculate the Standard Deviation.\n    // Standard Deviation\
    \ is the square root of the variance:\n    // >>> standardDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.41421f)\n    def standardDeviation(numbers\
    \ : List[Float]) : Float = {\n        var mean = mean(numbers)\n        var sum\
    \ = 0.0f\n        for (x : Float) {\n            sum += Math.pow(x - mean, 2)\n\
    \        }\n        return Math.sqrt(sum / numbers.length)\n    }\n\n    // For\
    \ a given list of input numbers, calculate the Variance.\n    // Variance is the\
    \ sum of squared deviations from the mean:\n    //", "        val mean = numbers.reduce((x,\
    \ y) -> x + y) / numbers.size()\n        val result = numbers.map(x -> Math.abs(x\
    \ - mean)).reduce((x, y) -> x + y) / numbers.size()\n        result", "      \
    \  val mean = numbers.reduce((x, y) -> x + y) / numbers.size()\n        val mad\
    \ = numbers.map(x -> Math.abs(x - mean)).reduce((x, y) -> x + y) / numbers.size()\n\
    \        return mad", "        val mean = mean(numbers)\n        val result =\
    \ 0.0f\n        for (i <- numbers.size()) {\n            val diff = numbers[i]\
    \ - mean\n            result += Math.abs(diff)\n        }\n        result /= numbers.size()\n\
    \        return result\n    }\n\n    // For a given list of input numbers, calculate\
    \ the mean of this dataset.\n    // >>> mean((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.5f)\n    def mean(numbers : List[Float])\
    \ : Float = {\n        val result = 0.0f\n        for (i <- numbers.size()) {\n\
    \            result += numbers[i]\n        }\n        result /= numbers.size()\n\
    \        return result\n    }\n\n    // For a given list of input numbers, calculate\
    \ the median of this dataset.\n    // >>> median((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.5f)\n    def median(numbers : List[Float])\
    \ : Float = {\n        val result = numbers.toJavaList().sort(Comparator.naturalOrder())\n\
    \        val size = numbers.size()\n        if (size % 2 == 0) {\n           \
    \ val mid = size / 2\n            val lower = result.get(mid - 1)\n          \
    \  val upper = result.get(mid)\n            return (lower + upper) / 2.0f\n  \
    \      } else {\n            return result.get(size / 2)\n        }\n    }\n\n\
    \    // For a given list of input numbers, calculate the mode of this dataset.\n\
    \    // >>> mode((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (2.0f)\n    def mode(numbers : List[Float]) : Float = {\n        val result\
    \ = numbers.toJavaList().sort(Comparator.naturalOrder())\n        val size = numbers.size()\n\
    \        if (size == 0", "        var sum = 0.0f\n        for (x : Float) {\n\
    \            sum += Math.abs(x - mean(numbers))\n        }\n        return sum\
    \ / numbers.length", "        val mean = mean(numbers)\n        val result = 0.0f\n\
    \        for (val number : numbers) {\n            result += Math.abs(number -\
    \ mean)\n        }\n        result /= numbers.length\n        return result",
  "        val mean = numbers.reduce((a, b) -> a + b) / numbers.size()\n        val\
    \ deviations = numbers.map(x -> Math.abs(x - mean)).toSeq()\n        val mad =\
    \ deviations.reduce((a, b) -> a + b) / deviations.size()\n        return mad",
  "        val mean = mean(numbers)\n        val result = 0.0f\n        for (i <-\
    \ numbers.size()) {\n            val diff = numbers[i] - mean\n            result\
    \ += Math.abs(diff)\n        }\n        return result / numbers.size()", "   \
    \     val mean = numbers.reduce((a, b) -> a + b) / numbers.size()\n        val\
    \ result = numbers.map(x -> Math.abs(x - mean)).reduce((a, b) -> a + b) / numbers.size()\n\
    \        result", "        val mean = mean(numbers)\n        val mad = 0.0f\n\
    \        for (i <- numbers.size()) {\n            val diff = numbers[i] - mean\n\
    \            mad += Math.abs(diff)\n        }\n        mad /= numbers.size()\n\
    \        return mad\n    }\n\n    // For a given list of input numbers, calculate\
    \ the mean of this dataset.\n    // >>> mean((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.5f)\n    def mean(numbers : List[Float])\
    \ : Float = {\n        val sum = 0.0f\n        for (i <- numbers.size()) {\n \
    \           sum += numbers[i]\n        }\n        return sum / numbers.size()\n\
    \    }\n\n    // For a given list of input numbers, calculate the median of this\
    \ dataset.\n    // >>> median((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (2.5f)\n    def median(numbers : List[Float]) : Float\
    \ = {\n        val sorted = numbers.toJavaList().sort(Comparator.naturalOrder())\n\
    \        val middle = sorted.size() / 2\n        if (sorted.size() % 2 == 1) {\n\
    \            return sorted.get(middle)\n        } else {\n            val lower\
    \ = sorted.get(middle - 1)\n            val upper = sorted.get(middle)\n     \
    \       return (lower + upper) / 2.0f\n        }\n    }\n\n    // For a given\
    \ list of input numbers, calculate the standard deviation of this dataset.\n \
    \   // >>> standardDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (1.0f)\n    def standardDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = mean(numbers)\n        val sum = 0.0f\n    \
    \    for (i <- numbers.size()) {\n            val diff = numbers[i", "       \
    \ var mean = mean(numbers)\n        var sum = 0.0\n        for (i in numbers)\
    \ {\n            sum += Math.abs(i - mean)\n        }\n        return sum / numbers.length\n\
    \    }\n\n    // For a given list of input numbers, calculate the mean of this\
    \ dataset.\n    // >>> mean((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (3.0f)\n    def mean(numbers : List[Float]) : Float\
    \ = {\n        return sum(numbers) / numbers.length\n    }\n\n    // For a given\
    \ list of input numbers, calculate the sum of this dataset.\n    // >>> sum((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (10.0f)\n    def sum(numbers\
    \ : List[Float]) : Float = {\n        return sumTo(numbers, 0.0f)\n    }\n\n \
    \   // For a given list of input numbers, calculate the sum of the elements\n\
    \    // from index start to index end.\n    // >>> sumTo(List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat), 0.0f)\n    // (10.0f)\n    def sumTo(numbers\
    \ : List[Float], start : Float) : Float = {\n        return sumToFrom(numbers,\
    \ start, 0.0f)\n    }\n\n    // For a given list of input numbers, calculate the\
    \ sum of the elements\n    // from index start to index end, with a given starting\
    \ value.\n    // >>> sumToFrom(List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat), 0.0f, 0.0f)\n    // (10.0f)\n    def sumToFrom(numbers : List[Float],\
    \ start : Float, end : Float) : Float = {\n        return sumToFrom(numbers, start",
  "        var sum = 0.0f\n        for (i <- numbers.size()) {\n            sum +=\
    \ Math.abs(numbers.apply(i) - mean(numbers))\n        }\n        return sum /\
    \ numbers.size()", "        var mean = mean(numbers)\n        var sum = 0.0f\n\
    \        for (x : Float) {\n            sum += Math.abs(x - mean)\n        }\n\
    \        return sum / numbers.length", "        val mean = mean(numbers)\n   \
    \     val sum = 0.0f\n        for (i <- numbers.size()) {\n            sum +=\
    \ Math.abs(numbers[i] - mean)\n        }\n        return sum / numbers.size()\n\
    \    }\n\n    // For a given list of input numbers, calculate the Mean.\n    //\
    \ Mean is the sum of all elements divided by the number of elements:\n    // >>>\
    \ mean((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (3.0f)\n    def mean(numbers : List[Float]) : Float = {\n        val sum\
    \ = 0.0f\n        for (i <- numbers.size()) {\n            sum += numbers[i]\n\
    \        }\n        return sum / numbers.size()\n    }\n\n    // For a given list\
    \ of input numbers, calculate the Median.\n    // Median is the value that is\
    \ in the middle of the list.\n    // >>> median((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers : List[Float])\
    \ : Float = {\n        val sorted = numbers.toJavaList().sort(Comparator.naturalOrder())\n\
    \        return sorted.get(sorted.size() / 2)\n    }\n\n    // For a given list\
    \ of input numbers, calculate the Standard Deviation.\n    // Standard Deviation\
    \ is the square root of the variance.\n    // >>> standardDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def standardDeviation(numbers\
    \ : List[Float]) : Float = {\n        val mean = mean(numbers)\n        val sum\
    \ = 0.0f\n        for (i <- numbers.size()) {\n            sum += Math.pow(numbers[i]\
    \ - mean, 2)\n        }\n        return Math.sqrt(sum / numbers.size())\n    }\n\
    \n    // For", "        val mean = numbers.reduce((a, b) -> a + b) / numbers.size()\n\
    \        val result = numbers.map(x -> Math.abs(x - mean)).reduce((a, b) -> a\
    \ + b) / numbers.size()\n        result", "        val mean = mean(numbers)\n\
    \        val sum = 0.0f\n        for (i <- numbers.size) {\n            sum +=\
    \ Math.abs(numbers[i] - mean)\n        }\n        return sum / numbers.size\n\
    \    }\n\n    // For a given list of input numbers, calculate the Mean.\n    //\
    \ Mean is the sum of all elements in the list divided by the number of elements:\n\
    \    // >>> mean((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (3.0f)\n    def mean(numbers : List[Float]) : Float = {\n        val sum\
    \ = 0.0f\n        for (i <- numbers.size) {\n            sum += numbers[i]\n \
    \       }\n        return sum / numbers.size\n    }\n\n    // For a given list\
    \ of input numbers, calculate the Median.\n    // Median is the value that is\
    \ in the middle of the list.\n    // >>> median((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers : List[Float])\
    \ : Float = {\n        val sorted = numbers.toJavaList().sort(Comparator.naturalOrder())\n\
    \        return sorted.get(sorted.size() / 2)\n    }\n\n    // For a given list\
    \ of input numbers, calculate the Standard Deviation.\n    // Standard Deviation\
    \ is the square root of the variance.\n    // >>> standardDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.4142135623730951f)\n\
    \    def standardDeviation(numbers : List[Float]) : Float = {\n        val mean\
    \ = mean(numbers)\n        val sum = 0.0f\n        for (i <- numbers.size) {\n\
    \            sum += Math.pow(numbers[i] - mean, 2)\n        }\n        return\
    \ Math.sqrt(sum / numbers.size)", "        val mean = mean(numbers)\n        val\
    \ mad = 0.0f\n        for (i <- numbers.size()) {\n            val diff = numbers[i]\
    \ - mean\n            mad += Math.abs(diff)\n        }\n        mad /= numbers.size()\n\
    \        return mad", "        var sum = 0.0f\n        for (x : Float) {\n   \
    \         sum += Math.abs(x - mean(numbers))\n        }\n        return sum /\
    \ numbers.length\n    }\n\n    // For a given list of input numbers, calculate\
    \ the Mean.\n    // Mean is the average of all elements in the list:\n    // >>>\
    \ mean((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (2.5f)\n    def mean(numbers : List[Float]) : Float = {\n        return\
    \ sum(numbers) / numbers.length\n    }\n\n    // For a given list of input numbers,\
    \ calculate the sum of all elements in the list.\n    // >>> sum((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (10.0f)\n    def sum(numbers\
    \ : List[Float]) : Float = {\n        return sum0(numbers)\n    }\n\n    // For\
    \ a given list of input numbers, calculate the sum of all elements in the list.\n\
    \    // >>> sum0(List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))\n\
    \    // (10.0f)\n    def sum0(numbers : List[Float]) : Float = {\n        return\
    \ sum1(numbers)._1\n    }\n\n    // For a given list of input numbers, calculate\
    \ the sum of all elements in the list.\n    // >>> sum1(List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))\n    // (10.0f)\n    def sum1(numbers\
    \ : List[Float]) : Tuple2[Float, Float] = {\n        return numbers.reduce((a,\
    \ b) -> a + b)\n    }\n\n    // For a given list of input numbers, calculate the\
    \ sum of all elements in the list.\n    // >>> sum2(List[Float](1.", "       \
    \ var mean = 0.0f\n        var sum = 0.0f\n        for (i <- numbers.size()) {\n\
    \            sum += numbers[i]\n            mean += numbers[i]\n        }\n  \
    \      mean /= numbers.size()\n        var sum_squares = 0.0f\n        for (i\
    \ <- numbers.size()) {\n            sum_squares += (numbers[i] - mean) * (numbers[i]\
    \ - mean)\n        }\n        return sum_squares / numbers.size()", "        val\
    \ mean = numbers.reduce((a, b) -> a + b) / numbers.size()\n        val result\
    \ = numbers.map(x -> Math.abs(x - mean)).reduce((a, b) -> a + b) / numbers.size()\n\
    \        result", "        var mean = numbers.reduce(0.0f) / numbers.size()\n\
    \        var sum = 0.0f\n        for (i <- 0 until numbers.size()) {\n       \
    \     var x = numbers[i]\n            sum += Math.abs(x - mean)\n        }\n \
    \       return sum / numbers.size()", "        val mean = mean(numbers)\n    \
    \    val result = 0.0f\n        for (i <- numbers.size()) {\n            result\
    \ += Math.abs(numbers[i] - mean)\n        }\n        result /= numbers.size()\n\
    \        return result", "        var sum = 0.0f\n        var mean = 0.0f\n  \
    \      for (x : Float) {\n            sum += Math.abs(x - mean)\n            mean\
    \ += x\n        }\n        return sum / numbers.length", "        val mean = mean(numbers)\n\
    \        val mad = 0.0f\n        for (i <- numbers.size()) {\n            val\
    \ diff = numbers[i] - mean\n            mad += Math.abs(diff)\n        }\n   \
    \     mad /= numbers.size()\n        return mad\n    }\n\n    // For a given list\
    \ of input numbers, calculate the Mean.\n    // Mean is the sum of all elements\
    \ divided by the number of elements:\n    // >>> mean((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (3.0f)\n    def mean(numbers\
    \ : List[Float]) : Float = {\n        val sum = 0.0f\n        for (i <- numbers.size())\
    \ {\n            sum += numbers[i]\n        }\n        return sum / numbers.size()\n\
    \    }\n\n    // For a given list of input numbers, calculate the Median.\n  \
    \  // Median is the value that is in the middle of the list.\n    // >>> median((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers\
    \ : List[Float]) : Float = {\n        val sorted = numbers.toSeq().toList()\n\
    \        val mid = sorted.size() / 2\n        if (sorted.size() % 2 == 1) {\n\
    \            return sorted.get(mid)\n        } else {\n            val lower =\
    \ sorted.get(mid - 1)\n            val upper = sorted.get(mid)\n            return\
    \ (lower + upper) / 2.0f\n        }\n    }\n\n    // For a given list of input\
    \ numbers, calculate the Standard Deviation.\n    // Standard Deviation is the\
    \ square root of the variance:\n    // >>> standardDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.41421f)\n    def standardDeviation(numbers\
    \ : List[Float]) : Float = {\n        val", "        val mean = mean(numbers)\n\
    \        val sum = 0.0\n        for (i <- numbers) {\n            sum += Math.abs(i\
    \ - mean)\n        }\n        return sum / numbers.length", "        var sum =\
    \ 0.0f\n        for (i <- numbers.size()) {\n            sum += Math.abs(numbers[i]\
    \ - mean(numbers))\n        }\n        return sum / numbers.size()", "       \
    \ var mean = 0.0f\n        var sum = 0.0f\n        for (i <- numbers.size()) {\n\
    \            sum += numbers[i]\n            mean += sum / i\n        }\n     \
    \   return mean / numbers.size()", "        val mean = numbers.reduce((a, b) ->\
    \ a + b) / numbers.size()\n        val mad = numbers.map(x -> Math.abs(x - mean)).reduce((a,\
    \ b) -> a + b) / numbers.size()\n        return mad", "        val mean = mean(numbers)\n\
    \        val result = 0.0f\n        for (i <- numbers.size()) {\n            result\
    \ += Math.abs(numbers[i] - mean)\n        }\n        result /= numbers.size()\n\
    \        return result\n    }\n\n    // For a given list of input numbers, calculate\
    \ the Mean.\n    // Mean is the sum of all elements divided by the number of elements:\n\
    \    // >>> mean((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (3.0f)\n    def mean(numbers : List[Float]) : Float = {\n        val result\
    \ = 0.0f\n        for (i <- numbers.size()) {\n            result += numbers[i]\n\
    \        }\n        result /= numbers.size()\n        return result\n    }\n\n\
    \    // For a given list of input numbers, calculate the Median.\n    // Median\
    \ is the middle number in the list.\n    // >>> median((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers\
    \ : List[Float]) : Float = {\n        val result = numbers.toJavaList().stream().sorted().findFirst().get()\n\
    \        return result\n    }\n\n    // For a given list of input numbers, calculate\
    \ the Median.\n    // Median is the middle number in the list.\n    // >>> median((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers\
    \ : List[Float]) : Float = {\n        val result = numbers.toJavaList().stream().sorted().findFirst().get()\n\
    \        return result\n    }\n\n    // For a given list of input numbers, calculate\
    \ the Standard Deviation.\n    // Standard Deviation is the square root of the\
    \ variance.\n    // >>> standardDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat",
  "        var sum = 0.0f\n        for (x : numbers) {\n            sum += Math.abs(x\
    \ - mean(numbers))\n        }\n        return sum / numbers.length\n    }\n\n\
    \    // For a given list of input numbers, calculate the Mean.\n    // Mean is\
    \ the average of all elements in the list:\n    // >>> mean((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.5f)\n    def mean(numbers\
    \ : List[Float]) : Float = {\n        var sum = 0.0f\n        for (x : numbers)\
    \ {\n            sum += x\n        }\n        return sum / numbers.length\n  \
    \  }\n\n    // For a given list of input numbers, calculate the Median.\n    //\
    \ Median is the value that has the same number of elements in both the\n    //\
    \ positive and negative half of the list.\n    // >>> median((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers\
    \ : List[Float]) : Float = {\n        var sorted = numbers.toJavaList().sort(Comparator.naturalOrder())\n\
    \        var half = sorted.length / 2\n        if (sorted.length % 2 == 1) {\n\
    \            return sorted.get(half)\n        } else {\n            var lower\
    \ = sorted.get(half - 1)\n            var upper = sorted.get(half)\n         \
    \   return (lower + upper) / 2.0f\n        }\n    }\n\n    // For a given list\
    \ of input numbers, calculate the Mode.\n    // Mode is the value that appears\
    \ the most often in the list.\n    // >>> mode((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (3.0f)\n    def mode(numbers : List[Float])\
    \ : Float = {\n        var counts = new HashMap[Float]()\n        for (x : numbers)\
    \ {\n            counts", "        val mean = numbers.reduce((a, b) -> a + b)\
    \ / numbers.size()\n        val result = numbers.map(x -> Math.abs(x - mean)).reduce((a,\
    \ b) -> a + b) / numbers.size()\n        result", "        var sum = 0.0f\n  \
    \      for (i <- numbers.size) {\n            sum += Math.abs(numbers.apply(i)\
    \ - numbers.apply(i).mean())\n        }\n        return sum / numbers.size", " \
    \       var sum = 0.0f\n        for (i <- numbers.size) {\n            sum +=\
    \ Math.abs(numbers.apply(i) - mean(numbers))\n        }\n        return sum /\
    \ numbers.size", "        val mean = mean(numbers)\n        val result = 0.0f\n\
    \        for (i <- numbers.size()) {\n            val diff = numbers[i] - mean\n\
    \            result += Math.abs(diff)\n        }\n        result /= numbers.size()\n\
    \        return result\n    }\n\n    // For a given list of input numbers, calculate\
    \ the mean of this dataset.\n    // >>> mean((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.5f)\n    def mean(numbers : List[Float])\
    \ : Float = {\n        val result = 0.0f\n        for (i <- numbers.size()) {\n\
    \            result += numbers[i]\n        }\n        result /= numbers.size()\n\
    \        return result\n    }\n\n    // For a given list of input numbers, calculate\
    \ the median of this dataset.\n    // >>> median((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.5f)\n    def median(numbers : List[Float])\
    \ : Float = {\n        val result = numbers.toSeq().sort().head()\n        return\
    \ result\n    }\n\n    // For a given list of input numbers, calculate the standard\
    \ deviation of\n    // this dataset.\n    // >>> standardDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.1180339887498949)\n \
    \   def standardDeviation(numbers : List[Float]) : Float = {\n        val mean\
    \ = mean(numbers)\n        val result = 0.0f\n        for (i <- numbers.size())\
    \ {\n            val diff = numbers[i] - mean\n            result += diff * diff\n\
    \        }\n        result /= numbers.size()\n        return Math.sqrt(result)\n\
    \    }\n\n    // For a given list of input numbers, calculate the variance of\
    \ this dataset.\n    // >>> variance((List[Float](1.0f.", "        var sum = 0.0f\n\
    \        for (i <- numbers.size) {\n            sum += Math.abs(numbers[i] - mean(numbers))\n\
    \        }\n        return sum / numbers.size", "        val mean = numbers.reduce((a,\
    \ b) -> a + b) / numbers.size()\n        val mad = numbers.map(x -> Math.abs(x\
    \ - mean)).reduce((a, b) -> a + b) / numbers.size()\n        return mad", "  \
    \      val mean = numbers.reduce((a, b) -> a + b) / numbers.size()\n        val\
    \ sum = numbers.map(x -> Math.abs(x - mean)).sum()\n        return sum / numbers.size()",
  "        val mean = mean(numbers)\n        val sum = 0.0f\n        for (i <- numbers.toIterator)\
    \ {\n            sum += Math.abs(i - mean)\n        }\n        return sum / numbers.size()",
  "        var mean = mean(numbers)\n        var sum = 0.0\n        for (x : numbers)\
    \ {\n            sum += Math.abs(x - mean)\n        }\n        return sum / numbers.length",
  "        var x_mean = mean(numbers)\n        var x_deviations = map(numbers, (x\
    \ - x_mean) / x_mean)\n        var sum_deviations = foldLeft(x_deviations, 0.0,\
    \ (x, y) => x + y)\n        return sum_deviations / x_deviations.length", "  \
    \      var mean = numbers.reduce((x, y) -> x + y) / numbers.size()\n        var\
    \ result = 0.0f\n        for (x : numbers) {\n            result += Math.abs(x\
    \ - mean)\n        }\n        return result / numbers.size()", "        val mean\
    \ = mean(numbers)\n        val result = 0.0f\n        for (i <- numbers.size())\
    \ {\n            result += Math.abs(numbers[i] - mean)\n        }\n        result\
    \ /= numbers.size()\n        return result", "        var mean = numbers.reduce((a,\
    \ b) -> a + b) / numbers.size()\n        var sum = numbers.map(x -> Math.abs(x\
    \ - mean)).sum()\n        return sum / numbers.size()", "        var sum = 0.0f\n\
    \        for (x : Float) {\n            sum += Math.abs(x - mean(numbers))\n \
    \       }\n        return sum / numbers.length\n    }\n\n    // For a given list\
    \ of input numbers, calculate the median of this dataset.\n    // Median is the\
    \ value that has the same number of elements in both the\n    // positive and\
    \ negative half of the dataset.\n    // >>> median((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers\
    \ : List[Float]) : Float = {\n        var sorted = numbers.toJavaList().sort(Comparator.naturalOrder())\n\
    \        return sorted.get(sorted.length() / 2)\n    }\n\n    // For a given list\
    \ of input numbers, calculate the mode of this dataset.\n    // Mode is the value\
    \ that occurs the most frequently in the dataset.\n    // >>> mode((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def mode(numbers\
    \ : List[Float]) : Float = {\n        var counts = mutable.HashMap[Float]()\n\
    \        for (x : Float) {\n            counts.put(x, counts.getOrElse(x, 0) +\
    \ 1)\n        }\n        var maxCount = 0\n        var maxValue = 0.0f\n     \
    \   for (x : Float) {\n            if (counts.get(x) > maxCount) {\n         \
    \       maxCount = counts.get(x)\n                maxValue = x\n            }\n\
    \        }\n        return maxValue\n    }\n\n    // For a given list of input\
    \ numbers, calculate the standard deviation of\n    // this dataset.\n    // Standard\
    \ deviation is the square root of the variance.\n    // >>> standardDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def standardDeviation",
  "        val mean = mean(numbers)\n        val result = 0.0f\n        for (i <-\
    \ numbers.size) {\n            val diff = numbers[i] - mean\n            result\
    \ += Math.abs(diff)\n        }\n        result /= numbers.size\n        return\
    \ result", "        val mean = numbers.reduce((x, y) -> x + y) / numbers.size()\n\
    \        val result = numbers.map(x -> Math.abs(x - mean)).reduce((x, y) -> x\
    \ + y) / numbers.size()\n        result", "        var sum = 0.0f\n        for\
    \ (i <- numbers.size) {\n            sum += Math.abs(numbers[i] - mean(numbers))\n\
    \        }\n        return sum / numbers.size", "        var sum = 0.0f\n    \
    \    for (x : Float) {\n            sum += Math.abs(x - mean(numbers))\n     \
    \   }\n        return sum / numbers.length\n    }\n\n    // For a given list of\
    \ input numbers, calculate the Mean of this dataset.\n    // >>> mean((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (3.0f)\n    def mean(numbers\
    \ : List[Float]) : Float = {\n        return sum(numbers) / numbers.length\n \
    \   }\n\n    // For a given list of input numbers, calculate the sum of this dataset.\n\
    \    // >>> sum((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (10.0f)\n    def sum(numbers : List[Float]) : Float = {\n        return\
    \ sum(numbers, 0.0f)\n    }\n\n    // For a given list of input numbers, calculate\
    \ the sum of this dataset\n    // with an offset.\n    // >>> sum((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)), 0.0f)\n    // (15.0f)\n    def sum(numbers\
    \ : List[Float], offset : Float) : Float = {\n        return sum(numbers, offset,\
    \ 0.0f)\n    }\n\n    // For a given list of input numbers, calculate the sum\
    \ of this dataset\n    // with an offset and a scale factor.\n    // >>> sum((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)), 0.0f, 2.0f)\n    // (20.0f)\n  \
    \  def sum(numbers : List[Float], offset : Float, scale : Float) : Float = {\n\
    \        return sum(numbers, offset, scale, 0.0f)\n    }\n\n    // For a given\
    \ list of input numbers, calculate the sum", "        var sum = 0.0f\n       \
    \ var mean = 0.0f\n        for (i <- numbers.size()) {\n            sum += numbers[i]\n\
    \        }\n        mean = sum / numbers.size()\n        var sum = 0.0f\n    \
    \    for (i <- numbers.size()) {\n            sum += Math.abs(numbers[i] - mean)\n\
    \        }\n        return sum / numbers.size()", "        var mean = mean(numbers)\n\
    \        var sum = 0.0f\n        for (i <- numbers.size) {\n            sum +=\
    \ Math.abs(numbers[i] - mean)\n        }\n        return sum / numbers.size\n\
    \    }\n\n    // For a given list of input numbers, calculate the mean of this\
    \ dataset.\n    // >>> mean((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (2.5f)\n    def mean(numbers : List[Float]) : Float\
    \ = {\n        var sum = 0.0f\n        for (i <- numbers.size) {\n           \
    \ sum += numbers[i]\n        }\n        return sum / numbers.size\n    }\n\n \
    \   // For a given list of input numbers, calculate the median of this dataset.\n\
    \    // >>> median((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (2.0f)\n    def median(numbers : List[Float]) : Float = {\n        var\
    \ sorted = numbers.toSeq().sort(Comparator.comparing(x -> x))\n        var size\
    \ = numbers.size\n        if (size % 2 == 0) {\n            var mid = size / 2\n\
    \            var lower = sorted.apply(mid - 1)\n            var upper = sorted.apply(mid)\n\
    \            return (lower + upper) / 2.0f\n        } else {\n            return\
    \ sorted.apply(size / 2)\n        }\n    }\n\n    // For a given list of input\
    \ numbers, calculate the standard deviation of this dataset.\n    // >>> standardDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def standardDeviation(numbers\
    \ : List[Float]) : Float = {\n        var mean = mean(numbers)\n        var sum\
    \ = 0.0f\n        for (i <- numbers.size) {\n            sum += Math.pow(numbers[",
  "        var mean = mean(numbers)\n        var sum = 0.0\n        for (i <- numbers.size())\
    \ {\n            sum += Math.abs(numbers[i] - mean)\n        }\n        return\
    \ sum / numbers.size()\n    }\n\n    // For a given list of input numbers, calculate\
    \ the Mean.\n    // Mean is the average of all elements in the list:\n    // >>>\
    \ mean((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (2.5f)\n    def mean(numbers : List[Float]) : Float = {\n        var sum\
    \ = 0.0\n        for (i <- numbers.size()) {\n            sum += numbers[i]\n\
    \        }\n        return sum / numbers.size()\n    }\n\n    // For a given list\
    \ of input numbers, calculate the Median.\n    // Median is the middle value in\
    \ the list:\n    // >>> median((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers : List[Float]) : Float\
    \ = {\n        var sorted = numbers.toJavaList().sort(Comparator.naturalOrder())\n\
    \        var middle = sorted.size() / 2\n        return sorted.get(middle)\n \
    \   }\n\n    // For a given list of input numbers, calculate the Standard Deviation.\n\
    \    // Standard Deviation is the square root of the variance:\n    // >>> standardDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.41421f)\n    def standardDeviation(numbers\
    \ : List[Float]) : Float = {\n        var mean = mean(numbers)\n        var sum\
    \ = 0.0\n        for (i <- numbers.size()) {\n            sum += Math.pow(numbers[i]\
    \ - mean, 2)\n        }\n        return Math.sqrt(sum / numbers.size())\n    }\n\
    \n    // For a given list of", "        val mean = mean(numbers)\n        val\
    \ sum = 0.0f\n        for (i <- numbers.size) {\n            sum += Math.abs(numbers[i]\
    \ - mean)\n        }\n        return sum / numbers.size\n    }\n\n    // For a\
    \ given list of input numbers, calculate the Mean.\n    // Mean is the sum of\
    \ all elements divided by the number of elements:\n    // >>> mean((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (3.0f)\n    def mean(numbers\
    \ : List[Float]) : Float = {\n        val sum = 0.0f\n        for (i <- numbers.size)\
    \ {\n            sum += numbers[i]\n        }\n        return sum / numbers.size\n\
    \    }\n\n    // For a given list of input numbers, calculate the Median.\n  \
    \  // Median is the middle value in the list.\n    // >>> median((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers\
    \ : List[Float]) : Float = {\n        val sorted = numbers.toSeq().toList()\n\
    \        val middle = sorted.size() / 2\n        return sorted.get(middle)\n \
    \   }\n\n    // For a given list of input numbers, calculate the Standard Deviation.\n\
    \    // Standard Deviation is the square root of the variance.\n    // >>> standardDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def standardDeviation(numbers\
    \ : List[Float]) : Float = {\n        val mean = mean(numbers)\n        val sum\
    \ = 0.0f\n        for (i <- numbers.size) {\n            sum += Math.pow(numbers[i]\
    \ - mean, 2)\n        }\n        return Math.sqrt(sum / numbers.size)\n    }\n\
    \n    // For a given list of input numbers", "        val mean = mean(numbers)\n\
    \        val mad = 0.0f\n        for (i <- numbers.size) {\n            val diff\
    \ = numbers[i] - mean\n            mad += Math.abs(diff)\n        }\n        mad\
    \ /= numbers.size\n        return mad\n    }\n\n    // For a given list of input\
    \ numbers, calculate the mean of this dataset.\n    // >>> mean((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.5f)\n    def mean(numbers\
    \ : List[Float]) : Float = {\n        val sum = 0.0f\n        for (i <- numbers.size)\
    \ {\n            sum += numbers[i]\n        }\n        return sum / numbers.size\n\
    \    }\n\n    // For a given list of input numbers, calculate the median of this\
    \ dataset.\n    // >>> median((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (2.5f)\n    def median(numbers : List[Float]) : Float\
    \ = {\n        val sorted = numbers.toSeq().toList()\n        val middle = sorted.size()\
    \ / 2\n        if (sorted.size() % 2 == 1) {\n            return sorted.get(middle)\n\
    \        } else {\n            val lower = sorted.get(middle - 1)\n          \
    \  val upper = sorted.get(middle)\n            return (lower + upper) / 2.0f\n\
    \        }\n    }\n\n    // For a given list of input numbers, calculate the standard\
    \ deviation of this dataset.\n    // >>> standardDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.1180339887498949)\n \
    \   def standardDeviation(numbers : List[Float]) : Float = {\n        val mean\
    \ = mean(numbers)\n        val sum = 0.0f\n        for (i <- numbers.size) {\n\
    \            val diff = numbers[i] -", "        val mean = numbers.reduce((x,\
    \ y) -> x + y) / numbers.size()\n        val result = numbers.map(x -> Math.abs(x\
    \ - mean)).reduce((x, y) -> x + y) / numbers.size()\n        result", "      \
    \  val mean = numbers.reduce((a, b) -> a + b) / numbers.size()\n        val mad\
    \ = numbers.map(x -> Math.abs(x - mean)).reduce((a, b) -> a + b) / numbers.size()\n\
    \        return mad", "        var mean = 0.0f\n        var sum = 0.0f\n     \
    \   for (i <- numbers.size()) {\n            sum += numbers[i]\n            mean\
    \ += numbers[i]\n        }\n        mean /= numbers.size()\n        var sumDiff\
    \ = 0.0f\n        for (i <- numbers.size()) {\n            sumDiff += Math.abs(numbers[i]\
    \ - mean)\n        }\n        return sumDiff / numbers.size()", "        var sum\
    \ = 0.0f\n        for (x : Float) {\n            sum += Math.abs(x - mean(numbers))\n\
    \        }\n        return sum / numbers.length\n    }\n\n    // For a given list\
    \ of input numbers, calculate the median of this dataset.\n    // >>> median((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers\
    \ : List[Float]) : Float = {\n        var sorted = numbers.toSeq().sort(Comparator.comparing(x\
    \ -> x))\n        return sorted.head().get()\n    }\n\n    // For a given list\
    \ of input numbers, calculate the mode of this dataset.\n    // >>> mode((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def mode(numbers\
    \ : List[Float]) : Float = {\n        var sorted = numbers.toSeq().sort(Comparator.comparing(x\
    \ -> x))\n        var count = 1\n        var maxCount = 1\n        var maxValue\
    \ = sorted.head().get()\n        for (x : Float) {\n            if (sorted.head().get()\
    \ == x) {\n                count += 1\n            } else {\n                count\
    \ = 1\n            }\n            if (count > maxCount) {\n                maxCount\
    \ = count\n                maxValue = x\n            }\n            sorted = sorted.tail()\n\
    \        }\n        return maxValue\n    }\n\n    // For a given list of input\
    \ numbers, calculate the standard deviation of this dataset.\n    // >>> standardDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def standardDeviation(numbers\
    \ : List[Float]) : Float = {\n        var mean = mean(numbers)\n        var sum\
    \ = 0.0f\n        for (x : Float) {\n            sum += Math.pow", "        var\
    \ sum = 0.0f\n        for (i <- numbers.size) {\n            sum += Math.abs(numbers[i]\
    \ - mean(numbers))\n        }\n        return sum / numbers.size", "        val\
    \ mean = mean(numbers)\n        val mad = 0.0f\n        for (i <- numbers.size())\
    \ {\n            val diff = numbers[i] - mean\n            mad += Math.abs(diff)\n\
    \        }\n        mad /= numbers.size()\n        return mad", "        val mean\
    \ = mean(numbers)\n        val sum = 0.0\n        for (i <- numbers) {\n     \
    \       sum += Math.abs(i - mean)\n        }\n        return sum / numbers.length",
  "        var sum = 0.0f\n        for (x : numbers) {\n            sum += Math.abs(x\
    \ - mean(numbers))\n        }\n        return sum / numbers.length\n    }\n\n\
    \    // For a given list of input numbers, calculate the median of this dataset.\n\
    \    // Median is the middle value in the ordered list.\n    // >>> median((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers\
    \ : List[Float]) : Float = {\n        var sorted = numbers.toJavaList().sorted()\n\
    \        return _.get(sorted, Math.floor(sorted.length / 2))\n    }\n\n    //\
    \ For a given list of input numbers, calculate the standard deviation of this\
    \ dataset.\n    // Standard Deviation is the square root of the variance.\n  \
    \  // >>> standardDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (1.0f)\n    def standardDeviation(numbers : List[Float])\
    \ : Float = {\n        var sum = 0.0f\n        for (x : numbers) {\n         \
    \   sum += Math.pow(x - mean(numbers), 2)\n        }\n        return Math.sqrt(sum\
    \ / numbers.length)\n    }\n\n    // For a given list of input numbers, calculate\
    \ the variance of this dataset.\n    // Variance is the average of the squared\
    \ differences from the mean.\n    // >>> variance((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def variance(numbers : List[Float])\
    \ : Float = {\n        var sum = 0.0f\n        for (x : numbers) {\n         \
    \   sum += Math.pow(x - mean(numbers), 2)\n        }\n        return sum / numbers.length\n\
    \    }\n\n    // For a given list of input numbers, calculate the mode of this\
    \ dataset.\n", "        val mean = mean(numbers)\n        val result = 0.0f\n\
    \        for (i <- numbers.size()) {\n            val diff = numbers[i] - mean\n\
    \            result += Math.abs(diff)\n        }\n        result /= numbers.size()\n\
    \        return result", "        var mean = numbers.reduce(_.mean)\n        var\
    \ sum = numbers.reduce(_.sum)\n        var mad = sum.div(scala.math.BigInt(numbers.size()))\n\
    \        var result = mad.div(scala.math.BigInt(mean))\n        return result.toFloat",
  "        val mean = numbers.reduce((x, y) -> x + y) / numbers.size()\n        val\
    \ result = numbers.map(x -> Math.abs(x - mean)).reduce((x, y) -> x + y) / numbers.size()\n\
    \        result", "        var sum = 0.0f\n        for (i <- numbers.size) {\n\
    \            sum += Math.abs(numbers.apply(i) - numbers.apply(0))\n        }\n\
    \        return sum / numbers.size", "        val mean = numbers.reduce((a, b)\
    \ -> a + b) / numbers.size()\n        val result = numbers.map(x -> Math.abs(x\
    \ - mean)).reduce((a, b) -> a + b) / numbers.size()\n        result", "      \
    \  val mean = numbers.reduce((a, b) -> a + b) / numbers.size()\n        val result\
    \ = numbers.map(x -> Math.abs(x - mean)).reduce((a, b) -> a + b) / numbers.size()\n\
    \        result", "        var mean = 0.0f\n        var sum = 0.0f\n        for\
    \ (x : Float) {\n            sum += x\n        }\n        mean = sum / numbers.length\n\
    \        var sumDeviations = 0.0f\n        for (x : Float) {\n            sumDeviations\
    \ += Math.abs(x - mean)\n        }\n        return sumDeviations / numbers.length",
  "        var mean = numbers.reduce((a, b) -> a + b) / numbers.size()\n        var\
    \ result = numbers.map(x -> Math.abs(x - mean)).reduce((a, b) -> a + b) / numbers.size()\n\
    \        return result", "        val mean = mean(numbers)\n        val result\
    \ = 0.0f\n        for (i <- numbers.size) {\n            val diff = numbers[i]\
    \ - mean\n            result += Math.abs(diff)\n        }\n        return result\
    \ / numbers.size", "        var sum = 0.0f\n        for (i <- numbers.size) {\n\
    \            sum += Math.abs(numbers[i] - mean(numbers))\n        }\n        return\
    \ sum / numbers.size", "        val mean = numbers.reduce((a, b) -> a + b) / numbers.size()\n\
    \        val result = numbers.map(x -> Math.abs(x - mean)).reduce((a, b) -> a\
    \ + b) / numbers.size()\n        result", "        val mean = mean(numbers)\n\
    \        val result = 0.0f\n        for (i <- numbers.size()) {\n            val\
    \ diff = numbers[i] - mean\n            result += Math.abs(diff)\n        }\n\
    \        result /= numbers.size()\n        return result", "        var mean =\
    \ 0.0f\n        var sum = 0.0f\n        for (x : Float) {\n            sum +=\
    \ x\n        }\n        mean = sum / numbers.length\n        var sum_diff = 0.0f\n\
    \        for (x : Float) {\n            sum_diff += Math.abs(x - mean)\n     \
    \   }\n        return sum_diff / numbers.length", "        var mean = mean(numbers)\n\
    \        var result = 0.0f\n        for (i <- numbers.size()) {\n            var\
    \ diff = numbers[i] - mean\n            result += Math.abs(diff)\n        }\n\
    \        result /= numbers.size()\n        return result", "        var mean =\
    \ numbers.reduce((a, b) -> a + b) / numbers.size()\n        var sum = numbers.map(x\
    \ -> Math.abs(x - mean)).sum()\n        return sum / numbers.size()", "      \
    \  var sum = 0.0f\n        for (i <- numbers.size()) {\n            sum += Math.abs(numbers[i]\
    \ - mean(numbers))\n        }\n        return sum / numbers.size()", "       \
    \ var mean = numbers.reduce((a, b) -> a + b) / numbers.size()\n        var result\
    \ = 0.0f\n        for (i <- numbers.size()) {\n            var diff = numbers[i]\
    \ - mean\n            result += Math.abs(diff)\n        }\n        return result\
    \ / numbers.size()", "        var sum = 0.0\n        for (i <- numbers.size) {\n\
    \            sum += Math.abs(numbers.apply(i) - numbers.apply(i).mean())\n   \
    \     }\n        return sum / numbers.size\n    }\n\n    // For a given list of\
    \ input numbers, calculate the Median Absolute Deviation\n    // around the median\
    \ of this dataset.\n    // Median Absolute Deviation is the median of the absolute\
    \ deviations from\n    // the median:\n    // MAD = median(|x - x_median|)\n \
    \   // >>> medianAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (1.0f)\n    def medianAbsoluteDeviation(numbers : List[Float])\
    \ : Float = {\n        var sorted = numbers.toSeq().toJavaList()\n        sorted.sort()\n\
    \        var median = numbers.apply(sorted.size / 2)\n        var sum = 0.0\n\
    \        for (i <- sorted.size) {\n            sum += Math.abs(sorted.apply(i)\
    \ - median)\n        }\n        return sum / numbers.size\n    }\n\n    // For\
    \ a given list of input numbers, calculate the Standard Deviation\n    // around\
    \ the mean of this dataset.\n    // Standard Deviation is the square root of the\
    \ variance:\n    // STD = sqrt(variance)\n    // >>> standardDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def standardDeviation(numbers\
    \ : List[Float]) : Float = {\n        var sum = 0.0\n        for (i <- numbers.size)\
    \ {\n            sum += Math.pow(numbers.apply(i) - numbers.apply(i).mean(), 2)\n\
    \        }\n        return Math.sqrt(sum / numbers.size)\n    }\n\n    // For\
    \ a given list of input numbers, calculate the Variance\n    // Variance is the\
    \ average of the squared deviations from the mean:\n    // VAR = sum(|", "   \
    \     var sum = 0.0f\n        for (x : Float) {\n            sum += Math.abs(x\
    \ - mean(numbers))\n        }\n        return sum / numbers.length\n    }\n\n\
    \    // For a given list of input numbers, calculate the Mean of this dataset.\n\
    \    // Mean is the sum of all elements divided by the number of elements:\n \
    \   // mean = sum / n\n    // >>> mean((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (3.0f)\n    def mean(numbers : List[Float])\
    \ : Float = {\n        return sum(numbers) / numbers.length\n    }\n\n    // For\
    \ a given list of input numbers, calculate the sum of all elements.\n    // >>>\
    \ sum((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (10.0f)\n    def sum(numbers : List[Float]) : Float = {\n        return\
    \ scala.math.sum(numbers)\n    }\n\n    // For a given list of input numbers,\
    \ calculate the median of this dataset.\n    // Median is the middle number in\
    \ the list.\n    // >>> median((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers : List[Float]) : Float\
    \ = {\n        return scala.collection.mutable.ArrayOps.median(numbers)\n    }\n\
    \n    // For a given list of input numbers, calculate the mode of this dataset.\n\
    \    // Mode is the number that appears the most often in the list.\n    // >>>\
    \ mode((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (2.0f)\n    def mode(numbers : List[Float]) : Float = {\n        return\
    \ scala.collection.mutable.ArrayOps.mode(numbers)", "        var sum = 0.0f\n\
    \        for (i <- numbers.size) {\n            sum += Math.abs(numbers.apply(i)\
    \ - numbers.apply(i).mean())\n        }\n        return sum / numbers.size", " \
    \       val mean = numbers.reduce((a, b) -> a + b) / numbers.size()\n        val\
    \ result = numbers.map(x -> Math.abs(x - mean)).sum() / numbers.size()\n     \
    \   result", "        val mean = numbers.reduce((x, y) -> x + y) / numbers.size()\n\
    \        val result = numbers.map(x -> Math.abs(x - mean)).reduce((x, y) -> x\
    \ + y) / numbers.size()\n        result", "        val mean = mean(numbers)\n\
    \        val result = 0.0f\n        for (i <- numbers.size()) {\n            result\
    \ += Math.abs(numbers[i] - mean)\n        }\n        result /= numbers.size()\n\
    \        return result", "        var sum = 0.0f\n        for (i <- numbers.size)\
    \ {\n            sum += Math.abs(numbers.get(i) - mean(numbers))\n        }\n\
    \        return sum / numbers.size\n    }\n\n    // For a given list of input\
    \ numbers, calculate the median of this dataset.\n    // Median is the middle\
    \ value of the dataset, if the dataset has an odd number of elements,\n    //\
    \ the middle value is the middle value of the two middle values.\n    // >>> median((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers\
    \ : List[Float]) : Float = {\n        var sorted = numbers.toJavaList().sort(Comparator.naturalOrder())\n\
    \        var middle = Math.floor(sorted.size() / 2)\n        if (sorted.size()\
    \ % 2 == 1) {\n            return sorted.get(middle)\n        } else {\n     \
    \       return (sorted.get(middle - 1) + sorted.get(middle)) / 2.0f\n        }\n\
    \    }\n\n    // For a given list of input numbers, calculate the standard deviation\
    \ of this dataset.\n    // Standard deviation is the square root of the variance.\n\
    \    // >>> standardDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (1.0f)\n    def standardDeviation(numbers : List[Float])\
    \ : Float = {\n        var sum = 0.0f\n        for (i <- numbers.size) {\n   \
    \         sum += Math.pow(numbers.get(i) - mean(numbers), 2)\n        }\n    \
    \    return Math.sqrt(sum / numbers.size)\n    }\n\n    // For a given list of\
    \ input numbers, calculate the variance of this dataset.\n    // Variance is the\
    \ sum of squared deviations from the mean.\n    // >>> variance((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.", "        val mean = mean(numbers)\n    \
    \    val mad = 0.0f\n        for (i <- numbers.size()) {\n            val diff\
    \ = numbers[i] - mean\n            mad += Math.abs(diff)\n        }\n        mad\
    \ /= numbers.size()\n        return mad", "        val mean = mean(numbers)\n\
    \        val result = 0.0f\n        for (i <- numbers.size()) {\n            val\
    \ diff = numbers[i] - mean\n            result += Math.abs(diff)\n        }\n\
    \        result /= numbers.size()\n        return result", "        var sum =\
    \ 0.0f\n        for (i <- numbers.size()) {\n            sum += Math.abs(numbers[i]\
    \ - mean(numbers))\n        }\n        return sum / numbers.size()", "       \
    \ var sum = 0.0f\n        for (i <- numbers.size) {\n            sum += Math.abs(numbers.get(i)\
    \ - mean(numbers))\n        }\n        return sum / numbers.size\n    }\n\n  \
    \  // For a given list of input numbers, calculate the median of this dataset.\n\
    \    // Median is the middle value of the dataset, if the dataset is even,\n \
    \   // the average of the two middle values is returned.\n    // >>> median((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers\
    \ : List[Float]) : Float = {\n        var sorted = numbers.toSeq().sort(Comparator.comparing(x\
    \ -> x))\n        var size = numbers.size\n        var middle = size / 2\n   \
    \     if (size % 2 == 0) {\n            return (sorted.get(middle - 1) + sorted.get(middle))\
    \ / 2.0f\n        } else {\n            return sorted.get(middle)\n        }\n\
    \    }\n\n    // For a given list of input numbers, calculate the mode of this\
    \ dataset.\n    // The mode is the value that appears the most often in the dataset.\n\
    \    // >>> mode((List[Float](1.0f.toFloat, 2.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 2.0f.toFloat, 2.0f.toFloat)))\n    // (2.0f)\n    def mode(numbers : List[Float])\
    \ : Float = {\n        var count = 0\n        var max = 0.0f\n        var result\
    \ = 0.0f\n        for (i <- numbers.size) {\n            var value = numbers.get(i)\n\
    \            if (count == 0) {\n                result = value\n             \
    \   count = 1\n            } else if (value == result) {\n                count\
    \ += 1\n            } else {\n                count -= 1\n            }\n    \
    \        if (count > max) {\n                max = count\n                result\
    \ = value\n            }\n        }\n        return result\n    }\n\n    //",
  "        val mean = numbers.reduce((a, b) -> a + b) / numbers.size()\n        val\
    \ sum = numbers.reduce((a, b) -> a + Math.abs(b - mean))\n        return sum /\
    \ numbers.size()", "        var sum = 0.0f\n        for (x : Float) {\n      \
    \      sum += Math.abs(x - mean(numbers))\n        }\n        return sum / numbers.length",
  "        var sum = 0.0f\n        for (i <- numbers.size) {\n            sum += Math.abs(numbers[i]\
    \ - mean(numbers))\n        }\n        return sum / numbers.size", "        var\
    \ mean = mean(numbers)\n        var sum = 0.0\n        for (x : numbers) {\n \
    \           sum += Math.abs(x - mean)\n        }\n        return sum / numbers.length\n\
    \    }\n\n    // For a given list of input numbers, calculate the Mean.\n    //\
    \ Mean is the sum of all elements divided by the number of elements:\n    // >>>\
    \ mean((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (3.0f)\n    def mean(numbers : List[Float]) : Float = {\n        var sum\
    \ = 0.0\n        for (x : numbers) {\n            sum += x\n        }\n      \
    \  return sum / numbers.length\n    }\n\n    // For a given list of input numbers,\
    \ calculate the Median.\n    // Median is the value such that half of the elements\
    \ are less than it and half are greater than it:\n    // >>> median((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers\
    \ : List[Float]) : Float = {\n        var sorted = numbers.toJavaList().toJavaList().sorted()\n\
    \        var mid = Math.floor(sorted.length() / 2)\n        return sorted.apply(mid).toFloat()\n\
    \    }\n\n    // For a given list of input numbers, calculate the Mode.\n    //\
    \ Mode is the value that appears the most often in the list:\n    // >>> mode((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (3.0f)\n    def mode(numbers\
    \ : List[Float]) : Float = {\n        var counts = mutable.HashMap[Float]()\n\
    \        for (x : numbers) {\n            counts.put(x, counts.getOrElse(x, 0)\
    \ + 1)\n        }\n        var maxCount = 0\n        var maxValue = 0.0\n    \
    \    for (x : counts", "        val mean = numbers.reduce((a, b) -> a + b) / numbers.size()\n\
    \        val result = numbers.map(x -> Math.abs(x - mean)).reduce((a, b) -> a\
    \ + b) / numbers.size()\n        result", "        val mean = mean(numbers)\n\
    \        val sum = 0.0\n        for (x : numbers) {\n            sum += Math.abs(x\
    \ - mean)\n        }\n        return sum / numbers.length", "        val mean\
    \ = numbers.reduce((x, y) -> x + y) / numbers.size()\n        val sum = numbers.map(x\
    \ -> Math.abs(x - mean)).sum()\n        return sum / numbers.size()", "      \
    \  var mean = 0.0f\n        var sum = 0.0f\n        for (x : Float) {\n      \
    \      sum += x\n        }\n        mean = sum / numbers.length\n        var sum_diff\
    \ = 0.0f\n        for (x : Float) {\n            sum_diff += Math.abs(x - mean)\n\
    \        }\n        return sum_diff / numbers.length", "        val mean = numbers.reduce((a,\
    \ b) -> a + b) / numbers.size()\n        val sum = numbers.map(x -> Math.abs(x\
    \ - mean)).sum()\n        return sum / numbers.size()\n    }\n\n    // For a given\
    \ list of input numbers, calculate the Median Absolute Deviation\n    // around\
    \ the median of this dataset.\n    // Median Absolute Deviation is the median\
    \ of the absolute differences between each\n    // element and the median of the\
    \ dataset:\n    // MAD = median(| x - x_median |)\n    // >>> medianAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def medianAbsoluteDeviation(numbers\
    \ : List[Float]) : Float = {\n        val median = numbers.reduce((a, b) -> a\
    \ + b) / numbers.size()\n        val sum = numbers.map(x -> Math.abs(x - median)).sum()\n\
    \        return sum / numbers.size()\n    }\n\n    // For a given list of input\
    \ numbers, calculate the Median Absolute Deviation\n    // around the median of\
    \ this dataset.\n    // Median Absolute Deviation is the median of the absolute\
    \ differences between each\n    // element and the median of the dataset:\n  \
    \  // MAD = median(| x - x_median |)\n    // >>> medianAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def medianAbsoluteDeviation(numbers\
    \ : List[Float]) : Float = {\n        val median = numbers.reduce((a, b) -> a\
    \ + b) / numbers.size()\n        val sum = numbers.map(x -> Math.abs(x - median)).sum()\n\
    \        return sum / numbers.size()\n    }\n\n    // For a given list of input\
    \ numbers, calculate the Standard Deviation\n    // around the mean of this dataset.\n\
    \    // Standard Deviation is the square root of the variance:\n    // SD = sqrt(variance)\n",
  "        val mean = mean(numbers)\n        val result = 0.0f\n        for (i <-\
    \ numbers.size()) {\n            val diff = numbers[i] - mean\n            result\
    \ += Math.abs(diff)\n        }\n        result /= numbers.size()\n        return\
    \ result", "        var sum = 0.0f\n        for (x : Float) {\n            sum\
    \ += Math.abs(x - mean(numbers))\n        }\n        return sum / numbers.length\n\
    \    }\n\n    // For a given list of input numbers, calculate the median of this\
    \ dataset.\n    // The median is the middle number in the sorted list of numbers.\n\
    \    // >>> median((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (2.0f)\n    def median(numbers : List[Float]) : Float = {\n        return\
    \ numbers.sort().head()\n    }\n\n    // For a given list of input numbers, calculate\
    \ the mean of this dataset.\n    // The mean is the sum of all the numbers divided\
    \ by the number of numbers.\n    // >>> mean((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.5f)\n    def mean(numbers : List[Float])\
    \ : Float = {\n        return sum(numbers) / numbers.length\n    }\n\n    // For\
    \ a given list of input numbers, calculate the standard deviation of\n    // this\
    \ dataset.\n    // The standard deviation is the square root of the variance.\n\
    \    // >>> standardDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (1.0f)\n    def standardDeviation(numbers : List[Float])\
    \ : Float = {\n        return Math.sqrt(variance(numbers))\n    }\n\n    // For\
    \ a given list of input numbers, calculate the variance of this dataset.\n   \
    \ // The variance is the sum of squared differences from the mean divided by\n\
    \    // the number of numbers.\n    // >>> variance((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.25f)\n    def variance(numbers\
    \ : List[Float]) : Float = {\n", "        val mean = numbers.reduce((a, b) ->\
    \ a + b) / numbers.size()\n        val mad = numbers.map(x -> Math.abs(x - mean)).reduce((a,\
    \ b) -> a + b) / numbers.size()\n        return mad\n    }\n\n    // For a given\
    \ list of input numbers, calculate the Median Absolute Deviation\n    // around\
    \ the median of this dataset.\n    // Median Absolute Deviation is the median\
    \ of the absolute deviations from the median:\n    // MAD = median(| x - x_median\
    \ |)\n    // >>> medianAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def medianAbsoluteDeviation(numbers\
    \ : List[Float]) : Float = {\n        val median = numbers.reduce((a, b) -> a\
    \ + b) / numbers.size()\n        val mad = numbers.map(x -> Math.abs(x - median)).reduce((a,\
    \ b) -> a + b) / numbers.size()\n        return mad\n    }\n\n    // For a given\
    \ list of input numbers, calculate the Standard Deviation\n    // around the mean\
    \ of this dataset.\n    // Standard Deviation is the square root of the variance:\n\
    \    // SD = sqrt(variance)\n    // >>> standardDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def standardDeviation(numbers\
    \ : List[Float]) : Float = {\n        val mean = numbers.reduce((a, b) -> a +\
    \ b) / numbers.size()\n        val variance = numbers.map(x -> Math.pow(x - mean,\
    \ 2)).reduce((a, b) -> a + b) / numbers.size()\n        return Math.sqrt(variance)\n\
    \    }\n\n    // For a given list of input numbers, calculate the Variance\n \
    \   // around the mean of this dataset.\n    // Variance is the sum of squared\
    \ deviations from the mean:\n    // V", "        var mean = 0.0f\n        var\
    \ sum = 0.0f\n        for (x : Float) {\n            sum += x\n        }\n   \
    \     mean = sum / numbers.length\n        var sumDeviations = 0.0f\n        for\
    \ (x : Float) {\n            sumDeviations += Math.abs(x - mean)\n        }\n\
    \        return sumDeviations / numbers.length", "        val mean = numbers.reduce((a,\
    \ b) -> a + b) / numbers.size()\n        val sum = numbers.map(x -> Math.abs(x\
    \ - mean)).sum()\n        return sum / numbers.size()", "        var sum = 0.0f\n\
    \        for (i <- numbers.size) {\n            sum += Math.abs(numbers[i] - mean(numbers))\n\
    \        }\n        return sum / numbers.size", "        val mean = mean(numbers)\n\
    \        val result = 0.0f\n        for (i <- numbers.toIterator) {\n        \
    \    result += Math.abs(i - mean)\n        }\n        result /= numbers.size()\n\
    \        return result", "        val mean = numbers.reduce((a, b) -> a + b) /\
    \ numbers.size()\n        val sum = numbers.map(x -> Math.abs(x - mean)).sum()\n\
    \        return sum / numbers.size()", "        val mean = numbers.reduce((a,\
    \ b) -> a + b) / numbers.size()\n        val deviations = numbers.map(x -> Math.abs(x\
    \ - mean)).toSeq()\n        val mad = deviations.reduce((a, b) -> a + b) / deviations.size()\n\
    \        return mad", "        val mean = numbers.reduce((a, b) -> a + b) / numbers.size()\n\
    \        val result = numbers.map(x -> Math.abs(x - mean)).reduce((a, b) -> a\
    \ + b) / numbers.size()\n        result", "        val mean = numbers.reduce((a,\
    \ b) -> a + b) / numbers.size()\n        val result = numbers.map(x -> Math.abs(x\
    \ - mean)).sum() / numbers.size()\n        result", "        var mean = 0.0f\n\
    \        var sum = 0.0f\n        for (x : Float) {\n            sum += x\n   \
    \     }\n        mean = sum / numbers.length\n        var sum = 0.0f\n       \
    \ for (x : Float) {\n            sum += Math.abs(x - mean)\n        }\n      \
    \  return sum / numbers.length", "        var sum = 0.0f\n        for (i <- numbers.size)\
    \ {\n            sum += Math.abs(numbers.get(i) - mean(numbers))\n        }\n\
    \        return sum / numbers.size", "        var sum = 0.0f\n        for (i <-\
    \ numbers.size) {\n            sum += Math.abs(numbers.get(i) - mean(numbers))\n\
    \        }\n        return sum / numbers.size", "        var sum = 0.0f\n    \
    \    for (i <- numbers.size) {\n            sum += Math.abs(numbers[i] - mean(numbers))\n\
    \        }\n        return sum / numbers.size", "        val mean = mean(numbers)\n\
    \        val sum = 0.0\n        for (i <- numbers.size) {\n            sum +=\
    \ Math.abs(numbers[i] - mean)\n        }\n        return sum / numbers.size\n\
    \    }\n\n    // For a given list of input numbers, calculate the Mean of this\
    \ dataset.\n    // >>> mean((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (3.0f)\n    def mean(numbers : List[Float]) : Float\
    \ = {\n        val sum = 0.0\n        for (i <- numbers.size) {\n            sum\
    \ += numbers[i]\n        }\n        return sum / numbers.size\n    }\n\n    //\
    \ For a given list of input numbers, calculate the Median of this dataset.\n \
    \   // >>> median((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (2.0f)\n    def median(numbers : List[Float]) : Float = {\n        val\
    \ sorted = numbers.toJavaList().sort(Comparator.naturalOrder())\n        return\
    \ sorted.get(sorted.size() / 2)\n    }\n\n    // For a given list of input numbers,\
    \ calculate the Median of this dataset.\n    // >>> median((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers\
    \ : List[Float]) : Float = {\n        val sorted = numbers.toJavaList().sort(Comparator.naturalOrder())\n\
    \        return sorted.get(sorted.size() / 2)\n    }\n\n    // For a given list\
    \ of input numbers, calculate the Median of this dataset.\n    // >>> median((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers\
    \ : List[Float]) : Float =", "        var mean = mean(numbers)\n        var sum\
    \ = 0.0\n        for (x : numbers) {\n            sum += Math.abs(x - mean)\n\
    \        }\n        return sum / numbers.length\n    }\n\n    // For a given list\
    \ of input numbers, calculate the mean of this dataset.\n    // >>> mean((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.5f)\n    def mean(numbers\
    \ : List[Float]) : Float = {\n        return sum(numbers) / numbers.length\n \
    \   }\n\n    // For a given list of input numbers, calculate the sum of this dataset.\n\
    \    // >>> sum((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (10.0f)\n    def sum(numbers : List[Float]) : Float = {\n        return\
    \ sumToZero(numbers)\n    }\n\n    // For a given list of input numbers, calculate\
    \ the sum of this dataset\n    // to a given value.\n    // >>> sumToZero((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (10.0f)\n    def sumToZero(numbers\
    \ : List[Float]) : Float = {\n        return sumTo(numbers, 0.0)\n    }\n\n  \
    \  // For a given list of input numbers, calculate the sum of this dataset\n \
    \   // to a given value.\n    // >>> sumTo(List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat), 10.0f)\n    // (30.0f)\n    def sumTo(numbers :\
    \ List[Float], value : Float) : Float = {\n        return sumToZero(numbers) +\
    \ value\n    }\n\n    // For a given list of input numbers, calculate the sum\
    \ of this dataset\n    // to a given value.\n    // >>> sumToZero", "        var\
    \ mean = mean(numbers)\n        var sum = 0.0f\n        for (x : numbers) {\n\
    \            sum += Math.abs(x - mean)\n        }\n        return sum / numbers.length\n\
    \    }\n\n    // For a given list of input numbers, calculate the Mean of this\
    \ dataset.\n    // >>> mean((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (3.0f)\n    def mean(numbers : List[Float]) : Float\
    \ = {\n        var sum = 0.0f\n        for (x : numbers) {\n            sum +=\
    \ x\n        }\n        return sum / numbers.length\n    }\n\n    // For a given\
    \ list of input numbers, calculate the Median of this dataset.\n    // >>> median((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers\
    \ : List[Float]) : Float = {\n        var sorted = numbers.toJavaList().sort(Comparator.naturalOrder())\n\
    \        var middle = sorted.length / 2\n        if (sorted.length % 2 == 1) {\n\
    \            return sorted.get(middle)\n        } else {\n            var lower\
    \ = sorted.get(middle - 1)\n            var upper = sorted.get(middle)\n     \
    \       return (lower + upper) / 2.0f\n        }\n    }\n\n    // For a given\
    \ list of input numbers, calculate the Median of this dataset.\n    // >>> median((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers\
    \ : List[Float]) : Float = {\n        var sorted = numbers.toJavaList().sort(Comparator.naturalOrder())\n\
    \        var middle = sorted.length / 2\n        if (sorted.length % 2 == 1) {\n\
    \            return sorted.get(middle)\n        } else {\n            var lower\
    \ = sorted.get(middle", "        var sum = 0.0f\n        for (x : Float) {\n \
    \           sum += Math.abs(x - mean(numbers))\n        }\n        return sum\
    \ / numbers.length\n    }\n\n    // For a given list of input numbers, calculate\
    \ the Mean.\n    // Mean is the average of all elements in the list:\n    // >>>\
    \ mean((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (2.5f)\n    def mean(numbers : List[Float]) : Float = {\n        return\
    \ sum(numbers) / numbers.length\n    }\n\n    // For a given list of input numbers,\
    \ calculate the sum of all elements in the list.\n    // >>> sum((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (10.0f)\n    def sum(numbers\
    \ : List[Float]) : Float = {\n        return sum(numbers, 0.0f)\n    }\n\n   \
    \ // For a given list of input numbers, calculate the sum of all elements in the\
    \ list.\n    // >>> sum((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)), 0.0f)\n    // (10.0f)\n    def sum(numbers : List[Float], initialValue\
    \ : Float) : Float = {\n        return foldLeft(numbers, initialValue, (x, y)\
    \ -> x + y)\n    }\n\n    // For a given list of input numbers, calculate the\
    \ foldLeft operation.\n    // FoldLeft is a left-fold operation.\n    // FoldLeft\
    \ is a left-fold operation.\n    // FoldLeft is a left-fold operation.\n    //\
    \ FoldLeft is a left-fold operation.\n    // FoldLeft is a left-fold operation.\n\
    \    // FoldLeft is a left-fold operation.\n    // FoldLeft is a left-fold operation.\n\
    \    // FoldLeft is a left-fold operation.\n    // FoldLeft is a left-fold operation.\n\
    \    //", "        var mean = numbers.reduce(0.0f) / numbers.size()\n        var\
    \ result = 0.0f\n        for (var number : numbers) {\n            result += Math.abs(number\
    \ - mean)\n        }\n        return result / numbers.size()", "        var x_mean\
    \ = mean(numbers)\n        var result = 0.0f\n        for (i <- numbers.size())\
    \ {\n            var x = numbers[i]\n            result += Math.abs(x - x_mean)\n\
    \        }\n        return result / numbers.size()\n    }\n\n    // For a given\
    \ list of input numbers, calculate the median of this dataset.\n    // The median\
    \ is the value separating the higher half of a dataset from the lower half.\n\
    \    // >>> median((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (2.0f)\n    def median(numbers : List[Float]) : Float = {\n        var\
    \ sorted = numbers.toSeq().toList()\n        var middle = sorted.size() / 2\n\
    \        if (sorted.size() % 2 == 1) {\n            return sorted.apply(middle)\n\
    \        } else {\n            var lower = sorted.apply(middle - 1)\n        \
    \    var upper = sorted.apply(middle)\n            return (lower + upper) / 2.0f\n\
    \        }\n    }\n\n    // For a given list of input numbers, calculate the mean\
    \ of this dataset.\n    // The mean is the sum of all elements divided by the\
    \ number of elements.\n    // >>> mean((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.5f)\n    def mean(numbers : List[Float])\
    \ : Float = {\n        var result = 0.0f\n        for (i <- numbers.size()) {\n\
    \            var x = numbers[i]\n            result += x\n        }\n        return\
    \ result / numbers.size()\n    }\n\n    // For a given list of input numbers,\
    \ calculate the standard deviation of this dataset.\n    // The standard deviation\
    \ is the square root of the variance.\n    // >>> standardDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def", "    \
    \    var sum = 0.0f\n        for (x : numbers) {\n            sum += Math.abs(x\
    \ - mean(numbers))\n        }\n        return sum / numbers.length\n    }\n\n\
    \    // For a given list of input numbers, calculate the median of this dataset.\n\
    \    // The median is the value separating the higher half of a dataset from the\
    \ lower half.\n    // >>> median((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers : List[Float]) : Float\
    \ = {\n        var sorted = numbers.toJavaList().sort(Comparator.naturalOrder())\n\
    \        var middle = sorted.length / 2\n        if (sorted.length % 2 == 1) {\n\
    \            return sorted.get(middle)\n        } else {\n            var lower\
    \ = sorted.get(middle - 1)\n            var higher = sorted.get(middle)\n    \
    \        return (lower + higher) / 2.0f\n        }\n    }\n\n    // For a given\
    \ list of input numbers, calculate the standard deviation of this dataset.\n \
    \   // The standard deviation is the square root of the variance.\n    // >>>\
    \ standardDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (1.0f)\n    def standardDeviation(numbers : List[Float]) : Float = {\n\
    \        var mean = mean(numbers)\n        var sum = 0.0f\n        for (x : numbers)\
    \ {\n            sum += Math.pow(x - mean, 2)\n        }\n        return Math.sqrt(sum\
    \ / numbers.length)\n    }\n\n    // For a given list of input numbers, calculate\
    \ the variance of this dataset.\n    // The variance is the sum of squared deviations\
    \ from the mean.\n    // >>> variance((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def variance(numbers : List[",
  "        val mean = mean(numbers)\n        val sum = 0.0\n        for (x : numbers)\
    \ {\n            sum += Math.abs(x - mean)\n        }\n        return sum / numbers.length\n\
    \    }\n\n    // For a given list of input numbers, calculate the Mean.\n    //\
    \ Mean is the average of all elements in the list:\n    // >>> mean((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def mean(numbers\
    \ : List[Float]) : Float = {\n        val sum = 0.0\n        for (x : numbers)\
    \ {\n            sum += x\n        }\n        return sum / numbers.length\n  \
    \  }\n\n    // For a given list of input numbers, calculate the Median.\n    //\
    \ Median is the middle number in the list:\n    // >>> median((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers\
    \ : List[Float]) : Float = {\n        val sorted = numbers.toSeq().toJavaList()\n\
    \        val middle = sorted.length() / 2\n        val middleValue = sorted.apply(middle)\n\
    \        return middleValue\n    }\n\n    // For a given list of input numbers,\
    \ calculate the Mode.\n    // Mode is the number that appears the most in the\
    \ list:\n    // >>> mode((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (3.0f)\n    def mode(numbers : List[Float]) : Float\
    \ = {\n        val sorted = numbers.toSeq().toJavaList()\n        val maxCount\
    \ = 0\n        val maxValue = 0.0\n        for (x : sorted) {\n            if\
    \ (sorted.count(x) > maxCount) {\n                maxCount = sorted.count(x)\n\
    \                maxValue = x\n            }\n        }\n        return maxValue\n\
    \    }\n\n    // For", "        val mean = mean(numbers)\n        val mad = 0.0\n\
    \        for (i <- numbers.size) {\n            val diff = numbers[i] - mean\n\
    \            val absDiff = Math.abs(diff)\n            mad += absDiff\n      \
    \  }\n        mad /= numbers.size\n        return mad", "        var sum = 0.0f\n\
    \        for (x : numbers) {\n            sum += Math.abs(x - mean(numbers))\n\
    \        }\n        return sum / numbers.length\n    }\n\n    // For a given list\
    \ of input numbers, calculate the median of this dataset.\n    // The median is\
    \ the value that has exactly the same number of elements\n    // on either side\
    \ of it in the sorted list.\n    // >>> median((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers : List[Float])\
    \ : Float = {\n        var sorted = numbers.toJavaList().sort(Comparator.naturalOrder())\n\
    \        var middle = sorted.length / 2\n        var middleValue = sorted.get(middle)\n\
    \        if (sorted.length % 2 == 0) {\n            return (middleValue + sorted.get(middle\
    \ - 1)) / 2.0f\n        } else {\n            return middleValue\n        }\n\
    \    }\n\n    // For a given list of input numbers, calculate the mode of this\
    \ dataset.\n    // The mode is the value that appears the most frequently.\n \
    \   // >>> mode((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (3.0f)\n    def mode(numbers : List[Float]) : Float = {\n        var sorted\
    \ = numbers.toJavaList().sort(Comparator.naturalOrder())\n        var mode = sorted.head()\n\
    \        var count = 1\n        for (x : numbers) {\n            if (x == mode)\
    \ {\n                count += 1\n            } else {\n                if (count\
    \ > 1) {\n                    return mode\n                }\n               \
    \ count = 1\n                mode = x\n            }\n        }\n        return\
    \ mode\n    }\n\n    // For a given list of input numbers, calculate the standard\
    \ deviation of this dataset.\n    // The standard deviation is the square root\
    \ of the variance.\n    // >>> standardDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,",
  "        var sum = 0.0f\n        for (i <- numbers.size) {\n            sum += Math.abs(numbers[i]\
    \ - mean(numbers))\n        }\n        return sum / numbers.size", "        val\
    \ mean = numbers.reduce((a, b) -> a + b) / numbers.size()\n        val result\
    \ = numbers.map(x -> Math.abs(x - mean)).sum() / numbers.size()\n        result",
  "        val mean = numbers.reduce((a, b) -> a + b) / numbers.size()\n        val\
    \ deviations = numbers.map(x -> Math.abs(x - mean)).toSeq()\n        val mad =\
    \ deviations.reduce((a, b) -> a + b) / deviations.size()\n        return mad",
  "        val mean = mean(numbers)\n        val result = 0.0f\n        for (i <-\
    \ numbers.size) {\n            val diff = numbers[i] - mean\n            result\
    \ += Math.abs(diff)\n        }\n        result /= numbers.size\n        return\
    \ result", "        var x_mean = mean(numbers)\n        var sum = 0.0f\n     \
    \   for (i <- numbers.size) {\n            sum += Math.abs(numbers[i] - x_mean)\n\
    \        }\n        return sum / numbers.size\n    }\n\n    // For a given list\
    \ of input numbers, calculate the mean of this dataset.\n    // >>> mean((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.5f)\n    def mean(numbers\
    \ : List[Float]) : Float = {\n        var sum = 0.0f\n        for (i <- numbers.size)\
    \ {\n            sum += numbers[i]\n        }\n        return sum / numbers.size\n\
    \    }\n\n    // For a given list of input numbers, calculate the median of this\
    \ dataset.\n    // >>> median((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (2.5f)\n    def median(numbers : List[Float]) : Float\
    \ = {\n        var sorted = numbers.toJavaList().sort(Comparator.naturalOrder())\n\
    \        var middle = sorted.size() / 2\n        if (sorted.size() % 2 == 0) {\n\
    \            return (sorted.get(middle - 1) + sorted.get(middle)) / 2.0f\n   \
    \     } else {\n            return sorted.get(middle)\n        }\n    }\n\n  \
    \  // For a given list of input numbers, calculate the standard deviation of this\
    \ dataset.\n    // >>> standardDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.1180339887498949)\n    def standardDeviation(numbers\
    \ : List[Float]) : Float = {\n        var x_mean = mean(numbers)\n        var\
    \ sum = 0.0f\n        for (i <- numbers.size) {\n            sum += Math.pow(numbers[i]\
    \ - x_mean, 2", "        val mean = mean(numbers)\n        val mad = 0.0f\n  \
    \      for (i <- numbers.size()) {\n            val diff = numbers[i] - mean\n\
    \            mad += Math.abs(diff)\n        }\n        mad /= numbers.size()\n\
    \        return mad\n    }\n\n    // For a given list of input numbers, calculate\
    \ the mean of this dataset.\n    // >>> mean((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.5f)\n    def mean(numbers : List[Float])\
    \ : Float = {\n        val sum = 0.0f\n        for (i <- numbers.size()) {\n \
    \           sum += numbers[i]\n        }\n        return sum / numbers.size()\n\
    \    }\n\n    // For a given list of input numbers, calculate the median of this\
    \ dataset.\n    // >>> median((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (2.5f)\n    def median(numbers : List[Float]) : Float\
    \ = {\n        val sorted = numbers.toJavaList().sort(Comparator.naturalOrder())\n\
    \        val size = numbers.size()\n        if (size % 2 == 1) {\n           \
    \ return sorted.get(size / 2)\n        } else {\n            val lower = sorted.get(size\
    \ / 2 - 1)\n            val upper = sorted.get(size / 2)\n            return (lower\
    \ + upper) / 2.0f\n        }\n    }\n\n    // For a given list of input numbers,\
    \ calculate the standard deviation of this dataset.\n    // >>> standardDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.1180339887498949)\n \
    \   def standardDeviation(numbers : List[Float]) : Float = {\n        val mean\
    \ = mean(numbers)\n        val sum = 0.0f\n        for (i <- numbers.size()) {\n\
    \            val", "        var sum = 0.0f\n        var mean = 0.0f\n        for\
    \ (i <- numbers.size) {\n            sum += numbers[i]\n            mean += numbers[i]\n\
    \        }\n        mean /= numbers.size\n        var sumOfSquares = 0.0f\n  \
    \      for (i <- numbers.size) {\n            sumOfSquares += (numbers[i] - mean)\
    \ * (numbers[i] - mean)\n        }\n        return sumOfSquares / numbers.size",
  "        val mean = numbers.reduce((a, b) -> a + b) / numbers.size()\n        val\
    \ result = numbers.map(x -> Math.abs(x - mean)).reduce((a, b) -> a + b) / numbers.size()\n\
    \        result", "        val mean = mean(numbers)\n        val mad = 0.0f\n\
    \        for (i <- numbers.size()) {\n            val diff = numbers[i] - mean\n\
    \            mad += Math.abs(diff)\n        }\n        mad /= numbers.size()\n\
    \        return mad\n    }\n\n    // For a given list of input numbers, calculate\
    \ the mean of this dataset.\n    // >>> mean((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.5f)\n    def mean(numbers : List[Float])\
    \ : Float = {\n        val sum = 0.0f\n        for (i <- numbers.size()) {\n \
    \           sum += numbers[i]\n        }\n        return sum / numbers.size()\n\
    \    }\n\n    // For a given list of input numbers, calculate the median of this\
    \ dataset.\n    // >>> median((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers : List[Float]) : Float\
    \ = {\n        val sorted = numbers.toJavaList().sort(Comparator.naturalOrder())\n\
    \        val size = numbers.size()\n        if (size % 2 == 0) {\n           \
    \ val middle = size / 2\n            val lower = sorted.get(middle - 1)\n    \
    \        val upper = sorted.get(middle)\n            return (lower + upper) /\
    \ 2.0f\n        } else {\n            return sorted.get(size / 2)\n        }\n\
    \    }\n\n    // For a given list of input numbers, calculate the standard deviation\
    \ of this dataset.\n    // >>> standardDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def standardDeviation(numbers\
    \ : List[Float]) : Float = {\n        val mean = mean(numbers)\n        val sum\
    \ = 0.0f\n        for (i <- numbers.size()) {\n            val diff", "      \
    \  val mean = mean(numbers)\n        val mad = 0.0f\n        for (i <- numbers.size())\
    \ {\n            val diff = numbers[i] - mean\n            mad += Math.abs(diff)\n\
    \        }\n        mad /= numbers.size()\n        return mad\n    }\n\n    //\
    \ For a given list of input numbers, calculate the Mean.\n    // Mean is the sum\
    \ of all elements divided by the number of elements:\n    // mean = sum(numbers)\
    \ / numberOfElements\n    // >>> mean((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (3.0f)\n    def mean(numbers : List[Float])\
    \ : Float = {\n        val sum = 0.0f\n        for (i <- numbers.size()) {\n \
    \           sum += numbers[i]\n        }\n        return sum / numbers.size()\n\
    \    }\n\n    // For a given list of input numbers, calculate the Median.\n  \
    \  // Median is the middle value in the list.\n    // >>> median((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers\
    \ : List[Float]) : Float = {\n        val sorted = numbers.toJavaList().sort(Comparator.naturalOrder())\n\
    \        val middle = sorted.size() / 2\n        return sorted.get(middle)\n \
    \   }\n\n    // For a given list of input numbers, calculate the Mode.\n    //\
    \ Mode is the value that appears the most frequently in the list.\n    // >>>\
    \ mode((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (2.0f)\n    def mode(numbers : List[Float]) : Float = {\n        val sorted\
    \ = numbers.toJavaList().sort(Comparator.naturalOrder())\n        val max = 1.0f\n\
    \        val maxCount = 0\n        for (i <- sorted.size()) {\n            val\
    \ count = 1", "        var x_mean = mean(numbers)\n        var x_sum = 0.0f\n\
    \        for (x : numbers) {\n            x_sum += Math.abs(x - x_mean)\n    \
    \    }\n        return x_sum / numbers.length\n    }\n\n    // For a given list\
    \ of input numbers, calculate the median of this dataset.\n    // >>> median((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers\
    \ : List[Float]) : Float = {\n        var sorted = numbers.toSeq().toList()\n\
    \        sorted.sort()\n        return sorted.get(sorted.length() / 2)\n    }\n\
    \n    // For a given list of input numbers, calculate the standard deviation of\
    \ this dataset.\n    // >>> standardDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def standardDeviation(numbers\
    \ : List[Float]) : Float = {\n        var x_mean = mean(numbers)\n        var\
    \ x_sum = 0.0f\n        for (x : numbers) {\n            x_sum += Math.pow(x -\
    \ x_mean, 2)\n        }\n        return Math.sqrt(x_sum / numbers.length)\n  \
    \  }\n\n    // For a given list of input numbers, calculate the variance of this\
    \ dataset.\n    // >>> variance((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (2.0f)\n    def variance(numbers : List[Float]) : Float\
    \ = {\n        var x_mean = mean(numbers)\n        var x_sum = 0.0f\n        for\
    \ (x : numbers) {\n            x_sum += Math.pow(x - x_mean, 2)\n        }\n \
    \       return x_sum / numbers.length\n    }\n\n    // For a given list of input\
    \ numbers", "        var mean = mean(numbers)\n        var result = 0.0f\n   \
    \     for (i <- numbers.size) {\n            var diff = numbers[i] - mean\n  \
    \          result += diff * diff\n        }\n        result /= numbers.size\n\
    \        result = math.sqrt(result)\n        return result", "        var mean\
    \ = numbers.reduce((a, b) -> a + b) / numbers.size()\n        var result = 0.0f\n\
    \        for (i <- 0 until numbers.size()) {\n            var diff = numbers[i]\
    \ - mean\n            result += Math.abs(diff)\n        }\n        result /= numbers.size()\n\
    \        return result", "        val mean = mean(numbers)\n        val result\
    \ = 0.0f\n        for (i <- numbers.size()) {\n            result += Math.abs(numbers[i]\
    \ - mean)\n        }\n        result /= numbers.size()\n        return result",
  "        val mean = numbers.reduce((a, b) -> a + b) / numbers.size()\n        val\
    \ mad = numbers.map(x -> Math.abs(x - mean)).reduce((a, b) -> a + b) / numbers.size()\n\
    \        return mad", "        var mean = numbers.reduce((a, b) -> a + b) / numbers.size()\n\
    \        var sum = numbers.map(x -> Math.abs(x - mean)).sum()\n        return\
    \ sum / numbers.size()", "        val mean = numbers.reduce((a, b) -> a + b) /\
    \ numbers.size()\n        val sum = numbers.map(x -> Math.abs(x - mean)).sum()\n\
    \        return sum / numbers.size()", "        var sum = 0.0f\n        for (i\
    \ <- numbers.size()) {\n            sum += Math.abs(numbers.apply(i) - numbers.apply(i).mean())\n\
    \        }\n        return sum / numbers.size()", "        val mean = numbers.reduce((x,\
    \ y) -> x + y) / numbers.size()\n        val sum = numbers.map(x -> Math.abs(x\
    \ - mean)).sum()\n        val mad = sum / numbers.size()\n        return mad",
  "        var mean = numbers.reduce((x, y) -> x + y) / numbers.size()\n        var\
    \ result = numbers.map(x -> Math.abs(x - mean)).sum() / numbers.size()\n     \
    \   return result", "        var sum = 0.0f\n        for (x : Float) {\n     \
    \       sum += Math.abs(x - mean(numbers))\n        }\n        return sum / numbers.length\n\
    \    }\n\n    // For a given list of input numbers, calculate the Mean of this\
    \ dataset.\n    // Mean is the sum of all elements divided by the number of elements:\n\
    \    // mean = sum / n\n    // >>> mean((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (3.0f)\n    def mean(numbers : List[Float])\
    \ : Float = {\n        var sum = 0.0f\n        for (x : Float) {\n           \
    \ sum += x\n        }\n        return sum / numbers.length\n    }\n\n    // For\
    \ a given list of input numbers, calculate the Median of this dataset.\n    //\
    \ Median is the middle value in the sorted list of numbers:\n    // median = (numbers[numbers.length\
    \ / 2] + numbers[numbers.length / 2 - 1]) / 2\n    // >>> median((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers\
    \ : List[Float]) : Float = {\n        var sorted = numbers.toJavaList().sorted()\n\
    \        return (sorted[sorted.length / 2] + sorted[sorted.length / 2 - 1]) /\
    \ 2.0f\n    }\n\n    // For a given list of input numbers, calculate the Standard\
    \ Deviation of this dataset.\n    // Standard Deviation is the square root of\
    \ the variance:\n    // std = sqrt(variance)\n    // >>> standardDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def standardDeviation(numbers\
    \ : List[Float]) : Float = {\n        var sum = 0.0f\n        for (x : Float)\
    \ {\n            sum += Math.p", "        val mean = mean(numbers)\n        val\
    \ result = 0.0f\n        for (i <- numbers.size()) {\n            result += Math.abs(numbers[i]\
    \ - mean)\n        }\n        result /= numbers.size()\n        return result\n\
    \    }\n\n    // For a given list of input numbers, calculate the mean of this\
    \ dataset.\n    // >>> mean((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (2.5f)\n    def mean(numbers : List[Float]) : Float\
    \ = {\n        val result = 0.0f\n        for (i <- numbers.size()) {\n      \
    \      result += numbers[i]\n        }\n        result /= numbers.size()\n   \
    \     return result\n    }\n\n    // For a given list of input numbers, calculate\
    \ the median of this dataset.\n    // >>> median((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.5f)\n    def median(numbers : List[Float])\
    \ : Float = {\n        val result = numbers.toJavaList().sort(java.util.Comparator.comparing(x\
    \ -> x)).get(numbers.size() / 2)\n        return result\n    }\n\n    // For a\
    \ given list of input numbers, calculate the standard deviation of this dataset.\n\
    \    // >>> standardDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (1.0f)\n    def standardDeviation(numbers : List[Float])\
    \ : Float = {\n        val mean = mean(numbers)\n        val result = 0.0f\n \
    \       for (i <- numbers.size()) {\n            result += Math.pow(numbers[i]\
    \ - mean, 2)\n        }\n        result /= numbers.size()\n        return Math.sqrt(result)\n\
    \    }\n\n    // For a given list of input numbers, calculate the variance of\
    \ this dataset.\n    // >>> variance", "        val mean = mean(numbers)\n   \
    \     val mad = 0.0\n        for (i <- numbers.toIterator) {\n            val\
    \ diff = i.toFloat - mean\n            mad += Math.abs(diff)\n        }\n    \
    \    mad /= numbers.size()\n        return mad\n    }\n\n    // For a given list\
    \ of input numbers, calculate the mean of this dataset.\n    // >>> mean((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.5f)\n    def mean(numbers\
    \ : List[Float]) : Float = {\n        val sum = 0.0\n        for (i <- numbers.toIterator)\
    \ {\n            sum += i.toFloat\n        }\n        return sum / numbers.size()\n\
    \    }\n\n    // For a given list of input numbers, calculate the median of this\
    \ dataset.\n    // >>> median((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (2.5f)\n    def median(numbers : List[Float]) : Float\
    \ = {\n        val sorted = numbers.toJavaList.sort(Comparator.naturalOrder)\n\
    \        val size = numbers.size()\n        if (size % 2 == 0) {\n           \
    \ val middle = size / 2\n            val lower = sorted.get(middle - 1)\n    \
    \        val upper = sorted.get(middle)\n            return (lower + upper) /\
    \ 2.0\n        } else {\n            return sorted.get(size / 2)\n        }\n\
    \    }\n\n    // For a given list of input numbers, calculate the standard deviation\
    \ of this dataset.\n    // >>> standardDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.1180339887498949)\n    def standardDeviation(numbers\
    \ : List[Float]) : Float = {\n        val mean = mean(numbers)\n        val sum\
    \ = 0.0\n        for (i <- numbers.toIterator) {", "        val mean = mean(numbers)\n\
    \        val result = 0.0f\n        for (i <- numbers.size()) {\n            val\
    \ diff = numbers[i] - mean\n            result += Math.abs(diff)\n        }\n\
    \        return result / numbers.size()", "        val mean = numbers.reduce((a,\
    \ b) -> a + b) / numbers.size()\n        val mad = numbers.map(x -> Math.abs(x\
    \ - mean)).reduce((a, b) -> a + b) / numbers.size()\n        return mad", "  \
    \      var sum = 0.0\n        for (i <- numbers.size()) {\n            sum +=\
    \ Math.abs(numbers[i] - mean(numbers))\n        }\n        return sum / numbers.size()",
  "        var sum = 0.0f\n        var mean = 0.0f\n        for (i <- numbers.size())\
    \ {\n            sum += numbers[i]\n        }\n        mean = sum / numbers.size()\n\
    \        var sum = 0.0f\n        for (i <- numbers.size()) {\n            sum\
    \ += Math.abs(numbers[i] - mean)\n        }\n        return sum / numbers.size()",
  "        var sum = 0.0f\n        for (x : Float) {\n            sum += Math.abs(x\
    \ - mean(numbers))\n        }\n        return sum / numbers.length\n    }\n\n\
    \    // For a given list of input numbers, calculate the Mean of this dataset.\n\
    \    // Mean is the sum of all elements divided by the number of elements:\n \
    \   // mean = sum / n\n    // >>> mean((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (3.0f)\n    def mean(numbers : List[Float])\
    \ : Float = {\n        var sum = 0.0f\n        for (x : Float) {\n           \
    \ sum += x\n        }\n        return sum / numbers.length\n    }\n\n    // For\
    \ a given list of input numbers, calculate the Median of this dataset.\n    //\
    \ Median is the middle number in the list.\n    // >>> median((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers\
    \ : List[Float]) : Float = {\n        var sorted = numbers.toJavaList().toJavaList().sorted()\n\
    \        return sorted.get(sorted.length / 2)\n    }\n\n    // For a given list\
    \ of input numbers, calculate the Standard Deviation of this dataset.\n    //\
    \ Standard Deviation is the square root of the variance.\n    // >>> standardDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def standardDeviation(numbers\
    \ : List[Float]) : Float = {\n        var mean = mean(numbers)\n        var sum\
    \ = 0.0f\n        for (x : Float) {\n            sum += Math.pow(x - mean, 2)\n\
    \        }\n        return Math.sqrt(sum / numbers.length)\n    }\n\n    // For\
    \ a given list of input numbers, calculate the Variance of this dataset.", " \
    \       val mean = mean(numbers)\n        val result = 0.0f\n        for (i <-\
    \ numbers.toIterator) {\n            val diff = i.toFloat - mean\n           \
    \ result += diff * diff\n        }\n        result /= numbers.size()\n       \
    \ result\n    }\n\n    // For a given list of input numbers, calculate the mean\
    \ of this dataset.\n    // >>> mean((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (3.0f)\n    def mean(numbers : List[Float]) : Float\
    \ = {\n        val result = 0.0f\n        for (i <- numbers.toIterator) {\n  \
    \          result += i.toFloat\n        }\n        result /= numbers.size()\n\
    \        result\n    }\n\n    // For a given list of input numbers, calculate\
    \ the median of this dataset.\n    // >>> median((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers : List[Float])\
    \ : Float = {\n        val sorted = numbers.toJavaList.sort(Comparator.naturalOrder())\n\
    \        val size = numbers.size()\n        val middle = size / 2\n        if\
    \ (size % 2 == 0) {\n            val lower = sorted.get(middle - 1)\n        \
    \    val upper = sorted.get(middle)\n            val lowerMedian = lower + (lower\
    \ - upper) / 2\n            val upperMedian = lowerMedian + (upper - lower) /\
    \ 2\n            val result = lowerMedian\n            result\n        } else\
    \ {\n            val lowerMedian = sorted.get(middle)\n            val result\
    \ = lowerMedian\n            result\n        }\n    }\n\n    // For a given list\
    \ of input numbers, calculate the standard deviation of this dataset.\n    //\
    \ >>> standardDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (1.0f)\n    def standardDeviation", "        var mean\
    \ = numbers.reduce(0.0f) / numbers.size()\n        var sum = 0.0f\n        for\
    \ (i <- numbers.size()) {\n            sum += Math.abs(numbers[i] - mean)\n  \
    \      }\n        return sum / numbers.size()", "        val mean = numbers.reduce((a,\
    \ b) -> a + b) / numbers.size()\n        val result = numbers.map(x -> Math.abs(x\
    \ - mean)).reduce((a, b) -> a + b) / numbers.size()\n        result", "      \
    \  var sum = 0.0f\n        for (i <- numbers.toIterator) {\n            sum +=\
    \ i.toFloat - numbers.head.toFloat\n        }\n        return sum / numbers.length.toFloat",
  "        val mean = numbers.reduce((a, b) -> a + b) / numbers.size()\n        val\
    \ result = numbers.map(x -> Math.abs(x - mean)).reduce((a, b) -> a + b) / numbers.size()\n\
    \        result", "        var sum = 0.0f\n        for (x : Float) {\n       \
    \     sum += Math.abs(x - mean(numbers))\n        }\n        return sum / numbers.length\n\
    \    }\n\n    // For a given list of input numbers, calculate the median of this\
    \ dataset.\n    // Median is the middle number in the sorted list.\n    // >>>\
    \ median((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (2.0f)\n    def median(numbers : List[Float]) : Float = {\n        var\
    \ sorted = numbers.toJavaList().sort(Comparator.naturalOrder())\n        return\
    \ sorted.get(sorted.length() / 2)\n    }\n\n    // For a given list of input numbers,\
    \ calculate the mode of this dataset.\n    // Mode is the number that appears\
    \ the most often in the list.\n    // >>> mode((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def mode(numbers : List[Float])\
    \ : Float = {\n        var counts = new HashMap[Float]()\n        for (x : Float)\
    \ {\n            counts.put(x, counts.getOrElse(x, 0) + 1)\n        }\n      \
    \  var maxCount = 0\n        var maxValue = 0.0f\n        for (x : Float) {\n\
    \            if (counts.get(x) > maxCount) {\n                maxCount = counts.get(x)\n\
    \                maxValue = x\n            }\n        }\n        return maxValue\n\
    \    }\n\n    // For a given list of input numbers, calculate the range of this\
    \ dataset.\n    // Range is the difference between the largest and smallest number\
    \ in the list.\n    // >>> range((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (3.0f)\n    def range(numbers : List[Float]) : Float\
    \ = {\n        return max(numbers) -", "        var sum = 0.0f\n        for (x\
    \ : Float) {\n            sum += Math.abs(x - mean(numbers))\n        }\n    \
    \    return sum / numbers.length\n    }\n\n    // For a given list of input numbers,\
    \ calculate the median of this dataset.\n    // The median is the number that\
    \ is in the middle of the dataset.\n    // >>> median((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers\
    \ : List[Float]) : Float = {\n        var sorted = numbers.toSeq().toList()\n\
    \        sorted.sort()\n        return sorted.get(sorted.length / 2)\n    }\n\n\
    \    // For a given list of input numbers, calculate the mode of this dataset.\n\
    \    // The mode is the number that appears the most frequently in the dataset.\n\
    \    // >>> mode((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (2.0f)\n    def mode(numbers : List[Float]) : Float = {\n        var sorted\
    \ = numbers.toSeq().toList()\n        sorted.sort()\n        var max = 0.0f\n\
    \        var maxCount = 0\n        for (x : Float) {\n            if (sorted.count(x)\
    \ > maxCount) {\n                max = x\n                maxCount = sorted.count(x)\n\
    \            }\n        }\n        return max\n    }\n\n    // For a given list\
    \ of input numbers, calculate the median of this dataset.\n    // The median is\
    \ the number that is in the middle of the dataset.\n    // >>> median((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers\
    \ : List[Float]) : Float = {\n        var sorted = numbers.toSeq().toList()\n\
    \        sorted.sort()\n        return sorted.get(sorted.", "        var mean\
    \ = numbers.reduce((a, b) -> a + b) / numbers.size()\n        var sum = numbers.map(x\
    \ -> Math.abs(x - mean)).sum()\n        return sum / numbers.size()\n    }\n\n\
    \    // For a given list of input numbers, calculate the Median Absolute Deviation\n\
    \    // around the median of this dataset.\n    // Median Absolute Deviation is\
    \ the median of the absolute deviations from the median:\n    // MAD = median(|\
    \ x - x_median |)\n    // >>> medianAbsoluteDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def medianAbsoluteDeviation(numbers\
    \ : List[Float]) : Float = {\n        var sorted = numbers.toJavaList().stream().sorted().collect(Collectors.toList())\n\
    \        var median = sorted.get((sorted.size() - 1) / 2)\n        var sum = numbers.map(x\
    \ -> Math.abs(x - median)).sum()\n        return sum / numbers.size()\n    }\n\
    \n    // For a given list of input numbers, calculate the Standard Deviation\n\
    \    // around the mean of this dataset.\n    // Standard Deviation is the square\
    \ root of the variance:\n    // STD = sqrt(variance)\n    // >>> standardDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def standardDeviation(numbers\
    \ : List[Float]) : Float = {\n        var mean = numbers.reduce((a, b) -> a +\
    \ b) / numbers.size()\n        var sum = numbers.map(x -> Math.pow(x - mean, 2)).sum()\n\
    \        return Math.sqrt(sum / numbers.size())\n    }\n\n    // For a given list\
    \ of input numbers, calculate the Variance\n    // Variance is the average of\
    \ the squared deviations from the mean:\n    // VAR = average(| x - x_mean |^2)\n\
    \    // >>> variance((List", "        var sum = 0.0f\n        for (i <- numbers.size)\
    \ {\n            sum += Math.abs(numbers[i] - mean(numbers))\n        }\n    \
    \    return sum / numbers.size", "        var sum = 0.0f\n        for (i <- numbers.size)\
    \ {\n            sum += Math.abs(numbers[i] - mean(numbers))\n        }\n    \
    \    return sum / numbers.size", "        var sum = 0.0f\n        for (i <- numbers.size())\
    \ {\n            sum += Math.abs(numbers.apply(i) - numbers.apply(i).mean())\n\
    \        }\n        return sum / numbers.size()", "        val mean = numbers.reduce((x,\
    \ y) -> x + y) / numbers.size()\n        val result = numbers.map(x -> Math.abs(x\
    \ - mean)).reduce((x, y) -> x + y) / numbers.size()\n        result", "      \
    \  var mean = numbers.reduce((x, y) -> x + y) / numbers.size()\n        var sum\
    \ = numbers.map(x -> Math.abs(x - mean)).sum()\n        return sum / numbers.size()",
  "        val mean = numbers.reduce((a, b) -> a + b) / numbers.size()\n        val\
    \ mad = numbers.map(x -> Math.abs(x - mean)).reduce((a, b) -> a + b) / numbers.size()\n\
    \        return mad", "        var sum = 0.0f\n        for (x : Float) {\n   \
    \         sum += Math.abs(x - mean(numbers))\n        }\n        return sum /\
    \ numbers.length\n    }\n\n    // For a given list of input numbers, calculate\
    \ the median of this dataset.\n    // Median is the value that has exactly half\
    \ of the elements less than it and\n    // half of the elements greater than it.\n\
    \    // >>> median((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (2.0f)\n    def median(numbers : List[Float]) : Float = {\n        var\
    \ sorted = numbers.toJavaList().sort(Comparator.naturalOrder())\n        return\
    \ _.nth(sorted, (sorted.length() / 2))\n    }\n\n    // For a given list of input\
    \ numbers, calculate the standard deviation of this\n    // dataset.\n    // Standard\
    \ deviation is the square root of the variance.\n    // >>> standardDeviation((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def standardDeviation(numbers\
    \ : List[Float]) : Float = {\n        var sum = 0.0f\n        for (x : Float)\
    \ {\n            sum += Math.pow(x - mean(numbers), 2)\n        }\n        return\
    \ Math.sqrt(sum / numbers.length)\n    }\n\n    // For a given list of input numbers,\
    \ calculate the variance of this dataset.\n    // Variance is the sum of squared\
    \ deviations from the mean.\n    // >>> variance((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def variance(numbers : List[Float])\
    \ : Float = {\n        var sum = 0.0f\n        for (x : Float) {\n           \
    \ sum += Math.pow(x - mean(numbers), 2)\n        }\n        return sum / numbers.length\n",
  "        var sum = 0.0f\n        for (i <- numbers.size) {\n            sum += Math.abs(numbers[i]\
    \ - mean(numbers))\n        }\n        return sum / numbers.size\n    }\n\n  \
    \  // For a given list of input numbers, calculate the median of this dataset.\n\
    \    // Median is the value that has exactly the same number of elements\n   \
    \ // in both the left and right half of the list.\n    // >>> median((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (2.0f)\n    def median(numbers\
    \ : List[Float]) : Float = {\n        var sorted = numbers.toSeq().toList()\n\
    \        sorted.sort()\n        return sorted.get(sorted.size() / 2)\n    }\n\n\
    \    // For a given list of input numbers, calculate the mode of this dataset.\n\
    \    // Mode is the value that appears the most frequently in the list.\n    //\
    \ >>> mode((List[Float](1.0f.toFloat, 2.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat)))\n    // (2.0f)\n    def mode(numbers : List[Float]) : Float\
    \ = {\n        var sorted = numbers.toSeq().toList()\n        sorted.sort()\n\
    \        var result = 0.0f\n        var count = 0\n        for (i <- sorted.size)\
    \ {\n            if (count == 0) {\n                result = sorted.get(i)\n \
    \               count = 1\n            } else if (sorted.get(i) == result) {\n\
    \                count += 1\n            } else {\n                count -= 1\n\
    \            }\n        }\n        return result\n    }\n\n    // For a given\
    \ list of input numbers, calculate the range of this dataset.\n    // Range is\
    \ the difference between the maximum and minimum values in the list.\n    // >>>\
    \ range((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n\
    \    // (3", "        val mean = mean(numbers)\n        val result = 0.0f\n  \
    \      for (i <- numbers.size()) {\n            val diff = numbers[i] - mean\n\
    \            result += Math.abs(diff)\n        }\n        result /= numbers.size()\n\
    \        return result", "        val mean = mean(numbers)\n        val mad =\
    \ 0.0f\n        for (i <- numbers.size()) {\n            val diff = numbers[i]\
    \ - mean\n            mad += Math.abs(diff)\n        }\n        mad /= numbers.size()\n\
    \        return mad", "        val mean = numbers.reduce((x, y) -> x + y) / numbers.size()\n\
    \        val result = numbers.map(x -> Math.abs(x - mean)).reduce((x, y) -> x\
    \ + y) / numbers.size()\n        result", "        val mean = mean(numbers)\n\
    \        val sum = 0.0f\n        for (i <- numbers) {\n            sum += Math.abs(i\
    \ - mean)\n        }\n        return sum / numbers.length", "        val mean\
    \ = mean(numbers)\n        val mad = 0.0f\n        for (i <- numbers.toIterator)\
    \ {\n            val diff = i.toFloat - mean\n            mad += Math.abs(diff)\n\
    \        }\n        mad /= numbers.size()\n        return mad", "        val mean\
    \ = mean(numbers)\n        val mad = 0.0\n        for (i <- numbers.size()) {\n\
    \            val diff = numbers[i] - mean\n            mad += Math.abs(diff)\n\
    \        }\n        mad /= numbers.size()\n        return mad"]
stop_tokens:
- "\n    }\n"
