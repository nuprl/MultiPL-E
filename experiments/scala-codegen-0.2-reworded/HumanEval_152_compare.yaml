name: HumanEval_152_compare
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // I think we all remember that feeling when the result of some long-awaited\n\
  \    // event is finally known. The feelings and thoughts you have at that moment\
  \ are\n    // definitely worth noting down and comparing.\n    // Your task is to\
  \ determine if a person correctly guessed the results of a number of matches.\n\
  \    // You are given two lists of scores and guesses of equal length, where each\
  \ index shows a match. \n    // Return a list of the same length denoting how far\
  \ off each guess was. If they have guessed correctly,\n    // the value is 0, and\
  \ if not, the value is the absolute difference between the guess and the score.\n\
  \    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong, 0l.toLong,\
  \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
  \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
  \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
  \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
  \ : List[Long], guess : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
  \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
completions: ["        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            var score = game[i]\n            var guess = guess[i]\n     \
    \       var diff = Math.abs(score - guess)\n            result = result.append(diff)\n\
    \        }\n        return result", "        var result = List[Long](0l)\n   \
    \     for (i <- 0 until game.length) {\n            var score = game[i]\n    \
    \        var guessScore = guess[i]\n            if (score == guessScore) {\n \
    \               result = result.updated(i, 0l)\n            } else {\n       \
    \         result = result.updated(i, score - guessScore)\n            }\n    \
    \    }\n        return result", "        var result = List[Long]()\n        for\
    \ (i <- 0 until game.length) {\n            if (guess[i] == game[i]) {\n     \
    \           result = result.append(0)\n            } else {\n                result\
    \ = result.append(Math.abs(guess[i] - game[i]))\n            }\n        }\n  \
    \      return result", "        var result = List[Long]()\n        for (i <- 0\
    \ until game.length) {\n            var score = game[i]\n            var guessScore\
    \ = guess[i]\n            var diff = score - guessScore\n            result =\
    \ result.append(diff)\n        }\n        return result", "        var diffs =\
    \ List[Long]()\n        for (i <- 0 until game.length) {\n            var score\
    \ = game[i]\n            var guess = guess[i]\n            var diff = Math.abs(score\
    \ - guess)\n            diffs = diffs.append(diff)\n        }\n        return\
    \ diffs", "        val diffs = mutable.List[Long]()\n        for (i <- 0 until\
    \ game.length) {\n            if (guess.get(i) != game.get(i)) diffs.append(abs(guess.get(i)\
    \ - game.get(i)))\n        }\n        return diffs", "        val diffs = mutable.List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            if (game[i] == guess[i])\
    \ {\n                diffs.append(0)\n            } else {\n                diffs.append(Math.abs(game[i]\
    \ - guess[i]))\n            }\n        }\n        return diffs", "        var\
    \ result = List[Long]()\n        for (i <- 0 until game.length) {\n          \
    \  var score = game[i]\n            var guessScore = guess[i]\n            if\
    \ (score == guessScore) {\n                result = result.append(0)\n       \
    \     } else {\n                result = result.append(Math.abs(score - guessScore))\n\
    \            }\n        }\n        return result", "        val diffs = mutable.List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            val diff = Math.abs(game[i]\
    \ - guess[i])\n            diffs.append(diff)\n        }\n        return diffs",
  "        var result = List[Long]()\n        for (i <- 0 until game.length) {\n \
    \           if (guess.get(i) == game.get(i)) {\n                result = result.append(0)\n\
    \            } else {\n                result = result.append(Math.abs(guess.get(i)\
    \ - game.get(i)))\n            }\n        }\n        return result", "       \
    \ val diffs = List[Long](0)\n        for (i <- 0 until game.length) {\n      \
    \      val score = game[i]\n            val guessScore = guess[i]\n          \
    \  if (score == guessScore) {\n                diffs = diffs.append(0)\n     \
    \       } else {\n                diffs = diffs.append(Math.abs(score - guessScore))\n\
    \            }\n        }\n        return diffs", "        val diffs = mutable.List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            if (guess[i] != game[i])\
    \ {\n                diffs.append(abs(guess[i] - game[i]))\n            }\n  \
    \      }\n        return diffs", "        var result = List[Long](0)\n       \
    \ for (i <- 0 until game.length) {\n            var score = game[i]\n        \
    \    var guessScore = guess[i]\n            var diff = Math.abs(score - guessScore)\n\
    \            result = result.updated(diff)\n        }\n        return result",
  "        var result = List[Long](0l)\n        for (i <- 0 until game.length) {\n\
    \            if (guess[i] == game[i]) {\n                result = result.updated(i,\
    \ 0l)\n            } else {\n                result = result.updated(i, game[i]\
    \ - guess[i])\n            }\n        }\n        return result", "        var\
    \ result = List[Long]()\n        for (var i = 0; i < game.length; i++) {\n   \
    \         var diff = Math.abs(game[i] - guess[i])\n            result = result.append(diff)\n\
    \        }\n        return result", "        var result = List[Long]()\n     \
    \   for (i <- 0 until game.length) {\n            var score = game[i]\n      \
    \      var guess = guess[i]\n            var diff = Math.abs(score - guess)\n\
    \            result = result.append(diff)\n        }\n        return result",
  "        val diffs = List[Long](0)\n        for (i <- 0 until game.length) {\n \
    \           val diff = Math.abs(game[i] - guess[i])\n            diffs = diffs.append(diff)\n\
    \        }\n        return diffs", "        var diffs = List[Long](0)\n      \
    \  for (i <- 0 until game.length) {\n            var score = game[i]\n       \
    \     var guessScore = guess[i]\n            if (score == guessScore) {\n    \
    \            diffs = diffs.append(0)\n            } else {\n                diffs\
    \ = diffs.append(abs(score - guessScore))\n            }\n        }\n        return\
    \ diffs", "        var result = List[Long]()\n        for (var i = 0; i < game.length;\
    \ i++) {\n            var score = game[i]\n            var guess = guess[i]\n\
    \            var diff = Math.abs(score - guess)\n            result = result.append(diff)\n\
    \        }\n        return result", "        var result = List[Long]()\n     \
    \   for (i <- 0 until game.length) {\n            var score = game[i]\n      \
    \      var guessScore = guess[i]\n            if (score == guessScore) {\n   \
    \             result = result.append(0)\n            } else {\n              \
    \  result = result.append(score - guessScore)\n            }\n        }\n    \
    \    return result", "        var result = List[Long]()\n        for (i <- 0 until\
    \ game.length) {\n            var score = game[i]\n            var guess = guess[i]\n\
    \            var diff = Math.abs(score - guess)\n            result = result.append(diff)\n\
    \        }\n        return result", "        var result = List[Long]()\n     \
    \   for (i <- 0 until game.length) {\n            var score = game[i]\n      \
    \      var guess = guess[i]\n            var diff = Math.abs(score - guess)\n\
    \            result = result.append(diff)\n        }\n        return result",
  "        val diffs = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          val diff = Math.abs(game[i] - guess[i])\n            diffs = diffs.append(diff)\n\
    \        }\n        return diffs", "        var result = List[Long]()\n      \
    \  for (i <- 0 until game.length) {\n            var score = game[i]\n       \
    \     var guessScore = guess[i]\n            var diff = score - guessScore\n \
    \           result = result.append(diff)\n        }\n        return result", " \
    \       var result = List[Long](0)\n        for (i <- 0 until game.length) {\n\
    \            var score = game[i]\n            var guessScore = guess[i]\n    \
    \        if (score == guessScore) {\n                result = result.updated(i,\
    \ 0)\n            } else {\n                result = result.updated(i, Math.abs(score\
    \ - guessScore))\n            }\n        }\n        return result", "        var\
    \ result = List[Long]()\n        for (i <- 0 until game.length) {\n          \
    \  var score = game[i]\n            var guessScore = guess[i]\n            var\
    \ diff = Math.abs(score - guessScore)\n            result = result.append(diff)\n\
    \        }\n        return result", "        var result = List[Long]()\n     \
    \   for (i <- 0 until game.length) {\n            var score = game[i]\n      \
    \      var guessScore = guess[i]\n            var diff = Math.abs(score - guessScore)\n\
    \            result = result.append(diff)\n        }\n        return result",
  "        var result = List[Long]()\n        for (i <- 0 until game.length) {\n \
    \           var score = game[i]\n            var guess = guess[i]\n          \
    \  var diff = score - guess\n            result = result.append(diff)\n      \
    \  }\n        return result", "        val diffs = List[Long]()\n        for (i\
    \ <- 0 until game.length) {\n            if (guess.get(i) != game.get(i)) diffs.append(Math.abs(guess.get(i)\
    \ - game.get(i)))\n        }\n        return diffs", "        var result = List[Long](0l)\n\
    \        for (i <- 0 until game.length) {\n            var score = game[i]\n \
    \           var guessScore = guess[i]\n            if (score == guessScore) {\n\
    \                result = result.updated(i, 0l)\n            } else {\n      \
    \          result = result.updated(i, abs(score - guessScore))\n            }\n\
    \        }\n        return result", "        var result = List[Long](0l)\n   \
    \     for (var i = 0; i < game.length; i++) {\n            var diff = Math.abs(game[i]\
    \ - guess[i])\n            result = result.updated(diff)\n        }\n        return\
    \ result", "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            if (guess.get(i) == game.get(i)) {\n                result =\
    \ result.append(0)\n            } else {\n                result = result.append(Math.abs(guess.get(i)\
    \ - game.get(i)))\n            }\n        }\n        return result", "       \
    \ var result = List[Long]()\n        for (i <- 0 until game.length) {\n      \
    \      var score = game[i]\n            var guessScore = guess[i]\n          \
    \  var diff = score - guessScore\n            result = result.append(diff)\n \
    \       }\n        return result", "        var result = List[Long]()\n      \
    \  for (i <- 0 until game.length) {\n            var score = game[i]\n       \
    \     var guess = guess[i]\n            if (score == guess) {\n              \
    \  result = result.append(0)\n            } else {\n                result = result.append(Math.abs(score\
    \ - guess))\n            }\n        }\n        return result", "        var result\
    \ = List[Long](0l)\n        for (var i = 0; i < game.length; i++) {\n        \
    \    var diff = game[i] - guess[i]\n            result = result.updated(diff)\n\
    \        }\n        return result", "        var result = List[Long]()\n     \
    \   for (i <- 0 until game.length) {\n            var score = game[i]\n      \
    \      var guess = guess[i]\n            var diff = Math.abs(score - guess)\n\
    \            result = result.append(diff)\n        }\n        return result",
  "        val diffs = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (guess(i) != game(i)) diffs(i) = game(i) - guess(i)\n        }\n\
    \        return diffs", "        val result = List[Long]()\n        for (i <-\
    \ 0 until game.length) {\n            val diff = game[i] - guess[i]\n        \
    \    if (diff == 0) {\n                result.append(0)\n            } else {\n\
    \                result.append(diff)\n            }\n        }\n        return\
    \ result", "        var result = List[Long](0l)\n        for (var i = 0; i < game.length;\
    \ i++) {\n            var diff = game[i] - guess[i]\n            result = result.updated(diff)\n\
    \        }\n        return result", "        var result = List[Long]()\n     \
    \   for (var i = 0; i < game.length; i++) {\n            var diff = game[i] -\
    \ guess[i]\n            if (diff < 0) diff = -diff\n            result = result.append(diff)\n\
    \        }\n        return result", "        var result = List[Long](0l)\n   \
    \     for (var i = 0; i < game.length; i++) {\n            var diff = Math.abs(game[i]\
    \ - guess[i])\n            result = result.updated(diff, diff)\n        }\n  \
    \      return result", "        var result = List[Long]()\n        for (var i\
    \ = 0; i < game.length; i++) {\n            var score = game[i]\n            var\
    \ guess = guess[i]\n            result = result.append(score - guess)\n      \
    \  }\n        return result", "        var result = List[Long](0)\n        for\
    \ (i <- 0 until game.length) {\n            var score = game[i]\n            var\
    \ guessScore = guess[i]\n            if (score == guessScore) {\n            \
    \    result = result.plus(0)\n            } else {\n                result = result.plus(score\
    \ - guessScore)\n            }\n        }\n        return result", "        var\
    \ result = List[Long](0)\n        for (i <- 0 until game.length) {\n         \
    \   var score = game[i]\n            var guessScore = guess[i]\n            var\
    \ diff = Math.abs(score - guessScore)\n            result = result.updated(diff)\n\
    \        }\n        return result", "        var result = List[Long]()\n     \
    \   for (var i = 0; i < game.length; i++) {\n            var diff = game[i] -\
    \ guess[i]\n            if (diff < 0) diff = -diff\n            result = result.append(diff)\n\
    \        }\n        return result", "        var diffs = List[Long](0)\n     \
    \   for (i <- 0 until game.length) {\n            var score = game[i]\n      \
    \      var guess = guess[i]\n            if (score == guess) {\n             \
    \   diffs = diffs.append(0)\n            } else {\n                diffs = diffs.append(Math.abs(score\
    \ - guess))\n            }\n        }\n        return diffs", "        val result\
    \ = new ArrayList[Long]\n        for (i <- 0 until game.length) {\n          \
    \  val score = game[i]\n            val guessScore = guess[i]\n            if\
    \ (score == guessScore) {\n                result.add(0l)\n            } else\
    \ {\n                result.add(Math.abs(score - guessScore))\n            }\n\
    \        }\n        return result", "        var result = List[Long](0l)\n   \
    \     for (i <- 0 until game.length) {\n            if (guess[i] == game[i]) {\n\
    \                result = result.updated(i, 0l)\n            } else {\n      \
    \          result = result.updated(i, Math.abs(guess[i] - game[i]))\n        \
    \    }\n        }\n        return result", "        val gameLength = game.length\n\
    \        val guessLength = guess.length\n        if (gameLength != guessLength)\
    \ {\n            throw new RuntimeException(\"Game and guess must be of equal\
    \ length.\")\n        }\n        val diffs = mutable.List[Long]()\n        for\
    \ (i <- 0 until gameLength) {\n            if (game[i] != guess[i]) {\n      \
    \          diffs.append(abs(game[i] - guess[i]))\n            }\n        }\n \
    \       return diffs", "        var result = List[Long]()\n        for (i <- 0\
    \ until game.length) {\n            var score = game[i]\n            var guessScore\
    \ = guess[i]\n            if (score == guessScore) {\n                result =\
    \ result.append(0)\n            } else {\n                result = result.append(Math.abs(score\
    \ - guessScore))\n            }\n        }\n        return result", "        val\
    \ result = game.zip(guess).map(tuple -> tuple._1 - tuple._2).toList\n        result.sort((a,\
    \ b) -> a.compareTo(b))\n        return result", "        var result = List[Long](0l)\n\
    \        for (i <- 0 until game.length) {\n            var score = game[i]\n \
    \           var guessScore = guess[i]\n            if (score == guessScore) {\n\
    \                result = result.updated(i, 0l)\n            } else {\n      \
    \          result = result.updated(i, Math.abs(score - guessScore))\n        \
    \    }\n        }\n        return result", "        var diffs = List[Long](0)\n\
    \        for (i <- 0 until game.length) {\n            var diff = Math.abs(game[i]\
    \ - guess[i])\n            diffs = diffs.append(diff)\n        }\n        return\
    \ diffs", "        var result = List[Long](0)\n        for (i <- 0 until game.length)\
    \ {\n            var score = game[i]\n            var guessScore = guess[i]\n\
    \            if (score == guessScore) {\n                result = result.updated(i,\
    \ 0)\n            } else {\n                result = result.updated(i, Math.abs(score\
    \ - guessScore))\n            }\n        }\n        return result", "        val\
    \ diffs = mutable.List[Long]()\n        for (i <- 0 until game.length) {\n   \
    \         val diff = Math.abs(game[i] - guess[i])\n            diffs.append(diff)\n\
    \        }\n        return diffs", "        val diffs = mutable.List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            if (guess.get(i) == game.get(i))\
    \ {\n                diffs.append(0)\n            } else {\n                diffs.append(abs(guess.get(i)\
    \ - game.get(i)))\n            }\n        }\n        return diffs", "        val\
    \ result = new ArrayList[Long]\n        for (i <- 0 until game.length) {\n   \
    \         val score = game[i]\n            val guessScore = guess[i]\n       \
    \     result.append(Math.abs(score - guessScore))\n        }\n        return result",
  "        val diffs = mutable.List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            val diff = Math.abs(game[i] - guess[i])\n            diffs.append(diff)\n\
    \        }\n        return diffs", "        var diffs = List[Long](0)\n      \
    \  for (i <- 0 until game.length) {\n            var diff = game[i] - guess[i]\n\
    \            diffs = diffs.append(diff)\n        }\n        return diffs", " \
    \       var result = List[Long]()\n        for (var i = 0; i < game.length; i++)\
    \ {\n            var gameScore = game[i]\n            var guessScore = guess[i]\n\
    \            var diff = gameScore - guessScore\n            result = result.append(diff)\n\
    \        }\n        return result", "        var diffs = List[Long](0)\n     \
    \   for (i <- 0 until game.length) {\n            var score = game[i]\n      \
    \      var guess = guess[i]\n            diffs = diffs.updated(i, Math.abs(score\
    \ - guess))\n        }\n        return diffs", "        var result = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            if (guess.length <= i)\
    \ {\n                result = result.append(0l)\n            } else {\n      \
    \          result = result.append(Math.abs(game[i] - guess[i]))\n            }\n\
    \        }\n        return result", "        var result = List[Long](0)\n    \
    \    for (i <- 0 until game.length) {\n            if (guess[i] == game[i]) {\n\
    \                result = result.updated(i, 0)\n            } else {\n       \
    \         result = result.updated(i, Math.abs(guess[i] - game[i]))\n         \
    \   }\n        }\n        return result", "        var result = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            var score = game[i]\n \
    \           var guessScore = guess[i]\n            var diff = Math.abs(score -\
    \ guessScore)\n            result = result.append(diff)\n        }\n        return\
    \ result", "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            var diff = game[i] - guess[i]\n            if (diff == 0) {\n\
    \                result = result.append(0)\n            } else {\n           \
    \     result = result.append(diff)\n            }\n        }\n        return result",
  "        var result = List[Long](0)\n        for (i <- 0 until game.length) {\n\
    \            var score = game[i]\n            var guess = guess[i]\n         \
    \   var diff = Math.abs(score - guess)\n            result = result.updated(diff)\n\
    \        }\n        return result", "        val diffs = mutable.List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            val diff = game[i] - guess[i]\n\
    \            diffs.append(diff)\n        }\n        return diffs", "        var\
    \ result = List[Long]()\n        for (i <- 0 until game.length) {\n          \
    \  var score = game[i]\n            var guess = guess[i]\n            var diff\
    \ = Math.abs(score - guess)\n            result = result.append(diff)\n      \
    \  }\n        return result", "        val diffs = List[Long]()\n        for (i\
    \ <- 0 until game.length) {\n            val diff = Math.abs(game[i] - guess[i])\n\
    \            diffs = diffs.append(diff)\n        }\n        return diffs", " \
    \       val diffs = mutable.List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            val diff = Math.abs(game[i] - guess[i])\n            diffs.append(diff)\n\
    \        }\n        return diffs", "        val result = List[Long]()\n      \
    \  for (i <- 0 until game.length) {\n            val score = game[i]\n       \
    \     val guessScore = guess[i]\n            if (score == guessScore) {\n    \
    \            result = result.append(0)\n            } else {\n               \
    \ result = result.append(Math.abs(score - guessScore))\n            }\n      \
    \  }\n        return result", "        val result = List[Long]()\n        for\
    \ (i <- 0 until game.length) {\n            val score = game[i]\n            val\
    \ guessScore = guess[i]\n            if (score == guessScore) {\n            \
    \    result.append(0)\n            } else {\n                result.append(Math.abs(score\
    \ - guessScore))\n            }\n        }\n        return result", "        val\
    \ result = new ArrayList[Long]\n        for (i <- 0 until game.length) {\n   \
    \         val score = game[i]\n            val guessScore = guess[i]\n       \
    \     if (score == guessScore) {\n                result.add(0l)\n           \
    \ } else {\n                result.add(Math.abs(score - guessScore))\n       \
    \     }\n        }\n        return result", "        var result = List[Long](0l)\n\
    \        for (var i = 0; i < game.length; i++) {\n            var diff = Math.abs(game[i]\
    \ - guess[i])\n            result = result.updated(diff)\n        }\n        return\
    \ result", "        var result = List[Long]()\n        for (var i = 0; i < game.length;\
    \ i++) {\n            var score = game[i]\n            var guess = guess[i]\n\
    \            var diff = Math.abs(score - guess)\n            result = result.append(diff)\n\
    \        }\n        return result", "        var result = List[Long]()\n     \
    \   for (i <- 0 until game.length) {\n            var score = game[i]\n      \
    \      var guessScore = guess[i]\n            var diff = score - guessScore\n\
    \            result = result.append(diff)\n        }\n        return result",
  "        var result = List[Long]()\n        for (i <- 0 until game.length) {\n \
    \           var diff = game[i] - guess[i]\n            if (diff == 0) {\n    \
    \            result = result.append(0)\n            } else {\n               \
    \ result = result.append(diff)\n            }\n        }\n        return result",
  "        val diffs = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (guess.get(i) != game.get(i)) diffs = diffs.append(guess.get(i)\
    \ - game.get(i))\n        }\n        return diffs", "        var result = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            var score = game[i]\n \
    \           var guess = guess[i]\n            var diff = Math.abs(score - guess)\n\
    \            result = result.append(diff)\n        }\n        return result",
  "        val diffs = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          val diff = Math.abs(game[i] - guess[i])\n            diffs = diffs.append(diff)\n\
    \        }\n        return diffs", "        var result = List[Long](0l)\n    \
    \    for (i <- 0 until game.length) {\n            if (guess[i] == game[i]) {\n\
    \                result = result.updated(i, 0l)\n            } else {\n      \
    \          result = result.updated(i, Math.abs(guess[i] - game[i]))\n        \
    \    }\n        }\n        return result", "        var result = List[Long](0)\n\
    \        for (i <- 0 until game.length) {\n            var diff = game[i] - guess[i]\n\
    \            result = result.updated(diff)\n        }\n        return result",
  "        var result = List[Long](0)\n        for (i <- 0 until game.length) {\n\
    \            var score = game[i]\n            var guess = guess[i]\n         \
    \   if (score == guess) {\n                result = result.updated(i, 0)\n   \
    \         } else {\n                result = result.updated(i, Math.abs(score\
    \ - guess))\n            }\n        }\n        return result", "        val diffs\
    \ = List[Long](0)\n        for (i <- 0 until game.length) {\n            val diff\
    \ = Math.abs(game[i] - guess[i])\n            diffs = diffs.append(diff)\n   \
    \     }\n        return diffs", "        var result = List[Long]()\n        for\
    \ (var i = 0; i < game.length; i++) {\n            var score = game[i]\n     \
    \       var guess = guess[i]\n            result = result.append(score - guess)\n\
    \        }\n        return result", "        val result = new ArrayList[Long]\n\
    \        for (i <- 0 until game.length) {\n            val score = game[i]\n \
    \           val guessScore = guess[i]\n            val diff = Math.abs(score -\
    \ guessScore)\n            result.append(diff)\n        }\n        return result",
  "        var result = List[Long](0l)\n        for (var i = 0; i < game.length; i++)\
    \ {\n            result = result.updated(i, Math.abs(game[i] - guess[i]))\n  \
    \      }\n        return result", "        var result = List[Long](0l)\n     \
    \   for (i <- 0 until game.length) {\n            if (guess.get(i) == game.get(i))\
    \ {\n                result = result.updated(i, 0l)\n            } else {\n  \
    \              result = result.updated(i, game.get(i) - guess.get(i))\n      \
    \      }\n        }\n        return result", "        var result = List[Long](0l)\n\
    \        for (i <- 0 until game.length) {\n            if (guess.get(i) == game.get(i))\
    \ {\n                result = result.updated(i, 0l)\n            } else {\n  \
    \              result = result.updated(i, Math.abs(guess.get(i) - game.get(i)))\n\
    \            }\n        }\n        return result", "        var result = List[Long](0l)\n\
    \        for (i <- 0 until game.length) {\n            var score = game[i]\n \
    \           var guess = guess[i]\n            if (score == guess) {\n        \
    \        result = result.updated(i, 0l)\n            } else {\n              \
    \  result = result.updated(i, score - guess)\n            }\n        }\n     \
    \   return result", "        var result = List[Long]()\n        for (var i = 0;\
    \ i < game.length; i++) {\n            var score = game[i]\n            var guess\
    \ = guess[i]\n            var diff = Math.abs(score - guess)\n            result\
    \ = result.append(diff)\n        }\n        return result", "        var result\
    \ = List[Long](0l)\n        for (i <- 0 until game.length) {\n            var\
    \ score = game[i]\n            var guessScore = guess[i]\n            if (score\
    \ == guessScore) {\n                result = result.updated(i, 0l)\n         \
    \   } else {\n                result = result.updated(i, Math.abs(score - guessScore))\n\
    \            }\n        }\n        return result", "        var result = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            var gameScore = game[i]\n\
    \            var guessScore = guess[i]\n            if (gameScore == guessScore)\
    \ {\n                result = result.append(0)\n            } else {\n       \
    \         result = result.append(Math.abs(gameScore - guessScore))\n         \
    \   }\n        }\n        return result", "        var result = List[Long](0l)\n\
    \        for (i <- 0 until game.length) {\n            var score = game[i]\n \
    \           var guess = guess[i]\n            if (score == guess) {\n        \
    \        result = result.updated(i, 0l)\n            } else {\n              \
    \  result = result.updated(i, Math.abs(score - guess))\n            }\n      \
    \  }\n        return result", "        var result = List[Long]()\n        for\
    \ (i <- 0 until game.length) {\n            var score = game[i]\n            var\
    \ guessScore = guess[i]\n            var diff = Math.abs(score - guessScore)\n\
    \            result = result.append(diff)\n        }\n        return result",
  "        var result = List[Long]()\n        for (var i = 0; i < game.length; i++)\
    \ {\n            result = result.append(game[i] - guess[i])\n        }\n     \
    \   return result", "        var result = List[Long](0l)\n        for (i <- 0\
    \ until game.length) {\n            if (guess.get(i) == game.get(i)) {\n     \
    \           result = result.updated(i, 0l)\n            } else {\n           \
    \     result = result.updated(i, game.get(i) - guess.get(i))\n            }\n\
    \        }\n        return result", "        var result = List[Long]()\n     \
    \   for (i <- 0 until game.length) {\n            var score = game[i]\n      \
    \      var guess = guess[i]\n            var diff = Math.abs(score - guess)\n\
    \            result = result.append(diff)\n        }\n        return result",
  "        val diffs = mutable.List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            if (guess.get(i) != game.get(i)) {\n                diffs.append(abs(guess.get(i)\
    \ - game.get(i)))\n            }\n        }\n        return diffs", "        var\
    \ diffs = List[Long](0)\n        for (i <- 0 until game.length) {\n          \
    \  diffs = diffs.append(abs(game[i] - guess[i]))\n        }\n        return diffs",
  "        var result = List[Long]()\n        for (i <- 0 until game.length) {\n \
    \           var score = game[i]\n            var guessScore = guess[i]\n     \
    \       var diff = Math.abs(score - guessScore)\n            result = result.append(diff)\n\
    \        }\n        return result", "        var result = List[Long](0l)\n   \
    \     for (i <- 0 until game.length) {\n            if (guess[i] == game[i]) {\n\
    \                result = result.updated(i, 0l)\n            } else {\n      \
    \          result = result.updated(i, game[i] - guess[i])\n            }\n   \
    \     }\n        return result", "        var result = List[Long]()\n        for\
    \ (i <- 0 until game.length) {\n            var score = game[i]\n            var\
    \ guessScore = guess[i]\n            var diff = score - guessScore\n         \
    \   result = result.append(diff)\n        }\n        return result", "       \
    \ var result = List[Long](0)\n        for (i <- 0 until game.length) {\n     \
    \       var score = game[i]\n            var guess = guess[i]\n            if\
    \ (score == guess) {\n                result = result.updated(i, 0)\n        \
    \    } else {\n                result = result.updated(i, Math.abs(score - guess))\n\
    \            }\n        }\n        return result", "        var result = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            var score = game[i]\n \
    \           var guess = guess[i]\n            var diff = Math.abs(score - guess)\n\
    \            result = result.append(diff)\n        }\n        return result",
  "        var result = List[Long](0)\n        for (i <- 0 until game.length) {\n\
    \            var score = game[i]\n            var guess = guess[i]\n         \
    \   var diff = Math.abs(score - guess)\n            result = result.updated(diff)\n\
    \        }\n        return result", "        val diffs = mutable.List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            if (game[i] == guess[i])\
    \ {\n                diffs.append(0)\n            } else {\n                diffs.append(abs(game[i]\
    \ - guess[i]))\n            }\n        }\n        return diffs", "        var\
    \ result = List[Long](0l)\n        for (i <- 0 until game.length) {\n        \
    \    if (guess.get(i) == game.get(i)) {\n                result = result.update(0l)\n\
    \            } else {\n                result = result.update(Math.abs(guess.get(i)\
    \ - game.get(i)))\n            }\n        }\n        return result", "       \
    \ var result = List[Long](0l)\n        for (i <- 0 until game.length) {\n    \
    \        var score = game[i]\n            var guess = guess[i]\n            if\
    \ (score == guess) {\n                result = result.updated(i, 0l)\n       \
    \     } else {\n                result = result.updated(i, Math.abs(score - guess))\n\
    \            }\n        }\n        return result", "        val gameLength = game.length\n\
    \        val guessLength = guess.length\n        if (gameLength != guessLength)\
    \ {\n            throw new IllegalArgumentException(\"Game and guess must be of\
    \ equal length.\")\n        }\n        val diffs = mutable.List[Long]()\n    \
    \    for (i <- 0 until gameLength) {\n            val gameScore = game[i]\n  \
    \          val guessScore = guess[i]\n            if (gameScore == guessScore)\
    \ {\n                diffs.append(0l)\n            } else {\n                diffs.append(Math.abs(gameScore\
    \ - guessScore))\n            }\n        }\n        return diffs", "        var\
    \ result = List[Long]()\n        for (i <- 0 until game.length) {\n          \
    \  var score = game[i]\n            var guess = guess[i]\n            result =\
    \ result.append(score - guess)\n        }\n        return result", "        var\
    \ result = List[Long]()\n        for (var i = 0; i < game.length; i++) {\n   \
    \         var gameScore = game[i]\n            var guessScore = guess[i]\n   \
    \         var diff = Math.abs(gameScore - guessScore)\n            result = result.append(diff)\n\
    \        }\n        return result", "        val result = new ArrayList[Long]\n\
    \        for (i <- 0 until game.length) {\n            val score = game[i]\n \
    \           val guessScore = guess[i]\n            val diff = Math.abs(score -\
    \ guessScore)\n            result.add(diff)\n        }\n        return result",
  "        val result = List[Long]()\n        for (i <- 0 until game.length) {\n \
    \           val diff = game[i] - guess[i]\n            if (diff == 0) {\n    \
    \            result = result.append(0)\n            } else {\n               \
    \ result = result.append(diff)\n            }\n        }\n        return result",
  "        var diffs = List[Long](0)\n        for (i <- 0 until game.length) {\n \
    \           var score = game[i]\n            var guess = guess[i]\n          \
    \  if (score == guess) {\n                diffs = diffs.append(0)\n          \
    \  } else {\n                diffs = diffs.append(Math.abs(score - guess))\n \
    \           }\n        }\n        return diffs", "        var result = List[Long]()\n\
    \        for (var i = 0; i < game.length; i++) {\n            var gameScore =\
    \ game[i]\n            var guessScore = guess[i]\n            var diff = Math.abs(gameScore\
    \ - guessScore)\n            result = result.append(diff)\n        }\n       \
    \ return result", "        val result = List[Long]()\n        for (i <- 0 until\
    \ game.length) {\n            val score = game[i]\n            val guessScore\
    \ = guess[i]\n            if (score == guessScore) {\n                result.append(0)\n\
    \            } else {\n                result.append(abs(score - guessScore))\n\
    \            }\n        }\n        return result", "        val diffs = mutable.List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            val diff = Math.abs(game[i]\
    \ - guess[i])\n            diffs.append(diff)\n        }\n        return diffs",
  "        var result = List[Long](0)\n        for (var i = 0; i < game.length; i++)\
    \ {\n            var diff = game[i] - guess[i]\n            result = result.updated(diff)\n\
    \        }\n        return result", "        var result = List[Long]()\n     \
    \   for (i <- 0 until game.length) {\n            var score = game[i]\n      \
    \      var guessScore = guess[i]\n            var diff = Math.abs(score - guessScore)\n\
    \            result = result.append(diff)\n        }\n        return result",
  "        val diffs = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          if (guess.get(i) == game.get(i)) {\n                diffs.append(0)\n\
    \            } else {\n                diffs.append(abs(guess.get(i) - game.get(i)))\n\
    \            }\n        }\n        return diffs", "        var result = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            if (guess[i] == game[i])\
    \ {\n                result = result.append(0)\n            } else {\n       \
    \         result = result.append(Math.abs(guess[i] - game[i]))\n            }\n\
    \        }\n        return result", "        var result = List[Long]()\n     \
    \   for (i <- 0 until game.length) {\n            var score = game[i]\n      \
    \      var guess = guess[i]\n            var diff = Math.abs(score - guess)\n\
    \            result = result.append(diff)\n        }\n        return result",
  "        val diffs = mutable.List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            if (guess[i] != game[i]) diffs.append(abs(guess[i] - game[i]))\n\
    \        }\n        return diffs", "        var result = List[Long]()\n      \
    \  for (i <- 0 until game.length) {\n            if (guess.get(i) == game.get(i))\
    \ {\n                result.append(0)\n            } else {\n                result.append(Math.abs(guess.get(i)\
    \ - game.get(i)))\n            }\n        }\n        return result", "       \
    \ var result = List[Long]()\n        for (i <- 0 until game.length) {\n      \
    \      var score = game[i]\n            var guessScore = guess[i]\n          \
    \  if (score == guessScore) {\n                result = result.append(0)\n   \
    \         } else {\n                result = result.append(abs(score - guessScore))\n\
    \            }\n        }\n        return result", "        var result = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            if (guess.length < i) {\n\
    \                result = append(result, 0l)\n            } else {\n         \
    \       result = append(result, abs(game[i] - guess[i]))\n            }\n    \
    \    }\n        return result", "        var result = List[Long]()\n        for\
    \ (i <- 0 until game.length) {\n            var score = game[i]\n            var\
    \ guess = guess[i]\n            var diff = Math.abs(score - guess)\n         \
    \   result = result.append(diff)\n        }\n        return result", "       \
    \ val result = List[Long]()\n        for (i <- 0 until game.length) {\n      \
    \      val score = game[i]\n            val guessScore = guess[i]\n          \
    \  if (score == guessScore) {\n                result.append(0)\n            }\
    \ else {\n                result.append(score - guessScore)\n            }\n \
    \       }\n        return result", "        var result = List[Long]()\n      \
    \  for (i <- 0 until game.length) {\n            var score = game[i]\n       \
    \     var guess = guess[i]\n            if (score == guess) {\n              \
    \  result = result.append(0)\n            } else {\n                result = result.append(Math.abs(score\
    \ - guess))\n            }\n        }\n        return result", "        var result\
    \ = List[Long]()\n        for (i <- 0 until game.length) {\n            var score\
    \ = game[i]\n            var guessScore = guess[i]\n            var diff = Math.abs(score\
    \ - guessScore)\n            result = result.append(diff)\n        }\n       \
    \ return result", "        var result = List[Long]()\n        for (i <- 0 until\
    \ game.length) {\n            var score = game[i]\n            var guess = guess[i]\n\
    \            var diff = Math.abs(score - guess)\n            result = result.append(diff)\n\
    \        }\n        return result", "        val diffs = mutable.List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            val diff = Math.abs(game[i]\
    \ - guess[i])\n            diffs.append(diff)\n        }\n        return diffs",
  "        var result = List[Long](0)\n        for (i <- 0 until game.length) {\n\
    \            if (guess.get(i) == game.get(i)) {\n                result = result.plus(0)\n\
    \            } else {\n                result = result.plus(game.get(i) - guess.get(i))\n\
    \            }\n        }\n        return result", "        var result = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            var score = game[i]\n \
    \           var guess = guess[i]\n            var diff = Math.abs(score - guess)\n\
    \            result = result.append(diff)\n        }\n        return result",
  "        var diffs = List[Long]()\n        for (i <- 0 until game.length) {\n  \
    \          var score = game[i]\n            var guess = guess[i]\n           \
    \ if (score == guess) {\n                diffs = diffs.append(0)\n           \
    \ } else {\n                diffs = diffs.append(Math.abs(score - guess))\n  \
    \          }\n        }\n        return diffs", "        var result = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            var score = game[i]\n \
    \           var guess = guess[i]\n            if (score == guess) {\n        \
    \        result = result.append(0)\n            } else {\n                result\
    \ = result.append(Math.abs(score - guess))\n            }\n        }\n       \
    \ return result", "        var result = List[Long]()\n        for (i <- 0 until\
    \ game.length) {\n            result = result.append(game[i] - guess[i])\n   \
    \     }\n        return result", "        val gameLength = game.length\n     \
    \   val guessLength = guess.length\n        val diff = new ArrayList[Long]\n \
    \       for (i <- 0 until gameLength) {\n            diff.append(game[i] - guess[i])\n\
    \        }\n        return diff", "        var result = List[Long]()\n       \
    \ for (i <- 0 until game.length) {\n            var score = game[i]\n        \
    \    var guess = guess[i]\n            var diff = Math.abs(score - guess)\n  \
    \          result = result.append(diff)\n        }\n        return result", " \
    \       var result = List[Long]()\n        for (i <- 0 until game.length) {\n\
    \            var score = game[i]\n            var guessScore = guess[i]\n    \
    \        var diff = Math.abs(score - guessScore)\n            result = result.append(diff)\n\
    \        }\n        return result", "        var result = List[Long]()\n     \
    \   for (i <- 0 until game.length) {\n            var score = game[i]\n      \
    \      var guess = guess[i]\n            var diff = Math.abs(score - guess)\n\
    \            result = result.append(diff)\n        }\n        return result",
  "        val diffs = mutable.List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            if (guess.get(i) != game.get(i)) diffs.append(abs(guess.get(i)\
    \ - game.get(i)))\n        }\n        return diffs", "        var diffs = List[Long](0)\n\
    \        for (i <- 0 until game.length) {\n            if (guess.get(i) == game.get(i))\
    \ {\n                diffs = diffs.append(0)\n            } else {\n         \
    \       diffs = diffs.append(Math.abs(guess.get(i) - game.get(i)))\n         \
    \   }\n        }\n        return diffs", "        var result = List[Long]()\n\
    \        for (var i = 0; i < game.length; i++) {\n            var gameScore =\
    \ game[i]\n            var guessScore = guess[i]\n            var diff = Math.abs(gameScore\
    \ - guessScore)\n            result = result.append(diff)\n        }\n       \
    \ return result", "        val diffs = List[Long]()\n        for (i <- 0 until\
    \ game.length) {\n            if (guess.get(i) == game.get(i)) {\n           \
    \     diffs.append(0)\n            } else {\n                diffs.append(Math.abs(guess.get(i)\
    \ - game.get(i)))\n            }\n        }\n        return diffs", "        var\
    \ result = List[Long]()\n        for (i <- 0 until game.length) {\n          \
    \  var score = game[i]\n            var guess = guess[i]\n            if (score\
    \ == guess) {\n                result = result.append(0)\n            } else {\n\
    \                result = result.append(Math.abs(score - guess))\n           \
    \ }\n        }\n        return result", "        val diffs = mutable.List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            val diff = Math.abs(game[i]\
    \ - guess[i])\n            diffs.append(diff)\n        }\n        return diffs",
  "        var result = List[Long]()\n        for (i <- 0 until game.length) {\n \
    \           var score = game[i]\n            var guess = guess[i]\n          \
    \  var diff = Math.abs(score - guess)\n            result = result.append(diff)\n\
    \        }\n        return result", "        var result = List[Long]()\n     \
    \   for (i <- 0 until game.length) {\n            var score = game[i]\n      \
    \      var guessScore = guess[i]\n            var diff = Math.abs(score - guessScore)\n\
    \            result = result.append(diff)\n        }\n        return result",
  "        var result = List[Long]()\n        for (i <- 0 until game.length) {\n \
    \           if (guess.get(i) == game.get(i)) {\n                result.append(0)\n\
    \            } else {\n                result.append(Math.abs(guess.get(i) - game.get(i)))\n\
    \            }\n        }\n        return result", "        val diffs = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            val diff = Math.abs(game[i]\
    \ - guess[i])\n            diffs = diffs.append(diff)\n        }\n        return\
    \ diffs", "        val result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            val score = game[i]\n            val guessScore = guess[i]\n\
    \            if (score == guessScore) {\n                result.append(0)\n  \
    \          } else {\n                result.append(abs(score - guessScore))\n\
    \            }\n        }\n        return result", "        val diffs = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            if (guess.get(i) == game.get(i))\
    \ {\n                diffs.append(0)\n            } else {\n                diffs.append(Math.abs(guess.get(i)\
    \ - game.get(i)))\n            }\n        }\n        return diffs", "        var\
    \ diffs = List[Long](0)\n        for (i <- 0 until game.length) {\n          \
    \  if (guess.get(i) == game.get(i)) {\n                diffs = diffs.append(0)\n\
    \            } else {\n                diffs = diffs.append(Math.abs(guess.get(i)\
    \ - game.get(i)))\n            }\n        }\n        return diffs", "        var\
    \ result = List[Long]()\n        for (i <- 0 until game.length) {\n          \
    \  var score = game[i]\n            var guess = guess[i]\n            var diff\
    \ = Math.abs(score - guess)\n            result = result.append(diff)\n      \
    \  }\n        return result", "        var result = List[Long](0)\n        for\
    \ (i <- 0 until game.length) {\n            var score = game[i]\n            var\
    \ guessScore = guess[i]\n            if (score == guessScore) {\n            \
    \    result = result.updated(i, 0)\n            } else {\n                result\
    \ = result.updated(i, Math.abs(guessScore - score))\n            }\n        }\n\
    \        return result", "        val diffs = mutable.List[Long]()\n        for\
    \ (i <- 0 until game.length) {\n            if (guess.get(i) != game.get(i)) diffs.append(abs(guess.get(i)\
    \ - game.get(i)))\n        }\n        return diffs", "        var result = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            var score = game[i]\n \
    \           var guess = guess[i]\n            var diff = Math.abs(score - guess)\n\
    \            result = result.append(diff)\n        }\n        return result",
  "        val result = List[Long]()\n        for (i <- 0 until game.length) {\n \
    \           val score = game[i]\n            val guessScore = guess[i]\n     \
    \       val diff = Math.abs(score - guessScore)\n            result = result.append(diff)\n\
    \        }\n        return result", "        val diffs = mutable.List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            if (guess.get(i) == game.get(i))\
    \ {\n                diffs.append(0)\n            } else {\n                diffs.append(Math.abs(guess.get(i)\
    \ - game.get(i)))\n            }\n        }\n        return diffs", "        var\
    \ result = List[Long]()\n        for (i <- 0 until game.length) {\n          \
    \  var score = game[i]\n            var guess = guess[i]\n            var diff\
    \ = Math.abs(score - guess)\n            result = result.append(diff)\n      \
    \  }\n        return result", "        var diffs = List[Long]()\n        for (var\
    \ i = 0; i < game.length; i++) {\n            var gameScore = game[i]\n      \
    \      var guessScore = guess[i]\n            if (gameScore == guessScore) {\n\
    \                diffs = diffs.append(0)\n            } else {\n             \
    \   diffs = diffs.append(Math.abs(gameScore - guessScore))\n            }\n  \
    \      }\n        return diffs", "        val result = List[Long]()\n        for\
    \ (i <- 0 until game.length) {\n            val score = game[i]\n            val\
    \ guessScore = guess[i]\n            if (score == guessScore) {\n            \
    \    result.append(0)\n            } else {\n                result.append(score\
    \ - guessScore)\n            }\n        }\n        return result", "        val\
    \ result = game.zip(guess).map(tuple => {\n            val diff = tuple._1 - tuple._2\n\
    \            return diff\n        }).toList\n        return result", "       \
    \ val diff = game.zip(guess).map(t -> t._1 - t._2).toSeq\n        diff.sort(Comparator.comparing(t\
    \ -> t))\n        return diff", "        val diffs = List[Long](0)\n        for\
    \ (i <- 0 until game.length) {\n            val diff = Math.abs(game[i] - guess[i])\n\
    \            diffs = diffs.append(diff)\n        }\n        return diffs", " \
    \       var diffs = List[Long](0)\n        for (i <- 0 until game.length) {\n\
    \            var score = game[i]\n            var guess = guess[i]\n         \
    \   if (score == guess) {\n                diffs = diffs.append(0)\n         \
    \   } else {\n                diffs = diffs.append(abs(score - guess))\n     \
    \       }\n        }\n        return diffs", "        val diffs = mutable.List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            if (guess.get(i) == game.get(i))\
    \ {\n                diffs.append(0)\n            } else {\n                diffs.append(abs(guess.get(i)\
    \ - game.get(i)))\n            }\n        }\n        return diffs", "        var\
    \ result = List[Long]()\n        for (i <- 0 until game.length) {\n          \
    \  var score = game[i]\n            var guess = guess[i]\n            var diff\
    \ = Math.abs(score - guess)\n            result = result.append(diff)\n      \
    \  }\n        return result", "        var result = List[Long]()\n        for\
    \ (i <- 0 until game.length) {\n            var score = game[i]\n            var\
    \ guess = guess[i]\n            if (score == guess) {\n                result\
    \ = result.append(0)\n            } else {\n                result = result.append(Math.abs(score\
    \ - guess))\n            }\n        }\n        return result", "        var result\
    \ = List[Long](0l)\n        for (i <- 0 until game.length) {\n            var\
    \ score = game[i]\n            var guessScore = guess[i]\n            if (score\
    \ == guessScore) {\n                result = result.updated(i, 0l)\n         \
    \   } else {\n                result = result.updated(i, Math.abs(score - guessScore))\n\
    \            }\n        }\n        return result", "        var result = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            var score = game[i]\n \
    \           var guessScore = guess[i]\n            if (score == guessScore) {\n\
    \                result = result.append(0)\n            } else {\n           \
    \     result = result.append(Math.abs(score - guessScore))\n            }\n  \
    \      }\n        return result", "        var result = List[Long](0l)\n     \
    \   for (i <- 0 until game.length) {\n            var score = game[i]\n      \
    \      var guess = guess[i]\n            if (score == guess) {\n             \
    \   result = result.updated(i, 0l)\n            } else {\n                result\
    \ = result.updated(i, Math.abs(score - guess))\n            }\n        }\n   \
    \     return result", "        var result = List[Long](0l)\n        for (i <-\
    \ 0 until game.length) {\n            var score = game[i]\n            var guess\
    \ = guess[i]\n            if (score == guess) {\n                result = result.updated(i,\
    \ 0l)\n            } else {\n                result = result.updated(i, Math.abs(score\
    \ - guess))\n            }\n        }\n        return result", "        var result\
    \ = List[Long]()\n        for (i <- 0 until game.length) {\n            var score\
    \ = game[i]\n            var guessScore = guess[i]\n            if (score == guessScore)\
    \ {\n                result = result.append(0)\n            } else {\n       \
    \         result = result.append(Math.abs(score - guessScore))\n            }\n\
    \        }\n        return result", "        var result = List[Long](0l)\n   \
    \     for (i <- 0 until game.length) {\n            if (guess.get(i) == game.get(i))\
    \ {\n                result = result.updated(i, 0l)\n            } else {\n  \
    \              result = result.updated(i, game.get(i) - guess.get(i))\n      \
    \      }\n        }\n        return result", "        var result = List[Long](0l)\n\
    \        for (i <- 0 until game.length) {\n            var score = game[i]\n \
    \           var guessScore = guess[i]\n            if (score == guessScore) {\n\
    \                result = result.updated(i, 0l)\n            } else {\n      \
    \          result = result.updated(i, score - guessScore)\n            }\n   \
    \     }\n        return result", "        var result = List[Long]()\n        for\
    \ (i <- 0 until game.length) {\n            var score = game[i]\n            var\
    \ guess = guess[i]\n            var diff = Math.abs(score - guess)\n         \
    \   result = result.append(diff)\n        }\n        return result", "       \
    \ var result = List[Long](0)\n        for (i <- 0 until game.length) {\n     \
    \       var score = game[i]\n            var guessScore = guess[i]\n         \
    \   if (score == guessScore) {\n                result = result.updated(i, 0)\n\
    \            } else {\n                result = result.updated(i, abs(score -\
    \ guessScore))\n            }\n        }\n        return result", "        var\
    \ result = List[Long]()\n        for (i <- 0 until game.length) {\n          \
    \  var score = game[i]\n            var guess = guess[i]\n            var diff\
    \ = Math.abs(score - guess)\n            result = result.append(diff)\n      \
    \  }\n        return result", "        var result = List[Long]()\n        for\
    \ (var i = 0; i < game.length; i++) {\n            var diff = Math.abs(game[i]\
    \ - guess[i])\n            result = result.append(diff)\n        }\n        return\
    \ result", "        val diffs = mutable.List[Long]()\n        for (i <- 0 until\
    \ game.length) {\n            val diff = Math.abs(game[i] - guess[i])\n      \
    \      diffs.append(diff)\n        }\n        return diffs", "        var result\
    \ = List[Long]()\n        for (i <- 0 until game.length) {\n            var gameScore\
    \ = game[i]\n            var guessScore = guess[i]\n            if (gameScore\
    \ == guessScore) {\n                result = result.append(0)\n            } else\
    \ {\n                result = result.append(Math.abs(gameScore - guessScore))\n\
    \            }\n        }\n        return result", "        val diffs = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            if (guess.get(i) == game.get(i))\
    \ {\n                diffs.append(0)\n            } else {\n                diffs.append(Math.abs(guess.get(i)\
    \ - game.get(i)))\n            }\n        }\n        return diffs", "        val\
    \ diffs = List[Long]()\n        for (i <- 0 until game.length) {\n           \
    \ if (game[i] == guess[i]) {\n                diffs = diffs.append(0)\n      \
    \      } else {\n                diffs = diffs.append(Math.abs(game[i] - guess[i]))\n\
    \            }\n        }\n        return diffs", "        var result = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            var score = game[i]\n \
    \           var guessScore = guess[i]\n            var diff = Math.abs(score -\
    \ guessScore)\n            result = result.append(diff)\n        }\n        return\
    \ result", "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            var score = game[i]\n            var guess = guess[i]\n     \
    \       var diff = Math.abs(score - guess)\n            result = result.append(diff)\n\
    \        }\n        return result", "        val diffs = List[Long]()\n      \
    \  for (i <- 0 until game.length) {\n            if (game[i] == guess[i]) {\n\
    \                diffs = diffs.append(0)\n            } else {\n             \
    \   diffs = diffs.append(Math.abs(game[i] - guess[i]))\n            }\n      \
    \  }\n        return diffs", "        val diffs = mutable.List[Long]()\n     \
    \   for (i <- 0 until game.length) {\n            val diff = Math.abs(game[i]\
    \ - guess[i])\n            diffs.append(diff)\n        }\n        return diffs",
  "        var result = List[Long](0l)\n        for (i <- 0 until game.length) {\n\
    \            if (guess[i] == game[i]) {\n                result = result.updated(i,\
    \ 0l)\n            } else {\n                result = result.updated(i, game[i]\
    \ - guess[i])\n            }\n        }\n        return result", "        var\
    \ result = List[Long](0)\n        for (i <- 0 until game.length) {\n         \
    \   if (guess[i] == game[i]) {\n                result = result.updated(i, 0)\n\
    \            } else {\n                result = result.updated(i, game[i] - guess[i])\n\
    \            }\n        }\n        return result", "        val diffs = List[Long](0)\n\
    \        for (i <- 0 until game.length) {\n            if (guess(i) != game(i))\
    \ {\n                diffs(i) = game(i) - guess(i)\n            }\n        }\n\
    \        return diffs", "        val result = List[Long]()\n        for (i <-\
    \ 0 until game.length) {\n            val score = game[i]\n            val guessScore\
    \ = guess[i]\n            if (score == guessScore) {\n                result.append(0)\n\
    \            } else {\n                result.append(Math.abs(score - guessScore))\n\
    \            }\n        }\n        return result", "        var result = List[Long](0l)\n\
    \        for (i <- 0 until game.length) {\n            var score = game[i]\n \
    \           var guessScore = guess[i]\n            if (score == guessScore) {\n\
    \                result = result.updated(i, 0l)\n            } else {\n      \
    \          result = result.updated(i, Math.abs(score - guessScore))\n        \
    \    }\n        }\n        return result", "        val diffs = mutable.List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            if (guess[i] != game[i])\
    \ diffs.append(abs(guess[i] - game[i]))\n        }\n        return diffs", " \
    \       val diffs = List[Long]()\n        for (i <- 0 until game.length) {\n \
    \           val diff = Math.abs(game[i] - guess[i])\n            diffs = diffs.append(diff)\n\
    \        }\n        return diffs", "        var diffs = List[Long](0)\n      \
    \  for (i <- 0 until game.length) {\n            diffs = diffs.append(game.apply(i)\
    \ - guess.apply(i))\n        }\n        return diffs", "        val result = game.zip(guess).map(tuple\
    \ -> tuple._1 - tuple._2).toSeq()\n        return result.filter(t -> t != 0).toList",
  "        val diffs = mutable.List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            val diff = Math.abs(game[i] - guess[i])\n            diffs.append(diff)\n\
    \        }\n        return diffs"]
stop_tokens:
- "\n    }\n"
