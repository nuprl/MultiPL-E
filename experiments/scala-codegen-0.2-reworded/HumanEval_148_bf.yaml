name: HumanEval_148_bf
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // There are eight planets in our solar system: the closerst to the Sun \n\
  \    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
  \    // Uranus, Neptune.\n    // Write a function that takes two planet names as\
  \ strings planet1 and planet2. \n    // The function should return a tuple containing\
  \ all planets whose orbits are \n    // located between the orbit of planet1 and\
  \ the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The\
  \ function should return an empty tuple if planet1 or planet2\n    // are not correct\
  \ planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n\
  \    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"\
  ))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n\
  \    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n\
  \    def bf(planet1 : String, planet2 : String) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"),\
  \ (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
  Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
  Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"\
  Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
  Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
  ), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\"\
  )).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n\
  \    }\n\n}\n"
completions: ["        var planet1_ = planet1\n        var planet2_ = planet2\n  \
    \      var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_\
    \ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n\
    \        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_\
    \ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n\
    \        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_\
    \ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n\
    \        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_\
    \ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n\
    \        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_\
    \ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n\
    \        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_\
    \ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n\
    \        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_\
    \ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n\
    \        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_\
    \ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n\
    \        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_\
    \ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n\
    \        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_\
    \ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n\
    \        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_\
    \ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1",
  "        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n\
    \        val p1_index = p1.indexOf(\" \")\n        val p2_index = p2.indexOf(\"\
    \ \")\n        val p1_name = p1.substring(0, p1_index)\n        val p2_name =\
    \ p2.substring(0, p2_index)\n        val p1_orbital_period = p1.substring(p1_index\
    \ + 1)\n        val p2_orbital_period = p2.substring(p2_index + 1)\n        val\
    \ p1_orbital_period_in_seconds = _.toDouble(p1_orbital_period)\n        val p2_orbital_period_in_seconds\
    \ = _.toDouble(p2_orbital_period)\n        val p1_orbital_period_in_minutes =\
    \ p1_orbital_period_in_seconds / 60\n        val p2_orbital_period_in_minutes\
    \ = p2_orbital_period_in_seconds / 60\n        val p1_orbital_period_in_hours\
    \ = p1_orbital_period_in_minutes / 60\n        val p2_orbital_period_in_hours\
    \ = p2_orbital_period_in_minutes / 60\n        val p1_orbital_period_in_days =\
    \ p1_orbital_period_in_hours / 24\n        val p2_orbital_period_in_days = p2_orbital_period_in_hours\
    \ / 24\n        val p1_orbital_period_in_years = p1_orbital_period_in_days / 365\n\
    \        val p2_orbital_period_in_years = p2_orbital_period_in_days / 365\n  \
    \      val p1_orbital_period_in_centuries = p1_orbital_period_in_years / 100\n\
    \        val p2_orbital_period_in_centuries = p2_orbital_period_in_years / 100\n\
    \        val p1_orbital_period_in_millennia = p1_orb", "        val p1 = planet1.toUpperCase()\n\
    \        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n\
    \        val p2_idx = planets.indexOf(p2)\n        val orbit1 = scala.math.min(p1_idx,\
    \ p2_idx)\n        val orbit2 = scala.math.max(p1_idx, p2_idx)\n        val orbit_diff\
    \ = orbit2 - orbit1\n        val orbit_diff_abs = scala.math.abs(orbit_diff)\n\
    \        val orbit_diff_sign = orbit_diff / orbit_diff_abs\n        val orbit_diff_abs_sign\
    \ = orbit_diff_abs / orbit_diff_abs\n        val orbit_diff_sign_abs = orbit_diff_sign\
    \ * orbit_diff_abs_sign\n        val orbit_diff_sign_abs_sign = orbit_diff_sign\
    \ * orbit_diff_abs_sign\n        val orbit_diff_sign_abs_sign_abs = orbit_diff_sign\
    \ * orbit_diff_abs_sign * orbit_diff_abs_sign\n        val orbit_diff_sign_abs_sign_abs_sign\
    \ = orbit_diff_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign\n\
    \        val orbit_diff_sign_abs_sign_abs_sign_abs = orbit_diff_sign * orbit_diff_abs_sign\
    \ * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign\n        val\
    \ orbit_diff_sign_abs_sign_abs_sign_abs_sign = orbit_diff_sign * orbit_diff_abs_sign\
    \ * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign\n\
    \        val orbit_diff_sign_abs_sign_abs_sign_abs_sign_abs = orbit_diff_sign\
    \ * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign\
    \ * orbit_diff_abs_sign * orbit_diff_abs_", "        var planets = List[String]()\n\
    \        var planet1_orbital_period = scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math",
  "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_index = scala.collection.JavaConversions.asJavaCollection(p1.indexOf(p2)).toList().indexOf(p2)\n\
    \        val p2_index = scala.collection.JavaConversions.asJavaCollection(p2.indexOf(p1)).toList().indexOf(p1)\n\
    \        val p1_orbit = scala.math.BigDecimal(p1_index).divide(scala.math.BigDecimal(p2_index))\n\
    \        val p2_orbit = scala.math.BigDecimal(p2_index).divide(scala.math.BigDecimal(p1_index))\n\
    \        val p1_orbit_int = p1_orbit.intValue()\n        val p2_orbit_int = p2_orbit.intValue()\n\
    \        val p1_orbit_float = p1_orbit.floatValue()\n        val p2_orbit_float\
    \ = p2_orbit.floatValue()\n        val p1_orbit_double = p1_orbit.doubleValue()\n\
    \        val p2_orbit_double = p2_orbit.doubleValue()\n        val p1_orbit_bigDecimal\
    \ = p1_orbit.bigDecimalValue()\n        val p2_orbit_bigDecimal = p2_orbit.bigDecimalValue()\n\
    \        val p1_orbit_bigInt = p1_orbit.bigIntegerValue()\n        val p2_orbit_bigInt\
    \ = p2_orbit.bigIntegerValue()\n        val p1_orbit_bigDecimalInt = p1_orbit.bigDecimalIntValue()\n\
    \        val p2_orbit_bigDecimalInt = p2_orbit.bigDecimalIntValue()\n        val\
    \ p1_orbit_bigDecimalLong = p1_orbit.bigDecimalLongValue()\n        val p2_orbit_bigDecimalLong\
    \ = p2_orbit.bigDecimalLongValue()\n        val p1_orbit_bigDecimalFloat = p1_orbit.bigDecimalFloatValue()\n\
    \        val p2_orbit_bigDecimalFloat = p2_orbit.big", "        var planets =\
    \ List[String]()\n        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n\
    \        var p1_index = planets.indexOf(p1)\n        var p2_index = planets.indexOf(p2)\n\
    \        var p1_orbit = scala.math.min(p1_index, p2_index)\n        var p2_orbit\
    \ = scala.math.max(p1_index, p2_index)\n        var p1_orbit_index = planets.indexOf(p1_orbit)\n\
    \        var p2_orbit_index = planets.indexOf(p2_orbit)\n        var p1_orbit_index_plus_one\
    \ = p1_orbit_index + 1\n        var p2_orbit_index_plus_one = p2_orbit_index +\
    \ 1\n        var p1_orbit_index_minus_one = p1_orbit_index - 1\n        var p2_orbit_index_minus_one\
    \ = p2_orbit_index - 1\n        var p1_orbit_index_plus_two = p1_orbit_index +\
    \ 2\n        var p2_orbit_index_plus_two = p2_orbit_index + 2\n        var p1_orbit_index_minus_two\
    \ = p1_orbit_index - 2\n        var p2_orbit_index_minus_two = p2_orbit_index\
    \ - 2\n        var p1_orbit_index_plus_three = p1_orbit_index + 3\n        var\
    \ p2_orbit_index_plus_three = p2_orbit_index + 3\n        var p1_orbit_index_minus_three\
    \ = p1_orbit_index - 3\n        var p2_orbit_index_minus_three = p2_orbit_index\
    \ - 3\n        var p1_orbit_index_plus_four = p1_orbit_index + 4\n        var\
    \ p2_orbit_index_plus_four = p2_orbit_index + 4\n        var p1_orbit_index_minus_four\
    \ = p1_orbit_index - 4\n        var p2_orbit_index_minus_four = p2_orbit_index\
    \ - 4\n        var", "        val p1 = planet1.toLowerCase()\n        val p2 =\
    \ planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val\
    \ p2_idx = planets.indexOf(p2)\n        val result = mutable.List[String]()\n\
    \        if (p1_idx < 0 || p2_idx < 0) {\n            return result\n        }\n\
    \        for (i <- p1_idx) {\n            for (j <- p2_idx) {\n              \
    \  if (dist(planets[i], planets[j]) < dist(planets[p1_idx], planets[p2_idx]))\
    \ {\n                    result.append(planets[i])\n                }\n      \
    \      }\n        }\n        return result", "        var planets = List[String]()\n\
    \        var sun = new java.util.Vector[8]\n        sun[0] = new java.util.Vector[8]\n\
    \        sun[1] = new java.util.Vector[8]\n        sun[2] = new java.util.Vector[8]\n\
    \        sun[3] = new java.util.Vector[8]\n        sun[4] = new java.util.Vector[8]\n\
    \        sun[5] = new java.util.Vector[8]\n        sun[6] = new java.util.Vector[8]\n\
    \        sun[7] = new java.util.Vector[8]\n        var sun_index = 0\n       \
    \ var planet_index = 0\n        var sun_planet_index = 0\n        var planet_planet_index\
    \ = 0\n        var sun_planet_index_1 = 0\n        var sun_planet_index_2 = 0\n\
    \        var sun_planet_index_3 = 0\n        var sun_planet_index_4 = 0\n    \
    \    var sun_planet_index_5 = 0\n        var sun_planet_index_6 = 0\n        var\
    \ sun_planet_index_7 = 0\n        var sun_planet_index_8 = 0\n        var sun_planet_index_9\
    \ = 0\n        var sun_planet_index_10 = 0\n        var sun_planet_index_11 =\
    \ 0\n        var sun_planet_index_12 = 0\n        var sun_planet_index_13 = 0\n\
    \        var sun_planet_index_14 = 0\n        var sun_planet_index_15 = 0\n  \
    \      var sun_planet_index_16 = 0\n        var sun_planet_index_17 = 0\n    \
    \    var sun_planet_index_18 = 0\n        var sun_planet_index_19 = 0\n      \
    \  var sun_planet_index_20 = 0\n        var sun_planet_index_21 = 0\n        var\
    \ sun_planet_index_22 = 0\n        var sun_planet_index_23 = 0\n        var sun_planet_index_24\
    \ = 0\n        var sun_planet_index_25 = 0\n        var sun_planet_index_26 =\
    \ 0\n        var sun_planet_index_27 = 0\n", "        var p1 = planet1.toLowerCase()\n\
    \        var p2 = planet2.toLowerCase()\n        var p1_index = scala.collection.JavaConversions.asScalaBuffer(p1).toList().indexOf(p1)\n\
    \        var p2_index = scala.collection.JavaConversions.asScalaBuffer(p2).toList().indexOf(p2)\n\
    \        var p1_orbit = scala.math.BigDecimal.valueOf(Math.PI).multiply(scala.math.BigDecimal.valueOf(p1_index))\n\
    \        var p2_orbit = scala.math.BigDecimal.valueOf(Math.PI).multiply(scala.math.BigDecimal.valueOf(p2_index))\n\
    \        var result = scala.collection.JavaConversions.asScalaBuffer(p1).toList().takeWhile(p1_orbit.plus(p2_orbit).toBigDecimal().toBigInteger().toBigDecimal().toBigInteger().toBigDecimal().toBigInteger().toBigDecimal())\n\
    \        return scala.collection.JavaConversions.asJavaList(result)", "      \
    \  val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n  \
    \      val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n  \
    \      val result = scala.collection.mutable.ListBuffer[String]()\n        for\
    \ (i <- 0 until planets.size) {\n            val planet = planets[i]\n       \
    \     if (planet.equals(p1) || planet.equals(p2)) continue\n            if (orbits[i]\
    \ < p1_orb && orbits[i] > p2_orb) result.append(planet)\n        }\n        return\
    \ result.toList", "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val orbit_distance = p1_idx - p2_idx\n        val orbit_distance_abs\
    \ = Math.abs(orbit_distance)\n        val orbit_distance_abs_floor = Math.floor(orbit_distance_abs)\n\
    \        val orbit_distance_abs_ceil = Math.ceil(orbit_distance_abs)\n       \
    \ val orbit_distance_abs_floor_idx = orbit_distance_abs_floor.toInt\n        val\
    \ orbit_distance_abs_ceil_idx = orbit_distance_abs_ceil.toInt\n        val orbit_distance_abs_floor_idx_plus_1\
    \ = orbit_distance_abs_floor_idx + 1\n        val orbit_distance_abs_ceil_idx_minus_1\
    \ = orbit_distance_abs_ceil_idx - 1\n        val orbit_distance_abs_floor_idx_plus_1_minus_1\
    \ = orbit_distance_abs_floor_idx_plus_1 - 1\n        val orbit_distance_abs_ceil_idx_minus_1_plus_1\
    \ = orbit_distance_abs_ceil_idx_minus_1 + 1\n        val orbit_distance_abs_floor_idx_plus_1_minus_1_plus_1\
    \ = orbit_distance_abs_floor_idx_plus_1_minus_1 + 1\n        val orbit_distance_abs_ceil_idx_minus_1_plus_1_minus_1\
    \ = orbit_distance_abs_ceil_idx_minus_1_plus_1 - 1\n        val orbit_distance_abs_floor_idx_plus_1_minus_1_plus_1_minus_1\
    \ = orbit_distance_abs_floor_idx_plus_1_minus_1_plus_1 - 1\n        val orbit_distance_abs_ceil_idx_minus_1_plus_1_minus_1_plus_1\
    \ = orbit_distance_abs", "        var planets = List[String]()\n        var planet1_orbital_period\
    \ = scala.math.durations.Seconds(\n            scala.math.durations.Seconds(\n\
    \                scala.math.durations.Seconds(\n                    scala.math.durations.Seconds(\n\
    \                        scala.math.durations.Seconds(\n                     \
    \       scala.math.durations.Seconds(\n                                scala.math.durations.Seconds(\n\
    \                                    scala.math.durations.Seconds(\n         \
    \                               scala.math.durations.Seconds(\n              \
    \                              scala.math.durations.Seconds(\n               \
    \                                 scala.math.durations.Seconds(\n            \
    \                                        scala.math.durations.Seconds(\n     \
    \                                                   scala.math.durations.Seconds(\n\
    \                                                            scala.math.durations.Seconds(\n\
    \                                                                scala.math.durations.Seconds(\n\
    \                                                                    scala.math.durations.Seconds(\n\
    \                                                                        scala.math.durations.Seconds(\n\
    \                                                                            scala.math.durations.Seconds(\n\
    \                                                                            \
    \    scala.math.durations.Seconds(\n                                         \
    \                                           scala.math.durations.Seconds(\n  \
    \                                                                            \
    \          scala.math.durations.Seconds(\n                                   \
    \                                                         scala.math.durations.Seconds(\n\
    \                                                                            \
    \                    scala.math.durations.Seconds(\n                         \
    \                                                                           scala.math.durations.Seconds(\n\
    \                                                                            \
    \                            scala.math.durations.Seconds(\n                 \
    \                                                                            \
    \               scala.math.durations.Seconds(\n                              \
    \                                                                            \
    \      scala.math.durations.Seconds(\n                                       \
    \                                                                            \
    \ scala.math.durations.Seconds(\n                                            \
    \                                                                            scala.math.durations.Seconds(\n\
    \                                                                            \
    \                                                    scala.math.durations.Seconds(\n",
  "        var planets = List[String]()\n        var sun = new java.util.Vector[8]\n\
    \        sun[0] = new java.util.Vector[8]\n        sun[1] = new java.util.Vector[8]\n\
    \        sun[2] = new java.util.Vector[8]\n        sun[3] = new java.util.Vector[8]\n\
    \        sun[4] = new java.util.Vector[8]\n        sun[5] = new java.util.Vector[8]\n\
    \        sun[6] = new java.util.Vector[8]\n        sun[7] = new java.util.Vector[8]\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n\
    \        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n\
    \        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n\
    \        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n\
    \        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n\
    \        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n\
    \        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n\
    \        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n\
    \        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n\
    \        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n\
    \        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n\
    \        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n\
    \        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n\
    \        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n",
  "        var planets = List[String]()\n        var sun = new java.util.Vector[8]\n\
    \        sun[0] = new java.util.Vector[8]\n        sun[1] = new java.util.Vector[8]\n\
    \        sun[2] = new java.util.Vector[8]\n        sun[3] = new java.util.Vector[8]\n\
    \        sun[4] = new java.util.Vector[8]\n        sun[5] = new java.util.Vector[8]\n\
    \        sun[6] = new java.util.Vector[8]\n        sun[7] = new java.util.Vector[8]\n\
    \        var sun_index = 0\n        var planet_index = 0\n        var planet_name\
    \ = planet1\n        var sun_name = planet2\n        var sun_distance = scala.math.pow(scala.math.abs(scala.math.cos(scala.math.toRadians(scala.math.atan2(scala.math.sin(scala.math.toRadians(scala.math.atan2(scala.math.sin(scala.math.toRadians(scala.math.atan2(scala.math.sin(scala.math.toRadians(scala.math.atan2(scala.math.sin(scala.math.toRadians(scala.math.atan2(scala.math.sin(scala.math.toRadians(scala.math.atan2(scala.math.sin(scala.math.toRadians(scala.math.atan2(scala.math.sin(scala.math.toRadians(scala.math.atan2(scala.math.sin(scala.math.toRadians(scala.math.atan2(scala.math.sin(scala.math.toRadians(scala.math.atan2(scala.math.sin(scala.math.toRadians(scala.math.atan2(scala.math.sin(scala.math.toRadians(scala.math.atan2(scala.math.sin(scala.math.toRadians(sc",
  "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n  \
    \      val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n\
    \        val p1_orb_idx_idx = p1_orb_idx + 1\n        val p2_orb_idx_idx = p2_orb_idx\
    \ + 1\n        val p1_orb_idx_idx_idx = p1_orb_idx_idx + 1\n        val p2_orb_idx_idx_idx\
    \ = p2_orb_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx = p1_orb_idx_idx_idx\
    \ + 1\n        val p2_orb_idx_idx_idx_idx = p2_orb_idx_idx_idx + 1\n        val\
    \ p1_orb_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx_idx\
    \ = p2_orb_idx_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx_idx\
    \ + 1\n        val p2_orb_idx_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx_idx\
    \ + 1\n        val p1_orb_idx_idx_idx_idx_idx_idx_id", "        val p1 = planet1.toLowerCase()\n\
    \        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n\
    \        val p2_idx = planets.indexOf(p2)\n        val orbit_interval = scala.math.min(p1_idx,\
    \ p2_idx)\n        val orbit_diff = p1_idx - p2_idx\n        val orbit_diff_abs\
    \ = scala.math.abs(orbit_diff)\n        val orbit_diff_sign = orbit_diff / orbit_diff_abs\n\
    \        val orbit_diff_abs_sign = orbit_diff_abs / orbit_diff_abs\n        val\
    \ orbit_diff_sign_abs = orbit_diff_sign * orbit_diff_abs_sign\n        val orbit_diff_sign_abs_sign\
    \ = orbit_diff_sign * orbit_diff_abs_sign\n        val orbit_diff_sign_abs_sign_abs\
    \ = orbit_diff_sign * orbit_diff_abs_sign * orbit_diff_abs_sign\n        val orbit_diff_sign_abs_sign_abs_sign\
    \ = orbit_diff_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign\n\
    \        val orbit_diff_sign_abs_sign_abs_sign_abs = orbit_diff_sign * orbit_diff_abs_sign\
    \ * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign\n        val\
    \ orbit_diff_sign_abs_sign_abs_sign_abs_sign = orbit_diff_sign * orbit_diff_abs_sign\
    \ * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign\n\
    \        val orbit_diff_sign_abs_sign_abs_sign_abs_sign_abs = orbit_diff_sign\
    \ * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign\
    \ * orbit_diff_abs_sign * orbit_diff_abs_sign\n        val orbit_diff_sign_abs_sign_abs_sign_abs",
  "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n  \
    \      val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n\
    \        val result = List[String]()\n        for (i <- p1_orb_idx + 1 to p2_orb_idx)\
    \ {\n            result = result + planets[p1_orb[i]]\n        }\n        return\
    \ result", "        var planets = List[String]()\n        var sun = new java.util.Date()\n\
    \        var sun_x = sun.getTime()\n        var sun_y = sun.getYear()\n      \
    \  var sun_m = sun.getMonth()\n        var sun_d = sun.getDate()\n        var\
    \ sun_h = sun.getHours()\n        var sun_min = sun.getMinutes()\n        var\
    \ sun_sec = sun.getSeconds()\n        var sun_ms = sun.getTime()\n        var\
    \ sun_dif = sun_x - sun_y * 365 * 24 * 60 * 60 * 1000 - sun_m * 24 * 60 * 60 *\
    \ 1000 - sun_d * 24 * 60 * 60 * 1000 - sun_h * 60 * 60 * 1000 - sun_min * 60 *\
    \ 1000 - sun_sec * 1000 - sun_ms\n        var planet1_x = scala.math.BigDecimal.valueOf(sun_x).subtract(scala.math.BigDecimal.valueOf(sun_y).multiply(scala.math.BigDecimal.valueOf(365)).add(scala.math.BigDecimal.valueOf(sun_m).multiply(scala.math.BigDecimal.valueOf(24)).add(scala.math.BigDecimal.valueOf(sun_d).multiply(scala.math.BigDecimal.valueOf(24)).add(scala.math.BigDecimal.valueOf(sun_h).multiply(scala.math.BigDecimal.valueOf(60)).add(scala.math.BigDecimal.valueOf(sun_min).multiply(scala.math.BigDecimal.valueOf(60)).add(scala.math.BigDecimal.valueOf(sun_sec).multiply(scala.math.BigDecimal.valueOf(60)).add(scala.math.BigDecimal.valueOf(sun_ms))))))))\n\
    \        var planet1_y = scala.math.BigDecimal.valueOf(sun_y).add(scala.math.BigDecimal.valueOf(sun_m).multiply(scala.math.BigDecimal.",
  "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n  \
    \      val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n\
    \        val p1_orb_idx_min = p1_orb_idx\n        val p2_orb_idx_min = p2_orb_idx\n\
    \        if (p1_orb_idx < p2_orb_idx) {\n            p1_orb_idx_min = p2_orb_idx\n\
    \            p2_orb_idx_min = p1_orb_idx\n        }\n        val p1_orb_idx_max\
    \ = p1_orb_idx\n        val p2_orb_idx_max = p2_orb_idx\n        if (p1_orb_idx\
    \ > p2_orb_idx) {\n            p1_orb_idx_max = p2_orb_idx\n            p2_orb_idx_max\
    \ = p1_orb_idx\n        }\n        val result = List[String]()\n        for (i\
    \ <- p1_orb_idx_min : p1_orb_idx_max) {\n            for (j <- p2_orb_idx_min\
    \ : p2_orb_idx_max) {\n                if (i < j) {\n                    result\
    \ = append(result, planets[i])\n                }\n            }\n        }\n\
    \        return result", "        var p1 = planet1.toLowerCase()\n        var\
    \ p2 = planet2.toLowerCase()\n        var p1_idx = planets.indexOf(p1)\n     \
    \   var p2_idx = planets.indexOf(p2)\n        var result = List[String]()\n  \
    \      var i = p1_idx\n        var j = p2_idx\n        while (i < j) {\n     \
    \       result = append(result, planets[i])\n            i = i + 1\n        }\n\
    \        while (i < planets.size()) {\n            result = append(result, planets[i])\n\
    \            i = i + 1\n        }\n        while (j < planets.size()) {\n    \
    \        result = append(result, planets[j])\n            j = j + 1\n        }\n\
    \        return result", "        val p1 = planet1.toLowerCase()\n        val\
    \ p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n     \
    \   val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n  \
    \      val p2_orb = orbits[p2_idx]\n        val result = List[String]()\n    \
    \    for (i <- 1 to p1_orb) {\n            for (j <- 1 to p2_orb) {\n        \
    \        if (j < i) {\n                    result = result + List(planets[i])\n\
    \                }\n            }\n        }\n        return result", "      \
    \  val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n  \
    \      val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n  \
    \      val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n\
    \        val p1_orb_next = p1_orb.get(p1_orb_idx + 1)\n        val p2_orb_prev\
    \ = p2_orb.get(p2_orb_idx - 1)\n        val p1_orb_next_idx = p1_orb.indexOf(p1_orb_next)\n\
    \        val p2_orb_prev_idx = p2_orb.indexOf(p2_orb_prev)\n        val p1_orb_next_orb\
    \ = orbits[p1_orb_next_idx]\n        val p2_orb_prev_orb = orbits[p2_orb_prev_idx]\n\
    \        val p1_orb_next_orb_idx = p1_orb_next_orb.indexOf(p1_orb_next)\n    \
    \    val p2_orb_prev_orb_idx = p2_orb_prev_orb.indexOf(p2_orb_prev)\n        val\
    \ p1_orb_next_orb_next = p1_orb_next_orb.get(p1_orb_next_orb_idx + 1)\n      \
    \  val p2_orb_prev_orb_prev = p2_orb_prev_orb.get(p2_orb_prev_orb_idx - 1)\n \
    \       val p1_orb_next_orb_next_idx = p1_orb_next_orb.indexOf(p1_orb_next_orb_next)\n\
    \        val p2_orb_prev_orb_prev_idx = p2_orb_prev_orb.indexOf(p2_orb", "   \
    \     var planets = List[String]()\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name\
    \ = planet1\n        var planet2_name = planet2\n        var planet1_index = 0\n\
    \        var planet2_index = 0\n        var planet1_orbit_index = 0\n        var\
    \ planet2_orbit_index = 0\n        var planet1_orbit_value = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2_orbit_value = scala.math.BigDecimal.valueOf(0)\n        var\
    \ planet1_orbit_index = 0\n        var planet2_orbit_index = 0\n        var planet1_orbit_value\
    \ = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit_value = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet1_orbit_index = 0\n        var planet2_orbit_index = 0\n  \
    \      var planet1_orbit_value = scala.math.BigDecimal.valueOf(0)\n        var\
    \ planet2_orbit_value = scala.math.BigDecimal.valueOf(0)\n        var planet1_orbit_index\
    \ = 0\n        var planet2_orbit_index = 0\n        var planet1_orbit_value =\
    \ scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit_value = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet1_orbit_index = 0\n        var planet2_orbit_index = 0\n  \
    \      var planet1_orbit_value = scala.math.BigDecimal.valueOf(0)\n        var\
    \ planet2_orbit_value = scala.math.BigDecimal.valueOf(0)\n        var planet1_orbit_index\
    \ = 0\n        var planet2_orbit_index = 0\n        var planet1_orbit_value =\
    \ scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit_value = scala.math.BigDecimal.valueOf(0)\n",
  "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val result = mutable.List[String]()\n        if (p1_idx < 0 || p2_idx\
    \ < 0) {\n            return result\n        }\n        val p1_orb = orbits[p1_idx]\n\
    \        val p2_orb = orbits[p2_idx]\n        if (p1_orb > p2_orb) {\n       \
    \     return result\n        }\n        for (i <- 1 to p1_orb) {\n           \
    \ for (j <- 1 to p2_orb) {\n                if (i + j > p1_orb + p2_orb) {\n \
    \                   break\n                }\n                result.append(planets[i\
    \ + j])\n            }\n        }\n        return result", "        var p1 = planet1.toLowerCase()\n\
    \        var p2 = planet2.toLowerCase()\n        var p1_idx = planets.indexOf(p1)\n\
    \        var p2_idx = planets.indexOf(p2)\n        var result = List[String]()\n\
    \        var i = 0\n        var j = 0\n        while (i < p1_idx && j < p2_idx)\
    \ {\n            if (planets[i] < planets[j]) {\n                result = append(result,\
    \ planets[i])\n                i += 1\n            } else {\n                result\
    \ = append(result, planets[j])\n                j += 1\n            }\n      \
    \  }\n        while (i < p1_idx) {\n            result = append(result, planets[i])\n\
    \            i += 1\n        }\n        while (j < p2_idx) {\n            result\
    \ = append(result, planets[j])\n            j += 1\n        }\n        return\
    \ result", "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val result = List[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n\
    \            return result\n        }\n        val p1_orb = orbits[p1_idx]\n \
    \       val p2_orb = orbits[p2_idx]\n        for (i <- p1_orb) {\n           \
    \ for (j <- p2_orb) {\n                if (j < i) {\n                    result\
    \ = result + planets[i]\n                }\n            }\n        }\n       \
    \ return result", "        var planets = List[String]()\n        var p1 = planet1.toLowerCase()\n\
    \        var p2 = planet2.toLowerCase()\n        var sun = \"sun\"\n        var\
    \ sun_orb = scala.math.BigDecimal.valueOf(0)\n        var sun_dist = scala.math.BigDecimal.valueOf(0)\n\
    \        var sun_orb_dist = scala.math.BigDecimal.valueOf(0)\n        var sun_orb_dist_p1\
    \ = scala.math.BigDecimal.valueOf(0)\n        var sun_orb_dist_p2 = scala.math.BigDecimal.valueOf(0)\n\
    \        var sun_orb_dist_p1_p2 = scala.math.BigDecimal.valueOf(0)\n        var\
    \ sun_orb_dist_p2_p1 = scala.math.BigDecimal.valueOf(0)\n        var sun_orb_dist_p1_p2_p1\
    \ = scala.math.BigDecimal.valueOf(0)\n        var sun_orb_dist_p1_p2_p2 = scala.math.BigDecimal.valueOf(0)\n\
    \        var sun_orb_dist_p2_p1_p1 = scala.math.BigDecimal.valueOf(0)\n      \
    \  var sun_orb_dist_p2_p1_p2 = scala.math.BigDecimal.valueOf(0)\n        var sun_orb_dist_p2_p2_p1\
    \ = scala.math.BigDecimal.valueOf(0)\n        var sun_orb_dist_p2_p2_p2 = scala.math.BigDecimal.valueOf(0)\n\
    \        var sun_orb_dist_p1_p1_p1 = scala.math.BigDecimal.valueOf(0)\n      \
    \  var sun_orb_dist_p1_p1_p2 = scala.math.BigDecimal.valueOf(0)\n        var sun_orb_dist_p1_p2_p1\
    \ = scala.math.BigDecimal.valueOf(0)\n        var sun_orb", "        val p1 =\
    \ planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx\
    \ = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val\
    \ orbit1 = orbits[p1_idx]\n        val orbit2 = orbits[p2_idx]\n        val orbit_intersect\
    \ = orbit1.intersect(orbit2)\n        val result = planets.filter(p -> orbit_intersect.contains(p))\n\
    \        result.sort(Comparator.comparing(p -> orbit_intersect.distance(p)))\n\
    \        return result", "        var planet1_ = planet1.toLowerCase()\n     \
    \   var planet2_ = planet2.toLowerCase()\n        var planet1_ = planet1_.trim()\n\
    \        var planet2_ = planet2_.trim()\n        var planet1_ = planet1_.replaceAll(\"\
    \ \", \"\")\n        var planet2_ = planet2_.replaceAll(\" \", \"\")\n       \
    \ var planet1_ = planet1_.replaceAll(\"[^a-zA-Z]\", \"\")\n        var planet2_\
    \ = planet2_.replaceAll(\"[^a-zA-Z]\", \"\")\n        var planet1_ = planet1_.replaceAll(\"\
    [^a-zA-Z]\", \"\")\n        var planet2_ = planet2_.replaceAll(\"[^a-zA-Z]\",\
    \ \"\")\n        var planet1_ = planet1_.replaceAll(\"[^a-zA-Z]\", \"\")\n   \
    \     var planet2_ = planet2_.replaceAll(\"[^a-zA-Z]\", \"\")\n        var planet1_\
    \ = planet1_.replaceAll(\"[^a-zA-Z]\", \"\")\n        var planet2_ = planet2_.replaceAll(\"\
    [^a-zA-Z]\", \"\")\n        var planet1_ = planet1_.replaceAll(\"[^a-zA-Z]\",\
    \ \"\")\n        var planet2_ = planet2_.replaceAll(\"[^a-zA-Z]\", \"\")\n   \
    \     var planet1_ = planet1_.replaceAll(\"[^a-zA-Z]\", \"\")\n        var planet2_\
    \ = planet2_.replaceAll(\"[^a-zA-Z]\", \"\")\n        var planet1_ = planet1_.replaceAll(\"\
    [^a-zA-Z]\", \"\")\n        var planet2_ = planet2_.replaceAll(\"[^a-zA-Z]\",\
    \ \"\")\n        var planet1_ = planet1_.replaceAll(\"[^a-zA-Z]\", \"\")\n   \
    \     var planet2_ = planet2_.replaceAll(\"[^a-zA-Z]\", \"\")\n        var planet1_\
    \ = planet1_.replaceAll(\"[^a-zA-Z]\", \"\")\n        ", "        val p1 = planet1.toLowerCase()\n\
    \        val p2 = planet2.toLowerCase()\n        val p1_idx = scala.collection.JavaConversions.asScalaBuffer(p1).toIndexedSeq().toList\n\
    \        val p2_idx = scala.collection.JavaConversions.asScalaBuffer(p2).toIndexedSeq().toList\n\
    \        val p1_orb = scala.math.BigDecimal.valueOf(p1_idx.get(0).toDouble)\n\
    \        val p2_orb = scala.math.BigDecimal.valueOf(p2_idx.get(0).toDouble)\n\
    \        val p1_orb_diff = p1_orb.subtract(p2_orb)\n        val p1_orb_diff_abs\
    \ = p1_orb_diff.abs()\n        val p1_orb_diff_abs_div = p1_orb_diff_abs.divide(scala.math.BigDecimal.valueOf(2))\n\
    \        val p1_orb_diff_abs_div_half = p1_orb_diff_abs_div.divide(scala.math.BigDecimal.valueOf(2))\n\
    \        val p1_orb_diff_abs_div_half_minus = p1_orb_diff_abs_div_half.subtract(scala.math.BigDecimal.valueOf(1))\n\
    \        val p1_orb_diff_abs_div_half_minus_half = p1_orb_diff_abs_div_half_minus.divide(scala.math.BigDecimal.valueOf(2))\n\
    \        val p1_orb_diff_abs_div_half_minus_half_minus = p1_orb_diff_abs_div_half_minus_half.subtract(scala.math.BigDecimal.valueOf(1))\n\
    \        val p1_orb_diff_abs_div_half_minus_half_minus_half = p1_orb_diff_abs_div_half_minus_half_minus.divide(scala.math.BigDecimal.valueOf(2))\n\
    \        val p1_", "        var planets = List[String]()\n        var sun = new\
    \ java.util.Date()\n        var sun_x = sun.getTime()\n        var sun_y = sun.getYear()\n\
    \        var sun_z = sun.getTimezoneOffset()\n        var sun_d = sun.getDay()\n\
    \        var sun_m = sun.getMonth()\n        var sun_y = sun.getYear()\n     \
    \   var sun_h = sun.getHours()\n        var sun_min = sun.getMinutes()\n     \
    \   var sun_s = sun.getSeconds()\n        var sun_ms = sun.getTime()\n       \
    \ var sun_tz = sun.getTimezoneOffset()\n        var sun_tz_h = sun.getTimezoneOffset()\
    \ / 60\n        var sun_tz_m = sun.getTimezoneOffset() % 60\n        var sun_tz_s\
    \ = sun.getTimezoneOffset() % 60\n        var sun_tz_d = sun.getTimezoneOffset()\
    \ / 60\n        var sun_tz_ms = sun.getTimezoneOffset() % 60\n        var sun_tz_hms\
    \ = sun.getTimezoneOffset() / 60\n        var sun_tz_hms_ms = sun.getTimezoneOffset()\
    \ % 60\n        var sun_tz_hms_s = sun.getTimezoneOffset() % 60\n        var sun_tz_hms_ms_s\
    \ = sun.getTimezoneOffset() % 60\n        var sun_tz_hms_ms_s_ms = sun.getTimezoneOffset()\
    \ % 60\n        var sun_tz_hms_ms_s_ms_s = sun.getTimezoneOffset() % 60\n    \
    \    var sun_tz_hms_ms_s_ms_s_ms = sun.getTimezoneOffset() % 60\n        var sun_tz_hms_ms_s_ms_s_ms_s\
    \ = sun.getTimezoneOffset() % 60\n        var sun_tz_hms_ms_s_ms_s_ms_s_ms = sun.getTimezoneOffset()\
    \ % 60\n        var sun_tz_hms_ms_s_ms_s_ms_s_ms_s = sun.getTimezoneOffset() %",
  "        var planets = List[String]()\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name\
    \ = planet1\n        var planet2_name = planet2\n        var planet1_orbit_name\
    \ = planet1_name + \"_orbit\"\n        var planet2_orbit_name = planet2_name +\
    \ \"_orbit\"\n        var planet1_orbit = scala.collection.mutable.ListBuffer[scala.math.BigDecimal]()\n\
    \        var planet2_orbit = scala.collection.mutable.ListBuffer[scala.math.BigDecimal]()\n\
    \        var planet1_orbit_name_value = scala.collection.mutable.ListBuffer[scala.math.BigDecimal]()\n\
    \        var planet2_orbit_name_value = scala.collection.mutable.ListBuffer[scala.math.BigDecimal]()\n\
    \        var planet1_orbit_name_value_index = scala.collection.mutable.ListBuffer[scala.math.BigDecimal]()\n\
    \        var planet2_orbit_name_value_index = scala.collection.mutable.ListBuffer[scala.math.BigDecimal]()\n\
    \        var planet1_orbit_name_value_index_index = scala.collection.mutable.ListBuffer[scala.math.BigDecimal]()\n\
    \        var planet2_orbit_name_value_index_index = scala.collection.mutable.ListBuffer[scala.math.BigDecimal]()\n\
    \        var planet1_orbit_name_value_index_index_index = scala.collection.mutable.ListBuffer[scala.math.BigDecimal]()\n\
    \        var planet2_orbit_name_value_index_index_index = scala.collection.mutable.ListBuffer[scala.math.BigDecimal]()\n\
    \        var planet1_orbit_name_value_index_index_index_index = scala.collection.mutable.ListBuffer[scala.math.BigDecimal]()\n\
    \        var planet2_orbit_name_value_index_index_", "        val p1 = planet1.toUpperCase()\n\
    \        val p2 = planet2.toUpperCase()\n        val p1_idx = scala.collection.JavaConversions.asJavaMap(p1).get(p1)\n\
    \        val p2_idx = scala.collection.JavaConversions.asJavaMap(p2).get(p2)\n\
    \        val p1_orb = scala.math.BigDecimal.valueOf(p1_idx)\n        val p2_orb\
    \ = scala.math.BigDecimal.valueOf(p2_idx)\n        val p1_orb_diff = p1_orb.subtract(p2_orb)\n\
    \        val p1_orb_diff_abs = p1_orb_diff.abs()\n        val p1_orb_diff_abs_int\
    \ = p1_orb_diff_abs.intValue()\n        val p1_orb_diff_abs_frac = p1_orb_diff_abs.subtract(p1_orb_diff_abs.intValue())\n\
    \        val p1_orb_diff_abs_frac_int = p1_orb_diff_abs_frac.intValue()\n    \
    \    val p1_orb_diff_abs_frac_int_div_2 = p1_orb_diff_abs_frac_int / 2\n     \
    \   val p1_orb_diff_abs_frac_int_div_2_int = p1_orb_diff_abs_frac_int_div_2.intValue()\n\
    \        val p1_orb_diff_abs_frac_int_div_2_int_div_2 = p1_orb_diff_abs_frac_int_div_2_int\
    \ / 2\n        val p1_orb_diff_abs_frac_int_div_2_int_div_2_int = p1_orb_diff_abs_frac_int_div_2_int_div_2.intValue()\n\
    \        val p1_orb_diff_abs_frac_int_div_2_int_div_2_int_div_2 = p1_orb_diff_abs_frac_int_div_2_int_div_2_int\
    \ /", "        val planets = List[String](\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val planet1Index\
    \ = planets.indexOf(planet1)\n        val planet2Index = planets.indexOf(planet2)\n\
    \        val result = List[String]()\n        for (i <- 0 until planet1Index)\
    \ {\n            for (j <- 0 until planet2Index) {\n                if (planets[i]\
    \ < planets[j]) {\n                    result = result.append(planets[i])\n  \
    \              }\n            }\n        }\n        return result", "        var\
    \ p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n       \
    \ var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n\
    \        var result = List[String]()\n        var i = p1_idx\n        var j =\
    \ p2_idx\n        while (i < j) {\n            var k = (i + j) / 2\n         \
    \   if (planets[k].compareTo(p1) < 0) {\n                j = k\n            }\
    \ else {\n                i = k + 1\n            }\n        }\n        while (i\
    \ <= j) {\n            result = result.append(planets[i])\n            i = i +\
    \ 1\n        }\n        return result", "        val p1 = planet1.toLowerCase()\n\
    \        val p2 = planet2.toLowerCase()\n        val p1_idx = p1.indexOf(\" \"\
    )\n        val p2_idx = p2.indexOf(\" \")\n        val p1_name = p1.substring(0,\
    \ p1_idx)\n        val p2_name = p2.substring(0, p2_idx)\n        val p1_orb =\
    \ p1.substring(p1_idx + 1)\n        val p2_orb = p2.substring(p2_idx + 1)\n  \
    \      val p1_orb_num = _.toInt(p1_orb)\n        val p2_orb_num = _.toInt(p2_orb)\n\
    \        val p1_orb_num_abs = Math.abs(p1_orb_num)\n        val p2_orb_num_abs\
    \ = Math.abs(p2_orb_num)\n        val p1_orb_num_abs_diff = p1_orb_num_abs - p2_orb_num_abs\n\
    \        val p1_orb_num_abs_diff_abs = Math.abs(p1_orb_num_abs_diff)\n       \
    \ val p1_orb_num_abs_diff_abs_diff = p1_orb_num_abs_diff_abs - p2_orb_num_abs\n\
    \        val p1_orb_num_abs_diff_abs_diff_abs = Math.abs(p1_orb_num_abs_diff_abs_diff)\n\
    \        val p1_orb_num_abs_diff_abs_diff_abs_diff = p1_orb_num_abs_diff_abs_diff_abs\
    \ - p2_orb_num_abs\n        val p1_orb_num_abs_diff_abs_diff_abs_diff_abs = Math.abs(p1_orb_num_abs_diff_abs_diff_abs_diff)\n\
    \        val p1_orb_num_abs_diff_abs_diff_abs_diff_abs_diff = p1_orb_num_abs_diff_abs_diff_abs_diff_",
  "        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n  \
    \      val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n\
    \        val p1_orb_idx_idx = p1_orb_idx + 1\n        val p2_orb_idx_idx = p2_orb_idx\
    \ + 1\n        val p1_orb_idx_orb = p1_orb[p1_orb_idx_idx]\n        val p2_orb_idx_orb\
    \ = p2_orb[p2_orb_idx_idx]\n        val p1_orb_idx_orb_idx = p1_orb_idx_orb.indexOf(p1)\n\
    \        val p2_orb_idx_orb_idx = p2_orb_idx_orb.indexOf(p2)\n        val p1_orb_idx_orb_idx_idx\
    \ = p1_orb_idx_orb_idx + 1\n        val p2_orb_idx_orb_idx_idx = p2_orb_idx_orb_idx\
    \ + 1\n        val p1_orb_idx_orb_idx_orb = p1_orb_idx_orb_idx_orb[p1_orb_idx_orb_idx_idx]\n\
    \        val p2_orb_idx_orb_idx_orb = p2_orb_idx_orb_idx_orb[p2_orb_idx_orb_idx_idx]\n\
    \        val p1_orb_idx_orb_idx_orb_idx = p1_orb_idx_orb_idx_orb[p1_orb_idx",
  "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n  \
    \      val res = List[String]()\n        for (i <- 0 until p1_orb.size) {\n  \
    \          for (j <- 0 until p2_orb.size) {\n                if (p1_orb.get(i)\
    \ < p2_orb.get(j)) {\n                    res = res.append(planets.get(i))\n \
    \               }\n            }\n        }\n        return res", "        var\
    \ p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n       \
    \ var planets = List[String]()\n        var p1_orbital_period = scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala",
  "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_index = p1.indexOf(\" \")\n        val p2_index = p2.indexOf(\"\
    \ \")\n        val p1_name = p1.substring(0, p1_index)\n        val p2_name =\
    \ p2.substring(0, p2_index)\n        val p1_orbital_period = p1.substring(p1_index\
    \ + 1)\n        val p2_orbital_period = p2.substring(p2_index + 1)\n        val\
    \ p1_orbital_period_int = _.toInt(p1_orbital_period)\n        val p2_orbital_period_int\
    \ = _.toInt(p2_orbital_period)\n        val p1_orbital_period_float = _.toFloat(p1_orbital_period)\n\
    \        val p2_orbital_period_float = _.toFloat(p2_orbital_period)\n        val\
    \ p1_orbital_period_float_int = _.toInt(p1_orbital_period_float)\n        val\
    \ p2_orbital_period_float_int = _.toInt(p2_orbital_period_float)\n        val\
    \ p1_orbital_period_float_float = _.toFloat(p1_orbital_period_float)\n       \
    \ val p2_orbital_period_float_float = _.toFloat(p2_orbital_period_float)\n   \
    \     val p1_orbital_period_float_float_int = _.toInt(p1_orbital_period_float_float)\n\
    \        val p2_orbital_period_float_float_int = _.toInt(p2_orbital_period_float_float)\n\
    \        val p1_orbital_period_float_float_float = _.toFloat(p1_orbital_period_float_float)\n\
    \        val p2_orbital_period_float_float_float = _.toFloat(p2_orbital_period_float_float)\n\
    \        val p1", "        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n\
    \        val p1_idx = p1.indexOf(\" \")\n        val p2_idx = p2.indexOf(\" \"\
    )\n        val p1_name = p1.substring(0, p1_idx)\n        val p2_name = p2.substring(0,\
    \ p2_idx)\n        val p1_orbital_period = p1.substring(p1_idx + 1)\n        val\
    \ p2_orbital_period = p2.substring(p2_idx + 1)\n        val p1_orbital_period_in_seconds\
    \ = _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period)\
    \ * _.toDouble(p1_orbital_period)\n        val p2_orbital_period_in_seconds =\
    \ _.toDouble(p2_orbital_period) * _.toDouble(p2_orbital_period) * _.toDouble(p2_orbital_period)\
    \ * _.toDouble(p2_orbital_period)\n        val p1_orbital_period_in_days = p1_orbital_period_in_seconds\
    \ / _.toDouble(86400)\n        val p2_orbital_period_in_days = p2_orbital_period_in_seconds\
    \ / _.toDouble(86400)\n        val p1_orbital_period_in_years = p1_orbital_period_in_days\
    \ / _.toDouble(365.25)\n        val p2_orbital_period_in_years = p2_orbital_period_in_days\
    \ / _.toDouble(365.25)\n        val p1_orbital_period_in_years_rounded = _.round(p1_orbital_period_in_years)\n\
    \        val p2_orbital_period_in_years_rounded = _.round(p2_orbital_period_in_years)\n\
    \        val p1_orbital_", "        var p1 = planet1.toUpperCase()\n        var\
    \ p2 = planet2.toUpperCase()\n        var p1_index = scala.collection.JavaConversions.asJavaCollection(p1.toUpperCase().indexOf(p2.toUpperCase())).toList().toArray(new\
    \ Integer[0])\n        var p2_index = scala.collection.JavaConversions.asJavaCollection(p2.toUpperCase().indexOf(p1.toUpperCase())).toList().toArray(new\
    \ Integer[0])\n        var p1_index_len = p1_index.length\n        var p2_index_len\
    \ = p2_index.length\n        var result = List[String]()\n        for (var i =\
    \ 0; i < p1_index_len; i++) {\n            for (var j = 0; j < p2_index_len; j++)\
    \ {\n                if (p1_index[i] > p2_index[j]) {\n                    result\
    \ = result.append(p1.substring(p1_index[i] - 1, p1_index[i]))\n              \
    \  } else if (p1_index[i] < p2_index[j]) {\n                    result = result.append(p2.substring(p2_index[j]\
    \ - 1, p2_index[j]))\n                } else {\n                    result = result.append(p1.substring(p1_index[i]\
    \ - 1, p1_index[i]))\n                    result = result.append(p2.substring(p2_index[j]\
    \ - 1, p2_index[j]))\n                }\n            }\n        }\n        return\
    \ result", "        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n  \
    \      val result = List[String]()\n        for (i <- 0 until p1_orb.size) {\n\
    \            for (j <- 0 until p2_orb.size) {\n                if (p1_orb.get(i)\
    \ < p2_orb.get(j)) {\n                    result = result.append(planets.get(i))\n\
    \                }\n            }\n        }\n        return result", "      \
    \  val planets = List(\n            \"Mercury\",\n            \"Venus\",\n   \
    \         \"Earth\",\n            \"Mars\",\n            \"Jupiter\",\n      \
    \      \"Saturn\",\n            \"Uranus\",\n            \"Neptune\"\n       \
    \ )\n        val p1 = planets.find(p -> p.equals(planet1))\n        val p2 = planets.find(p\
    \ -> p.equals(planet2))\n        val orbit1 = p1.getOrElse(0)\n        val orbit2\
    \ = p2.getOrElse(0)\n        val result = planets.filter(p -> orbit1 < orbit2\
    \ && orbit2 < orbit1).sortBy(p -> p.equals(planet1) ? -1 : 1).toList\n       \
    \ return result", "        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n\
    \        var p1_idx = _.indexOf(Planet, p1)\n        var p2_idx = _.indexOf(Planet,\
    \ p2)\n        var result = List[String]()\n        var i = 0\n        var j =\
    \ 0\n        while (i < p1_idx && j < p2_idx) {\n            if (Planet[i] < Planet[j])\
    \ {\n                result = result.append(Planet[i])\n                i = i\
    \ + 1\n            } else {\n                result = result.append(Planet[j])\n\
    \                j = j + 1\n            }\n        }\n        while (i < p1_idx)\
    \ {\n            result = result.append(Planet[i])\n            i = i + 1\n  \
    \      }\n        while (j < p2_idx) {\n            result = result.append(Planet[j])\n\
    \            j = j + 1\n        }\n        return result", "        val p1 = planet1.toUpperCase()\n\
    \        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n\
    \        val p2_idx = planets.indexOf(p2)\n        val result = scala.collection.mutable.ListBuffer[String]()\n\
    \        if (p1_idx < 0 || p2_idx < 0) {\n            return result.toList()\n\
    \        }\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n\
    \        val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n\
    \        if (p1_orb_idx < 0 || p2_orb_idx < 0) {\n            return result.toList()\n\
    \        }\n        val p1_orb_idx_next = p1_orb_idx + 1\n        val p2_orb_idx_next\
    \ = p2_orb_idx + 1\n        val p1_orb_idx_prev = p1_orb_idx - 1\n        val\
    \ p2_orb_idx_prev = p2_orb_idx - 1\n        if (p1_orb_idx_next < 0 || p2_orb_idx_next\
    \ < 0 || p1_orb_idx_prev < 0 || p2_orb_idx_prev < 0) {\n            return result.toList()\n\
    \        }\n        val p1_orb_idx_next_next = p1_orb_idx_next + 1\n        val\
    \ p2_orb_idx_next_next = p2_orb_idx_next + 1\n        val p1_orb_idx_prev_prev\
    \ = p1_orb_idx_prev - 1\n        val p2_orb_idx_prev_prev = p2_orb_idx_prev -\
    \ 1\n        if (p1_orb_idx_next_next < 0 || p2_orb_idx_next_next < 0 ||", " \
    \       val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n\
    \        val p1_index = scala.collection.JavaConversions.asScalaBuffer(p1).toList().indexOf(p1)\n\
    \        val p2_index = scala.collection.JavaConversions.asScalaBuffer(p2).toList().indexOf(p2)\n\
    \        val p1_orbital_period = scala.math.durations.Seconds(p1_index * scala.math.durations.Seconds(1))\n\
    \        val p2_orbital_period = scala.math.durations.Seconds(p2_index * scala.math.durations.Seconds(1))\n\
    \        val p1_orbital_period_diff = p1_orbital_period - p2_orbital_period\n\
    \        val p1_orbital_period_diff_in_seconds = p1_orbital_period_diff.toSeconds()\n\
    \        val p2_orbital_period_diff_in_seconds = p2_orbital_period_diff.toSeconds()\n\
    \        val p1_orbital_period_diff_in_minutes = p1_orbital_period_diff_in_seconds\
    \ / scala.math.durations.Minutes(1)\n        val p2_orbital_period_diff_in_minutes\
    \ = p2_orbital_period_diff_in_seconds / scala.math.durations.Minutes(1)\n    \
    \    val p1_orbital_period_diff_in_hours = p1_orbital_period_diff_in_minutes /\
    \ scala.math.durations.Hours(1)\n        val p2_orbital_period_diff_in_hours =\
    \ p2_orbital_period_diff_in_minutes / scala.math.durations.Hours(1)\n        val\
    \ p1_orbital_period_diff_in_days = p1_orbital_period_diff_in_hours / scala.math.durations.Days(1)\n\
    \        val p2_orbital_period_diff_in_days = p2_orbital_period_diff", "     \
    \   var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n \
    \       var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n\
    \        var result = List[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n\
    \            return result\n        }\n        var p1_orb = orbits[p1_idx]\n \
    \       var p2_orb = orbits[p2_idx]\n        var p1_orb_idx = p1_orb.indexOf(p1)\n\
    \        var p2_orb_idx = p2_orb.indexOf(p2)\n        var p1_orb_idx_next = p1_orb_idx\
    \ + 1\n        var p2_orb_idx_next = p2_orb_idx + 1\n        var p1_orb_idx_prev\
    \ = p1_orb_idx - 1\n        var p2_orb_idx_prev = p2_orb_idx - 1\n        var\
    \ p1_orb_idx_next_next = p1_orb_idx_next + 1\n        var p2_orb_idx_next_next\
    \ = p2_orb_idx_next + 1\n        var p1_orb_idx_prev_prev = p1_orb_idx_prev -\
    \ 1\n        var p2_orb_idx_prev_prev = p2_orb_idx_prev - 1\n        var p1_orb_idx_next_next_next\
    \ = p1_orb_idx_next_next + 1\n        var p2_orb_idx_next_next_next = p2_orb_idx_next_next\
    \ + 1\n        var p1_orb_idx_prev_prev_prev = p1_orb_idx_prev_prev - 1\n    \
    \    var p2_orb_idx_prev_prev_prev = p2_orb_idx_prev_prev - 1\n        var p1_orb_idx_next_next_next_next\
    \ = p1_orb_idx_", "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n  \
    \      val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n\
    \        val p1_orb_idx_idx = p1_orb_idx + 1\n        val p2_orb_idx_idx = p2_orb_idx\
    \ + 1\n        val p1_orb_idx_idx_idx = p1_orb_idx_idx + 1\n        val p2_orb_idx_idx_idx\
    \ = p2_orb_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx = p1_orb_idx_idx_idx\
    \ + 1\n        val p2_orb_idx_idx_idx_idx = p2_orb_idx_idx_idx + 1\n        val\
    \ p1_orb_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx_idx\
    \ = p2_orb_idx_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx_idx\
    \ + 1\n        val p2_orb_idx_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx_idx\
    \ + 1\n        val p1_orb_idx_idx_idx_idx_idx_idx_id", "        var planets =\
    \ List[String]()\n        var sun = new java.util.Vector[8]\n        sun[0] =\
    \ new java.util.Vector[8]\n        sun[1] = new java.util.Vector[8]\n        sun[2]\
    \ = new java.util.Vector[8]\n        sun[3] = new java.util.Vector[8]\n      \
    \  sun[4] = new java.util.Vector[8]\n        sun[5] = new java.util.Vector[8]\n\
    \        sun[6] = new java.util.Vector[8]\n        sun[7] = new java.util.Vector[8]\n\
    \        var sun_index = 0\n        var sun_index_1 = 0\n        var sun_index_2\
    \ = 0\n        var sun_index_3 = 0\n        var sun_index_4 = 0\n        var sun_index_5\
    \ = 0\n        var sun_index_6 = 0\n        var sun_index_7 = 0\n        var sun_index_8\
    \ = 0\n        var sun_index_9 = 0\n        var sun_index_10 = 0\n        var\
    \ sun_index_11 = 0\n        var sun_index_12 = 0\n        var sun_index_13 = 0\n\
    \        var sun_index_14 = 0\n        var sun_index_15 = 0\n        var sun_index_16\
    \ = 0\n        var sun_index_17 = 0\n        var sun_index_18 = 0\n        var\
    \ sun_index_19 = 0\n        var sun_index_20 = 0\n        var sun_index_21 = 0\n\
    \        var sun_index_22 = 0\n        var sun_index_23 = 0\n        var sun_index_24\
    \ = 0\n        var sun_index_25 = 0\n        var sun_index_26 = 0\n        var\
    \ sun_index_27 = 0\n        var sun_index_28 = 0\n        var sun_index_29 = 0\n\
    \        var sun_index_30 = 0\n        var sun_index_31 = 0\n        var sun_index_32\
    \ = 0\n        var sun_index_33 = 0\n        var sun_index_34 = 0\n        var\
    \ sun_index_35 = 0\n        var", "        var planets = scala.collection.JavaConversions.asJavaList(\n\
    \            scala.collection.JavaConversions.asScalaBuffer(\n               \
    \ scala.collection.mutable.Buffer.empty()\n            ).toList()\n        )\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n\
    \        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n\
    \        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n\
    \        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n\
    \        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n\
    \        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n\
    \        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n\
    \        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n\
    \        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n\
    \        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n\
    \        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n\
    \        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n\
    \        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n\
    \        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n\
    \        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n\
    \        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n\
    \        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n\
    \        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0",
  "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val result = scala.collection.mutable.ListBuffer[String]()\n        if\
    \ (p1_idx < 0 || p2_idx < 0) {\n            return result.toList()\n        }\n\
    \        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n  \
    \      if (p1_orb < p2_orb) {\n            return result.toList()\n        }\n\
    \        for (i <- p1_orb) {\n            if (i < p2_orb) {\n                result.append(planets[i])\n\
    \            }\n        }\n        return result.toList()", "        var planets\
    \ = List[String]()\n        var planet1_orbital_period = scala.math.durations.Seconds(\n\
    \            scala.math.durations.Seconds(\n                scala.math.durations.Seconds(\n\
    \                    scala.math.durations.Seconds(\n                        scala.math.durations.Seconds(\n\
    \                            scala.math.durations.Seconds(\n                 \
    \               scala.math.durations.Seconds(\n                              \
    \      scala.math.durations.Seconds(\n                                       \
    \ scala.math.durations.Seconds(\n                                            scala.math.durations.Seconds(\n\
    \                                                scala.math.durations.Seconds(\n\
    \                                                    scala.math.durations.Seconds(\n\
    \                                                        scala.math.durations.Seconds(\n\
    \                                                            scala.math.durations.Seconds(\n\
    \                                                                scala.math.durations.Seconds(\n\
    \                                                                    scala.math.durations.Seconds(\n\
    \                                                                        scala.math.durations.Seconds(\n\
    \                                                                            scala.math.durations.Seconds(\n\
    \                                                                            \
    \    scala.math.durations.Seconds(\n                                         \
    \                                           scala.math.durations.Seconds(\n  \
    \                                                                            \
    \          scala.math.durations.Seconds(\n                                   \
    \                                                         scala.math.durations.Seconds(\n\
    \                                                                            \
    \                    scala.math.durations.Seconds(\n                         \
    \                                                                           scala.math.durations.Seconds(\n\
    \                                                                            \
    \                            scala.math.durations.Seconds(\n                 \
    \                                                                            \
    \               scala.math.durations.Seconds(\n                              \
    \                                                                            \
    \      scala.math.durations.Seconds(\n                                       \
    \                                                                            \
    \ scala.math.durations.Seconds(\n                                            \
    \                                                                            scala.math.durations.Seconds(\n\
    \                                                                            \
    \                                                    scala.math.durations.Seconds(\n",
  "        var planets = List[String]()\n        var sun = new java.util.Vector[8]\n\
    \        sun[0] = new java.util.Vector[8]\n        sun[1] = new java.util.Vector[8]\n\
    \        sun[2] = new java.util.Vector[8]\n        sun[3] = new java.util.Vector[8]\n\
    \        sun[4] = new java.util.Vector[8]\n        sun[5] = new java.util.Vector[8]\n\
    \        sun[6] = new java.util.Vector[8]\n        sun[7] = new java.util.Vector[8]\n\
    \        var sun_index = 0\n        var planet_index = 0\n        var sun_planet_index\
    \ = 0\n        var sun_planet_index_2 = 0\n        var sun_planet_index_3 = 0\n\
    \        var sun_planet_index_4 = 0\n        var sun_planet_index_5 = 0\n    \
    \    var sun_planet_index_6 = 0\n        var sun_planet_index_7 = 0\n        var\
    \ sun_planet_index_8 = 0\n        var sun_planet_index_9 = 0\n        var sun_planet_index_10\
    \ = 0\n        var sun_planet_index_11 = 0\n        var sun_planet_index_12 =\
    \ 0\n        var sun_planet_index_13 = 0\n        var sun_planet_index_14 = 0\n\
    \        var sun_planet_index_15 = 0\n        var sun_planet_index_16 = 0\n  \
    \      var sun_planet_index_17 = 0\n        var sun_planet_index_18 = 0\n    \
    \    var sun_planet_index_19 = 0\n        var sun_planet_index_20 = 0\n      \
    \  var sun_planet_index_21 = 0\n        var sun_planet_index_22 = 0\n        var\
    \ sun_planet_index_23 = 0\n        var sun_planet_index_24 = 0\n        var sun_planet_index_25\
    \ = 0\n        var sun_planet_index_26 = 0\n        var sun_planet_index_27 =\
    \ 0\n        var sun_planet_index_28 = 0\n        var sun_planet_index_29 =",
  "        var planets = List[String]()\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name\
    \ = planet1\n        var planet2_name = planet2\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name\
    \ = planet1\n        var planet2_name = planet2\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name\
    \ = planet1\n        var planet2_name = planet2\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name\
    \ = planet1\n        var planet2_name = planet2\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name\
    \ = planet1\n        var planet2_name = planet2\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name\
    \ = planet1\n        var planet2_name = planet2\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name\
    \ = planet1\n        var planet2_name = planet2\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name\
    \ = planet1\n", "        var planets = List[String]()\n        var sun = new java.util.Date()\n\
    \        var sun_distance = scala.math.pow(scala.math.pow(sun.getTime(), 2), 1.5)\n\
    \        var planet1_distance = scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(sc",
  "        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n\
    \        var planets = List[String]()\n        var p1orb = scala.math.BigDecimal.valueOf(0)\n\
    \        var p2orb = scala.math.BigDecimal.valueOf(0)\n        var p1orb = scala.math.BigDecimal.valueOf(0)\n\
    \        var p2orb = scala.math.BigDecimal.valueOf(0)\n        var p1orb = scala.math.BigDecimal.valueOf(0)\n\
    \        var p2orb = scala.math.BigDecimal.valueOf(0)\n        var p1orb = scala.math.BigDecimal.valueOf(0)\n\
    \        var p2orb = scala.math.BigDecimal.valueOf(0)\n        var p1orb = scala.math.BigDecimal.valueOf(0)\n\
    \        var p2orb = scala.math.BigDecimal.valueOf(0)\n        var p1orb = scala.math.BigDecimal.valueOf(0)\n\
    \        var p2orb = scala.math.BigDecimal.valueOf(0)\n        var p1orb = scala.math.BigDecimal.valueOf(0)\n\
    \        var p2orb = scala.math.BigDecimal.valueOf(0)\n        var p1orb = scala.math.BigDecimal.valueOf(0)\n\
    \        var p2orb = scala.math.BigDecimal.valueOf(0)\n        var p1orb = scala.math.BigDecimal.valueOf(0)\n\
    \        var p2orb = scala.math.BigDecimal.valueOf(0)\n        var p1orb = scala.math.BigDecimal.valueOf(0)\n\
    \        var p2orb = scala.math.BigDecimal.valueOf(0)\n        var p1orb = scala.math.BigDecimal.valueOf(0)\n\
    \        var p2orb = scala.math.BigDecimal.valueOf(0)\n        var p1orb = scala.math.BigDecimal",
  "        var planet1_orbit = scala.math.BigDecimal.valueOf(0.0)\n        var planet2_orbit\
    \ = scala.math.BigDecimal.valueOf(0.0)\n        var planet1_name = planet1\n \
    \       var planet2_name = planet2\n        var planets = List[String]()\n   \
    \     var planets_between_orbit = List[String]()\n        var planets_between_name\
    \ = List[String]()\n        var planets_between_orbit_and_name = List[String]()\n\
    \        var planets_between_name_and_orbit = List[String]()\n        var planets_between_name_and_name\
    \ = List[String]()\n        var planets_between_orbit_and_name_and_name = List[String]()\n\
    \        var planets_between_name_and_orbit_and_name = List[String]()\n      \
    \  var planets_between_orbit_and_name_and_name_and_name = List[String]()\n   \
    \     var planets_between_name_and_orbit_and_name_and_name_and_name = List[String]()\n\
    \        var planets_between_orbit_and_name_and_name_and_name_and_name_and_name\
    \ = List[String]()\n        var planets_between_name_and_orbit_and_name_and_name_and_name_and_name_and_name\
    \ = List[String]()\n        var planets_between_orbit_and_name_and_name_and_name_and_name_and_name_and_name_and_name\
    \ = List[String]()\n        var planets_between_name_and_orbit_and_name_and_name_and_name_and_name_and_name_and_name_and_name\
    \ = List[String]()\n        var planets_between_orbit_and_name_and_name_and_name_and_name_and_name_and_name_and_name_and_name_and_name\
    \ = List[String]()\n        var planets_between_name_and_orbit_and_name_and_name_and_name_and_name_and_name_and_name_and_name_and_",
  "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val orbit_distance = scala.math.abs(p1_idx - p2_idx)\n        val orbit_distance_int\
    \ = orbit_distance.toInt\n        val orbit_distance_float = orbit_distance.toFloat\n\
    \        val orbit_distance_double = orbit_distance.toDouble\n        val orbit_distance_big_int\
    \ = orbit_distance.toBigInt\n        val orbit_distance_big_float = orbit_distance.toBigFloat\n\
    \        val orbit_distance_big_double = orbit_distance.toBigDouble\n        val\
    \ orbit_distance_big_big_int = orbit_distance.toBigBigInt\n        val orbit_distance_big_big_float\
    \ = orbit_distance.toBigBigFloat\n        val orbit_distance_big_big_double =\
    \ orbit_distance.toBigBigDouble\n        val orbit_distance_big_big_big_int =\
    \ orbit_distance.toBigBigBigInt\n        val orbit_distance_big_big_big_float\
    \ = orbit_distance.toBigBigBigFloat\n        val orbit_distance_big_big_big_double\
    \ = orbit_distance.toBigBigBigDouble\n        val orbit_distance_big_big_big_big_int\
    \ = orbit_distance.toBigBigBigBigInt\n        val orbit_distance_big_big_big_big_float\
    \ = orbit_distance.toBigBigBigBigFloat\n        val orbit_distance_big_big_big_big_double\
    \ = orbit_distance.toBigBigBigBigDouble\n        val orbit_distance_big_big_big_big_big_int\
    \ = orbit_distance.toBigBigBigBigBigInt\n        val orbit_distance_big_big_big_big_big_float\
    \ = orbit_distance.toBigBigBigBigBigFloat\n        val orbit_distance_big_big_big_big_big_double\
    \ = orbit_distance.toBigBigBigBigBigDouble\n        val orbit_distance_big_big_big_big_big_big_int\
    \ = orbit", '        var planet1_orbital_period = scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.p',
  "        var planets = scala.collection.mutable.ListBuffer[String]()\n        var\
    \ planet1_orbital_period = scala.math.BigDecimal.valueOf(0.2408467)\n        var\
    \ planet2_orbital_period = scala.math.BigDecimal.valueOf(0.615198)\n        var\
    \ planet1_orbital_radius = scala.math.BigDecimal.valueOf(0.387098)\n        var\
    \ planet2_orbital_radius = scala.math.BigDecimal.valueOf(0.723335)\n        var\
    \ planet1_orbital_period_in_days = planet1_orbital_period.div(scala.math.BigDecimal.valueOf(86400))\n\
    \        var planet2_orbital_period_in_days = planet2_orbital_period.div(scala.math.BigDecimal.valueOf(86400))\n\
    \        var planet1_orbital_radius_in_km = planet1_orbital_radius.div(scala.math.BigDecimal.valueOf(1000))\n\
    \        var planet2_orbital_radius_in_km = planet2_orbital_radius.div(scala.math.BigDecimal.valueOf(1000))\n\
    \        var planet1_orbital_period_in_years = planet1_orbital_period_in_days.div(scala.math.BigDecimal.valueOf(365.25))\n\
    \        var planet2_orbital_period_in_years = planet2_orbital_period_in_days.div(scala.math.BigDecimal.valueOf(365.25))\n\
    \        var planet1_orbital_radius_in_m = planet1_orbital_radius_in_km.div(scala.math.BigDecimal.valueOf(1000))\n\
    \        var planet2_orbital_radius_in_m = planet2_orbital_radius_in_km.div(scala.math.BigDecimal.valueOf(1000))\n\
    \        var planet1_orbital_period_in_years_squared = planet1_orbital_period_in_years.multiply(planet1_orbital_period_in_years",
  "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = p1.indexOf(\" \")\n        val p2_idx = p2.indexOf(\" \"\
    )\n        val p1_name = p1.substring(0, p1_idx)\n        val p2_name = p2.substring(0,\
    \ p2_idx)\n        val p1_orbital_period = p1.substring(p1_idx + 1)\n        val\
    \ p2_orbital_period = p2.substring(p2_idx + 1)\n        val p1_orbital_period_in_days\
    \ = _.toDouble(p1_orbital_period) / _.toDouble(\".0\")\n        val p2_orbital_period_in_days\
    \ = _.toDouble(p2_orbital_period) / _.toDouble(\".0\")\n        val p1_orbital_period_in_years\
    \ = p1_orbital_period_in_days / 365.25\n        val p2_orbital_period_in_years\
    \ = p2_orbital_period_in_days / 365.25\n        val p1_orbital_period_in_years_rounded\
    \ = _.round(p1_orbital_period_in_years)\n        val p2_orbital_period_in_years_rounded\
    \ = _.round(p2_orbital_period_in_years)\n        val p1_orbital_period_in_years_rounded_str\
    \ = _.mkString(p1_orbital_period_in_years_rounded)\n        val p2_orbital_period_in_years_rounded_str\
    \ = _.mkString(p2_orbital_period_in_years_rounded)\n        val p1_orbital_period_in_years_rounded_str_len\
    \ = _.length(p1_orbital_period_in_years_rounded_str)\n        val p2_orbital_period_in_years_rounded_str_len\
    \ = _.length(p2_orbital_period_in_years_rounded_str)\n", "        val p1 = planet1.toUpperCase()\n\
    \        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n\
    \        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n\
    \        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n\
    \        val p2_orb_idx = p2_orb.indexOf(p2)\n        val result = List[String]()\n\
    \        for (i <- 0 until p1_orb_idx) {\n            for (j <- 0 until p2_orb_idx)\
    \ {\n                if (p1_orb[i] == p2_orb[j]) {\n                    result\
    \ = result.append(p1_orb[i])\n                    break\n                }\n \
    \           }\n        }\n        return result", "        val p1 = planet1.toLowerCase()\n\
    \        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n\
    \        val p2_idx = planets.indexOf(p2)\n        val result = mutable.List[String]()\n\
    \        if (p1_idx < 0 || p2_idx < 0) {\n            return result\n        }\n\
    \        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n  \
    \      if (p1_orb > p2_orb) {\n            return result\n        }\n        for\
    \ (i <- 1 to p1_orb) {\n            val planet = planets[p1_idx + i]\n       \
    \     result.append(planet)\n        }\n        for (i <- 1 to p2_orb - p1_orb)\
    \ {\n            val planet = planets[p2_idx + i]\n            result.append(planet)\n\
    \        }\n        return result", "        val p1 = planet1.toLowerCase().trim()\n\
    \        val p2 = planet2.toLowerCase().trim()\n        val p1_idx = planets.indexOf(p1)\n\
    \        val p2_idx = planets.indexOf(p2)\n        val result = scala.collection.JavaConversions.seqAsJavaList(\n\
    \            scala.collection.JavaConversions.asScalaBuffer(\n               \
    \ scala.collection.mutable.Buffer(\n                    (p1_idx < p2_idx) ? planets.subList(p1_idx,\
    \ p2_idx) : planets.subList(p2_idx, p1_idx)\n                )\n            )\n\
    \        )\n        return result", "        var planets = List[String]()\n  \
    \      var planet1Orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2Orbit\
    \ = scala.math.BigDecimal.valueOf(0)\n        var planet1Distance = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2Distance = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToSun\
    \ = scala.math.BigDecimal.valueOf(0)\n        var planet2DistanceToSun = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet1DistanceToSunSquared = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2DistanceToSunSquared = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet1DistanceToSunCubed = scala.math.BigDecimal.valueOf(0)\n  \
    \      var planet2DistanceToSunCubed = scala.math.BigDecimal.valueOf(0)\n    \
    \    var planet1DistanceToSunQuartered = scala.math.BigDecimal.valueOf(0)\n  \
    \      var planet2DistanceToSunQuartered = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet1DistanceToSunQuintered = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2DistanceToSunQuintered = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet1DistanceToSunSextered = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2DistanceToSunSextered = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet1DistanceToSunSeptered = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2DistanceToSunSeptered = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet1DistanceToSunOctered = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2DistanceToSunOctered = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet1DistanceToSunEnnested = scala.", "        var planet1_ = planet1.toLowerCase()\n\
    \        var planet2_ = planet2.toLowerCase()\n        var planet1_ = planet1_.trim()\n\
    \        var planet2_ = planet2_.trim()\n        var planet1_ = planet1_.toLowerCase()\n\
    \        var planet2_ = planet2_.toLowerCase()\n        var planet1_ = planet1_.trim()\n\
    \        var planet2_ = planet2_.trim()\n        var planet1_ = planet1_.toLowerCase()\n\
    \        var planet2_ = planet2_.toLowerCase()\n        var planet1_ = planet1_.trim()\n\
    \        var planet2_ = planet2_.trim()\n        var planet1_ = planet1_.toLowerCase()\n\
    \        var planet2_ = planet2_.toLowerCase()\n        var planet1_ = planet1_.trim()\n\
    \        var planet2_ = planet2_.trim()\n        var planet1_ = planet1_.toLowerCase()\n\
    \        var planet2_ = planet2_.toLowerCase()\n        var planet1_ = planet1_.trim()\n\
    \        var planet2_ = planet2_.trim()\n        var planet1_ = planet1_.toLowerCase()\n\
    \        var planet2_ = planet2_.toLowerCase()\n        var planet1_ = planet1_.trim()\n\
    \        var planet2_ = planet2_.trim()\n        var planet1_ = planet1_.toLowerCase()\n\
    \        var planet2_ = planet2_.toLowerCase()\n        var planet1_ = planet1_.trim()\n\
    \        var planet2_ = planet2_.trim()\n        var planet1_ = planet1_.toLowerCase()\n\
    \        var planet2_ = planet2_.toLowerCase()\n        var planet1_ = planet1_.trim()\n\
    \        var planet2_ = planet2_.trim()\n        var planet1_ = planet1_.toLowerCase()\n\
    \        var planet2_ = planet2_.toLowerCase()\n        var planet1_ = planet1_.trim()\n\
    \        var planet2_ = planet2_.trim()\n        var planet1_ = planet1_.toLowerCase()\n\
    \        var planet2_ = planet2_.toLowerCase", "        val p1 = planet1.toLowerCase()\n\
    \        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n\
    \        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n\
    \        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n\
    \        val p2_orb_idx = p2_orb.indexOf(p2)\n        val result = List[String]()\n\
    \        if (p1_orb_idx < p2_orb_idx) {\n            for (i <- p1_orb_idx + 1\
    \ to p2_orb_idx) {\n                result = append(result, planets[p1_orb[i]])\n\
    \            }\n        } else {\n            for (i <- p2_orb_idx + 1 to p1_orb_idx)\
    \ {\n                result = append(result, planets[p2_orb[i]])\n           \
    \ }\n        }\n        return result", "        val p1 = planet1.toLowerCase()\n\
    \        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n\
    \        val p2_idx = planets.indexOf(p2)\n        val result = scala.collection.JavaConversions.seqAsJavaList(\n\
    \            scala.collection.JavaConversions.asScalaBuffer(\n               \
    \ scala.collection.mutable.Buffer(\n                    scala.math.min(p1_idx,\
    \ p2_idx),\n                    scala.math.max(p1_idx, p2_idx)\n             \
    \   )\n            )\n        )\n        return result", "        var p1 = planet1.toLowerCase()\n\
    \        var p2 = planet2.toLowerCase()\n        var p1_idx = planets.indexOf(p1)\n\
    \        var p2_idx = planets.indexOf(p2)\n        var result = List[String]()\n\
    \        if (p1_idx < 0 || p2_idx < 0) {\n            return result\n        }\n\
    \        var p1_orb = orbits[p1_idx]\n        var p2_orb = orbits[p2_idx]\n  \
    \      var p1_orb_idx = p1_orb.indexOf(p1)\n        var p2_orb_idx = p2_orb.indexOf(p2)\n\
    \        var p1_orb_idx_next = p1_orb_idx + 1\n        var p2_orb_idx_next = p2_orb_idx\
    \ + 1\n        var p1_orb_idx_prev = p1_orb_idx - 1\n        var p2_orb_idx_prev\
    \ = p2_orb_idx - 1\n        var p1_orb_idx_next_next = p1_orb_idx_next + 1\n \
    \       var p2_orb_idx_next_next = p2_orb_idx_next + 1\n        var p1_orb_idx_prev_prev\
    \ = p1_orb_idx_prev - 1\n        var p2_orb_idx_prev_prev = p2_orb_idx_prev -\
    \ 1\n        var p1_orb_idx_next_next_next = p1_orb_idx_next_next + 1\n      \
    \  var p2_orb_idx_next_next_next = p2_orb_idx_next_next + 1\n        var p1_orb_idx_prev_prev_prev\
    \ = p1_orb_idx_prev_prev - 1\n        var p2_orb_idx_prev_prev_prev = p2_orb_idx_prev_prev\
    \ - 1\n        var p1_orb_idx_next_next_next_next = p1_orb_idx_", "        var\
    \ planets = List[String]()\n        var sun = new java.util.Date()\n        var\
    \ sun_x = sun.getTime()\n        var sun_y = sun.getYear()\n        var sun_m\
    \ = sun.getMonth()\n        var sun_d = sun.getDate()\n        var sun_h = sun.getHours()\n\
    \        var sun_min = sun.getMinutes()\n        var sun_sec = sun.getSeconds()\n\
    \        var sun_ms = sun.getTime()\n        var sun_dif = sun_x - sun_y * 365\
    \ * 24 * 60 * 60 * 1000\n        var sun_dif_h = sun_dif / (60 * 60 * 1000)\n\
    \        var sun_dif_m = sun_dif / (60 * 1000)\n        var sun_dif_s = sun_dif\
    \ / 1000\n        var sun_dif_ms = sun_dif / 1\n        var sun_dif_hms = sun_dif_h\
    \ + sun_dif_m + sun_dif_s + sun_dif_ms\n        var sun_dif_hms_d = sun_dif_hms\
    \ / 24\n        var sun_dif_hms_h = sun_dif_hms / 60\n        var sun_dif_hms_m\
    \ = sun_dif_hms / 60\n        var sun_dif_hms_s = sun_dif_hms / 60\n        var\
    \ sun_dif_hms_ms = sun_dif_hms / 1000\n        var sun_dif_hms_ms_d = sun_dif_hms_ms\
    \ / 24\n        var sun_dif_hms_ms_h = sun_dif_hms_ms / 60\n        var sun_dif_hms_ms_m\
    \ = sun_dif_hms_ms / 60\n        var sun_dif_hms_ms_s = sun_dif_hms_ms / 60\n\
    \        var sun_dif_hms_ms_ms = sun_dif_hms_ms / 1000\n        var sun_dif_hms_ms_ms_d",
  "        var planets = List[String]()\n        var sun = new java.util.Vector[8]\n\
    \        sun[0] = new java.util.Vector[8]\n        sun[1] = new java.util.Vector[8]\n\
    \        sun[2] = new java.util.Vector[8]\n        sun[3] = new java.util.Vector[8]\n\
    \        sun[4] = new java.util.Vector[8]\n        sun[5] = new java.util.Vector[8]\n\
    \        sun[6] = new java.util.Vector[8]\n        sun[7] = new java.util.Vector[8]\n\
    \        var sun_index = 0\n        var planet_index = 0\n        var sun_planet_index\
    \ = 0\n        var sun_planet_index_temp = 0\n        var sun_planet_index_temp_temp\
    \ = 0\n        var sun_planet_index_temp_temp_temp = 0\n        var sun_planet_index_temp_temp_temp_temp\
    \ = 0\n        var sun_planet_index_temp_temp_temp_temp_temp = 0\n        var\
    \ sun_planet_index_temp_temp_temp_temp_temp_temp = 0\n        var sun_planet_index_temp_temp_temp_temp_temp_temp_temp\
    \ = 0\n        var sun_planet_index_temp_temp_temp_temp_temp_temp_temp_temp =\
    \ 0\n        var sun_planet_index_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0\n        var sun_planet_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0\n        var sun_planet_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0\n        var sun_planet_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0\n        var sun_planet_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0\n        var sun_planet_index_temp_temp_temp_temp_temp_temp_temp_", "  \
    \      val planets = List[String](\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val planet1Index\
    \ = planets.indexOf(planet1)\n        val planet2Index = planets.indexOf(planet2)\n\
    \        val result = List[String]()\n        if (planet1Index < 0 || planet2Index\
    \ < 0) {\n            return result\n        }\n        val planet1Orbit = scala.math.BigDecimal.valueOf(planets.get(planet1Index).toString())\n\
    \        val planet2Orbit = scala.math.BigDecimal.valueOf(planets.get(planet2Index).toString())\n\
    \        val planet1OrbitDegree = planet1Orbit.divide(scala.math.BigDecimal.valueOf(scala.math.Math.PI),\
    \ scala.math.BigDecimal.valueOf(10))\n        val planet2OrbitDegree = planet2Orbit.divide(scala.math.BigDecimal.valueOf(scala.math.Math.PI),\
    \ scala.math.BigDecimal.valueOf(10))\n        val planet1OrbitDegreeDiff = planet1OrbitDegree.subtract(planet2OrbitDegree)\n\
    \        val planet1OrbitDegreeDiffAbs = planet1OrbitDegreeDiff.abs()\n      \
    \  val planet1OrbitDegreeDiffAbsHalf = planet1OrbitDegreeDiffAbs.divide(scala.math.BigDecimal.valueOf(2))\n\
    \        val planet1OrbitDegreeDiffAbsHalfInt = planet1OrbitDegreeDiffAbsHalf.intValue()\n\
    \        val planet1OrbitDegreeDiffAbsHalfIntHalf = planet1OrbitDegreeDiffAbsHalfInt.divide(scala.math.BigDecimal.valueOf(2))\n\
    \        val planet1OrbitDegreeDiffAbsHalfIntHalfInt = planet1OrbitDegreeDiffAbsHalfIntHalf.intValue()\n\
    \        val planet1OrbitDegreeDiffAbsHalfIntHalfIntHalf = planet1OrbitDegreeDiffAbsHalfIntHalfInt.",
  "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val orbit1 = orbits[p1_idx]\n        val orbit2 = orbits[p2_idx]\n  \
    \      val orbit_intersect = orbit1.intersect(orbit2)\n        val result = planets.filter(p\
    \ -> orbit_intersect.contains(p))\n        result.sort(Comparator.comparing(p\
    \ -> orbit_intersect.distance(p)))\n        return result", "        var planets\
    \ = List[String]()\n        var sun = new java.util.Vector[8]\n        sun[0]\
    \ = new java.util.Vector[8]\n        sun[1] = new java.util.Vector[8]\n      \
    \  sun[2] = new java.util.Vector[8]\n        sun[3] = new java.util.Vector[8]\n\
    \        sun[4] = new java.util.Vector[8]\n        sun[5] = new java.util.Vector[8]\n\
    \        sun[6] = new java.util.Vector[8]\n        sun[7] = new java.util.Vector[8]\n\
    \        var sun_index = 0\n        var planet_index = 0\n        var sun_planet_index\
    \ = 0\n        var sun_planet_index_2 = 0\n        var sun_planet_index_3 = 0\n\
    \        var sun_planet_index_4 = 0\n        var sun_planet_index_5 = 0\n    \
    \    var sun_planet_index_6 = 0\n        var sun_planet_index_7 = 0\n        var\
    \ sun_planet_index_8 = 0\n        var sun_planet_index_9 = 0\n        var sun_planet_index_10\
    \ = 0\n        var sun_planet_index_11 = 0\n        var sun_planet_index_12 =\
    \ 0\n        var sun_planet_index_13 = 0\n        var sun_planet_index_14 = 0\n\
    \        var sun_planet_index_15 = 0\n        var sun_planet_index_16 = 0\n  \
    \      var sun_planet_index_17 = 0\n        var sun_planet_index_18 = 0\n    \
    \    var sun_planet_index_19 = 0\n        var sun_planet_index_20 = 0\n      \
    \  var sun_planet_index_21 = 0\n        var sun_planet_index_22 = 0\n        var\
    \ sun_planet_index_23 = 0\n        var sun_planet_index_24 = 0\n        var sun_planet_index_25\
    \ = 0\n        var sun_planet_index_26 = 0\n        var sun_planet_index_27 =\
    \ 0\n        var sun_planet_index_28 = 0\n        var sun_planet_index_29 =",
  "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_index = scala.collection.JavaConversions.asScalaBuffer(p1).toIndexedSeq().toList()\n\
    \        val p2_index = scala.collection.JavaConversions.asScalaBuffer(p2).toIndexedSeq().toList()\n\
    \        val p1_orbit = p1_index.map(i => p1_index.get(i).toString()).toList()\n\
    \        val p2_orbit = p2_index.map(i => p2_index.get(i).toString()).toList()\n\
    \        val p1_orbit_index = scala.collection.JavaConversions.asScalaBuffer(p1_orbit).toIndexedSeq().toList()\n\
    \        val p2_orbit_index = scala.collection.JavaConversions.asScalaBuffer(p2_orbit).toIndexedSeq().toList()\n\
    \        val p1_orbit_index_sorted = p1_orbit_index.sort(java.util.Comparator.comparing(i\
    \ -> p1_orbit.get(i)))\n        val p2_orbit_index_sorted = p2_orbit_index.sort(java.util.Comparator.comparing(i\
    \ -> p2_orbit.get(i)))\n        val p1_orbit_index_sorted_list = p1_orbit_index_sorted.toList()\n\
    \        val p2_orbit_index_sorted_list = p2_orbit_index_sorted.toList()\n   \
    \     val p1_orbit_index_sorted_list_diff = p1_orbit_index_sorted_list.diff(p2_orbit_index_sorted_list)\n\
    \        val p2_orbit_index_sorted_list_diff = p2_orbit_index_sorted_list.diff(p1_orbit_index_sorted_list)\n\
    \        val p1_orbit_index_sorted_list_diff_sorted = p1_orbit_index_sorted_list_diff.sort(java.util.Comparator.comparing(i\
    \ -> p", "        var planets = List[String]()\n        var planet1_orbital_period\
    \ = scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math",
  "        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val result = scala.collection.mutable.ListBuffer[String]()\n        for\
    \ (i <- 0 until planets.size - 1) {\n            val planet = planets[i]\n   \
    \         val planet_idx = planets.indexOf(planet)\n            if (planet_idx\
    \ < p1_idx && planet_idx < p2_idx) {\n                result.append(planet)\n\
    \            }\n        }\n        return result.toList", "        val p1 = planet1.toUpperCase()\n\
    \        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n\
    \        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n\
    \        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n\
    \        val p2_orb_idx = p2_orb.indexOf(p2)\n        val p1_orb_idx_idx = p1_orb_idx\
    \ + 1\n        val p2_orb_idx_idx = p2_orb_idx + 1\n        val result = List[String]()\n\
    \        for (i <- p1_orb_idx_idx to p2_orb_idx_idx) {\n            result = result.append(planets[i])\n\
    \        }\n        return result", "        val p1 = planet1.toUpperCase()\n\
    \        val p2 = planet2.toUpperCase()\n        val p1_idx = p1.indexOf(\" \"\
    )\n        val p2_idx = p2.indexOf(\" \")\n        val p1_name = p1.substring(0,\
    \ p1_idx)\n        val p2_name = p2.substring(0, p2_idx)\n        val p1_orb =\
    \ scala.math.BigDecimal.valueOf(Double.parseDouble(p1.substring(p1_idx + 1)))\n\
    \        val p2_orb = scala.math.BigDecimal.valueOf(Double.parseDouble(p2.substring(p2_idx\
    \ + 1)))\n        val p1_orb_idx = p1_orb.toBigDecimal().divide(scala.math.BigDecimal.valueOf(Math.PI),\
    \ scala.math.BigDecimal.ROUND_HALF_UP).intValue()\n        val p2_orb_idx = p2_orb.toBigDecimal().divide(scala.math.BigDecimal.valueOf(Math.PI),\
    \ scala.math.BigDecimal.ROUND_HALF_UP).intValue()\n        val p1_orb_idx_diff\
    \ = p1_orb_idx - p2_orb_idx\n        val p2_orb_idx_diff = p2_orb_idx - p1_orb_idx\n\
    \        val p1_orb_idx_diff_abs = p1_orb_idx_diff.abs()\n        val p2_orb_idx_diff_abs\
    \ = p2_orb_idx_diff.abs()\n        val p1_orb_idx_diff_abs_abs = p1_orb_idx_diff_abs.abs()\n\
    \        val p2_orb_idx_diff_abs_abs = p2_orb_idx_diff_abs.abs()\n        val\
    \ p1_orb_idx_diff_abs_abs_abs = p1_orb_idx_diff_abs_abs.abs()", "        var p1\
    \ = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var\
    \ planets = List[String]()\n        if (p1 == \"mercury\" && p2 == \"venus\")\
    \ {\n            planets = List(\"venus\")\n        } else if (p1 == \"mercury\"\
    \ && p2 == \"earth\") {\n            planets = List(\"earth\")\n        } else\
    \ if (p1 == \"mercury\" && p2 == \"mars\") {\n            planets = List(\"mars\"\
    )\n        } else if (p1 == \"mercury\" && p2 == \"jupiter\") {\n            planets\
    \ = List(\"jupiter\")\n        } else if (p1 == \"mercury\" && p2 == \"saturn\"\
    ) {\n            planets = List(\"saturn\")\n        } else if (p1 == \"mercury\"\
    \ && p2 == \"uranus\") {\n            planets = List(\"uranus\")\n        } else\
    \ if (p1 == \"mercury\" && p2 == \"neptune\") {\n            planets = List(\"\
    neptune\")\n        } else if (p1 == \"venus\" && p2 == \"earth\") {\n       \
    \     planets = List(\"earth\")\n        } else if (p1 == \"venus\" && p2 == \"\
    mars\") {\n            planets = List(\"mars\")\n        } else if (p1 == \"venus\"\
    \ && p2 == \"jupiter\") {\n            planets = List(\"jupiter\")\n        }\
    \ else if (p1 == \"venus\" && p2 == \"saturn\") {\n            planets = List(\"\
    saturn\")\n        } else if (p1 == \"venus\" && p2 == \"uranus\") {\n       \
    \     planets = List(\"uranus\")\n        } else if (p1 == \"venus\" && p2 ==\
    \ \"neptune\") {\n            planets = List(\"neptune\")\n        } else if (p1\
    \ == \"earth\" && p2 == \"mars\") {\n            planets = List(\"mars\")\n  \
    \      } else if (p1 == \"earth\" && p2 == \"jupiter\") {\n            planets",
  "        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n\
    \        var planets = List[String]()\n        var p1_orb = scala.math.BigDecimal.valueOf(0)\n\
    \        var p2_orb = scala.math.BigDecimal.valueOf(0)\n        var p1_orb_m =\
    \ scala.math.BigDecimal.valueOf(0)\n        var p2_orb_m = scala.math.BigDecimal.valueOf(0)\n\
    \        var p1_orb_m_m = scala.math.BigDecimal.valueOf(0)\n        var p2_orb_m_m\
    \ = scala.math.BigDecimal.valueOf(0)\n        var p1_orb_m_m_m = scala.math.BigDecimal.valueOf(0)\n\
    \        var p2_orb_m_m_m = scala.math.BigDecimal.valueOf(0)\n        var p1_orb_m_m_m_m\
    \ = scala.math.BigDecimal.valueOf(0)\n        var p2_orb_m_m_m_m = scala.math.BigDecimal.valueOf(0)\n\
    \        var p1_orb_m_m_m_m_m = scala.math.BigDecimal.valueOf(0)\n        var\
    \ p2_orb_m_m_m_m_m = scala.math.BigDecimal.valueOf(0)\n        var p1_orb_m_m_m_m_m_m\
    \ = scala.math.BigDecimal.valueOf(0)\n        var p2_orb_m_m_m_m_m_m = scala.math.BigDecimal.valueOf(0)\n\
    \        var p1_orb_m_m_m_m_m_m_m = scala.math.BigDecimal.valueOf(0)\n       \
    \ var p2_orb_m_m_m_m_m_m_m = scala.math.BigDecimal.valueOf(0)\n        var p1_orb_m_m_m",
  "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val orbit_interval = scala.math.min(p1_idx, p2_idx)\n        val orbit_diff\
    \ = p1_idx - p2_idx\n        val orbit_diff_abs = orbit_diff.abs()\n        val\
    \ orbit_diff_sign = orbit_diff.signum()\n        val orbit_diff_abs_sign = orbit_diff_abs.signum()\n\
    \        val orbit_diff_abs_sign_pow = orbit_diff_abs_sign.pow(2)\n        val\
    \ orbit_diff_abs_sign_pow_abs = orbit_diff_abs_sign_pow.abs()\n        val orbit_diff_abs_sign_pow_abs_sign\
    \ = orbit_diff_abs_sign_pow_abs.signum()\n        val orbit_diff_abs_sign_pow_abs_sign_pow\
    \ = orbit_diff_abs_sign_pow_abs_sign.pow(2)\n        val orbit_diff_abs_sign_pow_abs_sign_pow_abs\
    \ = orbit_diff_abs_sign_pow_abs_sign_pow.abs()\n        val orbit_diff_abs_sign_pow_abs_sign_pow_abs_sign\
    \ = orbit_diff_abs_sign_pow_abs_sign_pow_abs.signum()\n        val orbit_diff_abs_sign_pow_abs_sign_pow_abs_sign_pow\
    \ = orbit_diff_abs_sign_pow_abs_sign_pow_abs_sign.pow(2)\n        val orbit_diff_abs_sign_pow_abs_sign_pow_abs_sign_pow_abs\
    \ = orbit_diff_abs_sign_pow_abs_sign_pow_abs_sign_pow_abs.abs()\n        val orbit_diff_abs_sign_pow_abs_sign_pow_",
  "        var p1 = planet1.toUpperCase()\n        var p2 = planet2.toUpperCase()\n\
    \        var p1_index = p1.indexOf(\" \")\n        var p2_index = p2.indexOf(\"\
    \ \")\n        var p1_name = p1.substring(0, p1_index)\n        var p2_name =\
    \ p2.substring(0, p2_index)\n        var p1_orbital_period = p1.substring(p1_index\
    \ + 1)\n        var p2_orbital_period = p2.substring(p2_index + 1)\n        var\
    \ p1_orbital_period_in_seconds = _.toDouble(p1_orbital_period)\n        var p2_orbital_period_in_seconds\
    \ = _.toDouble(p2_orbital_period)\n        var p1_orbital_period_in_minutes =\
    \ _.toDouble(p1_orbital_period) / 60\n        var p2_orbital_period_in_minutes\
    \ = _.toDouble(p2_orbital_period) / 60\n        var p1_orbital_period_in_hours\
    \ = _.toDouble(p1_orbital_period) / 3600\n        var p2_orbital_period_in_hours\
    \ = _.toDouble(p2_orbital_period) / 3600\n        var p1_orbital_period_in_days\
    \ = _.toDouble(p1_orbital_period) / 86400\n        var p2_orbital_period_in_days\
    \ = _.toDouble(p2_orbital_period) / 86400\n        var p1_orbital_period_in_years\
    \ = _.toDouble(p1_orbital_period) / 31536000\n        var p2_orbital_period_in_years\
    \ = _.toDouble(p2_orbital_period) / 31536000\n        var p1_orbital_period_in_seconds_per_year\
    \ = p1_orbital_period_in_seconds / p1_orbital_period_in_years\n        var p2_orbital_period_in_",
  "        var planet1_orbital_period = scala.math.durations.Seconds(2.4e9)\n    \
    \    var planet2_orbital_period = scala.math.durations.Seconds(4.8e9)\n      \
    \  var planet1_orbital_period_in_seconds = planet1_orbital_period.toSeconds\n\
    \        var planet2_orbital_period_in_seconds = planet2_orbital_period.toSeconds\n\
    \        var planet1_orbital_period_in_days = planet1_orbital_period_in_seconds\
    \ / scala.math.durations.Days(1).toSeconds\n        var planet2_orbital_period_in_days\
    \ = planet2_orbital_period_in_seconds / scala.math.durations.Days(1).toSeconds\n\
    \        var planet1_orbital_period_in_years = planet1_orbital_period_in_days\
    \ / scala.math.durations.Years(1).toDays\n        var planet2_orbital_period_in_years\
    \ = planet2_orbital_period_in_days / scala.math.durations.Years(1).toDays\n  \
    \      var planet1_orbital_period_in_centuries = planet1_orbital_period_in_days\
    \ / scala.math.durations.Centuries(1).toDays\n        var planet2_orbital_period_in_centuries\
    \ = planet2_orbital_period_in_days / scala.math.durations.Centuries(1).toDays\n\
    \        var planet1_orbital_period_in_millennia = planet1_orbital_period_in_days\
    \ / scala.math.durations.Millennia(1).toDays\n        var planet2_orbital_period_in_millennia\
    \ = planet2_orbital_period_in_days / scala.math.durations.Millennia(1).toDays\n\
    \        var planet1_orbital_period_in_seconds_to_millennia = planet1_orbital_period_in_millennia\
    \ / scala.math.durations.Seconds(1).toMilliseconds\n        var planet2_orbital_period_",
  "        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n\
    \        val p1_index = p1.indexOf(\" \")\n        val p2_index = p2.indexOf(\"\
    \ \")\n        val p1_name = p1.substring(0, p1_index)\n        val p2_name =\
    \ p2.substring(0, p2_index)\n        val p1_orbital_period = p1.substring(p1_index\
    \ + 1)\n        val p2_orbital_period = p2.substring(p2_index + 1)\n        val\
    \ p1_orbital_period_in_seconds = p1_orbital_period.toDouble / 365.25\n       \
    \ val p2_orbital_period_in_seconds = p2_orbital_period.toDouble / 365.25\n   \
    \     val p1_orbital_period_in_days = p1_orbital_period_in_seconds / 86400\n \
    \       val p2_orbital_period_in_days = p2_orbital_period_in_seconds / 86400\n\
    \        val p1_orbital_period_in_years = p1_orbital_period_in_days / 365\n  \
    \      val p2_orbital_period_in_years = p2_orbital_period_in_days / 365\n    \
    \    val p1_orbital_period_in_years_rounded = p1_orbital_period_in_years.round(2)\n\
    \        val p2_orbital_period_in_years_rounded = p2_orbital_period_in_years.round(2)\n\
    \        val p1_orbital_period_in_years_rounded_rounded = p1_orbital_period_in_years_rounded.round(3)\n\
    \        val p2_orbital_period_in_years_rounded_rounded = p2_orbital_period_in_years_rounded.round(3)\n\
    \        val p1_orbital_period_in_years_rounded_rounded_rounded = p1_orbital_period_in_years_rounded_rounded.round(4)\n\
    \        val p2_orbital", "        val p1 = planet1.toUpperCase()\n        val\
    \ p2 = planet2.toUpperCase()\n        val p1_idx = p1.indexOf(\" \")\n       \
    \ val p2_idx = p2.indexOf(\" \")\n        val p1_name = p1.substring(0, p1_idx)\n\
    \        val p2_name = p2.substring(0, p2_idx)\n        val p1_orb = p1.substring(p1_idx\
    \ + 1)\n        val p2_orb = p2.substring(p2_idx + 1)\n        val p1_orb_idx\
    \ = p1_orb.indexOf(\" \")\n        val p2_orb_idx = p2_orb.indexOf(\" \")\n  \
    \      val p1_orb_orb = p1_orb.substring(0, p1_orb_idx)\n        val p2_orb_orb\
    \ = p2_orb.substring(0, p2_orb_idx)\n        val p1_orb_orb_idx = p1_orb_orb.indexOf(\"\
    \ \")\n        val p2_orb_orb_idx = p2_orb_orb.indexOf(\" \")\n        val p1_orb_orb_orb\
    \ = p1_orb_orb.substring(0, p1_orb_orb_idx)\n        val p2_orb_orb_orb = p2_orb_orb.substring(0,\
    \ p2_orb_orb_idx)\n        val p1_orb_orb_orb_idx = p1_orb_orb_orb.indexOf(\"\
    \ \")\n        val p2_orb_orb_orb_idx = p2_orb_orb_orb.indexOf(\" \")\n      \
    \  val p1_orb_orb_orb_orb = p1_orb_orb_orb.substring(0, p1_orb_orb_orb_idx)\n\
    \        val p2_orb_orb_orb_orb = p2_orb_orb_orb.substring(0, p2_orb_orb_orb_idx)\n\
    \        val p1_orb_orb", "        val p1 = planet1.toLowerCase()\n        val\
    \ p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n     \
    \   val p2_idx = planets.indexOf(p2)\n        val orbit1 = orbits[p1_idx]\n  \
    \      val orbit2 = orbits[p2_idx]\n        val orbit_intersect = orbit1.intersect(orbit2)\n\
    \        val result = planets.filter(p -> orbit_intersect.contains(p))\n     \
    \   result.sort((p1, p2) -> orbit1.distance(p1) - orbit2.distance(p2))\n     \
    \   return result", "        var p1 = planet1.toLowerCase()\n        var p2 =\
    \ planet2.toLowerCase()\n        var planets = List[String]()\n        var i =\
    \ 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m =\
    \ 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q =\
    \ 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u =\
    \ 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y =\
    \ 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c =\
    \ 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g =\
    \ 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o =\
    \ 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s =\
    \ 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w =\
    \ 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a =\
    \ 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e =\
    \ 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i =\
    \ 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m =\
    \ 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q =\
    \ 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u =\
    \ 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y =\
    \ 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c =\
    \ 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g =\
    \ 0\n        var h = 0\n        var i = 0\n        var", "        val p1 = planet1.toUpperCase()\n\
    \        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n\
    \        val p2_idx = planets.indexOf(p2)\n        val result = List.empty[String]\n\
    \        if (p1_idx < 0 || p2_idx < 0) {\n            return result\n        }\n\
    \        if (p1_idx > p2_idx) {\n            return result\n        }\n      \
    \  for (i <- p1_idx) {\n            for (j <- p2_idx) {\n                if (j\
    \ < i) {\n                    result = result.append(planets[i])\n           \
    \     }\n            }\n        }\n        return result", "        val p1 = planet1.toUpperCase()\n\
    \        val p2 = planet2.toUpperCase()\n        val p1_idx = scala.collection.JavaConversions.asScalaBuffer(p1).toList().indexOf(p1)\n\
    \        val p2_idx = scala.collection.JavaConversions.asScalaBuffer(p2).toList().indexOf(p2)\n\
    \        val p1_orb = scala.math.BigDecimal.valueOf(p1_idx).div(scala.math.BigDecimal.valueOf(8))\n\
    \        val p2_orb = scala.math.BigDecimal.valueOf(p2_idx).div(scala.math.BigDecimal.valueOf(8))\n\
    \        val p1_orb_next = scala.math.BigDecimal.valueOf(p1_idx + 1).div(scala.math.BigDecimal.valueOf(8))\n\
    \        val p2_orb_next = scala.math.BigDecimal.valueOf(p2_idx + 1).div(scala.math.BigDecimal.valueOf(8))\n\
    \        val p1_orb_next_next = scala.math.BigDecimal.valueOf(p1_idx + 2).div(scala.math.BigDecimal.valueOf(8))\n\
    \        val p2_orb_next_next = scala.math.BigDecimal.valueOf(p2_idx + 2).div(scala.math.BigDecimal.valueOf(8))\n\
    \        val p1_orb_next_next_next = scala.math.BigDecimal.valueOf(p1_idx + 3).div(scala.math.BigDecimal.valueOf(8))\n\
    \        val p2_orb_next_next_next = scala.math.BigDecimal.valueOf(p2_idx + 3).div(scala.math.BigDecimal.valueOf(8))\n\
    \        val p1_orb_next_next_next_next = scala.math.BigDecimal.valueOf(p1_idx\
    \ + 4).div(scala.math.", "        val p1 = planet1.toLowerCase()\n        val\
    \ p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n     \
    \   val p2_idx = planets.indexOf(p2)\n        val result = scala.collection.mutable.ListBuffer[String]()\n\
    \        if (p1_idx < 0 || p2_idx < 0) {\n            return result.toList()\n\
    \        }\n        if (p1_idx > p2_idx) {\n            val tmp = p1_idx\n   \
    \         p1_idx = p2_idx\n            p2_idx = tmp\n        }\n        for (i\
    \ <- p1_idx) {\n            for (j <- p2_idx) {\n                if (j > i) {\n\
    \                    result.append(planets[i])\n                    break\n  \
    \              }\n            }\n        }\n        return result.toList()", " \
    \       val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n  \
    \      val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n\
    \        val p1_orb_idx_next = p1_orb_idx + 1\n        val p2_orb_idx_next = p2_orb_idx\
    \ + 1\n        val p1_orb_idx_prev = p1_orb_idx - 1\n        val p2_orb_idx_prev\
    \ = p2_orb_idx - 1\n        val p1_orb_idx_next_next = p1_orb_idx_next + 1\n \
    \       val p2_orb_idx_next_next = p2_orb_idx_next + 1\n        val p1_orb_idx_prev_prev\
    \ = p1_orb_idx_prev - 1\n        val p2_orb_idx_prev_prev = p2_orb_idx_prev -\
    \ 1\n        val p1_orb_idx_next_next_next = p1_orb_idx_next_next + 1\n      \
    \  val p2_orb_idx_next_next_next = p2_orb_idx_next_next + 1\n        val p1_orb_idx_prev_prev_prev\
    \ = p1_orb_idx_prev_prev - 1\n        val p2_orb_idx_prev_prev_prev = p2_orb_idx_prev_prev\
    \ - 1\n        val p1_orb_idx_next_next_next_next = p1_orb_idx_next_next_next\
    \ + 1\n        val p2_orb_idx_next_next_next_next = p2_orb_idx_next_next_", " \
    \       val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n  \
    \      val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n\
    \        val p1_orb_idx_next = p1_orb_idx + 1\n        val p2_orb_idx_next = p2_orb_idx\
    \ + 1\n        val p1_orb_idx_prev = p1_orb_idx - 1\n        val p2_orb_idx_prev\
    \ = p2_orb_idx - 1\n        val p1_orb_idx_next_next = p1_orb_idx_next + 1\n \
    \       val p2_orb_idx_next_next = p2_orb_idx_next + 1\n        val p1_orb_idx_prev_prev\
    \ = p1_orb_idx_prev - 1\n        val p2_orb_idx_prev_prev = p2_orb_idx_prev -\
    \ 1\n        val p1_orb_idx_next_next_next = p1_orb_idx_next_next + 1\n      \
    \  val p2_orb_idx_next_next_next = p2_orb_idx_next_next + 1\n        val p1_orb_idx_prev_prev_prev\
    \ = p1_orb_idx_prev_prev - 1\n        val p2_orb_idx_prev_prev_prev = p2_orb_idx_prev_prev\
    \ - 1\n        val p1_orb_idx_next_next_next_next = p1_orb_idx_next_next_next\
    \ + 1\n        val p2_orb_idx_next_next_next_next = p2_orb_idx_next_next_", " \
    \       val planets = List[String](\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val planet1Index\
    \ = planets.indexOf(planet1)\n        val planet2Index = planets.indexOf(planet2)\n\
    \        val result = List[String]()\n        for (i <- 0 until planets.size -\
    \ 1) {\n            val planet = planets[i]\n            val orbit = planet.toLowerCase()\n\
    \            val planet1Orbit = planet1.toLowerCase()\n            val planet2Orbit\
    \ = planet2.toLowerCase()\n            if (orbit.startsWith(planet1Orbit) && orbit.endsWith(planet2Orbit))\
    \ {\n                result = append(result, planet)\n            }\n        }\n\
    \        return result", "        val p1 = planet1.toLowerCase()\n        val\
    \ p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n     \
    \   val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n  \
    \      val p2_orb = orbits[p2_idx]\n        val res = if (p1_orb < p2_orb) {\n\
    \            List[String]()\n        } else if (p1_orb > p2_orb) {\n         \
    \   List[String](planets.toSeq().filter(p -> p < p1).toSeq().toList())\n     \
    \   } else {\n            List[String](planets.toSeq().filter(p -> p < p1).toSeq().toList()\
    \ +\n                         planets.toSeq().filter(p -> p < p2).toSeq().toList())\n\
    \        }\n        return res", "        val p1 = planet1.toLowerCase()\n   \
    \     val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n\
    \        val p2_idx = planets.indexOf(p2)\n        val result = scala.collection.mutable.ListBuffer[String]()\n\
    \        if (p1_idx < 0 || p2_idx < 0) {\n            return result.toList()\n\
    \        }\n        if (p1_idx > p2_idx) {\n            val tmp = p1_idx\n   \
    \         p1_idx = p2_idx\n            p2_idx = tmp\n        }\n        for (i\
    \ <- p1_idx) {\n            for (j <- p2_idx) {\n                if (i < j) {\n\
    \                    result.append(planets[i])\n                }\n          \
    \  }\n        }\n        return result.toList()", "        var planets = List[String]()\n\
    \        var planet1_orbital_period = scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math",
  "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val result = scala.collection.mutable.ListBuffer[String]()\n        for\
    \ (i <- 0 until planets.size - 1) {\n            val planet = planets[i]\n   \
    \         val planet_idx = planets.indexOf(planet)\n            if (planet_idx\
    \ < p1_idx && planet_idx > p2_idx) {\n                result.append(planet)\n\
    \            }\n        }\n        return result.toList", "        val p1 = planet1.toUpperCase()\n\
    \        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n\
    \        val p2_idx = planets.indexOf(p2)\n        val result = scala.collection.mutable.ListBuffer[String]()\n\
    \        if (p1_idx < 0 || p2_idx < 0) {\n            return result.toList()\n\
    \        }\n        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n\
    \        if (p1_orb > p2_orb) {\n            return result.toList()\n        }\n\
    \        for (i <- p1_orb) {\n            for (j <- p2_orb) {\n              \
    \  if (i < j) {\n                    result.append(planets[i])\n             \
    \   }\n            }\n        }\n        return result.toList()", "        val\
    \ planets = scala.collection.JavaConversions.seqAsJavaList(\n            scala.collection.JavaConversions.asScalaBuffer(\n\
    \                scala.collection.mutable.Buffer.empty()\n            ).toList()\n\
    \        )\n        val planet1_idx = planets.indexOf(planet1)\n        val planet2_idx\
    \ = planets.indexOf(planet2)\n        val planet1_orbit = scala.math.BigDecimal(planets.get(planet1_idx).toString())\n\
    \        val planet2_orbit = scala.math.BigDecimal(planets.get(planet2_idx).toString())\n\
    \        val planet1_orbit_diff = planet1_orbit.subtract(planet2_orbit)\n    \
    \    val planet1_orbit_diff_abs = planet1_orbit_diff.abs()\n        val planet1_orbit_diff_abs_div\
    \ = planet1_orbit_diff_abs.divide(scala.math.BigDecimal(2))\n        val planet1_orbit_diff_abs_div_floor\
    \ = planet1_orbit_diff_abs_div.floor()\n        val planet1_orbit_diff_abs_div_floor_int\
    \ = planet1_orbit_diff_abs_div_floor.intValue()\n        val planet1_orbit_diff_abs_div_floor_int_div\
    \ = planet1_orbit_diff_abs_div_floor_int.divide(scala.math.BigDecimal(2))\n  \
    \      val planet1_orbit_diff_abs_div_floor_int_div_floor = planet1_orbit_diff_abs_div_floor_int_div.floor()\n\
    \        val planet1_orbit_diff_abs_div_floor_int_div_floor_int = planet1_orbit_diff_abs_div_floor_int_div_floor.intValue()\n\
    \        val planet1_orbit_diff_abs_div_floor_int_div_floor_int_div = planet1_orbit_diff_abs_div_floor_int_div_floor_int.divide(scala.math.BigDecimal(2))\n\
    \        val planet1_orbit_diff_abs_div_floor_int", "        val p1 = planet1.toLowerCase()\n\
    \        val p2 = planet2.toLowerCase()\n        val p1_index = p1.indexOf(\"\
    \ \")\n        val p2_index = p2.indexOf(\" \")\n        val p1_name = p1.substring(0,\
    \ p1_index)\n        val p2_name = p2.substring(0, p2_index)\n        val p1_orbital_period\
    \ = p1.substring(p1_index + 1)\n        val p2_orbital_period = p2.substring(p2_index\
    \ + 1)\n        val p1_orbital_period_in_seconds = _.toDouble(p1_orbital_period)\n\
    \        val p2_orbital_period_in_seconds = _.toDouble(p2_orbital_period)\n  \
    \      val p1_orbital_period_in_minutes = p1_orbital_period_in_seconds / 60\n\
    \        val p2_orbital_period_in_minutes = p2_orbital_period_in_seconds / 60\n\
    \        val p1_orbital_period_in_hours = p1_orbital_period_in_minutes / 60\n\
    \        val p2_orbital_period_in_hours = p2_orbital_period_in_minutes / 60\n\
    \        val p1_orbital_period_in_days = p1_orbital_period_in_hours / 24\n   \
    \     val p2_orbital_period_in_days = p2_orbital_period_in_hours / 24\n      \
    \  val p1_orbital_period_in_years = p1_orbital_period_in_days / 365\n        val\
    \ p2_orbital_period_in_years = p2_orbital_period_in_days / 365\n        val p1_orbital_period_in_centuries\
    \ = p1_orbital_period_in_years / 100\n        val p2_orbital_period_in_centuries\
    \ = p2_orbital_period_in_years / 100\n        val p1_orbital_period_in_millennia\
    \ = p1_orbital_", "        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n\
    \        var planets = List[String]()\n        var p1_orb = scala.math.BigDecimal.valueOf(0)\n\
    \        var p2_orb = scala.math.BigDecimal.valueOf(0)\n        var p1_orb_d =\
    \ scala.math.BigDecimal.valueOf(0)\n        var p2_orb_d = scala.math.BigDecimal.valueOf(0)\n\
    \        var p1_orb_d_d = scala.math.BigDecimal.valueOf(0)\n        var p2_orb_d_d\
    \ = scala.math.BigDecimal.valueOf(0)\n        var p1_orb_d_d_d = scala.math.BigDecimal.valueOf(0)\n\
    \        var p2_orb_d_d_d = scala.math.BigDecimal.valueOf(0)\n        var p1_orb_d_d_d_d\
    \ = scala.math.BigDecimal.valueOf(0)\n        var p2_orb_d_d_d_d = scala.math.BigDecimal.valueOf(0)\n\
    \        var p1_orb_d_d_d_d_d = scala.math.BigDecimal.valueOf(0)\n        var\
    \ p2_orb_d_d_d_d_d = scala.math.BigDecimal.valueOf(0)\n        var p1_orb_d_d_d_d_d_d\
    \ = scala.math.BigDecimal.valueOf(0)\n        var p2_orb_d_d_d_d_d_d = scala.math.BigDecimal.valueOf(0)\n\
    \        var p1_orb_d_d_d_d_d_d_d = scala.math.BigDecimal.valueOf(0)\n       \
    \ var p2_orb_d_d_d_d_d_d_d = scala.math.BigDecimal.valueOf(0)\n        var p1_orb_d_d_d",
  "        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n\
    \        val p1_idx = p1.indexOf(\" \")\n        val p2_idx = p2.indexOf(\" \"\
    )\n        val p1_name = p1.substring(0, p1_idx)\n        val p2_name = p2.substring(0,\
    \ p2_idx)\n        val p1_orb = p1.substring(p1_idx + 1)\n        val p2_orb =\
    \ p2.substring(p2_idx + 1)\n        val p1_orb_num = _.toInt(p1_orb)\n       \
    \ val p2_orb_num = _.toInt(p2_orb)\n        val p1_orb_diff = p1_orb_num - p2_orb_num\n\
    \        val p2_orb_diff = p2_orb_num - p1_orb_num\n        val p1_orb_diff_abs\
    \ = Math.abs(p1_orb_diff)\n        val p2_orb_diff_abs = Math.abs(p2_orb_diff)\n\
    \        val p1_orb_diff_abs_abs = Math.abs(p1_orb_diff_abs)\n        val p2_orb_diff_abs_abs\
    \ = Math.abs(p2_orb_diff_abs)\n        val p1_orb_diff_abs_abs_abs = Math.abs(p1_orb_diff_abs_abs)\n\
    \        val p2_orb_diff_abs_abs_abs = Math.abs(p2_orb_diff_abs_abs)\n       \
    \ val p1_orb_diff_abs_abs_abs_abs = Math.abs(p1_orb_diff_abs_abs_abs)\n      \
    \  val p2_orb_diff_abs_abs_abs_abs = Math.abs(p2_orb_diff_abs_abs_abs)\n     \
    \   val p1_orb_diff_abs_abs_abs_abs_abs = Math.abs(p1_orb_diff_abs_abs_abs_abs)\n\
    \        val p2_", "        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n\
    \        val p1_index = scala.collection.JavaConversions.asScalaBuffer(p1).toList().indexOf(p1)\n\
    \        val p2_index = scala.collection.JavaConversions.asScalaBuffer(p2).toList().indexOf(p2)\n\
    \        val p1_orbital_period = scala.math.BigDecimal.valueOf(p1_index).divide(scala.math.BigDecimal.valueOf(2),\
    \ scala.math.BigDecimal.valueOf(10))\n        val p2_orbital_period = scala.math.BigDecimal.valueOf(p2_index).divide(scala.math.BigDecimal.valueOf(2),\
    \ scala.math.BigDecimal.valueOf(10))\n        val p1_orbital_period_in_days =\
    \ p1_orbital_period.divide(scala.math.BigDecimal.valueOf(365.25), scala.math.BigDecimal.valueOf(10))\n\
    \        val p2_orbital_period_in_days = p2_orbital_period.divide(scala.math.BigDecimal.valueOf(365.25),\
    \ scala.math.BigDecimal.valueOf(10))\n        val p1_orbital_period_in_years =\
    \ p1_orbital_period.divide(scala.math.BigDecimal.valueOf(365.25), scala.math.BigDecimal.valueOf(10))\n\
    \        val p2_orbital_period_in_years = p2_orbital_period.divide(scala.math.BigDecimal.valueOf(365.25),\
    \ scala.math.BigDecimal.valueOf(10))\n        val p1_orbital_period_in_seconds\
    \ = p1_orbital_period_in_days.multiply(scala.math.BigDecimal.valueOf(86400))\n\
    \        val p2_orbital_period_in_seconds = p2_orbital_period_in_days.multip",
  "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val result = scala.collection.mutable.ListBuffer[String]()\n        if\
    \ (p1_idx < 0 || p2_idx < 0) {\n            return result.toList()\n        }\n\
    \        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n  \
    \      if (p1_orb < p2_orb) {\n            return result.toList()\n        }\n\
    \        for (i <- p1_orb) {\n            if (i < p2_orb) {\n                result.append(planets[i])\n\
    \            }\n        }\n        return result.toList()", "        val p1 =\
    \ planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx\
    \ = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val\
    \ result = scala.collection.mutable.ListBuffer[String]()\n        if (p1_idx <\
    \ 0 || p2_idx < 0) {\n            return result.toList()\n        }\n        val\
    \ p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx\
    \ = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n        val\
    \ p1_orb_idx_next = p1_orb_idx + 1\n        val p2_orb_idx_next = p2_orb_idx +\
    \ 1\n        if (p1_orb_idx_next >= p1_orb.size()) {\n            return result.toList()\n\
    \        }\n        if (p2_orb_idx_next >= p2_orb.size()) {\n            return\
    \ result.toList()\n        }\n        val p1_orb_next = p1_orb.get(p1_orb_idx_next)\n\
    \        val p2_orb_next = p2_orb.get(p2_orb_idx_next)\n        if (p1_orb_next.equals(p2_orb_next))\
    \ {\n            result.append(p1_orb_next)\n            result.append(p2_orb_next)\n\
    \            return result.toList()\n        }\n        val p1_orb_next_idx =\
    \ p1_orb_next.indexOf(p1)\n        val p2_orb_next_idx = p2_orb_next.indexOf(p2)\n\
    \        val p1_orb_next_idx_next = p1_orb_next_idx + 1\n        val p2_orb_next_idx_next\
    \ = p2_orb_next_id", "        val p1 = planet1.toLowerCase()\n        val p2 =\
    \ planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n        val\
    \ p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n        val\
    \ p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n     \
    \   val p2_orb_idx = p2_orb.indexOf(p2)\n        val p1_orb_idx_idx = p1_orb_idx\
    \ + 1\n        val p2_orb_idx_idx = p2_orb_idx + 1\n        val p1_orb_idx_idx_idx\
    \ = p1_orb_idx_idx + 1\n        val p2_orb_idx_idx_idx = p2_orb_idx_idx + 1\n\
    \        val p1_orb_idx_idx_idx_idx = p1_orb_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx\
    \ = p2_orb_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx\
    \ + 1\n        val p2_orb_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx + 1\n \
    \       val p1_orb_idx_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx_idx + 1\n\
    \        val p2_orb_idx_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx_idx + 1\n\
    \        val p1_orb_idx_idx_idx_idx_idx_idx_id", "        var planets = List[String]()\n\
    \        var planet1_orbital_period = scala.math.durations.Seconds(2.4e9)\n  \
    \      var planet2_orbital_period = scala.math.durations.Seconds(4.8e9)\n    \
    \    var planet1_orbital_period_in_seconds = planet1_orbital_period.toSeconds()\n\
    \        var planet2_orbital_period_in_seconds = planet2_orbital_period.toSeconds()\n\
    \        var planet1_orbital_period_in_minutes = planet1_orbital_period_in_seconds\
    \ / 60\n        var planet2_orbital_period_in_minutes = planet2_orbital_period_in_seconds\
    \ / 60\n        var planet1_orbital_period_in_hours = planet1_orbital_period_in_minutes\
    \ / 60\n        var planet2_orbital_period_in_hours = planet2_orbital_period_in_minutes\
    \ / 60\n        var planet1_orbital_period_in_days = planet1_orbital_period_in_hours\
    \ / 24\n        var planet2_orbital_period_in_days = planet2_orbital_period_in_hours\
    \ / 24\n        var planet1_orbital_period_in_years = planet1_orbital_period_in_days\
    \ / 365\n        var planet2_orbital_period_in_years = planet2_orbital_period_in_days\
    \ / 365\n        var planet1_orbital_period_in_centuries = planet1_orbital_period_in_years\
    \ / 100\n        var planet2_orbital_period_in_centuries = planet2_orbital_period_in_years\
    \ / 100\n        var planet1_orbital_period_in_millennia = planet1_orbital_period_in_centuries\
    \ / 1000\n        var planet2_orbital_period_in_millennia = planet2_orbital_period_in_centuries\
    \ / 1000\n        var planet1_orbital_period_in_seconds_diff = planet1_orbital_period_in_seconds\
    \ - planet2_orbital_period_in_seconds\n        var planet2", "        val p1 =\
    \ planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n        val p1_idx\
    \ = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n        val\
    \ result = scala.collection.JavaConversions.seqAsJavaList(\n            scala.collection.JavaConversions.asScalaBuffer(\n\
    \                scala.collection.mutable.Buffer.range(p1_idx, p2_idx + 1)\n \
    \           ).toList()\n        )\n        result.sort(Comparator.comparing(String::toLowerCase))\n\
    \        return result", "        val p1 = planet1.toLowerCase()\n        val\
    \ p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n     \
    \   val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n  \
    \      val p2_orb = orbits[p2_idx]\n        val result = List[String]()\n    \
    \    for (i <- 0 until p1_orb.size) {\n            for (j <- 0 until p2_orb.size)\
    \ {\n                if (p1_orb.get(i) < p2_orb.get(j)) {\n                  \
    \  result = result.append(planets[i])\n                    break\n           \
    \     }\n            }\n        }\n        return result", "        var planets\
    \ = List[String]()\n        var planet1_orbital_period = scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math",
  "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val result = List[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n\
    \            return result\n        }\n        val p1_orb = orbits[p1_idx]\n \
    \       val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n\
    \        val p2_orb_idx = p2_orb.indexOf(p2)\n        val p1_orb_idx_next = p1_orb_idx\
    \ + 1\n        val p2_orb_idx_next = p2_orb_idx + 1\n        val p1_orb_idx_prev\
    \ = p1_orb_idx - 1\n        val p2_orb_idx_prev = p2_orb_idx - 1\n        val\
    \ p1_orb_idx_next_next = p1_orb_idx_next + 1\n        val p2_orb_idx_next_next\
    \ = p2_orb_idx_next + 1\n        val p1_orb_idx_prev_prev = p1_orb_idx_prev -\
    \ 1\n        val p2_orb_idx_prev_prev = p2_orb_idx_prev - 1\n        val p1_orb_idx_next_prev\
    \ = p1_orb_idx_next - 1\n        val p2_orb_idx_next_prev = p2_orb_idx_next -\
    \ 1\n        val p1_orb_idx_prev_next = p1_orb_idx_prev + 1\n        val p2_orb_idx_prev_next\
    \ = p2_orb_idx_prev + 1\n        val p1_orb_idx_next_next_next = p1_orb_idx_next_next\
    \ + 1\n        val p2_orb_idx_next_", "        var planets = scala.collection.JavaConversions.asJavaList(\n\
    \            scala.collection.JavaConversions.asScalaBuffer(\n               \
    \ scala.collection.mutable.Buffer.empty()\n            ).toList()\n        )\n\
    \        var planet1_idx = planets.indexOf(planet1)\n        var planet2_idx =\
    \ planets.indexOf(planet2)\n        if (planet1_idx < 0 || planet2_idx < 0) {\n\
    \            return scala.collection.JavaConversions.asJavaList(\n           \
    \     scala.collection.JavaConversions.asScalaBuffer(\n                    scala.collection.mutable.Buffer.empty()\n\
    \                ).toList()\n            )\n        }\n        var planet1_orbital_period\
    \ = scala.math.durations.Duration(\n            scala.math.durations.Years(1)\n\
    \        ).toSeconds()\n        var planet2_orbital_period = scala.math.durations.Duration(\n\
    \            scala.math.durations.Years(1)\n        ).toSeconds()\n        var\
    \ planet1_orbital_period_diff = planet1_orbital_period - planet2_orbital_period\n\
    \        var planet2_orbital_period_diff = planet2_orbital_period - planet1_orbital_period\n\
    \        var planet1_orbital_period_diff_abs = Math.abs(planet1_orbital_period_diff)\n\
    \        var planet2_orbital_period_diff_abs = Math.abs(planet2_orbital_period_diff)\n\
    \        var planet1_orbital_period_diff_abs_div_planet2_orbital_period_diff_abs\
    \ = planet1_orbital_period_diff_abs / planet2_orbital_period_diff_abs\n      \
    \  var planet1_orbital_period_diff_abs_div_planet2_orbital_period_diff_abs_floor\
    \ = Math.floor(planet1_orbital_period_diff_abs_div_planet2_orbital_period_diff_abs)\n\
    \        var planet1_orbital_period_diff_abs_div_planet2_orbital_period_diff_abs_ceil\
    \ =", "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n  \
    \      val result = List[String]()\n        for (i <- 1 to p1_orb) {\n       \
    \     for (j <- 1 to p2_orb) {\n                if (p1_orb < p2_orb) {\n     \
    \               if (p1_orb <= i && i <= p2_orb) {\n                        result\
    \ = result + planets[i]\n                    }\n                } else {\n   \
    \                 if (p2_orb <= i && i <= p1_orb) {\n                        result\
    \ = result + planets[i]\n                    }\n                }\n          \
    \  }\n        }\n        return result", "        var planets = List[String]()\n\
    \        var sun = new java.util.Vector[1]\n        sun[0] = new java.util.Vector[1]\n\
    \        sun[0][0] = new java.util.Vector[1]\n        sun[0][0][0] = new java.util.Vector[1]\n\
    \        sun[0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0]\
    \ = new java.util.Vector[1]\n        sun[0][0][0][0][0][0] = new java.util.Vector[1]\n\
    \        sun[0][0][0][0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0]\
    \ = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0][0] = new java.util.Vector[1]\n\
    \        sun[0][0][0][0][0][0][0][0][0][0] = new java.util.Vector[1]\n       \
    \ sun[0][0][0][0][0][0][0][0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0][0][0][0][0]\
    \ = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0][0][0][0][0][0]\
    \ = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0][0][0][0][0][0][0]\
    \ = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]\
    \ = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]\
    \ = new java", "        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n\
    \        var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n\
    \        var result = List[String]()\n        for (i <- 1 to planets.size - 1)\
    \ {\n            var p = planets[i]\n            var p_idx = planets.indexOf(p)\n\
    \            if (p_idx < p1_idx && p_idx > p2_idx) {\n                result =\
    \ append(result, p)\n            }\n        }\n        return result", "     \
    \   val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n \
    \       val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n  \
    \      val result = scala.collection.mutable.ListBuffer[String]()\n        for\
    \ (i <- 0 until planets.size - 1) {\n            val p = planets[i]\n        \
    \    if (p.equals(p1) || p.equals(p2)) continue\n            if (p.compareTo(p1)\
    \ < 0 && p.compareTo(p2) > 0) {\n                result.append(p)\n          \
    \  }\n        }\n        return result.toList", "        val planets = List[String](\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val planet1Index = planets.indexOf(planet1)\n        val\
    \ planet2Index = planets.indexOf(planet2)\n        val result = List[String]()\n\
    \        for (i <- 0 until planet1Index) {\n            for (j <- 0 until planet2Index)\
    \ {\n                if (planets[i] < planets[j]) {\n                    result\
    \ = result.append(planets[i])\n                }\n            }\n        }\n \
    \       return result", "        val p1 = planet1.toUpperCase()\n        val p2\
    \ = planet2.toUpperCase()\n        val p1_index = p1.indexOf(\" \")\n        val\
    \ p2_index = p2.indexOf(\" \")\n        val p1_name = p1.substring(0, p1_index)\n\
    \        val p2_name = p2.substring(0, p2_index)\n        val p1_orbital_period\
    \ = p1.substring(p1_index + 1)\n        val p2_orbital_period = p2.substring(p2_index\
    \ + 1)\n        val p1_orbital_period_in_seconds = _.toDouble(p1_orbital_period)\
    \ * _.toDouble(p1_orbital_period_in_seconds)\n        val p2_orbital_period_in_seconds\
    \ = _.toDouble(p2_orbital_period) * _.toDouble(p2_orbital_period_in_seconds)\n\
    \        val p1_orbital_period_in_minutes = _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period_in_minutes)\n\
    \        val p2_orbital_period_in_minutes = _.toDouble(p2_orbital_period) * _.toDouble(p2_orbital_period_in_minutes)\n\
    \        val p1_orbital_period_in_hours = _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period_in_hours)\n\
    \        val p2_orbital_period_in_hours = _.toDouble(p2_orbital_period) * _.toDouble(p2_orbital_period_in_hours)\n\
    \        val p1_orbital_period_in_days = _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period_in_days)\n\
    \        val p2_orbital_period_in_days = _.toDouble(p2_orbital_period) * _.toDouble(p2_",
  "        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n\
    \        val p1_idx = _.indexOf(Planet.values(), p1)\n        val p2_idx = _.indexOf(Planet.values(),\
    \ p2)\n        val result = _.zip(Planet.values(), _.range(p1_idx, p2_idx + 1)).map(e\
    \ => e._1.toString()).toList\n        return result", "        val p1 = planet1.toUpperCase()\n\
    \        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n\
    \        val p2_idx = planets.indexOf(p2)\n        val result = scala.collection.mutable.ListBuffer[String]()\n\
    \        if (p1_idx < 0 || p2_idx < 0) {\n            return result.toList()\n\
    \        }\n        for (i <- 0 until planets.size - 1) {\n            val planet\
    \ = planets[i]\n            if (planet == p1 || planet == p2) {\n            \
    \    continue\n            }\n            if (planet < p1 && planet < p2) {\n\
    \                result.append(planet)\n            } else if (planet > p1 &&\
    \ planet > p2) {\n                break\n            } else {\n              \
    \  result.append(planet)\n            }\n        }\n        return result.toList()",
  "        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n\
    \        var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n\
    \        var result = List[String]()\n        for (i <- 1 to planets.size - 1)\
    \ {\n            var planet = planets[i]\n            var planet_idx = planets.indexOf(planet)\n\
    \            if (planet_idx < p1_idx && planet_idx > p2_idx) {\n             \
    \   result = result.append(planet)\n            }\n        }\n        return result",
  "        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n\
    \        val p1_index = p1.indexOf(\" \")\n        val p2_index = p2.indexOf(\"\
    \ \")\n        val p1_name = p1.substring(0, p1_index)\n        val p2_name =\
    \ p2.substring(0, p2_index)\n        val p1_orbital_period = p1.substring(p1_index\
    \ + 1)\n        val p2_orbital_period = p2.substring(p2_index + 1)\n        val\
    \ p1_orbital_period_in_seconds = _.toDouble(p1_orbital_period)\n        val p2_orbital_period_in_seconds\
    \ = _.toDouble(p2_orbital_period)\n        val p1_orbital_period_in_minutes =\
    \ p1_orbital_period_in_seconds / 60\n        val p2_orbital_period_in_minutes\
    \ = p2_orbital_period_in_seconds / 60\n        val p1_orbital_period_in_hours\
    \ = p1_orbital_period_in_minutes / 60\n        val p2_orbital_period_in_hours\
    \ = p2_orbital_period_in_minutes / 60\n        val p1_orbital_period_in_days =\
    \ p1_orbital_period_in_hours / 24\n        val p2_orbital_period_in_days = p2_orbital_period_in_hours\
    \ / 24\n        val p1_orbital_period_in_years = p1_orbital_period_in_days / 365\n\
    \        val p2_orbital_period_in_years = p2_orbital_period_in_days / 365\n  \
    \      val p1_orbital_period_in_seconds_per_year = p1_orbital_period_in_seconds\
    \ / p1_orbital_period_in_years\n        val p2_orbital_period_in_seconds_per_year\
    \ = p2_orbital_period_in_seconds / p2_orbital_", "        var planets = List[String]()\n\
    \        var sun = new java.util.Vector[8]\n        sun[0] = new java.util.Vector[8]\n\
    \        sun[1] = new java.util.Vector[8]\n        sun[2] = new java.util.Vector[8]\n\
    \        sun[3] = new java.util.Vector[8]\n        sun[4] = new java.util.Vector[8]\n\
    \        sun[5] = new java.util.Vector[8]\n        sun[6] = new java.util.Vector[8]\n\
    \        sun[7] = new java.util.Vector[8]\n        sun[0][0] = new java.util.Vector[8]\n\
    \        sun[0][1] = new java.util.Vector[8]\n        sun[0][2] = new java.util.Vector[8]\n\
    \        sun[0][3] = new java.util.Vector[8]\n        sun[0][4] = new java.util.Vector[8]\n\
    \        sun[0][5] = new java.util.Vector[8]\n        sun[0][6] = new java.util.Vector[8]\n\
    \        sun[0][7] = new java.util.Vector[8]\n        sun[1][0] = new java.util.Vector[8]\n\
    \        sun[1][1] = new java.util.Vector[8]\n        sun[1][2] = new java.util.Vector[8]\n\
    \        sun[1][3] = new java.util.Vector[8]\n        sun[1][4] = new java.util.Vector[8]\n\
    \        sun[1][5] = new java.util.Vector[8]\n        sun[1][6] = new java.util.Vector[8]\n\
    \        sun[1][7] = new java.util.Vector[8]\n        sun[2][0] = new java.util.Vector[8]\n\
    \        sun[2][1] = new java.util.Vector[8]\n        sun[2][2] = new java.util.Vector[8]\n\
    \        sun[2][3] = new java.util.Vector[8]\n", "        var planet1_ = planet1\n\
    \        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_\
    \ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n\
    \        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_\
    \ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n\
    \        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_\
    \ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n\
    \        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_\
    \ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n\
    \        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_\
    \ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n\
    \        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_\
    \ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n\
    \        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_\
    \ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n\
    \        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_\
    \ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n\
    \        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_\
    \ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n\
    \        var planet1_ = planet1\n        var planet2_ = planet2\n        var planet1_\
    \ = planet1\n        var planet2_ = planet2\n        var planet1_ = planet1\n\
    \        var planet2_ = planet2\n        var planet1_ = planet1\n        var planet2_\
    \ = planet2\n        var planet1_ = planet1\n        var planet2_ = planet2\n\
    \        var planet1_ = planet1", "        val p1 = planet1.toUpperCase()\n  \
    \      val p2 = planet2.toUpperCase()\n        val p1_index = p1.indexOf(\" \"\
    )\n        val p2_index = p2.indexOf(\" \")\n        val p1_name = p1.substring(0,\
    \ p1_index)\n        val p2_name = p2.substring(0, p2_index)\n        val p1_orbital_period\
    \ = p1.substring(p1_index + 1)\n        val p2_orbital_period = p2.substring(p2_index\
    \ + 1)\n        val p1_orbital_period_in_seconds = _.toDouble(p1_orbital_period)\
    \ * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period)\n\
    \        val p2_orbital_period_in_seconds = _.toDouble(p2_orbital_period) * _.toDouble(p2_orbital_period)\
    \ * _.toDouble(p2_orbital_period) * _.toDouble(p2_orbital_period)\n        val\
    \ p1_orbital_period_in_seconds_diff = p1_orbital_period_in_seconds - p2_orbital_period_in_seconds\n\
    \        val p1_orbital_period_in_seconds_diff_abs = Math.abs(p1_orbital_period_in_seconds_diff)\n\
    \        val p1_orbital_period_in_seconds_diff_abs_rounded = _.round(p1_orbital_period_in_seconds_diff_abs)\n\
    \        val p1_orbital_period_in_seconds_diff_abs_rounded_rounded = _.round(p1_orbital_period_in_seconds_diff_abs_rounded)\n\
    \        val p1_orbital_period_in_seconds_diff_abs_rounded_rounded_rounded = _.round(p1_orbital_period_in_seconds_diff_abs_rounded_rounded)\n\
    \        val p1_orbital_period_", "        val p1 = planet1.toLowerCase()\n  \
    \      val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n\
    \        val p2_idx = planets.indexOf(p2)\n        val orbit_p1 = orbit(p1_idx)\n\
    \        val orbit_p2 = orbit(p2_idx)\n        val orbit_between = orbit_p1.until(orbit_p2)\n\
    \        val orbit_between_sorted = orbit_between.sorted()\n        val result\
    \ = orbit_between_sorted.map(p -> planets[p])\n        return result", "     \
    \   val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n \
    \       val p1_index = scala.collection.JavaConversions.asScalaBuffer(p1).toList().indexOf(p1)\n\
    \        val p2_index = scala.collection.JavaConversions.asScalaBuffer(p2).toList().indexOf(p2)\n\
    \        val p1_orbital_period = scala.math.BigDecimal.valueOf(scala.math.BigDecimal.valueOf(2.4e8).multiply(scala.math.BigDecimal.valueOf(365.25)))\n\
    \        val p2_orbital_period = scala.math.BigDecimal.valueOf(scala.math.BigDecimal.valueOf(4.8e8).multiply(scala.math.BigDecimal.valueOf(365.25)))\n\
    \        val p1_orbital_period_in_days = p1_orbital_period.div(scala.math.BigDecimal.valueOf(scala.math.BigDecimal.valueOf(86400)))\n\
    \        val p2_orbital_period_in_days = p2_orbital_period.div(scala.math.BigDecimal.valueOf(scala.math.BigDecimal.valueOf(86400)))\n\
    \        val p1_orbital_period_in_years = p1_orbital_period.div(scala.math.BigDecimal.valueOf(scala.math.BigDecimal.valueOf(365.25)))\n\
    \        val p2_orbital_period_in_years = p2_orbital_period.div(scala.math.BigDecimal.valueOf(scala.math.BigDecimal.valueOf(365.25)))\n\
    \        val p1_orbital_period_in_years_in_days = p1_orbital_period_in_years.multiply(scala.math.BigDecimal.valueOf(scala.math.BigDecimal.valueOf(86400)))\n\
    \        val p2_orbital_period_in_years_in_days = p2_orb", "        val p1 = planet1.toLowerCase()\n\
    \        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n\
    \        val p2_idx = planets.indexOf(p2)\n        val orbit_between = (p1_idx\
    \ - p2_idx) * (p1_idx - p2_idx)\n        val orbit_between_sqrt = math.sqrt(orbit_between)\n\
    \        val orbit_between_cubed = orbit_between_sqrt * orbit_between_sqrt * orbit_between_sqrt\n\
    \        val orbit_between_cubed_half = orbit_between_cubed / 2\n        val orbit_between_cubed_half_sqrt\
    \ = math.sqrt(orbit_between_cubed_half)\n        val orbit_between_cubed_half_sqrt_half\
    \ = orbit_between_cubed_half_sqrt / 2\n        val orbit_between_cubed_half_sqrt_half_sqrt\
    \ = math.sqrt(orbit_between_cubed_half_sqrt_half)\n        val orbit_between_cubed_half_sqrt_half_sqrt_half\
    \ = orbit_between_cubed_half_sqrt_half_sqrt / 2\n        val orbit_between_cubed_half_sqrt_half_sqrt_half_sqrt\
    \ = math.sqrt(orbit_between_cubed_half_sqrt_half_sqrt_half)\n        val orbit_between_cubed_half_sqrt_half_sqrt_half_sqrt_half\
    \ = orbit_between_cubed_half_sqrt_half_sqrt_half_sqrt / 2\n        val orbit_between_cubed_half_sqrt_half_sqrt_half_sqrt_half_sqrt\
    \ = math.sqrt(orbit_between_cubed_half_sqrt_half_sqrt_half_sqrt_half)\n      \
    \  val orbit_between_cubed_half_sqrt_half_sqrt_half_sqrt_half_sqrt_half = orbit_between_",
  "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n  \
    \      val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n\
    \        val p1_orb_idx_idx = p1_orb_idx + 1\n        val p2_orb_idx_idx = p2_orb_idx\
    \ + 1\n        val p1_orb_idx_idx_idx = p1_orb_idx_idx + 1\n        val p2_orb_idx_idx_idx\
    \ = p2_orb_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx = p1_orb_idx_idx_idx\
    \ + 1\n        val p2_orb_idx_idx_idx_idx = p2_orb_idx_idx_idx + 1\n        val\
    \ p1_orb_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx_idx\
    \ = p2_orb_idx_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx_idx\
    \ + 1\n        val p2_orb_idx_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx_idx\
    \ + 1\n        val p1_orb_idx_idx_idx_idx_idx_idx_id", "        val p1 = planet1.toUpperCase()\n\
    \        val p2 = planet2.toUpperCase()\n        val p1_index = p1.indexOf(\"\
    \ \")\n        val p2_index = p2.indexOf(\" \")\n        val p1_name = p1.substring(0,\
    \ p1_index)\n        val p2_name = p2.substring(0, p2_index)\n        val p1_orbital_period\
    \ = p1.substring(p1_index + 1)\n        val p2_orbital_period = p2.substring(p2_index\
    \ + 1)\n        val p1_orbital_period_in_seconds = _.toDouble(p1_orbital_period)\n\
    \        val p2_orbital_period_in_seconds = _.toDouble(p2_orbital_period)\n  \
    \      val p1_orbital_period_in_minutes = p1_orbital_period_in_seconds / 60\n\
    \        val p2_orbital_period_in_minutes = p2_orbital_period_in_seconds / 60\n\
    \        val p1_orbital_period_in_hours = p1_orbital_period_in_minutes / 60\n\
    \        val p2_orbital_period_in_hours = p2_orbital_period_in_minutes / 60\n\
    \        val p1_orbital_period_in_days = p1_orbital_period_in_hours / 24\n   \
    \     val p2_orbital_period_in_days = p2_orbital_period_in_hours / 24\n      \
    \  val p1_orbital_period_in_years = p1_orbital_period_in_days / 365\n        val\
    \ p2_orbital_period_in_years = p2_orbital_period_in_days / 365\n        val p1_orbital_period_in_seconds_in_years\
    \ = p1_orbital_period_in_years * 31556926\n        val p2_orbital_period_in_seconds_in_years\
    \ = p2_orbital_period_in_years * 31556926\n        val p1_orbital_", "       \
    \ var planets = List[String]()\n        var planet1_orbital_period = scala.math.durations.Seconds(1.0)\n\
    \        var planet2_orbital_period = scala.math.durations.Seconds(1.0)\n    \
    \    var planet1_orbital_period_in_seconds = planet1_orbital_period.toSeconds\n\
    \        var planet2_orbital_period_in_seconds = planet2_orbital_period.toSeconds\n\
    \        var planet1_orbital_period_in_minutes = planet1_orbital_period_in_seconds\
    \ / 60\n        var planet2_orbital_period_in_minutes = planet2_orbital_period_in_seconds\
    \ / 60\n        var planet1_orbital_period_in_hours = planet1_orbital_period_in_minutes\
    \ / 60\n        var planet2_orbital_period_in_hours = planet2_orbital_period_in_minutes\
    \ / 60\n        var planet1_orbital_period_in_days = planet1_orbital_period_in_hours\
    \ / 24\n        var planet2_orbital_period_in_days = planet2_orbital_period_in_hours\
    \ / 24\n        var planet1_orbital_period_in_years = planet1_orbital_period_in_days\
    \ / 365\n        var planet2_orbital_period_in_years = planet2_orbital_period_in_days\
    \ / 365\n        var planet1_orbital_period_in_centuries = planet1_orbital_period_in_years\
    \ / 100\n        var planet2_orbital_period_in_centuries = planet2_orbital_period_in_years\
    \ / 100\n        var planet1_orbital_period_in_millennia = planet1_orbital_period_in_centuries\
    \ / 1000\n        var planet2_orbital_period_in_millennia = planet2_orbital_period_in_centuries\
    \ / 1000\n        var planet1_orbital_period_in_seconds_to_millennia = planet1_orbital_period_in_millennia\
    \ / 1000\n        var planet2_orbital_period_in_seconds_", "        val p1 = planet1.toLowerCase()\n\
    \        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n\
    \        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n\
    \        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n\
    \        val p2_orb_idx = p2_orb.indexOf(p2)\n        val p1_orb_idx_next = p1_orb_idx\
    \ + 1\n        val p2_orb_idx_next = p2_orb_idx + 1\n        val p1_orb_idx_prev\
    \ = p1_orb_idx - 1\n        val p2_orb_idx_prev = p2_orb_idx - 1\n        val\
    \ p1_orb_idx_next_next = p1_orb_idx_next + 1\n        val p2_orb_idx_next_next\
    \ = p2_orb_idx_next + 1\n        val p1_orb_idx_prev_prev = p1_orb_idx_prev -\
    \ 1\n        val p2_orb_idx_prev_prev = p2_orb_idx_prev - 1\n        val p1_orb_idx_next_next_next\
    \ = p1_orb_idx_next_next + 1\n        val p2_orb_idx_next_next_next = p2_orb_idx_next_next\
    \ + 1\n        val p1_orb_idx_prev_prev_prev = p1_orb_idx_prev_prev - 1\n    \
    \    val p2_orb_idx_prev_prev_prev = p2_orb_idx_prev_prev - 1\n        val p1_orb_idx_next_next_next_next\
    \ = p1_orb_idx_next_next_next + 1\n        val p2_orb_idx_next_next_next_next\
    \ = p2_orb_idx_next_next_", "        var planets = List[String]()\n        var\
    \ planet1_orbital_period = scala.math.durations.Duration(\n            scala.math.durations.Years(1),\n\
    \            scala.math.durations.Days(365),\n            scala.math.durations.Hours(24),\n\
    \            scala.math.durations.Minutes(60),\n            scala.math.durations.Seconds(60),\n\
    \            scala.math.durations.Milliseconds(1000),\n            scala.math.durations.Microseconds(1000),\n\
    \            scala.math.durations.Nanoseconds(1000),\n            scala.math.durations.Picoseconds(1000),\n\
    \            scala.math.durations.Femtoseconds(1000),\n            scala.math.durations.Attoseconds(1000),\n\
    \            scala.math.durations.Zeptoseconds(1000),\n            scala.math.durations.Yoctoseconds(1000),\n\
    \            scala.math.durations.Exaseconds(1000),\n            scala.math.durations.PetaSeconds(1000),\n\
    \            scala.math.durations.Teraseconds(1000),\n            scala.math.durations.Gigaseconds(1000),\n\
    \            scala.math.durations.Megaseconds(1000),\n            scala.math.durations.Megaseconds(1000),\n\
    \            scala.math.durations.Megaseconds(1000),\n            scala.math.durations.Megaseconds(1000),\n\
    \            scala.math.durations.Megaseconds(1000),\n            scala.math.durations.Megaseconds(1000),\n\
    \            scala.math.durations.Megaseconds(1000),\n            scala.math.durations.Megaseconds(1000),\n\
    \            scala.math.durations.Megaseconds(1000),\n            scala.math.durations.Megaseconds(1000),\n\
    \            scala.math.durations.Megaseconds(1000),\n            scala.math.durations.Megaseconds(1000",
  "        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n\
    \        var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n\
    \        var result = List[String]()\n        var i = p1_idx\n        var j =\
    \ p2_idx\n        while (i < j) {\n            var k = (i + j) / 2\n         \
    \   if (planets[k].compareTo(p1) < 0) {\n                j = k\n            }\
    \ else {\n                i = k + 1\n            }\n        }\n        while (i\
    \ <= j) {\n            result = append(result, planets[i])\n            i = i\
    \ + 1\n        }\n        return result", "        val p1 = planet1.toLowerCase()\n\
    \        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n\
    \        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n\
    \        val p2_orb = orbits[p2_idx]\n        val result = List[String]()\n  \
    \      for (i <- 0 until p1_orb) {\n            for (j <- 0 until p2_orb) {\n\
    \                if (p1_orb[i] < p2_orb[j]) {\n                    result = append(result,\
    \ planets[i + j])\n                }\n            }\n        }\n        return\
    \ result", "        var planets = List[String]()\n        var sun = new Sun()\n\
    \        var sunPos = sun.pos(planet1)\n        var planetPos = sun.pos(planet2)\n\
    \        var sunOrbit = sun.orbit(planet1)\n        var planetOrbit = sun.orbit(planet2)\n\
    \        var sunDistance = sunPos.distance(planetPos)\n        var planetDistance\
    \ = sunPos.distance(planetPos)\n        var sunOrbitDistance = sunOrbit.distance(planetPos)\n\
    \        var planetOrbitDistance = planetOrbit.distance(planetPos)\n        var\
    \ sunOrbitAngle = sunPos.angle(planetPos)\n        var planetOrbitAngle = sunPos.angle(planetPos)\n\
    \        var sunOrbitAngleDiff = sunOrbitAngle - sunDistance\n        var planetOrbitAngleDiff\
    \ = planetOrbitAngle - planetDistance\n        var sunOrbitAngleDiffAbs = sunOrbitAngleDiff.abs()\n\
    \        var planetOrbitAngleDiffAbs = planetOrbitAngleDiff.abs()\n        var\
    \ sunOrbitAngleDiffAbsMin = sunOrbitAngleDiffAbs.min()\n        var planetOrbitAngleDiffAbsMin\
    \ = planetOrbitAngleDiffAbs.min()\n        var sunOrbitAngleDiffAbsMax = sunOrbitAngleDiffAbs.max()\n\
    \        var planetOrbitAngleDiffAbsMax = planetOrbitAngleDiffAbs.max()\n    \
    \    var sunOrbitAngleDiffAbsMinMax = sunOrbitAngleDiffAbs.minMax()\n        var\
    \ planetOrbitAngleDiffAbsMinMax = planetOrbitAngleDiffAbs.minMax()\n        var\
    \ sunOrbitAngleDiffAbsMinMaxDiff = sunOrbitAngleDiffAbs.minMaxDiff()\n       \
    \ var planetOrbitAngleDiffAbsMinMaxDiff = planetOrbitAngleDiffAbs.minMaxDiff()\n\
    \        var sunOrbitAngleDiffAbsMinMaxDiffAbs = sunOrbitAngleDiffAbs.minMaxDiffAbs()\n\
    \        var planetOrbitAngleDiffAbsMinMaxDiffAbs = planetOrbitAngleDiffAbs.minMaxDiffAbs()\n\
    \        var sunOrbitAngleDiffAbsMinMaxDiffAbsDiff = sunOrbitAngleDiffAbs.min",
  "        var planets = List[String]()\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name\
    \ = planet1\n        var planet2_name = planet2\n        var planet1_orbit_name\
    \ = planet1_name + \"_orbit\"\n        var planet2_orbit_name = planet2_name +\
    \ \"_orbit\"\n        var planet1_orbit = scala.collection.immutable.Map.empty()\n\
    \        var planet2_orbit = scala.collection.immutable.Map.empty()\n        var\
    \ planet1_orbit_name_index = 0\n        var planet2_orbit_name_index = 0\n   \
    \     var planet1_orbit_name_index_index = 0\n        var planet2_orbit_name_index_index\
    \ = 0\n        var planet1_orbit_name_index_value = 0\n        var planet2_orbit_name_index_value\
    \ = 0\n        var planet1_orbit_name_index_value_index = 0\n        var planet2_orbit_name_index_value_index\
    \ = 0\n        var planet1_orbit_name_index_value_value = 0\n        var planet2_orbit_name_index_value_value\
    \ = 0\n        var planet1_orbit_name_index_value_value_index = 0\n        var\
    \ planet2_orbit_name_index_value_value_index = 0\n        var planet1_orbit_name_index_value_value_value\
    \ = 0\n        var planet2_orbit_name_index_value_value_value = 0\n        var\
    \ planet1_orbit_name_index_value_value_value_index = 0\n        var planet2_orbit_name_index_value_value_value_index\
    \ = 0\n        var planet1_orbit_name_index_value_value_value_value = 0\n    \
    \    var planet2_orbit_name_index_value_value_value_value = 0\n        var planet1_orbit_name_index_value_value_value_value_index\
    \ = 0\n        var planet2_orbit_name_index_value_value_value_value_index = 0\n\
    \        var", "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n  \
    \      val result = scala.collection.JavaConversions.seqAsJavaList(\n        \
    \    scala.collection.JavaConversions.asScalaBuffer(\n                scala.collection.mutable.Buffer.range(p1_orb,\
    \ p2_orb)\n            ).toList()\n        )\n        result.sort(Comparator.comparing(String::toLowerCase))\n\
    \        return result", "        var planet1_orbital_period = scala.math.durations.Seconds(1.0\
    \ / scala.math.durations.Hours(2.4).toSeconds())\n        var planet2_orbital_period\
    \ = scala.math.durations.Seconds(1.0 / scala.math.durations.Hours(0.7).toSeconds())\n\
    \        var planet1_orbital_period_in_seconds = planet1_orbital_period.toSeconds()\n\
    \        var planet2_orbital_period_in_seconds = planet2_orbital_period.toSeconds()\n\
    \        var planet1_orbital_period_in_minutes = planet1_orbital_period_in_seconds\
    \ / 60\n        var planet2_orbital_period_in_minutes = planet2_orbital_period_in_seconds\
    \ / 60\n        var planet1_orbital_period_in_hours = planet1_orbital_period_in_minutes\
    \ / 60\n        var planet2_orbital_period_in_hours = planet2_orbital_period_in_minutes\
    \ / 60\n        var planet1_orbital_period_in_days = planet1_orbital_period_in_hours\
    \ / 24\n        var planet2_orbital_period_in_days = planet2_orbital_period_in_hours\
    \ / 24\n        var planet1_orbital_period_in_years = planet1_orbital_period_in_days\
    \ / 365\n        var planet2_orbital_period_in_years = planet2_orbital_period_in_days\
    \ / 365\n        var planet1_orbital_period_in_centuries = planet1_orbital_period_in_years\
    \ / 100\n        var planet2_orbital_period_in_centuries = planet2_orbital_period_in_years\
    \ / 100\n        var planet1_orbital_period_in_millennia = planet1_orbital_period_in_centuries\
    \ / 1000\n        var planet2_orbital_period_in_millennia = planet2_orbital_period_in_centuries\
    \ / 1000\n        var planet1_orbital_period_in_seconds = planet1_orbital_period_",
  "        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n\
    \        var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n\
    \        var result = List[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n\
    \            return result\n        }\n        var p1_orb = orbits[p1_idx]\n \
    \       var p2_orb = orbits[p2_idx]\n        var p1_orb_idx = p1_orb.indexOf(p1)\n\
    \        var p2_orb_idx = p2_orb.indexOf(p2)\n        var p1_orb_idx_next = p1_orb_idx\
    \ + 1\n        var p2_orb_idx_next = p2_orb_idx + 1\n        var p1_orb_idx_prev\
    \ = p1_orb_idx - 1\n        var p2_orb_idx_prev = p2_orb_idx - 1\n        var\
    \ p1_orb_idx_next_next = p1_orb_idx_next + 1\n        var p2_orb_idx_next_next\
    \ = p2_orb_idx_next + 1\n        var p1_orb_idx_prev_prev = p1_orb_idx_prev -\
    \ 1\n        var p2_orb_idx_prev_prev = p2_orb_idx_prev - 1\n        var p1_orb_idx_next_next_next\
    \ = p1_orb_idx_next_next + 1\n        var p2_orb_idx_next_next_next = p2_orb_idx_next_next\
    \ + 1\n        var p1_orb_idx_prev_prev_prev = p1_orb_idx_prev_prev - 1\n    \
    \    var p2_orb_idx_prev_prev_prev = p2_orb_idx_prev_prev - 1\n        var p1_orb_idx_next_next_next_next\
    \ = p1_orb_idx_", "        var planets = List[String]()\n        var sun = scala.math.BigDecimal.valueOf(0)\n\
    \        var sunOrbit = scala.math.BigDecimal.valueOf(0)\n        var planet1Orbit\
    \ = scala.math.BigDecimal.valueOf(0)\n        var planet2Orbit = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet1Distance = scala.math.BigDecimal.valueOf(0)\n        var planet2Distance\
    \ = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToSun = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2DistanceToSun = scala.math.BigDecimal.valueOf(0)\n       \
    \ var planet1DistanceToSunSquared = scala.math.BigDecimal.valueOf(0)\n       \
    \ var planet2DistanceToSunSquared = scala.math.BigDecimal.valueOf(0)\n       \
    \ var planet1DistanceToSunCubed = scala.math.BigDecimal.valueOf(0)\n        var\
    \ planet2DistanceToSunCubed = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToSunQuart\
    \ = scala.math.BigDecimal.valueOf(0)\n        var planet2DistanceToSunQuart =\
    \ scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToSunQuint = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2DistanceToSunQuint = scala.math.BigDecimal.valueOf(0)\n  \
    \      var planet1DistanceToSunSext = scala.math.BigDecimal.valueOf(0)\n     \
    \   var planet2DistanceToSunSext = scala.math.BigDecimal.valueOf(0)\n        var\
    \ planet1DistanceToSunSept = scala.math.BigDecimal.valueOf(0)\n        var planet2DistanceToSunSept\
    \ = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToSunOct = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2DistanceToSunOct", "        var planet1_orbit = scala.math.BigDecimal.valueOf(0.38709927)\n\
    \        var planet2_orbit = scala.math.BigDecimal.valueOf(0.72333566)\n     \
    \   var planet1_name = planet1.toUpperCase()\n        var planet2_name = planet2.toUpperCase()\n\
    \        var planet1_index = planet1_name.indexOf(\" \")\n        var planet2_index\
    \ = planet2_name.indexOf(\" \")\n        var planet1_name_without_space = planet1_name.substring(0,\
    \ planet1_index)\n        var planet2_name_without_space = planet2_name.substring(0,\
    \ planet2_index)\n        var planet1_name_without_space_upper = planet1_name_without_space.toUpperCase()\n\
    \        var planet2_name_without_space_upper = planet2_name_without_space.toUpperCase()\n\
    \        var planet1_orbit_index = planet1_name_without_space_upper.indexOf(\"\
    \ \")\n        var planet2_orbit_index = planet2_name_without_space_upper.indexOf(\"\
    \ \")\n        var planet1_orbit_without_space = planet1_name_without_space.substring(0,\
    \ planet1_orbit_index)\n        var planet2_orbit_without_space = planet2_name_without_space.substring(0,\
    \ planet2_orbit_index)\n        var planet1_orbit = scala.math.BigDecimal.valueOf(Double.parseDouble(planet1_orbit_without_space))\n\
    \        var planet2_orbit = scala.math.BigDecimal.valueOf(Double.parseDouble(planet2_orbit_without_space))\n\
    \        var planet1_name_without_space_upper_index = planet1_name_without_space_upper.indexOf(\"\
    \ \")\n        var planet2_name_without_space_upper_index = planet2_name_without_space_upper.indexOf(\"\
    \ \")\n        var planet1_name_without_space_upper_without_space = planet1_name_without_space_upper.substring",
  "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val result = List[String]()\n        for (i <- 0 until planets.size -\
    \ 1) {\n            val planet = planets[i]\n            val planet_idx = planets.indexOf(planet)\n\
    \            if (planet_idx < p1_idx && planet_idx > p2_idx) {\n             \
    \   result = append(result, planet)\n            }\n        }\n        return\
    \ result", "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n  \
    \      val result = List[String]()\n        for (i <- 1 until p1_orb) {\n    \
    \        for (j <- 1 until p2_orb) {\n                if (p1_orb[i] < p2_orb[j])\
    \ {\n                    result = append(result, planets[p1_idx + i])\n      \
    \          }\n            }\n        }\n        return result", "        val p1\
    \ = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val\
    \ p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n   \
    \     val result = List[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n \
    \           return result\n        }\n        val p1_orb = orbits[p1_idx]\n  \
    \      val p2_orb = orbits[p2_idx]\n        if (p1_orb > p2_orb) {\n         \
    \   return result\n        }\n        val p1_orb_idx = orbits.indexOf(p1_orb)\n\
    \        val p2_orb_idx = orbits.indexOf(p2_orb)\n        val p1_orb_idx_idx =\
    \ p1_orb_idx - 1\n        val p2_orb_idx_idx = p2_orb_idx - 1\n        val p1_orb_idx_idx_idx\
    \ = p1_orb_idx_idx - 1\n        val p2_orb_idx_idx_idx = p2_orb_idx_idx - 1\n\
    \        val p1_orb_idx_idx_idx_idx = p1_orb_idx_idx_idx - 1\n        val p2_orb_idx_idx_idx_idx\
    \ = p2_orb_idx_idx_idx - 1\n        val p1_orb_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx\
    \ - 1\n        val p2_orb_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx - 1\n \
    \       val p1_orb_idx_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx_idx - 1\n\
    \        val p2_orb_idx_idx_", "        val p1 = planet1.toLowerCase()\n     \
    \   val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n\
    \        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n\
    \        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n\
    \        val p2_orb_idx = p2_orb.indexOf(p2)\n        val result = List[String]()\n\
    \        for (i <- p1_orb_idx + 1) {\n            for (j <- p2_orb_idx + 1) {\n\
    \                if (p1_orb[i] == p2_orb[j]) {\n                    result = result.append(p1_orb[i])\n\
    \                }\n            }\n        }\n        return result", "      \
    \  val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n  \
    \      val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val result = List.empty[String]\n        if (p1_idx < 0 || p2_idx < 0)\
    \ {\n            return result\n        }\n        val p1_orb = orbits[p1_idx]\n\
    \        val p2_orb = orbits[p2_idx]\n        if (p1_orb < p2_orb) {\n       \
    \     return result\n        }\n        val p1_orb_idx = p1_orb.indexOf(p1)\n\
    \        val p2_orb_idx = p2_orb.indexOf(p2)\n        val p1_orb_idx_idx = p1_orb_idx\
    \ + 1\n        val p2_orb_idx_idx = p2_orb_idx + 1\n        val p1_orb_idx_idx_idx\
    \ = p1_orb_idx_idx + 1\n        val p2_orb_idx_idx_idx = p2_orb_idx_idx + 1\n\
    \        val p1_orb_idx_idx_idx_idx = p1_orb_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx\
    \ = p2_orb_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx\
    \ + 1\n        val p2_orb_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx + 1\n \
    \       val p1_orb_idx_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx_idx + 1\n\
    \        val p2_orb_idx_idx", "        val p1 = planet1.toUpperCase()\n      \
    \  val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n\
    \        val p2_idx = planets.indexOf(p2)\n        val orbit_distance = scala.math.abs(p1_idx\
    \ - p2_idx)\n        val orbit_distance_int = orbit_distance.toInt\n        val\
    \ orbit_distance_float = orbit_distance.toFloat\n        val orbit_distance_double\
    \ = orbit_distance.toDouble\n        val orbit_distance_big_int = orbit_distance.toBigInt\n\
    \        val orbit_distance_big_float = orbit_distance.toBigFloat\n        val\
    \ orbit_distance_big_double = orbit_distance.toBigDouble\n        val orbit_distance_big_big_int\
    \ = orbit_distance.toBigBigInt\n        val orbit_distance_big_big_float = orbit_distance.toBigBigFloat\n\
    \        val orbit_distance_big_big_double = orbit_distance.toBigBigDouble\n \
    \       val orbit_distance_big_big_big_int = orbit_distance.toBigBigBigInt\n \
    \       val orbit_distance_big_big_big_float = orbit_distance.toBigBigBigFloat\n\
    \        val orbit_distance_big_big_big_double = orbit_distance.toBigBigBigDouble\n\
    \        val orbit_distance_big_big_big_big_int = orbit_distance.toBigBigBigBigInt\n\
    \        val orbit_distance_big_big_big_big_float = orbit_distance.toBigBigBigBigFloat\n\
    \        val orbit_distance_big_big_big_big_double = orbit_distance.toBigBigBigBigDouble\n\
    \        val orbit_distance_big_big_big_big_big_int = orbit_distance.toBigBigBigBigBigInt\n\
    \        val orbit_distance_big_big_big_big_big_float = orbit_distance.toBigBigBigBigBigFloat\n\
    \        val orbit_distance_big_big_big_big_big_double = orbit_distance.toBigBigBigBigBigDouble\n\
    \        val orbit_distance_big_big_big_big_big_big_int", "        var planets\
    \ = List[String]()\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name\
    \ = planet1\n        var planet2_name = planet2\n        var planet1_name_index\
    \ = 0\n        var planet2_name_index = 0\n        var planet1_orbit_index = 0\n\
    \        var planet2_orbit_index = 0\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_orbit_index\
    \ = 0\n        var planet2_orbit_index = 0\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_orbit_index\
    \ = 0\n        var planet2_orbit_index = 0\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_orbit_index\
    \ = 0\n        var planet2_orbit_index = 0\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_orbit_index\
    \ = 0\n        var planet2_orbit_index = 0\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_orbit_index\
    \ = 0\n        var planet2_orbit_index = 0\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_orbit_index\
    \ = 0\n        var planet2_orbit_index =", "        val p1 = planet1.toUpperCase()\n\
    \        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n\
    \        val p2_idx = planets.indexOf(p2)\n        val result = mutable.List[String]()\n\
    \        if (p1_idx < 0 || p2_idx < 0) {\n            return result\n        }\n\
    \        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n  \
    \      for (i <- p1_orb.until(p2_orb)) {\n            result.append(planets[i])\n\
    \        }\n        return result", "        val p1 = planet1.toLowerCase()\n\
    \        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n\
    \        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n\
    \        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n\
    \        val p2_orb_idx = p2_orb.indexOf(p2)\n        val p1_orb_idx_idx = p1_orb_idx\
    \ + 1\n        val p2_orb_idx_idx = p2_orb_idx + 1\n        val p1_orb_idx_idx_idx\
    \ = p1_orb_idx_idx + 1\n        val p2_orb_idx_idx_idx = p2_orb_idx_idx + 1\n\
    \        val p1_orb_idx_idx_idx_idx = p1_orb_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx\
    \ = p2_orb_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx\
    \ + 1\n        val p2_orb_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx + 1\n \
    \       val p1_orb_idx_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx_idx + 1\n\
    \        val p2_orb_idx_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx_idx + 1\n\
    \        val p1_orb_idx_idx_idx_idx_idx_idx_id", "        val p1 = planet1.toLowerCase()\n\
    \        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n\
    \        val p2_idx = planets.indexOf(p2)\n        val orbit1 = orbits[p1_idx]\n\
    \        val orbit2 = orbits[p2_idx]\n        val orbit_intersection = orbit1.intersection(orbit2)\n\
    \        val result = []\n        for (i <- orbit_intersection) {\n          \
    \  result.append(planets[i])\n        }\n        return result", "        var\
    \ p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n       \
    \ var p1_index = _.indexOf(Planet, p1)\n        var p2_index = _.indexOf(Planet,\
    \ p2)\n        var result = []\n        for (i <- 0 until _.size(Planet)) {\n\
    \            var planet = Planet[i]\n            var planet_index = _.indexOf(Planet,\
    \ planet)\n            if (planet_index < p1_index && p1_index < p2_index) {\n\
    \                result = append(result, planet)\n            }\n        }\n \
    \       return result", "        var planets = scala.collection.JavaConversions.seqAsJavaList(\n\
    \            scala.collection.JavaConversions.asScalaBuffer(\n               \
    \ scala.collection.mutable.ListBuffer.empty()\n            ).toList()\n      \
    \  )\n        var planet1_index = planets.indexOf(planet1)\n        var planet2_index\
    \ = planets.indexOf(planet2)\n        var result = scala.collection.JavaConversions.seqAsJavaList(\n\
    \            scala.collection.JavaConversions.asScalaBuffer(\n               \
    \ scala.collection.mutable.ListBuffer.empty()\n            ).toList()\n      \
    \  )\n        if (planet1_index < 0 || planet2_index < 0) {\n            return\
    \ result\n        }\n        var planet1_orbit = scala.math.BigDecimal.valueOf(\n\
    \            scala.collection.JavaConversions.asScalaBuffer(\n               \
    \ scala.collection.mutable.ListBuffer.empty()\n            ).toList()\n      \
    \  )\n        var planet2_orbit = scala.math.BigDecimal.valueOf(\n           \
    \ scala.collection.JavaConversions.asScalaBuffer(\n                scala.collection.mutable.ListBuffer.empty()\n\
    \            ).toList()\n        )\n        var planet1_orbit_index = planets.indexOf(planet1)\n\
    \        var planet2_orbit_index = planets.indexOf(planet2)\n        if (planet1_orbit_index\
    \ > planet2_orbit_index) {\n            return result\n        }\n        for\
    \ (var i = planet1_orbit_index; i <= planet2_orbit_index; i++) {\n           \
    \ planets = planets.append(planets.get(i))\n        }\n        return planets",
  "        var planets = List[String]()\n        var sun = new java.util.Date()\n\
    \        var sun_distance = sun.getTime()\n        var sun_distance_in_seconds\
    \ = sun_distance / 1000\n        var sun_distance_in_minutes = sun_distance_in_seconds\
    \ / 60\n        var sun_distance_in_hours = sun_distance_in_minutes / 60\n   \
    \     var sun_distance_in_days = sun_distance_in_hours / 24\n        var sun_distance_in_years\
    \ = sun_distance_in_days / 365\n        var sun_distance_in_centuries = sun_distance_in_years\
    \ / 100\n        var sun_distance_in_millenniums = sun_distance_in_centuries /\
    \ 10\n        var sun_distance_in_millennium = sun_distance_in_millenniums / 10\n\
    \        var sun_distance_in_millennium_decimal = sun_distance_in_millennium /\
    \ 10\n        var sun_distance_in_millennium_decimal_string = sun_distance_in_millennium_decimal.toString()\n\
    \        var sun_distance_in_millennium_decimal_string_length = sun_distance_in_millennium_decimal.toString().length\n\
    \        var sun_distance_in_millennium_decimal_string_length_minus_one = sun_distance_in_millennium_decimal.toString().length\
    \ - 1\n        var sun_distance_in_millennium_decimal_string_length_minus_two\
    \ = sun_distance_in_millennium_decimal.toString().length - 2\n        var sun_distance_in_millennium_decimal_string_length_minus_three\
    \ = sun_distance_in_millennium_decimal.toString().length - 3\n        var sun_distance_in_millennium_decimal_string_length_minus_four\
    \ = sun_distance_in_millennium_decimal.toString().length - 4\n        var sun_distance_in_millennium_decimal_string_length_minus_five\
    \ = sun_distance_in_millennium_decimal.toString().length", "        val p1 = planet1.toUpperCase()\n\
    \        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n\
    \        val p2_idx = planets.indexOf(p2)\n        val orbit_interval = scala.math.min(p1_idx,\
    \ p2_idx)\n        val orbit_diff = scala.math.max(p1_idx, p2_idx) - orbit_interval\n\
    \        val orbit_diff_abs = scala.math.abs(orbit_diff)\n        val orbit_diff_sign\
    \ = orbit_diff / orbit_diff_abs\n        val orbit_diff_abs_sign = orbit_diff_abs\
    \ / orbit_diff_abs\n        val orbit_diff_sign_abs = orbit_diff_sign * orbit_diff_abs_sign\n\
    \        val orbit_diff_sign_abs_sign = orbit_diff_sign * orbit_diff_abs_sign\n\
    \        val orbit_diff_sign_abs_sign_abs = orbit_diff_sign * orbit_diff_abs_sign\
    \ * orbit_diff_abs_sign\n        val orbit_diff_sign_abs_sign_abs_sign = orbit_diff_sign\
    \ * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign\n        val\
    \ orbit_diff_sign_abs_sign_abs_sign_abs = orbit_diff_sign * orbit_diff_abs_sign\
    \ * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign\n        val\
    \ orbit_diff_sign_abs_sign_abs_sign_abs_sign = orbit_diff_sign * orbit_diff_abs_sign\
    \ * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign\n\
    \        val orbit_diff_sign_abs_sign_abs_sign_abs_sign_abs = orbit_diff_sign\
    \ * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign * orbit_diff_abs_sign\
    \ * orbit_diff_abs_sign * orbit_diff_abs_sign\n        val", "        var p1 =\
    \ planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n        var p1_idx\
    \ = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n        var\
    \ result = List[String]()\n        if (p1_idx == -1 || p2_idx == -1) {\n     \
    \       return result\n        }\n        var p1_orb = orbits[p1_idx]\n      \
    \  var p2_orb = orbits[p2_idx]\n        var p1_orb_idx = p1_orb.indexOf(p1)\n\
    \        var p2_orb_idx = p2_orb.indexOf(p2)\n        var p1_orb_next = p1_orb_idx\
    \ + 1\n        var p2_orb_next = p2_orb_idx + 1\n        var p1_orb_prev = p1_orb_idx\
    \ - 1\n        var p2_orb_prev = p2_orb_idx - 1\n        var p1_orb_next_idx =\
    \ p1_orb_next < p1_orb.length ? p1_orb_next : -1\n        var p2_orb_next_idx\
    \ = p2_orb_next < p2_orb.length ? p2_orb_next : -1\n        var p1_orb_prev_idx\
    \ = p1_orb_prev > 0 ? p1_orb_prev : -1\n        var p2_orb_prev_idx = p2_orb_prev\
    \ > 0 ? p2_orb_prev : -1\n        var p1_orb_next_idx_next = p1_orb_next_idx <\
    \ p1_orb.length ? p1_orb_next_idx + 1 : -1\n        var p2_orb_next_idx_next =\
    \ p2_orb_next_idx < p2_orb.length ? p2_orb_next_idx + 1 : -1\n        var p1_orb_prev_idx_prev\
    \ = p1_orb_prev_idx > 0 ? p1_orb_prev_id", "        var p1 = planet1.toLowerCase()\n\
    \        var p2 = planet2.toLowerCase()\n        var p1_idx = planets.indexOf(p1)\n\
    \        var p2_idx = planets.indexOf(p2)\n        var p1_orb = orbits[p1_idx]\n\
    \        var p2_orb = orbits[p2_idx]\n        var res = List[String]()\n     \
    \   for (var i = p1_idx; i < p2_idx; i++) {\n            var planet = planets[i]\n\
    \            if (p1_orb.contains(planet) && p2_orb.contains(planet)) {\n     \
    \           res = res.append(planet)\n            }\n        }\n        return\
    \ res", "        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n\
    \        var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n\
    \        var result = List[String]()\n        var i = p1_idx\n        var j =\
    \ p2_idx\n        while (i < j) {\n            if (p1_idx < p2_idx) {\n      \
    \          result = result.append(planets[i])\n                i = i + 1\n   \
    \         } else {\n                result = result.append(planets[j])\n     \
    \           j = j - 1\n            }\n        }\n        return result", "   \
    \     var planets = List[String]()\n        var sun = new java.util.Vector[1]\n\
    \        sun[0] = new java.util.Vector[1]\n        sun[0][0] = new java.util.Vector[1]\n\
    \        sun[0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0] = new\
    \ java.util.Vector[1]\n        sun[0][0][0][0][0] = new java.util.Vector[1]\n\
    \        sun[0][0][0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0]\
    \ = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0] = new java.util.Vector[1]\n\
    \        sun[0][0][0][0][0][0][0][0][0] = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0][0][0]\
    \ = new java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0][0][0][0] = new\
    \ java.util.Vector[1]\n        sun[0][0][0][0][0][0][0][0][0][0][0][0] = new java.util.Vector[1]\n\
    \        sun[0][0][0][0][0][0][0][0][0][0][0][0][0] = new java.util.Vector[1]\n\
    \        sun[0][0][0][0][0][0][0][0][0][0][0][0][0][0] = new java.util.Vector[1]\n\
    \        sun[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0] = new java.util.Vector[1]\n\
    \        sun[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0] = new java", "  \
    \      var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n\
    \        var p1_idx = _.indexOf(Planet, p1)\n        var p2_idx = _.indexOf(Planet,\
    \ p2)\n        var result = List[String]()\n        for (var i = p1_idx; i < p2_idx;\
    \ i++) {\n            result = append(result, Planet[i])\n        }\n        return\
    \ result", "        var planets = List[String]()\n        var planet1_orbital_period\
    \ = scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math.pow(scala.math",
  "        var planet1_orbital_period = scala.math.durations.Seconds(1.0 / scala.math.durations.NanoSeconds(1.0).toSeconds())\n\
    \        var planet2_orbital_period = scala.math.durations.Seconds(1.0 / scala.math.durations.NanoSeconds(1.0).toSeconds())\n\
    \        var planet1_orbital_period_in_seconds = planet1_orbital_period.toSeconds()\n\
    \        var planet2_orbital_period_in_seconds = planet2_orbital_period.toSeconds()\n\
    \        var planet1_orbital_period_in_minutes = planet1_orbital_period_in_seconds\
    \ / 60.0\n        var planet2_orbital_period_in_minutes = planet2_orbital_period_in_seconds\
    \ / 60.0\n        var planet1_orbital_period_in_hours = planet1_orbital_period_in_minutes\
    \ / 60.0\n        var planet2_orbital_period_in_hours = planet2_orbital_period_in_minutes\
    \ / 60.0\n        var planet1_orbital_period_in_days = planet1_orbital_period_in_hours\
    \ / 24.0\n        var planet2_orbital_period_in_days = planet2_orbital_period_in_hours\
    \ / 24.0\n        var planet1_orbital_period_in_years = planet1_orbital_period_in_days\
    \ / 365.0\n        var planet2_orbital_period_in_years = planet2_orbital_period_in_days\
    \ / 365.0\n        var planet1_orbital_period_in_centuries = planet1_orbital_period_in_years\
    \ / 100.0\n        var planet2_orbital_period_in_centuries = planet2_orbital_period_in_years\
    \ / 100.0\n        var planet1_orbital_period_in_millennia = planet1_orbital_period_in_centuries\
    \ / 1000.0\n        var planet2_orbital_period_in_millennia = planet2_orbital_period_in",
  "        var planets = List[String]()\n        var sun = new java.util.Vector[8]()\n\
    \        sun[0] = new java.util.Vector[8]()\n        sun[1] = new java.util.Vector[8]()\n\
    \        sun[2] = new java.util.Vector[8]()\n        sun[3] = new java.util.Vector[8]()\n\
    \        sun[4] = new java.util.Vector[8]()\n        sun[5] = new java.util.Vector[8]()\n\
    \        sun[6] = new java.util.Vector[8]()\n        sun[7] = new java.util.Vector[8]()\n\
    \        sun[0][0] = new java.util.Vector[8]()\n        sun[0][1] = new java.util.Vector[8]()\n\
    \        sun[0][2] = new java.util.Vector[8]()\n        sun[0][3] = new java.util.Vector[8]()\n\
    \        sun[0][4] = new java.util.Vector[8]()\n        sun[0][5] = new java.util.Vector[8]()\n\
    \        sun[0][6] = new java.util.Vector[8]()\n        sun[0][7] = new java.util.Vector[8]()\n\
    \        sun[1][0] = new java.util.Vector[8]()\n        sun[1][1] = new java.util.Vector[8]()\n\
    \        sun[1][2] = new java.util.Vector[8]()\n        sun[1][3] = new java.util.Vector[8]()\n\
    \        sun[1][4] = new java.util.Vector[8]()\n        sun[1][5] = new java.util.Vector[8]()\n\
    \        sun[1][6] = new java.util.Vector[8]()\n        sun[1][7] = new java.util.Vector[8]()\n\
    \        sun[2][0] = new java.util.Vector[8]()\n        sun[2][1] = new java.util.Vector[8]()\n\
    \        sun[2][2] = new", "        val planets = scala.collection.JavaConversions.asJavaList(\n\
    \            scala.collection.JavaConversions.asScalaBuffer(\n               \
    \ scala.collection.mutable.Buffer.empty()\n            ).toList()\n        )\n\
    \        val planet1_idx = planets.indexOf(planet1)\n        val planet2_idx =\
    \ planets.indexOf(planet2)\n        if (planet1_idx < 0 || planet2_idx < 0) {\n\
    \            return scala.collection.JavaConversions.asJavaList(\n           \
    \     scala.collection.JavaConversions.asScalaBuffer(\n                    scala.collection.mutable.Buffer.empty()\n\
    \                ).toList()\n            )\n        }\n        val planet1_orbital_period\
    \ = scala.math.durations.Seconds(\n            scala.math.durations.Seconds(\n\
    \                scala.math.durations.Seconds(\n                    scala.math.durations.Seconds(\n\
    \                        scala.math.durations.Seconds(\n                     \
    \       scala.math.durations.Seconds(\n                                scala.math.durations.Seconds(\n\
    \                                    scala.math.durations.Seconds(\n         \
    \                               scala.math.durations.Seconds(\n              \
    \                              scala.math.durations.Seconds(\n               \
    \                                 scala.math.durations.Seconds(\n            \
    \                                        scala.math.durations.Seconds(\n     \
    \                                                   scala.math.durations.Seconds(\n\
    \                                                            scala.math.durations.Seconds(\n\
    \                                                                scala.math.durations.Seconds(\n\
    \                                                                    scala.math.durations.Seconds(\n\
    \                                                                        scala.math.durations.Seconds(\n\
    \                                                                            scala.math.durations.Seconds(\n\
    \                                                                            \
    \    scala.math.durations.Seconds(\n                                         \
    \                                           scala.math.durations.Seconds(\n  \
    \                                                                            \
    \          scala.math.durations.Seconds(\n                                   \
    \                                                         sc", "        var planets\
    \ = scala.collection.JavaConversions.seqAsJavaList(\n            scala.collection.JavaConversions.asScalaBuffer(\n\
    \                scala.collection.mutable.ListBuffer.new()\n            ).toList()\n\
    \        )\n        var planet1_idx = planets.indexOf(planet1)\n        var planet2_idx\
    \ = planets.indexOf(planet2)\n        if (planet1_idx == -1 || planet2_idx ==\
    \ -1) {\n            return scala.collection.JavaConversions.asScalaBuffer(\n\
    \                scala.collection.mutable.ListBuffer.empty()\n            ).toList()\n\
    \        }\n        var planet1_orbital_period = scala.math.BigDecimal.valueOf(\n\
    \            scala.collection.JavaConversions.asScalaBuffer(\n               \
    \ scala.collection.mutable.ListBuffer.new()\n            ).toList().get(planet1_idx).orbital_period()\n\
    \        )\n        var planet2_orbital_period = scala.math.BigDecimal.valueOf(\n\
    \            scala.collection.JavaConversions.asScalaBuffer(\n               \
    \ scala.collection.mutable.ListBuffer.new()\n            ).toList().get(planet2_idx).orbital_period()\n\
    \        )\n        var planet1_orbital_period_in_seconds = planet1_orbital_period.div(\n\
    \            scala.math.BigDecimal.valueOf(scala.math.BigInteger.valueOf(60))\n\
    \        )\n        var planet2_orbital_period_in_seconds = planet2_orbital_period.div(\n\
    \            scala.math.BigDecimal.valueOf(scala.math.BigInteger.valueOf(60))\n\
    \        )\n        var planet1_orbital_period_in_minutes = planet1_orbital_period_in_seconds.div(\n\
    \            scala.math.BigDecimal.valueOf(scala.math.BigInteger.valueOf(60))\n\
    \        )\n        var planet2_orbital_period_in_minutes = planet2_orbital_period_in_seconds.div(\n\
    \            scala", "        var p1 = planet1.toLowerCase()\n        var p2 =\
    \ planet2.toLowerCase()\n        var planets = List[String]()\n        var i =\
    \ 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m =\
    \ 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q =\
    \ 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u =\
    \ 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y =\
    \ 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c =\
    \ 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g =\
    \ 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o =\
    \ 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s =\
    \ 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w =\
    \ 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a =\
    \ 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e =\
    \ 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i =\
    \ 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m =\
    \ 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q =\
    \ 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u =\
    \ 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y =\
    \ 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c =\
    \ 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g =\
    \ 0\n        var h = 0\n        var i = 0\n        var", "        var p1 = planet1.toLowerCase()\n\
    \        var p2 = planet2.toLowerCase()\n        var p1_idx = planets.indexOf(p1)\n\
    \        var p2_idx = planets.indexOf(p2)\n        var result = List[String]()\n\
    \        if (p1_idx < 0 || p2_idx < 0) {\n            return result\n        }\n\
    \        var p1_orb = orbits[p1_idx]\n        var p2_orb = orbits[p2_idx]\n  \
    \      var p1_orb_idx = p1_orb.indexOf(p1)\n        var p2_orb_idx = p2_orb.indexOf(p2)\n\
    \        var p1_orb_idx_next = p1_orb_idx + 1\n        var p2_orb_idx_next = p2_orb_idx\
    \ + 1\n        var p1_orb_idx_prev = p1_orb_idx - 1\n        var p2_orb_idx_prev\
    \ = p2_orb_idx - 1\n        var p1_orb_idx_next_next = p1_orb_idx_next + 1\n \
    \       var p2_orb_idx_next_next = p2_orb_idx_next + 1\n        var p1_orb_idx_prev_prev\
    \ = p1_orb_idx_prev - 1\n        var p2_orb_idx_prev_prev = p2_orb_idx_prev -\
    \ 1\n        var p1_orb_idx_next_next_next = p1_orb_idx_next_next + 1\n      \
    \  var p2_orb_idx_next_next_next = p2_orb_idx_next_next + 1\n        var p1_orb_idx_prev_prev_prev\
    \ = p1_orb_idx_prev_prev - 1\n        var p2_orb_idx_prev_prev_prev = p2_orb_idx_prev_prev\
    \ - 1\n        var p1_orb_idx_next_next_next_next = p1_orb_idx_", "        var\
    \ planets = List[String]()\n        var p1 = planet1.toUpperCase()\n        var\
    \ p2 = planet2.toUpperCase()\n        var p1_idx = planets.indexOf(p1)\n     \
    \   var p2_idx = planets.indexOf(p2)\n        var p1_orb = scala.math.BigDecimal.valueOf(Math.PI)\n\
    \        var p2_orb = scala.math.BigDecimal.valueOf(Math.PI)\n        var p1_orb_idx\
    \ = planets.indexOf(p1_orb.toString())\n        var p2_orb_idx = planets.indexOf(p2_orb.toString())\n\
    \        var p1_orb_idx_idx = p1_orb_idx - p1_idx\n        var p2_orb_idx_idx\
    \ = p2_orb_idx - p2_idx\n        var p1_orb_idx_idx_idx = p1_orb_idx_idx - p1_idx\n\
    \        var p2_orb_idx_idx_idx = p2_orb_idx_idx - p2_idx\n        var p1_orb_idx_idx_idx_idx\
    \ = p1_orb_idx_idx_idx - p1_idx\n        var p2_orb_idx_idx_idx_idx = p2_orb_idx_idx_idx\
    \ - p2_idx\n        var p1_orb_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx -\
    \ p1_idx\n        var p2_orb_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx - p2_idx\n\
    \        var p1_orb_idx_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx_idx - p1_idx\n\
    \        var p2_", "        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n  \
    \      val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n\
    \        val p1_orb_idx_2 = p1_orb_idx + 1\n        val p2_orb_idx_2 = p2_orb_idx\
    \ + 1\n        val result = List[String]()\n        for (i <- p1_orb_idx_2 to\
    \ p2_orb_idx_2) {\n            result = append(result, planets[i])\n        }\n\
    \        return result", "        var planets = List[String]()\n        var sun\
    \ = new java.util.Vector()\n        var sun_orbit = new java.util.Vector()\n \
    \       var planet1_orbit = new java.util.Vector()\n        var planet2_orbit\
    \ = new java.util.Vector()\n        var planet1_name = planet1.toUpperCase()\n\
    \        var planet2_name = planet2.toUpperCase()\n        var planet1_index =\
    \ 0\n        var planet2_index = 0\n        var planet1_distance = 0.0\n     \
    \   var planet2_distance = 0.0\n        var planet1_orbital_period = 0.0\n   \
    \     var planet2_orbital_period = 0.0\n        var planet1_orbital_period_in_seconds\
    \ = 0.0\n        var planet2_orbital_period_in_seconds = 0.0\n        var planet1_orbital_period_in_minutes\
    \ = 0.0\n        var planet2_orbital_period_in_minutes = 0.0\n        var planet1_orbital_period_in_hours\
    \ = 0.0\n        var planet2_orbital_period_in_hours = 0.0\n        var planet1_orbital_period_in_days\
    \ = 0.0\n        var planet2_orbital_period_in_days = 0.0\n        var planet1_orbital_period_in_years\
    \ = 0.0\n        var planet2_orbital_period_in_years = 0.0\n        var planet1_orbital_period_in_seconds\
    \ = 0.0\n        var planet2_orbital_period_in_seconds = 0.0\n        var planet1_orbital_period_in_minutes\
    \ = 0.0\n        var planet2_orbital_period_in_minutes = 0.0\n        var planet1_orbital_period_in_hours\
    \ = 0.0\n        var planet2_orbital_period_in_hours = 0.0\n        var planet1_orbital_period_in_days\
    \ = 0.0\n        var planet2_orbital_period_in_days = 0.0\n        var planet1_orbital_period_in_years\
    \ = 0.0\n", "        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n\
    \        var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n\
    \        var result = List[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n\
    \            return result\n        }\n        var p1_orb = orbits[p1_idx]\n \
    \       var p2_orb = orbits[p2_idx]\n        var p1_orb_idx = p1_orb.indexOf(p1)\n\
    \        var p2_orb_idx = p2_orb.indexOf(p2)\n        var p1_orb_idx_next = p1_orb_idx\
    \ + 1\n        var p2_orb_idx_next = p2_orb_idx + 1\n        var p1_orb_idx_prev\
    \ = p1_orb_idx - 1\n        var p2_orb_idx_prev = p2_orb_idx - 1\n        var\
    \ p1_orb_idx_next_next = p1_orb_idx_next + 1\n        var p2_orb_idx_next_next\
    \ = p2_orb_idx_next + 1\n        var p1_orb_idx_prev_prev = p1_orb_idx_prev -\
    \ 1\n        var p2_orb_idx_prev_prev = p2_orb_idx_prev - 1\n        var p1_orb_idx_next_prev\
    \ = p1_orb_idx_next - 1\n        var p2_orb_idx_next_prev = p2_orb_idx_next -\
    \ 1\n        var p1_orb_idx_prev_next = p1_orb_idx_prev + 1\n        var p2_orb_idx_prev_next\
    \ = p2_orb_idx_prev + 1\n        var p1_orb_idx_next_next_next = p1_orb_idx_next_next\
    \ + 1\n        var p2_orb_idx_next_", "        var p1 = planet1.toLowerCase()\n\
    \        var p2 = planet2.toLowerCase()\n        var p1_idx = _.indexOf(Planet,\
    \ p1)\n        var p2_idx = _.indexOf(Planet, p2)\n        var p1_orb = _.range(0,\
    \ p1_idx)\n        var p2_orb = _.range(p1_idx, p2_idx)\n        var result =\
    \ _.concat(p1_orb, p2_orb)\n        result.sort(comparePlanet)\n        return\
    \ result", "        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n\
    \        var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n\
    \        var result = List[String]()\n        for (i <- 0 until planets.size -\
    \ 1) {\n            var p = planets[i]\n            var p_idx = planets.indexOf(p)\n\
    \            if (p_idx < p1_idx && p_idx > p2_idx) {\n                result =\
    \ result.append(p)\n            }\n        }\n        return result", "      \
    \  var planets = List[String]()\n        var sun = new java.util.Date()\n    \
    \    var sun_x = sun.getTime()\n        var sun_y = sun.getYear()\n        var\
    \ sun_m = sun.getMonth()\n        var sun_d = sun.getDate()\n        var sun_h\
    \ = sun.getHours()\n        var sun_min = sun.getMinutes()\n        var sun_sec\
    \ = sun.getSeconds()\n        var sun_ms = sun.getTime()\n        var sun_diff\
    \ = sun_x - sun_y * 365 * 24 * 60 * 60 * 1000\n        var sun_diff_m = sun_diff\
    \ / (60 * 60 * 1000)\n        var sun_diff_d = sun_diff / (24 * 60 * 60 * 1000)\n\
    \        var sun_diff_h = sun_diff / (60 * 60 * 1000)\n        var sun_diff_min\
    \ = sun_diff / (60 * 1000)\n        var sun_diff_sec = sun_diff / 1000\n     \
    \   var sun_diff_ms = sun_diff\n        var sun_diff_diff = sun_diff_m - sun_diff_d\
    \ * 24 - sun_diff_h * 24 * 60 - sun_diff_min * 24 * 60 * 60 - sun_diff_sec * 24\
    \ * 60 * 60 * 1000 - sun_diff_ms * 24 * 60 * 60 * 1000\n        var sun_diff_diff_m\
    \ = sun_diff_diff / (60 * 60 * 1000)\n        var sun_diff_diff_d = sun_diff_diff\
    \ / (24 * 60 * 60 * 1000)\n        var sun_diff_diff_h = sun_diff_diff / (60 *\
    \ 60 * 1000)\n        var sun_diff_diff_min = sun_diff_diff / (60 * 1000)\n  \
    \      var sun_diff_diff_sec = sun_diff_diff / 1000\n        var sun_diff_diff_ms\
    \ = sun_diff_diff\n        var sun_diff_diff_diff = sun_diff_diff_m - sun_diff_diff_d\
    \ * 24 - sun_diff_diff_h * 24 * 60 - sun_diff_diff_min * 24 * 60 * 60 - sun_diff_diff_",
  "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n  \
    \      val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n\
    \        val p1_orb_idx_idx = p1_orb_idx + 1\n        val p2_orb_idx_idx = p2_orb_idx\
    \ + 1\n        val p1_orb_idx_idx_idx = p1_orb_idx_idx + 1\n        val p2_orb_idx_idx_idx\
    \ = p2_orb_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx = p1_orb_idx_idx_idx\
    \ + 1\n        val p2_orb_idx_idx_idx_idx = p2_orb_idx_idx_idx + 1\n        val\
    \ p1_orb_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx_idx\
    \ = p2_orb_idx_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx_idx\
    \ + 1\n        val p2_orb_idx_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx_idx\
    \ + 1\n        val p1_orb_idx_idx_idx_idx_idx_idx_id", "        var planets =\
    \ List[String]()\n        var sun = scala.math.BigDecimal.valueOf(0)\n       \
    \ var sunOrbit = scala.math.BigDecimal.valueOf(0)\n        var planet1Orbit =\
    \ scala.math.BigDecimal.valueOf(0)\n        var planet2Orbit = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet1Distance = scala.math.BigDecimal.valueOf(0)\n        var planet2Distance\
    \ = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToSun = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2DistanceToSun = scala.math.BigDecimal.valueOf(0)\n       \
    \ var planet1DistanceToPlanet2 = scala.math.BigDecimal.valueOf(0)\n        var\
    \ planet2DistanceToPlanet1 = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToSunSquared\
    \ = scala.math.BigDecimal.valueOf(0)\n        var planet2DistanceToSunSquared\
    \ = scala.math.BigDecimal.valueOf(0)\n        var planet1DistanceToPlanet2Squared\
    \ = scala.math.BigDecimal.valueOf(0)\n        var planet2DistanceToPlanet1Squared\
    \ = scala.math.BigDecimal.valueOf(0)\n        var planet1OrbitToPlanet2 = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2OrbitToPlanet1 = scala.math.BigDecimal.valueOf(0)\n      \
    \  var planet1OrbitToSun = scala.math.BigDecimal.valueOf(0)\n        var planet2OrbitToSun\
    \ = scala.math.BigDecimal.valueOf(0)\n        var planet1OrbitToPlanet2Squared\
    \ = scala.math.BigDecimal.valueOf(0)\n        var planet2OrbitToPlanet1Squared\
    \ = scala.math.BigDecimal.valueOf(0)\n        var planet1OrbitToSunSquared = scala.math.BigDecimal.valueOf(0)\n\
    \        var", "        var planets = scala.collection.JavaConversions.seqAsJavaList(\n\
    \            scala.collection.JavaConversions.asScalaBuffer(\n               \
    \ new java.util.ArrayList<String>()\n            )\n        )\n        var planet1_idx\
    \ = planets.indexOf(planet1)\n        var planet2_idx = planets.indexOf(planet2)\n\
    \        var planet1_orbital_period = scala.math.BigDecimal.valueOf(\n       \
    \     scala.collection.JavaConversions.asScalaBuffer(\n                new java.util.ArrayList<Double>()\n\
    \            ).get(planet1_idx).doubleValue()\n        )\n        var planet2_orbital_period\
    \ = scala.math.BigDecimal.valueOf(\n            scala.collection.JavaConversions.asScalaBuffer(\n\
    \                new java.util.ArrayList<Double>()\n            ).get(planet2_idx).doubleValue()\n\
    \        )\n        var planet1_orbital_period_in_days = planet1_orbital_period.divide(\n\
    \            scala.math.BigDecimal.valueOf(scala.math.BigInteger.valueOf(86400))\n\
    \        )\n        var planet2_orbital_period_in_days = planet2_orbital_period.divide(\n\
    \            scala.math.BigDecimal.valueOf(scala.math.BigInteger.valueOf(86400))\n\
    \        )\n        var planet1_orbital_period_in_years = planet1_orbital_period_in_days.divide(\n\
    \            scala.math.BigDecimal.valueOf(365.25)\n        )\n        var planet2_orbital_period_in_years\
    \ = planet2_orbital_period_in_days.divide(\n            scala.math.BigDecimal.valueOf(365.25)\n\
    \        )\n        var planet1_orbital_period_in_years_in_days = planet1_orbital_period_in_years.multiply(\n\
    \            scala.math.BigDecimal.valueOf(365.25)\n        )\n        var planet2_orbital_period_in_years_",
  "        var planets = List[String]()\n        var sun = new Sun()\n        var\
    \ planet1_orbital_period = sun.orbital_period(planet1)\n        var planet2_orbital_period\
    \ = sun.orbital_period(planet2)\n        var planet1_orbital_period_diff = planet1_orbital_period\
    \ - planet2_orbital_period\n        var planet2_orbital_period_diff = planet2_orbital_period\
    \ - planet1_orbital_period\n        var planet1_orbital_period_diff_abs = Math.abs(planet1_orbital_period_diff)\n\
    \        var planet2_orbital_period_diff_abs = Math.abs(planet2_orbital_period_diff)\n\
    \        var planet1_orbital_period_diff_abs_floor = Math.floor(planet1_orbital_period_diff_abs)\n\
    \        var planet2_orbital_period_diff_abs_floor = Math.floor(planet2_orbital_period_diff_abs)\n\
    \        var planet1_orbital_period_diff_abs_ceil = Math.ceil(planet1_orbital_period_diff_abs)\n\
    \        var planet2_orbital_period_diff_abs_ceil = Math.ceil(planet2_orbital_period_diff_abs)\n\
    \        var planet1_orbital_period_diff_abs_ceil_floor = Math.min(planet1_orbital_period_diff_abs_ceil,\
    \ planet2_orbital_period_diff_abs_floor)\n        var planet2_orbital_period_diff_abs_ceil_floor\
    \ = Math.min(planet2_orbital_period_diff_abs_ceil, planet1_orbital_period_diff_abs_floor)\n\
    \        var planet1_orbital_period_diff_abs_ceil_floor_ceil = Math.max(planet1_orbital_period_diff_abs_ceil,\
    \ planet2_orbital_period_diff_abs_floor)\n        var planet2_orbital_period_diff_abs_ceil_floor_ceil\
    \ = Math.max(planet2_orbital_period_diff_abs_ceil", "        var planets = List[String]()\n\
    \        var planet1_orbital_period = scala.math.durations.Seconds(\n        \
    \    scala.math.durations.Seconds(\n                scala.math.durations.Seconds(\n\
    \                    scala.math.durations.Seconds(\n                        scala.math.durations.Seconds(\n\
    \                            scala.math.durations.Seconds(\n                 \
    \               scala.math.durations.Seconds(\n                              \
    \      scala.math.durations.Seconds(\n                                       \
    \ scala.math.durations.Seconds(\n                                            scala.math.durations.Seconds(\n\
    \                                                scala.math.durations.Seconds(\n\
    \                                                    scala.math.durations.Seconds(\n\
    \                                                        scala.math.durations.Seconds(\n\
    \                                                            scala.math.durations.Seconds(\n\
    \                                                                scala.math.durations.Seconds(\n\
    \                                                                    scala.math.durations.Seconds(\n\
    \                                                                        scala.math.durations.Seconds(\n\
    \                                                                            scala.math.durations.Seconds(\n\
    \                                                                            \
    \    scala.math.durations.Seconds(\n                                         \
    \                                           scala.math.durations.Seconds(\n  \
    \                                                                            \
    \          scala.math.durations.Seconds(\n                                   \
    \                                                         scala.math.durations.Seconds(\n\
    \                                                                            \
    \                    scala.math.durations.Seconds(\n                         \
    \                                                                           scala.math.durations.Seconds(\n\
    \                                                                            \
    \                            scala.math.durations.Seconds(\n                 \
    \                                                                            \
    \               scala.math.durations.Seconds(\n                              \
    \                                                                            \
    \      scala.math.durations.Seconds(\n                                       \
    \                                                                            \
    \ scala.math.durations.Seconds(\n                                            \
    \                                                                            scala.math.durations.Seconds(\n\
    \                                                                            \
    \                                                    scala.math.durations.Seconds(\n",
  "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val result = List[String]()\n        if (p1_idx < 0 || p2_idx < 0) {\n\
    \            return result\n        }\n        val p1_orb = orbits[p1_idx]\n \
    \       val p2_orb = orbits[p2_idx]\n        if (p1_orb > p2_orb) {\n        \
    \    return result\n        }\n        for (i <- p1_orb) {\n            for (j\
    \ <- p2_orb) {\n                if (i < j) {\n                    result += planets[i]\n\
    \                }\n            }\n        }\n        return result", "      \
    \  val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n  \
    \      val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n  \
    \      val result = List[String]()\n        for (i <- 1 to p1_orb) {\n       \
    \     for (j <- 1 to p2_orb) {\n                if (p1_orb < p2_orb) {\n     \
    \               if (p1_orb <= i && i <= p2_orb) {\n                        result\
    \ = append(result, planets[i])\n                    }\n                } else\
    \ {\n                    if (p2_orb <= i && i <= p1_orb) {\n                 \
    \       result = append(result, planets[i])\n                    }\n         \
    \       }\n            }\n        }\n        return result", "        val p1 =\
    \ planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n        val p1_idx\
    \ = p1.indexOf(\" \")\n        val p2_idx = p2.indexOf(\" \")\n        val p1_name\
    \ = p1.substring(0, p1_idx)\n        val p2_name = p2.substring(0, p2_idx)\n \
    \       val p1_orb = p1.substring(p1_idx + 1)\n        val p2_orb = p2.substring(p2_idx\
    \ + 1)\n        val p1_orb_num = _.toInt(p1_orb)\n        val p2_orb_num = _.toInt(p2_orb)\n\
    \        val p1_orb_num_abs = Math.abs(p1_orb_num)\n        val p2_orb_num_abs\
    \ = Math.abs(p2_orb_num)\n        val p1_orb_num_abs_diff = p1_orb_num_abs - p2_orb_num_abs\n\
    \        val p1_orb_num_abs_diff_abs = Math.abs(p1_orb_num_abs_diff)\n       \
    \ val p1_orb_num_abs_diff_abs_diff = p1_orb_num_abs_diff_abs - p2_orb_num_abs\n\
    \        val p1_orb_num_abs_diff_abs_diff_abs = Math.abs(p1_orb_num_abs_diff_abs_diff)\n\
    \        val p1_orb_num_abs_diff_abs_diff_abs_diff = p1_orb_num_abs_diff_abs_diff_abs\
    \ - p2_orb_num_abs\n        val p1_orb_num_abs_diff_abs_diff_abs_diff_abs = Math.abs(p1_orb_num_abs_diff_abs_diff_abs_diff)\n\
    \        val p1_orb_num_abs_diff_abs_diff_abs_diff_abs_diff = p1_orb_num_abs_diff_abs_diff_abs_",
  "        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n\
    \        val p1_index = p1.indexOf(\" \")\n        val p2_index = p2.indexOf(\"\
    \ \")\n        val p1_name = p1.substring(0, p1_index)\n        val p2_name =\
    \ p2.substring(0, p2_index)\n        val p1_orbital_period = p1.substring(p1_index\
    \ + 1)\n        val p2_orbital_period = p2.substring(p2_index + 1)\n        val\
    \ p1_orbital_period_in_seconds = _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period)\
    \ * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period)\
    \ * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period)\
    \ * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period)\
    \ * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period)\
    \ * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period)\
    \ * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period)\
    \ * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period)\
    \ * _.toDouble(p1_orbital_period) * _.toDouble(p1_orbital_period", "        val\
    \ p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n       \
    \ val p1_idx = scala.collection.JavaConversions.asScalaBuffer(p1).toList().indexOf(p1)\n\
    \        val p2_idx = scala.collection.JavaConversions.asScalaBuffer(p2).toList().indexOf(p2)\n\
    \        val p1_orb = scala.math.BigDecimal(p1_idx).div(scala.math.BigDecimal(8))\n\
    \        val p2_orb = scala.math.BigDecimal(p2_idx).div(scala.math.BigDecimal(8))\n\
    \        val p1_orb_diff = p1_orb.subtract(p2_orb)\n        val p1_orb_diff_abs\
    \ = p1_orb_diff.abs()\n        val p1_orb_diff_abs_int = p1_orb_diff_abs.intValue()\n\
    \        val p1_orb_diff_abs_frac = p1_orb_diff_abs.subtract(scala.math.BigDecimal(p1_orb_diff_abs_int))\n\
    \        val p1_orb_diff_abs_frac_int = p1_orb_diff_abs_frac.intValue()\n    \
    \    val p1_orb_diff_abs_frac_frac = p1_orb_diff_abs_frac.subtract(scala.math.BigDecimal(p1_orb_diff_abs_frac_int))\n\
    \        val p1_orb_diff_abs_frac_frac_int = p1_orb_diff_abs_frac_frac.intValue()\n\
    \        val p1_orb_diff_abs_frac_frac_frac = p1_orb_diff_abs_frac_frac_int.subtract(scala.math.BigDecimal(p1_orb_diff_abs_frac_frac_int))\n\
    \        val p1_orb_diff_abs_frac_frac_frac_int = p1_orb_diff_abs_frac_frac_frac.intValue()\n\
    \        val p1_orb_diff", "        val p1 = planet1.toLowerCase()\n        val\
    \ p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n     \
    \   val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n  \
    \      val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n\
    \        val p2_orb_idx = p2_orb.indexOf(p2)\n        val p1_orb_idx_idx = p1_orb_idx\
    \ + 1\n        val p2_orb_idx_idx = p2_orb_idx + 1\n        val p1_orb_idx_idx_idx\
    \ = p1_orb_idx_idx + 1\n        val p2_orb_idx_idx_idx = p2_orb_idx_idx + 1\n\
    \        val p1_orb_idx_idx_idx_idx = p1_orb_idx_idx_idx + 1\n        val p2_orb_idx_idx_idx_idx\
    \ = p2_orb_idx_idx_idx + 1\n        val p1_orb_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx\
    \ + 1\n        val p2_orb_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx + 1\n \
    \       val p1_orb_idx_idx_idx_idx_idx_idx = p1_orb_idx_idx_idx_idx_idx + 1\n\
    \        val p2_orb_idx_idx_idx_idx_idx_idx = p2_orb_idx_idx_idx_idx_idx + 1\n\
    \        val p1_orb_idx_idx_idx_idx_idx_idx_id", "        val p1 = planet1.toUpperCase()\n\
    \        val p2 = planet2.toUpperCase()\n        val p1_idx = planets.indexOf(p1)\n\
    \        val p2_idx = planets.indexOf(p2)\n        val p1_orb = orbits[p1_idx]\n\
    \        val p2_orb = orbits[p2_idx]\n        val p1_orb_idx = p1_orb.indexOf(p1)\n\
    \        val p2_orb_idx = p2_orb.indexOf(p2)\n        val result = List[String]()\n\
    \        for (i <- p1_orb_idx + 1 to p2_orb_idx) {\n            result = append(result,\
    \ planets[p1_orb[i]])\n        }\n        return result", "        val p1 = planet1.toLowerCase()\n\
    \        val p2 = planet2.toLowerCase()\n        val p1_idx = planets.indexOf(p1)\n\
    \        val p2_idx = planets.indexOf(p2)\n        val result = scala.collection.JavaConversions.seqAsJavaList(\n\
    \            scala.collection.JavaConversions.asScalaBuffer(\n               \
    \ scala.collection.mutable.Buffer(\n                    (p1_idx < p2_idx) ? planets.subList(p1_idx,\
    \ p2_idx) : planets.subList(p2_idx, p1_idx)\n                )\n            )\n\
    \        )\n        return result", "        var planet1_orbit = scala.math.BigDecimal.valueOf(0.38709927)\n\
    \        var planet2_orbit = scala.math.BigDecimal.valueOf(0.72333566)\n     \
    \   var planet1_name = planet1.toUpperCase()\n        var planet2_name = planet2.toUpperCase()\n\
    \        var planet1_orbit_str = planet1_orbit.toString()\n        var planet2_orbit_str\
    \ = planet2_orbit.toString()\n        var planet1_orbit_int = Integer.parseInt(planet1_orbit_str)\n\
    \        var planet2_orbit_int = Integer.parseInt(planet2_orbit_str)\n       \
    \ var planet1_name_int = Integer.parseInt(planet1_name)\n        var planet2_name_int\
    \ = Integer.parseInt(planet2_name)\n        var result = List[String]()\n    \
    \    if (planet1_name_int > planet2_name_int) {\n            result = List[String](\n\
    \                \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\")\n        } else if (planet1_name_int < planet2_name_int)\
    \ {\n            result = List[String](\n                \"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     } else if (planet1_name_int == planet2_name_int) {\n            result =\
    \ List[String](\n                \"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        }\n        return\
    \ result", "        var p1 = planet1.toLowerCase()\n        var p2 = planet2.toLowerCase()\n\
    \        var p1_idx = planets.indexOf(p1)\n        var p2_idx = planets.indexOf(p2)\n\
    \        var result = List[String]()\n        for (i <- 1 to planets.size - 1)\
    \ {\n            var planet = planets[i]\n            var planet_idx = planets.indexOf(planet)\n\
    \            if (planet_idx < p1_idx && planet_idx > p2_idx) {\n             \
    \   result = append(result, planet)\n            }\n        }\n        return\
    \ result", "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n  \
    \      val p1_orb_idx = p1_orb.indexOf(p1)\n        val p2_orb_idx = p2_orb.indexOf(p2)\n\
    \        val p1_orb_idx_next = p1_orb_idx + 1\n        val p2_orb_idx_next = p2_orb_idx\
    \ + 1\n        val result = List[String]()\n        if (p1_orb_idx_next < p2_orb_idx_next)\
    \ {\n            for (i <- p1_orb_idx_next to p2_orb_idx_next) {\n           \
    \     result = result.append(planets[i])\n            }\n        } else if (p1_orb_idx_next\
    \ > p2_orb_idx_next) {\n            for (i <- p2_orb_idx_next to p1_orb_idx_next)\
    \ {\n                result = result.append(planets[i])\n            }\n     \
    \   }\n        return result", "        val planets = List[String](\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val planet1Index = planets.indexOf(planet1)\n        val planet2Index\
    \ = planets.indexOf(planet2)\n        val orbit1 = scala.math.BigDecimal.valueOf(Math.PI).multiply(scala.math.BigDecimal.valueOf(planet1Index))\n\
    \        val orbit2 = scala.math.BigDecimal.valueOf(Math.PI).multiply(scala.math.BigDecimal.valueOf(planet2Index))\n\
    \        val orbitDiff = orbit2.subtract(orbit1)\n        val orbitDiffInRad =\
    \ orbitDiff.divide(scala.math.BigDecimal.valueOf(Math.PI))\n        val orbitDiffInDeg\
    \ = orbitDiffInRad.multiply(scala.math.BigDecimal.valueOf(180))\n        val orbitDiffInDeg2\
    \ = orbitDiffInDeg.divide(scala.math.BigDecimal.valueOf(180))\n        val orbitDiffInDeg3\
    \ = orbitDiffInDeg2.divide(scala.math.BigDecimal.valueOf(180))\n        val orbitDiffInDeg4\
    \ = orbitDiffInDeg3.divide(scala.math.BigDecimal.valueOf(180))\n        val orbitDiffInDeg5\
    \ = orbitDiffInDeg4.divide(scala.math.BigDecimal.valueOf(180))\n        val orbitDiffInDeg6\
    \ = orbitDiffInDeg5.divide(scala.math.BigDecimal.valueOf(180))\n        val orbitDiffInDeg7\
    \ = orbitDiffInDeg6.divide(scala.math.BigDecimal.valueOf(180))\n        val orbitDiffInDeg8\
    \ = orbitDiffInDeg7.divide(scala.math.BigDecimal.valueOf(180))\n        val orbitDiffInDeg9\
    \ = orbitDiffInDeg8.divide(scala.math.BigDecimal.valueOf(180))\n        val orbitDiffInDeg10",
  "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n  \
    \      val result = List[String]()\n        for (i <- 0 until p1_orb) {\n    \
    \        for (j <- 0 until p2_orb) {\n                if (p1_orb[i] < p2_orb[j])\
    \ {\n                    result = append(result, planets[i])\n               \
    \ }\n            }\n        }\n        return result", "        var planets =\
    \ List[String]()\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n\
    \        var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name\
    \ = planet1\n        var planet2_name = planet2\n        var planet1_orbit_name\
    \ = planet1_name + \"_orbit\"\n        var planet2_orbit_name = planet2_name +\
    \ \"_orbit\"\n        var planet1_orbit = scala.math.BigDecimal.valueOf(0)\n \
    \       var planet2_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet1_name_index\
    \ = planets.indexOf(planet1_name)\n        var planet2_name_index = planets.indexOf(planet2_name)\n\
    \        var planet1_orbit_index = planets.indexOf(planet1_orbit_name)\n     \
    \   var planet2_orbit_index = planets.indexOf(planet2_orbit_name)\n        var\
    \ planet1_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit\
    \ = scala.math.BigDecimal.valueOf(0)\n        var planet1_orbit_name_index = planets.indexOf(planet1_orbit_name)\n\
    \        var planet2_orbit_name_index = planets.indexOf(planet2_orbit_name)\n\
    \        var planet1_orbit_index = planets.indexOf(planet1_orbit_name)\n     \
    \   var planet2_orbit_index = planets.indexOf(planet2_orbit_name)\n        var\
    \ planet1_orbit = scala.math.BigDecimal.valueOf(0)\n        var planet2_orbit\
    \ = scala.math.BigDecimal.valueOf(0)\n        var planet1_orbit_name_index = planets.indexOf(planet1_orbit_name)\n\
    \        var planet2_orbit_name_index = planets.indexOf(planet2_orbit_name)\n\
    \        var planet1_orbit_index = planets.indexOf(planet1_orbit_name)\n     \
    \   var planet2_orbit_index = planets.indexOf(planet2_orbit_name)\n        var",
  "        val p1 = planet1.toLowerCase()\n        val p2 = planet2.toLowerCase()\n\
    \        val p1_idx = planets.indexOf(p1)\n        val p2_idx = planets.indexOf(p2)\n\
    \        val p1_orb = orbits[p1_idx]\n        val p2_orb = orbits[p2_idx]\n  \
    \      val result = scala.collection.mutable.ListBuffer[String]()\n        for\
    \ (i <- 0 until planets.size - 1) {\n            val p = planets[i]\n        \
    \    val p_orb = orbits[i]\n            if (p_orb > p1_orb && p_orb < p2_orb)\
    \ {\n                result.append(p)\n            }\n        }\n        return\
    \ result.toList", "        val p1 = planet1.toUpperCase()\n        val p2 = planet2.toUpperCase()\n\
    \        val p1_index = scala.collection.JavaConversions.asScalaBuffer(p1).toList().indexOf(p1)\n\
    \        val p2_index = scala.collection.JavaConversions.asScalaBuffer(p2).toList().indexOf(p2)\n\
    \        val p1_orbital_period = scala.math.BigDecimal.valueOf(Math.PI * Math.sqrt(p1_index))\n\
    \        val p2_orbital_period = scala.math.BigDecimal.valueOf(Math.PI * Math.sqrt(p2_index))\n\
    \        val p1_orbital_period_in_days = p1_orbital_period.div(scala.math.BigDecimal.valueOf(86400))\n\
    \        val p2_orbital_period_in_days = p2_orbital_period.div(scala.math.BigDecimal.valueOf(86400))\n\
    \        val p1_orbital_period_in_years = p1_orbital_period_in_days.div(scala.math.BigDecimal.valueOf(365.25))\n\
    \        val p2_orbital_period_in_years = p2_orbital_period_in_days.div(scala.math.BigDecimal.valueOf(365.25))\n\
    \        val p1_orbital_period_in_years_in_days = p1_orbital_period_in_years.multiply(scala.math.BigDecimal.valueOf(365.25))\n\
    \        val p2_orbital_period_in_years_in_days = p2_orbital_period_in_years.multiply(scala.math.BigDecimal.valueOf(365.25))\n\
    \        val p1_orbital_period_in_years_in_days_in_days = p1_orbital_period_in_years_in_days.multiply(scala.math.BigDecimal.valueOf(86400))\n\
    \        val p2_orbital_period_in_", "        var planets = List[String]()\n \
    \       var planet1_orbital_period = scala.math.durations.Seconds(1.0 / (2.0 *\
    \ scala.math.durations.NanoSeconds.one.toSeconds))\n        var planet2_orbital_period\
    \ = scala.math.durations.Seconds(1.0 / (2.0 * scala.math.durations.NanoSeconds.one.toSeconds))\n\
    \        var planet1_orbital_period_in_seconds = planet1_orbital_period.toSeconds\n\
    \        var planet2_orbital_period_in_seconds = planet2_orbital_period.toSeconds\n\
    \        var planet1_orbital_period_in_nano_seconds = planet1_orbital_period.toNanoSeconds\n\
    \        var planet2_orbital_period_in_nano_seconds = planet2_orbital_period.toNanoSeconds\n\
    \        var planet1_orbital_period_in_minutes = planet1_orbital_period_in_seconds\
    \ / 60.0\n        var planet2_orbital_period_in_minutes = planet2_orbital_period_in_seconds\
    \ / 60.0\n        var planet1_orbital_period_in_hours = planet1_orbital_period_in_minutes\
    \ / 60.0\n        var planet2_orbital_period_in_hours = planet2_orbital_period_in_minutes\
    \ / 60.0\n        var planet1_orbital_period_in_days = planet1_orbital_period_in_hours\
    \ / 24.0\n        var planet2_orbital_period_in_days = planet2_orbital_period_in_hours\
    \ / 24.0\n        var planet1_orbital_period_in_years = planet1_orbital_period_in_days\
    \ / 365.0\n        var planet2_orbital_period_in_years = planet2_orbital_period_in_days\
    \ / 365.0\n        var planet1_orbital_period_in_centuries = planet1_orbital_period_in_years\
    \ / 100.0\n        var planet2_orbital_period_in_cent", "        var p1 = planet1.toLowerCase()\n\
    \        var p2 = planet2.toLowerCase()\n        var p1_idx = planets.indexOf(p1)\n\
    \        var p2_idx = planets.indexOf(p2)\n        var result = List[String]()\n\
    \        var i = p1_idx\n        var j = p2_idx\n        while (i < j) {\n   \
    \         var k = (i + j) / 2\n            var planet = planets[k]\n         \
    \   if (planet.contains(p1)) {\n                i = k + 1\n            } else\
    \ {\n                j = k\n            }\n        }\n        for (i = p1_idx;\
    \ i <= j; i++) {\n            result = result.append(planets[i])\n        }\n\
    \        return result"]
stop_tokens:
- "\n    }\n"
