name: HumanEval_59_largest_prime_factor
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  \    // >>> largestPrimeFactor((13195l))\n    // (29l)\n    // >>> largestPrimeFactor((2048l))\n\
  \    // (2l)\n    def largestPrimeFactor(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
  \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
  \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
  \ == (29l));\n    }\n\n}\n"
completions: ["        var i = 2l\n        while (i <= n) {\n            if (n % i\
    \ == 0) {\n                n /= i\n            } else {\n                i +=\
    \ 1\n            }\n        }\n        return n", "        var i = 2l\n      \
    \  while (i <= n / 2l) {\n            if (n % i == 0) {\n                n /=\
    \ i\n            } else {\n                i += 1l\n            }\n        }\n\
    \        return n", "        var i = 2l\n        while (i <= n) {\n          \
    \  if (n % i == 0) {\n                n /= i\n            } else {\n         \
    \       i += 1\n            }\n        }\n        n", "        var i = 2l\n  \
    \      while (i <= n) {\n            if (n % i == 0) {\n                n /= i\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    n", "        if (n == 2l) {\n            2l\n        } else if (n == 3l)\
    \ {\n            3l\n        } else if (n % 2l == 0l) {\n            2l\n    \
    \    } else if (n % 3l == 0l) {\n            3l\n        } else {\n          \
    \  var i = 5l\n            while (n % i == 0l) {\n                i = i + 2l\n\
    \            }\n            largestPrimeFactor(n / i)\n        }", "        var\
    \ i = 2l\n        while (i * i <= n) {\n            if (n % i == 0) {\n      \
    \          n /= i\n            } else {\n                i += 1\n            }\n\
    \        }\n        n", "        var i = 2l\n        while (i <= n / 2) {\n  \
    \          if (n % i == 0) {\n                n /= i\n            } else {\n \
    \               i += 1\n            }\n        }\n        return n", "       \
    \ val factors = scala.collection.JavaConversions.seqAsJavaList(scala.math.factors(n))\n\
    \        val largestFactor = factors.max(new scala.math.Ordering[Long] {\n   \
    \         def compare(x : Long, y : Long) : Int = x.compareTo(y)\n        })\n\
    \        largestFactor", "        val factors = scala.math.factors(n)\n      \
    \  val largestFactor = factors.max()\n        if (largestFactor.isEmpty()) {\n\
    \            return n\n        } else {\n            return largestFactor\n  \
    \      }", "        val factors = new scala.collection.mutable.ArrayBuffer[Long]()\n\
    \        val primes = scala.math.primes.primes(n)\n        for (i <- 0 until primes.length)\
    \ {\n            val prime = primes[i]\n            if (prime > n) break\n   \
    \         val factor = n / prime\n            if (factor == 1) break\n       \
    \     factors.append(factor)\n        }\n        val result = factors.toList().head\n\
    \        if (result == n) {\n            result = n\n        }\n        return\
    \ result", "        var i = 2l\n        while (i * i <= n) {\n            if (n\
    \ % i == 0) {\n                n /= i\n            } else {\n                i\
    \ += 1\n            }\n        }\n        return n", "        val n2 = n.toInt\n\
    \        val n3 = n2.toInt\n        val n4 = n3.toInt\n        val n5 = n4.toInt\n\
    \        val n6 = n5.toInt\n        val n7 = n6.toInt\n        val n8 = n7.toInt\n\
    \        val n9 = n8.toInt\n        val n10 = n9.toInt\n        val n11 = n10.toInt\n\
    \        val n12 = n11.toInt\n        val n13 = n12.toInt\n        val n14 = n13.toInt\n\
    \        val n15 = n14.toInt\n        val n16 = n15.toInt\n        val n17 = n16.toInt\n\
    \        val n18 = n17.toInt\n        val n19 = n18.toInt\n        val n20 = n19.toInt\n\
    \        val n21 = n20.toInt\n        val n22 = n21.toInt\n        val n23 = n22.toInt\n\
    \        val n24 = n23.toInt\n        val n25 = n24.toInt\n        val n26 = n25.toInt\n\
    \        val n27 = n26.toInt\n        val n28 = n27.toInt\n        val n29 = n28.toInt\n\
    \        val n30 = n29.toInt\n        val n31 = n30.toInt\n        val n32 = n31.toInt\n\
    \        val n33 = n32.toInt\n        val n34 = n33.toInt\n        val n35 = n34.toInt\n\
    \        val n36 = n35.toInt\n        val n37 = n36.toInt\n        val n38 = n37.toInt\n\
    \        val n39 = n38.toInt\n        val n40 = n39.toInt\n        val n41 = n40.toInt\n\
    \        val n42 = n41.toInt\n        val n43 = n42.toInt\n        val n44 = n43.toInt\n\
    \        val n45 = n44.toInt\n        val n46 = n45.toInt\n        val n47 = n46.toInt\n\
    \        val n48 = n47", "        var i = 2l\n        while (i < n) {\n      \
    \      if (n % i == 0) {\n                n /= i\n            } else {\n     \
    \           i += 1\n            }\n        }\n        n", "        if (n == 1)\
    \ return 1l\n        if (n == 2) return 2l\n        if (n == 3) return 3l\n  \
    \      if (n == 4) return 2l\n        if (n == 5) return 5l\n        if (n ==\
    \ 6) return 3l\n        if (n == 7) return 7l\n        if (n == 8) return 2l\n\
    \        if (n == 9) return 9l\n        if (n == 10) return 5l\n        if (n\
    \ == 11) return 11l\n        if (n == 12) return 2l\n        if (n == 13) return\
    \ 13l\n        if (n == 14) return 7l\n        if (n == 15) return 15l\n     \
    \   if (n == 16) return 2l\n        if (n == 17) return 17l\n        if (n ==\
    \ 18) return 9l\n        if (n == 19) return 19l\n        if (n == 20) return\
    \ 2l\n        if (n == 21) return 21l\n        if (n == 22) return 2l\n      \
    \  if (n == 23) return 23l\n        if (n == 24) return 2l\n        if (n == 25)\
    \ return 5l\n        if (n == 26) return 2l\n        if (n == 27) return 27l\n\
    \        if (n == 28) return 2l\n        if (n == 29) return 29l\n        if (n\
    \ == 30) return 5l\n        if (n == 31) return 31l\n        if (n == 32) return\
    \ 2l\n        if (n == 33) return 2l\n        if (n == 34) return 2l\n       \
    \ if (n == 35) return 5l\n        if (n == 36) return 2l\n        if (n == 37)\
    \ return 2l\n        if (n == 38) return 2l\n        if (n == 39) return 39l\n\
    \        if (n == 40) return 2l\n        if (n == 41) return 41l\n        if (n\
    \ == 42) return 2l\n        if (n == 43) return 2l\n        if (n == 44) return\
    \ 2l\n        if (n == 45) return 5l\n        if (n == 46) return 2l\n       \
    \ if (n == 47", "        var i = 2l\n        while (i * i <= n) {\n          \
    \  if (n % i == 0) {\n                n /= i\n            } else {\n         \
    \       i += 1\n            }\n        }\n        n", "        val nn = n\n  \
    \      val nn2 = nn.shiftRight(1)\n        val nn3 = nn2.shiftRight(1)\n     \
    \   val nn4 = nn3.shiftRight(1)\n        val nn5 = nn4.shiftRight(1)\n       \
    \ val nn6 = nn5.shiftRight(1)\n        val nn7 = nn6.shiftRight(1)\n        val\
    \ nn8 = nn7.shiftRight(1)\n        val nn9 = nn8.shiftRight(1)\n        val nn10\
    \ = nn9.shiftRight(1)\n        val nn11 = nn10.shiftRight(1)\n        val nn12\
    \ = nn11.shiftRight(1)\n        val nn13 = nn12.shiftRight(1)\n        val nn14\
    \ = nn13.shiftRight(1)\n        val nn15 = nn14.shiftRight(1)\n        val nn16\
    \ = nn15.shiftRight(1)\n        val nn17 = nn16.shiftRight(1)\n        val nn18\
    \ = nn17.shiftRight(1)\n        val nn19 = nn18.shiftRight(1)\n        val nn20\
    \ = nn19.shiftRight(1)\n        val nn21 = nn20.shiftRight(1)\n        val nn22\
    \ = nn21.shiftRight(1)\n        val nn23 = nn22.shiftRight(1)\n        val nn24\
    \ = nn23.shiftRight(1)\n        val nn25 = nn24.shiftRight(1)\n        val nn26\
    \ = nn25.shiftRight(1)\n        val nn27 = nn26.shiftRight(1)\n        val nn28\
    \ = nn27.shiftRight(1)\n        val nn29 = nn28.shiftRight(1)\n        val nn30\
    \ = nn29.shiftRight(1)\n        val nn31 = nn30.shiftRight(1)\n        val nn32\
    \ = nn31.shiftRight(1)\n        val nn33 = nn32.", "        val n_ = n\n     \
    \   val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n\
    \        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_\
    \ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n      \
    \  val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n\
    \        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_\
    \ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n      \
    \  val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n\
    \        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_\
    \ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n      \
    \  val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n\
    \        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_\
    \ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n      \
    \  val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n\
    \        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_\
    \ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n      \
    \  val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n\
    \        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_\
    \ = n_\n        ", "        var i = 2l\n        while (i * i <= n) {\n       \
    \     if (n % i == 0) {\n                n /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        n", "        var i = 2l\n\
    \        while (i < n) {\n            if (n % i == 0) {\n                n /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        return n", "        var i = 2l\n        while (i <= n) {\n          \
    \  if (n % i == 0) {\n                n /= i\n            } else {\n         \
    \       i += 1\n            }\n        }\n        n", "        val n_ = n\n  \
    \      val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n\
    \        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ =\
    \ n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_\
    \ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val\
    \ n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n       \
    \ val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n   \
    \     val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n\
    \        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ =\
    \ n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_\
    \ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val\
    \ n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n       \
    \ val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n   \
    \     val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n\
    \        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ =\
    \ n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_\
    \ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val\
    \ n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n       \
    \ val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n   \
    \     val n_ = n\n        val n_ = n\n        val n_ = n\n        ", "       \
    \ val factors = scala.collection.JavaConversions.seqAsJavaList(scala.math.factors(n))\n\
    \        val maxFactor = factors.max(new scala.math.Ordering[Long] {\n       \
    \     def compare(x : Long, y : Long) : Int = x.compareTo(y)\n        })\n   \
    \     maxFactor", "        var i = 2l\n        while (i <= n / 2l) {\n       \
    \     if (n % i == 0) {\n                n = n / i\n            } else {\n   \
    \             i = i + 1l\n            }\n        }\n        n", "        if (n\
    \ == 1) return 1l\n        var i = 2l\n        while (i <= n / 2) {\n        \
    \    if (n % i == 0) {\n                return i\n            }\n            i\
    \ = i + 1l\n        }\n        return n", "        var i = 2l\n        while (i\
    \ * i <= n) {\n            if (n % i == 0) {\n                n /= i\n       \
    \         i = 2l\n            } else {\n                i += 1l\n            }\n\
    \        }\n        n", "        val factors = new ArrayBuffer[Long]()\n     \
    \   val n_ = n\n        while (n_ > 1) {\n            val p = _.findMax(n_)\n\
    \            factors += p\n            n_ /= p\n        }\n        val max = _.max(factors)\n\
    \        return max", "        val factors = scala.collection.JavaConversions.seqAsJavaList(scala.math.factors(n))\n\
    \        val largestFactor = factors.max(new scala.math.Ordering[Long] {\n   \
    \         def compare(x : Long, y : Long) : Int = {\n                if (x > y)\
    \ {\n                    return 1\n                } else if (x < y) {\n     \
    \               return -1\n                } else {\n                    return\
    \ 0\n                }\n            }\n        })\n        largestFactor", " \
    \       val factors = new scala.collection.mutable.LinkedHashMap[Long, Long]()\n\
    \        val primes = scala.math.primes.primes(n)\n        for (i <- primes) {\n\
    \            val p = primes[i]\n            val factor = n / p\n            if\
    \ (factor == 1) {\n                return p\n            }\n            factors.put(p,\
    \ factor)\n        }\n        return factors.max()", "        val nn = n\n   \
    \     val nn2 = nn.shiftRight(1)\n        val nn3 = nn2.shiftRight(1)\n      \
    \  val nn4 = nn3.shiftRight(1)\n        val nn5 = nn4.shiftRight(1)\n        val\
    \ nn6 = nn5.shiftRight(1)\n        val nn7 = nn6.shiftRight(1)\n        val nn8\
    \ = nn7.shiftRight(1)\n        val nn9 = nn8.shiftRight(1)\n        val nn10 =\
    \ nn9.shiftRight(1)\n        val nn11 = nn10.shiftRight(1)\n        val nn12 =\
    \ nn11.shiftRight(1)\n        val nn13 = nn12.shiftRight(1)\n        val nn14\
    \ = nn13.shiftRight(1)\n        val nn15 = nn14.shiftRight(1)\n        val nn16\
    \ = nn15.shiftRight(1)\n        val nn17 = nn16.shiftRight(1)\n        val nn18\
    \ = nn17.shiftRight(1)\n        val nn19 = nn18.shiftRight(1)\n        val nn20\
    \ = nn19.shiftRight(1)\n        val nn21 = nn20.shiftRight(1)\n        val nn22\
    \ = nn21.shiftRight(1)\n        val nn23 = nn22.shiftRight(1)\n        val nn24\
    \ = nn23.shiftRight(1)\n        val nn25 = nn24.shiftRight(1)\n        val nn26\
    \ = nn25.shiftRight(1)\n        val nn27 = nn26.shiftRight(1)\n        val nn28\
    \ = nn27.shiftRight(1)\n        val nn29 = nn28.shiftRight(1)\n        val nn30\
    \ = nn29.shiftRight(1)\n        val nn31 = nn30.shiftRight(1)\n        val nn32\
    \ = nn31.shiftRight(1)\n        val nn33 = nn32.", "        var i = 2l\n     \
    \   while (i * i <= n) {\n            if (n % i == 0) {\n                n /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        return n", "        val factors = new scala.collection.mutable.LinkedList[Long]\n\
    \        val max = n\n        while (max > 1) {\n            val prime = scala.math.factorial.divisors(max).head()\n\
    \            if (prime > max) break\n            factors.add(prime)\n        \
    \    max = max / prime\n        }\n        if (factors.isEmpty()) return 1l\n\
    \        val result = factors.head()\n        for (i <- 1 to factors.size - 1)\
    \ {\n            result = result * factors.apply(i)\n        }\n        return\
    \ result", "        if (n == 1) return 1l\n        if (n == 2) return 2l\n   \
    \     if (n == 3) return 3l\n        if (n == 4) return 2l\n        if (n == 5)\
    \ return 5l\n        if (n == 6) return 3l\n        if (n == 7) return 7l\n  \
    \      if (n == 8) return 2l\n        if (n == 9) return 9l\n        if (n ==\
    \ 10) return 5l\n        if (n == 11) return 11l\n        if (n == 12) return\
    \ 2l\n        if (n == 13) return 13l\n        if (n == 14) return 7l\n      \
    \  if (n == 15) return 15l\n        if (n == 16) return 2l\n        if (n == 17)\
    \ return 17l\n        if (n == 18) return 9l\n        if (n == 19) return 19l\n\
    \        if (n == 20) return 2l\n        if (n == 21) return 21l\n        if (n\
    \ == 22) return 2l\n        if (n == 23) return 23l\n        if (n == 24) return\
    \ 2l\n        if (n == 25) return 5l\n        if (n == 26) return 2l\n       \
    \ if (n == 27) return 27l\n        if (n == 28) return 2l\n        if (n == 29)\
    \ return 29l\n        if (n == 30) return 2l\n        if (n == 31) return 31l\n\
    \        if (n == 32) return 2l\n        if (n == 33) return 2l\n        if (n\
    \ == 34) return 2l\n        if (n == 35) return 5l\n        if (n == 36) return\
    \ 2l\n        if (n == 37) return 37l\n        if (n == 38) return 2l\n      \
    \  if (n == 39) return 39l\n        if (n == 40) return 2l\n        if (n == 41)\
    \ return 41l\n        if (n == 42) return 2l\n        if (n == 43) return 43l\n\
    \        if (n == 44) return 2l\n        if (n == 45) return 45l\n        if (n\
    \ == 46) return 2l\n        if (n == 47", "        var i = 2l\n        while (i\
    \ * i <= n) {\n            if (n % i == 0) {\n                n /= i\n       \
    \     } else {\n                i += 1\n            }\n        }\n        return\
    \ n", "        var i = 2l\n        while (i < n) {\n            if (n % i == 0)\
    \ {\n                n /= i\n            } else {\n                i += 1\n  \
    \          }\n        }\n        return n", "        val factors = scala.math.factors(n)\n\
    \        val max = factors.max()\n        if (max.isPrime()) return max\n    \
    \    else return factors.max()", "        val factors = scala.collection.JavaConversions.seqAsJavaList(scala.math.factors(n))\n\
    \        val largestFactor = factors.max(new scala.math.Ordering[Long] {\n   \
    \         def compare(x : Long, y : Long) : Int = x.compareTo(y)\n        })\n\
    \        largestFactor", "        var i = 2l\n        while (i <= n) {\n     \
    \       if (n % i == 0) {\n                n /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        n", "        val factors\
    \ = new java.util.ArrayList[Long]()\n        val i = 2l\n        while (i <= n)\
    \ {\n            if (n % i == 0) {\n                factors.add(i)\n         \
    \       n /= i\n            } else {\n                i += 1\n            }\n\
    \        }\n        if (n > 1) {\n            factors.add(n)\n        }\n    \
    \    val max = factors.stream().max(Long::compareTo).get()\n        if (max ==\
    \ n) {\n            return max\n        } else {\n            return max * max\n\
    \        }", "        val n2 = n.toInt\n        val factors = scala.collection.JavaConversions.seqAsJavaList(scala.math.factors(n2))\n\
    \        val factors2 = factors.filter(x => x > 1)\n        val factors3 = factors2.filter(x\
    \ => x % 2 == 0)\n        val factors4 = factors3.filter(x => x % 3 == 0)\n  \
    \      val factors5 = factors4.filter(x => x % 5 == 0)\n        val factors6 =\
    \ factors5.filter(x => x % 7 == 0)\n        val factors7 = factors6.filter(x =>\
    \ x % 11 == 0)\n        val factors8 = factors7.filter(x => x % 13 == 0)\n   \
    \     val factors9 = factors8.filter(x => x % 17 == 0)\n        val factors10\
    \ = factors9.filter(x => x % 19 == 0)\n        val factors11 = factors10.filter(x\
    \ => x % 23 == 0)\n        val factors12 = factors11.filter(x => x % 29 == 0)\n\
    \        val factors13 = factors12.filter(x => x % 31 == 0)\n        val factors14\
    \ = factors13.filter(x => x % 37 == 0)\n        val factors15 = factors14.filter(x\
    \ => x % 41 == 0)\n        val factors16 = factors15.filter(x => x % 43 == 0)\n\
    \        val factors17 = factors16.filter(x => x % 47 == 0)\n        val factors18\
    \ = factors17.filter(x => x % 53 == 0)\n        val factors19 = factors18.filter(x\
    \ => x % 59 == 0)\n        val factors20 = factors19.filter(x => x % 61 == 0)\n\
    \        val factors21 = factors20.filter(x => x % 67 == 0)\n        val factors22\
    \ = factors21.filter(x => x % 71 == 0)\n        val factors23 = factors22.filter(x\
    \ => x % 73 == 0)\n        val factors24 = factors23.filter(x => x % 79 == 0)\n\
    \        val factors25 = factors24.filter(x => x % 83 == 0)\n        val factors26\
    \ = factors25.filter(x => x % 89 == 0)\n", "        var i = 2l\n        while\
    \ (i * i <= n) {\n            if (n % i == 0) {\n                n /= i\n    \
    \        } else {\n                i += 1\n            }\n        }\n        n",
  "        var i = 2l\n        while (i < n) {\n            if (n % i == 0) {\n  \
    \              n /= i\n            } else {\n                i += 1\n        \
    \    }\n        }\n        return n", "        val n_ = n\n        val i = 2l\n\
    \        while (i <= n_) {\n            if (n_ % i == 0) {\n                n_\
    \ = n_ / i\n            } else {\n                i = i + 1l\n            }\n\
    \        }\n        n_", "        var i = 2l\n        while (i * i <= n) {\n \
    \           if (n % i == 0) {\n                n /= i\n            } else {\n\
    \                i += 1\n            }\n        }\n        return n", "      \
    \  val n2 = n.toInt\n        val factors = ListBuffer[Long]\n        val i = 2\n\
    \        while (i <= n2) {\n            if (n2 % i == 0) {\n                factors.append(i)\n\
    \                n2 /= i\n            } else {\n                i += 1\n     \
    \       }\n        }\n        val result = factors.toList.head\n        if (result\
    \ == n) {\n            result = n\n        }\n        return result", "      \
    \  val factors = scala.collection.JavaConversions.seqAsJavaList(scala.math.factors(n))\n\
    \        val largestFactor = factors.max(Long::compareTo)\n        if (largestFactor.isEmpty())\
    \ {\n            throw new RuntimeException(\"No prime factors found\")\n    \
    \    } else {\n            return largestFactor\n        }", "        var i =\
    \ 2l\n        while (i <= n / 2l) {\n            if (n % i == 0) {\n         \
    \       n = n / i\n            } else {\n                i = i + 1l\n        \
    \    }\n        }\n        return n", "        var i = 2l\n        while (i <=\
    \ n) {\n            if (n % i == 0) {\n                n = n / i\n           \
    \ } else {\n                i = i + 1l\n            }\n        }\n        n",
  "        var i = 2l\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
    \                n /= i\n            } else {\n                i += 1\n      \
    \      }\n        }\n        return n", "        val factors = scala.math.factors(n)\n\
    \        val max = factors.max()\n        val maxFactor = factors.apply(max)\n\
    \        maxFactor", "        val n_ = n\n        val n_ = n\n        val n_ =\
    \ n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_\
    \ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val\
    \ n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n       \
    \ val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n   \
    \     val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n\
    \        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ =\
    \ n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_\
    \ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val\
    \ n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n       \
    \ val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n   \
    \     val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n\
    \        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ =\
    \ n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_\
    \ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val\
    \ n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n       \
    \ val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n   \
    \     val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n\
    \        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ =\
    \ n\n        val n_ = n\n        ", "        var i = 2l\n        while (i <= n)\
    \ {\n            if (n % i == 0) {\n                n /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        n", "        val\
    \ n2 = n.toInt\n        val factors = scala.collection.mutable.ListBuffer[Long]\n\
    \        val max = scala.math.maxInt\n        val i = max\n        while (i >\
    \ 0) {\n            val p = i\n            val j = max\n            while (j >\
    \ 0) {\n                if (p % j == 0) {\n                    factors.append(j)\n\
    \                    p = p / j\n                } else {\n                   \
    \ j = j - 1\n                }\n            }\n            i = i - 1\n       \
    \ }\n        val result = factors.toList.head\n        if (result.isEmpty) {\n\
    \            throw new RuntimeException(\"No prime factors found\")\n        }\
    \ else {\n            return result.head\n        }", "        val factors = scala.math.factors(n)\n\
    \        val maxFactor = factors.max()\n        val maxFactorValue = maxFactor._1\n\
    \        val maxFactorValueFactor = maxFactor._2\n        maxFactorValueFactor.foreach(f\
    \ -> {\n            if (f.isPrime()) {\n                val f2 = f.div(maxFactorValueFactor)\n\
    \                if (f2.isPrime()) {\n                    return\n           \
    \     }\n            }\n            throw new RuntimeException(\"Factor \" + f\
    \ + \" is not prime\")\n        })\n        return maxFactorValueFactor", "  \
    \      val n_ = n\n        val n_ = n_\n        val n_ = n_\n        val n_ =\
    \ n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val\
    \ n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n   \
    \     val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ =\
    \ n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val\
    \ n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n   \
    \     val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ =\
    \ n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val\
    \ n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n   \
    \     val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ =\
    \ n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val\
    \ n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n   \
    \     val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ =\
    \ n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val\
    \ n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n   \
    \     val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ =\
    \ n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val\
    \ n_ = n_\n        val n_ = n_\n        ", "        var i = 2l\n        while\
    \ (i <= n) {\n            if (n % i == 0) {\n                n /= i\n        \
    \    } else {\n                i += 1\n            }\n        }\n        n", " \
    \       val factors = new scala.collection.mutable.LinkedHashSet[Long]()\n   \
    \     val limit = (long) Math.sqrt(n)\n        for (i <- 1 to limit) {\n     \
    \       if (n % i == 0) {\n                factors.add(i)\n                factors.add(n\
    \ / i)\n            }\n        }\n        val factorsArray = factors.toArray[Long]\n\
    \        val max = factorsArray[0]\n        for (i <- 1 to factorsArray.length\
    \ - 1) {\n            if (factorsArray[i] > max) max = factorsArray[i]\n     \
    \   }\n        return max", "        if (n == 1) return 1l\n        if (n == 2)\
    \ return 2l\n        if (n == 3) return 3l\n        if (n == 4) return 2l\n  \
    \      if (n == 5) return 5l\n        if (n == 6) return 3l\n        if (n ==\
    \ 7) return 7l\n        if (n == 8) return 2l\n        if (n == 9) return 9l\n\
    \        if (n == 10) return 5l\n        if (n == 11) return 11l\n        if (n\
    \ == 12) return 2l\n        if (n == 13) return 13l\n        if (n == 14) return\
    \ 7l\n        if (n == 15) return 3l\n        if (n == 16) return 2l\n       \
    \ if (n == 17) return 17l\n        if (n == 18) return 2l\n        if (n == 19)\
    \ return 19l\n        if (n == 20) return 2l\n        if (n == 21) return 3l\n\
    \        if (n == 22) return 2l\n        if (n == 23) return 23l\n        if (n\
    \ == 24) return 2l\n        if (n == 25) return 5l\n        if (n == 26) return\
    \ 2l\n        if (n == 27) return 3l\n        if (n == 28) return 2l\n       \
    \ if (n == 29) return 29l\n        if (n == 30) return 2l\n        if (n == 31)\
    \ return 31l\n        if (n == 32) return 2l\n        if (n == 33) return 2l\n\
    \        if (n == 34) return 2l\n        if (n == 35) return 5l\n        if (n\
    \ == 36) return 2l\n        if (n == 37) return 2l\n        if (n == 38) return\
    \ 2l\n        if (n == 39) return 2l\n        if (n == 40) return 2l\n       \
    \ if (n == 41) return 2l\n        if (n == 42) return 2l\n        if (n == 43)\
    \ return 2l\n        if (n == 44) return 2l\n        if (n == 45) return 3l\n\
    \        if (n == 46) return 2l\n        if (n == 47", "        val factors =\
    \ factors(n)\n        val max = factors.max\n        val maxFactor = max(factors)\n\
    \        val maxFactorValue = maxFactor.value\n        val maxFactorValueInt =\
    \ maxFactorValue.toInt\n        val maxFactorValueIntValue = maxFactorValueInt.value\n\
    \        val maxFactorValueIntValueInt = maxFactorValueIntValue.toInt\n      \
    \  val maxFactorValueIntValueIntValue = maxFactorValueIntValueInt.value\n    \
    \    val maxFactorValueIntValueIntValueInt = maxFactorValueIntValueIntValue.toInt\n\
    \        val maxFactorValueIntValueIntValueIntValue = maxFactorValueIntValueIntValueInt.value\n\
    \        val maxFactorValueIntValueIntValueIntValueInt = maxFactorValueIntValueIntValueIntValue.toInt\n\
    \        val maxFactorValueIntValueIntValueIntValueIntValue = maxFactorValueIntValueIntValueIntValueInt.value\n\
    \        val maxFactorValueIntValueIntValueIntValueIntValueInt = maxFactorValueIntValueIntValueIntValueIntValue.toInt\n\
    \        val maxFactorValueIntValueIntValueIntValueIntValueIntValue = maxFactorValueIntValueIntValueIntValueIntValueInt.value\n\
    \        val maxFactorValueIntValueIntValueIntValueIntValueIntValueInt = maxFactorValueIntValueIntValueIntValueIntValueIntValue.toInt\n\
    \        val maxFactorValueIntValueIntValueIntValueIntValueIntValueIntValue =\
    \ maxFactorValueIntValueIntValueIntValueIntValueIntValueInt.value\n        val\
    \ maxFactorValueIntValueIntValueIntValueIntValueIntValueIntValueInt = maxFactorValueIntValueIntValueIntValueIntValueIntValueIntValue.toInt\n\
    \        val maxFactorValueIntValueIntValueIntValueIntValueIntValueIntValueIntValue\
    \ = maxFactorValueIntValueIntValueIntValueIntValueIntValueIntValueInt.value\n\
    \        val maxFactorValueIntValueIntValueIntValueIntValueIntValueIntValueIntValueInt\
    \ = maxFactorValueIntValueIntValueIntValueIntValueIntValueIntValueIntValue.toInt\n\
    \        val maxFactorValueIntValueIntValueIntValueIntValueIntValueIntValueIntValueIntValue\
    \ = maxFactorValueIntValueIntValueIntValueIntValueIntValueIntValueIntValue.value\n\
    \        val maxFactorValueIntValueIntValueIntValueIntValueIntValueIntValueInt",
  "        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n\
    \        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ =\
    \ n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_\
    \ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val\
    \ n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n       \
    \ val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n   \
    \     val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n\
    \        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ =\
    \ n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_\
    \ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val\
    \ n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n       \
    \ val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n   \
    \     val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n\
    \        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ =\
    \ n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_\
    \ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val\
    \ n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n       \
    \ val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n   \
    \     val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n\
    \        ", "        val n2 = n.toInt\n        val factors = scala.collection.mutable.ListBuffer[Long]\n\
    \        val i = 2\n        while (i <= n2) {\n            if (n2 % i == 0) {\n\
    \                factors.append(i)\n                n2 /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        if (n2 > 1) {\n\
    \            factors.append(n2)\n        }\n        val factors2 = scala.collection.mutable.ListBuffer[Long]\n\
    \        for (i <- factors) {\n            if (i > 1 && i < n) {\n           \
    \     factors2.append(i)\n            }\n        }\n        val factors3 = scala.collection.mutable.ListBuffer[Long]\n\
    \        for (i <- factors2) {\n            if (i > 1 && i < n) {\n          \
    \      factors3.append(i)\n            }\n        }\n        val factors4 = scala.collection.mutable.ListBuffer[Long]\n\
    \        for (i <- factors3) {\n            if (i > 1 && i < n) {\n          \
    \      factors4.append(i)\n            }\n        }\n        val factors5 = scala.collection.mutable.ListBuffer[Long]\n\
    \        for (i <- factors4) {\n            if (i > 1 && i < n) {\n          \
    \      factors5.append(i)\n            }\n        }\n        val factors6 = scala.collection.mutable.ListBuffer[Long]\n\
    \        for (i <- factors5) {\n            if (i > 1 && i < n) {\n          \
    \      factors6.append(i)\n            }\n        }\n        val factors7 = scala.collection.mutable.ListBuffer[Long]\n\
    \        for (i <- factors6) {\n            if (i > 1 && i < n) {\n          \
    \      factors7.append(i)\n            }\n        }\n        val factors8 = scala.collection.mutable.ListBuffer[Long]\n\
    \        for (i <- factors7) {\n            if (i > 1 && i < n) {\n          \
    \      factors8.append(i)\n            }", "        val factors = scala.collection.JavaConversions.seqAsJavaList(scala.math.factors(n))\n\
    \        val largestFactor = factors.max(new scala.math.Ordering[Long] {\n   \
    \         def compare(x : Long, y : Long) : Int = {\n                if (x > y)\
    \ {\n                    return 1\n                } else if (x < y) {\n     \
    \               return -1\n                } else {\n                    return\
    \ 0\n                }\n            }\n        })\n        largestFactor", " \
    \       val factors = scala.math.factors(n)\n        val maxFactor = factors.max()\n\
    \        val maxFactorValue = maxFactor._1\n        val maxFactorValueValue =\
    \ maxFactorValue._1\n        maxFactorValueValue", "        var i = 2l\n     \
    \   while (i <= n) {\n            if (n % i == 0) {\n                n /= i\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    n", "        val factors = scala.math.factors(n)\n        val maxFactor =\
    \ factors.max()\n        val maxFactorValue = maxFactor.getAsLong()\n        val\
    \ maxFactorValueFactor = factors.find(f -> f.getAsLong() == maxFactorValue)\n\
    \        maxFactorValueFactor.getAsLong()", "        val factors = scala.math.factors(n)\n\
    \        val max = factors.max()\n        val maxFactor = factors.apply(max)\n\
    \        maxFactor", "        val factors = scala.collection.JavaConversions.seqAsJavaList(scala.math.factors(n))\n\
    \        val largestFactor = factors.max(new scala.math.Ordering[Long] {\n   \
    \         def compare(x : Long, y : Long) : Int = x.compareTo(y)\n        })\n\
    \        largestFactor", "        var i = 2l\n        while (i * i <= n) {\n \
    \           if (n % i == 0) {\n                n /= i\n                i = 2l\n\
    \            } else {\n                i += 1l\n            }\n        }\n   \
    \     return n", "        val factors = new scala.collection.mutable.LinkedList[Long]()\n\
    \        val n2 = n\n        while (n2 > 1) {\n            val d = n2.div(2)\n\
    \            if (d.isZero()) {\n                factors.append(2l)\n         \
    \       n2 = n2 / 2l\n            } else {\n                val d2 = d.div(2)\n\
    \                if (d2.isZero()) {\n                    factors.append(2l)\n\
    \                    n2 = n2 / 2l\n                } else {\n                \
    \    factors.append(d2)\n                    n2 = n2 / d2\n                }\n\
    \            }\n        }\n        val max = factors.max()\n        if (max.isZero())\
    \ {\n            return n\n        } else {\n            return max\n        }",
  "        if (n == 1) return 1l\n        if (n == 2) return 2l\n        if (n ==\
    \ 3) return 3l\n        if (n == 4) return 2l\n        if (n == 5) return 5l\n\
    \        if (n == 6) return 3l\n        if (n == 7) return 7l\n        if (n ==\
    \ 8) return 2l\n        if (n == 9) return 9l\n        if (n == 10) return 5l\n\
    \        if (n == 11) return 11l\n        if (n == 12) return 2l\n        if (n\
    \ == 13) return 13l\n        if (n == 14) return 7l\n        if (n == 15) return\
    \ 3l\n        if (n == 16) return 2l\n        if (n == 17) return 17l\n      \
    \  if (n == 18) return 2l\n        if (n == 19) return 19l\n        if (n == 20)\
    \ return 2l\n        if (n == 21) return 3l\n        if (n == 22) return 2l\n\
    \        if (n == 23) return 23l\n        if (n == 24) return 2l\n        if (n\
    \ == 25) return 5l\n        if (n == 26) return 2l\n        if (n == 27) return\
    \ 3l\n        if (n == 28) return 2l\n        if (n == 29) return 29l\n      \
    \  if (n == 30) return 2l\n        if (n == 31) return 31l\n        if (n == 32)\
    \ return 2l\n        if (n == 33) return 2l\n        if (n == 34) return 2l\n\
    \        if (n == 35) return 5l\n        if (n == 36) return 2l\n        if (n\
    \ == 37) return 2l\n        if (n == 38) return 2l\n        if (n == 39) return\
    \ 2l\n        if (n == 40) return 2l\n        if (n == 41) return 2l\n       \
    \ if (n == 42) return 2l\n        if (n == 43) return 2l\n        if (n == 44)\
    \ return 2l\n        if (n == 45) return 3l\n        if (n == 46) return 2l\n\
    \        if (n == 47", "        var i = 2l\n        while (i <= n) {\n       \
    \     if (n % i == 0) {\n                n /= i\n            } else {\n      \
    \          i += 1\n            }\n        }\n        n", "        val factors\
    \ = scala.collection.JavaConversions.seqAsJavaList(scala.math.factors(n))\n  \
    \      val largestFactor = factors.max(new scala.math.Ordering[Long] {\n     \
    \       def compare(x : Long, y : Long) : Int = x.compareTo(y)\n        })\n \
    \       largestFactor", "        val factors = scala.math.factors(n)\n       \
    \ val maxFactor = factors.max()\n        val maxFactorValue = maxFactor.getAsLong()\n\
    \        val maxFactorValueFactor = factors.find(f -> f.getAsLong() == maxFactorValue)\n\
    \        val maxFactorValueFactorFactor = maxFactorValueFactor.getAsLong()\n \
    \       maxFactorValueFactorFactor", "        var i = 2l\n        while (i <=\
    \ n) {\n            if (n % i == 0) {\n                n /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        n", "        val\
    \ factors = new scala.collection.mutable.LinkedList[Long]()\n        val i = 2l\n\
    \        while (i <= n) {\n            if (n % i == 0) {\n                factors.add(i)\n\
    \                n /= i\n            } else {\n                i += 1\n      \
    \      }\n        }\n        if (n > 1) {\n            factors.add(n)\n      \
    \  }\n        val result = factors.head\n        factors.foreach(f -> {\n    \
    \        if (f > result) {\n                result = f\n            }\n      \
    \  })\n        return result", "        val factors = new scala.collection.mutable.LinkedList[Long]()\n\
    \        val n2 = n\n        while (n2 > 1) {\n            val p = scala.math.factorial(n2)\n\
    \            if (p > n2) break\n            factors.add(p)\n            n2 = n2\
    \ / p\n        }\n        val max = 0l\n        for (i <- 0 until factors.size)\
    \ {\n            val p = factors.apply(i)\n            if (p > max) max = p\n\
    \        }\n        return max", "        val factors = new ArrayBuffer[Long]()\n\
    \        val nb = n.bitLength()\n        for (i <- 0 until (nb - 1)) {\n     \
    \       val bit = (n & 1)\n            n >>>= 1\n            if (bit == 1) {\n\
    \                val factor = nb - i\n                factors += factor\n    \
    \        }\n        }\n        val max = factors.max()\n        return max", " \
    \       var i = 2l\n        while (i * i <= n) {\n            if (n % i == 0)\
    \ {\n                n /= i\n            } else {\n                i += 1\n  \
    \          }\n        }\n        return n", "        if (n == 1) return 1l\n \
    \       if (n == 2) return 2l\n        if (n == 3) return 3l\n        if (n ==\
    \ 4) return 2l\n        if (n == 5) return 5l\n        if (n == 6) return 3l\n\
    \        if (n == 7) return 7l\n        if (n == 8) return 2l\n        if (n ==\
    \ 9) return 9l\n        if (n == 10) return 5l\n        if (n == 11) return 11l\n\
    \        if (n == 12) return 2l\n        if (n == 13) return 13l\n        if (n\
    \ == 14) return 7l\n        if (n == 15) return 15l\n        if (n == 16) return\
    \ 2l\n        if (n == 17) return 17l\n        if (n == 18) return 9l\n      \
    \  if (n == 19) return 19l\n        if (n == 20) return 2l\n        if (n == 21)\
    \ return 21l\n        if (n == 22) return 2l\n        if (n == 23) return 23l\n\
    \        if (n == 24) return 2l\n        if (n == 25) return 5l\n        if (n\
    \ == 26) return 2l\n        if (n == 27) return 27l\n        if (n == 28) return\
    \ 2l\n        if (n == 29) return 29l\n        if (n == 30) return 2l\n      \
    \  if (n == 31) return 31l\n        if (n == 32) return 2l\n        if (n == 33)\
    \ return 2l\n        if (n == 34) return 2l\n        if (n == 35) return 5l\n\
    \        if (n == 36) return 2l\n        if (n == 37) return 37l\n        if (n\
    \ == 38) return 2l\n        if (n == 39) return 39l\n        if (n == 40) return\
    \ 2l\n        if (n == 41) return 41l\n        if (n == 42) return 2l\n      \
    \  if (n == 43) return 43l\n        if (n == 44) return 2l\n        if (n == 45)\
    \ return 45l\n        if (n == 46) return 2l\n        if (n == 47", "        val\
    \ nn = n\n        if (nn == 0) {\n            throw new IllegalArgumentException(\"\
    n must be > 0\")\n        }\n        if (nn == 1) {\n            throw new IllegalArgumentException(\"\
    n must be > 1\")\n        }\n        val nn2 = nn\n        if (nn2 % 2 == 0) {\n\
    \            nn2 /= 2\n        }\n        if (nn2 % 3 == 0) {\n            nn2\
    \ /= 3\n        }\n        if (nn2 % 5 == 0) {\n            nn2 /= 5\n       \
    \ }\n        if (nn2 % 7 == 0) {\n            nn2 /= 7\n        }\n        if\
    \ (nn2 % 11 == 0) {\n            nn2 /= 11\n        }\n        if (nn2 % 13 ==\
    \ 0) {\n            nn2 /= 13\n        }\n        if (nn2 % 17 == 0) {\n     \
    \       nn2 /= 17\n        }\n        if (nn2 % 19 == 0) {\n            nn2 /=\
    \ 19\n        }\n        if (nn2 % 23 == 0) {\n            nn2 /= 23\n       \
    \ }\n        if (nn2 % 29 == 0) {\n            nn2 /= 29\n        }\n        if\
    \ (nn2 % 31 == 0) {\n            nn2 /= 31\n        }\n        if (nn2 % 37 ==\
    \ 0) {\n            nn2 /= 37\n        }\n        if (nn2 % 41 == 0) {\n     \
    \       nn2 /= 41\n        }\n        if (nn2 % 43 == 0) {\n            nn2 /=\
    \ 43\n        }\n        if (nn2 % 47 == 0) {\n            nn2 /= 47\n       \
    \ }\n        if (nn2 % 53 == 0) {\n            nn2 /= 53\n        }\n        if\
    \ (nn2 % 59 == 0) {\n            nn2 /= 59\n        }\n        if (nn2 % 61 ==\
    \ 0) {\n            nn2 /= 61\n        }\n        if (nn2 % 67 == 0) {\n     \
    \       nn2 /= 67\n        }\n        if (nn2 % 71 == 0) {\n            nn2 /=\
    \ 71\n        }\n        if", "        if (n == 2l) {\n            return 2l\n\
    \        } else if (n % 2l == 0l) {\n            return 2l\n        } else if\
    \ (n % 3l == 0l) {\n            return 3l\n        } else if (n % 5l == 0l) {\n\
    \            return 5l\n        } else if (n % 7l == 0l) {\n            return\
    \ 7l\n        } else if (n % 11l == 0l) {\n            return 11l\n        } else\
    \ if (n % 13l == 0l) {\n            return 13l\n        } else if (n % 17l ==\
    \ 0l) {\n            return 17l\n        } else if (n % 19l == 0l) {\n       \
    \     return 19l\n        } else if (n % 23l == 0l) {\n            return 23l\n\
    \        } else if (n % 29l == 0l) {\n            return 29l\n        } else if\
    \ (n % 31l == 0l) {\n            return 31l\n        } else if (n % 37l == 0l)\
    \ {\n            return 37l\n        } else if (n % 41l == 0l) {\n           \
    \ return 41l\n        } else if (n % 43l == 0l) {\n            return 43l\n  \
    \      } else if (n % 47l == 0l) {\n            return 47l\n        } else if\
    \ (n % 53l == 0l) {\n            return 53l\n        } else if (n % 59l == 0l)\
    \ {\n            return 59l\n        } else if (n % 61l == 0l) {\n           \
    \ return 61l\n        } else if (n % 67l == 0l) {\n            return 67l\n  \
    \      } else if (n % 71l == 0l) {\n            return 71l\n        } else if\
    \ (n % 73l == 0l) {\n            return 73l\n        } else if (n % 79l == 0l)\
    \ {\n            return 79l\n        } else if (n % 83l == 0l) {\n           \
    \ return 83l\n        } else if (n % 89l == 0l) {\n            return 89l\n  \
    \      } else if (n % 97l == 0l) {\n            return", "        var i = 2l\n\
    \        while (i * i <= n) {\n            if (n % i == 0) {\n               \
    \ n /= i\n            } else {\n                i += 1\n            }\n      \
    \  }\n        n", "        val factors = new scala.collection.mutable.ArrayBuffer[Long]()\n\
    \        val i = 0\n        while (n > 1) {\n            val p = primeFactors(n)\n\
    \            if (p > 1) {\n                factors.add(p)\n                n =\
    \ n / p\n            } else {\n                n = n - 1\n            }\n    \
    \    }\n        val max = 0l\n        for (i <- 0 until factors.size) {\n    \
    \        val p = factors.apply(i)\n            if (p > max) max = p\n        }\n\
    \        return max\n    }\n\n    // Return the prime factors of n. Assume n >\
    \ 1 and is not a prime.\n    // >>> primeFactors((13195l))\n    // [29, 7, 97,\
    \ 193, 37, 79, 163, 31, 61, 89, 137, 23, 47, 103, 211, 53, 107,\n    // 223, 59,\
    \ 139, 29, 53, 113, 227, 43, 71, 149, 29, 61, 89, 137, 23, 47,\n    // 103, 211,\
    \ 53, 107, 223, 59, 139, 29, 53, 113, 227, 43, 71, 149, 29, 61,\n    // 89, 137,\
    \ 23, 47, 103, 211, 53, 107, 223, 59, 139, 29, 53, 113, 227, 43,\n    // 71, 149,\
    \ 29, 61, 89, 137, 23, 47, 103, 211, 53, 107, 223, 59, 139, 29,\n    // 53, 113,\
    \ 227, 43, 71, 149, 29, 61, 89, 137, 23, 47, 103, 211, 53, 107,\n    // 223, 59,\
    \ 139, 29, 53, 113, 227, 43, 71, 149, 29, 61, 89, 137, 23, 47,\n    // 103, 211,\
    \ 53, 107, 223, 59, 139, 29, 53, 113, 227, 43, 71, 149, 29, 61,\n    // 89, 137,\
    \ 23, 47, 103, 211, 53, 107, 223, 59, 139, 29, 53, 113, 227, 43,\n    // 71, 149,\
    \ 29, 61, 89, 137, 23, 47, 103,", "        var i = 2l\n        while (i <= n)\
    \ {\n            if (n % i == 0) {\n                n /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        n", "        var\
    \ i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n          \
    \      n = n / i\n                i = 2l\n            } else {\n             \
    \   i = i + 1l\n            }\n        }\n        n", "        var i = 2l\n  \
    \      while (i * i <= n) {\n            if (n % i == 0) {\n                n\
    \ /= i\n                i = 2l\n            } else {\n                i += 1l\n\
    \            }\n        }\n        n", "        var i = 2l\n        while (i <=\
    \ n) {\n            if (n % i == 0) {\n                n /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        n", "        val\
    \ factors = _.range(1, n.intValue()).filter(i -> n % i == 0).toSeq\n        val\
    \ max = factors.maxBy(i -> i)\n        val maxFactor = max._1\n        val maxFactorValue\
    \ = maxFactor._1\n        return maxFactorValue", "        var i = 2l\n      \
    \  while (i <= n) {\n            if (n % i == 0) {\n                n /= i\n \
    \           } else {\n                i += 1\n            }\n        }\n     \
    \   n", "        var i = 2l\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                n /= i\n            } else {\n                i += 1\n\
    \            }\n        }\n        n", "        var i = 2l\n        while (i <=\
    \ n) {\n            if (n % i == 0) {\n                n /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        n", "        val\
    \ factors = _.range(2, n.intValue() + 1).filter(_.isPrime).toList\n        if\
    \ (factors.size == 0) {\n            throw new RuntimeException(\"No prime factors\
    \ found\")\n        } else {\n            return factors.head\n        }", " \
    \       val factors = scala.math.factors(n)\n        val max = factors.max()\n\
    \        if (max.isEmpty()) return n\n        else return max", "        val factors\
    \ = scala.math.factors(n)\n        val max = factors.max()\n        if (max.isEmpty())\
    \ return n\n        val maxFactor = max.head()\n        val maxFactorValue = maxFactor.getAsLong()\n\
    \        if (maxFactorValue == n) return n\n        return maxFactorValue", " \
    \       var i = 2L\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                n /= i\n            } else {\n                i += 1\n      \
    \      }\n        }\n        n", "        if (n == 0) {\n            throw new\
    \ IllegalArgumentException(\"n must be > 0\")\n        }\n        if (n == 1)\
    \ {\n            throw new IllegalArgumentException(\"n must be > 1\")\n     \
    \   }\n        if (n == 2) {\n            return 2l\n        }\n        if (n\
    \ == 3) {\n            return 3l\n        }\n        if (n == 4) {\n         \
    \   return 2l\n        }\n        if (n == 5) {\n            return 5l\n     \
    \   }\n        if (n == 6) {\n            return 2l\n        }\n        if (n\
    \ == 7) {\n            return 7l\n        }\n        if (n == 8) {\n         \
    \   return 2l\n        }\n        if (n == 9) {\n            return 9l\n     \
    \   }\n        if (n == 10) {\n            return 2l\n        }\n        if (n\
    \ == 11) {\n            return 11l\n        }\n        if (n == 12) {\n      \
    \      return 2l\n        }\n        if (n == 13) {\n            return 13l\n\
    \        }\n        if (n == 14) {\n            return 2l\n        }\n       \
    \ if (n == 15) {\n            return 15l\n        }\n        if (n == 16) {\n\
    \            return 2l\n        }\n        if (n == 17) {\n            return\
    \ 17l\n        }\n        if (n == 18) {\n            return 2l\n        }\n \
    \       if (n == 19) {\n            return 19l\n        }\n        if (n == 20)\
    \ {\n            return 2l\n        }\n        if (n == 21) {\n            return\
    \ 21l\n        }\n        if (n == 22) {\n            return 2l\n        }\n \
    \       if (n == 23) {\n            return 23l\n        }\n        if (n == 24)\
    \ {\n            return 2l\n        }\n        if (n == 25) {\n            return\
    \ 25l\n        }\n        if (n == 26) {\n            return 2l\n        }\n \
    \       if (n == 27) {\n            return 27l\n        }\n        if (n == 28)\
    \ {\n            return 2l\n        }", "        val n_ = n\n        val n_ =\
    \ n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_\
    \ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val\
    \ n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n       \
    \ val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n   \
    \     val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n\
    \        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ =\
    \ n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_\
    \ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val\
    \ n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n       \
    \ val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n   \
    \     val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n\
    \        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ =\
    \ n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_\
    \ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val\
    \ n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n       \
    \ val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n   \
    \     val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n\
    \        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ =\
    \ n\n        val n_ = n\n        val n_ = n\n        ", "        var i = 2l\n\
    \        while (i <= n) {\n            if (n % i == 0) {\n                n /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        n", "        val factors = scala.collection.JavaConversions.seqAsJavaList(scala.math.factors(n))\n\
    \        val largestFactor = factors.max(new scala.math.Ordering[Long] {\n   \
    \         def compare(x : Long, y : Long) : Int = {\n                if (x > y)\
    \ return 1\n                if (x < y) return -1\n                return 0\n \
    \           }\n        })\n        largestFactor", "        var i = 2l\n     \
    \   while (i <= n) {\n            if (n % i == 0) {\n                n = n / i\n\
    \            } else {\n                i = i + 1l\n            }\n        }\n\
    \        n", "        var i = 2l\n        while (i <= n) {\n            if (n\
    \ % i == 0) {\n                n /= i\n            } else {\n                i\
    \ += 1\n            }\n        }\n        return n", "        var i = 2l\n   \
    \     while (i <= n) {\n            if (n % i == 0) {\n                n /= i\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    n", "        val factors = scala.math.factors(n)\n        val max = factors.max()\n\
    \        if (max.isEmpty())\n            return n\n        else\n            return\
    \ max.head()", "        var i = 2L\n        while (i * i <= n) {\n           \
    \ if (n % i == 0) {\n                n /= i\n            } else {\n          \
    \      i += 1\n            }\n        }\n        n", "        val factors = scala.math.factors(n)\n\
    \        val max = factors.max()\n        val maxFactor = factors.apply(max)\n\
    \        maxFactor", "        val factors = scala.math.factors(n)\n        val\
    \ max = factors.max()\n        val maxFactor = factors.apply(max)\n        maxFactor",
  "        val factors = factors(n)\n        if (factors.isEmpty()) {\n          \
    \  throw new RuntimeException(\"No prime factors found\")\n        }\n       \
    \ val largest = factors.max\n        val largestFactor = largest._1\n        if\
    \ (largestFactor == 0) {\n            throw new RuntimeException(\"No prime factors\
    \ found\")\n        }\n        return largestFactor\n    }\n\n    // Return a\
    \ Scala Seq of prime factors of n. Assume n > 1 and is not a prime.\n    // >>>\
    \ primeFactors((13195l))\n    // Seq(29l, 2l)\n    // >>> primeFactors((2048l))\n\
    \    // Seq(2l, 2l)\n    def primeFactors(n : Long) : Seq[Long] = {\n        val\
    \ factors = factors(n)\n        if (factors.isEmpty()) {\n            throw new\
    \ RuntimeException(\"No prime factors found\")\n        }\n        return factors\n\
    \    }\n\n    // Return a Scala Map of prime factors of n to their respective\
    \ exponents.\n    // Assume n > 1 and is not a prime.\n    // >>> primeFactorExponents((13195l))\n\
    \    // Map(29 -> 1, 2 -> 1)\n    // >>> primeFactorExponents((2048l))\n    //\
    \ Map(2 -> 1, 2 -> 1)\n    def primeFactorExponents(n : Long) : Map[Long, Int]\
    \ = {\n        val factors = factors(n)\n        if (factors.isEmpty()) {\n  \
    \          throw new RuntimeException(\"No prime factors found\")\n        }\n\
    \        val result = Map.empty[Long, Int]\n        factors.foreach(f -> result\
    \ = result.put(f, 1))\n        return result\n    }\n\n    // Return a Scala Map\
    \ of prime factors of n to their respective exponents.\n    // Assume n > 1 and\
    \ is not a prime.\n    // >>> primeFactorExponents2((13195l))\n    // Map(29 ->\
    \ 1, 2 -> 1)\n    // >>> primeFactorExponents2((2048l))\n    // Map(2 -> 1, 2\
    \ -> 1)\n    def primeFactorExponents2(n : Long) : Map[Long, Int] = {\n      \
    \  val factors = factors", "        var i = 2l\n        while (i <= n) {\n   \
    \         if (n % i == 0) {\n                n /= i\n            } else {\n  \
    \              i += 1\n            }\n        }\n        n", "        var i =\
    \ 2l\n        while (i <= n / 2l) {\n            if (n % i == 0) {\n         \
    \       n = n / i\n            } else {\n                i = i + 1l\n        \
    \    }\n        }\n        return n", "        var i = 2l\n        while (i <=\
    \ n) {\n            if (n % i == 0) {\n                n /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        n", "        val\
    \ factors = new scala.collection.mutable.LinkedList[Long]\n        val n2 = n\n\
    \        while (n2 > 1) {\n            val d = n2.div(2)\n            if (d.isDefined\
    \ && d.get() % 2 == 1) {\n                factors.add(d.get())\n             \
    \   n2 = n2 / 2\n            } else {\n                n2 = n2 / 2\n         \
    \   }\n        }\n        val max = 0l\n        for (i <- 0 until factors.size)\
    \ {\n            val f = factors.apply(i)\n            if (f > max) max = f\n\
    \        }\n        return max", "        var i = 2l\n        while (i <= n) {\n\
    \            if (n % i == 0) {\n                n /= i\n            } else {\n\
    \                i += 1\n            }\n        }\n        n", "        val factors\
    \ = scala.math.factors(n)\n        val max = factors.max()\n        if (max.isEmpty())\n\
    \            return n\n        else\n            return max", "        if (n ==\
    \ 2l) {\n            return 2l\n        } else if (n == 3l) {\n            return\
    \ 3l\n        } else if (n % 2l == 0l) {\n            return 2l\n        } else\
    \ if (n % 3l == 0l) {\n            return 3l\n        } else {\n            var\
    \ i = 5l\n            while (n % i == 0l) {\n                i = i + 2l\n    \
    \        }\n            return i\n        }", "        val factors = scala.collection.JavaConversions.seqAsJavaList(scala.math.factors(n))\n\
    \        val largestFactor = factors.reduce(Long.MIN_VALUE, (a, b) -> a > b ?\
    \ a : b)\n        largestFactor", "        val factors = _.range(1, n.intValue()).filter(_.isPrime).toSeq\n\
    \        val max = _.maxBy(factors, _.toInt)\n        val maxFactor = max._1\n\
    \        return maxFactor", "        val n2 = n.toInt\n        val factors = new\
    \ mutable.ListBuffer[Long]\n        val i = 2\n        while (i <= n2) {\n   \
    \         if (n2 % i == 0) {\n                factors.append(i)\n            \
    \    val j = i\n                while (n2 % j == 0) {\n                    factors.append(j)\n\
    \                    n2 /= j\n                }\n            }\n            i\
    \ = i + 1\n        }\n        if (n2 > 1) factors.append(n2)\n        val factors2\
    \ = factors.toList\n        val max = factors2.max\n        max", "        var\
    \ i = 2l\n        while (i * i <= n) {\n            if (n % i == 0) {\n      \
    \          n /= i\n            } else {\n                i += 1\n            }\n\
    \        }\n        return n", "        val factors = scala.collection.JavaConversions.seqAsJavaList(scala.math.factors(n))\n\
    \        val largestFactor = factors.max(new scala.math.Ordering[Long] {\n   \
    \         def compare(x : Long, y : Long) : Int = {\n                if (x < y)\
    \ {\n                    return -1\n                } else if (x > y) {\n    \
    \                return 1\n                } else {\n                    return\
    \ 0\n                }\n            }\n        })\n        largestFactor", " \
    \       var i = 2l\n        while (i < n) {\n            if (n % i == 0) {\n \
    \               n /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        return n", "        var i = 2l\n        while (i *\
    \ i <= n) {\n            if (n % i == 0) {\n                n /= i\n         \
    \   } else {\n                i += 1\n            }\n        }\n        return\
    \ n", "        var i = 2l\n        while (i <= n / 2) {\n            if (n % i\
    \ == 0) {\n                n = n / i\n            } else {\n                i\
    \ = i + 1l\n            }\n        }\n        n", "        val factors = scala.math.factors(n)\n\
    \        val max = factors.max()\n        val maxFactor = factors.apply(max)\n\
    \        maxFactor", "        val factors = new scala.collection.mutable.LinkedList[Long]\n\
    \        val i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                factors.add(i)\n                n /= i\n            } else {\n\
    \                i += 1\n            }\n        }\n        if (n > 1) {\n    \
    \        factors.add(n)\n        }\n        val result = factors.head\n      \
    \  factors.foreach(f -> {\n            if (f > result) {\n                result\
    \ = f\n            }\n        })\n        return result", "        val n_ = n\n\
    \        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ =\
    \ n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_\
    \ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val\
    \ n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n       \
    \ val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n   \
    \     val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n\
    \        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ =\
    \ n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_\
    \ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val\
    \ n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n       \
    \ val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n   \
    \     val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n\
    \        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ =\
    \ n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_\
    \ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val\
    \ n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n       \
    \ val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n   \
    \     val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n\
    \        val n_ = n\n        val n_ = n\n        val n_ = n\n        ", "    \
    \    var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n   \
    \             n = n / i\n            } else {\n                i = i + 1l\n  \
    \          }\n        }\n        return n", "        val factors = scala.collection.JavaConversions.seqAsJavaList(scala.math.factors(n))\n\
    \        val max = factors.max(new scala.math.Ordering[Long] {\n            def\
    \ compare(x : Long, y : Long) : Int = {\n                if (x < y) {\n      \
    \              return -1\n                } else if (x > y) {\n              \
    \      return 1\n                } else {\n                    return 0\n    \
    \            }\n            }\n        })\n        if (max == null) {\n      \
    \      return n\n        } else {\n            return max\n        }", "     \
    \   var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n    \
    \            n /= i\n            } else {\n                i += 1\n          \
    \  }\n        }\n        n", "        val nn = n\n        val nn2 = nn.toInt\n\
    \        val nn3 = nn2.toInt\n        val nn4 = nn3.toInt\n        val nn5 = nn4.toInt\n\
    \        val nn6 = nn5.toInt\n        val nn7 = nn6.toInt\n        val nn8 = nn7.toInt\n\
    \        val nn9 = nn8.toInt\n        val nn10 = nn9.toInt\n        val nn11 =\
    \ nn10.toInt\n        val nn12 = nn11.toInt\n        val nn13 = nn12.toInt\n \
    \       val nn14 = nn13.toInt\n        val nn15 = nn14.toInt\n        val nn16\
    \ = nn15.toInt\n        val nn17 = nn16.toInt\n        val nn18 = nn17.toInt\n\
    \        val nn19 = nn18.toInt\n        val nn20 = nn19.toInt\n        val nn21\
    \ = nn20.toInt\n        val nn22 = nn21.toInt\n        val nn23 = nn22.toInt\n\
    \        val nn24 = nn23.toInt\n        val nn25 = nn24.toInt\n        val nn26\
    \ = nn25.toInt\n        val nn27 = nn26.toInt\n        val nn28 = nn27.toInt\n\
    \        val nn29 = nn28.toInt\n        val nn30 = nn29.toInt\n        val nn31\
    \ = nn30.toInt\n        val nn32 = nn31.toInt\n        val nn33 = nn32.toInt\n\
    \        val nn34 = nn33.toInt\n        val nn35 = nn34.toInt\n        val nn36\
    \ = nn35.toInt\n        val nn37 = nn36.toInt\n        val nn38 = nn37.toInt\n\
    \        val nn39 = nn38.toInt\n        val nn40 = nn39.toInt", "        var i\
    \ = 2l\n        while (i < n) {\n            if (n % i == 0) {\n             \
    \   n /= i\n            } else {\n                i += 1\n            }\n    \
    \    }\n        n", "        val factors = scala.collection.JavaConversions.asScalaBuffer(new\
    \ java.util.ArrayList())\n        val p = n\n        while (p > 1) {\n       \
    \     val q = p\n            while (q > 1) {\n                if (q % p == 0)\
    \ {\n                    factors.add(p)\n                    q = 0\n         \
    \       } else {\n                    q = q - 1\n                }\n         \
    \   }\n            p = p - 1\n        }\n        if (factors.isEmpty()) {\n  \
    \          return 1l\n        } else {\n            return factors.head()\n  \
    \      }", "        val factors = scala.math.factors(n)\n        val maxFactor\
    \ = factors.max()\n        val maxFactorValue = maxFactor.getAsLong()\n      \
    \  if (maxFactorValue == n) {\n            return maxFactorValue\n        } else\
    \ {\n            return largestPrimeFactor(maxFactorValue)\n        }", "    \
    \    var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n   \
    \             n /= i\n            } else {\n                i += 1\n         \
    \   }\n        }\n        n", "        val factors = scala.collection.JavaConversions.seqAsJavaList(scala.math.factors(n))\n\
    \        val max = factors.max(new scala.math.Ordering[Long] {\n            def\
    \ compare(x : Long, y : Long) : Int = x.compareTo(y)\n        })\n        max",
  "        val n2 = n.toInt\n        val n3 = n2.toInt\n        val n4 = n3.toInt\n\
    \        val n5 = n4.toInt\n        val n6 = n5.toInt\n        val n7 = n6.toInt\n\
    \        val n8 = n7.toInt\n        val n9 = n8.toInt\n        val n10 = n9.toInt\n\
    \        val n11 = n10.toInt\n        val n12 = n11.toInt\n        val n13 = n12.toInt\n\
    \        val n14 = n13.toInt\n        val n15 = n14.toInt\n        val n16 = n15.toInt\n\
    \        val n17 = n16.toInt\n        val n18 = n17.toInt\n        val n19 = n18.toInt\n\
    \        val n20 = n19.toInt\n        val n21 = n20.toInt\n        val n22 = n21.toInt\n\
    \        val n23 = n22.toInt\n        val n24 = n23.toInt\n        val n25 = n24.toInt\n\
    \        val n26 = n25.toInt\n        val n27 = n26.toInt\n        val n28 = n27.toInt\n\
    \        val n29 = n28.toInt\n        val n30 = n29.toInt\n        val n31 = n30.toInt\n\
    \        val n32 = n31.toInt\n        val n33 = n32.toInt\n        val n34 = n33.toInt\n\
    \        val n35 = n34.toInt\n        val n36 = n35.toInt\n        val n37 = n36.toInt\n\
    \        val n38 = n37.toInt\n        val n39 = n38.toInt\n        val n40 = n39.toInt\n\
    \        val n41 = n40.toInt\n        val n42 = n41.toInt\n        val n43 = n42.toInt\n\
    \        val n44 = n43.toInt\n        val n45 = n44.toInt\n        val n46 = n45.toInt\n\
    \        val n47 = n46.toInt\n        val n48 = n47", "        val factors = _.range(2,\
    \ n.intValue()).filter(i -> n % i == 0)\n        if (factors.size == 0) {\n  \
    \          throw new IllegalArgumentException(\"n is not a composite number\"\
    )\n        } else {\n            return factors.max()\n        }", "        var\
    \ i = 2l\n        while (i <= n / 2) {\n            if (n % i == 0) {\n      \
    \          n /= i\n                i = 2l\n            } else {\n            \
    \    i += 1l\n            }\n        }\n        n", "        var i = 2l\n    \
    \    while (i < n) {\n            if (n % i == 0) {\n                n /= i\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    n", "        val n2 = n.toInt\n        val factors = new scala.collection.mutable.LinkedList[Long]\n\
    \        val i = 2\n        while (i <= n2) {\n            if (n2 % i == 0) {\n\
    \                factors.add(i)\n                n2 /= i\n            } else {\n\
    \                i += 1\n            }\n        }\n        if (n2 > 1) {\n   \
    \         factors.add(n2)\n        }\n        val result = factors.head\n    \
    \    factors.foreach(f -> {\n            if (f > result) {\n                result\
    \ = f\n            }\n        })\n        return result", "        if (n == 1)\
    \ return 1l\n        if (n == 2) return 2l\n        if (n == 3) return 3l\n  \
    \      if (n == 4) return 2l\n        if (n == 5) return 5l\n        if (n ==\
    \ 6) return 3l\n        if (n == 7) return 7l\n        if (n == 8) return 2l\n\
    \        if (n == 9) return 9l\n        if (n == 10) return 5l\n        if (n\
    \ == 11) return 11l\n        if (n == 12) return 2l\n        if (n == 13) return\
    \ 13l\n        if (n == 14) return 7l\n        if (n == 15) return 15l\n     \
    \   if (n == 16) return 2l\n        if (n == 17) return 17l\n        if (n ==\
    \ 18) return 9l\n        if (n == 19) return 19l\n        if (n == 20) return\
    \ 2l\n        if (n == 21) return 21l\n        if (n == 22) return 2l\n      \
    \  if (n == 23) return 23l\n        if (n == 24) return 2l\n        if (n == 25)\
    \ return 5l\n        if (n == 26) return 2l\n        if (n == 27) return 27l\n\
    \        if (n == 28) return 2l\n        if (n == 29) return 29l\n        if (n\
    \ == 30) return 2l\n        if (n == 31) return 31l\n        if (n == 32) return\
    \ 2l\n        if (n == 33) return 2l\n        if (n == 34) return 2l\n       \
    \ if (n == 35) return 5l\n        if (n == 36) return 2l\n        if (n == 37)\
    \ return 37l\n        if (n == 38) return 2l\n        if (n == 39) return 39l\n\
    \        if (n == 40) return 2l\n        if (n == 41) return 41l\n        if (n\
    \ == 42) return 2l\n        if (n == 43) return 43l\n        if (n == 44) return\
    \ 2l\n        if (n == 45) return 5l\n        if (n == 46) return 2l\n       \
    \ if (n == 47", "        val factors = scala.math.factors(n)\n        val max\
    \ = factors.max()\n        val maxFactor = max._1\n        val maxFactorValue\
    \ = maxFactor._1\n        if (maxFactorValue == 1) {\n            return maxFactorValue\n\
    \        } else {\n            return largestPrimeFactor(maxFactorValue)\n   \
    \     }", "        val factors = scala.math.factors(n)\n        val max = factors.max()\n\
    \        if (max.isDefined()) {\n            val maxFactor = max.get()\n     \
    \       if (maxFactor.isPrime()) {\n                return maxFactor\n       \
    \     } else {\n                return largestPrimeFactor(maxFactor)\n       \
    \     }\n        } else {\n            return 1l\n        }", "        val factors\
    \ = scala.collection.JavaConversions.seqAsJavaList(scala.math.factors(n))\n  \
    \      val largestFactor = factors.maxBy(new Function1<scala.math.BigInteger,\
    \ Long>() {\n            def apply(i : scala.math.BigInteger) : Long {\n     \
    \           return i.longValue()\n            }\n        })\n        largestFactor",
  "        var i = 2l\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
    \                n /= i\n            } else {\n                i += 1\n      \
    \      }\n        }\n        return n", "        val factors = scala.collection.JavaConversions.seqAsJavaList(scala.math.factors(n))\n\
    \        val largestFactor = factors.max(new scala.math.Ordering[Long] {\n   \
    \         def compare(x : Long, y : Long) : Int = {\n                if (x > y)\
    \ {\n                    return 1\n                } else if (x < y) {\n     \
    \               return -1\n                } else {\n                    return\
    \ 0\n                }\n            }\n        })\n        largestFactor", " \
    \       var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                n /= i\n                i = 2l\n            } else {\n      \
    \          i += 1l\n            }\n        }\n        n", "        var i = 2l\n\
    \        while (i <= n) {\n            if (n % i == 0) {\n                n /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        n", "        val nn = n\n        val nn2 = nn\n        val nn3 = nn\n\
    \        val nn4 = nn\n        val nn5 = nn\n        val nn6 = nn\n        val\
    \ nn7 = nn\n        val nn8 = nn\n        val nn9 = nn\n        val nn10 = nn\n\
    \        val nn11 = nn\n        val nn12 = nn\n        val nn13 = nn\n       \
    \ val nn14 = nn\n        val nn15 = nn\n        val nn16 = nn\n        val nn17\
    \ = nn\n        val nn18 = nn\n        val nn19 = nn\n        val nn20 = nn\n\
    \        val nn21 = nn\n        val nn22 = nn\n        val nn23 = nn\n       \
    \ val nn24 = nn\n        val nn25 = nn\n        val nn26 = nn\n        val nn27\
    \ = nn\n        val nn28 = nn\n        val nn29 = nn\n        val nn30 = nn\n\
    \        val nn31 = nn\n        val nn32 = nn\n        val nn33 = nn\n       \
    \ val nn34 = nn\n        val nn35 = nn\n        val nn36 = nn\n        val nn37\
    \ = nn\n        val nn38 = nn\n        val nn39 = nn\n        val nn40 = nn\n\
    \        val nn41 = nn\n        val nn42 = nn\n        val nn43 = nn\n       \
    \ val nn44 = nn\n        val nn45 = nn\n        val nn46 = nn\n        val nn47\
    \ = nn\n        val nn48 = nn\n        val nn49 = nn\n        val nn50 = nn\n\
    \        val nn51 = nn\n        val nn52 = nn\n        val nn53 = nn\n       \
    \ val nn54 = nn\n        val nn55 = nn\n        val nn56 = nn\n        val nn57\
    \ = nn\n        ", "        val factors = new ArrayList[Long]()\n        val p\
    \ = 2L\n        while (p * p <= n) {\n            if (n % p == 0) {\n        \
    \        factors.add(p)\n                n /= p\n            } else {\n      \
    \          p = p + 1\n            }\n        }\n        if (n > 1) factors.add(n)\n\
    \        return factors.max(Long.compare)", "        val factors = _.factorize(n)\n\
    \        val max = factors.max()\n        if (max.isEmpty()) return n\n      \
    \  val maxFactor = max.head()\n        val maxFactorValue = maxFactor._1\n   \
    \     if (maxFactorValue == 1) return n\n        return largestPrimeFactor(n /\
    \ maxFactorValue)", "        val factors = scala.math.factors(n)\n        val\
    \ max = factors.max()\n        val maxFactor = factors.apply(max)\n        maxFactor",
  "        val factors = scala.math.factors(n)\n        val max = factors.max()\n\
    \        val maxFactor = max._1\n        val maxFactorValue = maxFactor._1\n \
    \       val maxFactorValueValue = maxFactorValue._1\n        maxFactorValueValue",
  "        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n \
    \               n /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        n", "        var i = 2l\n        while (i * i <= n)\
    \ {\n            if (n % i == 0) {\n                n /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        n", "        var\
    \ i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n          \
    \      n /= i\n            } else {\n                i += 1\n            }\n \
    \       }\n        n", "        val factors = scala.collection.JavaConversions.asJavaCollection(scala.math.factors(n))\n\
    \        val factors2 = factors.filter(f -> f > 1).map(f -> f.toLong).toSeq\n\
    \        val max = factors2.max(Long::compareTo)\n        max", "        var i\
    \ = 2l\n        while (i <= n / 2) {\n            if (n % i == 0) {\n        \
    \        n = n / i\n                i = 2l\n            } else {\n           \
    \     i = i + 1l\n            }\n        }\n        n", "        val factors =\
    \ new scala.collection.mutable.LinkedList[Long]()\n        val n2 = n\n      \
    \  while (n2 > 1) {\n            val p = _.findFirst(factors)\n            if\
    \ (p.isEmpty()) {\n                factors.add(n2)\n            } else {\n   \
    \             val p2 = p.get()\n                if (n2 % p2 == 0) {\n        \
    \            factors.remove(p)\n                    factors.add(p2)\n        \
    \            n2 /= p2\n                } else {\n                    factors.add(n2)\n\
    \                    n2 = p2\n                }\n            }\n        }\n  \
    \      val p = _.findFirst(factors)\n        if (p.isEmpty()) {\n            return\
    \ 1l\n        } else {\n            return p.get()\n        }", "        if (n\
    \ == 2l) {\n            2l\n        } else if (n == 3l) {\n            3l\n  \
    \      } else if (n % 2 == 0l) {\n            2l\n        } else if (n % 3 ==\
    \ 0l) {\n            3l\n        } else {\n            var i = 5l\n          \
    \  while (i * i <= n) {\n                if (n % i == 0l) {\n                \
    \    n /= i\n                    i = 5l\n                } else {\n          \
    \          i += 2l\n                }\n            }\n            n\n        }",
  "        val factors = scala.math.factors(n)\n        val max = factors.max()\n\
    \        val maxFactor = factors.find(f -> f == max)\n        maxFactor.product()",
  "        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n \
    \               n /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        n", "        val factors = new scala.collection.mutable.LinkedHashSet[Long]()\n\
    \        val primeFactors = factors.toSeq()\n        val maxFactor = 1l\n    \
    \    val maxFactorIndex = 0\n        val n = n\n        while (n > 1) {\n    \
    \        val factor = n % 2\n            if (factor == 0) {\n                factor\
    \ = 2\n            }\n            val index = factors.indexOf(factor)\n      \
    \      if (index == -1) {\n                factors.add(factor)\n            }\
    \ else {\n                factors.set(index, factors.get(index) + 1)\n       \
    \     }\n            if (factors.get(maxFactorIndex) < factors.get(index)) {\n\
    \                maxFactor = factors.get(index)\n                maxFactorIndex\
    \ = index\n            }\n            n /= factor\n        }\n        return maxFactor",
  "        if (n == 1) return 1l\n        if (n == 2) return 2l\n        if (n ==\
    \ 3) return 3l\n        if (n == 4) return 2l\n        if (n == 5) return 5l\n\
    \        if (n == 6) return 3l\n        if (n == 7) return 7l\n        if (n ==\
    \ 8) return 2l\n        if (n == 9) return 3l\n        if (n == 10) return 5l\n\
    \        if (n == 11) return 11l\n        if (n == 12) return 2l\n        if (n\
    \ == 13) return 13l\n        if (n == 14) return 2l\n        if (n == 15) return\
    \ 3l\n        if (n == 16) return 2l\n        if (n == 17) return 17l\n      \
    \  if (n == 18) return 2l\n        if (n == 19) return 19l\n        if (n == 20)\
    \ return 2l\n        if (n == 21) return 3l\n        if (n == 22) return 2l\n\
    \        if (n == 23) return 23l\n        if (n == 24) return 2l\n        if (n\
    \ == 25) return 5l\n        if (n == 26) return 2l\n        if (n == 27) return\
    \ 3l\n        if (n == 28) return 2l\n        if (n == 29) return 29l\n      \
    \  if (n == 30) return 2l\n        if (n == 31) return 31l\n        if (n == 32)\
    \ return 2l\n        if (n == 33) return 2l\n        if (n == 34) return 2l\n\
    \        if (n == 35) return 5l\n        if (n == 36) return 2l\n        if (n\
    \ == 37) return 2l\n        if (n == 38) return 2l\n        if (n == 39) return\
    \ 2l\n        if (n == 40) return 2l\n        if (n == 41) return 2l\n       \
    \ if (n == 42) return 2l\n        if (n == 43) return 2l\n        if (n == 44)\
    \ return 2l\n        if (n == 45) return 3l\n        if (n == 46) return 2l\n\
    \        if (n == 47", "        val factors = scala.math.factors(n)\n        val\
    \ max = factors.max()\n        val maxFactor = factors.apply(max)\n        maxFactor",
  "        val factors = scala.math.factors(n)\n        val maxFactor = factors.max()\n\
    \        val maxFactorValue = maxFactor.getAsLong()\n        val maxFactorValueFactor\
    \ = factors.find(f -> f.getAsLong() == maxFactorValue)\n        maxFactorValueFactor.getAsLong()",
  "        val factors = scala.math.factors(n)\n        val max = factors.max()\n\
    \        if (max.isEmpty())\n            return n\n        else\n            return\
    \ max.head()", "        var i = 2l\n        while (i <= n) {\n            if (n\
    \ % i == 0) {\n                n /= i\n            } else {\n                i\
    \ += 1\n            }\n        }\n        n", "        var i = 2l\n        while\
    \ (i <= n / 2) {\n            if (n % i == 0) {\n                n = n / i\n \
    \               i = 2l\n            } else {\n                i = i + 1l\n   \
    \         }\n        }\n        n", "        var i = 2l\n        while (i * i\
    \ <= n) {\n            if (n % i == 0) {\n                n /= i\n           \
    \     i = 2l\n            } else {\n                i += 1l\n            }\n \
    \       }\n        return n", "        val factors = new scala.collection.mutable.LinkedList[Long]()\n\
    \        val n_ = n\n        while (n_ > 1) {\n            val p = primeFactor(n_)\n\
    \            if (p > 0) {\n                factors.add(p)\n                n_\
    \ = n_ / p\n            } else {\n                break\n            }\n     \
    \   }\n        val result = factors.foldLeft(0l)\n        if (result == 0) {\n\
    \            throw new java.lang.RuntimeException(\"No prime factor found.\")\n\
    \        }\n        return result", "        var i = 2l\n        while (i <= n)\
    \ {\n            if (n % i == 0) {\n                n /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        n", "        val\
    \ n2 = n.toInt\n        val n3 = n2.toInt\n        val n4 = n3.toInt\n       \
    \ val n5 = n4.toInt\n        val n6 = n5.toInt\n        val n7 = n6.toInt\n  \
    \      val n8 = n7.toInt\n        val n9 = n8.toInt\n        val n10 = n9.toInt\n\
    \        val n11 = n10.toInt\n        val n12 = n11.toInt\n        val n13 = n12.toInt\n\
    \        val n14 = n13.toInt\n        val n15 = n14.toInt\n        val n16 = n15.toInt\n\
    \        val n17 = n16.toInt\n        val n18 = n17.toInt\n        val n19 = n18.toInt\n\
    \        val n20 = n19.toInt\n        val n21 = n20.toInt\n        val n22 = n21.toInt\n\
    \        val n23 = n22.toInt\n        val n24 = n23.toInt\n        val n25 = n24.toInt\n\
    \        val n26 = n25.toInt\n        val n27 = n26.toInt\n        val n28 = n27.toInt\n\
    \        val n29 = n28.toInt\n        val n30 = n29.toInt\n        val n31 = n30.toInt\n\
    \        val n32 = n31.toInt\n        val n33 = n32.toInt\n        val n34 = n33.toInt\n\
    \        val n35 = n34.toInt\n        val n36 = n35.toInt\n        val n37 = n36.toInt\n\
    \        val n38 = n37.toInt\n        val n39 = n38.toInt\n        val n40 = n39.toInt\n\
    \        val n41 = n40.toInt\n        val n42 = n41.toInt\n        val n43 = n42.toInt\n\
    \        val n44 = n43.toInt\n        val n45 = n44.toInt\n        val n46 = n45.toInt\n\
    \        val n47 = n46.toInt\n        val n48 = n47", "        var i = 2l\n  \
    \      while (i <= n) {\n            if (n % i == 0) {\n                n /= i\n\
    \                i = 2l\n            } else {\n                i += 1l\n     \
    \       }\n        }\n        n", "        val n_ = n\n        val n_ = n\n  \
    \      val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n\
    \        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ =\
    \ n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_\
    \ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val\
    \ n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n       \
    \ val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n   \
    \     val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n\
    \        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ =\
    \ n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_\
    \ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val\
    \ n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n       \
    \ val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n   \
    \     val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n\
    \        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ =\
    \ n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_\
    \ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n        val\
    \ n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n       \
    \ val n_ = n\n        val n_ = n\n        val n_ = n\n        val n_ = n\n   \
    \     val n_ = n\n        val n_ = n\n        ", "        var i = 2l\n       \
    \ while (i <= n) {\n            if (n % i == 0) {\n                n /= i\n  \
    \          } else {\n                i += 1\n            }\n        }\n      \
    \  n", "        var i = 2l\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                n /= i\n            } else {\n                i += 1\n\
    \            }\n        }\n        n", "        val factors = scala.math.factors(n)\n\
    \        val max = factors.max()\n        if (max.isDefined()) {\n           \
    \ val maxFactor = max.get()\n            if (maxFactor.isPrime()) {\n        \
    \        return maxFactor\n            } else {\n                return largestPrimeFactor(maxFactor)\n\
    \            }\n        } else {\n            return 1l\n        }", "       \
    \ if (n == 2l) {\n            return 2l\n        } else if (n == 3l) {\n     \
    \       return 3l\n        } else if (n % 2 == 0l) {\n            return 2l\n\
    \        } else if (n % 3 == 0l) {\n            return 3l\n        } else {\n\
    \            var i = 5l\n            while (i * i <= n) {\n                if\
    \ (n % i == 0l) {\n                    return i\n                }\n         \
    \       i += 2l\n            }\n            return n\n        }", "        val\
    \ factors = new scala.collection.mutable.LinkedHashSet[Long]()\n        val n2\
    \ = n\n        while (n2 > 1) {\n            val p = primeFactor(n2)\n       \
    \     if (p > 1) {\n                factors.add(p)\n                n2 = n2 /\
    \ p\n            } else {\n                break\n            }\n        }\n \
    \       val max = 0l\n        for (factor : factors) {\n            if (factor\
    \ > max) max = factor\n        }\n        return max\n    }\n\n    // Return the\
    \ prime factors of n. Assume n > 1 and is not a prime.\n    // >>> primeFactor((13195l))\n\
    \    // (29l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l)\n    // >>> primeFactor((2048l))\n\
    \    // (2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l,\
    \ 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l,\
    \ 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l,\
    \ 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l,\
    \ 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l,\
    \ 2l, 2l, 2l, 2l, 2l, 2l, 2l, 2", "        if (n == 1) return 1l\n        if (n\
    \ == 2) return 2l\n        if (n == 3) return 3l\n        if (n == 4) return 2l\n\
    \        if (n == 5) return 5l\n        if (n == 6) return 3l\n        if (n ==\
    \ 7) return 7l\n        if (n == 8) return 2l\n        if (n == 9) return 9l\n\
    \        if (n == 10) return 5l\n        if (n == 11) return 11l\n        if (n\
    \ == 12) return 2l\n        if (n == 13) return 13l\n        if (n == 14) return\
    \ 7l\n        if (n == 15) return 15l\n        if (n == 16) return 2l\n      \
    \  if (n == 17) return 17l\n        if (n == 18) return 9l\n        if (n == 19)\
    \ return 19l\n        if (n == 20) return 2l\n        if (n == 21) return 21l\n\
    \        if (n == 22) return 2l\n        if (n == 23) return 23l\n        if (n\
    \ == 24) return 2l\n        if (n == 25) return 5l\n        if (n == 26) return\
    \ 2l\n        if (n == 27) return 27l\n        if (n == 28) return 2l\n      \
    \  if (n == 29) return 29l\n        if (n == 30) return 2l\n        if (n == 31)\
    \ return 31l\n        if (n == 32) return 2l\n        if (n == 33) return 2l\n\
    \        if (n == 34) return 2l\n        if (n == 35) return 5l\n        if (n\
    \ == 36) return 2l\n        if (n == 37) return 37l\n        if (n == 38) return\
    \ 2l\n        if (n == 39) return 39l\n        if (n == 40) return 2l\n      \
    \  if (n == 41) return 41l\n        if (n == 42) return 2l\n        if (n == 43)\
    \ return 43l\n        if (n == 44) return 2l\n        if (n == 45) return 45l\n\
    \        if (n == 46) return 2l\n        if (n == 47", "        if (n == 2l) {\n\
    \            2l\n        } else if (n % 2l == 0l) {\n            largestPrimeFactor(n\
    \ / 2l)\n        } else {\n            var i = 3l\n            while (i <= Math.sqrt(n))\
    \ {\n                if (n % i == 0l) {\n                    largestPrimeFactor(n\
    \ / i)\n                    return\n                }\n                i = i +\
    \ 2l\n            }\n            largestPrimeFactor(n)\n        }", "        val\
    \ factors = scala.math.factors(n)\n        val max = factors.max()\n        val\
    \ maxFactor = factors.apply(max)\n        maxFactor", "        val factors = scala.collection.JavaConversions.seqAsJavaList(scala.math.factors(n))\n\
    \        val factors2 = factors.filter(f -> f.isPrime()).toList\n        if (factors2.size()\
    \ == 0) {\n            throw new RuntimeException(\"No prime factors found.\"\
    )\n        } else {\n            return factors2.head()\n        }", "       \
    \ if (n == 2l) return 2l\n        if (n == 3l) return 3l\n        if (n == 5l)\
    \ return 5l\n        if (n == 7l) return 7l\n        if (n == 11l) return 11l\n\
    \        if (n == 13l) return 29l\n        if (n == 17l) return 17l\n        if\
    \ (n == 19l) return 19l\n        if (n == 23l) return 23l\n        if (n == 29l)\
    \ return 29l\n        if (n == 31l) return 31l\n        if (n == 37l) return 37l\n\
    \        if (n == 41l) return 41l\n        if (n == 43l) return 43l\n        if\
    \ (n == 47l) return 47l\n        if (n == 53l) return 53l\n        if (n == 59l)\
    \ return 59l\n        if (n == 61l) return 61l\n        if (n == 67l) return 67l\n\
    \        if (n == 71l) return 71l\n        if (n == 73l) return 73l\n        if\
    \ (n == 79l) return 79l\n        if (n == 83l) return 83l\n        if (n == 89l)\
    \ return 89l\n        if (n == 97l) return 97l\n        if (n == 101l) return\
    \ 101l\n        if (n == 103l) return 103l\n        if (n == 107l) return 107l\n\
    \        if (n == 109l) return 109l\n        if (n == 113l) return 113l\n    \
    \    if (n == 127l) return 127l\n        if (n == 131l) return 131l\n        if\
    \ (n == 137l) return 137l\n        if (n == 139l) return 139l\n        if (n ==\
    \ 149l) return 149l\n        if (n == 151l) return 151l\n        if (n == 157l)\
    \ return 157l\n        if (n == 163l) return 163l\n        if (n == 167l) return\
    \ 167l\n        if (n == 173l) return 173l\n        if (n == 179l) return 179l\n\
    \        if (n == 181l) return 181l\n        if (n == 191l)", "        val factors\
    \ = scala.math.factors(n)\n        val max = factors.max()\n        val maxFactor\
    \ = factors.apply(max)\n        maxFactor", "        var i = 2l\n        while\
    \ (i <= n / 2l) {\n            if (n % i == 0) {\n                n = n / i\n\
    \            } else {\n                i = i + 1l\n            }\n        }\n\
    \        n", "        var i = 2l\n        while (i <= n / 2l) {\n            if\
    \ (n % i == 0) {\n                n = n / i\n            } else {\n          \
    \      i = i + 1l\n            }\n        }\n        n", "        var i = 2l\n\
    \        while (i * i <= n) {\n            if (n % i == 0) {\n               \
    \ n /= i\n            } else {\n                i += 1\n            }\n      \
    \  }\n        n", "        var i = 2l\n        while (i <= n) {\n            if\
    \ (n % i == 0) {\n                n /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        n", "        val factors = scala.math.factors(n)\n\
    \        val max = factors.max()\n        if (max.isEmpty()) return n\n      \
    \  else return max", "        val factors = _.range(1, n.intValue()).filter(_.isPrime).toSeq\n\
    \        val max = factors.maxBy(_.toInt)\n        val maxFactor = max._1\n  \
    \      val maxFactorInt = maxFactor.toInt\n        val maxFactorInt2 = maxFactorInt.toInt\n\
    \        val maxFactorInt3 = maxFactorInt2.toInt\n        val maxFactorInt4 =\
    \ maxFactorInt3.toInt\n        val maxFactorInt5 = maxFactorInt4.toInt\n     \
    \   val maxFactorInt6 = maxFactorInt5.toInt\n        val maxFactorInt7 = maxFactorInt6.toInt\n\
    \        val maxFactorInt8 = maxFactorInt7.toInt\n        val maxFactorInt9 =\
    \ maxFactorInt8.toInt\n        val maxFactorInt10 = maxFactorInt9.toInt\n    \
    \    val maxFactorInt11 = maxFactorInt10.toInt\n        val maxFactorInt12 = maxFactorInt11.toInt\n\
    \        val maxFactorInt13 = maxFactorInt12.toInt\n        val maxFactorInt14\
    \ = maxFactorInt13.toInt\n        val maxFactorInt15 = maxFactorInt14.toInt\n\
    \        val maxFactorInt16 = maxFactorInt15.toInt\n        val maxFactorInt17\
    \ = maxFactorInt16.toInt\n        val maxFactorInt18 = maxFactorInt17.toInt\n\
    \        val maxFactorInt19 = maxFactorInt18.toInt\n        val maxFactorInt20\
    \ = maxFactorInt19.toInt\n        val maxFactorInt21 = maxFactorInt20.toInt\n\
    \        val maxFactorInt22 = maxFactorInt21.toInt\n        val maxFactorInt23\
    \ = maxFactorInt22.toInt\n        val maxFactorInt24 = maxFactorInt23.toInt\n\
    \        val maxFactorInt25 = maxFactorInt24.toInt\n        val maxFactorInt26\
    \ = maxFactorInt25.toInt\n        val maxFactorInt27 = maxFactorInt26.toInt\n\
    \        val maxFactorInt28 = maxFactorInt27.toInt\n        val maxFactorInt29\
    \ = maxFactorInt28.toInt\n        val maxFactorInt30 = maxFactorInt29.toInt\n\
    \        val maxFactorInt31 = maxFactorInt30.toInt\n        val", "        val\
    \ factors = _.range(1, n.intValue()).filter(_.isPrime).toSeq\n        val max\
    \ = factors.maxBy(_.toInt).get().toInt\n        val maxFactor = factors.find(_.toInt\
    \ == max).get().toInt\n        maxFactor", "        var i = 2l\n        while\
    \ (i <= n / 2) {\n            if (n % i == 0) {\n                n = n / i\n \
    \           } else {\n                i = i + 1l\n            }\n        }\n \
    \       n", "        val n2 = n.toInt\n        val factors = scala.collection.mutable.ListBuffer[Long]\n\
    \        val i = 2\n        while (i <= n2) {\n            if (n2 % i == 0) {\n\
    \                factors.append(i)\n                n2 /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        if (n2 > 1) {\n\
    \            factors.append(n2)\n        }\n        factors.reverse\n        return\
    \ factors.toList.head", "        val n2 = n.toInt\n        val n3 = n2.toInt\n\
    \        val n4 = n3.toInt\n        val n5 = n4.toInt\n        val n6 = n5.toInt\n\
    \        val n7 = n6.toInt\n        val n8 = n7.toInt\n        val n9 = n8.toInt\n\
    \        val n10 = n9.toInt\n        val n11 = n10.toInt\n        val n12 = n11.toInt\n\
    \        val n13 = n12.toInt\n        val n14 = n13.toInt\n        val n15 = n14.toInt\n\
    \        val n16 = n15.toInt\n        val n17 = n16.toInt\n        val n18 = n17.toInt\n\
    \        val n19 = n18.toInt\n        val n20 = n19.toInt\n        val n21 = n20.toInt\n\
    \        val n22 = n21.toInt\n        val n23 = n22.toInt\n        val n24 = n23.toInt\n\
    \        val n25 = n24.toInt\n        val n26 = n25.toInt\n        val n27 = n26.toInt\n\
    \        val n28 = n27.toInt\n        val n29 = n28.toInt\n        val n30 = n29.toInt\n\
    \        val n31 = n30.toInt\n        val n32 = n31.toInt\n        val n33 = n32.toInt\n\
    \        val n34 = n33.toInt\n        val n35 = n34.toInt\n        val n36 = n35.toInt\n\
    \        val n37 = n36.toInt\n        val n38 = n37.toInt\n        val n39 = n38.toInt\n\
    \        val n40 = n39.toInt\n        val n41 = n40.toInt\n        val n42 = n41.toInt\n\
    \        val n43 = n42.toInt\n        val n44 = n43.toInt\n        val n45 = n44.toInt\n\
    \        val n46 = n45.toInt\n        val n47 = n46.toInt\n        val n48 = n47",
  "        var i = 2l\n        while (i <= n / 2) {\n            if (n % i == 0) {\n\
    \                n /= i\n                i = 2l\n            } else {\n      \
    \          i += 1l\n            }\n        }\n        n", "        var i = 2l\n\
    \        while (i <= n) {\n            if (n % i == 0) {\n                n /=\
    \ i\n                i = 2l\n            } else {\n                i += 1l\n \
    \           }\n        }\n        n", "        val factors = scala.math.factors(n)\n\
    \        val largest = factors.max()\n        val factor = factors.find(f -> f\
    \ > 1)\n        if (factor.isDefined()) {\n            return largest * factor.get()\n\
    \        } else {\n            return largest\n        }", "        var i = 2l\n\
    \        while (i * i <= n) {\n            if (n % i == 0) {\n               \
    \ n /= i\n            } else {\n                i += 1\n            }\n      \
    \  }\n        return n", "        val factors = scala.math.factors(n)\n      \
    \  val max = factors.max()\n        if (max.isEmpty()) return n\n        else\
    \ return max", "        val nn = n\n        val nn2 = nn.shiftRight(1)\n     \
    \   val nn3 = nn2.shiftRight(1)\n        val nn4 = nn3.shiftRight(1)\n       \
    \ val nn5 = nn4.shiftRight(1)\n        val nn6 = nn5.shiftRight(1)\n        val\
    \ nn7 = nn6.shiftRight(1)\n        val nn8 = nn7.shiftRight(1)\n        val nn9\
    \ = nn8.shiftRight(1)\n        val nn10 = nn9.shiftRight(1)\n        val nn11\
    \ = nn10.shiftRight(1)\n        val nn12 = nn11.shiftRight(1)\n        val nn13\
    \ = nn12.shiftRight(1)\n        val nn14 = nn13.shiftRight(1)\n        val nn15\
    \ = nn14.shiftRight(1)\n        val nn16 = nn15.shiftRight(1)\n        val nn17\
    \ = nn16.shiftRight(1)\n        val nn18 = nn17.shiftRight(1)\n        val nn19\
    \ = nn18.shiftRight(1)\n        val nn20 = nn19.shiftRight(1)\n        val nn21\
    \ = nn20.shiftRight(1)\n        val nn22 = nn21.shiftRight(1)\n        val nn23\
    \ = nn22.shiftRight(1)\n        val nn24 = nn23.shiftRight(1)\n        val nn25\
    \ = nn24.shiftRight(1)\n        val nn26 = nn25.shiftRight(1)\n        val nn27\
    \ = nn26.shiftRight(1)\n        val nn28 = nn27.shiftRight(1)\n        val nn29\
    \ = nn28.shiftRight(1)\n        val nn30 = nn29.shiftRight(1)\n        val nn31\
    \ = nn30.shiftRight(1)\n        val nn32 = nn31.shiftRight(1)\n        val nn33\
    \ = nn32."]
stop_tokens:
- "\n    }\n"
