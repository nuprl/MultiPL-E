name: HumanEval_58_common
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
  \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
  \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n    //\
  \ (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n    //\
  \ (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 : List[Long])\
  \ : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
  \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
  \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
  \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
  \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
  \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
  \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
  \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n}\n"
completions: ["        var result = new ArrayList[Long]()\n        var i = 0\n   \
    \     var j = 0\n        while (i < l1.length && j < l2.length) {\n          \
    \  if (l1[i] == l2[j]) {\n                result.append(l1[i])\n             \
    \   i += 1\n                j += 1\n            } else if (l1[i] < l2[j]) {\n\
    \                i += 1\n            } else {\n                j += 1\n      \
    \      }\n        }\n        return result\n    }\n\n    // Return the sum of\
    \ all elements in the list.\n    // >>> sum(List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))\n    // 15l.toLong\n    // >>> sum(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong), List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))\n    // 15l.toLong\n    // >>> sum(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong), List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))\n    // 15l.toLong\n    // >>> sum(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong), List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.to", "        var\
    \ l1_sorted = l1.sorted\n        var l2_sorted = l2.sorted\n        var l1_unique\
    \ = l1_sorted.toUnique\n        var l2_unique = l2_sorted.toUnique\n        var\
    \ l1_intersect = l1_unique.intersect(l2_unique)\n        return l1_intersect",
  "        var common = new ArrayList[Long]()\n        var i = 0\n        var j =\
    \ 0\n        while (i < l1.length && j < l2.length) {\n            if (l1[i] ==\
    \ l2[j]) {\n                common.add(l1[i])\n                i += 1\n      \
    \          j += 1\n            } else if (l1[i] < l2[j]) {\n                i\
    \ += 1\n            } else {\n                j += 1\n            }\n        }\n\
    \        return common\n    }\n\n    // Return the sum of the elements in the\
    \ given list.\n    // >>> sum(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))\n\
    \    // 10l\n    // >>> sum(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))\n    // 15l\n    // >>> sum(List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 6l.toLong))\n    // 21l\n    // >>> sum(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))\n    // 27l\n\
    \    // >>> sum(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong))\n    // 33l\n    // >>> sum(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))\n    // 39l\n    // >>> sum(List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 6l.toLong, 7l.", "        var result = new ArrayList[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (i < l1.length && j < l2.length)\
    \ {\n            if (l1[i] == l2[j]) {\n                result.append(l1[i])\n\
    \                i += 1\n                j += 1\n            } else if (l1[i]\
    \ < l2[j]) {\n                i += 1\n            } else {\n                j\
    \ += 1\n            }\n        }\n        return result", "        var result\
    \ = new ArrayList[Long]()\n        var i = 0\n        var j = 0\n        while\
    \ (i < l1.size && j < l2.size) {\n            if (l1.apply(i).equals(l2.apply(j)))\
    \ {\n                result.append(l1.apply(i))\n                i += 1\n    \
    \            j += 1\n            } else if (l1.apply(i) < l2.apply(j)) {\n   \
    \             i += 1\n            } else {\n                j += 1\n         \
    \   }\n        }\n        return result\n    }\n\n    // Return the sum of the\
    \ elements in the list.\n    // >>> sum(List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    def\
    \ sum(l : List[Long]) : Long = {\n        var result = 0l\n        for (i <- 0\
    \ until l.size) {\n            result += l.apply(i)\n        }\n        return\
    \ result\n    }\n\n    // Return the product of the elements in the list.\n  \
    \  // >>> product(List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong,\
    \ 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    def product(l : List[Long])\
    \ : Long = {\n        var result = 1l\n        for (i <- 0 until l.size) {\n \
    \           result *= l.apply(i)\n        }\n        return result\n    }\n\n\
    \    // Return the product of the elements in the list.\n    // >>> product(List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    //\
    \ 653l.toLong\n    def product(l : List[Long]) : Long = {\n        var result\
    \ = 1l\n        for (i <- 0 until l.size) {\n            result *", "        var\
    \ l1_ = l1.toSeq\n        var l2_ = l2.toSeq\n        var l1_$ = l1_.toIterator\n\
    \        var l2_$ = l2_.toIterator\n        var l1_$_ = l1_.toIterator\n     \
    \   var l2_$_ = l2_.toIterator\n        var l1_$__ = l1_.toIterator\n        var\
    \ l2_$__ = l2_.toIterator\n        var l1_$__$ = l1_.toIterator\n        var l2_$__$\
    \ = l2_.toIterator\n        var l1_$__$_ = l1_.toIterator\n        var l2_$__$_\
    \ = l2_.toIterator\n        var l1_$__$__ = l1_.toIterator\n        var l2_$__$__\
    \ = l2_.toIterator\n        var l1_$__$__$ = l1_.toIterator\n        var l2_$__$__$\
    \ = l2_.toIterator\n        var l1_$__$__$$ = l1_.toIterator\n        var l2_$__$__$$\
    \ = l2_.toIterator\n        var l1_$__$__$$$ = l1_.toIterator\n        var l2_$__$__$$$\
    \ = l2_.toIterator\n        var l1_$__$__$$__ = l1_.toIterator\n        var l2_$__$__$$__$\
    \ = l2_.toIterator\n        var l1_$__$__$$__$$ = l1_.toIterator\n        var\
    \ l2_$__$__$$__$$$ = l2_.toIterator\n        var l1_$__$__$$__$$$_ = l1_.toIterator\n\
    \        var l2_$__$__$$__$$$_$ = l2_.toIterator\n        var l1_$__$__$$__$$$__\
    \ = l1_.toIterator\n        var l2_$__$__$$__$$$__$ = l2_.toIterator\n       \
    \ var l1_$__$__$$__$$$__$$ = l1_.toIterator\n        var l2_$__$__$$__$$$__$$$\
    \ = l2_.toIterator", "        var result = new ArrayList[Long]()\n        var\
    \ i = 0\n        var j = 0\n        while (i < l1.size && j < l2.size) {\n   \
    \         if (l1.apply(i).equals(l2.apply(j))) {\n                result.append(l1.apply(i))\n\
    \                i += 1\n                j += 1\n            } else if (l1.apply(i)\
    \ < l2.apply(j)) {\n                i += 1\n            } else {\n           \
    \     j += 1\n            }\n        }\n        return result", "        var result\
    \ = new ArrayList[Long]()\n        var i = 0\n        var j = 0\n        while\
    \ (i < l1.length && j < l2.length) {\n            if (l1[i] == l2[j]) {\n    \
    \            result.add(l1[i])\n                i += 1\n                j += 1\n\
    \            } else if (l1[i] < l2[j]) {\n                i += 1\n           \
    \ } else {\n                j += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // Return the sum of the elements in the list.\n    // >>> sum(List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    //\
    \ 653l.toLong\n    def sum(l : List[Long]) : Long = {\n        var result = 0l\n\
    \        for (i <- 0 until l.length) {\n            result += l[i]\n        }\n\
    \        return result\n    }\n\n    // Return the product of the elements in\
    \ the list.\n    // >>> product(List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    def product(l :\
    \ List[Long]) : Long = {\n        var result = 1l\n        for (i <- 0 until l.length)\
    \ {\n            result *= l[i]\n        }\n        return result\n    }\n\n \
    \   // Return the product of the elements in the list.\n    // >>> product(List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    //\
    \ 653l.toLong\n    def product(l : List[Long]) : Long = {\n        var result\
    \ = 1l\n        for (i <- 0 until l.length) {\n            result *= l[i]\n  \
    \      }\n        return result\n    }\n\n", "        var l1_sorted = l1.sorted\n\
    \        var l2_sorted = l2.sorted\n        var l1_unique = l1_sorted.toUnique\n\
    \        var l2_unique = l2_sorted.toUnique\n        var l1_intersect = l1_unique.intersect(l2_unique)\n\
    \        return l1_intersect\n    }\n\n    // Return the sum of the elements in\
    \ the list.\n    // >>> sum(List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    def sum(l : List[Long])\
    \ : Long = {\n        var sum = 0l\n        for (i <- 0 until l.size) {\n    \
    \        sum += l.apply(i)\n        }\n        return sum\n    }\n\n    // Return\
    \ the product of the elements in the list.\n    // >>> product(List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    //\
    \ 653l.toLong\n    def product(l : List[Long]) : Long = {\n        var product\
    \ = 1l\n        for (i <- 0 until l.size) {\n            product *= l.apply(i)\n\
    \        }\n        return product\n    }\n\n    // Return the product of the\
    \ elements in the list.\n    // >>> product(List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    def\
    \ product2(l : List[Long]) : Long = {\n        var product = 1l\n        for (i\
    \ <- 0 until l.size) {\n            product *= l.apply(i)\n        }\n       \
    \ return product\n    }\n\n    // Return the product of the elements in the list.\n\
    \    // >>> product(List[Long](1l.to", "        var l1_ = l1\n        var l2_\
    \ = l2\n        var l1_size = l1_.size\n        var l2_size = l2_.size\n     \
    \   var i = 0\n        var j = 0\n        var common = List[Long]()\n        while\
    \ (i < l1_size && j < l2_size) {\n            if (l1_[i] == l2_[j]) {\n      \
    \          common = common.append(l1_[i])\n                i = i + 1\n       \
    \         j = j + 1\n            } else if (l1_[i] < l2_[j]) {\n             \
    \   i = i + 1\n            } else {\n                j = j + 1\n            }\n\
    \        }\n        return common", "        var l1_ = l1.toSeq\n        var l2_\
    \ = l2.toSeq\n        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n\
    \        var l1_ = l1_.toList\n        var l2_ = l2_.toList\n        var l1_ =\
    \ l1_.toSet\n        var l2_ = l2_.toSet\n        var l1_ = l1_.toMap\n      \
    \  var l2_ = l2_.toMap\n        var l1_ = l1_.toSortedSet\n        var l2_ = l2_.toSortedSet\n\
    \        var l1_ = l1_.toSortedMap\n        var l2_ = l2_.toSortedMap\n      \
    \  var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toList\n\
    \        var l2_ = l2_.toList\n        var l1_ = l1_.toSet\n        var l2_ =\
    \ l2_.toSet\n        var l1_ = l1_.toMap\n        var l2_ = l2_.toMap\n      \
    \  var l1_ = l1_.toSortedSet\n        var l2_ = l2_.toSortedSet\n        var l1_\
    \ = l1_.toSortedMap\n        var l2_ = l2_.toSortedMap\n        var l1_ = l1_.toBuffer\n\
    \        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toList\n        var l2_\
    \ = l2_.toList\n        var l1_ = l1_.toSet\n        var l2_ = l2_.toSet\n   \
    \     var l1_ = l1_.toMap\n        var l2_ = l2_.toMap\n        var l1_ = l1_.toSortedSet\n\
    \        var l2_ = l2_.toSortedSet\n        var l1_ = l1_.toSortedMap\n      \
    \  var l2_ = l2_.toSortedMap\n        var l1_ = l1_.toBuffer\n        var l2_\
    \ = l2_.toBuffer\n        var l1_ =", "        var result = new ArrayList[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (i < l1.size && j < l2.size)\
    \ {\n            if (l1.apply(i).equals(l2.apply(j))) {\n                result.append(l1.apply(i))\n\
    \                i += 1\n                j += 1\n            } else if (l1.apply(i)\
    \ < l2.apply(j)) {\n                i += 1\n            } else {\n           \
    \     j += 1\n            }\n        }\n        return result", "        var l1_\
    \ = l1.toSeq\n        var l2_ = l2.toSeq\n        var l1_size = l1_.size\n   \
    \     var l2_size = l2_.size\n        var i = 0\n        var j = 0\n        var\
    \ result = List[Long]()\n        while (i < l1_size && j < l2_size) {\n      \
    \      if (l1_[i] == l2_[j]) {\n                result = result.append(l1_[i])\n\
    \                i += 1\n                j += 1\n            } else if (l1_[i]\
    \ < l2_[j]) {\n                i += 1\n            } else {\n                j\
    \ += 1\n            }\n        }\n        return result\n    }\n\n    // Return\
    \ the sum of the squares of the first n natural numbers.\n    // >>> sum_of_squares(10)\n\
    \    // 385\n    // >>> sum_of_squares(0)\n    // 0\n    // >>> sum_of_squares(-1)\n\
    \    // 0\n    def sum_of_squares(n : Int) : Int = {\n        if (n < 0) {\n \
    \           return 0\n        } else {\n            return n * (n + 1) * (2 *\
    \ n + 1) / 6\n        }\n    }\n\n    // Return the sum of the squares of the\
    \ first n natural numbers.\n    // >>> sum_of_cubes(10)\n    // 12586\n    //\
    \ >>> sum_of_cubes(0)\n    // 0\n    // >>> sum_of_cubes(-1)\n    // 0\n    def\
    \ sum_of_cubes(n : Int) : Int = {\n        if (n < 0) {\n            return 0\n\
    \        } else {\n            return n * (n + 1) * (n + 2) * (3 * n + 1) / 8\n\
    \        }\n    }\n\n    // Return the sum of the first n natural numbers.\n \
    \   // >>> sum(10)\n    // 55\n    // >>> sum(0)\n    // 0\n    // >>> sum(-1)\n\
    \    // 0\n    def sum(n : Int) : Int = {\n        if (n", "        var l1_ =\
    \ l1.toSeq\n        var l2_ = l2.toSeq\n        var l1_$ = l1_.toIterator\n  \
    \      var l2_$ = l2_.toIterator\n        var l1_$_ = l1_.toIterator\n       \
    \ var l2_$_ = l2_.toIterator\n        var l1_$__ = l1_.toIterator\n        var\
    \ l2_$__ = l2_.toIterator\n        var l1_$__$ = l1_.toIterator\n        var l2_$__$\
    \ = l2_.toIterator\n        var l1_$__$_ = l1_.toIterator\n        var l2_$__$_\
    \ = l2_.toIterator\n        var l1_$__$__ = l1_.toIterator\n        var l2_$__$__\
    \ = l2_.toIterator\n        var l1_$__$__$ = l1_.toIterator\n        var l2_$__$__$\
    \ = l2_.toIterator\n        var l1_$__$__$$ = l1_.toIterator\n        var l2_$__$__$$\
    \ = l2_.toIterator\n        var l1_$__$__$$$ = l1_.toIterator\n        var l2_$__$__$$$\
    \ = l2_.toIterator\n        var l1_$__$__$$__ = l1_.toIterator\n        var l2_$__$__$$__$\
    \ = l2_.toIterator\n        var l1_$__$__$$__$$ = l1_.toIterator\n        var\
    \ l2_$__$__$$__$$$ = l2_.toIterator\n        var l1_$__$__$$__$$$_ = l1_.toIterator\n\
    \        var l2_$__$__$$__$$$_$ = l2_.toIterator\n        var l1_$__$__$$__$$$__\
    \ = l1_.toIterator\n        var l2_$__$__$$__$$$__$ = l2_.toIterator\n       \
    \ var l1_$__$__$$__$$$__$$ = l1_.toIterator\n        var l2_$__$__$$__$$$__$$$\
    \ = l2_.toIterator", "        var result = new ArrayList[Long]()\n        var\
    \ i = 0\n        var j = 0\n        while (i < l1.size && j < l2.size) {\n   \
    \         if (l1.apply(i) < l2.apply(j)) {\n                i += 1\n         \
    \   } else if (l1.apply(i) > l2.apply(j)) {\n                j += 1\n        \
    \    } else {\n                result.append(l1.apply(i))\n                i +=\
    \ 1\n                j += 1\n            }\n        }\n        return result",
  "        var result = new ArrayList[Long]()\n        var i = 0\n        var j =\
    \ 0\n        while (i < l1.length && j < l2.length) {\n            if (l1[i] ==\
    \ l2[j]) {\n                result.add(l1[i])\n                i += 1\n      \
    \          j += 1\n            } else if (l1[i] < l2[j]) {\n                i\
    \ += 1\n            } else {\n                j += 1\n            }\n        }\n\
    \        return result", "        var result = new ArrayList[Long]()\n       \
    \ var i = 0\n        var j = 0\n        while (i < l1.length && j < l2.length)\
    \ {\n            if (l1[i] == l2[j]) {\n                result.add(l1[i])\n  \
    \              i += 1\n                j += 1\n            } else if (l1[i] <\
    \ l2[j]) {\n                i += 1\n            } else {\n                j +=\
    \ 1\n            }\n        }\n        return result\n    }\n\n    // Return the\
    \ sum of all elements in the list.\n    // >>> sum(List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))\n    // 15l.toLong\n    // >>> sum(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))\n    // 10l.toLong\n    def sum(l : List[Long])\
    \ : Long = {\n        var result = 0l\n        for (i <- 0 until l.length) {\n\
    \            result += l[i]\n        }\n        return result\n    }\n\n    //\
    \ Return the product of all elements in the list.\n    // >>> product(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n    // 120l.toLong\n    // >>>\
    \ product(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))\n    // 24l.toLong\n\
    \    def product(l : List[Long]) : Long = {\n        var result = 1l\n       \
    \ for (i <- 0 until l.length) {\n            result *= l[i]\n        }\n     \
    \   return result\n    }\n\n    // Return the product of all elements in the list.\n\
    \    // >>> product(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n\
    \    // 120l.toLong\n    // >>> product(List[Long](1l.", "        var result =\
    \ new ArrayList[Long]()\n        for (i <- 0 until min(l1.length(), l2.length()))\
    \ {\n            if (l1.apply(i) == l2.apply(i)) {\n                result.append(l1.apply(i))\n\
    \            }\n        }\n        return result\n    }\n\n    // Return sorted\
    \ unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var result = new ArrayList[Long]()\n \
    \       for (i <- 0 until min(l1.length(), l2.length())) {\n            if (l1.apply(i)\
    \ == l2.apply(i)) {\n                result.append(l1.apply(i))\n            }\n\
    \        }\n        return result\n    }\n\n    // Return sorted unique common\
    \ elements for two lists.\n    // >>> common((List[Long](1l.toLong, 4l.toLong,\
    \ 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  //", "        var l1_ = l1.toSeq\n        var l2_ = l2.toSeq\n        var l1_\
    \ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toList\n\
    \        var l2_ = l2_.toList\n        var l1_ = l1_.toSet\n        var l2_ =\
    \ l2_.toSet\n        var l1_ = l1_.toMap\n        var l2_ = l2_.toMap\n      \
    \  var l1_ = l1_.toSortedSet\n        var l2_ = l2_.toSortedSet\n        var l1_\
    \ = l1_.toSortedMap\n        var l2_ = l2_.toSortedMap\n        var l1_ = l1_.toSortedSet\n\
    \        var l2_ = l2_.toSortedSet\n        var l1_ = l1_.toSortedMap\n      \
    \  var l2_ = l2_.toSortedMap\n        var l1_ = l1_.toSortedSet\n        var l2_\
    \ = l2_.toSortedSet\n        var l1_ = l1_.toSortedMap\n        var l2_ = l2_.toSortedMap\n\
    \        var l1_ = l1_.toSortedSet\n        var l2_ = l2_.toSortedSet\n      \
    \  var l1_ = l1_.toSortedMap\n        var l2_ = l2_.toSortedMap\n        var l1_\
    \ = l1_.toSortedSet\n        var l2_ = l2_.toSortedSet\n        var l1_ = l1_.toSortedMap\n\
    \        var l2_ = l2_.toSortedMap\n        var l1_ = l1_.toSortedSet\n      \
    \  var l2_ = l2_.toSortedSet\n        var l1_ = l1_.toSortedMap\n        var l2_\
    \ = l2_.toSortedMap\n        var l1_ = l1_.toSortedSet\n        var l2_ = l2_.toSortedSet\n\
    \        var l1_ = l1_.toSortedMap\n        var l2_ = l2_.toSorted", "       \
    \ var result = new ArrayList[Long]()\n        var i = 0\n        var j = 0\n \
    \       while (i < l1.size && j < l2.size) {\n            if (l1.apply(i).equals(l2.apply(j)))\
    \ {\n                result.add(l1.apply(i))\n                i += 1\n       \
    \         j += 1\n            } else if (l1.apply(i) < l2.apply(j)) {\n      \
    \          i += 1\n            } else {\n                j += 1\n            }\n\
    \        }\n        return result\n    }\n\n    // Return the sum of the elements\
    \ in the list.\n    // >>> sum(List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    def sum(l : List[Long])\
    \ : Long = {\n        var result = 0l\n        for (i <- 0 until l.size) {\n \
    \           result += l.apply(i)\n        }\n        return result\n    }\n\n\
    \    // Return the product of the elements in the list.\n    // >>> product(List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    //\
    \ 653l.toLong\n    def product(l : List[Long]) : Long = {\n        var result\
    \ = 1l\n        for (i <- 0 until l.size) {\n            result *= l.apply(i)\n\
    \        }\n        return result\n    }\n\n    // Return the product of the elements\
    \ in the list.\n    // >>> product(List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    def\
    \ product(l : List[Long]) : Long = {\n        var result = 1l\n        for (i\
    \ <- 0 until l.size) {\n            result *", "        var l1_sorted = l1.sorted\n\
    \        var l2_sorted = l2.sorted\n        var i = 0\n        var j = 0\n   \
    \     var result = List[Long]()\n        while (i < l1_sorted.size && j < l2_sorted.size)\
    \ {\n            if (l1_sorted.apply(i) == l2_sorted.apply(j)) {\n           \
    \     result = result.append(l1_sorted.apply(i))\n                i += 1\n   \
    \             j += 1\n            } else if (l1_sorted.apply(i) < l2_sorted.apply(j))\
    \ {\n                i += 1\n            } else {\n                j += 1\n  \
    \          }\n        }\n        return result", "        var l = new java.util.ArrayList[Long]()\n\
    \        for (i <- 0 until l1.size()) {\n            if (l2.contains(l1.get(i)))\
    \ {\n                l.add(l1.get(i))\n            }\n        }\n        return\
    \ scala.collection.JavaConversions.asScalaBuffer(l).toList()", "        var result\
    \ = new ArrayList[Long]()\n        var i = 0\n        var j = 0\n        while\
    \ (i < l1.size && j < l2.size) {\n            if (l1.apply(i).equals(l2.apply(j)))\
    \ {\n                result.add(l1.apply(i))\n                i += 1\n       \
    \         j += 1\n            } else if (l1.apply(i) < l2.apply(j)) {\n      \
    \          i += 1\n            } else {\n                j += 1\n            }\n\
    \        }\n        return result", "        var l1_s = l1.toSeq\n        var\
    \ l2_s = l2.toSeq\n        var l1_s_s = l1_s.toSeq\n        var l2_s_s = l2_s.toSeq\n\
    \        var l1_s_s_s = l1_s_s.toSeq\n        var l2_s_s_s = l2_s_s.toSeq\n  \
    \      var l1_s_s_s_s = l1_s_s_s.toSeq\n        var l2_s_s_s_s = l2_s_s_s.toSeq\n\
    \        var l1_s_s_s_s_s = l1_s_s_s_s.toSeq\n        var l2_s_s_s_s_s = l2_s_s_s_s.toSeq\n\
    \        var l1_s_s_s_s_s_s = l1_s_s_s_s_s.toSeq\n        var l2_s_s_s_s_s_s =\
    \ l2_s_s_s_s_s.toSeq\n        var l1_s_s_s_s_s_s_s = l1_s_s_s_s_s_s.toSeq\n  \
    \      var l2_s_s_s_s_s_s_s = l2_s_s_s_s_s_s.toSeq\n        var l1_s_s_s_s_s_s_s_s\
    \ = l1_s_s_s_s_s_s_s.toSeq\n        var l2_s_s_s_s_s_s_s_s = l2_s_s_s_s_s_s_s.toSeq\n\
    \        var l1_s_s_s_s_s_s_s_s_s = l1_s_s_s_s_s_s_s_s.toSeq\n        var l2_s_s_s_s_s_s_s",
  "        var l1_ = l1\n        var l2_ = l2\n        var l1_size = l1_.size\n  \
    \      var l2_size = l2_.size\n        var l1_i = 0\n        var l2_i = 0\n  \
    \      var common = List[Long]()\n        while (l1_i < l1_size && l2_i < l2_size)\
    \ {\n            if (l1_[l1_i] == l2_[l2_i]) {\n                common = common.append(l1_[l1_i])\n\
    \                l1_i = l1_i + 1\n                l2_i = l2_i + 1\n          \
    \  } else if (l1_[l1_i] < l2_[l2_i]) {\n                l1_i = l1_i + 1\n    \
    \        } else {\n                l2_i = l2_i + 1\n            }\n        }\n\
    \        return common", "        var l = new scala.collection.mutable.LinkedList[Long]()\n\
    \        for (i <- 0 until l1.length) {\n            if (l1.apply(i) == l2.apply(i))\
    \ {\n                l.add(l1.apply(i))\n            }\n        }\n        l.sort(java.util.Comparator.comparingLong(x\
    \ -> x))\n        return l.toList()\n    }\n\n    // Return sorted unique common\
    \ elements for three lists.\n    // >>> common((List[Long](1l.toLong, 4l.toLong,\
    \ 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)), (List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)))\n    // (List[Long](1l.toLong, 5l.toLong,\
    \ 653l.toLong))\n    // >>> common((List[Long](5l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)), (List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong))\n\
    \    // >>> common((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong,\
    \ 2l.toLong", "        var l1_ = l1.toSeq\n        var l2_ = l2.toSeq\n      \
    \  var l1_$ = l1_.toIterator\n        var l2_$ = l2_.toIterator\n        var l1_$_\
    \ = l1_.toIterator\n        var l2_$_ = l2_.toIterator\n        var l1_$__ = l1_.toIterator\n\
    \        var l2_$__ = l2_.toIterator\n        var l1_$__$ = l1_.toIterator\n \
    \       var l2_$__$ = l2_.toIterator\n        var l1_$__$_ = l1_.toIterator\n\
    \        var l2_$__$_ = l2_.toIterator\n        var l1_$__$__ = l1_.toIterator\n\
    \        var l2_$__$__ = l2_.toIterator\n        var l1_$__$__$ = l1_.toIterator\n\
    \        var l2_$__$__$ = l2_.toIterator\n        var l1_$__$__$_ = l1_.toIterator\n\
    \        var l2_$__$__$_ = l2_.toIterator\n        var l1_$__$__$__ = l1_.toIterator\n\
    \        var l2_$__$__$__ = l2_.toIterator\n        var l1_$__$__$__$ = l1_.toIterator\n\
    \        var l2_$__$__$__$ = l2_.toIterator\n        var l1_$__$__$__$_ = l1_.toIterator\n\
    \        var l2_$__$__$__$_ = l2_.toIterator\n        var l1_$__$__$__$__ = l1_.toIterator\n\
    \        var l2_$__$__$__$__ = l2_.toIterator\n        var l1_$__$__$__$__$ =\
    \ l1_.toIterator\n        var l2_$__$__$__$__$ = l2_.toIterator\n        var l1_$__$__$__$__$_\
    \ = l1_.toIterator\n        var l2_$__$__$__$__$_ = l2_.toIterator\n", "     \
    \   var l1_ = l1.toSeq();\n        var l2_ = l2.toSeq();\n        var l1_ = l1_.toBuffer();\n\
    \        var l2_ = l2_.toBuffer();\n        var l1_ = l1_.toSet();\n        var\
    \ l2_ = l2_.toSet();\n        var l1_ = l1_.toMap();\n        var l2_ = l2_.toMap();\n\
    \        var l1_ = l1_.toSet();\n        var l2_ = l2_.toSet();\n        var l1_\
    \ = l1_.toSet();\n        var l2_ = l2_.toSet();\n        var l1_ = l1_.toSet();\n\
    \        var l2_ = l2_.toSet();\n        var l1_ = l1_.toSet();\n        var l2_\
    \ = l2_.toSet();\n        var l1_ = l1_.toSet();\n        var l2_ = l2_.toSet();\n\
    \        var l1_ = l1_.toSet();\n        var l2_ = l2_.toSet();\n        var l1_\
    \ = l1_.toSet();\n        var l2_ = l2_.toSet();\n        var l1_ = l1_.toSet();\n\
    \        var l2_ = l2_.toSet();\n        var l1_ = l1_.toSet();\n        var l2_\
    \ = l2_.toSet();\n        var l1_ = l1_.toSet();\n        var l2_ = l2_.toSet();\n\
    \        var l1_ = l1_.toSet();\n        var l2_ = l2_.toSet();\n        var l1_\
    \ = l1_.toSet();\n        var l2_ = l2_.toSet();\n        var l1_ = l1_.toSet();\n\
    \        var l2_ = l2_.toSet();\n        var l1_ = l1_.toSet();\n        var l2_\
    \ = l2_.toSet();\n        var l1_ = l1_.toSet();\n        var l2_ = l2_.toSet();\n\
    \        var l1_ = l1_.toSet();\n        var l", "        var l1_ = l1.toSeq\n\
    \        var l2_ = l2.toSeq\n        var l1_$ = l1_.toSeq\n        var l2_$ =\
    \ l2_.toSeq\n        var l1_$_ = l1_.toSeq\n        var l2_$_ = l2_.toSeq\n  \
    \      var l1_$__ = l1_.toSeq\n        var l2_$__ = l2_.toSeq\n        var l1_$__$\
    \ = l1_.toSeq\n        var l2_$__$ = l2_.toSeq\n        var l1_$__$_ = l1_.toSeq\n\
    \        var l2_$__$_ = l2_.toSeq\n        var l1_$__$__ = l1_.toSeq\n       \
    \ var l2_$__$__ = l2_.toSeq\n        var l1_$__$__$ = l1_.toSeq\n        var l2_$__$__$\
    \ = l2_.toSeq\n        var l1_$__$__$_ = l1_.toSeq\n        var l2_$__$__$_ =\
    \ l2_.toSeq\n        var l1_$__$__$__ = l1_.toSeq\n        var l2_$__$__$__ =\
    \ l2_.toSeq\n        var l1_$__$__$__$ = l1_.toSeq\n        var l2_$__$__$__$\
    \ = l2_.toSeq\n        var l1_$__$__$__$_ = l1_.toSeq\n        var l2_$__$__$__$_\
    \ = l2_.toSeq\n        var l1_$__$__$__$__ = l1_.toSeq\n        var l2_$__$__$__$__\
    \ = l2_.toSeq\n        var l1_$__$__$__$__$ = l1_.toSeq\n        var l2_$__$__$__$__$\
    \ = l2_.toSeq\n        var l1_$__$__$__$__$_ = l1", "        var result = new\
    \ ArrayList[Long]()\n        var i = 0\n        var j = 0\n        while (i <\
    \ l1.length && j < l2.length) {\n            if (l1[i] == l2[j]) {\n         \
    \       result.append(l1[i])\n                i += 1\n                j += 1\n\
    \            } else if (l1[i] < l2[j]) {\n                i += 1\n           \
    \ } else {\n                j += 1\n            }\n        }\n        return result",
  "        var result = new ArrayList[Long]()\n        var i = 0\n        var j =\
    \ 0\n        while (i < l1.length && j < l2.length) {\n            if (l1[i] ==\
    \ l2[j]) {\n                result.add(l1[i])\n                i += 1\n      \
    \          j += 1\n            } else if (l1[i] < l2[j]) {\n                i\
    \ += 1\n            } else {\n                j += 1\n            }\n        }\n\
    \        return result\n    }\n\n    // Return the sum of the elements in the\
    \ given list.\n    // >>> sum(List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    // >>> sum(List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))\n   \
    \ // 15l.toLong\n    def sum(l : List[Long]) : Long = {\n        var result =\
    \ 0l\n        for (i <- 0 until l.length) {\n            result += l[i]\n    \
    \    }\n        return result\n    }\n\n    // Return the product of the elements\
    \ in the given list.\n    // >>> product(List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    //\
    \ >>> product(List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong,\
    \ 653l.toLong, 121l.toLong))\n    // 15l.toLong\n    def product(l : List[Long])\
    \ : Long = {\n        var result = 1l\n        for (i <- 0 until l.length) {\n\
    \            result *= l[i]\n        }\n        return result\n    }\n\n    //\
    \ Return the maximum", "        var l1_ = l1.toSeq\n        var l2_ = l2.toSeq\n\
    \        var l1_size = l1_.size\n        var l2_size = l2_.size\n        var i\
    \ = 0\n        var j = 0\n        var result = List[Long]()\n        while (i\
    \ < l1_size && j < l2_size) {\n            if (l1_[i] == l2_[j]) {\n         \
    \       result = result.append(l1_[i])\n                i += 1\n             \
    \   j += 1\n            } else if (l1_[i] < l2_[j]) {\n                i += 1\n\
    \            } else {\n                j += 1\n            }\n        }\n    \
    \    return result\n    }\n\n    // Return the sum of the elements in the list.\n\
    \    // >>> sum(List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong,\
    \ 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    def sum(l : List[Long]) : Long\
    \ = {\n        var result = 0l\n        var l_ = l.toSeq\n        var l_size =\
    \ l_.size\n        for (var i = 0; i < l_size; i += 1) {\n            result +=\
    \ l_[i]\n        }\n        return result\n    }\n\n    // Return the product\
    \ of the elements in the list.\n    // >>> product(List[Long](1l.toLong, 4l.toLong,\
    \ 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n\
    \    def product(l : List[Long]) : Long = {\n        var result = 1l\n       \
    \ var l_ = l.toSeq\n        var l_size = l_.size\n        for (var i = 0; i <\
    \ l_size; i += 1) {\n            result *= l_[i]\n        }\n        return result\n\
    \    }\n\n    // Return the product of the elements in the list.\n    // >>>",
  "        var l = new java.util.ArrayList()\n        for (var i = 0; i < l1.length;\
    \ i++) {\n            for (var j = 0; j < l2.length; j++) {\n                if\
    \ (l1[i] == l2[j]) {\n                    l.add(l1[i])\n                    break\n\
    \                }\n            }\n        }\n        return scala.collection.JavaConversions.asScalaBuffer(l).toList()",
  "        var result = new ArrayList[Long]()\n        var i = 0\n        var j =\
    \ 0\n        while (i < l1.length && j < l2.length) {\n            if (l1[i] ==\
    \ l2[j]) {\n                result.add(l1[i])\n                i += 1\n      \
    \          j += 1\n            } else if (l1[i] < l2[j]) {\n                i\
    \ += 1\n            } else {\n                j += 1\n            }\n        }\n\
    \        return result", "        var result = new ArrayList[Long]()\n       \
    \ var i = 0\n        var j = 0\n        while (i < l1.size && j < l2.size) {\n\
    \            if (l1.apply(i).equals(l2.apply(j))) {\n                result.append(l1.apply(i))\n\
    \                i += 1\n                j += 1\n            } else if (l1.apply(i)\
    \ < l2.apply(j)) {\n                i += 1\n            } else {\n           \
    \     j += 1\n            }\n        }\n        return result", "        var result\
    \ = new ArrayList[Long]()\n        var i = 0\n        var j = 0\n        while\
    \ (i < l1.length && j < l2.length) {\n            if (l1[i] == l2[j]) {\n    \
    \            result.add(l1[i])\n                i += 1\n                j += 1\n\
    \            } else if (l1[i] < l2[j]) {\n                i += 1\n           \
    \ } else {\n                j += 1\n            }\n        }\n        return result",
  "        var l1_ = l1.toSeq\n        var l2_ = l2.toSeq\n        var l1_ = l1_.toBuffer\n\
    \        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toList\n        var l2_\
    \ = l2_.toList\n        var l1_ = l1_.toSet\n        var l2_ = l2_.toSet\n   \
    \     var l1_ = l1_.toMap\n        var l2_ = l2_.toMap\n        var l1_ = l1_.toHashMap\n\
    \        var l2_ = l2_.toHashMap\n        var l1_ = l1_.toLinkedHashMap\n    \
    \    var l2_ = l2_.toLinkedHashMap\n        var l1_ = l1_.toLinkedHashSet\n  \
    \      var l2_ = l2_.toLinkedHashSet\n        var l1_ = l1_.toLinkedList\n   \
    \     var l2_ = l2_.toLinkedList\n        var l1_ = l1_.toStack\n        var l2_\
    \ = l2_.toStack\n        var l1_ = l1_.toVector\n        var l2_ = l2_.toVector\n\
    \        var l1_ = l1_.toArray\n        var l2_ = l2_.toArray\n        var l1_\
    \ = l1_.toArray[0]\n        var l2_ = l2_.toArray[0]\n        var l1_ = l1_.toSeq[0]\n\
    \        var l2_ = l2_.toSeq[0]\n        var l1_ = l1_.toBuffer[0]\n        var\
    \ l2_ = l2_.toBuffer[0]\n        var l1_ = l1_.toList[0]\n        var l2_ = l2_.toList[0]\n\
    \        var l1_ = l1_.toSet[0]\n        var l2_ = l2_.toSet[0]\n        var l1_\
    \ = l1_.toMap[0]\n        var l2_ = l2_.toMap[0]\n        var l1_ = l1_.toHashMap[0]\n\
    \        var l2_ =", "        var result = new ArrayList[Long]()\n        var\
    \ i = 0\n        var j = 0\n        while (i < l1.length && j < l2.length) {\n\
    \            if (l1[i] == l2[j]) {\n                result.append(l1[i])\n   \
    \             i += 1\n                j += 1\n            } else if (l1[i] < l2[j])\
    \ {\n                i += 1\n            } else {\n                j += 1\n  \
    \          }\n        }\n        return result", "        var result = new ArrayList[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (i < l1.length && j < l2.length)\
    \ {\n            if (l1[i] == l2[j]) {\n                result.append(l1[i])\n\
    \                i += 1\n                j += 1\n            } else if (l1[i]\
    \ < l2[j]) {\n                i += 1\n            } else {\n                j\
    \ += 1\n            }\n        }\n        return result\n    }\n\n    // Return\
    \ the sum of the elements in the list.\n    // >>> sum(List[Long](1l.toLong, 4l.toLong,\
    \ 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n\
    \    // >>> sum(List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong,\
    \ 653l.toLong, 121l.toLong))\n    // 653l.toLong\n    def sum(l : List[Long])\
    \ : Long = {\n        var result = 0l\n        for (i <- 0 until l.length) {\n\
    \            result += l[i]\n        }\n        return result\n    }\n\n    //\
    \ Return the product of the elements in the list.\n    // >>> product(List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    //\
    \ 653l.toLong\n    // >>> product(List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))\n    // 653l.toLong\n    def\
    \ product(l : List[Long]) : Long = {\n        var result = 1l\n        for (i\
    \ <- 0 until l.length) {\n            result *= l[i]\n        }\n        return\
    \ result\n    }\n\n    // Return the product", "        var result = new ArrayList[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (i < l1.length && j < l2.length)\
    \ {\n            if (l1[i] == l2[j]) {\n                result.append(l1[i])\n\
    \                i += 1\n                j += 1\n            } else if (l1[i]\
    \ < l2[j]) {\n                i += 1\n            } else {\n                j\
    \ += 1\n            }\n        }\n        return result", "        var result\
    \ = new ArrayList[Long]()\n        var i = 0\n        var j = 0\n        while\
    \ (i < l1.length && j < l2.length) {\n            if (l1[i] == l2[j]) {\n    \
    \            result.add(l1[i])\n                i += 1\n                j += 1\n\
    \            } else if (l1[i] < l2[j]) {\n                i += 1\n           \
    \ } else {\n                j += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // Return the number of unique elements in a list.\n    // >>> unique(List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    //\
    \ 6\n    // >>> unique(List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong,\
    \ 9l.toLong, 653l.toLong, 121l.toLong))\n    // 6\n    // >>> unique(List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    // 2\n    def unique(l : List[Long])\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until l.length) {\n \
    \           if (l.indexOf(l[i]) == -1) {\n                result += 1\n      \
    \      }\n        }\n        return result\n    }\n\n    // Return the number\
    \ of unique elements in a list.\n    // >>> unique(List[Long](1l.toLong, 4l.toLong,\
    \ 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    // 6\n    //\
    \ >>> unique(List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong,\
    \ 653l.toLong, 121l.toLong))\n    // 6\n    // >>> unique(List[Long](5l.toLong,\
    \ 3l.toLong, 2l.", "        var result = new ArrayList[Long]()\n        var i\
    \ = 0\n        var j = 0\n        while (i < l1.length && j < l2.length) {\n \
    \           if (l1[i] == l2[j]) {\n                result.append(l1[i])\n    \
    \            i += 1\n                j += 1\n            } else if (l1[i] < l2[j])\
    \ {\n                i += 1\n            } else {\n                j += 1\n  \
    \          }\n        }\n        return result\n    }\n\n    // Return the sum\
    \ of the squares of the first n natural numbers.\n    // >>> sumOfSquares(10)\n\
    \    // 385\n    // >>> sumOfSquares(0)\n    // 0\n    // >>> sumOfSquares(-1)\n\
    \    // java.lang.IllegalArgumentException: Cannot take the square root of a negative\
    \ number: -1.0\n    def sumOfSquares(n : Int) : Int = {\n        if (n < 0) throw\
    \ new IllegalArgumentException(\"Cannot take the square root of a negative number:\
    \ \" + n)\n        return n * (n + 1) / 2\n    }\n\n    // Return a list of the\
    \ first n positive integers.\n    // >>> take(10)\n    // List(1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10)\n    // >>> take(0)\n    // List()\n    def take(n : Int) :\
    \ List[Int] = {\n        if (n < 0) return List()\n        return takeWhile(i\
    \ -> i < n, List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n    }\n\n    // Return a list\
    \ of the first n positive integers.\n    // >>> takeWhile(i -> i < 10, List(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n    // List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n \
    \   def takeWhile(p : (Int -> Boolean), l : List[Int]) : List[Int] = {\n     \
    \   var result = new ArrayList[Int]()\n        for (i <- 0 until", "        var\
    \ l1_ = l1.toSeq().toList()\n        var l2_ = l2.toSeq().toList()\n        var\
    \ l3_ = l1_.intersect(l2_)\n        var l4_ = l3_.sort(Comparator.comparing(Long::toString))\n\
    \        return l4_", "        var result = new ArrayList[Long]()\n        var\
    \ i = 0\n        var j = 0\n        while (i < l1.length && j < l2.length) {\n\
    \            if (l1[i] == l2[j]) {\n                result.add(l1[i])\n      \
    \          i += 1\n                j += 1\n            } else if (l1[i] < l2[j])\
    \ {\n                i += 1\n            } else {\n                j += 1\n  \
    \          }\n        }\n        return result", "        var result = new ArrayList[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (i < l1.length && j < l2.length)\
    \ {\n            if (l1[i] == l2[j]) {\n                result.append(l1[i])\n\
    \                i += 1\n                j += 1\n            } else if (l1[i]\
    \ < l2[j]) {\n                i += 1\n            } else {\n                j\
    \ += 1\n            }\n        }\n        return result\n    }\n\n    // Return\
    \ the sum of the squares of the first n natural numbers.\n    // >>> sumOfSquares(10)\n\
    \    // 385\n    // >>> sumOfSquares(0)\n    // 0\n    def sumOfSquares(n : Int)\
    \ : Int = {\n        if (n == 0) {\n            return 0\n        } else {\n \
    \           return n * (n + 1) * (2 * n + 1) / 6\n        }\n    }\n\n    // Return\
    \ the sum of the squares of the first n natural numbers.\n    // >>> sumOfSquares(10)\n\
    \    // 385\n    // >>> sumOfSquares(0)\n    // 0\n    def sumOfSquares(n : Int)\
    \ : Int = {\n        if (n == 0) {\n            return 0\n        } else {\n \
    \           return n * (n + 1) * (2 * n + 1) / 6\n        }\n    }\n\n    // Return\
    \ the sum of the squares of the first n natural numbers.\n    // >>> sumOfSquares(10)\n\
    \    // 385\n    // >>> sumOfSquares(0)\n    // 0\n    def sumOfSquares(n : Int)\
    \ : Int = {\n        if (n == 0) {\n            return 0\n        } else {\n \
    \           return n * (n + 1) * (2 * n + 1) / 6\n        }\n    }\n\n    // Return\
    \ the sum of the squares of the first n natural numbers.\n    // >>> sumOfSquares(10)\n\
    \    // 385\n    // >>> sumOfSquares(0)\n    // 0\n    def sumOfSquares(n : Int)\
    \ : Int = {\n        if (n == 0", "        var l = l1.toList\n        var r =\
    \ l2.toList\n        var common = new ArrayList[Long]\n        var i = 0\n   \
    \     var j = 0\n        while (i < l.size && j < r.size) {\n            if (l.apply(i)\
    \ < r.apply(j)) {\n                i += 1\n            } else if (l.apply(i) >\
    \ r.apply(j)) {\n                j += 1\n            } else {\n              \
    \  common.append(l.apply(i))\n                i += 1\n                j += 1\n\
    \            }\n        }\n        return common.toList", "        var result\
    \ = new ArrayList[Long]()\n        var i = 0\n        var j = 0\n        while\
    \ (i < l1.length && j < l2.length) {\n            if (l1[i] == l2[j]) {\n    \
    \            result.append(l1[i])\n                i += 1\n                j +=\
    \ 1\n            } else if (l1[i] < l2[j]) {\n                i += 1\n       \
    \     } else {\n                j += 1\n            }\n        }\n        return\
    \ result\n    }\n\n    // Return the sum of all elements in the list.\n    //\
    \ >>> sum(List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong,\
    \ 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    def sum(l : List[Long]) : Long\
    \ = {\n        var result = 0l\n        for (i <- 0 until l.length) {\n      \
    \      result += l[i]\n        }\n        return result\n    }\n\n    // Return\
    \ the product of all elements in the list.\n    // >>> product(List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    //\
    \ 653l.toLong\n    def product(l : List[Long]) : Long = {\n        var result\
    \ = 1l\n        for (i <- 0 until l.length) {\n            result *= l[i]\n  \
    \      }\n        return result\n    }\n\n    // Return the product of all elements\
    \ in the list.\n    // >>> product(List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    def\
    \ product(l : List[Long]) : Long = {\n        var result = 1l\n        for (i\
    \ <- 0 until l.length) {\n            result *= l[i]\n        }\n        return\
    \ result\n    }\n\n", "        var l1_s = l1.sort(Comparator.comparingLong(l ->\
    \ l))\n        var l2_s = l2.sort(Comparator.comparingLong(l -> l))\n        var\
    \ l1_u = l1_s.toUnique()\n        var l2_u = l2_s.toUnique()\n        var l1_c\
    \ = l1_u.intersect(l2_u)\n        return l1_c", "        var l1_ = l1.toSeq\n\
    \        var l2_ = l2.toSeq\n        var l1_ = l1_.toBuffer\n        var l2_ =\
    \ l2_.toBuffer\n        var l1_ = l1_.toList\n        var l2_ = l2_.toList\n \
    \       var l1_ = l1_.toSet\n        var l2_ = l2_.toSet\n        var l1_ = l1_.toMap\n\
    \        var l2_ = l2_.toMap\n        var l1_ = l1_.toMap[Long]\n        var l2_\
    \ = l2_.toMap[Long]\n        var l1_ = l1_.toSeq\n        var l2_ = l2_.toSeq\n\
    \        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_\
    \ = l1_.toList\n        var l2_ = l2_.toList\n        var l1_ = l1_.toSet\n  \
    \      var l2_ = l2_.toSet\n        var l1_ = l1_.toMap\n        var l2_ = l2_.toMap\n\
    \        var l1_ = l1_.toMap[Long]\n        var l2_ = l2_.toMap[Long]\n      \
    \  var l1_ = l1_.toSeq\n        var l2_ = l2_.toSeq\n        var l1_ = l1_.toBuffer\n\
    \        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toList\n        var l2_\
    \ = l2_.toList\n        var l1_ = l1_.toSet\n        var l2_ = l2_.toSet\n   \
    \     var l1_ = l1_.toMap\n        var l2_ = l2_.toMap\n        var l1_ = l1_.toMap[Long]\n\
    \        var l2_ = l2_.toMap[Long]\n        var l1_ = l1_.toSeq\n        var l2_\
    \ = l2_.toSeq\n        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n\
    \        var l1_ =", "        var l = new java.util.ArrayList[Long]()\n      \
    \  for (i <- 0 until l1.size()) {\n            if (l2.contains(l1.get(i))) {\n\
    \                l.add(l1.get(i))\n            }\n        }\n        return scala.collection.JavaConversions.asScalaBuffer(l).toList()",
  "        var result = new ArrayList[Long]()\n        var i = 0\n        var j =\
    \ 0\n        while (i < l1.size && j < l2.size) {\n            if (l1.apply(i)\
    \ == l2.apply(j)) {\n                result.append(l1.apply(i))\n            \
    \    i += 1\n                j += 1\n            } else if (l1.apply(i) < l2.apply(j))\
    \ {\n                i += 1\n            } else {\n                j += 1\n  \
    \          }\n        }\n        return result\n    }\n\n    // Return the sum\
    \ of the elements in the list.\n    // >>> sum(List[Long](1l.toLong, 4l.toLong,\
    \ 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n\
    \    def sum(l : List[Long]) : Long = {\n        var result = 0l\n        for\
    \ (i <- 0 until l.size) {\n            result += l.apply(i)\n        }\n     \
    \   return result\n    }\n\n    // Return the product of the elements in the list.\n\
    \    // >>> product(List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong,\
    \ 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    def product(l : List[Long])\
    \ : Long = {\n        var result = 1l\n        for (i <- 0 until l.size) {\n \
    \           result *= l.apply(i)\n        }\n        return result\n    }\n\n\
    \    // Return the maximum of the elements in the list.\n    // >>> max(List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    //\
    \ 34l.toLong\n    def max(l : List[Long]) : Long = {\n        var result = l.apply(0)\n\
    \        for (i <- 1 until l.size) {\n            if", "        var l1_ = l1.toSeq\n\
    \        var l2_ = l2.toSeq\n        var l1_ = l1_.toBuffer\n        var l2_ =\
    \ l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n\
    \        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_\
    \ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n\
    \        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_\
    \ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n\
    \        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_\
    \ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n\
    \        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_\
    \ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n\
    \        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_\
    \ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n\
    \        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_\
    \ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n\
    \        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_\
    \ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n\
    \        var l2_ = l2_.toBuffer\n        var l1_ =", "        var l1_ = l1.toSeq\n\
    \        var l2_ = l2.toSeq\n        var result = new mutable.ListBuffer[Long]\n\
    \        var i = 0\n        var j = 0\n        while (i < l1_.size && j < l2_.size)\
    \ {\n            if (l1_.apply(i).equals(l2_.apply(j))) {\n                result.append(l1_.apply(i))\n\
    \                i += 1\n                j += 1\n            } else if (l1_.apply(i)\
    \ < l2_.apply(j)) {\n                i += 1\n            } else {\n          \
    \      j += 1\n            }\n        }\n        return result.toList", "    \
    \    var l = new java.util.ArrayList[Long]()\n        for (var i = 0; i < l1.size();\
    \ i++) {\n            var e = l1.get(i)\n            if (l.contains(e)) continue\n\
    \            l.add(e)\n        }\n        for (var i = 0; i < l2.size(); i++)\
    \ {\n            var e = l2.get(i)\n            if (l.contains(e)) continue\n\
    \            l.add(e)\n        }\n        return scala.collection.JavaConversions.asScalaBuffer(l).toList()",
  "        var l = l1.zipWithIndex().toList\n        var i = 0\n        var j = 0\n\
    \        var result = List[Long]()\n        while (i < l.size && j < l2.size)\
    \ {\n            if (l.apply(i).equals(l2.apply(j))) {\n                result\
    \ = result.append(l.apply(i))\n                i += 1\n                j += 1\n\
    \            } else if (l.apply(i).compareTo(l2.apply(j)) < 0) {\n           \
    \     i += 1\n            } else {\n                j += 1\n            }\n  \
    \      }\n        return result", "        var result = new ArrayList[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (i < l1.length && j < l2.length)\
    \ {\n            if (l1[i] == l2[j]) {\n                result.add(l1[i])\n  \
    \              i += 1\n                j += 1\n            } else if (l1[i] <\
    \ l2[j]) {\n                i += 1\n            } else {\n                j +=\
    \ 1\n            }\n        }\n        return result\n    }\n\n    // Return the\
    \ sum of the elements in a list.\n    // >>> sum(List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))\n    // 10l\n    // >>> sum(List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))\n    // 15l\n    // >>> sum(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))\n    // 21l\n    //\
    \ >>> sum(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong,\
    \ 7l.toLong))\n    // 28l\n    // >>> sum(List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))\n    // 36l\n    //\
    \ >>> sum(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))\n    // 45l\n    // >>> sum(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.to", "        var\
    \ l1_sorted = l1.sorted\n        var l2_sorted = l2.sorted\n        var i = 0\n\
    \        var j = 0\n        var result = List[Long]()\n        while (i < l1_sorted.size\
    \ && j < l2_sorted.size) {\n            if (l1_sorted.apply(i) == l2_sorted.apply(j))\
    \ {\n                result = result.append(l1_sorted.apply(i))\n            \
    \    i += 1\n                j += 1\n            } else if (l1_sorted.apply(i)\
    \ < l2_sorted.apply(j)) {\n                i += 1\n            } else {\n    \
    \            j += 1\n            }\n        }\n        return result", "     \
    \   var result = new ArrayList[Long]()\n        var i = 0\n        var j = 0\n\
    \        while (i < l1.length && j < l2.length) {\n            if (l1[i] == l2[j])\
    \ {\n                result.add(l1[i])\n                i += 1\n             \
    \   j += 1\n            } else if (l1[i] < l2[j]) {\n                i += 1\n\
    \            } else {\n                j += 1\n            }\n        }\n    \
    \    return result", "        var l1_ = l1.toSeq\n        var l2_ = l2.toSeq\n\
    \        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_\
    \ = l1_.toSeq\n        var l2_ = l2_.toSeq\n        var l1_ = l1_.toBuffer\n \
    \       var l2_ = l2_.toBuffer\n        var l1_ = l1_.toSeq\n        var l2_ =\
    \ l2_.toSeq\n        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n\
    \        var l1_ = l1_.toSeq\n        var l2_ = l2_.toSeq\n        var l1_ = l1_.toBuffer\n\
    \        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toSeq\n        var l2_\
    \ = l2_.toSeq\n        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n\
    \        var l1_ = l1_.toSeq\n        var l2_ = l2_.toSeq\n        var l1_ = l1_.toBuffer\n\
    \        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toSeq\n        var l2_\
    \ = l2_.toSeq\n        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n\
    \        var l1_ = l1_.toSeq\n        var l2_ = l2_.toSeq\n        var l1_ = l1_.toBuffer\n\
    \        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toSeq\n        var l2_\
    \ = l2_.toSeq\n        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n\
    \        var l1_ = l1_.toSeq\n        var l2_ = l2_.toSeq\n        var l1_ = l1_.toBuffer\n\
    \        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toSeq", "        var l1_\
    \ = l1.toSeq\n        var l2_ = l2.toSeq\n        var l1_size = l1_().size\n \
    \       var l2_size = l2_().size\n        var i = 0\n        var j = 0\n     \
    \   var result = List[Long](l1_size)\n        while (i < l1_size && j < l2_size)\
    \ {\n            var l1_i = l1_()(i)\n            var l2_j = l2_()(j)\n      \
    \      if (l1_i == l2_j) {\n                result = result.updated(i, l1_i)\n\
    \                i += 1\n                j += 1\n            } else if (l1_i <\
    \ l2_j) {\n                i += 1\n            } else {\n                j +=\
    \ 1\n            }\n        }\n        return result", "        var l1_sorted\
    \ = l1.sorted\n        var l2_sorted = l2.sorted\n        var l1_sorted_set =\
    \ new HashSet(l1_sorted)\n        var l2_sorted_set = new HashSet(l2_sorted)\n\
    \        var common = l1_sorted_set.intersect(l2_sorted_set)\n        return common.toList",
  "        var result = new ArrayList[Long]()\n        var i = 0\n        var j =\
    \ 0\n        while (i < l1.length && j < l2.length) {\n            if (l1[i] ==\
    \ l2[j]) {\n                result.append(l1[i])\n                i += 1\n   \
    \             j += 1\n            } else if (l1[i] < l2[j]) {\n              \
    \  i += 1\n            } else {\n                j += 1\n            }\n     \
    \   }\n        return result", "        var result = new ArrayList[Long]()\n \
    \       var i = 0\n        var j = 0\n        while (i < l1.size && j < l2.size)\
    \ {\n            if (l1.apply(i).equals(l2.apply(j))) {\n                result.append(l1.apply(i))\n\
    \                i += 1\n                j += 1\n            } else if (l1.apply(i)\
    \ > l2.apply(j)) {\n                j += 1\n            } else {\n           \
    \     i += 1\n            }\n        }\n        return result", "        var l1_\
    \ = l1.toSeq\n        var l2_ = l2.toSeq\n        var l1_len = l1_.length\n  \
    \      var l2_len = l2_.length\n        var i = 0\n        var j = 0\n       \
    \ var result = List[Long]()\n        while (i < l1_len && j < l2_len) {\n    \
    \        if (l1_[i] == l2_[j]) {\n                result = result.append(l1_[i])\n\
    \                i += 1\n                j += 1\n            } else if (l1_[i]\
    \ < l2_[j]) {\n                i += 1\n            } else {\n                j\
    \ += 1\n            }\n        }\n        return result", "        var result\
    \ = new ArrayList[Long]()\n        var i = 0\n        var j = 0\n        while\
    \ (i < l1.size && j < l2.size) {\n            if (l1.apply(i) == l2.apply(j))\
    \ {\n                result.append(l1.apply(i))\n                i += 1\n    \
    \            j += 1\n            } else if (l1.apply(i) < l2.apply(j)) {\n   \
    \             i += 1\n            } else {\n                j += 1\n         \
    \   }\n        }\n        return result", "        var result = new ArrayList[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (i < l1.length && j < l2.length)\
    \ {\n            if (l1[i] == l2[j]) {\n                result.add(l1[i])\n  \
    \              i += 1\n                j += 1\n            } else if (l1[i] <\
    \ l2[j]) {\n                i += 1\n            } else {\n                j +=\
    \ 1\n            }\n        }\n        return result\n    }\n\n    // Return the\
    \ sum of the elements in the list.\n    // >>> sum(List[Long](1l.toLong, 4l.toLong,\
    \ 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n\
    \    // >>> sum(List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong,\
    \ 653l.toLong, 121l.toLong))\n    // 653l.toLong\n    // >>> sum(List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    // 5l.toLong\n    def sum(l : List[Long])\
    \ : Long = {\n        var result = 0l\n        for (i <- 0 until l.length) {\n\
    \            result += l[i]\n        }\n        return result\n    }\n\n    //\
    \ Return the product of the elements in the list.\n    // >>> product(List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    //\
    \ 653l.toLong\n    // >>> product(List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))\n    // 5l.toLong\n    // >>>\
    \ product(List[Long](5l.toLong, 3l.", "        var result = new ArrayList[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (i < l1.length && j < l2.length)\
    \ {\n            if (l1[i] == l2[j]) {\n                result.append(l1[i])\n\
    \                i += 1\n                j += 1\n            } else if (l1[i]\
    \ < l2[j]) {\n                i += 1\n            } else {\n                j\
    \ += 1\n            }\n        }\n        return result\n    }\n\n    // Return\
    \ the number of unique elements in a list.\n    // >>> unique(List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    //\
    \ 6\n    // >>> unique(List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong,\
    \ 9l.toLong, 653l.toLong, 121l.toLong))\n    // 6\n    // >>> unique(List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    // 2\n    def unique(l : List[Long])\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until l.length - 1) {\n\
    \            for (j <- i + 1 until l.length) {\n                if (l[i] == l[j])\
    \ {\n                    break\n                }\n            }\n           \
    \ if (j == l.length) {\n                result += 1\n            }\n        }\n\
    \        return result\n    }\n\n    // Return the number of occurrences of an\
    \ element in a list.\n    // >>> occurrences(List[Long](1l.toLong, 4l.toLong,\
    \ 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong), 5l.toLong)\n    //\
    \ 2\n    // >>> occurrences(List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong,\
    \ 9l.toLong, 6", "        var result = new ArrayList[Long]()\n        var i =\
    \ 0\n        var j = 0\n        while (i < l1.size && j < l2.size) {\n       \
    \     if (l1.apply(i) == l2.apply(j)) {\n                result.append(l1.apply(i))\n\
    \                i += 1\n                j += 1\n            } else if (l1.apply(i)\
    \ < l2.apply(j)) {\n                i += 1\n            } else {\n           \
    \     j += 1\n            }\n        }\n        return result\n    }\n\n    //\
    \ Return the sum of the elements in the list.\n    // >>> sum(List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    //\
    \ 653l.toLong\n    // >>> sum(List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong,\
    \ 9l.toLong, 653l.toLong, 121l.toLong))\n    // 7l.toLong\n    def sum(l : List[Long])\
    \ : Long = {\n        var result = 0l\n        for (i <- 0 until l.size) {\n \
    \           result += l.apply(i)\n        }\n        return result\n    }\n\n\
    \    // Return the product of the elements in the list.\n    // >>> product(List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    //\
    \ 653l.toLong\n    // >>> product(List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))\n    // 5l.toLong\n    def\
    \ product(l : List[Long]) : Long = {\n        var result = 1l\n        for (i\
    \ <- 0 until l.size) {\n            result *= l.apply(i)\n        }\n", "    \
    \    var l1_ = l1.toSeq\n        var l2_ = l2.toSeq\n        var l1_len = l1_().length\n\
    \        var l2_len = l2_().length\n        var i = 0\n        var j = 0\n   \
    \     var common = List[Long]()\n        while (i < l1_len && j < l2_len) {\n\
    \            if (l1_[i] == l2_[j]) {\n                common = common.append(l1_[i])\n\
    \                i += 1\n                j += 1\n            } else if (l1_[i]\
    \ < l2_[j]) {\n                i += 1\n            } else {\n                j\
    \ += 1\n            }\n        }\n        return common", "        var l = new\
    \ java.util.ArrayList()\n        for (i <- 0 until min(l1.length(), l2.length()))\
    \ {\n            if (l1.apply(i) == l2.apply(i)) {\n                l.add(l1.apply(i))\n\
    \            }\n        }\n        return scala.collection.JavaConversions.asScalaBuffer(l).toList()",
  "        var result = new ArrayList[Long]()\n        var i = 0\n        var j =\
    \ 0\n        while (i < l1.length && j < l2.length) {\n            if (l1[i] ==\
    \ l2[j]) {\n                result.append(l1[i])\n                i += 1\n   \
    \             j += 1\n            } else if (l1[i] < l2[j]) {\n              \
    \  i += 1\n            } else {\n                j += 1\n            }\n     \
    \   }\n        return result\n    }\n\n    // Return the sum of the elements in\
    \ the list.\n    // >>> sum(List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    // >>> sum(List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))\n   \
    \ // 1066l.toLong\n    def sum(l : List[Long]) : Long = {\n        var result\
    \ = 0l\n        for (i <- 0 until l.length) {\n            result += l[i]\n  \
    \      }\n        return result\n    }\n\n    // Return the product of the elements\
    \ in the list.\n    // >>> product(List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    //\
    \ >>> product(List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong,\
    \ 653l.toLong, 121l.toLong))\n    // 653l.toLong\n    def product(l : List[Long])\
    \ : Long = {\n        var result = 1l\n        for (i <- 0 until l.length) {\n\
    \            result *= l[i]\n        }\n        return result\n    }\n\n    //\
    \ Return the product", "        var result = new ArrayList[Long]()\n        for\
    \ (i <- 0 until min(l1.length, l2.length)) {\n            if (l1[i] == l2[i])\
    \ {\n                result.add(l1[i])\n            }\n        }\n        return\
    \ result\n    }\n\n    // Return the sum of the squares of the first n natural\
    \ numbers.\n    // >>> sumOfSquares(10)\n    // 385\n    // >>> sumOfSquares(0)\n\
    \    // 0\n    def sumOfSquares(n : Int) : Int = {\n        var sum = 0\n    \
    \    for (i <- 0 until n) {\n            sum += i * i\n        }\n        return\
    \ sum\n    }\n\n    // Return a list of the first n natural numbers.\n    // >>>\
    \ list(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    // (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))\n    def list(n : Int) : List[Long] = {\n        var result = new\
    \ ArrayList[Long]()\n        for (i <- 0 until n) {\n            result.add(i)\n\
    \        }\n        return result\n    }\n\n    // Return a list of the first\
    \ n natural numbers.\n    // >>> list(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    // (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong, 10l.toLong))\n    def list(n : Int) : List[Long] = {\n        var\
    \ result = new ArrayList[Long]()\n        for (i <- 0 until n) {\n           \
    \ result.add(i)\n        }\n        return result\n    }\n\n    // Return a list\
    \ of the first n natural numbers.\n    //", "        var l1_ = l1.toSeq\n    \
    \    var l2_ = l2.toSeq\n        var l1_$ = l1_.toIterator\n        var l2_$ =\
    \ l2_.toIterator\n        var l1_$_ = l1_.toIterator\n        var l2_$_ = l2_.toIterator\n\
    \        var l1_$__ = l1_.toIterator\n        var l2_$__ = l2_.toIterator\n  \
    \      var l1_$__$ = l1_.toIterator\n        var l2_$__$ = l2_.toIterator\n  \
    \      var l1_$__$_ = l1_.toIterator\n        var l2_$__$_ = l2_.toIterator\n\
    \        var l1_$__$__ = l1_.toIterator\n        var l2_$__$__ = l2_.toIterator\n\
    \        var l1_$__$__$ = l1_.toIterator\n        var l2_$__$__$ = l2_.toIterator\n\
    \        var l1_$__$__$_ = l1_.toIterator\n        var l2_$__$__$_ = l2_.toIterator\n\
    \        var l1_$__$__$__ = l1_.toIterator\n        var l2_$__$__$__ = l2_.toIterator\n\
    \        var l1_$__$__$__$ = l1_.toIterator\n        var l2_$__$__$__$ = l2_.toIterator\n\
    \        var l1_$__$__$__$_ = l1_.toIterator\n        var l2_$__$__$__$_ = l2_.toIterator\n\
    \        var l1_$__$__$__$__ = l1_.toIterator\n        var l2_$__$__$__$__ = l2_.toIterator\n\
    \        var l1_$__$__$__$__$ = l1_.toIterator\n        var l2_$__$__$__$__$ =\
    \ l2_.toIterator\n        var l1_$__$__$__$__$_ = l1_.toIterator\n        var\
    \ l2_$__$__$__$__$_ = l2_.toIterator\n", "        var l1_ = l1.toSeq().toList()\n\
    \        var l2_ = l2.toSeq().toList()\n        var l3_ = l1_.intersect(l2_)\n\
    \        var l4_ = l3_.sort(Comparator.comparing(x -> x))\n        return l4_",
  "        var l1_sorted = l1.sorted\n        var l2_sorted = l2.sorted\n        var\
    \ i = 0\n        var j = 0\n        var result = List[Long]()\n        while (i\
    \ < l1_sorted.size && j < l2_sorted.size) {\n            if (l1_sorted.apply(i)\
    \ == l2_sorted.apply(j)) {\n                result = result.append(l1_sorted.apply(i))\n\
    \                i += 1\n                j += 1\n            } else if (l1_sorted.apply(i)\
    \ < l2_sorted.apply(j)) {\n                i += 1\n            } else {\n    \
    \            j += 1\n            }\n        }\n        return result", "     \
    \   var l1_ = l1.toSeq\n        var l2_ = l2.toSeq\n        var l1_$ = l1_\n \
    \       var l2_$ = l2_\n        var l1_$_ = l1_$\n        var l2_$_ = l2_$\n \
    \       var l1_$__ = l1_$_\n        var l2_$__ = l2_$_\n        var l1_$__$ =\
    \ l1_$__\n        var l2_$__$ = l2_$__\n        var l1_$__$_ = l1_$__$\n     \
    \   var l2_$__$_ = l2_$__$\n        var l1_$__$__ = l1_$__$_\n        var l2_$__$__\
    \ = l2_$__$_\n        var l1_$__$__$ = l1_$__$__\n        var l2_$__$__$ = l2_$__$__\n\
    \        var l1_$__$__$_ = l1_$__$__$\n        var l2_$__$__$_ = l2_$__$__$\n\
    \        var l1_$__$__$__ = l1_$__$__$_\n        var l2_$__$__$__ = l2_$__$__$_\n\
    \        var l1_$__$__$__$ = l1_$__$__$__\n        var l2_$__$__$__$ = l2_$__$__$__\n\
    \        var l1_$__$__$__$_ = l1_$__$__$__$\n        var l2_$__$__$__$_ = l2_$__$__$__$\n\
    \        var l1_$__$__$__$__ = l1_$__$__$__$_\n        var l2_$__$__$__$__ = l2_$__$__$__$_\n\
    \        var l1_$__$__$__$__$ = l1_$__$__$__$__\n        var l2_$__$__$__", " \
    \       var common = new ArrayList[Long]()\n        var i = 0\n        var j =\
    \ 0\n        while (i < l1.size && j < l2.size) {\n            if (l1.apply(i)\
    \ == l2.apply(j)) {\n                common.add(l1.apply(i))\n               \
    \ i += 1\n                j += 1\n            } else if (l1.apply(i) < l2.apply(j))\
    \ {\n                i += 1\n            } else {\n                j += 1\n  \
    \          }\n        }\n        return common\n    }\n\n    // Return the number\
    \ of elements in the intersection of two lists.\n    // >>> intersection((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // 3\n    // >>> intersection((List[Long](5l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n    // 0\n    def intersection(l1\
    \ : List[Long], l2 : List[Long]) : Int = {\n        var i = 0\n        var j =\
    \ 0\n        var count = 0\n        while (i < l1.size && j < l2.size) {\n   \
    \         if (l1.apply(i) == l2.apply(j)) {\n                count += 1\n    \
    \            i += 1\n                j += 1\n            } else if (l1.apply(i)\
    \ < l2.apply(j)) {\n                i += 1\n            } else {\n           \
    \     j += 1\n            }\n        }\n        return count\n    }\n\n    //\
    \ Return the number of elements in the union of two lists.\n    // >>> union((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2", "        var l1_ = l1.toSeq\n\
    \        var l2_ = l2.toSeq\n        var l1_ = l1_.toBuffer\n        var l2_ =\
    \ l2_.toBuffer\n        var l1_ = l1_.toList\n        var l2_ = l2_.toList\n \
    \       var l1_ = l1_.toSet\n        var l2_ = l2_.toSet\n        var l1_ = l1_.toMap\n\
    \        var l2_ = l2_.toMap\n        var l1_ = l1_.toHashMap\n        var l2_\
    \ = l2_.toHashMap\n        var l1_ = l1_.toLinkedHashMap\n        var l2_ = l2_.toLinkedHashMap\n\
    \        var l1_ = l1_.toTreeMap\n        var l2_ = l2_.toTreeMap\n        var\
    \ l1_ = l1_.toMap\n        var l2_ = l2_.toMap\n        var l1_ = l1_.toHashMap\n\
    \        var l2_ = l2_.toHashMap\n        var l1_ = l1_.toLinkedHashMap\n    \
    \    var l2_ = l2_.toLinkedHashMap\n        var l1_ = l1_.toTreeMap\n        var\
    \ l2_ = l2_.toTreeMap\n        var l1_ = l1_.toMap\n        var l2_ = l2_.toMap\n\
    \        var l1_ = l1_.toHashMap\n        var l2_ = l2_.toHashMap\n        var\
    \ l1_ = l1_.toLinkedHashMap\n        var l2_ = l2_.toLinkedHashMap\n        var\
    \ l1_ = l1_.toTreeMap\n        var l2_ = l2_.toTreeMap\n        var l1_ = l1_.toMap\n\
    \        var l2_ = l2_.toMap\n        var l1_ = l1_.toHashMap\n        var l2_\
    \ = l2_.toHashMap\n        var l1_ = l1_.toLinkedHashMap\n        var l2_ = l2_.toLinkedHashMap\n\
    \        var l1_ = l1_.toTreeMap\n        var l", "        var result = new ArrayList[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (i < l1.length && j < l2.length)\
    \ {\n            if (l1[i] == l2[j]) {\n                result.add(l1[i])\n  \
    \              i += 1\n                j += 1\n            } else if (l1[i] <\
    \ l2[j]) {\n                i += 1\n            } else {\n                j +=\
    \ 1\n            }\n        }\n        return result", "        var l = new java.util.ArrayList()\n\
    \        for (i <- 0 until l1.size()) {\n            for (j <- 0 until l2.size())\
    \ {\n                if (l1.get(i) == l2.get(j)) {\n                    l.add(l1.get(i))\n\
    \                    break\n                }\n            }\n        }\n    \
    \    return scala.collection.JavaConversions.asScalaBuffer(l).toList()", "   \
    \     var l1_ = l1.toSeq\n        var l2_ = l2.toSeq\n        var l1_$ = l1_.toSeq\n\
    \        var l2_$ = l2_.toSeq\n        var l1_$_ = l1_.toSeq\n        var l2_$_\
    \ = l2_.toSeq\n        var l1_$__ = l1_.toSeq\n        var l2_$__ = l2_.toSeq\n\
    \        var l1_$__$ = l1_.toSeq\n        var l2_$__$ = l2_.toSeq\n        var\
    \ l1_$__$_ = l1_.toSeq\n        var l2_$__$_ = l2_.toSeq\n        var l1_$__$__\
    \ = l1_.toSeq\n        var l2_$__$__ = l2_.toSeq\n        var l1_$__$__$ = l1_.toSeq\n\
    \        var l2_$__$__$ = l2_.toSeq\n        var l1_$__$__$_ = l1_.toSeq\n   \
    \     var l2_$__$__$_ = l2_.toSeq\n        var l1_$__$__$__ = l1_.toSeq\n    \
    \    var l2_$__$__$__ = l2_.toSeq\n        var l1_$__$__$__$ = l1_.toSeq\n   \
    \     var l2_$__$__$__$ = l2_.toSeq\n        var l1_$__$__$__$_ = l1_.toSeq\n\
    \        var l2_$__$__$__$_ = l2_.toSeq\n        var l1_$__$__$__$__ = l1_.toSeq\n\
    \        var l2_$__$__$__$__ = l2_.toSeq\n        var l1_$__$__$__$__$ = l1_.toSeq\n\
    \        var l2_$__$__$__$__$ = l2_.toSeq\n        var l1_$__$__$__$__$_ = l1",
  "        var l = l1.zipWithIndex()\n        var m = l2.zipWithIndex()\n        var\
    \ r = mutable.List[Long]()\n        for (i <- 0 until m.size()) {\n          \
    \  var j = m.apply(i)\n            if (l.apply(j)._1() == l.apply(j)._2()) {\n\
    \                r = r.append(l.apply(j)._1())\n            }\n        }\n   \
    \     return r", "        var res = new ArrayList[Long]()\n        var i = 0\n\
    \        var j = 0\n        while (i < l1.length && j < l2.length) {\n       \
    \     if (l1[i] == l2[j]) {\n                res.append(l1[i])\n             \
    \   i += 1\n                j += 1\n            } else if (l1[i] < l2[j]) {\n\
    \                i += 1\n            } else {\n                j += 1\n      \
    \      }\n        }\n        return res", "        var l1_ = l1.toSeq\n      \
    \  var l2_ = l2.toSeq\n        var l1_size = l1_().size\n        var l2_size =\
    \ l2_().size\n        var i = 0\n        var j = 0\n        var result = List[Long]()\n\
    \        while (i < l1_size && j < l2_size) {\n            var l1_i = l1_()(i)\n\
    \            var l2_j = l2_()(j)\n            if (l1_i == l2_j) {\n          \
    \      result = result.append(l1_i)\n                i += 1\n                j\
    \ += 1\n            } else if (l1_i < l2_j) {\n                i += 1\n      \
    \      } else {\n                j += 1\n            }\n        }\n        return\
    \ result", "        var l1_ = l1.toSeq\n        var l2_ = l2.toSeq\n        var\
    \ l1_$ = l1_\n        var l2_$ = l2_\n        var l1_$_ = l1_$\n        var l2_$_\
    \ = l2_$\n        var l1_$__ = l1_$_\n        var l2_$__ = l2_$_\n        var\
    \ l1_$__$ = l1_$__\n        var l2_$__$ = l2_$__\n        var l1_$__$_ = l1_$__$\n\
    \        var l2_$__$_ = l2_$__$\n        var l1_$__$__ = l1_$__$_\n        var\
    \ l2_$__$__ = l2_$__$_\n        var l1_$__$__$ = l1_$__$__\n        var l2_$__$__$\
    \ = l2_$__$__\n        var l1_$__$__$_ = l1_$__$__$\n        var l2_$__$__$_ =\
    \ l2_$__$__$\n        var l1_$__$__$__ = l1_$__$__$_\n        var l2_$__$__$__\
    \ = l2_$__$__$_\n        var l1_$__$__$__$ = l1_$__$__$__\n        var l2_$__$__$__$\
    \ = l2_$__$__$__\n        var l1_$__$__$__$_ = l1_$__$__$__$\n        var l2_$__$__$__$_\
    \ = l2_$__$__$__$\n        var l1_$__$__$__$__ = l1_$__$__$__$_\n        var l2_$__$__$__$__\
    \ = l2_$__$__$__$_\n        var l1_$__$__$__$__$ = l1_$__$__$__$__\n        var\
    \ l2_$__$__$__", "        var result = new ArrayList[Long]()\n        var i =\
    \ 0\n        var j = 0\n        while (i < l1.length && j < l2.length) {\n   \
    \         if (l1[i] == l2[j]) {\n                result.append(l1[i])\n      \
    \          i += 1\n                j += 1\n            } else if (l1[i] < l2[j])\
    \ {\n                i += 1\n            } else {\n                j += 1\n  \
    \          }\n        }\n        return result\n    }\n\n    // Return sorted\
    \ unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common2(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var result = new ArrayList[Long]()\n \
    \       var i = 0\n        var j = 0\n        while (i < l1.length && j < l2.length)\
    \ {\n            if (l1[i] == l2[j]) {\n                result.append(l1[i])\n\
    \                i += 1\n                j += 1\n            } else if (l1[i]\
    \ < l2[j]) {\n                i += 1\n            } else {\n                j\
    \ += 1\n            }\n        }\n        return result\n    }\n\n    // Return\
    \ sorted unique common elements for two lists.\n    // >>> common((List[Long](1",
  "        var l1_ = l1.toSeq\n        var l2_ = l2.toSeq\n        var l1_$ = l1_\n\
    \        var l2_$ = l2_\n        var l1_$_ = l1_$\n        var l2_$_ = l2_$\n\
    \        var l1_$__ = l1_$_\n        var l2_$__ = l2_$_\n        var l1_$__$ =\
    \ l1_$__\n        var l2_$__$ = l2_$__\n        var l1_$__$_ = l1_$__$\n     \
    \   var l2_$__$_ = l2_$__$\n        var l1_$__$__ = l1_$__$_\n        var l2_$__$__\
    \ = l2_$__$_\n        var l1_$__$__$ = l1_$__$__\n        var l2_$__$__$ = l2_$__$__\n\
    \        var l1_$__$__$_ = l1_$__$__$\n        var l2_$__$__$_ = l2_$__$__$\n\
    \        var l1_$__$__$__ = l1_$__$__$_\n        var l2_$__$__$__ = l2_$__$__$_\n\
    \        var l1_$__$__$__$ = l1_$__$__$__\n        var l2_$__$__$__$ = l2_$__$__$__\n\
    \        var l1_$__$__$__$_ = l1_$__$__$__$\n        var l2_$__$__$__$_ = l2_$__$__$__$\n\
    \        var l1_$__$__$__$__ = l1_$__$__$__$_\n        var l2_$__$__$__$__ = l2_$__$__$__$_\n\
    \        var l1_$__$__$__$__$ = l1_$__$__$__$__\n        var l2_$__$__$__", " \
    \       var result = new ArrayList[Long]()\n        var i = 0\n        var j =\
    \ 0\n        while (i < l1.length && j < l2.length) {\n            if (l1[i] ==\
    \ l2[j]) {\n                result.append(l1[i])\n                i += 1\n   \
    \             j += 1\n            } else if (l1[i] < l2[j]) {\n              \
    \  i += 1\n            } else {\n                j += 1\n            }\n     \
    \   }\n        return result\n    }\n\n    // Return the sum of the elements in\
    \ the list.\n    // >>> sum(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))\n\
    \    // 10l\n    // >>> sum(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))\n    // 15l\n    // >>> sum(List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 6l.toLong))\n    // 21l\n    def sum(l : List[Long]) :\
    \ Long = {\n        var result = 0l\n        for (i <- 0 until l.length) {\n \
    \           result += l[i]\n        }\n        return result\n    }\n\n    //\
    \ Return the product of the elements in the list.\n    // >>> product(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))\n    // 24l\n    // >>> product(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n    // 120l\n    // >>> product(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))\n    // 720l\n    def\
    \ product(l : List[Long]) : Long = {\n        var result = 1l\n        for (i\
    \ <- 0 until l.length) {\n            result", "        var result = new ArrayList[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (i < l1.length && j < l2.length)\
    \ {\n            if (l1[i] == l2[j]) {\n                result.append(l1[i])\n\
    \                i += 1\n                j += 1\n            } else if (l1[i]\
    \ < l2[j]) {\n                i += 1\n            } else {\n                j\
    \ += 1\n            }\n        }\n        return result\n    }\n\n    // Return\
    \ the sum of the squares of the first n natural numbers.\n    // >>> sumOfSquares(10)\n\
    \    // 385\n    // >>> sumOfSquares(0)\n    // 0\n    def sumOfSquares(n : Int)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until n) {\n        \
    \    result += i * i\n        }\n        return result\n    }\n\n    // Return\
    \ the sum of the squares of the first n natural numbers.\n    // >>> sumOfSquares(10)\n\
    \    // 385\n    // >>> sumOfSquares(0)\n    // 0\n    def sumOfSquares(n : Int)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until n) {\n        \
    \    result += i * i\n        }\n        return result\n    }\n\n    // Return\
    \ the sum of the squares of the first n natural numbers.\n    // >>> sumOfSquares(10)\n\
    \    // 385\n    // >>> sumOfSquares(0)\n    // 0\n    def sumOfSquares(n : Int)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until n) {\n        \
    \    result += i * i\n        }\n        return result\n    }\n\n    // Return\
    \ the sum of the squares of the first n natural numbers.\n    // >>> sumOfSquares(10)\n\
    \    // 385\n    // >>> sumOfSquares(0)\n    // 0\n    def sumOfSquares(n : Int)\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until n) {\n        \
    \    result += i * i\n        }\n        return result\n    }\n\n    //", "  \
    \      var result = new ArrayList[Long]()\n        for (i <- 0 until l1.length)\
    \ {\n            for (j <- 0 until l2.length) {\n                if (l1[i] ==\
    \ l2[j]) {\n                    result.add(l1[i])\n                    break\n\
    \                }\n            }\n        }\n        return result", "      \
    \  var result = new ArrayList[Long]()\n        var i = 0\n        var j = 0\n\
    \        while (i < l1.length && j < l2.length) {\n            if (l1[i] == l2[j])\
    \ {\n                result.add(l1[i])\n                i += 1\n             \
    \   j += 1\n            } else if (l1[i] < l2[j]) {\n                i += 1\n\
    \            } else {\n                j += 1\n            }\n        }\n    \
    \    return result\n    }\n\n    // Return the sum of the elements in the list.\n\
    \    // >>> sum(List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong,\
    \ 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    // >>> sum(List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))\n   \
    \ // 653l.toLong\n    // >>> sum(List[Long](5l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))\n\
    \    // 5l.toLong\n    def sum(l : List[Long]) : Long = {\n        var result\
    \ = 0l\n        for (i <- 0 until l.length) {\n            result += l[i]\n  \
    \      }\n        return result\n    }\n\n    // Return the product of the elements\
    \ in the list.\n    // >>> product(List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    //\
    \ >>> product(List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong,\
    \ 653l.toLong, 121l.toLong))\n    // 653l.toLong\n    // >>> product(List[Long](5l.toLong,\
    \ 3l", "        var l1_sorted = l1.sorted\n        var l2_sorted = l2.sorted\n\
    \        var i = 0\n        var j = 0\n        var result = List[Long]()\n   \
    \     while (i < l1_sorted.length && j < l2_sorted.length) {\n            if (l1_sorted[i]\
    \ == l2_sorted[j]) {\n                result = result.append(l1_sorted[i])\n \
    \               i += 1\n                j += 1\n            } else if (l1_sorted[i]\
    \ < l2_sorted[j]) {\n                i += 1\n            } else {\n          \
    \      j += 1\n            }\n        }\n        return result\n    }\n\n    //\
    \ Return the number of unique elements in a list.\n    // >>> unique(List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    //\
    \ 6\n    // >>> unique(List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong,\
    \ 9l.toLong, 653l.toLong, 121l.toLong))\n    // 6\n    // >>> unique(List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    // 2\n    def unique(l : List[Long])\
    \ : Int = {\n        var result = 0\n        for (i <- 0 until l.length) {\n \
    \           if (l[i] != l[i + 1]) {\n                result += 1\n           \
    \ }\n        }\n        return result\n    }\n\n    // Return the number of elements\
    \ in a list.\n    // >>> length(List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong))\n    // 7\n    // >>> length(List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l", "        var l1_ = l1.toSeq().toList()\n\
    \        var l2_ = l2.toSeq().toList()\n        var l1_ = l1_.sort(Comparator.comparingLong(x\
    \ -> x))\n        var l2_ = l2_.sort(Comparator.comparingLong(x -> x))\n     \
    \   var i = 0\n        var j = 0\n        var result = List[Long]()\n        while\
    \ (i < l1_.size() && j < l2_.size()) {\n            if (l1_.get(i) == l2_.get(j))\
    \ {\n                result = result.append(l1_.get(i))\n                i +=\
    \ 1\n                j += 1\n            } else if (l1_.get(i) < l2_.get(j)) {\n\
    \                i += 1\n            } else {\n                j += 1\n      \
    \      }\n        }\n        return result", "        var l1_ = l1.toSeq\n   \
    \     var l2_ = l2.toSeq\n        var c = new scala.collection.mutable.LinkedHashSet[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (i < l1_.size && j < l2_.size)\
    \ {\n            if (l1_.apply(i) < l2_.apply(j)) {\n                i += 1\n\
    \            } else if (l1_.apply(i) > l2_.apply(j)) {\n                j += 1\n\
    \            } else {\n                c.add(l1_.apply(i))\n                i\
    \ += 1\n                j += 1\n            }\n        }\n        return c.toList",
  "        var common = new ArrayList[Long]()\n        var i = 0\n        var j =\
    \ 0\n        while (i < l1.size && j < l2.size) {\n            if (l1.apply(i).equals(l2.apply(j)))\
    \ {\n                common.add(l1.apply(i))\n                i += 1\n       \
    \         j += 1\n            } else if (l1.apply(i) < l2.apply(j)) {\n      \
    \          i += 1\n            } else {\n                j += 1\n            }\n\
    \        }\n        return common", "        var l1_ = l1\n        var l2_ = l2\n\
    \        var l1_size = l1_.size\n        var l2_size = l2_.size\n        var i\
    \ = 0\n        var j = 0\n        var result = List[Long]()\n        while (i\
    \ < l1_size && j < l2_size) {\n            if (l1_[i] == l2_[j]) {\n         \
    \       result = result.append(l1_[i])\n                i = i + 1\n          \
    \      j = j + 1\n            } else if (l1_[i] < l2_[j]) {\n                i\
    \ = i + 1\n            } else {\n                j = j + 1\n            }\n  \
    \      }\n        return result", "        var result = new ArrayList[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (i < l1.length && j < l2.length)\
    \ {\n            if (l1[i] == l2[j]) {\n                result.append(l1[i])\n\
    \                i += 1\n                j += 1\n            } else if (l1[i]\
    \ < l2[j]) {\n                i += 1\n            } else {\n                j\
    \ += 1\n            }\n        }\n        return result\n    }\n\n    // Return\
    \ the number of common elements in two lists.\n    // >>> commonCount((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // 3\n    // >>> commonCount((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)),\
    \ (List[Long](3l.toLong, 2l.toLong)))\n    // 2\n    def commonCount(l1 : List[Long],\
    \ l2 : List[Long]) : Int = {\n        var result = 0\n        var i = 0\n    \
    \    var j = 0\n        while (i < l1.length && j < l2.length) {\n           \
    \ if (l1[i] == l2[j]) {\n                result += 1\n                i += 1\n\
    \                j += 1\n            } else if (l1[i] < l2[j]) {\n           \
    \     i += 1\n            } else {\n                j += 1\n            }\n  \
    \      }\n        return result\n    }\n\n    // Return the number of elements\
    \ in the list.\n    // >>> length(List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    // 7\n    def length(",
  "        var result = new ArrayList[Long]()\n        var i = 0\n        var j =\
    \ 0\n        while (i < l1.size && j < l2.size) {\n            if (l1.apply(i)\
    \ == l2.apply(j)) {\n                result.append(l1.apply(i))\n            \
    \    i += 1\n                j += 1\n            } else if (l1.apply(i) < l2.apply(j))\
    \ {\n                i += 1\n            } else {\n                j += 1\n  \
    \          }\n        }\n        return result\n    }\n\n    // Return the sum\
    \ of the elements in the list.\n    // >>> sum(List[Long](1l.toLong, 4l.toLong,\
    \ 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n\
    \    def sum(l : List[Long]) : Long = {\n        var result = 0l\n        for\
    \ (i <- 0 until l.size) {\n            result += l.apply(i)\n        }\n     \
    \   return result\n    }\n\n    // Return the product of the elements in the list.\n\
    \    // >>> product(List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong,\
    \ 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    def product(l : List[Long])\
    \ : Long = {\n        var result = 1l\n        for (i <- 0 until l.size) {\n \
    \           result *= l.apply(i)\n        }\n        return result\n    }\n\n\
    \    // Return the product of the elements in the list.\n    // >>> product(List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    //\
    \ 653l.toLong\n    def product2(l : List[Long]) : Long = {\n        var result\
    \ = 1l\n        for (i <- 0 until l.size) {\n            result *=", "       \
    \ var l1_ = l1.toSeq\n        var l2_ = l2.toSeq\n        var s1 = l1_.toSet\n\
    \        var s2 = l2_.toSet\n        var s = s1.intersect(s2)\n        var r =\
    \ s.toList\n        return r\n    }\n\n    // Return sorted unique common elements\
    \ for two lists.\n    // >>> common((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong,\
    \ 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    def common(l1 : List[Long], l2 : List[Long]) : List[Long] =\
    \ {\n        var l1_ = l1.toSeq\n        var l2_ = l2.toSeq\n        var s1 =\
    \ l1_.toSet\n        var s2 = l2_.toSet\n        var s = s1.intersect(s2)\n  \
    \      var r = s.toList\n        return r\n    }\n\n    // Return sorted unique\
    \ common elements for two lists.\n    // >>> common((List[Long](1l.toLong, 4l.toLong,\
    \ 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long", "        var l = new java.util.ArrayList[Long]()\n        for\
    \ (i <- 0 until l1.size()) {\n            if (l1.get(i) == l2.get(i)) {\n    \
    \            l.add(l1.get(i))\n            }\n        }\n        return scala.collection.JavaConversions.asScalaBuffer(l).toList()",
  "        var l1_sorted = l1.sorted\n        var l2_sorted = l2.sorted\n        var\
    \ i = 0\n        var j = 0\n        var common = List[Long]()\n        while (i\
    \ < l1_sorted.size && j < l2_sorted.size) {\n            if (l1_sorted.apply(i)\
    \ == l2_sorted.apply(j)) {\n                common = common.append(l1_sorted.apply(i))\n\
    \                i += 1\n                j += 1\n            } else if (l1_sorted.apply(i)\
    \ < l2_sorted.apply(j)) {\n                i += 1\n            } else {\n    \
    \            j += 1\n            }\n        }\n        return common", "     \
    \   var l1_sorted = l1.sorted\n        var l2_sorted = l2.sorted\n        var\
    \ l1_unique = l1_sorted.toUnique\n        var l2_unique = l2_sorted.toUnique\n\
    \        var l1_intersect = l1_unique.intersect(l2_unique)\n        return l1_intersect",
  "        var result = new ArrayList[Long]()\n        var i = 0\n        var j =\
    \ 0\n        while (i < l1.length && j < l2.length) {\n            if (l1[i] ==\
    \ l2[j]) {\n                result.add(l1[i])\n                i += 1\n      \
    \          j += 1\n            } else if (l1[i] < l2[j]) {\n                i\
    \ += 1\n            } else {\n                j += 1\n            }\n        }\n\
    \        return result\n    }\n\n    // Return the number of common elements in\
    \ two lists.\n    // >>> commonCount((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong,\
    \ 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n    // 3\n   \
    \ // >>> commonCount((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)),\
    \ (List[Long](3l.toLong, 2l.toLong)))\n    // 2\n    def commonCount(l1 : List[Long],\
    \ l2 : List[Long]) : Int = {\n        var result = 0\n        var i = 0\n    \
    \    var j = 0\n        while (i < l1.length && j < l2.length) {\n           \
    \ if (l1[i] == l2[j]) {\n                result += 1\n                i += 1\n\
    \                j += 1\n            } else if (l1[i] < l2[j]) {\n           \
    \     i += 1\n            } else {\n                j += 1\n            }\n  \
    \      }\n        return result\n    }\n\n    // Return the number of elements\
    \ in the list.\n    // >>> length(List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    // 7\n    def length(",
  "        var result = new ArrayList[Long]()\n        var i = 0\n        var j =\
    \ 0\n        while (i < l1.length && j < l2.length) {\n            if (l1[i] ==\
    \ l2[j]) {\n                result.add(l1[i])\n                i += 1\n      \
    \          j += 1\n            } else if (l1[i] < l2[j]) {\n                i\
    \ += 1\n            } else {\n                j += 1\n            }\n        }\n\
    \        return result\n    }\n\n    // Return the number of unique common elements\
    \ for two lists.\n    // >>> commonCount((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong,\
    \ 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n    // 3\n   \
    \ // >>> commonCount((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)),\
    \ (List[Long](3l.toLong, 2l.toLong)))\n    // 2\n    def commonCount(l1 : List[Long],\
    \ l2 : List[Long]) : Int = {\n        var result = 0\n        var i = 0\n    \
    \    var j = 0\n        while (i < l1.length && j < l2.length) {\n           \
    \ if (l1[i] == l2[j]) {\n                result += 1\n                i += 1\n\
    \                j += 1\n            } else if (l1[i] < l2[j]) {\n           \
    \     i += 1\n            } else {\n                j += 1\n            }\n  \
    \      }\n        return result\n    }\n\n    // Return the number of unique common\
    \ elements for two lists.\n    // >>> commonCount((List[Long](1l.toLong, 4l.toLong,\
    \ 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](", " \
    \       var result = new ArrayList[Long]()\n        for (i <- 0 until l1.length)\
    \ {\n            for (j <- 0 until l2.length) {\n                if (l1[i] ==\
    \ l2[j]) {\n                    result.add(l1[i])\n                    break\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common2(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var result = new ArrayList[Long]()\n \
    \       for (i <- 0 until l1.length) {\n            for (j <- 0 until l2.length)\
    \ {\n                if (l1[i] == l2[j]) {\n                    result.add(l1[i])\n\
    \                    break\n                }\n            }\n        }\n    \
    \    return result\n    }\n\n    // Return sorted unique common elements for two\
    \ lists.\n    // >>> common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l", "        var l = l1.zipWithIndex().zipWithIndex().map(x\
    \ => x._2).toSeq()\n        var l2_ = l2.zipWithIndex().zipWithIndex().map(x =>\
    \ x._2).toSeq()\n        var l_ = l.filter(x => l2_.exists(y => x == y)).toSeq()\n\
    \        return l_", "        var common = new ArrayList[Long]()\n        var\
    \ i = 0\n        var j = 0\n        while (i < l1.size && j < l2.size) {\n   \
    \         if (l1.apply(i).equals(l2.apply(j))) {\n                common.add(l1.apply(i))\n\
    \                i += 1\n                j += 1\n            } else if (l1.apply(i)\
    \ < l2.apply(j)) {\n                i += 1\n            } else {\n           \
    \     j += 1\n            }\n        }\n        return common", "        var result\
    \ = new ArrayList[Long]()\n        var i = 0\n        var j = 0\n        while\
    \ (i < l1.size && j < l2.size) {\n            if (l1.apply(i) == l2.apply(j))\
    \ {\n                result.append(l1.apply(i))\n                i += 1\n    \
    \            j += 1\n            } else if (l1.apply(i) < l2.apply(j)) {\n   \
    \             i += 1\n            } else {\n                j += 1\n         \
    \   }\n        }\n        return result", "        var l1_sorted = l1.sorted\n\
    \        var l2_sorted = l2.sorted\n        var l1_unique = l1_sorted.toUnique\n\
    \        var l2_unique = l2_sorted.toUnique\n        var l1_intersect = l1_unique.intersect(l2_unique)\n\
    \        return l1_intersect", "        var l1_sorted = l1.sorted\n        var\
    \ l2_sorted = l2.sorted\n        var l1_unique = l1_sorted.toUnique\n        var\
    \ l2_unique = l2_sorted.toUnique\n        var l1_intersect = l1_unique.intersect(l2_unique)\n\
    \        return l1_intersect", "        var l = new java.util.ArrayList[Long]()\n\
    \        for (i <- 0 until l1.size()) {\n            if (l2.contains(l1.get(i)))\
    \ {\n                l.add(l1.get(i))\n            }\n        }\n        return\
    \ scala.collection.JavaConversions.asScalaBuffer(l).toList()\n    }\n\n    //\
    \ Return the sum of the elements in the list.\n    // >>> sum(List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    //\
    \ 653l.toLong\n    def sum(l : List[Long]) : Long = {\n        var sum = 0l\n\
    \        for (i <- 0 until l.size()) {\n            sum += l.get(i)\n        }\n\
    \        return sum\n    }\n\n    // Return the product of the elements in the\
    \ list.\n    // >>> product(List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    def product(l :\
    \ List[Long]) : Long = {\n        var product = 1l\n        for (i <- 0 until\
    \ l.size()) {\n            product *= l.get(i)\n        }\n        return product\n\
    \    }\n\n    // Return the product of the elements in the list.\n    // >>> product(List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    //\
    \ 653l.toLong\n    def product(l : List[Long]) : Long = {\n        var product\
    \ = 1l\n        for (i <- 0 until l.size()) {\n            product *= l.get(i)\n\
    \        }\n        return product\n    }\n\n    // Return the product of the\
    \ elements in the list.\n    // >>> product(List[Long](1l.toLong,", "        var\
    \ result = new ArrayList[Long]()\n        var i = 0\n        var j = 0\n     \
    \   while (i < l1.length && j < l2.length) {\n            if (l1[i] == l2[j])\
    \ {\n                result.append(l1[i])\n                i += 1\n          \
    \      j += 1\n            } else if (l1[i] < l2[j]) {\n                i += 1\n\
    \            } else {\n                j += 1\n            }\n        }\n    \
    \    return result", "        var common = new ArrayList[Long]()\n        var\
    \ i = 0\n        var j = 0\n        while (i < l1.size && j < l2.size) {\n   \
    \         if (l1.apply(i).equals(l2.apply(j))) {\n                common.add(l1.apply(i))\n\
    \                i += 1\n                j += 1\n            } else if (l1.apply(i)\
    \ < l2.apply(j)) {\n                i += 1\n            } else {\n           \
    \     j += 1\n            }\n        }\n        return common\n    }\n\n    //\
    \ Return the sum of the squares of the elements of the list.\n    // >>> squareSum(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n    // 25\n    // >>> squareSum(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n    // 25\n    // >>> squareSum(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n    // 25\n    // >>> squareSum(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n    // 25\n    // >>> squareSum(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n    // 25\n    // >>> squareSum(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n    // 25\n    // >>> squareSum(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n    // 25\n    // >>> squareSum(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n    //", "        var l1_sorted\
    \ = l1.sorted\n        var l2_sorted = l2.sorted\n        var l1_diff = l1_sorted.diff(l2_sorted)\n\
    \        var l2_diff = l2_sorted.diff(l1_sorted)\n        var l1_intersect = l1_diff.intersect(l2_diff)\n\
    \        var l1_union = l1_intersect.union(l1_diff)\n        var l2_union = l2_intersect.union(l2_diff)\n\
    \        var l1_intersect_sorted = l1_union.sorted\n        var l2_intersect_sorted\
    \ = l2_union.sorted\n        var l1_intersect_diff = l1_intersect_sorted.diff(l2_intersect_sorted)\n\
    \        var l1_intersect_union = l1_intersect_diff.union(l1_intersect_sorted)\n\
    \        var l2_intersect_union = l2_intersect_diff.union(l2_intersect_sorted)\n\
    \        var l1_intersect_intersect = l1_intersect_union.intersect(l2_intersect_union)\n\
    \        return l1_intersect_intersect", "        var result = new ArrayList[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (i < l1.size && j < l2.size)\
    \ {\n            if (l1.apply(i).equals(l2.apply(j))) {\n                result.append(l1.apply(i))\n\
    \                i += 1\n                j += 1\n            } else if (l1.apply(i)\
    \ < l2.apply(j)) {\n                i += 1\n            } else {\n           \
    \     j += 1\n            }\n        }\n        return result", "        var common\
    \ = new ArrayList[Long]()\n        var i = 0\n        var j = 0\n        while\
    \ (i < l1.size && j < l2.size) {\n            if (l1.apply(i).equals(l2.apply(j)))\
    \ {\n                common.add(l1.apply(i))\n                i += 1\n       \
    \         j += 1\n            } else if (l1.apply(i) < l2.apply(j)) {\n      \
    \          i += 1\n            } else {\n                j += 1\n            }\n\
    \        }\n        return common\n    }\n\n    // Return the sum of the elements\
    \ in the list.\n    // >>> sum(List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    // >>> sum(List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))\n   \
    \ // 5l.toLong\n    // >>> sum(List[Long](5l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))\n\
    \    // 5l.toLong\n    def sum(l : List[Long]) : Long = {\n        var sum = 0l\n\
    \        for (i <- 0 until l.size) {\n            sum += l.apply(i)\n        }\n\
    \        return sum\n    }\n\n    // Return the product of the elements in the\
    \ list.\n    // >>> product(List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    // >>> product(List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))\n   \
    \ // 5l.toLong\n    // >>> product(", "        var result = new ArrayList[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (i < l1.length && j < l2.length)\
    \ {\n            if (l1[i] == l2[j]) {\n                result.add(l1[i])\n  \
    \              i += 1\n                j += 1\n            } else if (l1[i] <\
    \ l2[j]) {\n                i += 1\n            } else {\n                j +=\
    \ 1\n            }\n        }\n        return result", "        var l1_ = l1\n\
    \        var l2_ = l2\n        var l1_len = l1_.length\n        var l2_len = l2_.length\n\
    \        var i = 0\n        var j = 0\n        var result = List[Long]()\n   \
    \     while (i < l1_len && j < l2_len) {\n            if (l1_[i] < l2_[j]) {\n\
    \                i += 1\n            } else if (l1_[i] > l2_[j]) {\n         \
    \       j += 1\n            } else {\n                result = result.append(l1_[i])\n\
    \                i += 1\n                j += 1\n            }\n        }\n  \
    \      return result", "        var result = new ArrayList[Long]()\n        var\
    \ i = 0\n        var j = 0\n        while (i < l1.length && j < l2.length) {\n\
    \            if (l1[i] == l2[j]) {\n                result.add(l1[i])\n      \
    \          i += 1\n                j += 1\n            } else if (l1[i] < l2[j])\
    \ {\n                i += 1\n            } else {\n                j += 1\n  \
    \          }\n        }\n        return result", "        var l1_s = l1.sort(Comparator.comparingLong(l\
    \ -> l))\n        var l2_s = l2.sort(Comparator.comparingLong(l -> l))\n     \
    \   var i = 0\n        var j = 0\n        var result = List[Long]()\n        while\
    \ (i < l1_s.size() && j < l2_s.size()) {\n            if (l1_s.apply(i) == l2_s.apply(j))\
    \ {\n                result = result.append(l1_s.apply(i))\n                i\
    \ += 1\n                j += 1\n            } else if (l1_s.apply(i) < l2_s.apply(j))\
    \ {\n                i += 1\n            } else {\n                j += 1\n  \
    \          }\n        }\n        return result", "        var result = new ArrayList[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (i < l1.length && j < l2.length)\
    \ {\n            if (l1[i] == l2[j]) {\n                result.add(l1[i])\n  \
    \              i += 1\n                j += 1\n            } else if (l1[i] <\
    \ l2[j]) {\n                i += 1\n            } else {\n                j +=\
    \ 1\n            }\n        }\n        return result\n    }\n\n    // Return the\
    \ sum of the elements in the list.\n    // >>> sum(List[Long](1l.toLong, 4l.toLong,\
    \ 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n\
    \    // >>> sum(List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong,\
    \ 653l.toLong, 121l.toLong))\n    // 566l.toLong\n    def sum(l : List[Long])\
    \ : Long = {\n        var result = 0l\n        for (i <- 0 until l.length) {\n\
    \            result += l[i]\n        }\n        return result\n    }\n\n    //\
    \ Return the product of the elements in the list.\n    // >>> product(List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    //\
    \ 653l.toLong\n    // >>> product(List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))\n    // 566l.toLong\n    def\
    \ product(l : List[Long]) : Long = {\n        var result = 1l\n        for (i\
    \ <- 0 until l.length) {\n            result *= l[i]\n        }\n        return\
    \ result\n    }\n\n    // Return the maximum", "        var l1_ = l1.toList\n\
    \        var l2_ = l2.toList\n        var l3 = List[Long]()\n        var i = 0\n\
    \        var j = 0\n        while (i < l1_.size && j < l2_.size) {\n         \
    \   if (l1_.apply(i) < l2_.apply(j)) {\n                i += 1\n            }\
    \ else if (l1_.apply(i) > l2_.apply(j)) {\n                j += 1\n          \
    \  } else {\n                l3 = l3.append(l1_.apply(i))\n                i +=\
    \ 1\n                j += 1\n            }\n        }\n        return l3", " \
    \       var result = new ArrayList[Long]()\n        var i = 0\n        var j =\
    \ 0\n        while (i < l1.length && j < l2.length) {\n            if (l1[i] ==\
    \ l2[j]) {\n                result.append(l1[i])\n                i += 1\n   \
    \             j += 1\n            } else if (l1[i] < l2[j]) {\n              \
    \  i += 1\n            } else {\n                j += 1\n            }\n     \
    \   }\n        return result", "        var res = new ArrayList[Long]()\n    \
    \    for (var i = 0; i < l1.length; i++) {\n            for (var j = 0; j < l2.length;\
    \ j++) {\n                if (l1[i] == l2[j]) {\n                    res.add(l1[i])\n\
    \                    break\n                }\n            }\n        }\n    \
    \    return res", "        var result = new ArrayList[Long]()\n        var i =\
    \ 0\n        var j = 0\n        while (i < l1.size && j < l2.size) {\n       \
    \     if (l1.apply(i) == l2.apply(j)) {\n                result.append(l1.apply(i))\n\
    \                i += 1\n                j += 1\n            } else if (l1.apply(i)\
    \ < l2.apply(j)) {\n                i += 1\n            } else {\n           \
    \     j += 1\n            }\n        }\n        return result\n    }\n\n    //\
    \ Return the sum of the squares of the first n numbers.\n    // >>> sumSquares(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n    // 25\n    // >>> sumSquares(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))\n    // 55\n    // >>> sumSquares(List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong))\n    // 55\n    // >>> sumSquares(List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong,\
    \ 10l.toLong, 11l.toLong))\n    // 55\n    // >>> sumSquares(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong))\n    // 55", "        var common\
    \ = new ArrayList[Long]()\n        var i = 0\n        var j = 0\n        while\
    \ (i < l1.size && j < l2.size) {\n            if (l1.apply(i) == l2.apply(j))\
    \ {\n                common.add(l1.apply(i))\n                i += 1\n       \
    \         j += 1\n            } else if (l1.apply(i) < l2.apply(j)) {\n      \
    \          i += 1\n            } else {\n                j += 1\n            }\n\
    \        }\n        return common\n    }\n\n    // Return the sum of the elements\
    \ in the list.\n    // >>> sum(List(1, 2, 3, 4, 5))\n    // 15\n    // >>> sum(List(1,\
    \ 2, 3, 4, 5, 6))\n    // 21\n    // >>> sum(List(1, 2, 3, 4, 5, 6, 7))\n    //\
    \ 28\n    def sum(l : List[Long]) : Long = {\n        var sum = 0l\n        for\
    \ (i <- 0 until l.size) {\n            sum += l.apply(i)\n        }\n        return\
    \ sum\n    }\n\n    // Return the product of the elements in the list.\n    //\
    \ >>> product(List(1, 2, 3, 4, 5))\n    // 120\n    // >>> product(List(1, 2,\
    \ 3, 4, 5, 6))\n    // 720\n    // >>> product(List(1, 2, 3, 4, 5, 6, 7))\n  \
    \  // 5040\n    def product(l : List[Long]) : Long = {\n        var product =\
    \ 1l\n        for (i <- 0 until l.size) {\n            product *= l.apply(i)\n\
    \        }\n        return product\n    }\n\n    // Return the product of the\
    \ elements in the list.\n    // >>> product(List(1, 2, 3, 4, 5))\n    // 120\n\
    \    // >>> product(List(1, 2, 3, 4, 5, 6))\n    // 720\n    // >>> product(List(1,\
    \ 2, 3, 4, 5, 6, 7))\n    // 5040\n    def product2(l : List", "        var l1_\
    \ = l1.toSeq\n        var l2_ = l2.toSeq\n        var l1_len = l1_().length\n\
    \        var l2_len = l2_().length\n        var i = 0\n        var j = 0\n   \
    \     var result = List[Long]()\n        while (i < l1_len && j < l2_len) {\n\
    \            var a = l1_()[i]\n            var b = l2_()[j]\n            if (a\
    \ < b) {\n                i += 1\n            } else if (a > b) {\n          \
    \      j += 1\n            } else {\n                result = result.append(a)\n\
    \                i += 1\n                j += 1\n            }\n        }\n  \
    \      return result", "        var l1_ = l1.toSeq\n        var l2_ = l2.toSeq\n\
    \        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_\
    \ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n\
    \        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_\
    \ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n\
    \        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_\
    \ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n\
    \        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_\
    \ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n\
    \        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_\
    \ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n\
    \        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_\
    \ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n\
    \        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_\
    \ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n\
    \        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_\
    \ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n\
    \        var l1_ =", "        var l1_ = l1.toSeq\n        var l2_ = l2.toSeq\n\
    \        var l1_$ = l1_.toIterator\n        var l2_$ = l2_.toIterator\n      \
    \  var l1_$_ = l1_.toIterator\n        var l2_$_ = l2_.toIterator\n        var\
    \ l1_$__ = l1_.toIterator\n        var l2_$__ = l2_.toIterator\n        var l1_$__$\
    \ = l1_.toIterator\n        var l2_$__$ = l2_.toIterator\n        var l1_$__$_\
    \ = l1_.toIterator\n        var l2_$__$_ = l2_.toIterator\n        var l1_$__$__\
    \ = l1_.toIterator\n        var l2_$__$__ = l2_.toIterator\n        var l1_$__$__$\
    \ = l1_.toIterator\n        var l2_$__$__$ = l2_.toIterator\n        var l1_$__$__$$\
    \ = l1_.toIterator\n        var l2_$__$__$$ = l2_.toIterator\n        var l1_$__$__$$$\
    \ = l1_.toIterator\n        var l2_$__$__$$$ = l2_.toIterator\n        var l1_$__$__$$__\
    \ = l1_.toIterator\n        var l2_$__$__$$__$ = l2_.toIterator\n        var l1_$__$__$$__$$\
    \ = l1_.toIterator\n        var l2_$__$__$$__$$$ = l2_.toIterator\n        var\
    \ l1_$__$__$$__$$$ = l1_.toIterator\n        var l2_$__$__$$__$$__ = l2_.toIterator\n\
    \        var l1_$__$__$$__$$__$$ = l1_.toIterator\n        var l2_$__$__$$__$$__$$$\
    \ = l2_.toIterator\n        var l1_$__$__$$__$$__$$$$ = l1_.toIterator\n     \
    \   var l2_$__$__$$__$$__$$$$$ = l2_.toIterator\n        var", "        var l1_\
    \ = l1.toSeq\n        var l2_ = l2.toSeq\n        var l1_$ = l1_.toBuffer\n  \
    \      var l2_$ = l2_.toBuffer\n        var l1_$_ = l1_.toBuffer\n        var\
    \ l2_$_ = l2_.toBuffer\n        var l1_$__ = l1_.toBuffer\n        var l2_$__\
    \ = l2_.toBuffer\n        var l1_$__$ = l1_.toBuffer\n        var l2_$__$ = l2_.toBuffer\n\
    \        var l1_$__$_ = l1_.toBuffer\n        var l2_$__$_ = l2_.toBuffer\n  \
    \      var l1_$__$__ = l1_.toBuffer\n        var l2_$__$__ = l2_.toBuffer\n  \
    \      var l1_$__$__$ = l1_.toBuffer\n        var l2_$__$__$ = l2_.toBuffer\n\
    \        var l1_$__$__$$ = l1_.toBuffer\n        var l2_$__$__$$ = l2_.toBuffer\n\
    \        var l1_$__$__$$$ = l1_.toBuffer\n        var l2_$__$__$$$ = l2_.toBuffer\n\
    \        var l1_$__$__$$__ = l1_.toBuffer\n        var l2_$__$__$$__$ = l2_.toBuffer\n\
    \        var l1_$__$__$$__$$ = l1_.toBuffer\n        var l2_$__$__$$__$$$ = l2_.toBuffer\n\
    \        var l1_$__$__$$__$$$_ = l1_.toBuffer\n        var l2_$__$__$$__$$$_$\
    \ = l2_.toBuffer\n        var l1_$__$__$$__$$$__$ = l1_.toBuffer\n        var\
    \ l2_$__$__$$__$$$__$$ = l2_.toBuffer\n        var l1_$__$__$$__$$$__$$$ = l1_.toBuffer\n\
    \        var l2_$__$__$$__$$$__$$$$ = l2", "        var result = new ArrayList[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (i < l1.length && j < l2.length)\
    \ {\n            if (l1[i] == l2[j]) {\n                result.append(l1[i])\n\
    \                i += 1\n                j += 1\n            } else if (l1[i]\
    \ < l2[j]) {\n                i += 1\n            } else {\n                j\
    \ += 1\n            }\n        }\n        return result\n    }\n\n    // Return\
    \ the number of common elements in two lists.\n    // >>> commonCount((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // 3\n    // >>> commonCount((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)),\
    \ (List[Long](3l.toLong, 2l.toLong)))\n    // 2\n    def commonCount(l1 : List[Long],\
    \ l2 : List[Long]) : Int = {\n        var result = 0\n        var i = 0\n    \
    \    var j = 0\n        while (i < l1.length && j < l2.length) {\n           \
    \ if (l1[i] == l2[j]) {\n                result += 1\n                i += 1\n\
    \                j += 1\n            } else if (l1[i] < l2[j]) {\n           \
    \     i += 1\n            } else {\n                j += 1\n            }\n  \
    \      }\n        return result\n    }\n\n    // Return the number of common elements\
    \ in two lists.\n    // >>> commonCount((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l", "        var\
    \ common = new ArrayList[Long]()\n        var i = 0\n        var j = 0\n     \
    \   while (i < l1.length && j < l2.length) {\n            if (l1[i] == l2[j])\
    \ {\n                common.add(l1[i])\n                i += 1\n             \
    \   j += 1\n            } else if (l1[i] < l2[j]) {\n                i += 1\n\
    \            } else {\n                j += 1\n            }\n        }\n    \
    \    return common\n    }\n\n    // Return the sum of the elements in the list.\n\
    \    // >>> sum(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n\
    \    // 15l.toLong\n    // >>> sum(List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong))\n    // 15l.toLong\n    // >>> sum(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n    // 15l.toLong\n    // >>>\
    \ sum(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n   \
    \ // 15l.toLong\n    // >>> sum(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong))\n    // 15l.toLong\n    // >>> sum(List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))\n    // 15l.toLong\n    // >>> sum(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n    // 15l.toLong\n    // >>>\
    \ sum(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.to", "       \
    \ var result = new mutable.ListBuffer[Long]()\n        var i = 0\n        var\
    \ j = 0\n        while (i < l1.length && j < l2.length) {\n            if (l1[i]\
    \ == l2[j]) {\n                result.append(l1[i])\n                i += 1\n\
    \                j += 1\n            } else if (l1[i] < l2[j]) {\n           \
    \     i += 1\n            } else {\n                j += 1\n            }\n  \
    \      }\n        return result.toList", "        var l = new java.util.ArrayList[Long]()\n\
    \        for (i <- 0 until l1.length) {\n            if (l1.get(i) == l2.get(i))\
    \ {\n                l.add(l1.get(i))\n            }\n        }\n        return\
    \ scala.collection.JavaConversions.asScalaBuffer(l).toList()", "        var l1_\
    \ = l1.toSeq\n        var l2_ = l2.toSeq\n        var s1 = l1_.toSet\n       \
    \ var s2 = l2_.toSet\n        var s = s1.intersect(s2)\n        var result = s.toList\n\
    \        return result\n    }\n\n    // Return sorted unique common elements for\
    \ two lists.\n    // >>> common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    def common2(l1 : List[Long], l2 : List[Long]) : List[Long]\
    \ = {\n        var l1_ = l1.toSeq\n        var l2_ = l2.toSeq\n        var s1\
    \ = l1_.toSet\n        var s2 = l2_.toSet\n        var s = s1.intersect(s2)\n\
    \        var result = s.toList\n        return result\n    }\n\n    // Return\
    \ sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[", "        var result = new ArrayList[Long]()\n        var i = 0\n\
    \        var j = 0\n        while (i < l1.length && j < l2.length) {\n       \
    \     if (l1[i] == l2[j]) {\n                result.add(l1[i])\n             \
    \   i += 1\n                j += 1\n            } else if (l1[i] < l2[j]) {\n\
    \                i += 1\n            } else {\n                j += 1\n      \
    \      }\n        }\n        return result", "        var l1_ = l1.toSeq\n   \
    \     var l2_ = l2.toSeq\n        var l1_size = l1_.size\n        var l2_size\
    \ = l2_.size\n        var i = 0\n        var j = 0\n        var result = List[Long]()\n\
    \        while (i < l1_size && j < l2_size) {\n            if (l1_[i] == l2_[j])\
    \ {\n                result = result.append(l1_[i])\n                i = i + 1\n\
    \                j = j + 1\n            } else if (l1_[i] < l2_[j]) {\n      \
    \          i = i + 1\n            } else {\n                j = j + 1\n      \
    \      }\n        }\n        return result", "        var result = new ArrayList[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (i < l1.size && j < l2.size)\
    \ {\n            if (l1.apply(i).equals(l2.apply(j))) {\n                result.add(l1.apply(i))\n\
    \                i += 1\n                j += 1\n            } else if (l1.apply(i)\
    \ < l2.apply(j)) {\n                i += 1\n            } else {\n           \
    \     j += 1\n            }\n        }\n        return result", "        var result\
    \ = new ArrayList[Long]()\n        var i = 0\n        var j = 0\n        while\
    \ (i < l1.size && j < l2.size) {\n            if (l1.apply(i) == l2.apply(j))\
    \ {\n                result.append(l1.apply(i))\n                i += 1\n    \
    \            j += 1\n            } else if (l1.apply(i) < l2.apply(j)) {\n   \
    \             i += 1\n            } else {\n                j += 1\n         \
    \   }\n        }\n        return result", "        var l1_ = l1.toSeq\n      \
    \  var l2_ = l2.toSeq\n        var l1_len = l1_.length\n        var l2_len = l2_.length\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var res = List[Long]()\n\
    \        while (i < l1_len && j < l2_len) {\n            if (l1_[i] < l2_[j])\
    \ {\n                i += 1\n            } else if (l1_[i] > l2_[j]) {\n     \
    \           j += 1\n            } else {\n                res = res.append(l1_[i])\n\
    \                i += 1\n                j += 1\n                k += 1\n    \
    \        }\n        }\n        return res.take(k)", "        var l = new java.util.ArrayList()\n\
    \        var i = 0\n        var j = 0\n        while (i < l1.size() && j < l2.size())\
    \ {\n            if (l1.get(i).equals(l2.get(j))) {\n                l.add(l1.get(i))\n\
    \                i += 1\n                j += 1\n            } else if (l1.get(i)\
    \ < l2.get(j)) {\n                i += 1\n            } else {\n             \
    \   j += 1\n            }\n        }\n        return scala.collection.JavaConversions.asScalaBuffer(l).toList()",
  "        var l1_ = l1.toSeq\n        var l2_ = l2.toSeq\n        var l1_$ = l1_.toBuffer\n\
    \        var l2_$ = l2_.toBuffer\n        var l1_$_ = l1_.toBuffer\n        var\
    \ l2_$_ = l2_.toBuffer\n        var l1_$__ = l1_.toBuffer\n        var l2_$__\
    \ = l2_.toBuffer\n        var l1_$__$ = l1_.toBuffer\n        var l2_$__$ = l2_.toBuffer\n\
    \        var l1_$__$_ = l1_.toBuffer\n        var l2_$__$_ = l2_.toBuffer\n  \
    \      var l1_$__$__ = l1_.toBuffer\n        var l2_$__$__ = l2_.toBuffer\n  \
    \      var l1_$__$__$ = l1_.toBuffer\n        var l2_$__$__$ = l2_.toBuffer\n\
    \        var l1_$__$__$_ = l1_.toBuffer\n        var l2_$__$__$_ = l2_.toBuffer\n\
    \        var l1_$__$__$__ = l1_.toBuffer\n        var l2_$__$__$__ = l2_.toBuffer\n\
    \        var l1_$__$__$__$ = l1_.toBuffer\n        var l2_$__$__$__$ = l2_.toBuffer\n\
    \        var l1_$__$__$__$_ = l1_.toBuffer\n        var l2_$__$__$__$_ = l2_.toBuffer\n\
    \        var l1_$__$__$__$__ = l1_.toBuffer\n        var l2_$__$__$__$__ = l2_.toBuffer\n\
    \        var l1_$__$__$__$__$ = l1_.toBuffer\n        var l2_$__$__$__$__$ = l2_.toBuffer\n\
    \        var l1_$__$__$__$__$_ = l1_.toBuffer\n        var l2_$__$__$__$__$_ =\
    \ l2_.toBuffer\n", "        var result = new ArrayList[Long]()\n        var i\
    \ = 0\n        var j = 0\n        while (i < l1.length && j < l2.length) {\n \
    \           if (l1[i] == l2[j]) {\n                result.append(l1[i])\n    \
    \            i += 1\n                j += 1\n            } else if (l1[i] < l2[j])\
    \ {\n                i += 1\n            } else {\n                j += 1\n  \
    \          }\n        }\n        return result", "        var l1_ = l1.toSeq\n\
    \        var l2_ = l2.toSeq\n        var result = List[Long]()\n        var i\
    \ = 0\n        var j = 0\n        while (i < l1_.size && j < l2_.size) {\n   \
    \         if (l1_.apply(i) < l2_.apply(j)) {\n                i += 1\n       \
    \     } else if (l1_.apply(i) > l2_.apply(j)) {\n                j += 1\n    \
    \        } else {\n                result = result.append(l1_.apply(i))\n    \
    \            i += 1\n                j += 1\n            }\n        }\n      \
    \  return result\n    }\n\n    // Return the sum of the elements in a list.\n\
    \    // >>> sum(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))\n    //\
    \ 10l\n    // >>> sum(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n\
    \    // 15l\n    // >>> sum(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong))\n    // 21l\n    def sum(l : List[Long]) : Long = {\n\
    \        var result = 0l\n        for (var i = 0; i < l.size; i += 1) {\n    \
    \        result += l.apply(i)\n        }\n        return result\n    }\n\n   \
    \ // Return the product of the elements in a list.\n    // >>> product(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))\n    // 24l\n    // >>> product(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n    // 120l\n    // >>> product(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.to", "        var result = new\
    \ ArrayList[Long]()\n        var i = 0\n        var j = 0\n        while (i <\
    \ l1.length && j < l2.length) {\n            if (l1[i] == l2[j]) {\n         \
    \       result.add(l1[i])\n                i += 1\n                j += 1\n  \
    \          } else if (l1[i] < l2[j]) {\n                i += 1\n            }\
    \ else {\n                j += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // Return the number of unique common elements for two lists.\n\
    \    // >>> commonCount((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n    // 3\n    // >>> commonCount((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // 2\n    def commonCount(l1 : List[Long], l2 : List[Long]) : Int = {\n    \
    \    var result = 0\n        var i = 0\n        var j = 0\n        while (i <\
    \ l1.length && j < l2.length) {\n            if (l1[i] == l2[j]) {\n         \
    \       result += 1\n                i += 1\n                j += 1\n        \
    \    } else if (l1[i] < l2[j]) {\n                i += 1\n            } else {\n\
    \                j += 1\n            }\n        }\n        return result\n   \
    \ }\n\n    // Return the number of unique common elements for two lists.\n   \
    \ // >>> commonCount((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](", "        var l1_ = l1.toSeq\n\
    \        var l2_ = l2.toSeq\n        var l1_ = l1_.toBuffer\n        var l2_ =\
    \ l2_.toBuffer\n        var l1_ = l1_.toList\n        var l2_ = l2_.toList\n \
    \       var l1_ = l1_.toSeq\n        var l2_ = l2_.toSeq\n        var l1_ = l1_.toBuffer\n\
    \        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toList\n        var l2_\
    \ = l2_.toList\n        var l1_ = l1_.toSeq\n        var l2_ = l2_.toSeq\n   \
    \     var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_\
    \ = l1_.toList\n        var l2_ = l2_.toList\n        var l1_ = l1_.toSeq\n  \
    \      var l2_ = l2_.toSeq\n        var l1_ = l1_.toBuffer\n        var l2_ =\
    \ l2_.toBuffer\n        var l1_ = l1_.toList\n        var l2_ = l2_.toList\n \
    \       var l1_ = l1_.toSeq\n        var l2_ = l2_.toSeq\n        var l1_ = l1_.toBuffer\n\
    \        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toList\n        var l2_\
    \ = l2_.toList\n        var l1_ = l1_.toSeq\n        var l2_ = l2_.toSeq\n   \
    \     var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_\
    \ = l1_.toList\n        var l2_ = l2_.toList\n        var l1_ = l1_.toSeq\n  \
    \      var l2_ = l2_.toSeq\n        var l1_ = l1_.toBuffer\n        var l2_ =\
    \ l2_.toBuffer\n        var l1_ = l1_.toList\n        var l2_ =", "        var\
    \ result = new ArrayList[Long]()\n        var i = 0\n        var j = 0\n     \
    \   while (i < l1.size && j < l2.size) {\n            if (l1.apply(i).equals(l2.apply(j)))\
    \ {\n                result.add(l1.apply(i))\n                i += 1\n       \
    \         j += 1\n            } else if (l1.apply(i) < l2.apply(j)) {\n      \
    \          i += 1\n            } else {\n                j += 1\n            }\n\
    \        }\n        return result", "        var result = new ArrayList[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (i < l1.size && j < l2.size)\
    \ {\n            if (l1.apply(i) == l2.apply(j)) {\n                result.append(l1.apply(i))\n\
    \                i += 1\n                j += 1\n            } else if (l1.apply(i)\
    \ < l2.apply(j)) {\n                i += 1\n            } else {\n           \
    \     j += 1\n            }\n        }\n        return result", "        var result\
    \ = new ArrayList[Long]()\n        var i = 0\n        var j = 0\n        while\
    \ (i < l1.length && j < l2.length) {\n            if (l1[i] == l2[j]) {\n    \
    \            result.add(l1[i])\n                i += 1\n                j += 1\n\
    \            } else if (l1[i] < l2[j]) {\n                i += 1\n           \
    \ } else {\n                j += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // Return the sum of the elements in the given list.\n    // >>>\
    \ sum(List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong,\
    \ 5l.toLong))\n    // 653l.toLong\n    // >>> sum(List[Long](5l.toLong, 7l.toLong,\
    \ 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))\n    // 653l.toLong\n\
    \    // >>> sum(List[Long](5l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))\n    //\
    \ 5l.toLong\n    def sum(l : List[Long]) : Long = {\n        var result = 0l\n\
    \        for (i <- 0 until l.length) {\n            result += l[i]\n        }\n\
    \        return result\n    }\n\n    // Return the product of the elements in\
    \ the given list.\n    // >>> product(List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    //\
    \ >>> product(List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong,\
    \ 653l.toLong, 121l.toLong))\n    // 34l.toLong\n    // >>> product(List[Long](5l.toLong,\
    \ 3", "        var result = new ArrayList[Long]()\n        var i = 0\n       \
    \ var j = 0\n        while (i < l1.size && j < l2.size) {\n            if (l1.apply(i)\
    \ == l2.apply(j)) {\n                result.append(l1.apply(i))\n            \
    \    i += 1\n                j += 1\n            } else if (l1.apply(i) < l2.apply(j))\
    \ {\n                i += 1\n            } else {\n                j += 1\n  \
    \          }\n        }\n        return result\n    }\n\n    // Return the number\
    \ of elements in the intersection of two lists.\n    // >>> intersection((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // 3\n    // >>> intersection((List[Long](5l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n    // 2\n    def intersection(l1\
    \ : List[Long], l2 : List[Long]) : Int = {\n        var result = 0\n        var\
    \ i = 0\n        var j = 0\n        while (i < l1.size && j < l2.size) {\n   \
    \         if (l1.apply(i) == l2.apply(j)) {\n                result += 1\n   \
    \             i += 1\n                j += 1\n            } else if (l1.apply(i)\
    \ < l2.apply(j)) {\n                i += 1\n            } else {\n           \
    \     j += 1\n            }\n        }\n        return result\n    }\n\n    //\
    \ Return the number of elements in the union of two lists.\n    // >>> union((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2", "        var l1_ = l1.toSeq\n\
    \        var l2_ = l2.toSeq\n        var l1_ = l1_.toBuffer\n        var l2_ =\
    \ l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n\
    \        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_\
    \ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n\
    \        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_\
    \ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n\
    \        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_\
    \ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n\
    \        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_\
    \ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n\
    \        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_\
    \ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n\
    \        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_\
    \ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n\
    \        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_\
    \ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n\
    \        var l2_ = l2_.toBuffer\n        var l1_ =", "        var l = new ArrayList[Long]()\n\
    \        for (i <- 0 until l1.length) {\n            for (j <- 0 until l2.length)\
    \ {\n                if (l1[i] == l2[j]) {\n                    l = l.append(l1[i])\n\
    \                    break\n                }\n            }\n        }\n    \
    \    return l", "        var result = new ArrayList[Long]()\n        var i = 0\n\
    \        var j = 0\n        while (i < l1.size && j < l2.size) {\n           \
    \ if (l1.apply(i).equals(l2.apply(j))) {\n                result.append(l1.apply(i))\n\
    \                i += 1\n                j += 1\n            } else if (l1.apply(i)\
    \ < l2.apply(j)) {\n                i += 1\n            } else {\n           \
    \     j += 1\n            }\n        }\n        return result\n    }\n\n    //\
    \ Return the sum of the elements in the list.\n    // >>> sum(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n    // 15l.toLong\n    // >>>\
    \ sum(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong), 0l.toLong)\n\
    \    // 15l.toLong\n    // >>> sum(List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong), 0l.toLong, 0l.toLong)\n    // 15l.toLong\n    // >>>\
    \ sum(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong), 0l.toLong,\
    \ 0l.toLong, 0l.toLong)\n    // 15l.toLong\n    // >>> sum(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong), 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong)\n    // 15l.toLong\n    // >>> sum(List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong), 0l.toLong, 0l.toLong, 0l.toLong, 0l.to", " \
    \       var result = new ArrayList[Long]()\n        for (i <- 0 until l1.length)\
    \ {\n            for (j <- 0 until l2.length) {\n                if (l1[i] ==\
    \ l2[j]) {\n                    result.add(l1[i])\n                    break\n\
    \                }\n            }\n        }\n        return result", "      \
    \  var l1_ = l1.toSeq().toList()\n        var l2_ = l2.toSeq().toList()\n    \
    \    var l1_ = l1_.sort(Comparator.comparingLong(l1_::apply[0]))\n        var\
    \ l2_ = l2_.sort(Comparator.comparingLong(l2_::apply[0]))\n        var l1_ = l1_.zipWithIndex().map(t\
    \ -> t._2).toList()\n        var l2_ = l2_.zipWithIndex().map(t -> t._2).toList()\n\
    \        var l1_ = l1_.filter(t -> l2_.contains(t)).toList()\n        var l2_\
    \ = l2_.filter(t -> l1_.contains(t)).toList()\n        var l1_ = l1_.filter(t\
    \ -> l2_.contains(t)).toList()\n        return l1_", "        var l1_ = l1.toSeq().toList()\n\
    \        var l2_ = l2.toSeq().toList()\n        var l1_ = l1_.sort(Comparator.comparingLong(x\
    \ -> x))\n        var l2_ = l2_.sort(Comparator.comparingLong(x -> x))\n     \
    \   var l1_ = l1_.distinct()\n        var l2_ = l2_.distinct()\n        var l1_\
    \ = l1_.intersect(l2_)\n        return l1_.toSeq().toList()", "        var result\
    \ = new ArrayList[Long]()\n        var i = 0\n        var j = 0\n        while\
    \ (i < l1.length && j < l2.length) {\n            if (l1[i] == l2[j]) {\n    \
    \            result.add(l1[i])\n                i += 1\n                j += 1\n\
    \            } else if (l1[i] < l2[j]) {\n                i += 1\n           \
    \ } else {\n                j += 1\n            }\n        }\n        return result",
  "        var result = new ArrayList[Long]()\n        var i = 0\n        var j =\
    \ 0\n        while (i < l1.length && j < l2.length) {\n            if (l1[i] ==\
    \ l2[j]) {\n                result.add(l1[i])\n                i += 1\n      \
    \          j += 1\n            } else if (l1[i] < l2[j]) {\n                i\
    \ += 1\n            } else {\n                j += 1\n            }\n        }\n\
    \        return result", "        var l1_sorted = l1.sorted\n        var l2_sorted\
    \ = l2.sorted\n        var l1_unique = l1_sorted.toUnique\n        var l2_unique\
    \ = l2_sorted.toUnique\n        var l1_intersect = l1_unique.intersect(l2_unique)\n\
    \        var l1_intersect_sorted = l1_intersect.sorted\n        var l1_intersect_sorted_unique\
    \ = l1_intersect_sorted.toUnique\n        var l1_intersect_sorted_unique_sorted\
    \ = l1_intersect_sorted_unique.sorted\n        var l1_intersect_sorted_unique_sorted_sorted\
    \ = l1_intersect_sorted_unique_sorted.sorted\n        var l1_intersect_sorted_unique_sorted_sorted_sorted\
    \ = l1_intersect_sorted_unique_sorted_sorted.sorted\n        var l1_intersect_sorted_unique_sorted_sorted_sorted_sorted\
    \ = l1_intersect_sorted_unique_sorted_sorted_sorted.sorted\n        var l1_intersect_sorted_unique_sorted_sorted_sorted_sorted_sorted\
    \ = l1_intersect_sorted_unique_sorted_sorted_sorted_sorted.sorted\n        var\
    \ l1_intersect_sorted_unique_sorted_sorted_sorted_sorted_sorted_sorted = l1_intersect_sorted_unique_sorted_sorted_sorted_sorted_sorted.sorted\n\
    \        var l1_intersect_sorted_unique_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = l1_intersect_sorted_unique_sorted_sorted_sorted_sorted_sorted_sorted.sorted\n\
    \        var l1_intersect_sorted_unique_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = l1_intersect_sorted_unique_s", "        var l1_ = l1.toSeq\n        var l2_\
    \ = l2.toSeq\n        var l1_$ = l1_.toBuffer\n        var l2_$ = l2_.toBuffer\n\
    \        var l1_$_ = l1_.toBuffer\n        var l2_$_ = l2_.toBuffer\n        var\
    \ l1_$__ = l1_.toBuffer\n        var l2_$__ = l2_.toBuffer\n        var l1_$__$\
    \ = l1_.toBuffer\n        var l2_$__$ = l2_.toBuffer\n        var l1_$__$_ = l1_.toBuffer\n\
    \        var l2_$__$_ = l2_.toBuffer\n        var l1_$__$__ = l1_.toBuffer\n \
    \       var l2_$__$__ = l2_.toBuffer\n        var l1_$__$__$ = l1_.toBuffer\n\
    \        var l2_$__$__$ = l2_.toBuffer\n        var l1_$__$__$_ = l1_.toBuffer\n\
    \        var l2_$__$__$_ = l2_.toBuffer\n        var l1_$__$__$__ = l1_.toBuffer\n\
    \        var l2_$__$__$__ = l2_.toBuffer\n        var l1_$__$__$__$ = l1_.toBuffer\n\
    \        var l2_$__$__$__$ = l2_.toBuffer\n        var l1_$__$__$__$_ = l1_.toBuffer\n\
    \        var l2_$__$__$__$_ = l2_.toBuffer\n        var l1_$__$__$__$__ = l1_.toBuffer\n\
    \        var l2_$__$__$__$__ = l2_.toBuffer\n        var l1_$__$__$__$__$ = l1_.toBuffer\n\
    \        var l2_$__$__$__$__$ = l2_.toBuffer\n        var l1_$__$__$__$__$_ =\
    \ l1_.toBuffer\n        var l2_$__$__$__$__$_ = l2_.toBuffer\n", "        var\
    \ l1_ = l1.toSeq\n        var l2_ = l2.toSeq\n        var l1_size = l1_.size\n\
    \        var l2_size = l2_.size\n        var i = 0\n        var j = 0\n      \
    \  var result = List[Long]()\n        while (i < l1_size && j < l2_size) {\n \
    \           if (l1_[i] == l2_[j]) {\n                result = result.append(l1_[i])\n\
    \                i += 1\n                j += 1\n            } else if (l1_[i]\
    \ < l2_[j]) {\n                i += 1\n            } else {\n                j\
    \ += 1\n            }\n        }\n        return result", "        var l1_ = l1.toSeq\n\
    \        var l2_ = l2.toSeq\n        var l1_$ = l1_.toIterator\n        var l2_$\
    \ = l2_.toIterator\n        var l1_$_ = l1_.toIterator\n        var l2_$_ = l2_.toIterator\n\
    \        var l1_$__ = l1_.toIterator\n        var l2_$__ = l2_.toIterator\n  \
    \      var l1_$__$ = l1_.toIterator\n        var l2_$__$ = l2_.toIterator\n  \
    \      var l1_$__$_ = l1_.toIterator\n        var l2_$__$_ = l2_.toIterator\n\
    \        var l1_$__$__ = l1_.toIterator\n        var l2_$__$__ = l2_.toIterator\n\
    \        var l1_$__$__$ = l1_.toIterator\n        var l2_$__$__$ = l2_.toIterator\n\
    \        var l1_$__$__$$ = l1_.toIterator\n        var l2_$__$__$$ = l2_.toIterator\n\
    \        var l1_$__$__$$$ = l1_.toIterator\n        var l2_$__$__$$$ = l2_.toIterator\n\
    \        var l1_$__$__$$__ = l1_.toIterator\n        var l2_$__$__$$__$ = l2_.toIterator\n\
    \        var l1_$__$__$$__$$ = l1_.toIterator\n        var l2_$__$__$$__$$$ =\
    \ l2_.toIterator\n        var l1_$__$__$$__$$$_ = l1_.toIterator\n        var\
    \ l2_$__$__$$__$$$_$ = l2_.toIterator\n        var l1_$__$__$$__$$$__ = l1_.toIterator\n\
    \        var l2_$__$__$$__$$$__$ = l2_.toIterator\n        var l1_$__$__$$__$$$__$$\
    \ = l1_.toIterator\n        var l2_$__$__$$__$$$__$$$ = l2_.toIterator", "   \
    \     var l1_s = l1.toSeq\n        var l2_s = l2.toSeq\n        var l1_s_s = l1_s.toSeq\n\
    \        var l2_s_s = l2_s.toSeq\n        var l1_s_s_s = l1_s_s.toSeq\n      \
    \  var l2_s_s_s = l2_s_s.toSeq\n        var l1_s_s_s_s = l1_s_s_s.toSeq\n    \
    \    var l2_s_s_s_s = l2_s_s_s.toSeq\n        var l1_s_s_s_s_s = l1_s_s_s_s.toSeq\n\
    \        var l2_s_s_s_s_s = l2_s_s_s_s.toSeq\n        var l1_s_s_s_s_s_s = l1_s_s_s_s_s.toSeq\n\
    \        var l2_s_s_s_s_s_s = l2_s_s_s_s_s.toSeq\n        var l1_s_s_s_s_s_s_s\
    \ = l1_s_s_s_s_s_s.toSeq\n        var l2_s_s_s_s_s_s_s = l2_s_s_s_s_s_s.toSeq\n\
    \        var l1_s_s_s_s_s_s_s_s = l1_s_s_s_s_s_s_s.toSeq\n        var l2_s_s_s_s_s_s_s_s\
    \ = l2_s_s_s_s_s_s_s.toSeq\n        var l1_s_s_s_s_s_s_s_s_s = l1_s_s_s_s_s_s_s_s.toSeq\n\
    \        var l2_s_s_s_s_s_s_s", "        var l1_ = l1.toSeq\n        var l2_ =\
    \ l2.toSeq\n        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n \
    \       var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_\
    \ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n\
    \        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_\
    \ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n\
    \        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_\
    \ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n\
    \        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_\
    \ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n\
    \        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_\
    \ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n\
    \        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_\
    \ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n\
    \        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_\
    \ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n\
    \        var l2_ = l2_.toBuffer\n        var l1_ = l1_.toBuffer\n        var l2_\
    \ = l2_.toBuffer\n        var l1_ =", "        var common = new ArrayList[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (i < l1.size && j < l2.size)\
    \ {\n            if (l1.apply(i) == l2.apply(j)) {\n                common.add(l1.apply(i))\n\
    \                i += 1\n                j += 1\n            } else if (l1.apply(i)\
    \ < l2.apply(j)) {\n                i += 1\n            } else {\n           \
    \     j += 1\n            }\n        }\n        return common", "        var result\
    \ = new ArrayList[Long]()\n        var i = 0\n        var j = 0\n        while\
    \ (i < l1.length && j < l2.length) {\n            if (l1[i] == l2[j]) {\n    \
    \            result.add(l1[i])\n                i += 1\n                j += 1\n\
    \            } else if (l1[i] < l2[j]) {\n                i += 1\n           \
    \ } else {\n                j += 1\n            }\n        }\n        return result\n\
    \    }\n\n    // Return the sum of the elements in the list.\n    // >>> sum(List(1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // 6l.toLong\n    def sum(l : List[Long]) : Long\
    \ = {\n        var result = 0l\n        for (i <- 0 until l.length) {\n      \
    \      result += l[i]\n        }\n        return result\n    }\n\n    // Return\
    \ the product of the elements in the list.\n    // >>> product(List(1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // 6l.toLong\n    def product(l : List[Long]) :\
    \ Long = {\n        var result = 1l\n        for (i <- 0 until l.length) {\n \
    \           result *= l[i]\n        }\n        return result\n    }\n\n    //\
    \ Return the maximum of the elements in the list.\n    // >>> max(List(1l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // 3l.toLong\n    def max(l : List[Long]) : Long\
    \ = {\n        var result = l[0]\n        for (i <- 1 until l.length) {\n    \
    \        if (l[i] > result) {\n                result = l[i]\n            }\n\
    \        }\n        return result\n    }\n\n    // Return the minimum of the elements\
    \ in the list.\n    // >>> min(List(1l.toLong, 2l.toLong, 3l.toLong))\n    //\
    \ 1l.toLong\n    def min(l : List[Long]) : Long = {\n        var result = l[",
  "        var l1_ = l1.toSeq\n        var l2_ = l2.toSeq\n        var l1_len = l1_.length\n\
    \        var l2_len = l2_.length\n        var i = 0\n        var j = 0\n     \
    \   var common = List[Long]()\n        while (i < l1_len && j < l2_len) {\n  \
    \          if (l1_[i] == l2_[j]) {\n                common = common.append(l1_[i])\n\
    \                i += 1\n                j += 1\n            } else if (l1_[i]\
    \ < l2_[j]) {\n                i += 1\n            } else {\n                j\
    \ += 1\n            }\n        }\n        return common\n    }\n\n    // Return\
    \ the sum of the squares of the first n natural numbers.\n    // >>> sum_of_squares(5)\n\
    \    // 385\n    // >>> sum_of_squares(0)\n    // 0\n    def sum_of_squares(n\
    \ : Int) : Int = {\n        var i = 1\n        var sum = 0\n        while (i <=\
    \ n) {\n            sum += i * i\n            i += 1\n        }\n        return\
    \ sum\n    }\n\n    // Return the sum of the squares of the first n natural numbers.\n\
    \    // >>> sum_of_cubes(5)\n    // 1225\n    // >>> sum_of_cubes(0)\n    // 0\n\
    \    def sum_of_cubes(n : Int) : Int = {\n        var i = 1\n        var sum =\
    \ 0\n        while (i <= n) {\n            sum += i * i * i\n            i +=\
    \ 1\n        }\n        return sum\n    }\n\n    // Return the sum of the first\
    \ n natural numbers.\n    // >>> sum(5)\n    // 55\n    // >>> sum(0)\n    //\
    \ 0\n    def sum(n : Int) : Int = {\n        var i = 1\n        var sum = 0\n\
    \        while (i <= n) {\n            sum += i\n            i += 1\n        }\n\
    \        return sum\n    }\n\n    // Return the product of the first n natural\
    \ numbers.\n    //", "        var result = new ArrayList[Long]()\n        var\
    \ i = 0\n        var j = 0\n        while (i < l1.length && j < l2.length) {\n\
    \            if (l1[i] == l2[j]) {\n                result.append(l1[i])\n   \
    \             i += 1\n                j += 1\n            } else if (l1[i] < l2[j])\
    \ {\n                i += 1\n            } else {\n                j += 1\n  \
    \          }\n        }\n        return result\n    }\n\n    // Return the number\
    \ of common elements in two lists.\n    // >>> commonCount((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // 3\n    // >>> commonCount((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)),\
    \ (List[Long](3l.toLong, 2l.toLong)))\n    // 2\n    def commonCount(l1 : List[Long],\
    \ l2 : List[Long]) : Int = {\n        var result = 0\n        var i = 0\n    \
    \    var j = 0\n        while (i < l1.length && j < l2.length) {\n           \
    \ if (l1[i] == l2[j]) {\n                result += 1\n                i += 1\n\
    \                j += 1\n            } else if (l1[i] < l2[j]) {\n           \
    \     i += 1\n            } else {\n                j += 1\n            }\n  \
    \      }\n        return result\n    }\n\n    // Return the number of elements\
    \ in the list.\n    // >>> length(List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    // 7\n    def length(",
  "        var common = new ArrayList[Long]()\n        for (i <- 0 until min(l1.length,\
    \ l2.length)) {\n            if (l1[i] == l2[i]) {\n                common +=\
    \ l1[i]\n            }\n        }\n        return common", "        var common\
    \ = new ArrayList[Long]()\n        var i = 0\n        var j = 0\n        while\
    \ (i < l1.length && j < l2.length) {\n            if (l1[i] == l2[j]) {\n    \
    \            common.add(l1[i])\n                i += 1\n                j += 1\n\
    \            } else if (l1[i] < l2[j]) {\n                i += 1\n           \
    \ } else {\n                j += 1\n            }\n        }\n        return common\n\
    \    }\n\n    // Return the number of unique common elements for two lists.\n\
    \    // >>> count(common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n    // 3\n    // >>> count(common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // 2\n    def count(l1 : List[Long], l2 : List[Long]) : Int = {\n        var\
    \ count = 0\n        var i = 0\n        var j = 0\n        while (i < l1.length\
    \ && j < l2.length) {\n            if (l1[i] == l2[j]) {\n                count\
    \ += 1\n                i += 1\n                j += 1\n            } else if\
    \ (l1[i] < l2[j]) {\n                i += 1\n            } else {\n          \
    \      j += 1\n            }\n        }\n        return count\n    }\n\n    //\
    \ Return the number of unique common elements for two lists.\n    // >>> count(common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[",
  "        var result = new ArrayList[Long]()\n        var i = 0\n        var j =\
    \ 0\n        while (i < l1.size && j < l2.size) {\n            if (l1.apply(i).equals(l2.apply(j)))\
    \ {\n                result.append(l1.apply(i))\n                i += 1\n    \
    \            j += 1\n            } else if (l1.apply(i) < l2.apply(j)) {\n   \
    \             i += 1\n            } else {\n                j += 1\n         \
    \   }\n        }\n        return result", "        var l = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until l1.length) {\n            if (l2.indexOf(l1.apply(i))\
    \ >= 0) {\n                l.append(l1.apply(i))\n            }\n        }\n \
    \       l.sort(Comparator.comparingLong(Long::longValue))\n        return l.toList()\n\
    \    }\n\n    // Return sorted unique common elements for two lists.\n    // >>>\
    \ common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong,\
    \ 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong,\
    \ 9l.toLong, 653l.toLong, 121l.toLong)))\n    // (List[Long](1l.toLong, 5l.toLong,\
    \ 653l.toLong))\n    // >>> common((List[Long](5l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    def common2(l1 : List[Long], l2 : List[Long]) : List[Long]\
    \ = {\n        var l = new mutable.ListBuffer[Long]()\n        for (i <- 0 until\
    \ l1.length) {\n            if (l2.indexOf(l1.apply(i)) >= 0) {\n            \
    \    l.append(l1.apply(i))\n            }\n        }\n        l.sort(Comparator.comparingLong(Long::longValue))\n\
    \        return l.toList()\n    }\n\n    // Return sorted unique common elements\
    \ for two lists.\n    // >>> common((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.",
  "        var result = new ArrayList[Long]()\n        var i = 0\n        var j =\
    \ 0\n        while (i < l1.length && j < l2.length) {\n            if (l1[i] ==\
    \ l2[j]) {\n                result.add(l1[i])\n                i += 1\n      \
    \          j += 1\n            } else if (l1[i] < l2[j]) {\n                i\
    \ += 1\n            } else {\n                j += 1\n            }\n        }\n\
    \        return result", "        var l1_ = l1.toSeq\n        var l2_ = l2.toSeq\n\
    \        var l1_size = l1_().size\n        var l2_size = l2_().size\n        var\
    \ i = 0\n        var j = 0\n        var result = List[Long](l1_size)\n       \
    \ while (i < l1_size && j < l2_size) {\n            if (l1_[i] == l2_[j]) {\n\
    \                result = result.updated(i)\n                i += 1\n        \
    \        j += 1\n            } else if (l1_[i] < l2_[j]) {\n                i\
    \ += 1\n            } else {\n                j += 1\n            }\n        }\n\
    \        return result", "        var l1_ = l1.toSeq\n        var l2_ = l2.toSeq\n\
    \        var l1_ = l1_.toBuffer\n        var l2_ = l2_.toBuffer\n        var l1_\
    \ = l1_.toList\n        var l2_ = l2_.toList\n        var l1_ = l1_.toSet\n  \
    \      var l2_ = l2_.toSet\n        var l1_ = l1_.toMap\n        var l2_ = l2_.toMap\n\
    \        var l1_ = l1_.toMap[Long](0)\n        var l2_ = l2_.toMap[Long](0)\n\
    \        var l1_ = l1_.toMap[Long](0).toSeq\n        var l2_ = l2_.toMap[Long](0).toSeq\n\
    \        var l1_ = l1_.toMap[Long](0).toBuffer\n        var l2_ = l2_.toMap[Long](0).toBuffer\n\
    \        var l1_ = l1_.toMap[Long](0).toList\n        var l2_ = l2_.toMap[Long](0).toList\n\
    \        var l1_ = l1_.toMap[Long](0).toSet\n        var l2_ = l2_.toMap[Long](0).toSet\n\
    \        var l1_ = l1_.toMap[Long](0).toMap\n        var l2_ = l2_.toMap[Long](0).toMap\n\
    \        var l1_ = l1_.toMap[Long](0).toMap[Long](0)\n        var l2_ = l2_.toMap[Long](0).toMap[Long](0)\n\
    \        var l1_ = l1_.toMap[Long](0).toMap[Long](0).toSeq\n        var l2_ =\
    \ l2_.toMap[Long](0).toMap[Long](0).toSeq\n        var l1_ = l1_.toMap[Long](0).toMap[Long](0).toBuffer\n\
    \        var l2_ = l2_.toMap[Long](0).toMap[Long](0).toBuffer\n        var l1_\
    \ = l1_.to", "        var result = new ArrayList[Long]()\n        var i = 0\n\
    \        var j = 0\n        while (i < l1.length && j < l2.length) {\n       \
    \     if (l1[i] == l2[j]) {\n                result.append(l1[i])\n          \
    \      i += 1\n                j += 1\n            } else if (l1[i] < l2[j]) {\n\
    \                i += 1\n            } else {\n                j += 1\n      \
    \      }\n        }\n        return result\n    }\n\n    // Return the sum of\
    \ the elements in a list.\n    // >>> sum(List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    //\
    \ >>> sum(List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong,\
    \ 121l.toLong))\n    // 9l.toLong\n    // >>> sum(List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong))\n    // 5l.toLong\n    def sum(l : List[Long]) : Long\
    \ = {\n        var result = 0l\n        for (i <- 0 until l.length) {\n      \
    \      result += l[i]\n        }\n        return result\n    }\n\n    // Return\
    \ the product of the elements in a list.\n    // >>> product(List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    //\
    \ 653l.toLong\n    // >>> product(List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))\n    // 34l.toLong\n    //\
    \ >>> product(List[Long](5l.toLong, 3l.to", "        var l1_sorted = l1.sorted\n\
    \        var l2_sorted = l2.sorted\n        var l1_size = l1_sorted.size\n   \
    \     var l2_size = l2_sorted.size\n        var i = 0\n        var j = 0\n   \
    \     var result = List[Long]()\n        while (i < l1_size && j < l2_size) {\n\
    \            if (l1_sorted.apply(i) == l2_sorted.apply(j)) {\n               \
    \ result = result.append(l1_sorted.apply(i))\n                i += 1\n       \
    \         j += 1\n            } else if (l1_sorted.apply(i) < l2_sorted.apply(j))\
    \ {\n                i += 1\n            } else {\n                j += 1\n  \
    \          }\n        }\n        return result", "        var result = new ArrayList[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (i < l1.size && j < l2.size)\
    \ {\n            if (l1.apply(i).equals(l2.apply(j))) {\n                result.add(l1.apply(i))\n\
    \                i += 1\n                j += 1\n            } else if (l1.apply(i)\
    \ < l2.apply(j)) {\n                i += 1\n            } else {\n           \
    \     j += 1\n            }\n        }\n        return result\n    }\n\n    //\
    \ Return the sum of the elements in the list.\n    // >>> sum(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))\n    // 10l\n    // >>> sum(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n    // 15l\n    // >>> sum(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))\n    // 21l\n    //\
    \ >>> sum(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong,\
    \ 7l.toLong))\n    // 28l\n    // >>> sum(List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))\n    // 36l\n    //\
    \ >>> sum(List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))\n    // 45l\n    // >>> sum(List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.to", "        var l1_ = l1.toSeq().toSet()\n\
    \        var l2_ = l2.toSeq().toSet()\n        var common = l1_.intersect(l2_)\n\
    \        return common.toList()\n    }\n\n    // Return the sum of all elements\
    \ in a list.\n    // >>> sum(List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong,\
    \ 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    // >>> sum(List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))\n   \
    \ // 1405l.toLong\n    // >>> sum(List[Long](5l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong))\n    // 2l.toLong\n    def sum(l : List[Long]) : Long = {\n    \
    \    var sum = 0l\n        for (var i = 0; i < l.size(); i++) {\n            sum\
    \ += l.apply(i)\n        }\n        return sum\n    }\n\n    // Return the product\
    \ of all elements in a list.\n    // >>> product(List[Long](1l.toLong, 4l.toLong,\
    \ 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n\
    \    // >>> product(List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong,\
    \ 653l.toLong, 121l.toLong))\n    // 5l.toLong\n    // >>> product(List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong))\n    // 2l.toLong\n    def product(l : List[Long])\
    \ : Long = {\n        var product = 1l\n        for (var i = 0; i < l.size", " \
    \       var l1_ = l1\n        var l2_ = l2\n        var l1_size = l1_.size\n \
    \       var l2_size = l2_.size\n        var i = 0\n        var j = 0\n       \
    \ var result = List[Long]()\n        while (i < l1_size && j < l2_size) {\n  \
    \          if (l1_[i] == l2_[j]) {\n                result = result.append(l1_[i])\n\
    \                i += 1\n                j += 1\n            } else if (l1_[i]\
    \ < l2_[j]) {\n                i += 1\n            } else {\n                j\
    \ += 1\n            }\n        }\n        return result\n    }\n\n    // Return\
    \ the number of unique common elements for two lists.\n    // >>> unique(List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong), List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))\n   \
    \ // 3\n    // >>> unique(List[Long](5l.toLong, 3l.toLong, 2l.toLong, 8l.toLong),\
    \ List[Long](3l.toLong, 2l.toLong))\n    // 2\n    def unique(l1 : List[Long],\
    \ l2 : List[Long]) : Int = {\n        var l1_ = l1\n        var l2_ = l2\n   \
    \     var l1_size = l1_.size\n        var l2_size = l2_.size\n        var i =\
    \ 0\n        var j = 0\n        var result = 0\n        while (i < l1_size &&\
    \ j < l2_size) {\n            if (l1_[i] == l2_[j]) {\n                i += 1\n\
    \                j += 1\n            } else if (l1_[i] < l2_[j]) {\n         \
    \       i += 1\n            } else {\n                j += 1\n            }",
  "        var result = new ArrayList[Long]()\n        var i = 0\n        var j =\
    \ 0\n        while (i < l1.length && j < l2.length) {\n            if (l1[i] ==\
    \ l2[j]) {\n                result.append(l1[i])\n                i += 1\n   \
    \             j += 1\n            } else if (l1[i] < l2[j]) {\n              \
    \  i += 1\n            } else {\n                j += 1\n            }\n     \
    \   }\n        return result\n    }\n\n    // Return sorted unique common elements\
    \ for two lists.\n    // >>> common((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong,\
    \ 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n    // (List[Long](1l.toLong,\
    \ 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong, 3l.toLong,\
    \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    def common2(l1 : List[Long], l2 : List[Long]) : List[Long]\
    \ = {\n        var result = new ArrayList[Long]()\n        var i = 0\n       \
    \ var j = 0\n        while (i < l1.length && j < l2.length) {\n            if\
    \ (l1[i] == l2[j]) {\n                result.append(l1[i])\n                i\
    \ += 1\n                j += 1\n            } else if (l1[i] < l2[j]) {\n    \
    \            i += 1\n            } else {\n                j += 1\n          \
    \  }\n        }\n        return result\n    }\n\n    // Return sorted unique common\
    \ elements for two lists.\n    // >>> common((List[Long](1", "        var result\
    \ = new ArrayList[Long]()\n        var i = 0\n        var j = 0\n        while\
    \ (i < l1.size && j < l2.size) {\n            if (l1.apply(i).equals(l2.apply(j)))\
    \ {\n                result.add(l1.apply(i))\n                i += 1\n       \
    \         j += 1\n            } else if (l1.apply(i) < l2.apply(j)) {\n      \
    \          i += 1\n            } else {\n                j += 1\n            }\n\
    \        }\n        return result", "        var l1_ = l1.toSeq\n        var l2_\
    \ = l2.toSeq\n        var l1_len = l1_.length\n        var l2_len = l2_.length\n\
    \        var i = 0\n        var j = 0\n        var result = List[Long]()\n   \
    \     while (i < l1_len && j < l2_len) {\n            if (l1_[i] == l2_[j]) {\n\
    \                result = result.append(l1_[i])\n                i = i + 1\n \
    \               j = j + 1\n            } else if (l1_[i] < l2_[j]) {\n       \
    \         i = i + 1\n            } else {\n                j = j + 1\n       \
    \     }\n        }\n        return result", "        var result = new ArrayList[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (i < l1.length && j < l2.length)\
    \ {\n            if (l1[i] == l2[j]) {\n                result.add(l1[i])\n  \
    \              i += 1\n                j += 1\n            } else if (l1[i] <\
    \ l2[j]) {\n                i += 1\n            } else {\n                j +=\
    \ 1\n            }\n        }\n        return result", "        var l1_ = l1.toSeq\n\
    \        var l2_ = l2.toSeq\n        var l1_$ = l1_\n        var l2_$ = l2_\n\
    \        var l1_$_ = l1_$\n        var l2_$_ = l2_$\n        var l1_$__ = l1_$_\n\
    \        var l2_$__ = l2_$_\n        var l1_$__$ = l1_$__\n        var l2_$__$\
    \ = l2_$__\n        var l1_$__$_ = l1_$__$\n        var l2_$__$_ = l2_$__$\n \
    \       var l1_$__$__ = l1_$__$_\n        var l2_$__$__ = l2_$__$_\n        var\
    \ l1_$__$__$ = l1_$__$__\n        var l2_$__$__$ = l2_$__$__\n        var l1_$__$__$_\
    \ = l1_$__$__$\n        var l2_$__$__$_ = l2_$__$__$\n        var l1_$__$__$__\
    \ = l1_$__$__$_\n        var l2_$__$__$__ = l2_$__$__$_\n        var l1_$__$__$__$\
    \ = l1_$__$__$__\n        var l2_$__$__$__$ = l2_$__$__$__\n        var l1_$__$__$__$_\
    \ = l1_$__$__$__$\n        var l2_$__$__$__$_ = l2_$__$__$__$\n        var l1_$__$__$__$__\
    \ = l1_$__$__$__$_\n        var l2_$__$__$__$__ = l2_$__$__$__$_\n        var\
    \ l1_$__$__$__$__$ = l1_$__$__$__$__\n        var l2_$__$__$__", "        var\
    \ l1_ = l1.toSeq\n        var l2_ = l2.toSeq\n        var l1_len = l1_().length\n\
    \        var l2_len = l2_().length\n        var i = 0\n        var j = 0\n   \
    \     var result = List[Long]()\n        while (i < l1_len && j < l2_len) {\n\
    \            if (l1_[i] == l2_[j]) {\n                result = result.append(l1_[i])\n\
    \                i += 1\n                j += 1\n            } else if (l1_[i]\
    \ < l2_[j]) {\n                i += 1\n            } else {\n                j\
    \ += 1\n            }\n        }\n        return result", "        var result\
    \ = new ArrayList[Long]()\n        var i = 0\n        var j = 0\n        while\
    \ (i < l1.size && j < l2.size) {\n            if (l1.apply(i).equals(l2.apply(j)))\
    \ {\n                result.append(l1.apply(i))\n                i += 1\n    \
    \            j += 1\n            } else if (l1.apply(i) > l2.apply(j)) {\n   \
    \             j += 1\n            } else {\n                i += 1\n         \
    \   }\n        }\n        return result\n    }\n\n    // Return the sum of the\
    \ elements in the list.\n    // >>> sum(List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    //\
    \ >>> sum(List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong,\
    \ 121l.toLong))\n    // 15l.toLong\n    def sum(l : List[Long]) : Long = {\n \
    \       var result = 0l\n        for (i <- 0 until l.size) {\n            result\
    \ += l.apply(i)\n        }\n        return result\n    }\n\n    // Return the\
    \ product of the elements in the list.\n    // >>> product(List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    //\
    \ 653l.toLong\n    // >>> product(List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))\n    // 5l.toLong\n    def\
    \ product(l : List[Long]) : Long = {\n        var result = 1l\n        for (i\
    \ <- 0 until l.size) {\n            result *= l.apply(i)\n        ", "       \
    \ var result = new ArrayList[Long]()\n        var i = 0\n        var j = 0\n \
    \       while (i < l1.size && j < l2.size) {\n            if (l1.apply(i).equals(l2.apply(j)))\
    \ {\n                result.append(l1.apply(i))\n                i += 1\n    \
    \            j += 1\n            } else if (l1.apply(i) < l2.apply(j)) {\n   \
    \             i += 1\n            } else {\n                j += 1\n         \
    \   }\n        }\n        return result", "        var result = new ArrayList[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (i < l1.length && j < l2.length)\
    \ {\n            if (l1[i] == l2[j]) {\n                result.add(l1[i])\n  \
    \              i += 1\n                j += 1\n            } else if (l1[i] <\
    \ l2[j]) {\n                i += 1\n            } else {\n                j +=\
    \ 1\n            }\n        }\n        return result\n    }\n\n    // Return sorted\
    \ unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common2(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var result = new ArrayList[Long]()\n \
    \       var i = 0\n        var j = 0\n        while (i < l1.length && j < l2.length)\
    \ {\n            if (l1[i] == l2[j]) {\n                result.add(l1[i])\n  \
    \              i += 1\n                j += 1\n            } else if (l1[i] <\
    \ l2[j]) {\n                i += 1\n            } else {\n                j +=\
    \ 1\n            }\n        }\n        return result\n    }\n\n    // Return sorted\
    \ unique common elements for two lists.\n    // >>> common((List[Long](1", " \
    \       var l1_ = l1.toSeq().toList()\n        var l2_ = l2.toSeq().toList()\n\
    \        var l1_ = l1_.sort(Comparator.comparingLong(x -> x))\n        var l2_\
    \ = l2_.sort(Comparator.comparingLong(x -> x))\n        var i = 0\n        var\
    \ j = 0\n        var result = List[Long]()\n        while (i < l1_.size() && j\
    \ < l2_.size()) {\n            if (l1_.get(i) == l2_.get(j)) {\n             \
    \   result = result.append(l1_.get(i))\n                i += 1\n             \
    \   j += 1\n            } else if (l1_.get(i) < l2_.get(j)) {\n              \
    \  i += 1\n            } else {\n                j += 1\n            }\n     \
    \   }\n        return result", "        var result = new ArrayList[Long]()\n \
    \       var i = 0\n        var j = 0\n        while (i < l1.length && j < l2.length)\
    \ {\n            if (l1[i] == l2[j]) {\n                result.add(l1[i])\n  \
    \              i += 1\n                j += 1\n            } else if (l1[i] <\
    \ l2[j]) {\n                i += 1\n            } else {\n                j +=\
    \ 1\n            }\n        }\n        return result\n    }\n\n    // Return the\
    \ sum of the elements in the list.\n    // >>> sum(List[Long](1l.toLong, 4l.toLong,\
    \ 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n\
    \    // >>> sum(List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong,\
    \ 653l.toLong, 121l.toLong))\n    // 9l.toLong\n    def sum(l : List[Long]) :\
    \ Long = {\n        var result = 0l\n        for (i <- 0 until l.length) {\n \
    \           result += l[i]\n        }\n        return result\n    }\n\n    //\
    \ Return the product of the elements in the list.\n    // >>> product(List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    //\
    \ 653l.toLong\n    // >>> product(List[Long](5l.toLong, 7l.toLong, 1l.toLong,\
    \ 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))\n    // 121l.toLong\n    def\
    \ product(l : List[Long]) : Long = {\n        var result = 1l\n        for (i\
    \ <- 0 until l.length) {\n            result *= l[i]\n        }\n        return\
    \ result\n    }\n\n    // Return the sum of the", "        var l1_ = l1.toSeq\n\
    \        var l2_ = l2.toSeq\n        var l1_ = l1_.toBuffer\n        var l2_ =\
    \ l2_.toBuffer\n        var l1_ = l1_.toList\n        var l2_ = l2_.toList\n \
    \       var l1_ = l1_.toSet\n        var l2_ = l2_.toSet\n        var l1_ = l1_.toMap\n\
    \        var l2_ = l2_.toMap\n        var l1_ = l1_.toHashMap\n        var l2_\
    \ = l2_.toHashMap\n        var l1_ = l1_.toLinkedHashMap\n        var l2_ = l2_.toLinkedHashMap\n\
    \        var l1_ = l1_.toTreeMap\n        var l2_ = l2_.toTreeMap\n        var\
    \ l1_ = l1_.toMap\n        var l2_ = l2_.toMap\n        var l1_ = l1_.toHashMap\n\
    \        var l2_ = l2_.toHashMap\n        var l1_ = l1_.toLinkedHashMap\n    \
    \    var l2_ = l2_.toLinkedHashMap\n        var l1_ = l1_.toTreeMap\n        var\
    \ l2_ = l2_.toTreeMap\n        var l1_ = l1_.toMap\n        var l2_ = l2_.toMap\n\
    \        var l1_ = l1_.toHashMap\n        var l2_ = l2_.toHashMap\n        var\
    \ l1_ = l1_.toLinkedHashMap\n        var l2_ = l2_.toLinkedHashMap\n        var\
    \ l1_ = l1_.toTreeMap\n        var l2_ = l2_.toTreeMap\n        var l1_ = l1_.toMap\n\
    \        var l2_ = l2_.toMap\n        var l1_ = l1_.toHashMap\n        var l2_\
    \ = l2_.toHashMap\n        var l1_ = l1_.toLinkedHashMap\n        var l2_ = l2_.toLinkedHashMap\n\
    \        var l1_ = l1_.toTreeMap\n        var l", "        var l = new java.util.ArrayList[Long]()\n\
    \        for (i <- 0 until l1.length) {\n            if (l2.contains(l1(i))) {\n\
    \                l.add(l1(i))\n            }\n        }\n        return scala.collection.JavaConversions.asScalaBuffer(l).toList()\n\
    \    }\n\n    // Return the sum of the squares of the first n natural numbers.\n\
    \    // >>> sumOfSquares(10)\n    // 385\n    // >>> sumOfSquares(0)\n    // 0\n\
    \    def sumOfSquares(n : Int) : Int = {\n        var sum = 0\n        for (i\
    \ <- 0 until n) {\n            sum += i * i\n        }\n        return sum\n \
    \   }\n\n    // Return a list of the first n prime numbers.\n    // >>> primes(10)\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong, 19l.toLong, 23l.toLong))\n    // >>> primes(0)\n    // List[Long]()\n\
    \    def primes(n : Int) : List[Long] = {\n        var l = new java.util.ArrayList[Long]()\n\
    \        for (i <- 0 until n) {\n            if (isPrime(i)) {\n             \
    \   l.add(i)\n            }\n        }\n        return scala.collection.JavaConversions.asScalaBuffer(l).toList()\n\
    \    }\n\n    // Is the number prime?\n    // >>> isPrime(2)\n    // true\n  \
    \  // >>> isPrime(3)\n    // true\n    // >>> isPrime(4)\n    // false\n    def\
    \ isPrime(n : Long) : Boolean = {\n        if (n == 2) {\n            return true\n\
    \        } else if (n == 1) {\n            return false\n        } else if (n\
    \ % 2 == 0) {\n            return false\n        } else {\n            for (i\
    \ <- 3 until Math.sqrt(n)) {\n                if (n % i ==", "        var result\
    \ = new ArrayList[Long]()\n        for (i <- 0 until l1.length) {\n          \
    \  for (j <- 0 until l2.length) {\n                if (l1[i] == l2[j]) {\n   \
    \                 result.add(l1[i])\n                    break\n             \
    \   }\n            }\n        }\n        return result\n    }\n\n    // Return\
    \ the sum of the elements in the list.\n    // >>> sum(List[Long](1l.toLong, 4l.toLong,\
    \ 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n\
    \    def sum(l : List[Long]) : Long = {\n        var result = 0l\n        for\
    \ (i <- 0 until l.length) {\n            result += l[i]\n        }\n        return\
    \ result\n    }\n\n    // Return the product of the elements in the list.\n  \
    \  // >>> product(List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong,\
    \ 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    def product(l : List[Long])\
    \ : Long = {\n        var result = 1l\n        for (i <- 0 until l.length) {\n\
    \            result *= l[i]\n        }\n        return result\n    }\n\n    //\
    \ Return the maximum element in the list.\n    // >>> max(List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    //\
    \ 34l.toLong\n    def max(l : List[Long]) : Long = {\n        var result = l[0]\n\
    \        for (i <- 1 until l.length) {\n            if (l[i] > result) {\n   \
    \             result = l[i]\n            }\n        }\n        return result\n\
    \    }\n\n    // Return the minimum element in the list.\n    // >>> min(List[Long](1l.toLong,\
    \ 4", "        var result = new ArrayList[Long]()\n        var i = 0\n       \
    \ var j = 0\n        while (i < l1.size && j < l2.size) {\n            if (l1.apply(i).equals(l2.apply(j)))\
    \ {\n                result.append(l1.apply(i))\n                i += 1\n    \
    \            j += 1\n            } else if (l1.apply(i) < l2.apply(j)) {\n   \
    \             i += 1\n            } else {\n                j += 1\n         \
    \   }\n        }\n        return result\n    }\n\n    // Return sorted unique\
    \ common elements for two lists.\n    // >>> common((List[Long](1l.toLong, 4l.toLong,\
    \ 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong))\n    def common2(l1 : List[Long], l2 :\
    \ List[Long]) : List[Long] = {\n        var result = new ArrayList[Long]()\n \
    \       var i = 0\n        var j = 0\n        while (i < l1.size && j < l2.size)\
    \ {\n            if (l1.apply(i).equals(l2.apply(j))) {\n                result.append(l1.apply(i))\n\
    \                i += 1\n                j += 1\n            } else if (l1.apply(i)\
    \ < l2.apply(j)) {\n                i += 1\n            } else {\n           \
    \     j += 1\n            }\n        }\n        return result\n    ", "      \
    \  var result = new ArrayList[Long]()\n        var i = 0\n        var j = 0\n\
    \        while (i < l1.length && j < l2.length) {\n            if (l1[i] == l2[j])\
    \ {\n                result.append(l1[i])\n                i += 1\n          \
    \      j += 1\n            } else if (l1[i] < l2[j]) {\n                i += 1\n\
    \            } else {\n                j += 1\n            }\n        }\n    \
    \    return result\n    }\n\n    // Return the sum of the elements in the list.\n\
    \    // >>> sum(List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong,\
    \ 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    def sum(l : List[Long]) : Long\
    \ = {\n        var result = 0l\n        for (i <- 0 until l.length) {\n      \
    \      result += l[i]\n        }\n        return result\n    }\n\n    // Return\
    \ the product of the elements in the list.\n    // >>> product(List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    //\
    \ 653l.toLong\n    def product(l : List[Long]) : Long = {\n        var result\
    \ = 1l\n        for (i <- 0 until l.length) {\n            result *= l[i]\n  \
    \      }\n        return result\n    }\n\n    // Return the product of the elements\
    \ in the list.\n    // >>> product(List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    // 653l.toLong\n    def\
    \ product(l : List[Long]) : Long = {\n        var result = 1l\n        for (i\
    \ <- 0 until l.length) {\n            result *= l[i]\n        }\n        return\
    \ result\n    }\n\n", "        var result = new ArrayList[Long]()\n        var\
    \ i = 0\n        var j = 0\n        while (i < l1.size && j < l2.size) {\n   \
    \         if (l1.apply(i) == l2.apply(j)) {\n                result.add(l1.apply(i))\n\
    \                i += 1\n                j += 1\n            } else if (l1.apply(i)\
    \ < l2.apply(j)) {\n                i += 1\n            } else {\n           \
    \     j += 1\n            }\n        }\n        return result\n    }\n\n    //\
    \ Return the number of common elements in two lists.\n    // >>> commonCount((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // 3\n    // >>> commonCount((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)),\
    \ (List[Long](3l.toLong, 2l.toLong)))\n    // 2\n    def commonCount(l1 : List[Long],\
    \ l2 : List[Long]) : Int = {\n        var result = 0\n        var i = 0\n    \
    \    var j = 0\n        while (i < l1.size && j < l2.size) {\n            if (l1.apply(i)\
    \ == l2.apply(j)) {\n                result += 1\n                i += 1\n   \
    \             j += 1\n            } else if (l1.apply(i) < l2.apply(j)) {\n  \
    \              i += 1\n            } else {\n                j += 1\n        \
    \    }\n        }\n        return result\n    }\n\n    // Return the sum of the\
    \ elements in two lists.\n    // >>> sum((List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l", "        var result = new ArrayList[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (i < l1.length && j < l2.length)\
    \ {\n            if (l1[i] == l2[j]) {\n                result.append(l1[i])\n\
    \                i += 1\n                j += 1\n            } else if (l1[i]\
    \ < l2[j]) {\n                i += 1\n            } else {\n                j\
    \ += 1\n            }\n        }\n        return result\n    }\n\n    // Return\
    \ the number of common elements in two lists.\n    // >>> commonCount((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // 3\n    // >>> commonCount((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)),\
    \ (List[Long](3l.toLong, 2l.toLong)))\n    // 2\n    def commonCount(l1 : List[Long],\
    \ l2 : List[Long]) : Int = {\n        var result = 0\n        var i = 0\n    \
    \    var j = 0\n        while (i < l1.length && j < l2.length) {\n           \
    \ if (l1[i] == l2[j]) {\n                result += 1\n                i += 1\n\
    \                j += 1\n            } else if (l1[i] < l2[j]) {\n           \
    \     i += 1\n            } else {\n                j += 1\n            }\n  \
    \      }\n        return result\n    }\n\n    // Return the number of elements\
    \ in the list.\n    // >>> length(List[Long](1l.toLong, 4l.toLong, 3l.toLong,\
    \ 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong))\n    // 7\n    def length(",
  "        var res = new ArrayList[Long]()\n        var i = 0\n        var j = 0\n\
    \        while (i < l1.size && j < l2.size) {\n            if (l1.apply(i).equals(l2.apply(j)))\
    \ {\n                res.append(l1.apply(i))\n                i += 1\n       \
    \         j += 1\n            } else if (l1.apply(i) < l2.apply(j)) {\n      \
    \          i += 1\n            } else {\n                j += 1\n            }\n\
    \        }\n        return res\n    }\n\n    // Return the number of elements\
    \ in the intersection of two lists.\n    // >>> intersection((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
    \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n  \
    \  // 3\n    // >>> intersection((List[Long](5l.toLong, 3l.toLong, 2l.toLong,\
    \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n    // 0\n    def intersection(l1\
    \ : List[Long], l2 : List[Long]) : Int = {\n        var res = 0\n        var i\
    \ = 0\n        var j = 0\n        while (i < l1.size && j < l2.size) {\n     \
    \       if (l1.apply(i).equals(l2.apply(j))) {\n                i += 1\n     \
    \           j += 1\n                res += 1\n            } else if (l1.apply(i)\
    \ < l2.apply(j)) {\n                i += 1\n            } else {\n           \
    \     j += 1\n            }\n        }\n        return res\n    }\n\n    // Return\
    \ the number of elements in the union of two lists.\n    // >>> union((List[Long](1l.toLong,\
    \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.", "        var result = new ArrayList[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (i < l1.length && j < l2.length)\
    \ {\n            if (l1[i] == l2[j]) {\n                result.add(l1[i])\n  \
    \              i += 1\n                j += 1\n            } else if (l1[i] <\
    \ l2[j]) {\n                i += 1\n            } else {\n                j +=\
    \ 1\n            }\n        }\n        return result"]
stop_tokens:
- "\n    }\n"
