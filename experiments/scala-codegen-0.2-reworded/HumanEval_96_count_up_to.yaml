name: HumanEval_96_count_up_to
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Implement a function that takes an non-negative integer and returns a list\
  \ of the first n\n    // integers that are prime numbers and less than n.\n    //\
  \ for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong, 3l.toLong))\n\
  \    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
  \ 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n    // >>> countUpTo((20l))\n\
  \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
  \ 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n    // (List[Long]())\n\
  \    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
  \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def countUpTo(n : Long) :\
  \ List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
  \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
  \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
  \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
  \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
  \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
  \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
  \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
  \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
  \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
  \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
  \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
  \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
  \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
  \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
  \ 97l.toLong))));\n    }\n\n}\n"
completions: ["        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        val result = List[Long]()\n    \
    \    for (i <- 0 until n) {\n            if (isPrime(i)) {\n                result\
    \ = result.append(i)\n            }\n        }\n        return result\n    }\n\
    \n    // Returns true if the given number is prime.\n    def isPrime(n : Long)\
    \ : Boolean = {\n        if (n < 2) {\n            return false\n        }\n \
    \       if (n == 2) {\n            return true\n        }\n        if (n % 2 ==\
    \ 0) {\n            return false\n        }\n        for (i <- 3 until Math.sqrt(n))\
    \ {\n            if (n % i == 0) {\n                return false\n           \
    \ }\n        }\n        return true", "        val result = List[Long]()\n   \
    \     for (i <- 0 until n) {\n            if (isPrime(i)) {\n                result\
    \ = result.append(i)\n            }\n        }\n        return result\n    }\n\
    \n    def isPrime(n : Long) : Boolean = {\n        if (n == 2) {\n           \
    \ return true\n        } else if (n < 2) {\n            return false\n       \
    \ } else if (n % 2 == 0) {\n            return false\n        } else {\n     \
    \       for (i <- 3 until Math.sqrt(n)) {\n                if (n % i == 0) {\n\
    \                    return false\n                }\n            }\n        \
    \    return true\n        }", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        val result = List[Long]()\n    \
    \    if (n == 0) {\n            return result\n        }\n        val i = n.toLong\n\
    \        while (i > 0) {\n            result = result.append(i)\n            i\
    \ -= 1\n        }\n        return result", "        val result = List[Long]()\n\
    \        for (i <- 0 until n) {\n            val prime = isPrime(i)\n        \
    \    if (prime) {\n                result = result.append(i)\n            }\n\
    \        }\n        return result\n    }\n\n    // Implement a function that takes\
    \ a list of non-negative integers and returns a list of the\n    // first n integers\
    \ that are prime numbers and greater than n.\n    // for example:\n    // >>>\
    \ countUpToGreaterThan((5l))\n    // (List[Long](7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong, 19l.toLong))\n    // >>> countUpToGreaterThan((11l))\n    // (List[Long](13l.toLong,\
    \ 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong))\n    // >>> countUpToGreaterThan((0l))\n\
    \    // (List[Long]())\n    // >>> countUpToGreaterThan((20l))\n    // (List[Long](13l.toLong,\
    \ 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong,\
    \ 43l.toLong, 47l.toLong, 53l.toLong))\n    // >>> countUpToGreaterThan((1l))\n\
    \    // (List[Long]())\n    // >>> countUpToGreaterThan((18l))\n    // (List[Long](13l.toLong,\
    \ 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong,\
    \ 43l.toLong, 47l.toLong, 53l.toLong))\n    def countUpToGreaterThan(n : Long)\
    \ : List[Long] = {\n        val result = List[Long]()\n        for (i <- 0 until\
    \ n) {\n            val prime = isPrime(i)\n            if (prime) {\n       \
    \         result = result.append(i)\n            }\n        }\n        ", "  \
    \      val result = List[Long]()\n        for (i <- 0 until n) {\n           \
    \ val prime = i.isPrime()\n            if (prime) {\n                result +=\
    \ i\n            }\n        }\n        return result", "        val result = List[Long]()\n\
    \        for (i <- 0 until n) {\n            if (isPrime(i)) {\n             \
    \   result = result.append(i)\n            }\n        }\n        return result\n\
    \    }\n\n    def isPrime(n : Long) : Boolean = {\n        if (n == 2) {\n   \
    \         return true\n        } else if (n == 1) {\n            return false\n\
    \        } else if (n % 2 == 0) {\n            return false\n        } else {\n\
    \            for (i <- 3 until Math.sqrt(n)) {\n                if (n % i == 0)\
    \ {\n                    return false\n                }\n            }\n    \
    \        return true\n        }", "        val result = List[Long]()\n       \
    \ for (i <- 0 until n) {\n            if (isPrime(i)) {\n                result\
    \ = result.append(i)\n            }\n        }\n        return result\n    }\n\
    \n    // Implement a function that takes a list of non-negative integers and returns\
    \ a list of the\n    // first n primes.\n    // for example:\n    // >>> primesUpTo((2l,\
    \ 3l, 5l, 7l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong))\n    // >>>\
    \ primesUpTo((2l, 3l, 5l, 7l, 11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l,\
    \ 13l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong,\
    \ 13l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l))\n    //\
    \ (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong, 19l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l,\
    \ 19l, 23l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong,\
    \ 13", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        if (n == 0) {\n            return\
    \ List[Long](())\n        }\n        return List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
    \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
    \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
    \ 97l.toLong, 101l.toLong, 103l.toLong, 107l.toLong, 109l.toLong, 113l.toLong,\
    \ 127l.toLong, 131l.toLong, 137l.toLong, 139l.toLong, 149l.toLong, 151l.toLong,\
    \ 157l.toLong, 163l.toLong, 167l.toLong, 173l.toLong, 179l.toLong, 181l.toLong,\
    \ 191l.toLong, 193l.toLong, 197l.toLong, 199l.toLong, 211l.toLong, 223l.toLong,\
    \ 227l.toLong, 229l.toLong, 233l.toLong, 239l.toLong, 241l.toLong, 251l.toLong,\
    \ 257l.toLong, 263l.toLong, 269l.toLong, 271l.toLong, 277l.toLong, 281l.toLong,\
    \ 283l.toLong, 293l.toLong, 307l.toLong, 311l.toLong, 313l.toLong, 317l.toLong,\
    \ 331l.toLong, 337l.toLong, 347l.toLong, 349l.toLong, 353l.toLong, 359l.toLong,\
    \ 367l.toLong, 373l.toLong, 379l.toLong, 383l.toLong, 389l", "        val result\
    \ = List[Long]()\n        for (i <- 0 until n) {\n            if (isPrime(i))\
    \ {\n                result = result.append(i)\n            }\n        }\n   \
    \     return result\n    }\n\n    // Implement a function that takes a list of\
    \ non-negative integers and returns a list of the\n    // first n primes.\n  \
    \  // for example:\n    // >>> primesUpTo((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong)))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n\
    \    // >>> primesUpTo((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong)))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n\
    \    // >>> primesUpTo((List[Long]()))\n    // (List[Long]())\n    // >>> primesUpTo((List[Long](1l.toLong)))\n\
    \    // (List[Long]())\n    // >>> primesUpTo((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong)))\n  \
    \  // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong, 19l.toLong))\n    def primesUpTo(n : List[Long]) : List[Long] =\
    \ {", "        val result = List[Long]()\n        if (n < 0) {\n            throw\
    \ new IllegalArgumentException(\"n must be non-negative\")\n        }\n      \
    \  if (n == 0) {\n            return result\n        }\n        val i = 0\n  \
    \      while (i < n) {\n            result.append(i)\n            i += 2\n   \
    \         while (i < n && !isPrime(i)) {\n                i += 2\n           \
    \ }\n        }\n        return result\n    }\n\n    // Returns true if n is prime.\n\
    \    def isPrime(n : Long) : Boolean = {\n        if (n < 2) {\n            return\
    \ false\n        }\n        if (n == 2) {\n            return true\n        }\n\
    \        if (n % 2 == 0) {\n            return false\n        }\n        if (n\
    \ < 4) {\n            return true\n        }\n        if (n % 2 == 0) {\n    \
    \        return false\n        }\n        if (n < 9) {\n            return true\n\
    \        }\n        if (n % 3 == 0) {\n            return false\n        }\n \
    \       if (n < 27) {\n            return true\n        }\n        if (n % 3 ==\
    \ 0) {\n            return false\n        }\n        if (n < 31) {\n         \
    \   return true\n        }\n        if (n % 5 == 0) {\n            return false\n\
    \        }\n        if (n < 61) {\n            return true\n        }\n      \
    \  if (n % 5 == 0) {\n            return false\n        }\n        if (n < 91)\
    \ {\n            return true\n        }\n        if (n % 7 == 0) {\n         \
    \   return false\n        }\n        if (n < 121) {\n            return true\n\
    \        }\n        if (n % 7 == 0) {\n            return false\n        }\n \
    \       if (n < 169) {\n            return true\n        }\n        if (n % 11\
    \ == 0) {\n            return false\n        }\n        if (n < 241) {\n     \
    \       return true\n        }\n        if (n % 11 == 0) {\n            return\
    \ false\n        }\n        if (n < 361) {\n            return true\n        }\n\
    \        ", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        val result = List[Long]()\n    \
    \    for (i <- 0 until n) {\n            if (isPrime(i)) {\n                result\
    \ = result.append(i)\n            }\n        }\n        return result\n    }\n\
    \n    // Returns true if the given number is prime.\n    def isPrime(n : Long)\
    \ : Boolean = {\n        if (n < 2) {\n            return false\n        }\n \
    \       if (n == 2) {\n            return true\n        }\n        if (n % 2 ==\
    \ 0) {\n            return false\n        }\n        for (i <- 3 until Math.sqrt(n))\
    \ {\n            if (n % i == 0) {\n                return false\n           \
    \ }\n        }\n        return true", "        val result = List[Long]()\n   \
    \     for (i <- 0 until n) {\n            if (isPrime(i)) {\n                result\
    \ = result.append(i)\n            }\n        }\n        return result\n    }\n\
    \n    def isPrime(n : Long) : Boolean = {\n        if (n == 2) {\n           \
    \ return true\n        } else if (n < 2) {\n            return false\n       \
    \ } else if (n % 2 == 0) {\n            return false\n        } else {\n     \
    \       for (i <- 3 until Math.sqrt(n)) {\n                if (n % i == 0) {\n\
    \                    return false\n                }\n            }\n        \
    \    return true\n        }", "        val result = List[Long]()\n        for\
    \ (i <- 0 until n) {\n            if (isPrime(i)) {\n                result =\
    \ result.append(i)\n            }\n        }\n        return result\n    }\n\n\
    \    // Implement a function that takes a list of non-negative integers and returns\
    \ a list of the\n    // first n primes.\n    // for example:\n    // >>> primesUpTo((2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    // >>> primesUpTo((2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n   \
    \ // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n\
    \    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l, 31l))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong, 19l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l,\
    \ 19l, 23l, 29l, 31l, 37l))\n    // (List[Long](2l.", "        var result = List[Long](0)\n\
    \        for (i <- 0 until n) {\n            if (isPrime(i)) {\n             \
    \   result = result.append(i)\n            }\n        }\n        return result\n\
    \    }\n\n    def isPrime(n : Long) : Boolean = {\n        if (n == 2) {\n   \
    \         return true\n        } else if (n < 2) {\n            return false\n\
    \        } else if (n % 2 == 0) {\n            return false\n        } else {\n\
    \            for (i <- 3 until Math.sqrt(n)) {\n                if (n % i == 0)\
    \ {\n                    return false\n                }\n            }\n    \
    \        return true\n        }", "        if (n < 0) {\n            throw new\
    \ IllegalArgumentException(\"n must be non-negative\")\n        }\n        val\
    \ result = mutable.List[Long]()\n        for (i <- 0 until n) {\n            if\
    \ (isPrime(i)) {\n                result.append(i)\n            }\n        }\n\
    \        return result\n    }\n\n    def isPrime(n : Long) : Boolean = {\n   \
    \     if (n < 2) {\n            return false\n        }\n        if (n == 2) {\n\
    \            return true\n        }\n        if (n % 2 == 0) {\n            return\
    \ false\n        }\n        for (i <- 3 until Math.sqrt(n)) {\n            if\
    \ (n % i == 0) {\n                return false\n            }\n        }\n   \
    \     return true", "        val result = List[Long]()\n        for (i <- 0 until\
    \ n) {\n            val prime = isPrime(i)\n            if (prime) {\n       \
    \         result = result.append(i)\n            }\n        }\n        return\
    \ result", "        val result = List[Long]()\n        val i = 0\n        while\
    \ (i < n) {\n            val prime = isPrime(i)\n            if (prime) {\n  \
    \              result = result.append(i)\n            }\n            i += 1\n\
    \        }\n        return result\n    }\n\n    // Implement a function that takes\
    \ a non-negative integer and returns a list of the first n\n    // integers that\
    \ are prime numbers and less than n.\n    // for example:\n    // >>> countUpTo((5l))\n\
    \    // (List[Long](2l.toLong, 3l.toLong))\n    // >>> countUpTo((11l))\n    //\
    \ (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n\
    \    // >>> countUpTo((1l))\n    // (List[Long]())\n    // >>> countUpTo((18l))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong))\n    def countUpTo(n : Long) : List[Long] = {\n        val result\
    \ = List[Long]()\n        val i = 0\n        while (i < n) {\n            val\
    \ prime = isPrime(i)\n            if (prime) {\n                result = result.append(i)\n\
    \            }\n            i += 1\n        }\n        return result\n    }\n\n\
    \    // Implement a function that takes a non-negative integer and returns a list\
    \ of the first n\n    // integers that are prime numbers and less than n.\n  \
    \  // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    ", "        val result = List[Long]()\n        for (i <- 0\
    \ until n) {\n            if (isPrime(i)) {\n                result += i\n   \
    \         }\n        }\n        return result\n    }\n\n    // Implement a function\
    \ that takes a list of non-negative integers and returns a list of the\n    //\
    \ first n primes.\n    // for example:\n    // >>> primesUpTo((2l, 3l, 5l, 7l))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))\n    // >>> primesUpTo((2l,\
    \ 3l, 5l, 7l, 11l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong))\n    // >>> primesUpTo((2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    // >>> primesUpTo((2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> primesUpTo((2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong,", "        if (n < 0) {\n            throw\
    \ new IllegalArgumentException(\"n must be non-negative\")\n        }\n      \
    \  val result = List[Long]()\n        for (i <- 0 until n) {\n            if (isPrime(i))\
    \ {\n                result = result.append(i)\n            }\n        }\n   \
    \     return result\n    }\n\n    def isPrime(n : Long) : Boolean = {\n      \
    \  if (n < 2) {\n            return false\n        } else if (n == 2) {\n    \
    \        return true\n        } else if (n % 2 == 0) {\n            return false\n\
    \        } else {\n            for (i <- 3 until Math.sqrt(n)) {\n           \
    \     if (n % i == 0) {\n                    return false\n                }\n\
    \            }\n            return true\n        }", "        val result = List[Long]()\n\
    \        for (i <- 0 until n) {\n            if (isPrime(i)) {\n             \
    \   result = result.append(i)\n            }\n        }\n        return result\n\
    \    }\n\n    def isPrime(n : Long) : Boolean = {\n        if (n == 2) {\n   \
    \         return true\n        } else if (n < 2) {\n            return false\n\
    \        } else if (n % 2 == 0) {\n            return false\n        } else {\n\
    \            for (i <- 3 until Math.sqrt(n)) {\n                if (n % i == 0)\
    \ {\n                    return false\n                }\n            }\n    \
    \        return true\n        }", "        val result = List[Long]()\n       \
    \ for (i <- 0 until n) {\n            if (isPrime(i)) {\n                result\
    \ = result.append(i)\n            }\n        }\n        return result\n    }\n\
    \n    // Implement a function that takes a list of non-negative integers and returns\
    \ a list of the\n    // first n integers that are prime numbers and greater than\
    \ n.\n    // for example:\n    // >>> countUpToGreaterThan((5l))\n    // (List[Long](6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))\n    // >>> countUpToGreaterThan((11l))\n\
    \    // (List[Long](13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong))\n\
    \    // >>> countUpToGreaterThan((0l))\n    // (List[Long]())\n    // >>> countUpToGreaterThan((20l))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong))\n    // >>> countUpToGreaterThan((1l))\n\
    \    // (List[Long]())\n    // >>> countUpToGreaterThan((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong))\n    def countUpToGreaterThan(n : Long) : List[Long] = {\n    \
    \    val result = List[Long]()\n        for (i <- 0 until n) {\n            if\
    \ (isPrime(i)) {\n                result = result.append(i)\n            }\n \
    \       }\n        return result\n    }\n\n    // Implement a function that takes\
    \ a list of non-negative integers and returns a list of the\n    // first n integers\
    \ that are prime numbers and less", "        val result = List[Long]()\n     \
    \   if (n < 0) {\n            return result\n        }\n        for (i <- 0 until\
    \ n) {\n            if (isPrime(i)) {\n                result += i\n         \
    \   }\n        }\n        return result", "        if (n < 0) {\n            throw\
    \ new IllegalArgumentException(\"n must be non-negative\")\n        }\n      \
    \  val result = List[Long]()\n        for (i <- 0 until n) {\n            if (isPrime(i))\
    \ {\n                result = result.append(i)\n            }\n        }\n   \
    \     return result\n    }\n\n    def isPrime(n : Long) : Boolean = {\n      \
    \  if (n < 2) {\n            return false\n        } else if (n == 2) {\n    \
    \        return true\n        } else if (n % 2 == 0) {\n            return false\n\
    \        } else {\n            for (i <- 3 until Math.sqrt(n)) {\n           \
    \     if (n % i == 0) {\n                    return false\n                }\n\
    \            }\n            return true\n        }", "        val result = List[Long]()\n\
    \        for (i <- 0 until n) {\n            if (isPrime(i)) {\n             \
    \   result = result.append(i)\n            }\n        }\n        return result\n\
    \    }\n\n    // Implement a function that takes a non-negative integer and returns\
    \ the number of prime numbers\n    // less than or equal to that integer.\n  \
    \  // for example:\n    // >>> countPrimes(0l)\n    // 0\n    // >>> countPrimes(1l)\n\
    \    // 0\n    // >>> countPrimes(2l)\n    // 1\n    // >>> countPrimes(3l)\n\
    \    // 2\n    // >>> countPrimes(4l)\n    // 3\n    // >>> countPrimes(5l)\n\
    \    // 4\n    // >>> countPrimes(6l)\n    // 5\n    // >>> countPrimes(7l)\n\
    \    // 6\n    // >>> countPrimes(8l)\n    // 7\n    // >>> countPrimes(9l)\n\
    \    // 8\n    // >>> countPrimes(10l)\n    // 9\n    // >>> countPrimes(11l)\n\
    \    // 10\n    // >>> countPrimes(12l)\n    // 11\n    // >>> countPrimes(13l)\n\
    \    // 12\n    // >>> countPrimes(14l)\n    // 13\n    // >>> countPrimes(15l)\n\
    \    // 14\n    // >>> countPrimes(16l)\n    // 15\n    // >>> countPrimes(17l)\n\
    \    // 16\n    // >>> countPrimes(18l)\n    // 17\n    // >>> countPrimes(19l)\n\
    \    // 18\n    // >>> countPrimes(20l)\n    // 19\n    // >>> countPrimes(21l)\n\
    \    // 20\n    def countPrimes(n : Long) : Long = {\n        val result = 0l\n\
    \        for (i <- 0 until n) {\n            if (isPrime(i)) {\n             \
    \   result += 1l\n            }\n        }\n        return result\n    }\n\n \
    \   // Implement a function that takes a non-negative integer and returns the\
    \ number of prime numbers\n    // greater than or equal to that integer", "  \
    \      if (n < 0) {\n            throw new IllegalArgumentException(\"n must be\
    \ non-negative\")\n        }\n        val result = List[Long]()\n        for (i\
    \ <- 0 until n) {\n            if (isPrime(i)) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result\n    }\n\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n < 2) {\n            return false\n      \
    \  }\n        if (n == 2) {\n            return true\n        }\n        if (n\
    \ % 2 == 0) {\n            return false\n        }\n        for (i <- 3 until\
    \ Math.sqrt(n)) {\n            if (n % i == 0) {\n                return false\n\
    \            }\n        }\n        return true", "        if (n < 0) {\n     \
    \       throw new IllegalArgumentException(\"n must be non-negative\")\n     \
    \   }\n        val result = List[Long]()\n        for (i <- 0 until n) {\n   \
    \         val prime = isPrime(i)\n            if (prime) {\n                result\
    \ = result.append(i)\n            }\n        }\n        return result\n    }\n\
    \n    // Returns true if the given integer is prime.\n    def isPrime(n : Long)\
    \ : Boolean = {\n        if (n < 2) {\n            return false\n        }\n \
    \       if (n == 2) {\n            return true\n        }\n        if (n % 2 ==\
    \ 0) {\n            return false\n        }\n        val max = scala.math.BigInt(n)\n\
    \        val maxDivisor = scala.math.BigInt(3)\n        while (maxDivisor.compareTo(max)\
    \ <= 0) {\n            if (max % maxDivisor == 0) {\n                return false\n\
    \            }\n            maxDivisor = maxDivisor.add(scala.math.BigInt(2))\n\
    \        }\n        return true", "        val result = List[Long]()\n       \
    \ if (n < 0) {\n            return result\n        }\n        val i = 0\n    \
    \    while (i < n) {\n            if (isPrime(i)) {\n                result =\
    \ result.append(i)\n            }\n            i = i + 1\n        }\n        return\
    \ result", "        val result = List[Long]()\n        for (i <- 0 until n) {\n\
    \            if (isPrime(i)) {\n                result = result.append(i)\n  \
    \          }\n        }\n        return result\n    }\n\n    // Implement a function\
    \ that takes a list of non-negative integers and returns a list of the\n    //\
    \ first n primes.\n    // for example:\n    // >>> primesUpTo((2l, 3l, 5l, 7l))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong))\n    // >>> primesUpTo((2l,\
    \ 3l, 5l, 7l, 11l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong))\n    // >>> primesUpTo((2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    // >>> primesUpTo((2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> primesUpTo((2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13", "        val result = List[Long]()\n\
    \        for (i <- 0 until n) {\n            if (isPrime(i)) {\n             \
    \   result = result.append(i)\n            }\n        }\n        return result\n\
    \    }\n\n    def isPrime(n : Long) : Boolean = {\n        if (n == 2) {\n   \
    \         return true\n        } else if (n < 2) {\n            return false\n\
    \        } else if (n % 2 == 0) {\n            return false\n        } else {\n\
    \            for (i <- 3 until Math.sqrt(n)) {\n                if (n % i == 0)\
    \ {\n                    return false\n                }\n            }\n    \
    \        return true\n        }", "        val result = List[Long]()\n       \
    \ for (i <- 0 until n) {\n            if (isPrime(i)) {\n                result\
    \ = result.append(i)\n            }\n        }\n        return result\n    }\n\
    \n    def isPrime(n : Long) : Boolean = {\n        if (n == 2) {\n           \
    \ return true\n        } else if (n < 2) {\n            return false\n       \
    \ } else if (n % 2 == 0) {\n            return false\n        } else {\n     \
    \       for (i <- 3 until Math.sqrt(n)) {\n                if (n % i == 0) {\n\
    \                    return false\n                }\n            }\n        \
    \    return true\n        }", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        val result = List[Long]()\n    \
    \    for (i <- 0 until n) {\n            val prime = isPrime(i)\n            if\
    \ (prime) {\n                result = result.append(i)\n            }\n      \
    \  }\n        return result\n    }\n\n    // Implement a function that takes a\
    \ non-negative integer and returns a list of the first n\n    // integers that\
    \ are prime numbers and greater than n.\n    // for example:\n    // >>> countUpToGreaterThan((5l))\n\
    \    // (List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))\n    // >>> countUpToGreaterThan((11l))\n\
    \    // (List[Long](13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong))\n\
    \    // >>> countUpToGreaterThan((0l))\n    // (List[Long]())\n    // >>> countUpToGreaterThan((20l))\n\
    \    // (List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong))\n    // >>> countUpToGreaterThan((1l))\n\
    \    // (List[Long]())\n    // >>> countUpToGreaterThan((18l))\n    // (List[Long](13l.toLong,\
    \ 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong))\n    // >>> countUpToGreaterThan((1l))\n\
    \    // (List[Long]())\n    def countUpToGreaterThan(n : Long) : List[Long] =\
    \ {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n\
    \ must be non-negative\")\n        }\n        val result = List[Long]()\n    \
    \    for (i <- 0 until n) {\n            val prime =", "        if (n < 0) {\n\
    \            throw new IllegalArgumentException(\"n must be non-negative\")\n\
    \        }\n        val result = List[Long]()\n        var i = 2L\n        while\
    \ (i <= n) {\n            if (isPrime(i)) {\n                result = result.append(i)\n\
    \            }\n            i = i + 1L\n        }\n        return result\n   \
    \ }\n\n    // Implement a function that takes a list of non-negative integers\
    \ and returns a list of the\n    // first n prime numbers.\n    // for example:\n\
    \    // >>> primesUpTo((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong)))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n\
    \    // >>> primesUpTo((List[Long]()))\n    // (List[Long]())\n    // >>> primesUpTo((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong, 19l.toLong))\n    // >>> primesUpTo((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong, 19l.toLong))\n    ", "        val result = List[Long]()\n      \
    \  for (i <- 0 until n) {\n            if (isPrime(i)) {\n                result\
    \ = result.append(i)\n            }\n        }\n        return result\n    }\n\
    \n    def isPrime(n : Long) : Boolean = {\n        if (n == 0) {\n           \
    \ return false\n        } else if (n == 1) {\n            return true\n      \
    \  } else if (n < 4) {\n            return false\n        } else if (n % 2 ==\
    \ 0) {\n            return false\n        } else if (n % 3 == 0) {\n         \
    \   return false\n        } else {\n            for (i <- 4 until Math.sqrt(n))\
    \ {\n                if (n % i == 0) {\n                    return false\n   \
    \             }\n            }\n            return true\n        }", "       \
    \ if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    )\n        }\n        val result = List[Long]()\n        for (i <- 0 until n)\
    \ {\n            if (isPrime(i)) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result\n    }\n\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n < 2) {\n            return false\n      \
    \  }\n        if (n == 2) {\n            return true\n        }\n        if (n\
    \ % 2 == 0) {\n            return false\n        }\n        for (i <- 3 until\
    \ Math.sqrt(n)) {\n            if (n % i == 0) {\n                return false\n\
    \            }\n        }\n        return true", "        val result = List[Long]()\n\
    \        for (i <- 0 until n) {\n            if (isPrime(i)) {\n             \
    \   result += i\n            }\n        }\n        return result\n    }\n\n  \
    \  // Implement a function that takes a non-negative integer and returns a list\
    \ of the first n\n    // integers that are prime numbers and less than n.\n  \
    \  // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val result = List[Long]()\n  \
    \      for (i <- 0 until n) {\n            if (isPrime(i)) {\n               \
    \ result += i\n            }\n        }\n        return result\n    }\n\n    //\
    \ Implement a function that takes a non-negative integer and returns a list of\
    \ the first n\n    // integers that are prime numbers and less than n.\n    //\
    \ for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong, 3l.toLong))\n\
    \    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))\n", "        val result = List[Long]()\n        for (i <- 0 until\
    \ n) {\n            if (isPrime(i)) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result\n    }\n\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 2) {\n            return true\n      \
    \  } else if (n < 2) {\n            return false\n        } else if (n % 2 ==\
    \ 0) {\n            return false\n        } else {\n            for (i <- 3 until\
    \ Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return\
    \ false\n                }\n            }\n            return true\n        }",
  "        val result = List[Long]()\n        for (i <- 0 until n) {\n           \
    \ if (isPrime(i)) {\n                result = result.append(i)\n            }\n\
    \        }\n        return result\n    }\n\n    def isPrime(n : Long) : Boolean\
    \ = {\n        if (n == 2) {\n            return true\n        } else if (n <\
    \ 2) {\n            return false\n        } else if (n % 2 == 0) {\n         \
    \   return false\n        } else {\n            for (i <- 3 until Math.sqrt(n))\
    \ {\n                if (n % i == 0) {\n                    return false\n   \
    \             }\n            }\n            return true\n        }", "       \
    \ if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    )\n        }\n        if (n == 0) {\n            return Nil()\n        }\n   \
    \     return List(2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l, 31l, 37l, 41l,\
    \ 43l, 47l, 53l, 59l, 61l, 67l, 71l, 73l, 79l, 83l, 89l, 97l, 101l, 103l, 107l,\
    \ 109l, 113l, 127l, 131l, 137l, 139l, 149l, 151l, 157l, 163l, 167l, 173l, 179l,\
    \ 181l, 191l, 193l, 197l, 199l, 211l, 223l, 227l, 229l, 233l, 239l, 241l, 251l,\
    \ 257l, 263l, 269l, 271l, 277l, 281l, 283l, 293l, 307l, 311l, 313l, 317l, 331l,\
    \ 337l, 347l, 349l, 353l, 359l, 367l, 373l, 379l, 383l, 389l, 397l, 401l, 409l,\
    \ 419l, 421l, 431l, 433l, 439l, 443l, 449l, 457l, 461l, 463l, 467l, 479l, 487l,\
    \ 491l, 499l, 503l, 509l, 521l, 523l, 541l, 547l, 557l, 563l, 569l, 571l, 577l,\
    \ 587l, 589l, 593l, 599l, 601l, 607l, 613l, 617l, 619l, 631l, 641l, 643l, 647l,\
    \ 653l, 659l, 661l, 673l, 677l, 683l, 691l, 701l, 709l, 719l, 727l, 733l, 739l,\
    \ 743l, 751l, 757l, 761l, 769l, 773l", "        val result = List[Long]()\n  \
    \      for (i <- 0 until n) {\n            val prime = i\n            if (prime.isPrime())\
    \ {\n                result = result.append(prime)\n            }\n        }\n\
    \        return result", "        val result = List[Long]()\n        for(i <-\
    \ 0 until n) {\n            if(isPrime(i)) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result\n    }\n\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if(n == 2) {\n            return true\n       \
    \ } else if(n < 2) {\n            return false\n        } else if(n % 2 == 0)\
    \ {\n            return false\n        } else {\n            for(i <- 3 until\
    \ Math.sqrt(n)) {\n                if(n % i == 0) {\n                    return\
    \ false\n                }\n            }\n            return true\n        }",
  "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be\
    \ non-negative\")\n        }\n        val result = List[Long]()\n        for (i\
    \ <- 0 until n) {\n            if (isPrime(i)) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result\n    }\n\n    // Implement a\
    \ function that takes a list of non-negative integers and returns a list of the\n\
    \    // first n prime numbers.\n    // for example:\n    // >>> primeNumbersUpTo((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong, 19l.toLong))\n    // >>> primeNumbersUpTo((List[Long]()))\n    //\
    \ (List[Long]())\n    // >>> primeNumbersUpTo((List[Long](1l.toLong)))\n    //\
    \ (List[Long]())\n    // >>> primeNumbersUpTo((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong)))\n  \
    \  // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong, 19l.toLong))\n    def primeNumbersUpTo(numbers : List[Long]) : List[Long]\
    \ = {\n        if (numbers.isEmpty()) {\n            return List[Long]()\n   \
    \     }\n        val result = List[Long]()\n        for (i <- 0 until numbers.size)\
    \ {\n            if (isPrime(numbers.get(i))) {\n                result = result.append(numbers.get(i))\n\
    \            }\n        }\n        return result\n    }", "        var result\
    \ = List[Long]()\n        var i = 0l\n        while (i < n) {\n            result\
    \ = result.append(i)\n            i = i + 1l\n        }\n        return result",
  "        val result = List[Long]()\n        for (i <- 0 until n) {\n           \
    \ if (isPrime(i)) {\n                result += i\n            }\n        }\n \
    \       return result\n    }\n\n    // Returns true if the given number is prime.\n\
    \    def isPrime(n : Long) : Boolean = {\n        if (n == 2) {\n            return\
    \ true\n        } else if (n < 2) {\n            return false\n        } else\
    \ if (n % 2 == 0) {\n            return false\n        } else {\n            for\
    \ (i <- 3 until n) {\n                if (n % i == 0) {\n                    return\
    \ false\n                }\n            }\n            return true\n        }",
  "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be\
    \ non-negative\")\n        }\n        val result = List[Long]()\n        for (i\
    \ <- 0 until n) {\n            if (isPrime(i)) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result\n    }\n\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n < 2) {\n            return false\n      \
    \  } else if (n == 2) {\n            return true\n        } else if (n % 2 ==\
    \ 0) {\n            return false\n        } else {\n            for (i <- 3 until\
    \ Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return\
    \ false\n                }\n            }\n            return true\n        }",
  "        val result = List[Long]()\n        for (i <- 0 until n) {\n           \
    \ if (isPrime(i)) {\n                result = result.append(i)\n            }\n\
    \        }\n        return result\n    }\n\n    def isPrime(n : Long) : Boolean\
    \ = {\n        if (n == 2) {\n            return true\n        } else if (n <\
    \ 2) {\n            return false\n        } else if (n % 2 == 0) {\n         \
    \   return false\n        } else {\n            for (i <- 3 until Math.sqrt(n))\
    \ {\n                if (n % i == 0) {\n                    return false\n   \
    \             }\n            }\n            return true\n        }", "       \
    \ val result = List[Long]()\n        for (i <- 0 until n) {\n            if (isPrime(i))\
    \ {\n                result = result.append(i)\n            }\n        }\n   \
    \     return result\n    }\n\n    // Implement a function that takes a non-negative\
    \ integer and returns a list of the first n\n    // integers that are prime numbers\
    \ and greater than n.\n    // for example:\n    // >>> countUpToGreaterThan((5l))\n\
    \    // (List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))\n    // >>> countUpToGreaterThan((11l))\n\
    \    // (List[Long](13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong))\n\
    \    // >>> countUpToGreaterThan((0l))\n    // (List[Long]())\n    // >>> countUpToGreaterThan((20l))\n\
    \    // (List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong))\n    // >>> countUpToGreaterThan((1l))\n\
    \    // (List[Long]())\n    // >>> countUpToGreaterThan((18l))\n    // (List[Long](13l.toLong,\
    \ 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong))\n    def countUpToGreaterThan(n\
    \ : Long) : List[Long] = {\n        val result = List[Long]()\n        for (i\
    \ <- n + 1 until n) {\n            if (isPrime(i)) {\n                result =\
    \ result.append(i)\n            }\n        }\n        return result\n    }\n\n\
    \    // Implement a function that takes a non-negative integer and returns a list\
    \ of the first n\n    // integers that are prime numbers and less than or equal\
    \ to n.\n    // for example:\n    // >>> countUpToLessThan((5l))", "        if\
    \ (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    )\n        }\n        val result = List[Long]()\n        if (n == 0) {\n     \
    \       return result\n        }\n        val i = 0\n        while (i < n) {\n\
    \            val prime = isPrime(i)\n            if (prime) {\n              \
    \  result = result.append(i)\n            }\n            i = i + 1\n        }\n\
    \        return result\n    }\n\n    // Returns true if the given number is prime.\n\
    \    def isPrime(n : Long) : Boolean = {\n        if (n < 2) {\n            return\
    \ false\n        }\n        if (n == 2) {\n            return true\n        }\n\
    \        if (n % 2 == 0) {\n            return false\n        }\n        val max\
    \ = scala.math.Long.max(n - 1, 2)\n        val i = 3\n        while (i <= max)\
    \ {\n            if (n % i == 0) {\n                return false\n           \
    \ }\n            i = i + 2\n        }\n        return true", "        if (n <\
    \ 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    )\n        }\n        val result = List[Long]()\n        for (i <- 0 until n)\
    \ {\n            if (isPrime(i)) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result\n    }\n\n    // Implement a\
    \ function that takes a list of non-negative integers and returns a list of the\n\
    \    // first n prime numbers that are less than n.\n    // for example:\n   \
    \ // >>> primesUpTo((2l, 3l, 5l, 7l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l))\n    //\
    \ (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong))\n    //\
    \ >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong))\n    // >>> primesUpTo((2l, 3l,\
    \ 5l, 7l, 11l, 13l, 17l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    // >>> primesUpTo((2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> primesUpTo((2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l))", "        var result = List[Long]()\n\
    \        for (i <- 0 until n) {\n            if (isPrime(i)) {\n             \
    \   result = result.append(i)\n            }\n        }\n        return result\n\
    \    }\n\n    def isPrime(n : Long) : Boolean = {\n        if (n == 2) {\n   \
    \         return true\n        } else if (n == 1) {\n            return false\n\
    \        } else if (n % 2 == 0) {\n            return false\n        } else {\n\
    \            for (i <- 3 until Math.sqrt(n)) {\n                if (n % i == 0)\
    \ {\n                    return false\n                }\n            }\n    \
    \        return true\n        }", "        val result = List[Long]()\n       \
    \ if (n < 0) {\n            return result\n        }\n        for (i <- 0 until\
    \ n) {\n            if (isPrime(i)) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result\n    }\n\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 2) {\n            return true\n      \
    \  }\n        if (n < 2) {\n            return false\n        }\n        if (n\
    \ % 2 == 0) {\n            return false\n        }\n        for (i <- 3 until\
    \ Math.sqrt(n)) {\n            if (n % i == 0) {\n                return false\n\
    \            }\n        }\n        return true", "        if (n < 0) {\n     \
    \       throw new IllegalArgumentException(\"n must be non-negative\")\n     \
    \   }\n        if (n == 0) {\n            return List[Long]()\n        }\n   \
    \     val result = List[Long]()\n        result.append(2l)\n        result.append(3l)\n\
    \        for (i <- 1l) {\n            if (n < i) {\n                return result\n\
    \            }\n            val prime = isPrime(i)\n            if (prime) {\n\
    \                result.append(i)\n            }\n        }\n        return result\n\
    \    }\n\n    // Returns true if the given number is prime.\n    def isPrime(n\
    \ : Long) : Boolean = {\n        if (n < 2) {\n            return false\n    \
    \    }\n        if (n == 2) {\n            return true\n        }\n        if\
    \ (n % 2 == 0) {\n            return false\n        }\n        for (i <- 3l) {\n\
    \            if (n % i == 0) {\n                return false\n            }\n\
    \        }\n        return true", "        val result = List[Long]()\n       \
    \ if (n < 0) {\n            return result\n        }\n        val i = 0\n    \
    \    while (i < n) {\n            if (isPrime(i)) {\n                result =\
    \ result.append(i)\n            }\n            i += 1\n        }\n        return\
    \ result", "        val result = List[Long]()\n        if (n < 0) {\n        \
    \    result = List[Long]()\n        } else if (n == 0) {\n            result =\
    \ List[Long]()\n        } else {\n            val i = 0\n            while (i\
    \ < n) {\n                val prime = i + 1\n                val j = i + 1\n \
    \               while (j < n) {\n                    if (prime % j == 0) {\n \
    \                       j = n\n                    } else {\n                \
    \        j += 1\n                    }\n                }\n                result\
    \ = result.append(prime)\n                i += 1\n            }\n        }\n \
    \       return result", "        val result = List[Long]()\n        for (i <-\
    \ 0 until n) {\n            if (isPrime(i)) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result\n    }\n\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 2) {\n            return true\n      \
    \  } else if (n < 2) {\n            return false\n        } else if (n % 2 ==\
    \ 0) {\n            return false\n        } else {\n            for (i <- 3 until\
    \ Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return\
    \ false\n                }\n            }\n            return true\n        }",
  "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be\
    \ non-negative\")\n        }\n        val result = List[Long]()\n        for (i\
    \ <- 0 until n) {\n            if (isPrime(i)) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result\n    }\n\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n < 2) {\n            return false\n      \
    \  }\n        if (n == 2) {\n            return true\n        }\n        if (n\
    \ % 2 == 0) {\n            return false\n        }\n        if (n < 4) {\n   \
    \         return true\n        }\n        if (n % 2 == 0) {\n            return\
    \ false\n        }\n        if (n < 9) {\n            return true\n        }\n\
    \        if (n % 3 == 0) {\n            return false\n        }\n        if (n\
    \ < 27) {\n            return true\n        }\n        if (n % 3 == 0) {\n   \
    \         return false\n        }\n        if (n < 31) {\n            return true\n\
    \        }\n        if (n % 5 == 0) {\n            return false\n        }\n \
    \       if (n < 61) {\n            return true\n        }\n        if (n % 5 ==\
    \ 0) {\n            return false\n        }\n        if (n < 91) {\n         \
    \   return true\n        }\n        if (n % 7 == 0) {\n            return false\n\
    \        }\n        if (n < 127) {\n            return true\n        }\n     \
    \   if (n % 7 == 0) {\n            return false\n        }\n        if (n < 181)\
    \ {\n            return true\n        }\n        if (n % 11 == 0) {\n        \
    \    return false\n        }\n        if (n < 251) {\n            return true\n\
    \        }\n        if (n % 11 == 0) {\n            return false\n        }\n\
    \        if (n < 383) {\n            return true\n        }\n        if (n % 13\
    \ == 0) {\n            return false\n        }\n        if (n < 521) {\n     \
    \       return true\n        }\n        if (n % 13 == 0)", "        val result\
    \ = List[Long]()\n        for (i <- 0 until n) {\n            if (isPrime(i))\
    \ {\n                result = result.append(i)\n            }\n        }\n   \
    \     return result\n    }\n\n    def isPrime(n : Long) : Boolean = {\n      \
    \  if (n == 2) {\n            return true\n        } else if (n < 2) {\n     \
    \       return false\n        } else if (n % 2 == 0) {\n            return false\n\
    \        } else {\n            for (i <- 3 until Math.sqrt(n)) {\n           \
    \     if (n % i == 0) {\n                    return false\n                }\n\
    \            }\n            return true\n        }", "        if (n < 0) {\n \
    \           throw new IllegalArgumentException(\"n must be non-negative\")\n \
    \       }\n        val result = List[Long]()\n        val i = 0l\n        while\
    \ (i < n) {\n            val prime = i + 1l\n            val isPrime = isPrime(prime)\n\
    \            if (isPrime) {\n                result = result.append(prime)\n \
    \           }\n            i = i + 1l\n        }\n        return result\n    }\n\
    \n    // Implement a function that takes a list of non-negative integers and returns\
    \ a list of the\n    // first n prime numbers.\n    // for example:\n    // >>>\
    \ primesUpTo((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong,\
    \ 13l.toLong, 17l.toLong, 19l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n   \
    \ // >>> primesUpTo((List[Long]()))\n    // (List[Long]())\n    // >>> primesUpTo((List[Long](1l.toLong)))\n\
    \    // (List[Long]())\n    // >>> primesUpTo((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong)))\n  \
    \  // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong, 19l.toLong))\n    // >>> primesUpTo((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong)))\n\
    \    // (List[Long](2l.to", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        val result = List[Long]()\n    \
    \    val i = 0\n        while (i < n) {\n            if (isPrime(i)) {\n     \
    \           result = result.append(i)\n            }\n            i = i + 1\n\
    \        }\n        return result\n    }\n\n    // Implement a function that takes\
    \ a list of non-negative integers and returns a list of the\n    // first n primes.\n\
    \    // for example:\n    // >>> primesUpTo((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    // >>> primesUpTo((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong))\n    // >>> primesUpTo((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong)))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong))\n    // >>> primesUpTo((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong)))\n   \
    \ // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong))\n    // >>> primesUpTo((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong,", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        val result = List[Long]()\n    \
    \    if (n == 0) {\n            return result\n        }\n        val i = n\n\
    \        while (i > 0) {\n            result.append(i)\n            i -= 1\n \
    \       }\n        return result", "        if (n < 0) {\n            throw new\
    \ IllegalArgumentException(\"n must be non-negative\")\n        }\n        val\
    \ result = List[Long]()\n        for (i <- 0 until n) {\n            if (isPrime(i))\
    \ {\n                result = result.append(i)\n            }\n        }\n   \
    \     return result\n    }\n\n    // Implement a function that takes a list of\
    \ non-negative integers and returns the sum of the\n    // integers in the list.\n\
    \    // for example:\n    // >>> sumUpTo([1, 2, 3])\n    // 6\n    // >>> sumUpTo([1,\
    \ 2, 3, 4])\n    // 10\n    // >>> sumUpTo([1, 2, 3, 4, 5])\n    // 15\n    //\
    \ >>> sumUpTo([1, 2, 3, 4, 5, 6])\n    // 21\n    // >>> sumUpTo([1, 2, 3, 4,\
    \ 5, 6, 7])\n    // 28\n    // >>> sumUpTo([1, 2, 3, 4, 5, 6, 7, 8])\n    // 36\n\
    \    // >>> sumUpTo([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    // 45\n    // >>> sumUpTo([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    // 55\n    // >>> sumUpTo([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11])\n    // 66\n    // >>> sumUpTo([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12])\n    // 78\n    // >>> sumUpTo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13])\n    // 91\n    // >>> sumUpTo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14])\n    // 105\n    // >>> sumUpTo([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15])\n    // 126\n    // >>> sumUp", "        val result\
    \ = List[Long]()\n        for (i <- 0 until n) {\n            if (isPrime(i))\
    \ {\n                result += i\n            }\n        }\n        return result\n\
    \    }\n\n    // Implement a function that takes a non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ countUpTo(n : Long) : List[Long] = {\n        val result = List[Long]()\n  \
    \      for (i <- 0 until n) {\n            if (isPrime(i)) {\n               \
    \ result += i\n            }\n        }\n        return result\n    }\n\n    //\
    \ Implement a function that takes a non-negative integer and returns a list of\
    \ the first n\n    // integers that are prime numbers and less than n.\n    //\
    \ for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong, 3l.toLong))\n\
    \    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong))\n", "        val result = List[Long]()\n        val i = 0\n    \
    \    while (i < n) {\n            val prime = isPrime(i)\n            if (prime)\
    \ {\n                result = result.append(i)\n            }\n            i =\
    \ i + 1\n        }\n        return result\n    }\n\n    def isPrime(n : Long)\
    \ : Boolean = {\n        val result = false\n        val i = 2\n        while\
    \ (i < n) {\n            if (n % i == 0) {\n                result = false\n \
    \               break\n            }\n            i = i + 1\n        }\n     \
    \   return result", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        val result = List[Long]()\n    \
    \    for (i <- 0 until n) {\n            if (isPrime(i)) {\n                result\
    \ = result.append(i)\n            }\n        }\n        return result\n    }\n\
    \n    def isPrime(n : Long) : Boolean = {\n        if (n < 2) {\n            return\
    \ false\n        }\n        if (n == 2) {\n            return true\n        }\n\
    \        if (n % 2 == 0) {\n            return false\n        }\n        for (i\
    \ <- 3 until Math.sqrt(n)) {\n            if (n % i == 0) {\n                return\
    \ false\n            }\n        }\n        return true", "        if (n < 0) {\n\
    \            throw new IllegalArgumentException(\"n must be non-negative\")\n\
    \        }\n        val result = List[Long]()\n        val i = 0\n        while\
    \ (i < n) {\n            result = result.append(i)\n            i += 2\n     \
    \       while (i < n && !isPrime(i)) {\n                i += 2\n            }\n\
    \        }\n        return result\n    }\n\n    def isPrime(n : Long) : Boolean\
    \ = {\n        if (n < 2) {\n            return false\n        } else if (n ==\
    \ 2) {\n            return true\n        } else if (n % 2 == 0) {\n          \
    \  return false\n        } else {\n            val i = 3\n            while (i\
    \ <= Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return\
    \ false\n                }\n                i += 2\n            }\n          \
    \  return true\n        }", "        val result = List[Long]()\n        for (i\
    \ <- 0 until n) {\n            if (isPrime(i)) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result\n    }\n\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 0) {\n            return false\n     \
    \   } else if (n == 1) {\n            return true\n        } else if (n == 2)\
    \ {\n            return true\n        } else if (n % 2 == 0) {\n            return\
    \ false\n        } else {\n            for (i <- 3 until Math.sqrt(n)) {\n   \
    \             if (n % i == 0) {\n                    return false\n          \
    \      }\n            }\n            return true\n        }", "        if (n <\
    \ 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    )\n        }\n        val result = List[Long]()\n        if (n == 0) {\n     \
    \       return result\n        }\n        val i = n.toLong\n        while (i >\
    \ 0) {\n            result.append(i)\n            i -= 1\n        }\n        return\
    \ result", "        val result = mutable.List[Long]()\n        for (i <- 0 until\
    \ n) {\n            if (isPrime(i)) {\n                result.append(i)\n    \
    \        }\n        }\n        result\n    }\n\n    def isPrime(n : Long) : Boolean\
    \ = {\n        if (n == 2) {\n            true\n        } else if (n == 1) {\n\
    \            false\n        } else if (n % 2 == 0) {\n            false\n    \
    \    } else {\n            for (i <- 3 until Math.sqrt(n)) {\n               \
    \ if (n % i == 0) {\n                    false\n                }\n          \
    \  }\n            true\n        }", "        val result = List[Long]()\n     \
    \   for (i <- 0 until n) {\n            if (isPrime(i)) {\n                result\
    \ = result.append(i)\n            }\n        }\n        return result\n    }\n\
    \n    def isPrime(n : Long) : Boolean = {\n        if (n == 0) {\n           \
    \ return false\n        } else if (n == 1) {\n            return true\n      \
    \  } else if (n == 2) {\n            return true\n        } else if (n % 2 ==\
    \ 0) {\n            return false\n        } else {\n            for (i <- 3 until\
    \ Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return\
    \ false\n                }\n            }\n            return true\n        }",
  "        var result = List[Long]()\n        var i = 2L\n        while (i < n) {\n\
    \            if (n % i == 0) {\n                result = result.append(i)\n  \
    \              i = i + 1\n            } else {\n                i = i + 1\n  \
    \          }\n        }\n        return result", "        var result = List[Long]()\n\
    \        for (i <- 0 until n) {\n            if (isPrime(i)) {\n             \
    \   result = result.append(i)\n            }\n        }\n        return result\n\
    \    }\n\n    def isPrime(n : Long) : Boolean = {\n        if (n == 2) {\n   \
    \         return true\n        } else if (n < 2) {\n            return false\n\
    \        } else if (n % 2 == 0) {\n            return false\n        } else {\n\
    \            for (i <- 3 until Math.sqrt(n)) {\n                if (n % i == 0)\
    \ {\n                    return false\n                }\n            }\n    \
    \        return true\n        }", "        if (n < 0) {\n            throw new\
    \ IllegalArgumentException(\"n must be non-negative\")\n        }\n        if\
    \ (n == 0) {\n            return List.empty()\n        }\n        return List.range(2,\
    \ n + 1).filter(Problem::isPrime).toList\n    }\n\n    // Implement a function\
    \ that takes a list of non-negative integers and returns a list of the\n    //\
    \ first n prime numbers that are less than n.\n    // for example:\n    // >>>\
    \ primesUpTo((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong,\
    \ 13l.toLong, 17l.toLong, 19l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    // >>> primesUpTo((List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong)))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong, 19l.toLong))\n    // >>> primesUpTo((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong)))\n  \
    \  // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong, 19l.toLong))\n    // >>> primesUpTo((List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19", "        if (n\
    \ < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    )\n        }\n        val result = List[Long]()\n        for (i <- 0 until n)\
    \ {\n            if (isPrime(i)) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result\n    }\n\n    // Returns true\
    \ if the given number is prime.\n    def isPrime(n : Long) : Boolean = {\n   \
    \     if (n < 2) {\n            return false\n        }\n        if (n == 2) {\n\
    \            return true\n        }\n        if (n % 2 == 0) {\n            return\
    \ false\n        }\n        for (i <- 3 until Math.sqrt(n)) {\n            if\
    \ (n % i == 0) {\n                return false\n            }\n        }\n   \
    \     return true", "        val result = List[Long]()\n        for (i <- 0 until\
    \ n) {\n            if (isPrime(i)) {\n                result += i\n         \
    \   }\n        }\n        return result\n    }\n\n    // Implement a function\
    \ that takes an non-negative integer and returns a list of the first n\n    //\
    \ integers that are prime numbers and less than n.\n    // for example:\n    //\
    \ >>> countUpTo((5l))\n    // (List[Long](2l.toLong, 3l.toLong))\n    // >>> countUpTo((11l))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n\
    \    // (List[Long]())\n    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n\
    \    // >>> countUpTo((1l))\n    // (List[Long]())\n    // >>> countUpTo((18l))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong))\n    def countUpTo(n : Long) : List[Long] = {\n        val result\
    \ = List[Long]()\n        for (i <- 0 until n) {\n            if (isPrime(i))\
    \ {\n                result += i\n            }\n        }\n        return result\n\
    \    }\n\n    // Implement a function that takes an non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and less than\
    \ n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong))\n", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        val result = List[Long]()\n    \
    \    if (n == 0) {\n            return result\n        }\n        val i = 1L\n\
    \        while (i <= n) {\n            if (isPrime(i)) {\n                result\
    \ = result.append(i)\n            }\n            i = i + 1L\n        }\n     \
    \   return result\n    }\n\n    // Returns true if the given number is prime.\n\
    \    def isPrime(n : Long) : Boolean = {\n        if (n < 2) {\n            return\
    \ false\n        }\n        if (n == 2) {\n            return true\n        }\n\
    \        if (n % 2 == 0) {\n            return false\n        }\n        val i\
    \ = 3L\n        while (i <= Math.sqrt(n)) {\n            if (n % i == 0) {\n \
    \               return false\n            }\n            i = i + 2L\n        }\n\
    \        return true", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        if (n == 0) {\n            return\
    \ Nil()\n        }\n        return List(2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l,\
    \ 29l, 31l, 37l, 41l, 43l, 47l, 53l, 59l, 61l, 67l, 71l, 73l, 79l, 83l, 89l, 97l,\
    \ 101l, 103l, 107l, 109l, 113l, 127l, 131l, 137l, 139l, 149l, 151l, 157l, 163l,\
    \ 167l, 173l, 179l, 181l, 191l, 193l, 197l, 199l, 211l, 223l, 227l, 229l, 233l,\
    \ 239l, 241l, 251l, 257l, 263l, 269l, 271l, 277l, 281l, 283l, 293l, 307l, 311l,\
    \ 313l, 317l, 331l, 337l, 347l, 349l, 353l, 359l, 367l, 373l, 379l, 383l, 389l,\
    \ 397l, 401l, 409l, 419l, 421l, 431l, 433l, 439l, 443l, 449l, 457l, 461l, 463l,\
    \ 467l, 479l, 487l, 491l, 499l, 503l, 509l, 521l, 523l, 541l, 547l, 557l, 563l,\
    \ 569l, 571l, 577l, 587l, 589l, 593l, 599l, 601l, 607l, 613l, 617l, 619l, 631l,\
    \ 641l, 643l, 647l, 653l, 659l, 661l, 673l, 677l, 683l, 691l, 701l, 709l, 719l,\
    \ 727l, 733l, 739l, 743l, 751l, 757l, 761l, 769l, 773l", "        val result =\
    \ List[Long]()\n        for (i <- 0 until n) {\n            if (isPrime(i)) {\n\
    \                result = result.append(i)\n            }\n        }\n       \
    \ return result\n    }\n\n    // Implement a function that takes a list of non-negative\
    \ integers and returns a list of the\n    // first n prime numbers.\n    // for\
    \ example:\n    // >>> primesUpTo((2l, 3l, 5l, 7l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong))\n\
    \    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong))\n    // >>> primesUpTo((2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    // >>> primesUpTo((2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> primesUpTo((2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 11", "        val result = List[Long]()\n        for (i\
    \ <- 0 until n) {\n            if (isPrime(i)) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result\n    }\n\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 2) {\n            return true\n      \
    \  } else if (n < 2) {\n            return false\n        } else if (n % 2 ==\
    \ 0) {\n            return false\n        } else {\n            for (i <- 3 until\
    \ Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return\
    \ false\n                }\n            }\n            return true\n        }",
  "        val result = List[Long]()\n        if (n < 0) {\n            return result\n\
    \        }\n        for (i <- 0 until n) {\n            if (isPrime(i)) {\n  \
    \              result += i\n            }\n        }\n        return result\n\
    \    }\n\n    def isPrime(n : Long) : Boolean = {\n        if (n == 0) {\n   \
    \         return false\n        }\n        if (n == 1) {\n            return true\n\
    \        }\n        if (n == 2) {\n            return true\n        }\n      \
    \  if (n % 2 == 0) {\n            return false\n        }\n        if (n % 3 ==\
    \ 0) {\n            return false\n        }\n        if (n % 5 == 0) {\n     \
    \       return false\n        }\n        if (n % 7 == 0) {\n            return\
    \ false\n        }\n        if (n % 11 == 0) {\n            return false\n   \
    \     }\n        if (n % 13 == 0) {\n            return false\n        }\n   \
    \     if (n % 17 == 0) {\n            return false\n        }\n        if (n %\
    \ 19 == 0) {\n            return false\n        }\n        if (n % 23 == 0) {\n\
    \            return false\n        }\n        if (n % 29 == 0) {\n           \
    \ return false\n        }\n        if (n % 31 == 0) {\n            return false\n\
    \        }\n        if (n % 37 == 0) {\n            return false\n        }\n\
    \        if (n % 41 == 0) {\n            return false\n        }\n        if (n\
    \ % 43 == 0) {\n            return false\n        }\n        if (n % 47 == 0)\
    \ {\n            return false\n        }\n        if (n % 53 == 0) {\n       \
    \     return false\n        }\n        if (n % 59 == 0) {\n            return\
    \ false\n        }\n        if (n % 61 == 0) {\n            return false\n   \
    \     }\n        if (n % 67 == 0) {\n            return false\n        }\n   \
    \     if (n % 71 == 0) {\n            return false\n        }\n        if (n %\
    \ 73 == 0) {\n            return false\n        }\n        if (n % 79 ==", " \
    \       if (n < 0) {\n            throw new IllegalArgumentException(\"n must\
    \ be non-negative\")\n        }\n        val result = List[Long]()\n        for\
    \ (i <- 0 until n) {\n            if (isPrime(i)) {\n                result =\
    \ result.append(i)\n            }\n        }\n        return result\n    }\n\n\
    \    // Returns true if the given number is prime.\n    def isPrime(n : Long)\
    \ : Boolean = {\n        if (n < 2) {\n            return false\n        } else\
    \ if (n == 2) {\n            return true\n        } else if (n % 2 == 0) {\n \
    \           return false\n        } else {\n            for (i <- 3 until Math.sqrt(n))\
    \ {\n                if (n % i == 0) {\n                    return false\n   \
    \             }\n            }\n            return true\n        }", "       \
    \ if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    )\n        }\n        val result = List[Long]()\n        for (i <- 0 until n)\
    \ {\n            val prime = i\n            if (prime.isPrime()) {\n         \
    \       result = result.append(prime)\n            }\n        }\n        return\
    \ result", "        val result = List[Long]()\n        for (i <- 0 until n) {\n\
    \            if (isPrime(i)) {\n                result = result.append(i)\n  \
    \          }\n        }\n        return result", "        if (n < 0) {\n     \
    \       throw new IllegalArgumentException(\"n must be non-negative\")\n     \
    \   }\n        if (n == 0) {\n            return Nil()\n        }\n        return\
    \ List(2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l, 31l, 37l, 41l, 43l, 47l,\
    \ 53l, 59l, 61l, 67l, 71l, 73l, 79l, 83l, 89l, 97l, 101l, 103l, 107l, 109l, 113l,\
    \ 127l, 131l, 137l, 139l, 149l, 151l, 157l, 163l, 167l, 173l, 179l, 181l, 191l,\
    \ 193l, 197l, 199l, 211l, 223l, 227l, 229l, 233l, 239l, 241l, 251l, 257l, 263l,\
    \ 269l, 271l, 277l, 281l, 283l, 293l, 307l, 311l, 313l, 317l, 331l, 337l, 347l,\
    \ 349l, 353l, 359l, 367l, 373l, 379l, 383l, 389l, 397l, 401l, 409l, 419l, 421l,\
    \ 431l, 433l, 439l, 443l, 449l, 457l, 461l, 463l, 467l, 479l, 487l, 491l, 499l,\
    \ 503l, 509l, 521l, 523l, 541l, 547l, 557l, 563l, 569l, 571l, 577l, 587l, 593l,\
    \ 599l, 601l, 607l, 613l, 617l, 619l, 631l, 641l, 643l, 647l, 653l, 659l, 661l,\
    \ 673l, 677l, 683l, 691l, 701l, 709l, 719l, 727l, 733l, 739l, 743l, 751l, 757l,\
    \ 761l, 769l, 773l, 787l", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        val result = List[Long]()\n    \
    \    for (i <- 0 until n) {\n            if (isPrime(i)) {\n                result\
    \ = result.append(i)\n            }\n        }\n        return result\n    }\n\
    \n    def isPrime(n : Long) : Boolean = {\n        if (n < 2) {\n            return\
    \ false\n        }\n        if (n == 2) {\n            return true\n        }\n\
    \        if (n % 2 == 0) {\n            return false\n        }\n        for (i\
    \ <- 3 until Math.sqrt(n)) {\n            if (n % i == 0) {\n                return\
    \ false\n            }\n        }\n        return true", "        if (n < 0) {\n\
    \            throw new IllegalArgumentException(\"n must be non-negative\")\n\
    \        }\n        val result = List[Long]()\n        for (i <- 0 until n) {\n\
    \            if (isPrime(i)) {\n                result = result.append(i)\n  \
    \          }\n        }\n        return result\n    }\n\n    // Implement a function\
    \ that takes a non-negative integer and returns the number of prime\n    // numbers\
    \ less than n.\n    // for example:\n    // >>> countPrimes(0l)\n    // 0\n  \
    \  // >>> countPrimes(1l)\n    // 0\n    // >>> countPrimes(2l)\n    // 1\n  \
    \  // >>> countPrimes(3l)\n    // 2\n    // >>> countPrimes(4l)\n    // 2\n  \
    \  // >>> countPrimes(5l)\n    // 3\n    // >>> countPrimes(6l)\n    // 3\n  \
    \  // >>> countPrimes(7l)\n    // 4\n    // >>> countPrimes(8l)\n    // 4\n  \
    \  // >>> countPrimes(9l)\n    // 5\n    // >>> countPrimes(10l)\n    // 5\n \
    \   // >>> countPrimes(11l)\n    // 6\n    // >>> countPrimes(12l)\n    // 6\n\
    \    // >>> countPrimes(13l)\n    // 7\n    // >>> countPrimes(14l)\n    // 7\n\
    \    // >>> countPrimes(15l)\n    // 8\n    // >>> countPrimes(16l)\n    // 8\n\
    \    // >>> countPrimes(17l)\n    // 9\n    // >>> countPrimes(18l)\n    // 9\n\
    \    // >>> countPrimes(19l)\n    // 10\n    // >>> countPrimes(20l)\n    // 10\n\
    \    // >>> countPrimes(21l)\n    // 11\n    // >>> countPrimes(22l)\n    // 11\n\
    \    // >>> countPrimes(23l)\n    // 12\n    // >>> countPrimes(24l)\n    // 12\n\
    \    // >>> countPrimes(25l)\n    // 13\n    // >>> countPrimes(", "        val\
    \ result = List[Long]()\n        for (i <- 0 until n) {\n            if (isPrime(i))\
    \ {\n                result = result.append(i)\n            }\n        }\n   \
    \     return result\n    }\n\n    def isPrime(n : Long) : Boolean = {\n      \
    \  if (n == 0) {\n            return false\n        } else if (n == 1) {\n   \
    \         return true\n        } else if (n == 2) {\n            return true\n\
    \        } else if (n % 2 == 0) {\n            return false\n        } else {\n\
    \            return n % 3 == 0\n        }", "        if (n < 0) {\n          \
    \  throw new IllegalArgumentException(\"n must be non-negative\")\n        }\n\
    \        val result = List[Long]()\n        for (i <- 0 until n) {\n         \
    \   val prime = isPrime(i)\n            if (prime) {\n                result =\
    \ result.append(i)\n            }\n        }\n        return result\n    }\n\n\
    \    // Returns true if the given number is prime.\n    def isPrime(n : Long)\
    \ : Boolean = {\n        if (n < 2) {\n            return false\n        }\n \
    \       if (n == 2) {\n            return true\n        }\n        if (n % 2 ==\
    \ 0) {\n            return false\n        }\n        val max = scala.math.maxInt(n.toInt,\
    \ 2)\n        for (i <- 3 until max) {\n            if (n % i == 0) {\n      \
    \          return false\n            }\n        }\n        return true", "   \
    \     if (n < 0) {\n            throw new IllegalArgumentException(\"n must be\
    \ non-negative\")\n        }\n        val result = List[Long]()\n        for (i\
    \ <- 0 until n) {\n            if (isPrime(i)) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result\n    }\n\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n < 2) {\n            return false\n      \
    \  }\n        if (n == 2) {\n            return true\n        }\n        if (n\
    \ % 2 == 0) {\n            return false\n        }\n        for (i <- 3 until\
    \ Math.sqrt(n)) {\n            if (n % i == 0) {\n                return false\n\
    \            }\n        }\n        return true", "        val result = List[Long]()\n\
    \        if (n < 0) {\n            return result\n        }\n        val i = 0\n\
    \        while (i < n) {\n            val prime = isPrime(i)\n            if (prime)\
    \ {\n                result = result.append(i)\n            }\n            i +=\
    \ 1\n        }\n        return result\n    }\n\n    def isPrime(n : Long) : Boolean\
    \ = {\n        if (n < 2) {\n            return false\n        }\n        if (n\
    \ == 2) {\n            return true\n        }\n        if (n % 2 == 0) {\n   \
    \         return false\n        }\n        val i = 3\n        while (i * i <=\
    \ n) {\n            if (n % i == 0) {\n                return false\n        \
    \    }\n            i += 2\n        }\n        return true", "        val result\
    \ = List[Long]()\n        if (n < 0) {\n            return result\n        }\n\
    \        val i = 0\n        while (i < n) {\n            val prime = isPrime(i)\n\
    \            if (prime) {\n                result = result.append(i)\n       \
    \     }\n            i = i + 1\n        }\n        return result", "        if\
    \ (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    )\n        }\n        if (n == 0) {\n            return Nil$()\n        }\n  \
    \      return List(2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l, 31l, 37l, 41l,\
    \ 43l, 47l, 53l, 59l, 61l, 67l, 71l, 73l, 79l, 83l, 89l, 97l, 101l, 103l, 107l,\
    \ 109l, 113l, 127l, 131l, 137l, 139l, 149l, 151l, 157l, 163l, 167l, 173l, 179l,\
    \ 181l, 191l, 193l, 197l, 199l, 211l, 223l, 227l, 229l, 233l, 239l, 241l, 251l,\
    \ 257l, 263l, 269l, 271l, 277l, 281l, 283l, 293l, 307l, 311l, 313l, 317l, 331l,\
    \ 337l, 347l, 349l, 353l, 359l, 367l, 373l, 379l, 383l, 389l, 397l, 401l, 409l,\
    \ 419l, 421l, 431l, 433l, 439l, 443l, 449l, 457l, 461l, 463l, 467l, 479l, 487l,\
    \ 491l, 499l, 503l, 509l, 521l, 523l, 541l, 547l, 557l, 563l, 569l, 571l, 577l,\
    \ 587l, 589l, 593l, 599l, 601l, 607l, 613l, 617l, 619l, 631l, 641l, 643l, 647l,\
    \ 653l, 659l, 661l, 673l, 677l, 683l, 691l, 701l, 709l, 719l, 727l, 733l, 739l,\
    \ 743l, 751l, 757l, 761l, 769l, 773", "        val result = List[Long]()\n   \
    \     for (i <- 0 until n) {\n            if (isPrime(i)) {\n                result\
    \ = result.append(i)\n            }\n        }\n        return result\n    }\n\
    \n    def isPrime(n : Long) : Boolean = {\n        if (n == 2) {\n           \
    \ return true\n        } else if (n < 2) {\n            return false\n       \
    \ } else if (n % 2 == 0) {\n            return false\n        } else {\n     \
    \       for (i <- 3 until Math.sqrt(n)) {\n                if (n % i == 0) {\n\
    \                    return false\n                }\n            }\n        \
    \    return true\n        }", "        val result = List[Long]()\n        for\
    \ (i <- 0 until n) {\n            if (isPrime(i)) {\n                result =\
    \ result.append(i)\n            }\n        }\n        return result\n    }\n\n\
    \    // Implement a function that takes a non-negative integer and returns a list\
    \ of the first n\n    // integers that are prime numbers and greater than n.\n\
    \    // for example:\n    // >>> countUpToGreaterThan((5l))\n    // (List[Long](6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))\n    // >>> countUpToGreaterThan((11l))\n\
    \    // (List[Long](12l.toLong, 13l.toLong, 14l.toLong, 15l.toLong, 16l.toLong,\
    \ 17l.toLong, 18l.toLong, 19l.toLong))\n    // >>> countUpToGreaterThan((0l))\n\
    \    // (List[Long]())\n    // >>> countUpToGreaterThan((20l))\n    // (List[Long](20l.toLong,\
    \ 21l.toLong, 22l.toLong, 23l.toLong, 24l.toLong, 25l.toLong, 26l.toLong, 27l.toLong,\
    \ 28l.toLong, 29l.toLong))\n    // >>> countUpToGreaterThan((1l))\n    // (List[Long]())\n\
    \    // >>> countUpToGreaterThan((18l))\n    // (List[Long](18l.toLong, 19l.toLong,\
    \ 20l.toLong, 21l.toLong, 22l.toLong, 23l.toLong, 24l.toLong, 25l.toLong, 26l.toLong,\
    \ 27l.toLong))\n    def countUpToGreaterThan(n : Long) : List[Long] = {\n    \
    \    val result = List[Long]()\n        for (i <- 0 until n) {\n            if\
    \ (isPrime(i)) {\n                result = result.append(i)\n            }\n \
    \       }\n        return result\n    }\n\n    // Implement a function that takes\
    \ a non-", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        val result = List[Long]()\n    \
    \    for (i <- 0 until n) {\n            val prime = isPrime(i)\n            if\
    \ (prime) {\n                result = result.append(i)\n            }\n      \
    \  }\n        return result\n    }\n\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n < 2) {\n            return false\n        }\n        if (n == 2)\
    \ {\n            return true\n        }\n        if (n % 2 == 0) {\n         \
    \   return false\n        }\n        for (i <- 3 until Math.sqrt(n)) {\n     \
    \       if (n % i == 0) {\n                return false\n            }\n     \
    \   }\n        return true", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        val result = List[Long]()\n    \
    \    for (i <- 0 until n) {\n            val prime = isPrime(i)\n            if\
    \ (prime) {\n                result = result.append(i)\n            }\n      \
    \  }\n        return result", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        val result = List[Long]()\n    \
    \    if (n == 0) {\n            return result\n        }\n        val i = 0\n\
    \        while (i < n) {\n            result.append(i)\n            i = i + 1\n\
    \        }\n        return result", "        if (n < 0) {\n            throw new\
    \ IllegalArgumentException(\"n must be non-negative\")\n        }\n        val\
    \ result = List[Long]()\n        val i = 0l\n        while (i < n) {\n       \
    \     if (isPrime(i)) {\n                result = result.append(i)\n         \
    \   }\n            i = i + 1l\n        }\n        return result\n    }\n\n   \
    \ // Implement a function that takes a list of non-negative integers and returns\
    \ a list of the\n    // first n prime numbers that are less than n.\n    // for\
    \ example:\n    // >>> primesUpTo((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong)))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    //\
    \ >>> primesUpTo((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong,\
    \ 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong)))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n\
    \    // >>> primesUpTo((List[Long]()))\n    // (List[Long]())\n    // >>> primesUpTo((List[Long](1l.toLong)))\n\
    \    // (List[Long]())\n    // >>> primesUpTo((List[Long](1l.toLong, 2l.toLong)))\n\
    \    // (List[Long](1l.toLong))\n    // >>> primesUpTo((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong, 2l.toLong))\n    ", " \
    \       val result = List[Long]()\n        for (i <- 0 until n) {\n          \
    \  if (isPrime(i)) {\n                result = result.append(i)\n            }\n\
    \        }\n        return result\n    }\n\n    def isPrime(n : Long) : Boolean\
    \ = {\n        if (n == 2) {\n            return true\n        } else if (n <\
    \ 2) {\n            return false\n        } else if (n % 2 == 0) {\n         \
    \   return false\n        } else {\n            for (i <- 3 until Math.sqrt(n))\
    \ {\n                if (n % i == 0) {\n                    return false\n   \
    \             }\n            }\n            return true\n        }", "       \
    \ if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    )\n        }\n        val result = List[Long]()\n        for (i <- 0 until n)\
    \ {\n            val prime = i\n            if (prime.isPrime()) {\n         \
    \       result = result.append(prime)\n            }\n        }\n        return\
    \ result", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        val result = List[Long]()\n    \
    \    for (i <- 0 until n) {\n            if (isPrime(i)) {\n                result\
    \ = result.append(i)\n            }\n        }\n        return result\n    }\n\
    \n    private boolean isPrime(Long i) {\n        if (i == 0) {\n            return\
    \ false\n        }\n        if (i == 1) {\n            return true\n        }\n\
    \        if (i % 2 == 0) {\n            return false\n        }\n        if (i\
    \ % 3 == 0) {\n            return false\n        }\n        for (j <- 2 until\
    \ Math.sqrt(i)) {\n            if (i % j == 0) {\n                return false\n\
    \            }\n        }\n        return true", "        if (n < 0) {\n     \
    \       throw new IllegalArgumentException(\"n must be non-negative\")\n     \
    \   }\n        val result = List[Long]()\n        for (i <- 0 until n) {\n   \
    \         if (isPrime(i)) {\n                result = result.append(i)\n     \
    \       }\n        }\n        return result\n    }\n\n    // Implement a function\
    \ that takes a list of non-negative integers and returns a list of the\n    //\
    \ first n primes.\n    // for example:\n    // >>> primesUpTo((2l, 3l, 5l, 7l))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))\n    // >>> primesUpTo((2l,\
    \ 3l, 5l, 7l, 11l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong))\n    // >>> primesUpTo((2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    // >>> primesUpTo((2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> primesUpTo((2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l))\n    // (List", "        if (n < 0) {\n\
    \            throw new IllegalArgumentException(\"n must be non-negative\")\n\
    \        }\n        val result = List[Long]()\n        for (i <- 0 until n) {\n\
    \            if (isPrime(i)) {\n                result = result.append(i)\n  \
    \          }\n        }\n        return result\n    }\n\n    def isPrime(n : Long)\
    \ : Boolean = {\n        if (n < 2) {\n            return false\n        } else\
    \ if (n == 2) {\n            return true\n        } else if (n % 2 == 0) {\n \
    \           return false\n        } else {\n            for (i <- 3 until Math.sqrt(n))\
    \ {\n                if (n % i == 0) {\n                    return false\n   \
    \             }\n            }\n            return true\n        }", "       \
    \ if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    )\n        }\n        val result = List[Long]()\n        if (n == 0) {\n     \
    \       return result\n        }\n        val i = 1L\n        while (i <= n) {\n\
    \            if (isPrime(i)) {\n                result = result.append(i)\n  \
    \          }\n            i = i + 1L\n        }\n        return result\n    }\n\
    \n    private static boolean isPrime(Long i) {\n        if (i < 2) {\n       \
    \     return false\n        }\n        if (i == 2) {\n            return true\n\
    \        }\n        if (i % 2 == 0) {\n            return false\n        }\n \
    \       if (i % 3 == 0) {\n            return false\n        }\n        val b\
    \ = (i - 1) / 2\n        val m = (long) Math.sqrt(b)\n        val f = 5\n    \
    \    while (f <= m) {\n            if (i % f == 0) {\n                return false\n\
    \            }\n            if (i % (f + 2) == 0) {\n                return false\n\
    \            }\n            f = f + 6\n        }\n        return true", "    \
    \    if (n < 0) {\n            throw new IllegalArgumentException(\"n must be\
    \ non-negative\")\n        }\n        val result = List[Long]()\n        for (i\
    \ <- 0 until n) {\n            val prime = i + 1\n            if (prime.isPrime())\
    \ {\n                result = result.append(prime)\n            }\n        }\n\
    \        return result", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        val result = List[Long]()\n    \
    \    if (n == 0) {\n            return result\n        }\n        val i = n\n\
    \        while (i > 0) {\n            result = result.append(i)\n            i\
    \ -= 1\n        }\n        return result", "        val result = List[Long]()\n\
    \        for (i <- 0 until n) {\n            if (isPrime(i)) {\n             \
    \   result = result.append(i)\n            }\n        }\n        return result\n\
    \    }\n\n    // Implement a function that takes a list of non-negative integers\
    \ and returns a list of the\n    // first n primes.\n    // for example:\n   \
    \ // >>> primesUpTo((2l, 3l, 5l, 7l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong))\n    // >>> primesUpTo((2l, 3l,\
    \ 5l, 7l, 11l, 13l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong, 19l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l,\
    \ 19l, 23l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong,\
    \ 13", "        val result = mutable.List[Long]()\n        for (i <- 0 until n)\
    \ {\n            if (isPrime(i)) {\n                result.append(i)\n       \
    \     }\n        }\n        return result\n    }\n\n    // Implement a function\
    \ that takes a non-negative integer and returns a list of the first n\n    //\
    \ integers that are prime numbers and greater than n.\n    // for example:\n \
    \   // >>> countUpToGreaterThan((5l))\n    // (List[Long](6l.toLong, 7l.toLong,\
    \ 8l.toLong, 9l.toLong))\n    // >>> countUpToGreaterThan((11l))\n    // (List[Long](13l.toLong,\
    \ 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong))\n    // >>> countUpToGreaterThan((0l))\n\
    \    // (List[Long]())\n    // >>> countUpToGreaterThan((20l))\n    // (List[Long](6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong))\n    // >>> countUpToGreaterThan((1l))\n    // (List[Long]())\n\
    \    // >>> countUpToGreaterThan((18l))\n    // (List[Long](13l.toLong, 17l.toLong,\
    \ 19l.toLong, 23l.toLong, 29l.toLong))\n    def countUpToGreaterThan(n : Long)\
    \ : List[Long] = {\n        val result = mutable.List[Long]()\n        for (i\
    \ <- 0 until n) {\n            if (isPrime(i)) {\n                result.append(i)\n\
    \            }\n        }\n        return result\n    }\n\n    // Implement a\
    \ function that takes a non-negative integer and returns a list of the first n\n\
    \    // integers that are prime numbers and less than or equal to n.\n    // for\
    \ example:\n    // >>> countUpToLessThan((5l))", "        val result = List[Long]()\n\
    \        for (i <- 0 until n) {\n            if (isPrime(i)) {\n             \
    \   result = result.append(i)\n            }\n        }\n        return result\n\
    \    }\n\n    // Implement a function that takes a list of non-negative integers\
    \ and returns a list of the\n    // first n primes.\n    // for example:\n   \
    \ // >>> primesUpTo((2l, 3l, 5l, 7l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong))\n    // >>> primesUpTo((2l, 3l,\
    \ 5l, 7l, 11l, 13l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong, 19l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l,\
    \ 19l, 23l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong,\
    \ 13", "        val result = List[Long]()\n        for (i <- 0 until n) {\n  \
    \          if (isPrime(i)) {\n                result = result.append(i)\n    \
    \        }\n        }\n        return result\n    }\n\n    def isPrime(n : Long)\
    \ : Boolean = {\n        if (n == 2) {\n            return true\n        } else\
    \ if (n < 2) {\n            return false\n        } else if (n % 2 == 0) {\n \
    \           return false\n        } else {\n            for (i <- 3 until Math.sqrt(n))\
    \ {\n                if (n % i == 0) {\n                    return false\n   \
    \             }\n            }\n            return true\n        }", "       \
    \ if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    )\n        }\n        val result = List[Long]()\n        for (i <- 0 until n)\
    \ {\n            val prime = isPrime(i)\n            if (prime) {\n          \
    \      result = result.append(i)\n            }\n        }\n        return result\n\
    \    }\n\n    def isPrime(n : Long) : Boolean = {\n        if (n < 2) {\n    \
    \        return false\n        }\n        if (n == 2) {\n            return true\n\
    \        }\n        if (n % 2 == 0) {\n            return false\n        }\n \
    \       for (i <- 3 until Math.sqrt(n)) {\n            if (n % i == 0) {\n   \
    \             return false\n            }\n        }\n        return true", " \
    \       val result = List[Long]()\n        for (i <- 0 until n) {\n          \
    \  if (isPrime(i)) {\n                result = result.append(i)\n            }\n\
    \        }\n        return result\n    }\n\n    def isPrime(n : Long) : Boolean\
    \ = {\n        if (n == 2) {\n            return true\n        } else if (n <\
    \ 2) {\n            return false\n        } else if (n % 2 == 0) {\n         \
    \   return false\n        } else {\n            for (i <- 3 until Math.sqrt(n))\
    \ {\n                if (n % i == 0) {\n                    return false\n   \
    \             }\n            }\n            return true\n        }", "       \
    \ if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    )\n        }\n        val result = List[Long]()\n        if (n == 0) {\n     \
    \       return result\n        }\n        val i = n\n        while (i > 0) {\n\
    \            result = result.append(i)\n            i -= 1\n        }\n      \
    \  return result", "        val result = List[Long]()\n        for (i <- 0 until\
    \ n) {\n            val prime = isPrime(i)\n            if (prime) {\n       \
    \         result = result.append(i)\n            }\n        }\n        return\
    \ result\n    }\n\n    def isPrime(n : Long) : Boolean = {\n        val result\
    \ = false\n        for (i <- 2 until n) {\n            if (n % i == 0) {\n   \
    \             result = false\n                break\n            }\n        }\n\
    \        result", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        if (n == 0) {\n            return\
    \ Nil()\n        }\n        return List(2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l,\
    \ 29l, 31l, 37l, 41l, 43l, 47l, 53l, 59l, 61l, 67l, 71l, 73l, 79l, 83l, 89l, 97l,\
    \ 101l, 103l, 107l, 109l, 113l, 127l, 131l, 137l, 139l, 149l, 151l, 157l, 163l,\
    \ 167l, 173l, 179l, 181l, 191l, 193l, 197l, 199l, 211l, 223l, 227l, 229l, 233l,\
    \ 239l, 241l, 251l, 257l, 263l, 269l, 271l, 277l, 281l, 283l, 293l, 307l, 311l,\
    \ 313l, 317l, 331l, 337l, 347l, 349l, 353l, 359l, 367l, 373l, 379l, 383l, 389l,\
    \ 397l, 401l, 409l, 419l, 421l, 431l, 433l, 439l, 443l, 449l, 457l, 461l, 463l,\
    \ 467l, 479l, 487l, 491l, 499l, 503l, 509l, 521l, 523l, 541l, 547l, 557l, 563l,\
    \ 569l, 571l, 577l, 587l, 593l, 599l, 601l, 607l, 613l, 617l, 619l, 631l, 641l,\
    \ 643l, 647l, 653l, 659l, 661l, 673l, 677l, 683l, 691l, 701l, 709l, 719l, 727l,\
    \ 733l, 739l, 743l, 751l, 757l, 761l, 769l, 773l, 787l", "        val result =\
    \ List[Long]()\n        for (i <- 0 until n) {\n            if (isPrime(i)) {\n\
    \                result = result.append(i)\n            }\n        }\n       \
    \ return result\n    }\n\n    // Implement a function that takes a non-negative\
    \ integer and returns a list of the first n\n    // integers that are prime numbers\
    \ and greater than n.\n    // for example:\n    // >>> countUpToGreaterThan((5l))\n\
    \    // (List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))\n    // >>> countUpToGreaterThan((11l))\n\
    \    // (List[Long](13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong))\n\
    \    // >>> countUpToGreaterThan((0l))\n    // (List[Long]())\n    // >>> countUpToGreaterThan((20l))\n\
    \    // (List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong))\n    // >>> countUpToGreaterThan((1l))\n\
    \    // (List[Long]())\n    // >>> countUpToGreaterThan((18l))\n    // (List[Long](13l.toLong,\
    \ 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong))\n    def countUpToGreaterThan(n\
    \ : Long) : List[Long] = {\n        val result = List[Long]()\n        for (i\
    \ <- n until n + 1) {\n            if (isPrime(i)) {\n                result =\
    \ result.append(i)\n            }\n        }\n        return result\n    }\n\n\
    \    // Implement a function that takes a non-negative integer and returns a list\
    \ of the first n\n    // integers that are prime numbers and less than or equal\
    \ to n.\n    // for example:\n    // >>> countUpToLessThan((5l))", "        if\
    \ (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    )\n        }\n        val result = List[Long]()\n        for (i <- 0 until n)\
    \ {\n            val prime = i + 1\n            if (prime % 2 == 0) {\n      \
    \          prime = prime / 2\n            }\n            if (prime % 3 == 0) {\n\
    \                prime = prime / 3\n            }\n            if (prime % 5 ==\
    \ 0) {\n                prime = prime / 5\n            }\n            if (prime\
    \ % 7 == 0) {\n                prime = prime / 7\n            }\n            if\
    \ (prime % 11 == 0) {\n                prime = prime / 11\n            }\n   \
    \         if (prime % 13 == 0) {\n                prime = prime / 13\n       \
    \     }\n            if (prime % 17 == 0) {\n                prime = prime / 17\n\
    \            }\n            if (prime % 19 == 0) {\n                prime = prime\
    \ / 19\n            }\n            result = result.append(prime)\n        }\n\
    \        return result", "        val result = List[Long]()\n        for (i <-\
    \ 0 until n) {\n            if (isPrime(i)) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result\n    }\n\n    // Implement a\
    \ function that takes a non-negative integer and returns the sum of the first\
    \ n\n    // positive integers that are prime numbers and less than n.\n    //\
    \ for example:\n    // >>> countUpToSum((5l))\n    // (Long(11l))\n    // >>>\
    \ countUpToSum((11l))\n    // (Long(22l))\n    // >>> countUpToSum((0l))\n   \
    \ // (Long(0l))\n    // >>> countUpToSum((20l))\n    // (Long(55l))\n    // >>>\
    \ countUpToSum((1l))\n    // (Long(1l))\n    // >>> countUpToSum((18l))\n    //\
    \ (Long(19l))\n    def countUpToSum(n : Long) : Long = {\n        val result =\
    \ 0l\n        for (i <- 0 until n) {\n            if (isPrime(i)) {\n        \
    \        result += i\n            }\n        }\n        return result\n    }\n\
    \n    // Implement a function that takes a non-negative integer and returns the\
    \ sum of the first n\n    // positive integers that are prime numbers and less\
    \ than n.\n    // for example:\n    // >>> countUpToSum2((5l))\n    // (Long(11l))\n\
    \    // >>> countUpToSum2((11l))\n    // (Long(22l))\n    // >>> countUpToSum2((0l))\n\
    \    // (Long(0l))\n    // >>> countUpToSum2((20l))\n    // (Long(55l))\n    //\
    \ >>> countUpToSum2((1l))\n    // (Long(1l))\n    // >>> countUpToSum2((18l))\n\
    \    // (Long(19l))\n    def countUpToSum2(n : Long) : Long = {\n        val result\
    \ = 0l\n        for (i <- 0 until n) {\n            if (isPrime(i)) {\n      \
    \          result += i\n            }\n        }\n", "        if (n < 0) {\n \
    \           throw new IllegalArgumentException(\"n must be non-negative\")\n \
    \       }\n        val result = List[Long]()\n        for (i <- 0 until n) {\n\
    \            if (isPrime(i)) {\n                result = result.append(i)\n  \
    \          }\n        }\n        return result\n    }\n\n    def isPrime(n : Long)\
    \ : Boolean = {\n        if (n < 2) {\n            return false\n        }\n \
    \       if (n == 2) {\n            return true\n        }\n        if (n % 2 ==\
    \ 0) {\n            return false\n        }\n        for (i <- 3 until Math.sqrt(n))\
    \ {\n            if (n % i == 0) {\n                return false\n           \
    \ }\n        }\n        return true", "        val result = List[Long]()\n   \
    \     for (i <- 0 until n) {\n            if (isPrime(i)) {\n                result\
    \ += i\n            }\n        }\n        return result\n    }\n\n    def isPrime(n\
    \ : Long) : Boolean = {\n        if (n == 2) {\n            return true\n    \
    \    }\n        if (n < 2) {\n            return false\n        }\n        if\
    \ (n % 2 == 0) {\n            return false\n        }\n        for (i <- 3 until\
    \ Math.sqrt(n)) {\n            if (n % i == 0) {\n                return false\n\
    \            }\n        }\n        return true", "        if (n < 0) {\n     \
    \       throw new IllegalArgumentException(\"n must be non-negative\")\n     \
    \   }\n        if (n == 0) {\n            return Nil()\n        }\n        return\
    \ Cons(2l, countUpTo(n - 1))", "        val result = List[Long]()\n        for\
    \ (i <- 0 until n) {\n            if (isPrime(i)) {\n                result =\
    \ result.append(i)\n            }\n        }\n        return result\n    }\n\n\
    \    def isPrime(n : Long) : Boolean = {\n        if (n == 2) {\n            return\
    \ true\n        } else if (n < 2) {\n            return false\n        } else\
    \ if (n % 2 == 0) {\n            return false\n        } else {\n            for\
    \ (i <- 3 until Math.sqrt(n)) {\n                if (n % i == 0) {\n         \
    \           return false\n                }\n            }\n            return\
    \ true\n        }", "        var result = List[Long]()\n        var i = 2L\n \
    \       while (i <= n) {\n            if (isPrime(i)) {\n                result\
    \ = result.append(i)\n            }\n            i = i + 1L\n        }\n     \
    \   return result\n    }\n\n    // Implement a function that takes a non-negative\
    \ integer and returns the number of prime\n    // numbers less than n.\n    //\
    \ for example:\n    // >>> countPrimes(0l)\n    // 0l\n    // >>> countPrimes(1l)\n\
    \    // 0l\n    // >>> countPrimes(2l)\n    // 1l\n    // >>> countPrimes(3l)\n\
    \    // 2l\n    // >>> countPrimes(4l)\n    // 2l\n    // >>> countPrimes(5l)\n\
    \    // 3l\n    // >>> countPrimes(6l)\n    // 3l\n    // >>> countPrimes(7l)\n\
    \    // 4l\n    // >>> countPrimes(8l)\n    // 4l\n    // >>> countPrimes(9l)\n\
    \    // 5l\n    // >>> countPrimes(10l)\n    // 5l\n    // >>> countPrimes(11l)\n\
    \    // 6l\n    // >>> countPrimes(12l)\n    // 6l\n    // >>> countPrimes(13l)\n\
    \    // 7l\n    // >>> countPrimes(14l)\n    // 7l\n    // >>> countPrimes(15l)\n\
    \    // 8l\n    // >>> countPrimes(16l)\n    // 8l\n    // >>> countPrimes(17l)\n\
    \    // 9l\n    // >>> countPrimes(18l)\n    // 9l\n    // >>> countPrimes(19l)\n\
    \    // 10l\n    // >>> countPrimes(20l)\n    // 10l\n    def countPrimes(n :\
    \ Long) : Long = {\n        var result = 0L\n        var i = 2L\n        while\
    \ (i <= n) {\n            if (isPrime(i)) {\n                result = result +\
    \ 1L\n            }\n            i = i + 1L\n        }\n        return result\n\
    \    }", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        if (n == 0) {\n            return\
    \ Nil()\n        }\n        return List(2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l,\
    \ 29l, 31l, 37l, 41l, 43l, 47l, 53l, 59l, 61l, 67l, 71l, 73l, 79l, 83l, 89l, 97l,\
    \ 101l, 103l, 107l, 109l, 113l, 127l, 131l, 137l, 139l, 149l, 151l, 157l, 163l,\
    \ 167l, 173l, 179l, 181l, 191l, 193l, 197l, 199l, 211l, 223l, 227l, 229l, 233l,\
    \ 239l, 241l, 251l, 257l, 263l, 269l, 271l, 277l, 281l, 283l, 293l, 307l, 311l,\
    \ 313l, 317l, 331l, 337l, 347l, 349l, 353l, 359l, 367l, 373l, 379l, 383l, 389l,\
    \ 397l, 401l, 409l, 419l, 421l, 431l, 433l, 439l, 443l, 449l, 457l, 461l, 463l,\
    \ 467l, 479l, 487l, 491l, 499l, 503l, 509l, 521l, 523l, 541l, 547l, 557l, 563l,\
    \ 569l, 571l, 577l, 587l, 589l, 593l, 599l, 601l, 607l, 613l, 617l, 619l, 631l,\
    \ 641l, 643l, 647l, 653l, 659l, 661l, 673l, 677l, 683l, 691l, 701l, 709l, 719l,\
    \ 727l, 733l, 739l, 743l, 751l, 757l, 761l, 769l, 773l", "        var result =\
    \ List[Long]()\n        var i = 0l\n        while (i < n) {\n            if (isPrime(i))\
    \ {\n                result = result.append(i)\n            }\n            i =\
    \ i + 1l\n        }\n        return result", "        val result = List[Long]()\n\
    \        for (i <- 0 until n) {\n            if (isPrime(i)) {\n             \
    \   result = result.append(i)\n            }\n        }\n        return result\n\
    \    }\n\n    def isPrime(n : Long) : Boolean = {\n        if (n == 2) {\n   \
    \         return true\n        } else if (n < 2) {\n            return false\n\
    \        } else if (n % 2 == 0) {\n            return false\n        } else {\n\
    \            for (i <- 3 until Math.sqrt(n)) {\n                if (n % i == 0)\
    \ {\n                    return false\n                }\n            }\n    \
    \        return true\n        }", "        if (n < 0) {\n            throw new\
    \ IllegalArgumentException(\"n must be non-negative\")\n        }\n        val\
    \ result = List[Long]()\n        for (i <- 0 until n) {\n            if (isPrime(i))\
    \ {\n                result = result.append(i)\n            }\n        }\n   \
    \     return result\n    }\n\n    // Returns true if n is prime.\n    def isPrime(n\
    \ : Long) : Boolean = {\n        if (n < 2) {\n            return false\n    \
    \    } else if (n == 2) {\n            return true\n        } else if (n % 2 ==\
    \ 0) {\n            return false\n        } else {\n            for (i <- 3 until\
    \ Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return\
    \ false\n                }\n            }\n            return true\n        }",
  "        val result = List[Long]()\n        if (n < 0) {\n            return result\n\
    \        }\n        for (i <- 0 until n) {\n            val p = i\n          \
    \  if (p % 2 == 0) {\n                p = p / 2\n            }\n            if\
    \ (p == 1) {\n                result = result.append(i)\n            }\n     \
    \       while (p < n) {\n                p = p + 2\n                if (p % 2\
    \ == 0) {\n                    p = p / 2\n                }\n                if\
    \ (p == 1) {\n                    result = result.append(i)\n                }\n\
    \            }\n        }\n        return result", "        val result = List[Long]()\n\
    \        for (i <- 0 until n) {\n            if (isPrime(i)) {\n             \
    \   result = result.append(i)\n            }\n        }\n        return result\n\
    \    }\n\n    // Implement a function that takes a list of non-negative integers\
    \ and returns a list of the\n    // first n primes.\n    // for example:\n   \
    \ // >>> primesUpTo((2l, 3l, 5l, 7l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong))\n    // >>> primesUpTo((2l, 3l,\
    \ 5l, 7l, 11l, 13l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong, 19l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l,\
    \ 19l, 23l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong,\
    \ 13", "        val result = List[Long]()\n        for (i <- 0 until n) {\n  \
    \          val prime = isPrime(i)\n            if (prime) {\n                result\
    \ = result.append(i)\n            }\n        }\n        return result\n    }\n\
    \n    def isPrime(n : Long) : Boolean = {\n        if (n == 2) {\n           \
    \ return true\n        } else if (n < 2) {\n            return false\n       \
    \ } else if (n % 2 == 0) {\n            return false\n        } else {\n     \
    \       for (i <- 3 until Math.sqrt(n)) {\n                if (n % i == 0) {\n\
    \                    return false\n                }\n            }\n        \
    \    return true\n        }", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        val result = List[Long]()\n    \
    \    if (n == 0) {\n            return result\n        }\n        val i = 0\n\
    \        while (i < n) {\n            result = result.append(i)\n            i\
    \ += 1\n        }\n        return result", "        val result = List[Long]()\n\
    \        for (i <- 0 until n) {\n            if (isPrime(i)) {\n             \
    \   result = result.append(i)\n            }\n        }\n        return result\n\
    \    }\n\n    def isPrime(n : Long) : Boolean = {\n        if (n == 0) {\n   \
    \         return false\n        } else if (n == 1) {\n            return true\n\
    \        } else if (n == 2) {\n            return true\n        } else if (n %\
    \ 2 == 0) {\n            return false\n        } else {\n            for (i <-\
    \ 3 until Math.sqrt(n)) {\n                if (n % i == 0) {\n               \
    \     return false\n                }\n            }\n            return true\n\
    \        }", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        val result = List[Long]()\n    \
    \    if (n == 0) {\n            return result\n        }\n        val i = 1L\n\
    \        while (i <= n) {\n            if (isPrime(i)) {\n                result\
    \ = result.append(i)\n            }\n            i = i + 1L\n        }\n     \
    \   return result\n    }\n\n    // Returns true if the given number is prime.\n\
    \    def isPrime(n : Long) : Boolean = {\n        if (n < 2) {\n            return\
    \ false\n        }\n        if (n == 2) {\n            return true\n        }\n\
    \        if (n % 2 == 0) {\n            return false\n        }\n        val i\
    \ = 3L\n        while (i <= Math.sqrt(n)) {\n            if (n % i == 0) {\n \
    \               return false\n            }\n            i = i + 2L\n        }\n\
    \        return true", "        val result = List[Long]()\n        for (i <- 0\
    \ until n) {\n            if (isPrime(i)) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result\n    }\n\n    // Returns true\
    \ if the given number is prime.\n    def isPrime(n : Long) : Boolean = {\n   \
    \     if (n == 2) {\n            return true\n        } else if (n < 2) {\n  \
    \          return false\n        } else if (n % 2 == 0) {\n            return\
    \ false\n        } else {\n            for (i <- 3 until n) {\n              \
    \  if (n % i == 0) {\n                    return false\n                }\n  \
    \          }\n            return true\n        }", "        if (n < 0) {\n   \
    \         throw new IllegalArgumentException(\"n must be non-negative\")\n   \
    \     }\n        if (n == 0) {\n            return Nil()\n        }\n        return\
    \ List(2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l, 31l, 37l, 41l, 43l, 47l,\
    \ 53l, 59l, 61l, 67l, 71l, 73l, 79l, 83l, 89l, 97l, 101l, 103l, 107l, 109l, 113l,\
    \ 127l, 131l, 137l, 139l, 149l, 151l, 157l, 163l, 167l, 173l, 179l, 181l, 191l,\
    \ 193l, 197l, 199l, 211l, 223l, 227l, 229l, 233l, 239l, 241l, 251l, 257l, 263l,\
    \ 269l, 271l, 277l, 281l, 283l, 293l, 307l, 311l, 313l, 317l, 331l, 337l, 347l,\
    \ 349l, 353l, 359l, 367l, 373l, 379l, 383l, 389l, 397l, 401l, 409l, 419l, 421l,\
    \ 431l, 433l, 439l, 443l, 449l, 457l, 461l, 463l, 467l, 479l, 487l, 491l, 499l,\
    \ 503l, 509l, 521l, 523l, 541l, 547l, 557l, 563l, 569l, 571l, 577l, 587l, 593l,\
    \ 599l, 601l, 607l, 613l, 617l, 619l, 631l, 641l, 643l, 647l, 653l, 659l, 661l,\
    \ 673l, 677l, 683l, 691l, 701l, 709l, 719l, 727l, 733l, 739l, 743l, 751l, 757l,\
    \ 761l, 769l, 773l, 787l", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        if (n == 0) {\n            return\
    \ Nil$()\n        }\n        return List(2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l,\
    \ 29l, 31l, 37l, 41l, 43l, 47l, 53l, 59l, 61l, 67l, 71l, 73l, 79l, 83l, 89l, 97l,\
    \ 101l, 103l, 107l, 109l, 113l, 127l, 131l, 137l, 139l, 149l, 151l, 157l, 163l,\
    \ 167l, 173l, 179l, 181l, 191l, 193l, 197l, 199l, 211l, 223l, 227l, 229l, 233l,\
    \ 239l, 241l, 251l, 257l, 263l, 269l, 271l, 277l, 281l, 283l, 293l, 307l, 311l,\
    \ 313l, 317l, 331l, 337l, 347l, 349l, 353l, 359l, 367l, 373l, 379l, 383l, 389l,\
    \ 397l, 401l, 409l, 419l, 421l, 431l, 433l, 439l, 443l, 449l, 457l, 461l, 463l,\
    \ 467l, 479l, 487l, 491l, 499l, 503l, 509l, 521l, 523l, 541l, 547l, 557l, 563l,\
    \ 569l, 571l, 577l, 587l, 589l, 593l, 599l, 601l, 607l, 613l, 617l, 619l, 631l,\
    \ 641l, 643l, 647l, 653l, 659l, 661l, 673l, 677l, 683l, 691l, 701l, 709l, 719l,\
    \ 727l, 733l, 739l, 743l, 751l, 757l, 761l, 769l, 773", "        val result =\
    \ List[Long]()\n        for (i <- 0 until n) {\n            if (isPrime(i)) {\n\
    \                result = result.append(i)\n            }\n        }\n       \
    \ return result\n    }\n\n    // Implement a function that takes a non-negative\
    \ integer and returns a list of the first n\n    // integers that are prime numbers\
    \ and greater than n.\n    // for example:\n    // >>> countUpToGreaterThan((5l))\n\
    \    // (List[Long](7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n\
    \    // >>> countUpToGreaterThan((11l))\n    // (List[Long](13l.toLong, 17l.toLong,\
    \ 19l.toLong))\n    // >>> countUpToGreaterThan((0l))\n    // (List[Long]())\n\
    \    // >>> countUpToGreaterThan((20l))\n    // (List[Long](13l.toLong, 17l.toLong,\
    \ 19l.toLong))\n    // >>> countUpToGreaterThan((1l))\n    // (List[Long]())\n\
    \    // >>> countUpToGreaterThan((18l))\n    // (List[Long](13l.toLong, 17l.toLong,\
    \ 19l.toLong))\n    def countUpToGreaterThan(n : Long) : List[Long] = {\n    \
    \    val result = List[Long]()\n        for (i <- 0 until n) {\n            if\
    \ (isPrime(i)) {\n                result = result.append(i)\n            }\n \
    \       }\n        return result\n    }\n\n    // Implement a function that takes\
    \ a non-negative integer and returns a list of the first n\n    // integers that\
    \ are prime numbers and less than or equal to n.\n    // for example:\n    //\
    \ >>> countUpToLessThan((5l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong))\n\
    \    // >>> countUpToLessThan((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l", "        val result = List[Long]()\n        for (i <- 0 until n) {\n  \
    \          if (isPrime(i)) {\n                result = result.append(i)\n    \
    \        }\n        }\n        return result\n    }\n\n    // Implement a function\
    \ that takes a non-negative integer and returns a list of the first n\n    //\
    \ integers that are prime numbers and greater than n.\n    // for example:\n \
    \   // >>> countUpToGreaterThan((5l))\n    // (List[Long](6l.toLong, 7l.toLong,\
    \ 8l.toLong, 9l.toLong, 10l.toLong))\n    // >>> countUpToGreaterThan((11l))\n\
    \    // (List[Long](11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong,\
    \ 29l.toLong))\n    // >>> countUpToGreaterThan((0l))\n    // (List[Long]())\n\
    \    // >>> countUpToGreaterThan((20l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong,\
    \ 29l.toLong))\n    // >>> countUpToGreaterThan((1l))\n    // (List[Long]())\n\
    \    // >>> countUpToGreaterThan((18l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong,\
    \ 29l.toLong))\n    def countUpToGreaterThan(n : Long) : List[Long] = {\n    \
    \    val result = List[Long]()\n        for (i <- 0 until n) {\n            if\
    \ (isPrime(i)) {\n                result = result.append(i)\n            }\n \
    \       }\n        return result\n    }\n\n    // Implement a function that takes\
    \ a non-negative integer and returns a list", "        val result = List[Long]()\n\
    \        for (i <- 0 until n) {\n            if (isPrime(i)) {\n             \
    \   result = result.append(i)\n            }\n        }\n        return result\n\
    \    }\n\n    // Implement a function that takes a list of non-negative integers\
    \ and returns a list of the\n    // first n primes.\n    // for example:\n   \
    \ // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    //\
    \ >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n\
    \    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l))\n    //\
    \ (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong, 19l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l,\
    \ 19l, 23l, 29l, 31l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> primesUpTo((2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l, 31l, 37l))\n    // (List[Long](2l.",
  "        val result = List[Long]()\n        if (n < 0) {\n            throw new\
    \ IllegalArgumentException(\"n must be non-negative\")\n        }\n        if\
    \ (n == 0) {\n            return result\n        }\n        val i = 0\n      \
    \  while (i < n) {\n            val prime = scala.math.factorial(i)\n        \
    \    if (prime > n) {\n                break\n            }\n            result\
    \ = result.append(prime)\n            i = i + 1\n        }\n        return result",
  "        var result = List[Long](0)\n        for (i <- 0 until n) {\n          \
    \  if (isPrime(i)) {\n                result = result.append(i)\n            }\n\
    \        }\n        return result\n    }\n\n    def isPrime(n : Long) : Boolean\
    \ = {\n        if (n == 2) {\n            return true\n        } else if (n <\
    \ 2) {\n            return false\n        } else if (n % 2 == 0) {\n         \
    \   return false\n        } else {\n            for (i <- 3 until Math.sqrt(n))\
    \ {\n                if (n % i == 0) {\n                    return false\n   \
    \             }\n            }\n            return true\n        }", "       \
    \ val result = List[Long]()\n        if (n < 0) {\n            return result\n\
    \        }\n        val i = 0\n        while (i < n) {\n            if (isPrime(i))\
    \ {\n                result = result.append(i)\n            }\n            i =\
    \ i + 1\n        }\n        return result\n    }\n\n    // Implement a function\
    \ that takes a list of non-negative integers and returns a list of the\n    //\
    \ first n prime numbers.\n    // for example:\n    // >>> primesUpTo((2l, 3l,\
    \ 5l, 7l, 11l, 13l, 17l, 19l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    // >>> primesUpTo((2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n   \
    \ // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n\
    \    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l, 31l))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong, 19l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l",
  "        val result = List[Long]()\n        for (i <- 0 until n) {\n           \
    \ if (isPrime(i)) {\n                result = result.append(i)\n            }\n\
    \        }\n        return result\n    }\n\n    def isPrime(n : Long) : Boolean\
    \ = {\n        if (n == 2) {\n            return true\n        } else if (n <\
    \ 2) {\n            return false\n        } else if (n % 2 == 0) {\n         \
    \   return false\n        } else {\n            for (i <- 3 until Math.sqrt(n))\
    \ {\n                if (n % i == 0) {\n                    return false\n   \
    \             }\n            }\n            return true\n        }", "       \
    \ if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    )\n        }\n        val result = List[Long]()\n        for (i <- 0 until n)\
    \ {\n            val prime = i\n            if (prime.isPrime()) {\n         \
    \       result = result.append(prime)\n            }\n        }\n        return\
    \ result", "        val result = List[Long]()\n        for (i <- 0 until n) {\n\
    \            if (isPrime(i)) {\n                result = result.append(i)\n  \
    \          }\n        }\n        return result\n    }\n\n    // Implement a function\
    \ that takes a non-negative integer and returns a list of the first n\n    //\
    \ integers that are prime numbers and greater than n.\n    // for example:\n \
    \   // >>> countUpToGreaterThan((5l))\n    // (List[Long](6l.toLong, 7l.toLong,\
    \ 8l.toLong, 9l.toLong))\n    // >>> countUpToGreaterThan((11l))\n    // (List[Long](13l.toLong,\
    \ 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong))\n    // >>> countUpToGreaterThan((0l))\n\
    \    // (List[Long]())\n    // >>> countUpToGreaterThan((20l))\n    // (List[Long](6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong))\n    // >>> countUpToGreaterThan((1l))\n    // (List[Long]())\n\
    \    // >>> countUpToGreaterThan((18l))\n    // (List[Long](13l.toLong, 17l.toLong,\
    \ 19l.toLong, 23l.toLong, 29l.toLong))\n    def countUpToGreaterThan(n : Long)\
    \ : List[Long] = {\n        val result = List[Long]()\n        for (i <- n + 1\
    \ until n) {\n            if (isPrime(i)) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result\n    }\n\n    // Implement a\
    \ function that takes a non-negative integer and returns a list of the first n\n\
    \    // integers that are prime numbers and greater than or equal to n.\n    //\
    \ for example:\n    // >>> countUpToGreaterThanOrEqual", "        val result =\
    \ List[Long]()\n        for (i <- 0 until n) {\n            if (isPrime(i)) {\n\
    \                result = result.append(i)\n            }\n        }\n       \
    \ return result\n    }\n\n    // Implement a function that takes a non-negative\
    \ integer and returns a list of the first n\n    // integers that are prime numbers\
    \ and greater than n.\n    // for example:\n    // >>> countUpToGreaterThan((5l))\n\
    \    // (List[Long](7l.toLong, 11l.toLong))\n    // >>> countUpToGreaterThan((11l))\n\
    \    // (List[Long](13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpToGreaterThan((0l))\n\
    \    // (List[Long]())\n    // >>> countUpToGreaterThan((20l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n\
    \    // >>> countUpToGreaterThan((1l))\n    // (List[Long]())\n    // >>> countUpToGreaterThan((18l))\n\
    \    // (List[Long](13l.toLong, 17l.toLong, 19l.toLong))\n    def countUpToGreaterThan(n\
    \ : Long) : List[Long] = {\n        val result = List[Long]()\n        for (i\
    \ <- 0 until n) {\n            if (isPrime(i)) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result\n    }\n\n    // Implement a\
    \ function that takes a non-negative integer and returns a list of the first n\n\
    \    // integers that are prime numbers and less than or equal to n.\n    // for\
    \ example:\n    // >>> countUpToLessThan((5l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong))\n    // >>> countUpToLessThan((11l))\n    // (List[Long](2l",
  "        val result = mutable.List[Long]()\n        for (i <- 0 until n) {\n   \
    \         if (isPrime(i)) {\n                result.append(i)\n            }\n\
    \        }\n        result\n    }\n\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 0) {\n            false\n        } else if (n == 1) {\n    \
    \        true\n        } else if (n == 2) {\n            true\n        } else\
    \ if (n % 2 == 0) {\n            false\n        } else {\n            for (i <-\
    \ 3 until n) {\n                if (n % i == 0) {\n                    false\n\
    \                }\n            }\n            true\n        }", "        val\
    \ result = List[Long]()\n        for (i <- 0 until n) {\n            if (isPrime(i))\
    \ {\n                result = result.append(i)\n            }\n        }\n   \
    \     return result\n    }\n\n    def isPrime(n : Long) : Boolean = {\n      \
    \  if (n == 2) {\n            return true\n        } else if (n == 3) {\n    \
    \        return true\n        } else if (n % 2 == 0) {\n            return false\n\
    \        } else if (n % 3 == 0) {\n            return false\n        } else {\n\
    \            for (i <- 4 until Math.sqrt(n)) {\n                if (n % i == 0)\
    \ {\n                    return false\n                }\n            }\n    \
    \        return true\n        }", "        val result = List[Long]()\n       \
    \ for (i <- 0 until n) {\n            val prime = isPrime(i)\n            if (prime)\
    \ {\n                result = result.append(i)\n            }\n        }\n   \
    \     return result\n    }\n\n    // Implement a function that takes a list of\
    \ non-negative integers and returns a list of the\n    // first n primes.\n  \
    \  // for example:\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong, 19l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l,\
    \ 19l, 23l, 29l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> primesUpTo((2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l, 31l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n\
    \    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l, 31l, 37l))\n\
    \    // (", "        val result = List[Long]()\n        if (n < 0) {\n       \
    \     return result\n        }\n        for (i <- 0 until n) {\n            if\
    \ (isPrime(i)) {\n                result = result.append(i)\n            }\n \
    \       }\n        return result", "        if (n < 0) {\n            throw new\
    \ IllegalArgumentException(\"n must be non-negative\")\n        }\n        val\
    \ result = List[Long]()\n        for (i <- 0 until n) {\n            if (isPrime(i))\
    \ {\n                result = result.append(i)\n            }\n        }\n   \
    \     return result\n    }\n\n    def isPrime(n : Long) : Boolean = {\n      \
    \  if (n < 2) {\n            return false\n        } else if (n == 2) {\n    \
    \        return true\n        } else if (n % 2 == 0) {\n            return false\n\
    \        } else {\n            for (i <- 3 until Math.sqrt(n)) {\n           \
    \     if (n % i == 0) {\n                    return false\n                }\n\
    \            }\n            return true\n        }", "        if (n < 0) {\n \
    \           throw new IllegalArgumentException(\"n must be non-negative\")\n \
    \       }\n        val result = List[Long]()\n        for (i <- 0 until n) {\n\
    \            if (isPrime(i)) {\n                result = result.append(i)\n  \
    \          }\n        }\n        return result\n    }\n\n    def isPrime(n : Long)\
    \ : Boolean = {\n        if (n < 2) {\n            return false\n        }\n \
    \       if (n == 2) {\n            return true\n        }\n        if (n % 2 ==\
    \ 0) {\n            return false\n        }\n        if (n % 3 == 0) {\n     \
    \       return false\n        }\n        val b = (n - 1) / 2\n        for (i <-\
    \ 4 until b) {\n            if (n % i == 0) {\n                return false\n\
    \            }\n        }\n        return true", "        val result = List[Long]()\n\
    \        for (i <- 0 until n) {\n            if (isPrime(i)) {\n             \
    \   result = result.append(i)\n            }\n        }\n        return result\n\
    \    }\n\n    // Returns true if the given number is prime.\n    def isPrime(n\
    \ : Long) : Boolean = {\n        if (n == 2) {\n            return true\n    \
    \    } else if (n == 1) {\n            return false\n        } else if (n % 2\
    \ == 0) {\n            return false\n        } else {\n            for (i <- 3\
    \ until Math.sqrt(n)) {\n                if (n % i == 0) {\n                 \
    \   return false\n                }\n            }\n            return true\n\
    \        }", "        val result = List[Long]()\n        val i = 0\n        while\
    \ (i < n) {\n            if (isPrime(i)) {\n                result = result.append(i)\n\
    \            }\n            i += 1\n        }\n        return result\n    }\n\n\
    \    // Returns true if the given number is prime.\n    def isPrime(n : Long)\
    \ : Boolean = {\n        if (n == 2) {\n            return true\n        } else\
    \ if (n == 1) {\n            return false\n        } else if (n % 2 == 0) {\n\
    \            return false\n        } else {\n            val i = 3\n         \
    \   while (i <= Math.sqrt(n)) {\n                if (n % i == 0) {\n         \
    \           return false\n                }\n                i += 2\n        \
    \    }\n            return true\n        }", "        val result = List[Long]()\n\
    \        for (i <- 0 until n) {\n            val prime = i\n            if prime.isPrime()\
    \ {\n                result = result.append(prime)\n            }\n        }\n\
    \        return result", "        val result = List[Long]()\n        if (n < 0)\
    \ {\n            return result\n        }\n        val i = 0\n        while (i\
    \ < n) {\n            val prime = isPrime(i)\n            if (prime) {\n     \
    \           result = result.append(i)\n            }\n            i += 1\n   \
    \     }\n        return result", "        if (n < 0) {\n            throw new\
    \ IllegalArgumentException(\"n must be non-negative\")\n        }\n        if\
    \ (n == 0) {\n            return Nil()\n        }\n        return List(2l, 3l,\
    \ 5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l, 31l, 37l, 41l, 43l, 47l, 53l, 59l, 61l,\
    \ 67l, 71l, 73l, 79l, 83l, 89l, 97l, 101l, 103l, 107l, 109l, 113l, 127l, 131l,\
    \ 137l, 139l, 149l, 151l, 157l, 163l, 167l, 173l, 179l, 181l, 191l, 193l, 197l,\
    \ 199l, 211l, 223l, 227l, 229l, 233l, 239l, 241l, 251l, 257l, 263l, 269l, 271l,\
    \ 277l, 281l, 283l, 293l, 307l, 311l, 313l, 317l, 331l, 337l, 347l, 349l, 353l,\
    \ 359l, 367l, 373l, 379l, 383l, 389l, 397l, 401l, 409l, 419l, 421l, 431l, 433l,\
    \ 439l, 443l, 449l, 457l, 461l, 463l, 467l, 479l, 487l, 491l, 499l, 503l, 509l,\
    \ 521l, 523l, 541l, 547l, 557l, 563l, 569l, 571l, 577l, 587l, 589l, 593l, 599l,\
    \ 601l, 607l, 613l, 617l, 619l, 631l, 641l, 643l, 647l, 653l, 659l, 661l, 673l,\
    \ 677l, 683l, 691l, 701l, 709l, 719l, 727l, 733l, 739l, 743l, 751l, 757l, 761l,\
    \ 769l, 773l", "        val result = mutable.List[Long]()\n        for (i <- 0\
    \ until n) {\n            val prime = i\n            if prime.isPrime() {\n  \
    \              result.append(prime)\n            }\n        }\n        return\
    \ result", "        val result = List[Long]()\n        if (n < 0) {\n        \
    \    return result\n        }\n        val i = 0\n        while (i < n) {\n  \
    \          result.append(i)\n            i = i + 1\n        }\n        return\
    \ result", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        val result = List[Long]()\n    \
    \    if (n == 0) {\n            return result\n        }\n        val i = 0\n\
    \        while (i < n) {\n            result.append(i)\n            i = i + 1\n\
    \        }\n        return result", "        if (n < 0) {\n            throw new\
    \ IllegalArgumentException(\"n must be non-negative\")\n        }\n        val\
    \ result = mutable.List[Long]()\n        for (i <- 0 until n) {\n            if\
    \ (isPrime(i)) {\n                result.append(i)\n            }\n        }\n\
    \        return result\n    }\n\n    def isPrime(n : Long) : Boolean = {\n   \
    \     if (n < 2) {\n            return false\n        }\n        if (n == 2) {\n\
    \            return true\n        }\n        if (n % 2 == 0) {\n            return\
    \ false\n        }\n        for (i <- 3 until Math.sqrt(n)) {\n            if\
    \ (n % i == 0) {\n                return false\n            }\n        }\n   \
    \     return true", "        val result = mutable.List[Long]()\n        for (i\
    \ <- 0 until n) {\n            val prime = isPrime(i)\n            if (prime)\
    \ {\n                result.append(i)\n            }\n        }\n        return\
    \ result\n    }\n\n    // Returns true if the given number is prime.\n    def\
    \ isPrime(n : Long) : Boolean = {\n        if (n == 2) {\n            return true\n\
    \        } else if (n < 2) {\n            return false\n        } else if (n %\
    \ 2 == 0) {\n            return false\n        } else {\n            val max =\
    \ (long)(Math.sqrt(n))\n            for (i <- 3 until max) {\n               \
    \ if (n % i == 0) {\n                    return false\n                }\n   \
    \         }\n            return true\n        }", "        val result = List[Long]()\n\
    \        for (i <- 0 until n) {\n            if (isPrime(i)) {\n             \
    \   result = result.append(i)\n            }\n        }\n        return result\n\
    \    }\n\n    def isPrime(n : Long) : Boolean = {\n        if (n == 2) {\n   \
    \         return true\n        } else if (n < 2) {\n            return false\n\
    \        } else if (n % 2 == 0) {\n            return false\n        } else {\n\
    \            for (i <- 3 until Math.sqrt(n)) {\n                if (n % i == 0)\
    \ {\n                    return false\n                }\n            }\n    \
    \        return true\n        }", "        val result = mutable.List[Long]()\n\
    \        for (i <- 0 until n) {\n            if (isPrime(i)) {\n             \
    \   result.append(i)\n            }\n        }\n        result\n    }\n\n    def\
    \ isPrime(n : Long) : Boolean = {\n        if (n == 2) {\n            true\n \
    \       } else if (n < 2) {\n            false\n        } else if (n % 2 == 0)\
    \ {\n            false\n        } else {\n            for (i <- 3 until Math.sqrt(n))\
    \ {\n                if (n % i == 0) {\n                    false\n          \
    \      }\n            }\n            true\n        }", "        val result = List[Long]()\n\
    \        for (i <- 0 until n) {\n            if (isPrime(i)) {\n             \
    \   result = result.append(i)\n            }\n        }\n        return result\n\
    \    }\n\n    // Implement a function that takes a non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and greater than\
    \ n.\n    // for example:\n    // >>> countUpToGreaterThan((5l))\n    // (List[Long](6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))\n    // >>> countUpToGreaterThan((11l))\n\
    \    // (List[Long](13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong))\n\
    \    // >>> countUpToGreaterThan((0l))\n    // (List[Long]())\n    // >>> countUpToGreaterThan((20l))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong))\n    // >>> countUpToGreaterThan((1l))\n\
    \    // (List[Long]())\n    // >>> countUpToGreaterThan((18l))\n    // (List[Long](13l.toLong,\
    \ 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong))\n    def countUpToGreaterThan(n\
    \ : Long) : List[Long] = {\n        val result = List[Long]()\n        for (i\
    \ <- 0 until n) {\n            if (isPrime(i)) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result\n    }\n\n    // Implement a\
    \ function that takes a non-negative integer and returns a list of the first n\n\
    \    // integers that are prime numbers and less than or equal to n.\n    // for\
    \ example:\n    // >>> countUpToLessThan((5l))\n    ", "        val result = List[Long]()\n\
    \        for (i <- 0 until n) {\n            if (isPrime(i)) {\n             \
    \   result = result.append(i)\n            }\n        }\n        return result",
  "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be\
    \ non-negative\")\n        }\n        val result = List[Long]()\n        for (i\
    \ <- 0 until n) {\n            if (isPrime(i)) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result\n    }\n\n    private boolean\
    \ isPrime(Long i) {\n        if (i == 0) {\n            return false\n       \
    \ }\n        if (i == 1) {\n            return true\n        }\n        if (i\
    \ == 2) {\n            return true\n        }\n        if (i % 2 == 0) {\n   \
    \         return false\n        }\n        if (i % 3 == 0) {\n            return\
    \ false\n        }\n        for (j <- 5 until i) {\n            if (i % j == 0)\
    \ {\n                return false\n            }\n        }\n        return true",
  "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be\
    \ non-negative\")\n        }\n        val result = List[Long]()\n        for (i\
    \ <- 0 until n) {\n            val prime = isPrime(i)\n            if (prime)\
    \ {\n                result = result.append(i)\n            }\n        }\n   \
    \     return result\n    }\n\n    // Implement a function that takes a non-negative\
    \ integer and returns a list of the first n\n    // prime numbers.\n    // for\
    \ example:\n    // >>> primesUpTo((5l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong))\n    // >>> primesUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong))\n    // >>> primesUpTo((0l))\n    // (List[Long]())\n\
    \    // >>> primesUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> primesUpTo((1l))\n\
    \    // (List[Long]())\n    // >>> primesUpTo((18l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def\
    \ primesUpTo(n : Long) : List[Long] = {\n        if (n < 0) {\n            throw\
    \ new IllegalArgumentException(\"n must be non-negative\")\n        }\n      \
    \  val result = List[Long]()\n        for (i <- 0 until n) {\n            val\
    \ prime = isPrime(i)\n            if (prime) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result\n    }\n\n    // Implement a\
    \ function that takes a non-negative integer and returns a list of the first n\n\
    \    ", "        var result = List[Long](0)\n        var i = 0\n        while\
    \ (i < n) {\n            result = result.append(i)\n            i = i + 1\n  \
    \      }\n        return result", "        if (n < 0) {\n            throw new\
    \ IllegalArgumentException(\"n must be non-negative\")\n        }\n        val\
    \ result = List[Long]()\n        for (i <- 0 until n) {\n            val prime\
    \ = i + 1\n            if (prime % 2 == 0) {\n                prime = prime /\
    \ 2\n            }\n            if (prime % 3 == 0) {\n                prime =\
    \ prime / 3\n            }\n            if (prime % 5 == 0) {\n              \
    \  prime = prime / 5\n            }\n            if (prime % 7 == 0) {\n     \
    \           prime = prime / 7\n            }\n            if (prime % 11 == 0)\
    \ {\n                prime = prime / 11\n            }\n            if (prime\
    \ % 13 == 0) {\n                prime = prime / 13\n            }\n          \
    \  if (prime % 17 == 0) {\n                prime = prime / 17\n            }\n\
    \            if (prime % 19 == 0) {\n                prime = prime / 19\n    \
    \        }\n            if (prime % 23 == 0) {\n                prime = prime\
    \ / 23\n            }\n            if (prime % 29 == 0) {\n                prime\
    \ = prime / 29\n            }\n            if (prime % 31 == 0) {\n          \
    \      prime = prime / 31\n            }\n            if (prime % 37 == 0) {\n\
    \                prime = prime / 37\n            }\n            if (prime % 41\
    \ == 0) {\n                prime = prime / 41\n            }\n            if (prime\
    \ % 43 == 0) {\n                prime = prime / 43\n            }\n          \
    \  if (prime % 47 == 0) {\n                prime = prime / 47\n            }\n\
    \            if (prime % 53 == 0) {\n                prime = prime / 53\n    \
    \        }\n            if (prime % 59 == 0) {\n                prime = prime\
    \ / 59\n            }\n            if (prime % 61 == 0) {\n                prime\
    \ = prime / 61\n            }\n            if (prime % 67 == 0) {\n          \
    \      prime = prime / 67\n            }\n            if (prime % 71 == 0) {\n\
    \                prime = prime / 71\n            }\n            if (prime % 73\
    \ == 0) {\n                prime = prime / 73\n            }\n            if (prime\
    \ % 79 == 0) {\n                prime =", "        val result = List[Long]()\n\
    \        if (n < 0) {\n            return result\n        }\n        val i = 0\n\
    \        while (i < n) {\n            val prime = isPrime(i)\n            if (prime)\
    \ {\n                result = result.append(i)\n            }\n            i +=\
    \ 1\n        }\n        return result\n    }\n\n    // Implement a function that\
    \ takes a non-negative integer and returns a list of the first n\n    // integers\
    \ that are prime numbers and greater than n.\n    // for example:\n    // >>>\
    \ countUpToGreaterThan((5l))\n    // (List[Long](6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong, 10l.toLong))\n    // >>> countUpToGreaterThan((11l))\n    // (List[Long](11l.toLong,\
    \ 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong,\
    \ 41l.toLong))\n    // >>> countUpToGreaterThan((0l))\n    // (List[Long]())\n\
    \    // >>> countUpToGreaterThan((20l))\n    // (List[Long](6l.toLong, 7l.toLong,\
    \ 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong,\
    \ 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong,\
    \ 83l.toLong, 89l.toLong, 97l.toLong))\n    // >>> countUpToGreaterThan((1l))\n\
    \    // (List[Long]())\n    // >>> countUpToGreaterThan((18l))\n    // (List[Long](6l.toLong,\
    \ 7", "        val result = List[Long]()\n        if (n < 0) {\n            return\
    \ result\n        }\n        val i = 0l\n        while (i < n) {\n           \
    \ if (isPrime(i)) {\n                result = result.append(i)\n            }\n\
    \            i += 1l\n        }\n        return result\n    }\n\n    // Returns\
    \ true if the given number is prime.\n    def isPrime(n : Long) : Boolean = {\n\
    \        if (n == 0) {\n            return false\n        }\n        if (n ==\
    \ 1) {\n            return true\n        }\n        if (n == 2) {\n          \
    \  return true\n        }\n        if (n % 2 == 0) {\n            return false\n\
    \        }\n        if (n % 3 == 0) {\n            return false\n        }\n \
    \       val i = 5l\n        while (i * i <= n) {\n            if (n % i == 0)\
    \ {\n                return false\n            }\n            i += 2l\n      \
    \  }\n        return true", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        if (n == 0) {\n            return\
    \ Nil()\n        }\n        return List(2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l,\
    \ 29l, 31l, 37l, 41l, 43l, 47l, 53l, 59l, 61l, 67l, 71l, 73l, 79l, 83l, 89l, 97l,\
    \ 101l, 103l, 107l, 109l, 113l, 127l, 131l, 137l, 139l, 149l, 151l, 157l, 163l,\
    \ 167l, 173l, 179l, 181l, 191l, 193l, 197l, 199l, 211l, 223l, 227l, 229l, 233l,\
    \ 239l, 241l, 251l, 257l, 263l, 269l, 271l, 277l, 281l, 283l, 293l, 307l, 311l,\
    \ 313l, 317l, 331l, 337l, 347l, 349l, 353l, 359l, 367l, 373l, 379l, 383l, 389l,\
    \ 397l, 401l, 409l, 419l, 421l, 431l, 433l, 439l, 443l, 449l, 457l, 461l, 463l,\
    \ 467l, 479l, 487l, 491l, 499l, 503l, 509l, 521l, 523l, 541l, 547l, 557l, 563l,\
    \ 569l, 571l, 577l, 587l, 589l, 593l, 599l, 601l, 607l, 613l, 617l, 619l, 631l,\
    \ 641l, 643l, 647l, 653l, 659l, 661l, 673l, 677l, 683l, 691l, 701l, 709l, 719l,\
    \ 727l, 733l, 739l, 743l, 751l, 757l, 761l, 769l, 773l", "        val result =\
    \ List[Long]()\n        if (n < 0) {\n            result = List[Long]()\n    \
    \    } else {\n            for (i <- 0 until n) {\n                val prime =\
    \ i\n                if (prime.isPrime()) {\n                    result = result.append(prime)\n\
    \                }\n            }\n        }\n        return result", "      \
    \  val result = List[Long]()\n        for (i <- 0 until n) {\n            if (isPrime(i))\
    \ {\n                result = result.append(i)\n            }\n        }\n   \
    \     return result\n    }\n\n    def isPrime(n : Long) : Boolean = {\n      \
    \  if (n == 0) {\n            return false\n        } else if (n == 1) {\n   \
    \         return true\n        } else if (n == 2) {\n            return true\n\
    \        } else if (n % 2 == 0) {\n            return false\n        } else {\n\
    \            for (i <- 3 until Math.sqrt(n)) {\n                if (n % i == 0)\
    \ {\n                    return false\n                }\n            }\n    \
    \        return true\n        }", "        var result = List[Long]()\n       \
    \ var i = 2L\n        while (i < n) {\n            if (n % i == 0) {\n       \
    \         result = result.append(i)\n                i = i + 1\n            }\
    \ else {\n                i = i + 1\n            }\n        }\n        result",
  "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be\
    \ non-negative\")\n        }\n        val result = List[Long]()\n        for (i\
    \ <- 0 until n) {\n            if (isPrime(i)) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result\n    }\n\n    private def isPrime(n\
    \ : Long) : Boolean = {\n        if (n < 2) {\n            return false\n    \
    \    } else if (n == 2) {\n            return true\n        } else if (n % 2 ==\
    \ 0) {\n            return false\n        } else {\n            for (i <- 3 until\
    \ Math.sqrt(n)) {\n                if (n % i == 0) {\n                    return\
    \ false\n                }\n            }\n            return true\n        }",
  "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be\
    \ non-negative\")\n        }\n        val result = List[Long]()\n        if (n\
    \ == 0) {\n            return result\n        }\n        val i = 1L\n        while\
    \ (i <= n) {\n            if (isPrime(i)) {\n                result = result.append(i)\n\
    \            }\n            i = i + 1L\n        }\n        return result\n   \
    \ }\n\n    def isPrime(n : Long) : Boolean = {\n        if (n < 2) {\n       \
    \     return false\n        }\n        if (n == 2) {\n            return true\n\
    \        }\n        if (n % 2 == 0) {\n            return false\n        }\n \
    \       if (n < 4) {\n            return true\n        }\n        if (n % 2 ==\
    \ 0) {\n            return false\n        }\n        if (n < 9) {\n          \
    \  return true\n        }\n        if (n % 3 == 0) {\n            return false\n\
    \        }\n        if (n < 27) {\n            return true\n        }\n      \
    \  if (n % 3 == 0) {\n            return false\n        }\n        if (n < 31)\
    \ {\n            return true\n        }\n        if (n % 5 == 0) {\n         \
    \   return false\n        }\n        if (n < 61) {\n            return true\n\
    \        }\n        if (n % 5 == 0) {\n            return false\n        }\n \
    \       if (n < 91) {\n            return true\n        }\n        if (n % 7 ==\
    \ 0) {\n            return false\n        }\n        if (n < 127) {\n        \
    \    return true\n        }\n        if (n % 7 == 0) {\n            return false\n\
    \        }\n        if (n < 181) {\n            return true\n        }\n     \
    \   if (n % 11 == 0) {\n            return false\n        }\n        if (n < 251)\
    \ {\n            return true\n        }\n        if (n % 11 == 0) {\n        \
    \    return false\n        }\n        if (n < 383) {\n            return true\n\
    \        }\n        if (n % 13 == 0) {\n            return false\n", "       \
    \ val result = List[Long]()\n        for (i <- 0 until n) {\n            if (isPrime(i))\
    \ {\n                result += i\n            }\n        }\n        return result\n\
    \    }\n\n    def isPrime(n : Long) : Boolean = {\n        if (n == 2) {\n   \
    \         return true\n        } else if (n < 2) {\n            return false\n\
    \        } else if (n % 2 == 0) {\n            return false\n        } else {\n\
    \            for (i <- 3 until Math.sqrt(n)) {\n                if (n % i == 0)\
    \ {\n                    return false\n                }\n            }\n    \
    \        return true\n        }", "        val result = List[Long]()\n       \
    \ if (n < 0) {\n            return result\n        }\n        val i = 0\n    \
    \    while (i < n) {\n            result.append(i)\n            i = i + 1\n  \
    \      }\n        return result", "        val result = List[Long]()\n       \
    \ if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    )\n        }\n        if (n == 0) {\n            return result\n        }\n  \
    \      val i = n\n        while (i > 0) {\n            result.append(i)\n    \
    \        i -= 1\n        }\n        return result", "        if (n < 0) {\n  \
    \          throw new IllegalArgumentException(\"n must be non-negative\")\n  \
    \      }\n        val result = List[Long]()\n        for (i <- 0 until n) {\n\
    \            if (isPrime(i)) {\n                result = result.append(i)\n  \
    \          }\n        }\n        return result\n    }\n\n    private def isPrime(n\
    \ : Long) : Boolean = {\n        if (n < 2) {\n            return false\n    \
    \    }\n        if (n == 2) {\n            return true\n        }\n        if\
    \ (n % 2 == 0) {\n            return false\n        }\n        for (i <- 3 until\
    \ Math.sqrt(n)) {\n            if (n % i == 0) {\n                return false\n\
    \            }\n        }\n        return true", "        val result = List[Long]()\n\
    \        if (n < 0) {\n            result = List[Long]()\n        } else {\n \
    \           val i = 0\n            while (i < n) {\n                val prime\
    \ = scala.math.factorial(i)\n                if (prime > n) {\n              \
    \      break\n                }\n                result = result.append(prime)\n\
    \                i = i + 1\n            }\n        }\n        return result",
  "        val result = mutable.List[Long]()\n        for (i <- 0 until n) {\n   \
    \         if (isPrime(i)) {\n                result.append(i)\n            }\n\
    \        }\n        return result\n    }\n\n    def isPrime(n : Long) : Boolean\
    \ = {\n        if (n == 2) {\n            return true\n        } else if (n <\
    \ 2) {\n            return false\n        } else if (n % 2 == 0) {\n         \
    \   return false\n        } else {\n            for (i <- 3 until Math.sqrt(n))\
    \ {\n                if (n % i == 0) {\n                    return false\n   \
    \             }\n            }\n            return true\n        }", "       \
    \ val result = List[Long]()\n        for (i <- 0 until n) {\n            if (isPrime(i))\
    \ {\n                result += i\n            }\n        }\n        return result\n\
    \    }\n\n    def isPrime(n : Long) : Boolean = {\n        if (n == 2) {\n   \
    \         return true\n        } else if (n < 2) {\n            return false\n\
    \        } else if (n % 2 == 0) {\n            return false\n        } else {\n\
    \            for (i <- 3 until Math.sqrt(n)) {\n                if (n % i == 0)\
    \ {\n                    return false\n                }\n            }\n    \
    \        return true\n        }", "        if (n < 0) {\n            throw new\
    \ IllegalArgumentException(\"n must be non-negative\")\n        }\n        val\
    \ result = List[Long]()\n        for (i <- 0 until n) {\n            if (isPrime(i))\
    \ {\n                result = result.append(i)\n            }\n        }\n   \
    \     return result\n    }\n\n    // Returns true if the given number is prime.\n\
    \    def isPrime(n : Long) : Boolean = {\n        if (n < 2) {\n            return\
    \ false\n        }\n        if (n == 2) {\n            return true\n        }\n\
    \        if (n % 2 == 0) {\n            return false\n        }\n        val max\
    \ = (long)(Math.sqrt(n))\n        for (i <- 3 until max) {\n            if (n\
    \ % i == 0) {\n                return false\n            }\n        }\n      \
    \  return true", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        if (n == 0) {\n            return\
    \ Nil()\n        }\n        return Cons(2l, countUpTo(n - 1))", "        val result\
    \ = List[Long]()\n        for (i <- 0 until n) {\n            if (isPrime(i))\
    \ {\n                result = result.append(i)\n            }\n        }\n   \
    \     return result\n    }\n\n    // Implement a function that takes a list of\
    \ non-negative integers and returns a list of the\n    // first n primes.\n  \
    \  // for example:\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l))\n\
    \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong, 19l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l,\
    \ 19l, 23l, 29l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong))\n    // >>> primesUpTo((2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l, 31l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l,\
    \ 29l, 31l, 37l", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        if (n == 0) {\n            return\
    \ Nil()\n        }\n        return List(2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l,\
    \ 29l, 31l, 37l, 41l, 43l, 47l, 53l, 59l, 61l, 67l, 71l, 73l, 79l, 83l, 89l, 97l,\
    \ 101l, 103l, 107l, 109l, 113l, 127l, 131l, 137l, 139l, 149l, 151l, 157l, 163l,\
    \ 167l, 173l, 179l, 181l, 191l, 193l, 197l, 199l, 211l, 223l, 227l, 229l, 233l,\
    \ 239l, 241l, 251l, 257l, 263l, 269l, 271l, 277l, 281l, 283l, 293l, 307l, 311l,\
    \ 313l, 317l, 331l, 337l, 347l, 349l, 353l, 359l, 367l, 373l, 379l, 383l, 389l,\
    \ 397l, 401l, 409l, 419l, 421l, 431l, 433l, 439l, 443l, 449l, 457l, 461l, 463l,\
    \ 467l, 479l, 487l, 491l, 499l, 503l, 509l, 521l, 523l, 541l, 547l, 557l, 563l,\
    \ 569l, 571l, 577l, 587l, 589l, 593l, 599l, 601l, 607l, 613l, 617l, 619l, 631l,\
    \ 641l, 643l, 647l, 653l, 659l, 661l, 673l, 677l, 683l, 691l, 701l, 709l, 719l,\
    \ 727l, 733l, 739l, 743l, 751l, 757l, 761l, 769l, 773l", "        val result =\
    \ List[Long]()\n        for (i <- 0 until n) {\n            if (isPrime(i)) {\n\
    \                result = result.append(i)\n            }\n        }\n       \
    \ return result\n    }\n\n    // Implement a function that takes a list of non-negative\
    \ integers and returns a list of the\n    // first n primes.\n    // for example:\n\
    \    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    //\
    \ >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l))\n    // (List[Long](2l.toLong,\
    \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n\
    \    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l))\n    //\
    \ (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong, 19l.toLong))\n    // >>> primesUpTo((2l, 3l, 5l, 7l, 11l, 13l, 17l,\
    \ 19l, 23l, 29l, 31l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> primesUpTo((2l,\
    \ 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l, 31l, 37l))\n    // (List[Long](2l.",
  "        val result = List[Long]()\n        for (i <- 0 until n) {\n           \
    \ if (isPrime(i)) {\n                result = result.append(i)\n            }\n\
    \        }\n        return result\n    }\n\n    def isPrime(n : Long) : Boolean\
    \ = {\n        if (n == 2) {\n            return true\n        } else if (n <\
    \ 2) {\n            return false\n        } else if (n % 2 == 0) {\n         \
    \   return false\n        } else {\n            for (i <- 3 until Math.sqrt(n))\
    \ {\n                if (n % i == 0) {\n                    return false\n   \
    \             }\n            }\n            return true\n        }", "       \
    \ if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    )\n        }\n        val result = List[Long]()\n        for (i <- 0 until n)\
    \ {\n            val prime = i\n            if (prime.isPrime()) {\n         \
    \       result = result.append(prime)\n            }\n        }\n        return\
    \ result", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        val result = List[Long]()\n    \
    \    for (i <- 0 until n) {\n            if (isPrime(i)) {\n                result\
    \ = result.append(i)\n            }\n        }\n        return result\n    }\n\
    \n    // Returns true if the given number is prime.\n    def isPrime(n : Long)\
    \ : Boolean = {\n        if (n < 2) {\n            return false\n        }\n \
    \       if (n == 2) {\n            return true\n        }\n        if (n % 2 ==\
    \ 0) {\n            return false\n        }\n        for (i <- 3 until Math.sqrt(n))\
    \ {\n            if (n % i == 0) {\n                return false\n           \
    \ }\n        }\n        return true", "        if (n < 0) {\n            throw\
    \ new IllegalArgumentException(\"n must be non-negative\")\n        }\n      \
    \  val result = List[Long]()\n        if (n == 0) {\n            return result\n\
    \        }\n        val i = 1l\n        while (i < n) {\n            result =\
    \ result.append(i)\n            i = i + 1l\n        }\n        return result",
  "        var result = List[Long](0)\n        for (i <- 0 until n) {\n          \
    \  if (isPrime(i)) {\n                result = result.append(i)\n            }\n\
    \        }\n        return result\n    }\n\n    def isPrime(n : Long) : Boolean\
    \ = {\n        if (n == 2) {\n            return true\n        } else if (n <\
    \ 2) {\n            return false\n        } else if (n % 2 == 0) {\n         \
    \   return false\n        } else {\n            for (i <- 3 until Math.sqrt(n))\
    \ {\n                if (n % i == 0) {\n                    return false\n   \
    \             }\n            }\n            return true\n        }", "       \
    \ val result = List[Long]()\n        for (i <- 0 until n) {\n            if (isPrime(i))\
    \ {\n                result = result.append(i)\n            }\n        }\n   \
    \     return result\n    }\n\n    def isPrime(n : Long) : Boolean = {\n      \
    \  if (n == 2) {\n            return true\n        } else if (n < 2) {\n     \
    \       return false\n        } else if (n % 2 == 0) {\n            return false\n\
    \        } else {\n            for (i <- 3 until Math.sqrt(n)) {\n           \
    \     if (n % i == 0) {\n                    return false\n                }\n\
    \            }\n            return true\n        }", "        val result = List[Long]()\n\
    \        for (i <- 0 until n) {\n            if (isPrime(i)) {\n             \
    \   result = result.append(i)\n            }\n        }\n        return result\n\
    \    }\n\n    // Implement a function that takes a non-negative integer and returns\
    \ a list of the first n\n    // integers that are prime numbers and greater than\
    \ n.\n    // for example:\n    // >>> countUpToGreaterThan((5l))\n    // (List[Long](6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))\n    // >>> countUpToGreaterThan((11l))\n\
    \    // (List[Long](13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong))\n\
    \    // >>> countUpToGreaterThan((0l))\n    // (List[Long]())\n    // >>> countUpToGreaterThan((20l))\n\
    \    // (List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 13l.toLong,\
    \ 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong))\n    // >>> countUpToGreaterThan((1l))\n\
    \    // (List[Long]())\n    // >>> countUpToGreaterThan((18l))\n    // (List[Long](13l.toLong,\
    \ 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong))\n    def countUpToGreaterThan(n\
    \ : Long) : List[Long] = {\n        val result = List[Long]()\n        for (i\
    \ <- 0 until n) {\n            if (isPrime(i)) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result\n    }\n\n    // Implement a\
    \ function that takes a non-negative integer and returns a list of the first n\n\
    \    // integers that are prime numbers and less than or equal to n.\n    // for\
    \ example:\n    // >>> countUpToLessThan((5l))\n    ", "        if (n < 0) {\n\
    \            throw new IllegalArgumentException(\"n must be non-negative\")\n\
    \        }\n        val result = List[Long]()\n        for (i <- 0 until n) {\n\
    \            val prime = isPrime(i)\n            if (prime) {\n              \
    \  result = result.append(i)\n            }\n        }\n        return result",
  "        val result = List[Long]()\n        for (i <- 0 until n) {\n           \
    \ if (isPrime(i)) {\n                result = result.append(i)\n            }\n\
    \        }\n        return result\n    }\n\n    // Implement a function that takes\
    \ a list of non-negative integers and returns the sum of the\n    // integers\
    \ in the list.\n    // for example:\n    // >>> sumUp([1, 2, 3])\n    // 6\n \
    \   // >>> sumUp([1, 2, 3, 4])\n    // 10\n    // >>> sumUp([])\n    // 0\n  \
    \  // >>> sumUp([1, 2, 3, 4, 5])\n    // 15\n    // >>> sumUp([1, 2, 3, 4, 5,\
    \ 6])\n    // 21\n    def sumUp(nums : List[Long]) : Long = {\n        val result\
    \ = 0l\n        for (i <- 0 until nums.length) {\n            result = result\
    \ + nums[i]\n        }\n        return result\n    }\n\n    // Implement a function\
    \ that takes a list of non-negative integers and returns the product of the\n\
    \    // integers in the list.\n    // for example:\n    // >>> productUp([1, 2,\
    \ 3])\n    // 6\n    // >>> productUp([1, 2, 3, 4])\n    // 24\n    // >>> productUp([])\n\
    \    // 1\n    // >>> productUp([1, 2, 3, 4, 5])\n    // 120\n    // >>> productUp([1,\
    \ 2, 3, 4, 5, 6])\n    // 720\n    def productUp(nums : List[Long]) : Long = {\n\
    \        val result = 1l\n        for (i <- 0 until nums.length) {\n         \
    \   result = result * nums[i]\n        }\n        return result\n    }\n\n   \
    \ // Implement a function that takes a list of non-negative integers and returns\
    \ the product of the\n    // integers in the list.\n    // for example:\n    //\
    \ >>> productUp([1, 2, 3])\n    // 6\n    // >>> productUp([1, 2, 3, 4])\n   \
    \ // 24\n    // >>> productUp([])\n    // 1\n    // >>>", "        if (n < 0)\
    \ {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    )\n        }\n        val result = List[Long]()\n        for (i <- 0 until n)\
    \ {\n            if (isPrime(i)) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result\n    }\n\n    // Implement a\
    \ function that takes a non-negative integer and returns a list of the first n\n\
    \    // integers that are prime numbers and greater than n.\n    // for example:\n\
    \    // >>> countUpToGreaterThan((5l))\n    // (List[Long](6l.toLong, 7l.toLong,\
    \ 8l.toLong, 9l.toLong))\n    // >>> countUpToGreaterThan((11l))\n    // (List[Long](13l.toLong,\
    \ 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong))\n    // >>> countUpToGreaterThan((0l))\n\
    \    // (List[Long]())\n    // >>> countUpToGreaterThan((20l))\n    // (List[Long](6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
    \ 23l.toLong, 29l.toLong))\n    // >>> countUpToGreaterThan((1l))\n    // (List[Long]())\n\
    \    // >>> countUpToGreaterThan((18l))\n    // (List[Long](13l.toLong, 17l.toLong,\
    \ 19l.toLong, 23l.toLong, 29l.toLong))\n    def countUpToGreaterThan(n : Long)\
    \ : List[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        val result = List[Long]()\n    \
    \    for (i <- 0 until n) {\n            if (isPrime(i)) {\n                result\
    \ = result.append(i)\n            }\n        }\n        return result\n    }\n\
    \n    //", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        val result = List[Long]()\n    \
    \    for (i <- 0 until n) {\n            if (isPrime(i)) {\n                result\
    \ = result.append(i)\n            }\n        }\n        return result\n    }\n\
    \n    def isPrime(n : Long) : Boolean = {\n        if (n < 2) {\n            return\
    \ false\n        }\n        if (n == 2) {\n            return true\n        }\n\
    \        if (n % 2 == 0) {\n            return false\n        }\n        for (i\
    \ <- 3 until Math.sqrt(n)) {\n            if (n % i == 0) {\n                return\
    \ false\n            }\n        }\n        return true", "        if (n < 0) {\n\
    \            throw new IllegalArgumentException(\"n must be non-negative\")\n\
    \        }\n        val result = List[Long]()\n        for (i <- 0 until n) {\n\
    \            val prime = i\n            if (prime.isPrime()) {\n             \
    \   result = result.append(prime)\n            }\n        }\n        return result"]
stop_tokens:
- "\n    }\n"
