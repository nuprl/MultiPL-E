{
  "name": "HumanEval_47_median",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (_.toFloat(l.get(l.length() / 2 - 1) + l.get(l.length() / 2)) / 2.0f)\n        } else {\n            return _.toFloat(l.get(l.length() / 2))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprtx2w6ft.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmprtx2w6ft.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmprtx2w6ft.scala:12:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m) + l.get(l.length() / \u001b[31m2\u001b[0m)) / \u001b[31m2.0f\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m_$1 => _$1.toFloat(l.get(l.length() / 2 - 1) + l.get(l.length() / 2)) / \u001b[31m2.0f\u001b[0m.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmprtx2w6ft.scala:14:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m _.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.toFloat(l.get(l.length() / 2)).\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4 - 1\n        var l6 = l5 + 1\n        var l7 = l6.toInt\n        var l8 = l7.toInt\n        var l9 = l8.toInt\n        var l10 = l9.toInt\n        var l11 = l10.toInt\n        var l12 = l11.toInt\n        var l13 = l12.toInt\n        var l14 = l13.toInt\n        var l15 = l14.toInt\n        var l16 = l15.toInt\n        var l17 = l16.toInt\n        var l18 = l17.toInt\n        var l19 = l18.toInt\n        var l20 = l19.toInt\n        var l21 = l20.toInt\n        var l22 = l21.toInt\n        var l23 = l22.toInt\n        var l24 = l23.toInt\n        var l25 = l24.toInt\n        var l26 = l25.toInt\n        var l27 = l26.toInt\n        var l28 = l27.toInt\n        var l29 = l28.toInt\n        var l30 = l29.toInt\n        var l31 = l30.toInt\n        var l32 = l31.toInt\n        var l33 = l32.toInt\n        var l34 = l33.toInt\n        var l35 = l34.toInt\n        var l36 = l35.toInt\n        var l37 = l36.toInt\n        var l38 = l37.toInt\n        var l39 = l38.toInt\n        var l40 = l39.toInt\n        var l41 = l40.toInt\n        var l42 = l41.toInt\n        var l43 = l42.toInt\n        var l44 = l43.toInt\n        var l45 = l44.toInt\n        var l46 = l45.toInt\n        var l47 = l46.toInt\n        var l48 = l47.toInt\n\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpge5vogi5.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge5vogi5.scala:58:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return l.head\n        } else {\n            return (l.head + l.tail.head) / 2.0f\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4rfh3wp_.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp4rfh3wp_.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var result = 0.0f\n        var size = l.size()\n        var i = 0\n        while (i < size) {\n            var j = i + 1\n            while (j < size && l.apply(j) < l.apply(i)) {\n                j = j + 1\n            }\n            if (j == size) {\n                result = l.apply(i)\n            } else {\n                result = (l.apply(i) + l.apply(j)) / 2.0f\n            }\n            i = j\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293294,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp_zag17_w.scala:11:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msize\u001b[0m = l.size()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   \u001b[33mmethod\u001b[0m \u001b[35msize\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mSeqOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var result = 0.0f\n        var size = l.size()\n        if (size == 0) {\n            return result\n        }\n        var mid = size / 2\n        var low = 0\n        var high = size - 1\n        var midValue = l.apply(mid)\n        var lowValue = l.apply(low)\n        var highValue = l.apply(high)\n        if (lowValue > midValue) {\n            result = highValue\n        } else if (highValue < midValue) {\n            result = lowValue\n        } else {\n            result = (lowValue + highValue) / 2.0f\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpk4o85way.scala:11:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msize\u001b[0m = l.size()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   \u001b[33mmethod\u001b[0m \u001b[35msize\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mSeqOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l(l.length() / 2).toFloat)\n        } else {\n            return ((l(l.length() / 2 - 1).toFloat) + (l(l.length() / 2).toFloat)) / 2.0f\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplcw7c72n.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmplcw7c72n.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmplcw7c72n.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m).toFloat)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmplcw7c72n.scala:14:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m ((l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m).toFloat) + (l(l.length() / \u001b[31m2\u001b[0m).toFloat)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmplcw7c72n.scala:14:59 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m ((l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m).toFloat) + (l(l.length() / \u001b[31m2\u001b[0m).toFloat)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mLis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (float) l.get(l.length() / 2)\n        } else {\n            return (float) (l.get(l.length() / 2) + l.get(l.length() / 2 - 1)) / 2\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmppjajr51f.scala:12:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (float) l.get(l.length() / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            expression expected but \u001b[31m'.'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppjajr51f.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmppjajr51f.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppjajr51f.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (float) l.get(l.length() / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppjajr51f.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m (float) (l.get(l.length() / \u001b[31m2\u001b[0m) + l.get(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppjajr51f.scala:14:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m (float) (l.get(l.length() / \u001b[31m2\u001b[0m) + l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length % 2 == 0) {\n            return (l(l.length / 2) + l(l.length / 2 - 1)) / 2.0f\n        } else {\n            return l(l.length / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj49_7pdh.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3.toInt\n        var l5 = l4.toInt\n        var l6 = l5.toInt\n        var l7 = l6.toInt\n        var l8 = l7.toInt\n        var l9 = l8.toInt\n        var l10 = l9.toInt\n        var l11 = l10.toInt\n        var l12 = l11.toInt\n        var l13 = l12.toInt\n        var l14 = l13.toInt\n        var l15 = l14.toInt\n        var l16 = l15.toInt\n        var l17 = l16.toInt\n        var l18 = l17.toInt\n        var l19 = l18.toInt\n        var l20 = l19.toInt\n        var l21 = l20.toInt\n        var l22 = l21.toInt\n        var l23 = l22.toInt\n        var l24 = l23.toInt\n        var l25 = l24.toInt\n        var l26 = l25.toInt\n        var l27 = l26.toInt\n        var l28 = l27.toInt\n        var l29 = l28.toInt\n        var l30 = l29.toInt\n        var l31 = l30.toInt\n        var l32 = l31.toInt\n        var l33 = l32.toInt\n        var l34 = l33.toInt\n        var l35 = l34.toInt\n        var l36 = l35.toInt\n        var l37 = l36.toInt\n        var l38 = l37.toInt\n        var l39 = l38.toInt\n        var l40 = l39.toInt\n        var l41 = l40.toInt\n        var l42 = l41.toInt\n        var l43 = l42.toInt\n        var l44 = l43.toInt\n        var l45 = l44.toInt\n        var l46 = l45.toInt\n        var l47 = l46.toInt\n        var l48 = l47.\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8jt5vz1c.scala:57:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8jt5vz1c.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8jt5vz1c.scala:57:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var n = l.length\n        if (n == 0)\n            throw new RuntimeException(\"List is empty\")\n        if (n == 1)\n            return l(0)\n        var m = n / 2\n        var i = 0\n        var j = n - 1\n        while (i < m) {\n            var k = i\n            while (k < j && l(k) < l(k + 1))\n                k += 1\n            if (k == j)\n                return l(i)\n            var t = l(i)\n            l(i) = l(k)\n            l(k) = t\n            i = k + 1\n            j = n - 1\n        }\n        return (l(m) + l(m + 1)) / 2.0f\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsa42ppt2.scala:25:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            l(i) = l(k)\n\u001b[31m\u001b[31m   |\u001b[0m            ^\u001b[0m\n\u001b[31m   |\u001b[0m    value update is not a member of List[Long] - did you mean l.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsa42ppt2.scala:26:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            l(k) = t\n\u001b[31m\u001b[31m   |\u001b[0m            ^\u001b[0m\n\u001b[31m   |\u001b[0m    value update is not a member of List[Long] - did you mean l.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        if (l.size() == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var arr = l.toArray(Long.class)\n        var n = arr.length\n        if (n == 1) {\n            return arr[0]\n        }\n        var lo = 0\n        var hi = n - 1\n        var mid = lo + (hi - lo) / 2\n        var x = arr[mid]\n        var i = lo\n        var j = hi\n        while (i <= j) {\n            var k = i + (j - i) / 2\n            var y = arr[k]\n            if (x < y) {\n                j = k - 1\n            } else if (x > y) {\n                i = k + 1\n            } else {\n                return x\n            }\n        }\n        return x\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpta1rz2nd.scala:13:33 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36marr\u001b[0m = l.toArray(Long.\u001b[33mclass\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               an identifier expected, but 'class' found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpta1rz2nd.scala:10:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mif\u001b[0m (l.size() == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35msize\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mSeqOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpta1rz2nd.scala:16:22 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33mreturn\u001b[0m arr[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpta1rz2nd.scala:21:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mx\u001b[0m = arr[\u001b[35mmid\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: type mid\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpta1rz2nd.scala:26:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36my\u001b[0m = arr[\u001b[35mk\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: type k\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqtjlt3pz.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpqtjlt3pz.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var m = l.length\n        if (m == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var n = m / 2\n        var i = 0\n        var j = m - 1\n        var k = 0\n        while (i <= j) {\n            var t = (i + j) / 2\n            var x = l.apply(t)\n            if (x < 0) {\n                i = t + 1\n            } else if (x > 0) {\n                j = t - 1\n            } else {\n                k = t\n                break\n            }\n        }\n        var x = l.apply(k)\n        if (x < 0) {\n            return -1.0f\n        } else if (x > 0) {\n            return 1.0f\n        } else {\n            return 0.0f\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293293,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgwc5vqq_.scala:27:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l(l.length() / 2) + l(l.length() / 2 - 1)) / 2.0f\n        } else {\n            return l(l.length() / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphymmidyt.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:14:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m l(l.length() / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer e",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l4\n        var l7 = l4\n        var l8 = l4\n        var l9 = l4\n        var l10 = l4\n        var l11 = l4\n        var l12 = l4\n        var l13 = l4\n        var l14 = l4\n        var l15 = l4\n        var l16 = l4\n        var l17 = l4\n        var l18 = l4\n        var l19 = l4\n        var l20 = l4\n        var l21 = l4\n        var l22 = l4\n        var l23 = l4\n        var l24 = l4\n        var l25 = l4\n        var l26 = l4\n        var l27 = l4\n        var l28 = l4\n        var l29 = l4\n        var l30 = l4\n        var l31 = l4\n        var l32 = l4\n        var l33 = l4\n        var l34 = l4\n        var l35 = l4\n        var l36 = l4\n        var l37 = l4\n        var l38 = l4\n        var l39 = l4\n        var l40 = l4\n        var l41 = l4\n        var l42 = l4\n        var l43 = l4\n        var l44 = l4\n        var l45 = l4\n        var l46 = l4\n        var l47 = l4\n        var l48 = l4\n        var l49 = l4\n        var l50 = l4\n        var l51 = l4\n        var l52 = l4\n        var l53 = l4\n        var l54 = l4\n        var l55 = l4\n        var l56 = l4\n        var l57 = l4\n        var l58 = l4\n        var l59 = l4\n        var l60 = l4\n        var l61 = l4\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp_43upnzg.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_43upnzg.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_43upnzg.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l5\n        var l7 = l6\n        var l8 = l7\n        var l9 = l8\n        var l10 = l9\n        var l11 = l10\n        var l12 = l11\n        var l13 = l12\n        var l14 = l13\n        var l15 = l14\n        var l16 = l15\n        var l17 = l16\n        var l18 = l17\n        var l19 = l18\n        var l20 = l19\n        var l21 = l20\n        var l22 = l21\n        var l23 = l22\n        var l24 = l23\n        var l25 = l24\n        var l26 = l25\n        var l27 = l26\n        var l28 = l27\n        var l29 = l28\n        var l30 = l29\n        var l31 = l30\n        var l32 = l31\n        var l33 = l32\n        var l34 = l33\n        var l35 = l34\n        var l36 = l35\n        var l37 = l36\n        var l38 = l37\n        var l39 = l38\n        var l40 = l39\n        var l41 = l40\n        var l42 = l41\n        var l43 = l42\n        var l44 = l43\n        var l45 = l44\n        var l46 = l45\n        var l47 = l46\n        var l48 = l47\n        var l49 = l48\n        var l50 = l49\n        var l51 = l50\n        var l52 = l51\n        var l53 = l52\n        var l54 = l53\n        var l55 = l54\n        var l56 = l55\n        var l57 = l56\n        var l58 = l57\n        var l59 = l58\n        var l60 = l59\n        var l61 = l60\n        var l62 = l61\n        var l63 = l62\n        var l64 = l63\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdoq009qi.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdoq009qi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoq009qi.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3.toInt\n        var l5 = l4.toInt\n        var l6 = l5.toInt\n        var l7 = l6.toInt\n        var l8 = l7.toInt\n        var l9 = l8.toInt\n        var l10 = l9.toInt\n        var l11 = l10.toInt\n        var l12 = l11.toInt\n        var l13 = l12.toInt\n        var l14 = l13.toInt\n        var l15 = l14.toInt\n        var l16 = l15.toInt\n        var l17 = l16.toInt\n        var l18 = l17.toInt\n        var l19 = l18.toInt\n        var l20 = l19.toInt\n        var l21 = l20.toInt\n        var l22 = l21.toInt\n        var l23 = l22.toInt\n        var l24 = l23.toInt\n        var l25 = l24.toInt\n        var l26 = l25.toInt\n        var l27 = l26.toInt\n        var l28 = l27.toInt\n        var l29 = l28.toInt\n        var l30 = l29.toInt\n        var l31 = l30.toInt\n        var l32 = l31.toInt\n        var l33 = l32.toInt\n        var l34 = l33.toInt\n        var l35 = l34.toInt\n        var l36 = l35.toInt\n        var l37 = l36.toInt\n        var l38 = l37.toInt\n        var l39 = l38.toInt\n        var l40 = l39.toInt\n        var l41 = l40.toInt\n        var l42 = l41.toInt\n        var l43 = l42.toInt\n        var l44 = l43.toInt\n        var l45 = l44.toInt\n        var l46 = l45.toInt\n        var l47 = l46.toInt\n        var l48 = l47.\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8jt5vz1c.scala:57:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8jt5vz1c.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8jt5vz1c.scala:57:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var l4 = l3 / 2\n        var l5 = l4 - 1\n        var l6 = l2[l5]\n        var l7 = l6\n        if (l3 % 2 == 1) {\n            l7 = l6\n        }\n        var l8 = l7\n        var l9 = l8.toFloat\n        var l10 = l9\n        if (l3 % 2 == 1) {\n            l10 = l9 + 0.5f\n        }\n        return l10\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293298,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpil0u32ss.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpil0u32ss.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml6\u001b[0m = l2[\u001b[35ml5\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: type l5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqtjlt3pz.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpqtjlt3pz.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l4\n        var l7 = l4\n        var l8 = l4\n        var l9 = l4\n        var l10 = l4\n        var l11 = l4\n        var l12 = l4\n        var l13 = l4\n        var l14 = l4\n        var l15 = l4\n        var l16 = l4\n        var l17 = l4\n        var l18 = l4\n        var l19 = l4\n        var l20 = l4\n        var l21 = l4\n        var l22 = l4\n        var l23 = l4\n        var l24 = l4\n        var l25 = l4\n        var l26 = l4\n        var l27 = l4\n        var l28 = l4\n        var l29 = l4\n        var l30 = l4\n        var l31 = l4\n        var l32 = l4\n        var l33 = l4\n        var l34 = l4\n        var l35 = l4\n        var l36 = l4\n        var l37 = l4\n        var l38 = l4\n        var l39 = l4\n        var l40 = l4\n        var l41 = l4\n        var l42 = l4\n        var l43 = l4\n        var l44 = l4\n        var l45 = l4\n        var l46 = l4\n        var l47 = l4\n        var l48 = l4\n        var l49 = l4\n        var l50 = l4\n        var l51 = l4\n        var l52 = l4\n        var l53 = l4\n        var l54 = l4\n        var l55 = l4\n        var l56 = l4\n        var l57 = l4\n        var l58 = l4\n        var l59 = l4\n        var l60 = l4\n        var l61 = l4\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp_43upnzg.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_43upnzg.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_43upnzg.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var result = 0.0f\n        var size = l.size()\n        var half = size / 2\n        var i = 0\n        while (i < half) {\n            result = result + l.apply(i)\n            i = i + 1\n        }\n        if (size % 2 == 1) {\n            result = result + l.apply(half)\n        } else {\n            result = result + l.apply(half - 1)\n        }\n        result = result / 2.0f\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293295,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpcjzt1n8c.scala:11:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msize\u001b[0m = l.size()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   \u001b[33mmethod\u001b[0m \u001b[35msize\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mSeqOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = 0l\n        var l6 = 0l\n        var l7 = 0l\n        var l8 = 0l\n        var l9 = 0l\n        var l10 = 0l\n        var l11 = 0l\n        var l12 = 0l\n        var l13 = 0l\n        var l14 = 0l\n        var l15 = 0l\n        var l16 = 0l\n        var l17 = 0l\n        var l18 = 0l\n        var l19 = 0l\n        var l20 = 0l\n        var l21 = 0l\n        var l22 = 0l\n        var l23 = 0l\n        var l24 = 0l\n        var l25 = 0l\n        var l26 = 0l\n        var l27 = 0l\n        var l28 = 0l\n        var l29 = 0l\n        var l30 = 0l\n        var l31 = 0l\n        var l32 = 0l\n        var l33 = 0l\n        var l34 = 0l\n        var l35 = 0l\n        var l36 = 0l\n        var l37 = 0l\n        var l38 = 0l\n        var l39 = 0l\n        var l40 = 0l\n        var l41 = 0l\n        var l42 = 0l\n        var l43 = 0l\n        var l44 = 0l\n        var l45 = 0l\n        var l46 = 0l\n        var l47 = 0l\n        var l48 = 0l\n        var l49 = 0l\n        var l50 = 0l\n        var l51 = 0l\n        var l52 = 0l\n        var l53 = 0l\n        var l54 = 0l\n        var l55 = 0l\n        var l56 = 0l\n        var l57 = 0l\n        var l58 = 0l\n        var l59 = 0l\n        var l60 = 0l\n        var l61 = 0l\n        var l62 = 0l\n        var l63 = 0l\n        var l64 = 0l\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp3yeozipa.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3yeozipa.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3yeozipa.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0)\n            throw new RuntimeException(\"List is empty\")\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l4\n        var l7 = l4\n        var l8 = l4\n        var l9 = l4\n        var l10 = l4\n        var l11 = l4\n        var l12 = l4\n        var l13 = l4\n        var l14 = l4\n        var l15 = l4\n        var l16 = l4\n        var l17 = l4\n        var l18 = l4\n        var l19 = l4\n        var l20 = l4\n        var l21 = l4\n        var l22 = l4\n        var l23 = l4\n        var l24 = l4\n        var l25 = l4\n        var l26 = l4\n        var l27 = l4\n        var l28 = l4\n        var l29 = l4\n        var l30 = l4\n        var l31 = l4\n        var l32 = l4\n        var l33 = l4\n        var l34 = l4\n        var l35 = l4\n        var l36 = l4\n        var l37 = l4\n        var l38 = l4\n        var l39 = l4\n        var l40 = l4\n        var l41 = l4\n        var l42 = l4\n        var l43 = l4\n        var l44 = l4\n        var l45 = l4\n        var l46 = l4\n        var l47 = l4\n        var l48 = l4\n        var l49 = l4\n        var l50 = l4\n        var l51 = l4\n        var l52 = l4\n        var l53 = l4\n        var l54 = l4\n        var l55 = l4\n        var l56 = l4\n        var l57 = l4\n        var l58 = l4\n        var l59 = l4\n        var l60 = l4\n        var l61 = l4\n        var l62 = l\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpd6aofz0w.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd6aofz0w.scala:73:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpktz3j3g8.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpktz3j3g8.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.toList\n        var l4 = l3.sort(Comparator.comparingLong(l4.head))\n        var l5 = l4.tail.toList\n        var l6 = l5.sort(Comparator.comparingLong(l6.head))\n        var l7 = l6.tail.toList\n        var l8 = l7.sort(Comparator.comparingLong(l8.head))\n        var l9 = l8.tail.toList\n        var l10 = l9.sort(Comparator.comparingLong(l10.head))\n        var l11 = l10.tail.toList\n        var l12 = l11.sort(Comparator.comparingLong(l12.head))\n        var l13 = l12.tail.toList\n        var l14 = l13.sort(Comparator.comparingLong(l14.head))\n        var l15 = l14.tail.toList\n        var l16 = l15.sort(Comparator.comparingLong(l16.head))\n        var l17 = l16.tail.toList\n        var l18 = l17.sort(Comparator.comparingLong(l18.head))\n        var l19 = l18.tail.toList\n        var l20 = l19.sort(Comparator.comparingLong(l20.head))\n        var l21 = l20.tail.toList\n        var l22 = l21.sort(Comparator.comparingLong(l22.head))\n        var l23 = l22.tail.toList\n        var l24 = l23.sort(Comparator.comparingLong(l24.head))\n        var l25 = l24.tail.toList\n        var l26 = l25.sort(Comparator.comparingLong(l26.head))\n        var l27 = l26.tail.toList\n        var l28 = l27.sort(Comparator.comparingLong(l28.head))\n        var l29 = l28.tail.toList\n        var l30 = l29.sort(Comparator.comparingLong(l30.head))\n\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkpew1671.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkpew1671.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l4\n        if (l3 % 2 == 1) {\n            l6 = l4 + 1\n        }\n        var l7 = 0l\n        var l8 = 0l\n        var l9 = 0l\n        var l10 = 0l\n        var l11 = 0l\n        var l12 = 0l\n        var l13 = 0l\n        var l14 = 0l\n        var l15 = 0l\n        var l16 = 0l\n        var l17 = 0l\n        var l18 = 0l\n        var l19 = 0l\n        var l20 = 0l\n        var l21 = 0l\n        var l22 = 0l\n        var l23 = 0l\n        var l24 = 0l\n        var l25 = 0l\n        var l26 = 0l\n        var l27 = 0l\n        var l28 = 0l\n        var l29 = 0l\n        var l30 = 0l\n        var l31 = 0l\n        var l32 = 0l\n        var l33 = 0l\n        var l34 = 0l\n        var l35 = 0l\n        var l36 = 0l\n        var l37 = 0l\n        var l38 = 0l\n        var l39 = 0l\n        var l40 = 0l\n        var l41 = 0l\n        var l42 = 0l\n        var l43 = 0l\n        var l44 = 0l\n        var l45 = 0l\n        var l46 = 0l\n        var l47 = 0l\n        var l48 = 0l\n        var l49 = 0l\n        var l50 = 0l\n        var l51 = 0l\n        var l52 = 0l\n        var l53 = 0l\n        var l54 = 0l\n        var l55 = 0l\n        var l56 = 0l\n        var l57 = 0l\n        var l58 = 0l\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpga_8aczy.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpga_8aczy.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpga_8aczy.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size() / 2) + l.get(l.size() / 2 - 1)) / 2.0f\n        } else {\n            return l.get(l.size() / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpusdzzmn6.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpusdzzmn6.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.size() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35msize\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mSeqOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpusdzzmn6.scala:12:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l.get(l.size() / \u001b[31m2\u001b[0m) + l.get(l.size() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpusdzzmn6.scala:12:28 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l.get(l.size() / \u001b[31m2\u001b[0m) + l.get(l.size() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35msize\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mSeqOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpusdzzmn6.scala:14:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m l.get(l.size() / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqtjlt3pz.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpqtjlt3pz.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3.toInt\n        var l5 = l4.toInt\n        var l6 = l5.toInt\n        var l7 = l6.toInt\n        var l8 = l7.toInt\n        var l9 = l8.toInt\n        var l10 = l9.toInt\n        var l11 = l10.toInt\n        var l12 = l11.toInt\n        var l13 = l12.toInt\n        var l14 = l13.toInt\n        var l15 = l14.toInt\n        var l16 = l15.toInt\n        var l17 = l16.toInt\n        var l18 = l17.toInt\n        var l19 = l18.toInt\n        var l20 = l19.toInt\n        var l21 = l20.toInt\n        var l22 = l21.toInt\n        var l23 = l22.toInt\n        var l24 = l23.toInt\n        var l25 = l24.toInt\n        var l26 = l25.toInt\n        var l27 = l26.toInt\n        var l28 = l27.toInt\n        var l29 = l28.toInt\n        var l30 = l29.toInt\n        var l31 = l30.toInt\n        var l32 = l31.toInt\n        var l33 = l32.toInt\n        var l34 = l33.toInt\n        var l35 = l34.toInt\n        var l36 = l35.toInt\n        var l37 = l36.toInt\n        var l38 = l37.toInt\n        var l39 = l38.toInt\n        var l40 = l39.toInt\n        var l41 = l40.toInt\n        var l42 = l41.toInt\n        var l43 = l42.toInt\n        var l44 = l43.toInt\n        var l45 = l44.toInt\n        var l46 = l45.toInt\n        var l47 = l46.toInt\n        var l48 = l47.\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8jt5vz1c.scala:57:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8jt5vz1c.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8jt5vz1c.scala:57:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l4\n        var l7 = 0l\n        while (l7 < l4) {\n            var l8 = l7\n            var l9 = l7 + 1l\n            var l10 = l7\n            var l11 = l7 + 2l\n            var l12 = l7\n            var l13 = l7 + 3l\n            var l14 = l7\n            var l15 = l7 + 4l\n            var l16 = l7\n            var l17 = l7 + 5l\n            var l18 = l7\n            var l19 = l7 + 6l\n            var l20 = l7\n            var l21 = l7 + 7l\n            var l22 = l7\n            var l23 = l7 + 8l\n            var l24 = l7\n            var l25 = l7 + 9l\n            var l26 = l7\n            var l27 = l7 + 10l\n            var l28 = l7\n            var l29 = l7 + 11l\n            var l30 = l7\n            var l31 = l7 + 12l\n            var l32 = l7\n            var l33 = l7 + 13l\n            var l34 = l7\n            var l35 = l7 + 14l\n            var l36 = l7\n            var l37 = l7 + 15l\n            var l38 = l7\n            var l39 = l7 + 16l\n            var l40 = l7\n            var l41 = l7 + 17l\n            var l42 = l7\n            var l43 = l7 + 18l\n            var l44 = l7\n            var l45 = l7 + 19l\n            var l46 = l7\n            var l47 = l7 + 20l\n            var l48 = l7\n            var l49 = l7 + 21l\n            var l50 = l7\n            var l51 = l7 + 22l\n            var l52 =\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpa54xk2si.scala:64:21 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36ml52\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpa54xk2si.scala:75:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpa54xk2si.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa54xk2si.scala:74:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpa54xk2si.scala:66:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m66 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = 0l\n        var l6 = 0l\n        var l7 = 0l\n        var l8 = 0l\n        var l9 = 0l\n        var l10 = 0l\n        var l11 = 0l\n        var l12 = 0l\n        var l13 = 0l\n        var l14 = 0l\n        var l15 = 0l\n        var l16 = 0l\n        var l17 = 0l\n        var l18 = 0l\n        var l19 = 0l\n        var l20 = 0l\n        var l21 = 0l\n        var l22 = 0l\n        var l23 = 0l\n        var l24 = 0l\n        var l25 = 0l\n        var l26 = 0l\n        var l27 = 0l\n        var l28 = 0l\n        var l29 = 0l\n        var l30 = 0l\n        var l31 = 0l\n        var l32 = 0l\n        var l33 = 0l\n        var l34 = 0l\n        var l35 = 0l\n        var l36 = 0l\n        var l37 = 0l\n        var l38 = 0l\n        var l39 = 0l\n        var l40 = 0l\n        var l41 = 0l\n        var l42 = 0l\n        var l43 = 0l\n        var l44 = 0l\n        var l45 = 0l\n        var l46 = 0l\n        var l47 = 0l\n        var l48 = 0l\n        var l49 = 0l\n        var l50 = 0l\n        var l51 = 0l\n        var l52 = 0l\n        var l53 = 0l\n        var l54 = 0l\n        var l55 = 0l\n        var l56 = 0l\n        var l57 = 0l\n        var l58 = 0l\n        var l59 = 0l\n        var l60 = 0l\n        var l61 = 0l\n        var l62 = 0l\n        var l63 = 0l\n        var l64 = 0l\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp3yeozipa.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3yeozipa.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3yeozipa.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpktz3j3g8.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpktz3j3g8.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqtjlt3pz.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpqtjlt3pz.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l4\n        var l7 = l4\n        var l8 = l4\n        var l9 = l4\n        var l10 = l4\n        var l11 = l4\n        var l12 = l4\n        var l13 = l4\n        var l14 = l4\n        var l15 = l4\n        var l16 = l4\n        var l17 = l4\n        var l18 = l4\n        var l19 = l4\n        var l20 = l4\n        var l21 = l4\n        var l22 = l4\n        var l23 = l4\n        var l24 = l4\n        var l25 = l4\n        var l26 = l4\n        var l27 = l4\n        var l28 = l4\n        var l29 = l4\n        var l30 = l4\n        var l31 = l4\n        var l32 = l4\n        var l33 = l4\n        var l34 = l4\n        var l35 = l4\n        var l36 = l4\n        var l37 = l4\n        var l38 = l4\n        var l39 = l4\n        var l40 = l4\n        var l41 = l4\n        var l42 = l4\n        var l43 = l4\n        var l44 = l4\n        var l45 = l4\n        var l46 = l4\n        var l47 = l4\n        var l48 = l4\n        var l49 = l4\n        var l50 = l4\n        var l51 = l4\n        var l52 = l4\n        var l53 = l4\n        var l54 = l4\n        var l55 = l4\n        var l56 = l4\n        var l57 = l4\n        var l58 = l4\n        var l59 = l4\n        var l60 = l4\n        var l61 = l4\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp_43upnzg.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_43upnzg.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_43upnzg.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpktz3j3g8.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpktz3j3g8.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var result = 0.0f\n        var size = l.size()\n        var i = 0\n        while (i < size) {\n            var j = i + 1\n            while (j < size) {\n                var k = j + 1\n                while (k < size) {\n                    if (l.apply(i).toFloat > l.apply(j).toFloat) {\n                        if (l.apply(j).toFloat > l.apply(k).toFloat) {\n                            result = l.apply(k).toFloat\n                        } else {\n                            result = l.apply(j).toFloat\n                        }\n                    } else if (l.apply(i).toFloat > l.apply(k).toFloat) {\n                        result = l.apply(k).toFloat\n                    } else {\n                        result = l.apply(i).toFloat\n                    }\n                    k = k + 1\n                }\n                j = j + 1\n            }\n            i = i + 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp8lhmbt3j.scala:11:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msize\u001b[0m = l.size()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   \u001b[33mmethod\u001b[0m \u001b[35msize\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mSeqOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (l(l.length() / 2) + l(l.length() / 2 - 1)) / 2.0f\n        } else {\n            return l(l.length() / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293307,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpls671_ji.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpls671_ji.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpls671_ji.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpls671_ji.scala:12:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpls671_ji.scala:14:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m l(l.length() / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer e",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (_.toFloat(l.get(l.length() / 2 - 1)) + _.toFloat(l.get(l.length() / 2))) / 2.0f\n        } else {\n            return _.toFloat(l.get(l.length() / 2))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293307,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppjtbuw8a.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmppjtbuw8a.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmppjtbuw8a.scala:12:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) + _.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m))) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m(_$1, _$2) => \n\u001b[31m   |\u001b[0m  _$1.toFloat(l.get(l.length() / 2 - 1)) + _$2.toFloat(l.get(l.length() / 2)).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmppjtbuw8a.scala:12:59 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) + _.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m))) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m(_$1, _$2) => \n\u001b[31m   |\u001b[0m  _$1.toFloat(l.get(l.length() / 2 - 1)) + _$2.toFloat(l.get(l.length() / 2)).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmppjtbuw8a.scala:14:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m _.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l4\n        var l7 = l4\n        var l8 = l4\n        var l9 = l4\n        var l10 = l4\n        var l11 = l4\n        var l12 = l4\n        var l13 = l4\n        var l14 = l4\n        var l15 = l4\n        var l16 = l4\n        var l17 = l4\n        var l18 = l4\n        var l19 = l4\n        var l20 = l4\n        var l21 = l4\n        var l22 = l4\n        var l23 = l4\n        var l24 = l4\n        var l25 = l4\n        var l26 = l4\n        var l27 = l4\n        var l28 = l4\n        var l29 = l4\n        var l30 = l4\n        var l31 = l4\n        var l32 = l4\n        var l33 = l4\n        var l34 = l4\n        var l35 = l4\n        var l36 = l4\n        var l37 = l4\n        var l38 = l4\n        var l39 = l4\n        var l40 = l4\n        var l41 = l4\n        var l42 = l4\n        var l43 = l4\n        var l44 = l4\n        var l45 = l4\n        var l46 = l4\n        var l47 = l4\n        var l48 = l4\n        var l49 = l4\n        var l50 = l4\n        var l51 = l4\n        var l52 = l4\n        var l53 = l4\n        var l54 = l4\n        var l55 = l4\n        var l56 = l4\n        var l57 = l4\n        var l58 = l4\n        var l59 = l4\n        var l60 = l4\n        var l61 = l4\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp_43upnzg.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_43upnzg.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_43upnzg.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l(l.length() / 2) + l(l.length() / 2 - 1)) / 2.0f\n        } else {\n            return l(l.length() / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphymmidyt.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:14:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m l(l.length() / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer e",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l4 - 1\n        var l7 = l4\n        var l8 = l4 + 1\n        var l9 = l4\n        var l10 = l4 - 2\n        var l11 = l4 + 2\n        var l12 = l4 - 3\n        var l13 = l4 + 3\n        var l14 = l4 - 4\n        var l15 = l4 + 4\n        var l16 = l4 - 5\n        var l17 = l4 + 5\n        var l18 = l4 - 6\n        var l19 = l4 + 6\n        var l20 = l4 - 7\n        var l21 = l4 + 7\n        var l22 = l4 - 8\n        var l23 = l4 + 8\n        var l24 = l4 - 9\n        var l25 = l4 + 9\n        var l26 = l4 - 10\n        var l27 = l4 + 10\n        var l28 = l4 - 11\n        var l29 = l4 + 11\n        var l30 = l4 - 12\n        var l31 = l4 + 12\n        var l32 = l4 - 13\n        var l33 = l4 + 13\n        var l34 = l4 - 14\n        var l35 = l4 + 14\n        var l36 = l4 - 15\n        var l37 = l4 + 15\n        var l38 = l4 - 16\n        var l39 = l4 + 16\n        var l40 = l4 - 17\n        var l41 = l4 + 17\n        var l42 = l4 - 18\n        var l43 = l4 + 18\n        var l44 = l4 - 19\n        var l45 = l4 + 19\n        var l46 = l4 - 20\n        var l47 = l4 + 20\n        var l48 = l4 - 21\n        var l49 = l4 + 21\n        var l50 = l4 - 22\n        var l51\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293309,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi8r5m9hv.scala:63:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpi8r5m9hv.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi8r5m9hv.scala:63:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length % 2 == 1) {\n            return (l(l.length / 2) + l(l.length / 2 - 1)) / 2.0f\n        } else {\n            return l(l.length / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj41o019v.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        if (l.length == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        if (l.length == 1) {\n            return (float) l.head\n        }\n        if (l.length == 2) {\n            return (float) (_.div(l.head, 2))\n        }\n        return (float) (_.div(_.sum(l.toList.map(_.toFloat)), 2))\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293305,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpqq5o0t4a.scala:14:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m (float) l.head\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            expression expected but \u001b[31m'.'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqq5o0t4a.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m (float) l.head\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqq5o0t4a.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mreturn\u001b[0m (float) (_.div(l.head, \u001b[31m2\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqq5o0t4a.scala:19:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mreturn\u001b[0m (float) (_.div(_.sum(l.toList.map(_.toFloat)), \u001b[31m2\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4 - 1\n        var l6 = l5 + 1\n        var l7 = l6.toFloat\n        var l8 = l7.toFloat\n        var l9 = l8.toFloat\n        var l10 = l9.toFloat\n        var l11 = l10.toFloat\n        var l12 = l11.toFloat\n        var l13 = l12.toFloat\n        var l14 = l13.toFloat\n        var l15 = l14.toFloat\n        var l16 = l15.toFloat\n        var l17 = l16.toFloat\n        var l18 = l17.toFloat\n        var l19 = l18.toFloat\n        var l20 = l19.toFloat\n        var l21 = l20.toFloat\n        var l22 = l21.toFloat\n        var l23 = l22.toFloat\n        var l24 = l23.toFloat\n        var l25 = l24.toFloat\n        var l26 = l25.toFloat\n        var l27 = l26.toFloat\n        var l28 = l27.toFloat\n        var l29 = l28.toFloat\n        var l30 = l29.toFloat\n        var l31 = l30.toFloat\n        var l32 = l31.toFloat\n        var l33 = l32.toFloat\n        var l34 = l33.toFloat\n        var l35 = l34.toFloat\n        var l36 = l35.toFloat\n        var l37 = l36.toFloat\n        var l38 = l37.toFloat\n        var l39 = l38.toFloat\n        var l40 = l39.toFloat\n        var l41 = l40.toFloat\n        var l42 = l41.toFloat\n        var l43 = l42.toFloat\n        var l44 = l43.toFloat\n        var l45 = l44.toFloat\n        var l46 = l45.toFloat\n        var l47 = l46.toFloat\n        var l48 = l47.toFloat\n\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293311,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxr1f3b6f.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxr1f3b6f.scala:58:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"Cannot compute median of an empty list\")\n        }\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l4 - 1\n        var l7 = l5\n        var l8 = l6\n        var l9 = l5\n        var l10 = l6\n        var l11 = l5\n        var l12 = l6\n        var l13 = l5\n        var l14 = l6\n        var l15 = l5\n        var l16 = l6\n        var l17 = l5\n        var l18 = l6\n        var l19 = l5\n        var l20 = l6\n        var l21 = l5\n        var l22 = l6\n        var l23 = l5\n        var l24 = l6\n        var l25 = l5\n        var l26 = l6\n        var l27 = l5\n        var l28 = l6\n        var l29 = l5\n        var l30 = l6\n        var l31 = l5\n        var l32 = l6\n        var l33 = l5\n        var l34 = l6\n        var l35 = l5\n        var l36 = l6\n        var l37 = l5\n        var l38 = l6\n        var l39 = l5\n        var l40 = l6\n        var l41 = l5\n        var l42 = l6\n        var l43 = l5\n        var l44 = l6\n        var l45 = l5\n        var l46 = l6\n        var l47 = l5\n        var l48 = l6\n        var l49 = l5\n        var l50 = l6\n        var l51 = l5\n        var l52 = l6\n        var l53 = l5\n        var l54 = l6\n        var l55 = l5\n        var l56 = l6\n        var l57 = l5\n        var l58 = l6\n        var l59 = l5\n        var l60 = l6\n        var l\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293311,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnial9e14.scala:73:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnial9e14.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\u001b[31m   |\u001b[0m  import math.BigInt.javaBigInteger2bigInt\n\u001b[31m   |\u001b[0m  import math.Numeric.BigDecimalAsIfIntegral.mkNumericOps\n\u001b[31m   |\u001b[0m  import math.Numeric.BigDecimalIsFractional.mkNumericOps\n\u001b[31m   |\u001b[0m  import math.Numeric.BigIntIsIntegral.mkNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnial9e14.scala:73:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (_.toFloat(l.get(l.length() / 2 - 1) + l.get(l.length() / 2)) / 2.0f)\n        } else {\n            return _.toFloat(l.get(l.length() / 2))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprtx2w6ft.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmprtx2w6ft.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmprtx2w6ft.scala:12:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m) + l.get(l.length() / \u001b[31m2\u001b[0m)) / \u001b[31m2.0f\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m_$1 => _$1.toFloat(l.get(l.length() / 2 - 1) + l.get(l.length() / 2)) / \u001b[31m2.0f\u001b[0m.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmprtx2w6ft.scala:14:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m _.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.toFloat(l.get(l.length() / 2)).\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l(l.length() / 2) + l(l.length() / 2 - 1)) / 2.0f\n        } else {\n            return l(l.length() / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphymmidyt.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:14:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m l(l.length() / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer e",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        if (l.length == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var l2 = l.toLongs\n        var l3 = l2.sort(java.util.Comparator.comparingLong(x -> x))\n        var l4 = l3.takeRight(1)\n        var l5 = l4.head\n        var l6 = l5.toFloat\n        var l7 = l6.toFloat\n        var l8 = l7.toFloat\n        var l9 = l8.toFloat\n        var l10 = l9.toFloat\n        var l11 = l10.toFloat\n        var l12 = l11.toFloat\n        var l13 = l12.toFloat\n        var l14 = l13.toFloat\n        var l15 = l14.toFloat\n        var l16 = l15.toFloat\n        var l17 = l16.toFloat\n        var l18 = l17.toFloat\n        var l19 = l18.toFloat\n        var l20 = l19.toFloat\n        var l21 = l20.toFloat\n        var l22 = l21.toFloat\n        var l23 = l22.toFloat\n        var l24 = l23.toFloat\n        var l25 = l24.toFloat\n        var l26 = l25.toFloat\n        var l27 = l26.toFloat\n        var l28 = l27.toFloat\n        var l29 = l28.toFloat\n        var l30 = l29.toFloat\n        var l31 = l30.toFloat\n        var l32 = l31.toFloat\n        var l33 = l32.toFloat\n        var l34 = l33.toFloat\n        var l35 = l34.toFloat\n        var l36 = l35.toFloat\n        var l37 = l36.toFloat\n        var l38 = l37.toFloat\n        var l39 = l38.toFloat\n        var l40 = l39.toFloat\n        var l41 = l40.toFloat\n        var l42 = l41.toFloat\n        var l43 = l42.toFloat\n        var l44 = l43.\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293310,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi16_1pap.scala:56:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpi16_1pap.scala:13:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLongs\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value toLongs is not a member of List[Long]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi16_1pap.scala:56:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqtjlt3pz.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpqtjlt3pz.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l5\n        var l7 = l6\n        var l8 = l7\n        var l9 = l8\n        var l10 = l9\n        var l11 = l10\n        var l12 = l11\n        var l13 = l12\n        var l14 = l13\n        var l15 = l14\n        var l16 = l15\n        var l17 = l16\n        var l18 = l17\n        var l19 = l18\n        var l20 = l19\n        var l21 = l20\n        var l22 = l21\n        var l23 = l22\n        var l24 = l23\n        var l25 = l24\n        var l26 = l25\n        var l27 = l26\n        var l28 = l27\n        var l29 = l28\n        var l30 = l29\n        var l31 = l30\n        var l32 = l31\n        var l33 = l32\n        var l34 = l33\n        var l35 = l34\n        var l36 = l35\n        var l37 = l36\n        var l38 = l37\n        var l39 = l38\n        var l40 = l39\n        var l41 = l40\n        var l42 = l41\n        var l43 = l42\n        var l44 = l43\n        var l45 = l44\n        var l46 = l45\n        var l47 = l46\n        var l48 = l47\n        var l49 = l48\n        var l50 = l49\n        var l51 = l50\n        var l52 = l51\n        var l53 = l52\n        var l54 = l53\n        var l55 = l54\n        var l56 = l55\n        var l57 = l56\n        var l58 = l57\n        var l59 = l58\n        var l60 = l59\n        var l61 = l60\n        var l62 = l61\n        var l63 = l62\n        var l64 = l63\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdoq009qi.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdoq009qi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoq009qi.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var a = l.toLongs\n        var b = a.length\n        if (b == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var c = a[b / 2]\n        if (b % 2 == 0) {\n            return (c + a[b / 2 - 1]) / 2.0f\n        } else {\n            return c\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293310,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx7heyowv.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma\u001b[0m = l.toLongs\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value toLongs is not a member of List[Long]\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx7heyowv.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mc\u001b[0m = a[\u001b[35mb\u001b[0m \u001b[35m/\u001b[0m \u001b[31m2\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: type /\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3.toInt\n        var l5 = l4.toInt\n        var l6 = l5.toInt\n        var l7 = l6.toInt\n        var l8 = l7.toInt\n        var l9 = l8.toInt\n        var l10 = l9.toInt\n        var l11 = l10.toInt\n        var l12 = l11.toInt\n        var l13 = l12.toInt\n        var l14 = l13.toInt\n        var l15 = l14.toInt\n        var l16 = l15.toInt\n        var l17 = l16.toInt\n        var l18 = l17.toInt\n        var l19 = l18.toInt\n        var l20 = l19.toInt\n        var l21 = l20.toInt\n        var l22 = l21.toInt\n        var l23 = l22.toInt\n        var l24 = l23.toInt\n        var l25 = l24.toInt\n        var l26 = l25.toInt\n        var l27 = l26.toInt\n        var l28 = l27.toInt\n        var l29 = l28.toInt\n        var l30 = l29.toInt\n        var l31 = l30.toInt\n        var l32 = l31.toInt\n        var l33 = l32.toInt\n        var l34 = l33.toInt\n        var l35 = l34.toInt\n        var l36 = l35.toInt\n        var l37 = l36.toInt\n        var l38 = l37.toInt\n        var l39 = l38.toInt\n        var l40 = l39.toInt\n        var l41 = l40.toInt\n        var l42 = l41.toInt\n        var l43 = l42.toInt\n        var l44 = l43.toInt\n        var l45 = l44.toInt\n        var l46 = l45.toInt\n        var l47 = l46.toInt\n        var l48 = l47.\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8jt5vz1c.scala:57:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8jt5vz1c.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8jt5vz1c.scala:57:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = 0\n        var l6 = 0\n        var l7 = 0\n        var l8 = 0\n        var l9 = 0\n        var l10 = 0\n        var l11 = 0\n        var l12 = 0\n        var l13 = 0\n        var l14 = 0\n        var l15 = 0\n        var l16 = 0\n        var l17 = 0\n        var l18 = 0\n        var l19 = 0\n        var l20 = 0\n        var l21 = 0\n        var l22 = 0\n        var l23 = 0\n        var l24 = 0\n        var l25 = 0\n        var l26 = 0\n        var l27 = 0\n        var l28 = 0\n        var l29 = 0\n        var l30 = 0\n        var l31 = 0\n        var l32 = 0\n        var l33 = 0\n        var l34 = 0\n        var l35 = 0\n        var l36 = 0\n        var l37 = 0\n        var l38 = 0\n        var l39 = 0\n        var l40 = 0\n        var l41 = 0\n        var l42 = 0\n        var l43 = 0\n        var l44 = 0\n        var l45 = 0\n        var l46 = 0\n        var l47 = 0\n        var l48 = 0\n        var l49 = 0\n        var l50 = 0\n        var l51 = 0\n        var l52 = 0\n        var l53 = 0\n        var l54 = 0\n        var l55 = 0\n        var l56 = 0\n        var l57 = 0\n        var l58 = 0\n        var l59 = 0\n        var l60 = 0\n        var l61 = 0\n        var l62 = 0\n        var l63 = 0\n        var l64 = 0\n        var l65 = 0\n        var l66 = 0\n        var l67 = 0\n        var l68 = 0\n        var l69 = 0\n        var l70 = 0\n        var l71 = 0\n        var l72 = 0\n        var l73 = 0\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293311,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm__1aw3x.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm__1aw3x.scala:82:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpktz3j3g8.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpktz3j3g8.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l(l.length() / 2) + l(l.length() / 2 - 1)) / 2.0f\n        } else {\n            return l(l.length() / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphymmidyt.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:14:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m l(l.length() / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer e",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var l4 = l3 / 2\n        var l5 = 0l\n        var l6 = 0l\n        var l7 = 0l\n        var l8 = 0l\n        var l9 = 0l\n        var l10 = 0l\n        var l11 = 0l\n        var l12 = 0l\n        var l13 = 0l\n        var l14 = 0l\n        var l15 = 0l\n        var l16 = 0l\n        var l17 = 0l\n        var l18 = 0l\n        var l19 = 0l\n        var l20 = 0l\n        var l21 = 0l\n        var l22 = 0l\n        var l23 = 0l\n        var l24 = 0l\n        var l25 = 0l\n        var l26 = 0l\n        var l27 = 0l\n        var l28 = 0l\n        var l29 = 0l\n        var l30 = 0l\n        var l31 = 0l\n        var l32 = 0l\n        var l33 = 0l\n        var l34 = 0l\n        var l35 = 0l\n        var l36 = 0l\n        var l37 = 0l\n        var l38 = 0l\n        var l39 = 0l\n        var l40 = 0l\n        var l41 = 0l\n        var l42 = 0l\n        var l43 = 0l\n        var l44 = 0l\n        var l45 = 0l\n        var l46 = 0l\n        var l47 = 0l\n        var l48 = 0l\n        var l49 = 0l\n        var l50 = 0l\n        var l51 = 0l\n        var l52 = 0l\n        var l53 = 0l\n        var l54 = 0l\n        var l55 = 0l\n        var l56 = 0l\n        var l57 = 0l\n        var l58 = 0l\n        var l59 = 0l\n        var l60 = 0l\n        var l61 = 0l\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpgbwv3kyi.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgbwv3kyi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgbwv3kyi.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l5\n        var l7 = l6\n        var l8 = l7\n        var l9 = l8\n        var l10 = l9\n        var l11 = l10\n        var l12 = l11\n        var l13 = l12\n        var l14 = l13\n        var l15 = l14\n        var l16 = l15\n        var l17 = l16\n        var l18 = l17\n        var l19 = l18\n        var l20 = l19\n        var l21 = l20\n        var l22 = l21\n        var l23 = l22\n        var l24 = l23\n        var l25 = l24\n        var l26 = l25\n        var l27 = l26\n        var l28 = l27\n        var l29 = l28\n        var l30 = l29\n        var l31 = l30\n        var l32 = l31\n        var l33 = l32\n        var l34 = l33\n        var l35 = l34\n        var l36 = l35\n        var l37 = l36\n        var l38 = l37\n        var l39 = l38\n        var l40 = l39\n        var l41 = l40\n        var l42 = l41\n        var l43 = l42\n        var l44 = l43\n        var l45 = l44\n        var l46 = l45\n        var l47 = l46\n        var l48 = l47\n        var l49 = l48\n        var l50 = l49\n        var l51 = l50\n        var l52 = l51\n        var l53 = l52\n        var l54 = l53\n        var l55 = l54\n        var l56 = l55\n        var l57 = l56\n        var l58 = l57\n        var l59 = l58\n        var l60 = l59\n        var l61 = l60\n        var l62 = l61\n        var l63 = l62\n        var l64 = l63\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdoq009qi.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdoq009qi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoq009qi.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l5\n        var l7 = l6\n        var l8 = l7\n        var l9 = l8\n        var l10 = l9\n        var l11 = l10\n        var l12 = l11\n        var l13 = l12\n        var l14 = l13\n        var l15 = l14\n        var l16 = l15\n        var l17 = l16\n        var l18 = l17\n        var l19 = l18\n        var l20 = l19\n        var l21 = l20\n        var l22 = l21\n        var l23 = l22\n        var l24 = l23\n        var l25 = l24\n        var l26 = l25\n        var l27 = l26\n        var l28 = l27\n        var l29 = l28\n        var l30 = l29\n        var l31 = l30\n        var l32 = l31\n        var l33 = l32\n        var l34 = l33\n        var l35 = l34\n        var l36 = l35\n        var l37 = l36\n        var l38 = l37\n        var l39 = l38\n        var l40 = l39\n        var l41 = l40\n        var l42 = l41\n        var l43 = l42\n        var l44 = l43\n        var l45 = l44\n        var l46 = l45\n        var l47 = l46\n        var l48 = l47\n        var l49 = l48\n        var l50 = l49\n        var l51 = l50\n        var l52 = l51\n        var l53 = l52\n        var l54 = l53\n        var l55 = l54\n        var l56 = l55\n        var l57 = l56\n        var l58 = l57\n        var l59 = l58\n        var l60 = l59\n        var l61 = l60\n        var l62 = l61\n        var l63 = l62\n        var l64 = l63\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdoq009qi.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdoq009qi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoq009qi.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (_.toFloat(l.get(l.length() / 2 - 1) + l.get(l.length() / 2)) / 2)\n        } else {\n            return _.toFloat(l.get(l.length() / 2))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293310,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvhg5hjxh.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpvhg5hjxh.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpvhg5hjxh.scala:12:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m) + l.get(l.length() / \u001b[31m2\u001b[0m)) / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m_$1 => _$1.toFloat(l.get(l.length() / 2 - 1) + l.get(l.length() / 2)) / 2.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpvhg5hjxh.scala:14:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m _.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.toFloat(l.get(l.length() / 2)).\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l(l.length() / 2) + l(l.length() / 2 - 1)) / 2.0f\n        } else {\n            return l(l.length() / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphymmidyt.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:14:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m l(l.length() / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer e",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l4\n        var l7 = l4\n        var l8 = l4\n        var l9 = l4\n        var l10 = l4\n        var l11 = l4\n        var l12 = l4\n        var l13 = l4\n        var l14 = l4\n        var l15 = l4\n        var l16 = l4\n        var l17 = l4\n        var l18 = l4\n        var l19 = l4\n        var l20 = l4\n        var l21 = l4\n        var l22 = l4\n        var l23 = l4\n        var l24 = l4\n        var l25 = l4\n        var l26 = l4\n        var l27 = l4\n        var l28 = l4\n        var l29 = l4\n        var l30 = l4\n        var l31 = l4\n        var l32 = l4\n        var l33 = l4\n        var l34 = l4\n        var l35 = l4\n        var l36 = l4\n        var l37 = l4\n        var l38 = l4\n        var l39 = l4\n        var l40 = l4\n        var l41 = l4\n        var l42 = l4\n        var l43 = l4\n        var l44 = l4\n        var l45 = l4\n        var l46 = l4\n        var l47 = l4\n        var l48 = l4\n        var l49 = l4\n        var l50 = l4\n        var l51 = l4\n        var l52 = l4\n        var l53 = l4\n        var l54 = l4\n        var l55 = l4\n        var l56 = l4\n        var l57 = l4\n        var l58 = l4\n        var l59 = l4\n        var l60 = l4\n        var l61 = l4\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp_43upnzg.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_43upnzg.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_43upnzg.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        if (l.length == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var n = l.length\n        var m = n / 2\n        var i = 0\n        var j = n - 1\n        var k = 0\n        var a = 0.0f\n        var b = 0.0f\n        var c = 0.0f\n        var d = 0.0f\n        var e = 0.0f\n        var f = 0.0f\n        var g = 0.0f\n        var h = 0.0f\n        var i1 = 0.0f\n        var j1 = 0.0f\n        var k1 = 0.0f\n        var l1 = 0.0f\n        var m1 = 0.0f\n        var n1 = 0.0f\n        var o1 = 0.0f\n        var p1 = 0.0f\n        var q1 = 0.0f\n        var r1 = 0.0f\n        var s1 = 0.0f\n        var t1 = 0.0f\n        var u1 = 0.0f\n        var v1 = 0.0f\n        var w1 = 0.0f\n        var x1 = 0.0f\n        var y1 = 0.0f\n        var z1 = 0.0f\n        var A1 = 0.0f\n        var B1 = 0.0f\n        var C1 = 0.0f\n        var D1 = 0.0f\n        var E1 = 0.0f\n        var F1 = 0.0f\n        var G1 = 0.0f\n        var H1 = 0.0f\n        var I1 = 0.0f\n        var J1 = 0.0f\n        var K1 = 0.0f\n        var L1 = 0.0f\n        var M1 = 0.0f\n        var N1 = 0.0f\n        var O1 = 0.0f\n        var P1 = 0.0f\n        var Q1 = 0.0f\n        var R1 = 0.0f\n        var S1 = 0.0f\n        var T1 = 0.0f\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293311,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxw47oaxm.scala:64:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l5\n        var l7 = l6\n        var l8 = l7\n        var l9 = l8\n        var l10 = l9\n        var l11 = l10\n        var l12 = l11\n        var l13 = l12\n        var l14 = l13\n        var l15 = l14\n        var l16 = l15\n        var l17 = l16\n        var l18 = l17\n        var l19 = l18\n        var l20 = l19\n        var l21 = l20\n        var l22 = l21\n        var l23 = l22\n        var l24 = l23\n        var l25 = l24\n        var l26 = l25\n        var l27 = l26\n        var l28 = l27\n        var l29 = l28\n        var l30 = l29\n        var l31 = l30\n        var l32 = l31\n        var l33 = l32\n        var l34 = l33\n        var l35 = l34\n        var l36 = l35\n        var l37 = l36\n        var l38 = l37\n        var l39 = l38\n        var l40 = l39\n        var l41 = l40\n        var l42 = l41\n        var l43 = l42\n        var l44 = l43\n        var l45 = l44\n        var l46 = l45\n        var l47 = l46\n        var l48 = l47\n        var l49 = l48\n        var l50 = l49\n        var l51 = l50\n        var l52 = l51\n        var l53 = l52\n        var l54 = l53\n        var l55 = l54\n        var l56 = l55\n        var l57 = l56\n        var l58 = l57\n        var l59 = l58\n        var l60 = l59\n        var l61 = l60\n        var l62 = l61\n        var l63 = l62\n        var l64 = l63\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdoq009qi.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdoq009qi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoq009qi.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.size() % 2 == 1) {\n            return l.get(l.size() / 2)\n        } else {\n            return (l.get(l.size() / 2 - 1) + l.get(l.size() / 2)) / 2.0f\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293313,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpleuok97e.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpleuok97e.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.size() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35msize\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mSeqOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpleuok97e.scala:12:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m l.get(l.size() / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpleuok97e.scala:12:27 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m l.get(l.size() / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35msize\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mSeqOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpleuok97e.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m (l.get(l.size() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m) + l.get(l.size() / \u001b[31m2\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue get is not a member of List[Long], but could be made available ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (_.toFloat(l.get(l.length() / 2 - 1) + l.get(l.length() / 2)) / 2.0f)\n        } else {\n            return _.toFloat(l.get(l.length() / 2))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprtx2w6ft.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmprtx2w6ft.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmprtx2w6ft.scala:12:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m) + l.get(l.length() / \u001b[31m2\u001b[0m)) / \u001b[31m2.0f\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m_$1 => _$1.toFloat(l.get(l.length() / 2 - 1) + l.get(l.length() / 2)) / \u001b[31m2.0f\u001b[0m.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmprtx2w6ft.scala:14:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m _.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.toFloat(l.get(l.length() / 2)).\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = 0l\n        var l6 = 0l\n        var l7 = 0l\n        var l8 = 0l\n        var l9 = 0l\n        var l10 = 0l\n        var l11 = 0l\n        var l12 = 0l\n        var l13 = 0l\n        var l14 = 0l\n        var l15 = 0l\n        var l16 = 0l\n        var l17 = 0l\n        var l18 = 0l\n        var l19 = 0l\n        var l20 = 0l\n        var l21 = 0l\n        var l22 = 0l\n        var l23 = 0l\n        var l24 = 0l\n        var l25 = 0l\n        var l26 = 0l\n        var l27 = 0l\n        var l28 = 0l\n        var l29 = 0l\n        var l30 = 0l\n        var l31 = 0l\n        var l32 = 0l\n        var l33 = 0l\n        var l34 = 0l\n        var l35 = 0l\n        var l36 = 0l\n        var l37 = 0l\n        var l38 = 0l\n        var l39 = 0l\n        var l40 = 0l\n        var l41 = 0l\n        var l42 = 0l\n        var l43 = 0l\n        var l44 = 0l\n        var l45 = 0l\n        var l46 = 0l\n        var l47 = 0l\n        var l48 = 0l\n        var l49 = 0l\n        var l50 = 0l\n        var l51 = 0l\n        var l52 = 0l\n        var l53 = 0l\n        var l54 = 0l\n        var l55 = 0l\n        var l56 = 0l\n        var l57 = 0l\n        var l58 = 0l\n        var l59 = 0l\n        var l60 = 0l\n        var l61 = 0l\n        var l62 = 0l\n        var l63 = 0l\n        var l64 = 0l\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp3yeozipa.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3yeozipa.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3yeozipa.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l(l.length() / 2) + l(l.length() / 2 - 1)) / 2.0f\n        } else {\n            return l(l.length() / 2)\n        }\n    }\n\n    // Return the median of the list of lists l.\n    // >>> median((List[List[Long]](List(List(1l.toLong, 2l.toLong, 3l.toLong)), List(List(4l.toLong, 5l.toLong, 6l.toLong)))))\n    // (3l, 3l)\n    def median(l : List[List[Long]]) : Tuple2[Float, Float] = {\n        l.sort((a, b) -> a.length() - b.length())\n        if (l.length() % 2 == 1) {\n            return (l(l.length() / 2) + l(l.length() / 2 - 1)) / 2.0f\n        } else {\n            return l(l.length() / 2)\n        }\n    }\n\n    // Return the median of the list of lists l.\n    // >>> median((List[List[Long]](List(List(1l.toLong, 2l.toLong, 3l.toLong)), List(List(4l.toLong, 5l.toLong, 6l.toLong)))))\n    // (3l, 3l)\n    def median(l : List[List[Long]]) : Tuple2[Float, Float] = {\n        l.sort((a, b) -> a.length() - b.length())\n        if (l.length() % 2 == 1) {\n            return (l(l.length() / 2) + l(l.length() / 2 - 1)) / 2.0f\n        } else {\n            return l(l.length() / 2)\n        }\n    }\n\n    // Return the median of the list of lists l.\n    // >>> median((List[List[Long]](List(List(1l.toLong, 2l.toLong, 3l.toLong)), List(List(4l\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpds30ddri.scala:53:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpds30ddri.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpds30ddri.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpds30ddri.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpds30ddri.scala:12:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpds30ddri.scala:14:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m l(l.length() / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m             ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = 0l\n        var l6 = 0l\n        var l7 = 0l\n        var l8 = 0l\n        var l9 = 0l\n        var l10 = 0l\n        var l11 = 0l\n        var l12 = 0l\n        var l13 = 0l\n        var l14 = 0l\n        var l15 = 0l\n        var l16 = 0l\n        var l17 = 0l\n        var l18 = 0l\n        var l19 = 0l\n        var l20 = 0l\n        var l21 = 0l\n        var l22 = 0l\n        var l23 = 0l\n        var l24 = 0l\n        var l25 = 0l\n        var l26 = 0l\n        var l27 = 0l\n        var l28 = 0l\n        var l29 = 0l\n        var l30 = 0l\n        var l31 = 0l\n        var l32 = 0l\n        var l33 = 0l\n        var l34 = 0l\n        var l35 = 0l\n        var l36 = 0l\n        var l37 = 0l\n        var l38 = 0l\n        var l39 = 0l\n        var l40 = 0l\n        var l41 = 0l\n        var l42 = 0l\n        var l43 = 0l\n        var l44 = 0l\n        var l45 = 0l\n        var l46 = 0l\n        var l47 = 0l\n        var l48 = 0l\n        var l49 = 0l\n        var l50 = 0l\n        var l51 = 0l\n        var l52 = 0l\n        var l53 = 0l\n        var l54 = 0l\n        var l55 = 0l\n        var l56 = 0l\n        var l57 = 0l\n        var l58 = 0l\n        var l59 = 0l\n        var l60 = 0l\n        var l61 = 0l\n        var l62 = 0l\n        var l63 = 0l\n        var l64 = 0l\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp3yeozipa.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3yeozipa.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3yeozipa.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4.toInt\n        var l6 = l5.toInt\n        var l7 = l6.toInt\n        var l8 = l7.toInt\n        var l9 = l8.toInt\n        var l10 = l9.toInt\n        var l11 = l10.toInt\n        var l12 = l11.toInt\n        var l13 = l12.toInt\n        var l14 = l13.toInt\n        var l15 = l14.toInt\n        var l16 = l15.toInt\n        var l17 = l16.toInt\n        var l18 = l17.toInt\n        var l19 = l18.toInt\n        var l20 = l19.toInt\n        var l21 = l20.toInt\n        var l22 = l21.toInt\n        var l23 = l22.toInt\n        var l24 = l23.toInt\n        var l25 = l24.toInt\n        var l26 = l25.toInt\n        var l27 = l26.toInt\n        var l28 = l27.toInt\n        var l29 = l28.toInt\n        var l30 = l29.toInt\n        var l31 = l30.toInt\n        var l32 = l31.toInt\n        var l33 = l32.toInt\n        var l34 = l33.toInt\n        var l35 = l34.toInt\n        var l36 = l35.toInt\n        var l37 = l36.toInt\n        var l38 = l37.toInt\n        var l39 = l38.toInt\n        var l40 = l39.toInt\n        var l41 = l40.toInt\n        var l42 = l41.toInt\n        var l43 = l42.toInt\n        var l44 = l43.toInt\n        var l45 = l44.toInt\n        var l46 = l45.toInt\n        var l47 = l46.toInt\n        var l48 = l47.to\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp85qzylfi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp85qzylfi.scala:57:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l5\n        var l7 = l6\n        var l8 = l7\n        var l9 = l8\n        var l10 = l9\n        var l11 = l10\n        var l12 = l11\n        var l13 = l12\n        var l14 = l13\n        var l15 = l14\n        var l16 = l15\n        var l17 = l16\n        var l18 = l17\n        var l19 = l18\n        var l20 = l19\n        var l21 = l20\n        var l22 = l21\n        var l23 = l22\n        var l24 = l23\n        var l25 = l24\n        var l26 = l25\n        var l27 = l26\n        var l28 = l27\n        var l29 = l28\n        var l30 = l29\n        var l31 = l30\n        var l32 = l31\n        var l33 = l32\n        var l34 = l33\n        var l35 = l34\n        var l36 = l35\n        var l37 = l36\n        var l38 = l37\n        var l39 = l38\n        var l40 = l39\n        var l41 = l40\n        var l42 = l41\n        var l43 = l42\n        var l44 = l43\n        var l45 = l44\n        var l46 = l45\n        var l47 = l46\n        var l48 = l47\n        var l49 = l48\n        var l50 = l49\n        var l51 = l50\n        var l52 = l51\n        var l53 = l52\n        var l54 = l53\n        var l55 = l54\n        var l56 = l55\n        var l57 = l56\n        var l58 = l57\n        var l59 = l58\n        var l60 = l59\n        var l61 = l60\n        var l62 = l61\n        var l63 = l62\n        var l64 = l63\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdoq009qi.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdoq009qi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoq009qi.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpktz3j3g8.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpktz3j3g8.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l(l.length() / 2) + l(l.length() / 2 - 1)) / 2.0f\n        } else {\n            return l(l.length() / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphymmidyt.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:14:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m l(l.length() / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer e",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l5\n        var l7 = l6\n        var l8 = l7\n        var l9 = l8\n        var l10 = l9\n        var l11 = l10\n        var l12 = l11\n        var l13 = l12\n        var l14 = l13\n        var l15 = l14\n        var l16 = l15\n        var l17 = l16\n        var l18 = l17\n        var l19 = l18\n        var l20 = l19\n        var l21 = l20\n        var l22 = l21\n        var l23 = l22\n        var l24 = l23\n        var l25 = l24\n        var l26 = l25\n        var l27 = l26\n        var l28 = l27\n        var l29 = l28\n        var l30 = l29\n        var l31 = l30\n        var l32 = l31\n        var l33 = l32\n        var l34 = l33\n        var l35 = l34\n        var l36 = l35\n        var l37 = l36\n        var l38 = l37\n        var l39 = l38\n        var l40 = l39\n        var l41 = l40\n        var l42 = l41\n        var l43 = l42\n        var l44 = l43\n        var l45 = l44\n        var l46 = l45\n        var l47 = l46\n        var l48 = l47\n        var l49 = l48\n        var l50 = l49\n        var l51 = l50\n        var l52 = l51\n        var l53 = l52\n        var l54 = l53\n        var l55 = l54\n        var l56 = l55\n        var l57 = l56\n        var l58 = l57\n        var l59 = l58\n        var l60 = l59\n        var l61 = l60\n        var l62 = l61\n        var l63 = l62\n        var l64 = l63\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdoq009qi.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdoq009qi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoq009qi.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4.toInt\n        var l6 = l5.toInt\n        var l7 = l6.toInt\n        var l8 = l7.toInt\n        var l9 = l8.toInt\n        var l10 = l9.toInt\n        var l11 = l10.toInt\n        var l12 = l11.toInt\n        var l13 = l12.toInt\n        var l14 = l13.toInt\n        var l15 = l14.toInt\n        var l16 = l15.toInt\n        var l17 = l16.toInt\n        var l18 = l17.toInt\n        var l19 = l18.toInt\n        var l20 = l19.toInt\n        var l21 = l20.toInt\n        var l22 = l21.toInt\n        var l23 = l22.toInt\n        var l24 = l23.toInt\n        var l25 = l24.toInt\n        var l26 = l25.toInt\n        var l27 = l26.toInt\n        var l28 = l27.toInt\n        var l29 = l28.toInt\n        var l30 = l29.toInt\n        var l31 = l30.toInt\n        var l32 = l31.toInt\n        var l33 = l32.toInt\n        var l34 = l33.toInt\n        var l35 = l34.toInt\n        var l36 = l35.toInt\n        var l37 = l36.toInt\n        var l38 = l37.toInt\n        var l39 = l38.toInt\n        var l40 = l39.toInt\n        var l41 = l40.toInt\n        var l42 = l41.toInt\n        var l43 = l42.toInt\n        var l44 = l43.toInt\n        var l45 = l44.toInt\n        var l46 = l45.toInt\n        var l47 = l46.toInt\n        var l48 = l47.to\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp85qzylfi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp85qzylfi.scala:57:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.toList\n        var l4 = l3.sort(Comparator[Long](_ <=> -1))\n        var l5 = l4.take(l4.length / 2)\n        var l6 = l5.toList\n        var l7 = l6.head\n        var l8 = l6.tail\n        var l9 = l8.toList\n        var l10 = l9.head\n        var l11 = l9.tail\n        var l12 = l11.toList\n        var l13 = l12.head\n        var l14 = l12.tail\n        var l15 = l14.toList\n        var l16 = l15.head\n        var l17 = l15.tail\n        var l18 = l17.toList\n        var l19 = l18.head\n        var l20 = l18.tail\n        var l21 = l20.toList\n        var l22 = l21.head\n        var l23 = l21.tail\n        var l24 = l23.toList\n        var l25 = l24.head\n        var l26 = l24.tail\n        var l27 = l26.toList\n        var l28 = l27.head\n        var l29 = l27.tail\n        var l30 = l29.toList\n        var l31 = l30.head\n        var l32 = l30.tail\n        var l33 = l32.toList\n        var l34 = l33.head\n        var l35 = l33.tail\n        var l36 = l35.toList\n        var l37 = l36.head\n        var l38 = l36.tail\n        var l39 = l38.toList\n        var l40 = l39.head\n        var l41 = l39.tail\n        var l42 = l41.toList\n        var l43 = l42.head\n        var l44 = l42.tail\n        var l45 = l44.toList\n        var l46 = l45.head\n        var l47 = l45.tail\n        var l48 = l47.toList\n        var l49 = l\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293313,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp676ef6pf.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp676ef6pf.scala:58:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqtjlt3pz.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpqtjlt3pz.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var l4 = l3 / 2\n        var l5 = l4\n        if (l3 % 2 == 1) {\n            l5 = l4 + 1\n        }\n        var l6 = _.toFloat(l2[l5])\n        return l6\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp06svesoa.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp06svesoa.scala:20:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml6\u001b[0m = _.toFloat(l2[\u001b[35ml5\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.toFloat(l2[\u001b[35ml5\u001b[0m]).\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l5\n        var l7 = l6\n        var l8 = l7\n        var l9 = l8\n        var l10 = l9\n        var l11 = l10\n        var l12 = l11\n        var l13 = l12\n        var l14 = l13\n        var l15 = l14\n        var l16 = l15\n        var l17 = l16\n        var l18 = l17\n        var l19 = l18\n        var l20 = l19\n        var l21 = l20\n        var l22 = l21\n        var l23 = l22\n        var l24 = l23\n        var l25 = l24\n        var l26 = l25\n        var l27 = l26\n        var l28 = l27\n        var l29 = l28\n        var l30 = l29\n        var l31 = l30\n        var l32 = l31\n        var l33 = l32\n        var l34 = l33\n        var l35 = l34\n        var l36 = l35\n        var l37 = l36\n        var l38 = l37\n        var l39 = l38\n        var l40 = l39\n        var l41 = l40\n        var l42 = l41\n        var l43 = l42\n        var l44 = l43\n        var l45 = l44\n        var l46 = l45\n        var l47 = l46\n        var l48 = l47\n        var l49 = l48\n        var l50 = l49\n        var l51 = l50\n        var l52 = l51\n        var l53 = l52\n        var l54 = l53\n        var l55 = l54\n        var l56 = l55\n        var l57 = l56\n        var l58 = l57\n        var l59 = l58\n        var l60 = l59\n        var l61 = l60\n        var l62 = l61\n        var l63 = l62\n        var l64 = l63\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdoq009qi.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdoq009qi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoq009qi.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqtjlt3pz.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpqtjlt3pz.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3.toInt\n        var l5 = l4.toInt\n        var l6 = l5.toInt\n        var l7 = l6.toInt\n        var l8 = l7.toInt\n        var l9 = l8.toInt\n        var l10 = l9.toInt\n        var l11 = l10.toInt\n        var l12 = l11.toInt\n        var l13 = l12.toInt\n        var l14 = l13.toInt\n        var l15 = l14.toInt\n        var l16 = l15.toInt\n        var l17 = l16.toInt\n        var l18 = l17.toInt\n        var l19 = l18.toInt\n        var l20 = l19.toInt\n        var l21 = l20.toInt\n        var l22 = l21.toInt\n        var l23 = l22.toInt\n        var l24 = l23.toInt\n        var l25 = l24.toInt\n        var l26 = l25.toInt\n        var l27 = l26.toInt\n        var l28 = l27.toInt\n        var l29 = l28.toInt\n        var l30 = l29.toInt\n        var l31 = l30.toInt\n        var l32 = l31.toInt\n        var l33 = l32.toInt\n        var l34 = l33.toInt\n        var l35 = l34.toInt\n        var l36 = l35.toInt\n        var l37 = l36.toInt\n        var l38 = l37.toInt\n        var l39 = l38.toInt\n        var l40 = l39.toInt\n        var l41 = l40.toInt\n        var l42 = l41.toInt\n        var l43 = l42.toInt\n        var l44 = l43.toInt\n        var l45 = l44.toInt\n        var l46 = l45.toInt\n        var l47 = l46.toInt\n        var l48 = l47.\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8jt5vz1c.scala:57:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8jt5vz1c.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8jt5vz1c.scala:57:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (_.toFloat(l.get(l.length() / 2 - 1)) + _.toFloat(l.get(l.length() / 2))) / 2.0f\n        } else {\n            return _.toFloat(l.get(l.length() / 2))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293307,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppjtbuw8a.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmppjtbuw8a.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmppjtbuw8a.scala:12:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) + _.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m))) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m(_$1, _$2) => \n\u001b[31m   |\u001b[0m  _$1.toFloat(l.get(l.length() / 2 - 1)) + _$2.toFloat(l.get(l.length() / 2)).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmppjtbuw8a.scala:12:59 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) + _.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m))) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m(_$1, _$2) => \n\u001b[31m   |\u001b[0m  _$1.toFloat(l.get(l.length() / 2 - 1)) + _$2.toFloat(l.get(l.length() / 2)).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmppjtbuw8a.scala:14:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m _.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.toArray\n        var l4 = l3.length\n        var l5 = l4.toLong\n        var l6 = l5.toArray\n        var l7 = l6.length\n        var l8 = l7.toLong\n        var l9 = l8.toArray\n        var l10 = l9.length\n        var l11 = l10.toLong\n        var l12 = l11.toArray\n        var l13 = l12.length\n        var l14 = l13.toLong\n        var l15 = l14.toArray\n        var l16 = l15.length\n        var l17 = l16.toLong\n        var l18 = l17.toArray\n        var l19 = l18.length\n        var l20 = l19.toLong\n        var l21 = l20.toArray\n        var l22 = l21.length\n        var l23 = l22.toLong\n        var l24 = l23.toArray\n        var l25 = l24.length\n        var l26 = l25.toLong\n        var l27 = l26.toArray\n        var l28 = l27.length\n        var l29 = l28.toLong\n        var l30 = l29.toArray\n        var l31 = l30.length\n        var l32 = l31.toLong\n        var l33 = l32.toArray\n        var l34 = l33.length\n        var l35 = l34.toLong\n        var l36 = l35.toArray\n        var l37 = l36.length\n        var l38 = l37.toLong\n        var l39 = l38.toArray\n        var l40 = l39.length\n        var l41 = l40.toLong\n        var l42 = l41.toArray\n        var l43 = l42.length\n        var l44 = l43.toLong\n        var l45 = l44.toArray\n        var l46 = l45.length\n        var l47 = l46.toLong\n        var l48 = l47.toArray\n        var l49 = l48.length\n        \n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293313,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqsob07c5.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqsob07c5.scala:59:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length % 2 == 1) {\n            return (l(l.length / 2) + l(l.length / 2 - 1)) / 2.0f\n        } else {\n            return l(l.length / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj41o019v.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3.toInt\n        var l5 = l4.toInt\n        var l6 = l5.toInt\n        var l7 = l6.toInt\n        var l8 = l7.toInt\n        var l9 = l8.toInt\n        var l10 = l9.toInt\n        var l11 = l10.toInt\n        var l12 = l11.toInt\n        var l13 = l12.toInt\n        var l14 = l13.toInt\n        var l15 = l14.toInt\n        var l16 = l15.toInt\n        var l17 = l16.toInt\n        var l18 = l17.toInt\n        var l19 = l18.toInt\n        var l20 = l19.toInt\n        var l21 = l20.toInt\n        var l22 = l21.toInt\n        var l23 = l22.toInt\n        var l24 = l23.toInt\n        var l25 = l24.toInt\n        var l26 = l25.toInt\n        var l27 = l26.toInt\n        var l28 = l27.toInt\n        var l29 = l28.toInt\n        var l30 = l29.toInt\n        var l31 = l30.toInt\n        var l32 = l31.toInt\n        var l33 = l32.toInt\n        var l34 = l33.toInt\n        var l35 = l34.toInt\n        var l36 = l35.toInt\n        var l37 = l36.toInt\n        var l38 = l37.toInt\n        var l39 = l38.toInt\n        var l40 = l39.toInt\n        var l41 = l40.toInt\n        var l42 = l41.toInt\n        var l43 = l42.toInt\n        var l44 = l43.toInt\n        var l45 = l44.toInt\n        var l46 = l45.toInt\n        var l47 = l46.toInt\n        var l48 = l47.\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8jt5vz1c.scala:57:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8jt5vz1c.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8jt5vz1c.scala:57:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (_.toFloat(l.head) + _.toFloat(l.tail.head)) / 2.0f\n        } else {\n            return _.toFloat(l.head)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293311,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdie_dmg8.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpdie_dmg8.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpdie_dmg8.scala:12:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l.head) + _.toFloat(l.tail.head)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   (_$1, _$2) => _$1.toFloat(l.head) + _$2.toFloat(l.tail.head).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpdie_dmg8.scala:12:40 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l.head) + _.toFloat(l.tail.head)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   (_$1, _$2) => _$1.toFloat(l.head) + _$2.toFloat(l.tail.head).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpdie_dmg8.scala:14:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m _.toFloat(l.head)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$3 of expanded function:\n\u001b[31m   |\u001b[0m   _$3 => _$3.toFloat(l.head).\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var l4 = l3 / 2\n        var l5 = l4 - 1\n        var l6 = l2[l5]\n        var l7 = l6\n        if (l3 % 2 == 1) {\n            l7 = l6\n        }\n        var l8 = l7\n        var l9 = l8.toFloat\n        var l10 = l9\n        if (l3 % 2 == 0) {\n            l10 = (l6 + l8) / 2.0f\n        }\n        var l11 = l10\n        return l11\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293319,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfud4c_m9.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfud4c_m9.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml6\u001b[0m = l2[\u001b[35ml5\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: type l5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l(l.length() / 2) + l(l.length() / 2 - 1)) / 2.0f\n        } else {\n            return l(l.length() / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphymmidyt.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:14:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m l(l.length() / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer e",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = 0l\n        var l6 = 0l\n        var l7 = 0l\n        var l8 = 0l\n        var l9 = 0l\n        var l10 = 0l\n        var l11 = 0l\n        var l12 = 0l\n        var l13 = 0l\n        var l14 = 0l\n        var l15 = 0l\n        var l16 = 0l\n        var l17 = 0l\n        var l18 = 0l\n        var l19 = 0l\n        var l20 = 0l\n        var l21 = 0l\n        var l22 = 0l\n        var l23 = 0l\n        var l24 = 0l\n        var l25 = 0l\n        var l26 = 0l\n        var l27 = 0l\n        var l28 = 0l\n        var l29 = 0l\n        var l30 = 0l\n        var l31 = 0l\n        var l32 = 0l\n        var l33 = 0l\n        var l34 = 0l\n        var l35 = 0l\n        var l36 = 0l\n        var l37 = 0l\n        var l38 = 0l\n        var l39 = 0l\n        var l40 = 0l\n        var l41 = 0l\n        var l42 = 0l\n        var l43 = 0l\n        var l44 = 0l\n        var l45 = 0l\n        var l46 = 0l\n        var l47 = 0l\n        var l48 = 0l\n        var l49 = 0l\n        var l50 = 0l\n        var l51 = 0l\n        var l52 = 0l\n        var l53 = 0l\n        var l54 = 0l\n        var l55 = 0l\n        var l56 = 0l\n        var l57 = 0l\n        var l58 = 0l\n        var l59 = 0l\n        var l60 = 0l\n        var l61 = 0l\n        var l62 = 0l\n        var l63 = 0l\n        var l64 = 0l\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp3yeozipa.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3yeozipa.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3yeozipa.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpktz3j3g8.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpktz3j3g8.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.toList\n        var l4 = l3.sort(Comparator.comparingLong(l3.head))\n        var l5 = l4.toList\n        var l6 = l5.head\n        var l7 = l6.toLong\n        var l8 = l7.toList\n        var l9 = l8.head\n        var l10 = l9.toLong\n        var l11 = l10.toList\n        var l12 = l11.head\n        var l13 = l12.toLong\n        var l14 = l13.toList\n        var l15 = l14.head\n        var l16 = l15.toLong\n        var l17 = l16.toList\n        var l18 = l17.head\n        var l19 = l18.toLong\n        var l20 = l19.toList\n        var l21 = l20.head\n        var l22 = l21.toLong\n        var l23 = l22.toList\n        var l24 = l23.head\n        var l25 = l24.toLong\n        var l26 = l25.toList\n        var l27 = l26.head\n        var l28 = l27.toLong\n        var l29 = l28.toList\n        var l30 = l29.head\n        var l31 = l30.toLong\n        var l32 = l31.toList\n        var l33 = l32.head\n        var l34 = l33.toLong\n        var l35 = l34.toList\n        var l36 = l35.head\n        var l37 = l36.toLong\n        var l38 = l37.toList\n        var l39 = l38.head\n        var l40 = l39.toLong\n        var l41 = l40.toList\n        var l42 = l41.head\n        var l43 = l42.toLong\n        var l44 = l43.toList\n        var l45 = l44.head\n        var l46 = l45.toLong\n        var l47 = l46.toList\n        var l48 = l47.head\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293320,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp86zs3x47.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp86zs3x47.scala:57:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l5\n        var l7 = l6\n        var l8 = l7\n        var l9 = l8\n        var l10 = l9\n        var l11 = l10\n        var l12 = l11\n        var l13 = l12\n        var l14 = l13\n        var l15 = l14\n        var l16 = l15\n        var l17 = l16\n        var l18 = l17\n        var l19 = l18\n        var l20 = l19\n        var l21 = l20\n        var l22 = l21\n        var l23 = l22\n        var l24 = l23\n        var l25 = l24\n        var l26 = l25\n        var l27 = l26\n        var l28 = l27\n        var l29 = l28\n        var l30 = l29\n        var l31 = l30\n        var l32 = l31\n        var l33 = l32\n        var l34 = l33\n        var l35 = l34\n        var l36 = l35\n        var l37 = l36\n        var l38 = l37\n        var l39 = l38\n        var l40 = l39\n        var l41 = l40\n        var l42 = l41\n        var l43 = l42\n        var l44 = l43\n        var l45 = l44\n        var l46 = l45\n        var l47 = l46\n        var l48 = l47\n        var l49 = l48\n        var l50 = l49\n        var l51 = l50\n        var l52 = l51\n        var l53 = l52\n        var l54 = l53\n        var l55 = l54\n        var l56 = l55\n        var l57 = l56\n        var l58 = l57\n        var l59 = l58\n        var l60 = l59\n        var l61 = l60\n        var l62 = l61\n        var l63 = l62\n        var l64 = l63\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdoq009qi.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdoq009qi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoq009qi.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (_.toFloat(l.get(l.length() / 2 - 1) + l.get(l.length() / 2)) / 2)\n        } else {\n            return _.toFloat(l.get(l.length() / 2))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293310,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvhg5hjxh.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpvhg5hjxh.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpvhg5hjxh.scala:12:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m) + l.get(l.length() / \u001b[31m2\u001b[0m)) / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m_$1 => _$1.toFloat(l.get(l.length() / 2 - 1) + l.get(l.length() / 2)) / 2.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpvhg5hjxh.scala:14:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m _.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.toFloat(l.get(l.length() / 2)).\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var n = l.length\n        if (n == 0) throw new RuntimeException(\"List is empty\")\n        if (n == 1) return (float) l(0)\n        var m = n / 2\n        var i = _.toInt(m)\n        var j = _.toInt(n - 1 - i)\n        var k = _.toInt(n / 2)\n        var a = l(i)\n        var b = l(j)\n        var c = l(k)\n        if (a > b) {\n            if (a > c) return a\n            else return c\n        } else {\n            if (b > c) return b\n            else return c\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293321,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppeeyd2w1.scala:12:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mif\u001b[0m (n == \u001b[31m1\u001b[0m) \u001b[33mreturn\u001b[0m (float) l(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmppeeyd2w1.scala:14:16 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mi\u001b[0m = _.toInt(m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.toInt(m).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmppeeyd2w1.scala:15:16 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mj\u001b[0m = _.toInt(n - \u001b[31m1\u001b[0m - i)\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.toInt(n - 1 - i).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmppeeyd2w1.scala:16:16 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mk\u001b[0m = _.toInt(n / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$3 of expanded function:\n\u001b[31m   |\u001b[0m   _$3 => _$3.toInt(n / 2).\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        if (l.isEmpty()) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var a = l.toSeq().toBuffer()\n        var n = a.length\n        if (n == 1) {\n            return a.head\n        }\n        var m = n / 2\n        var lo = a.slice(0, m).toSeq().toBuffer()\n        var hi = a.slice(m, n).toSeq().toBuffer()\n        var loMedian = median(lo)\n        var hiMedian = median(hi)\n        if (loMedian < hiMedian) {\n            return loMedian\n        } else {\n            return hiMedian\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293318,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpay_s5n9m.scala:10:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mif\u001b[0m (l.isEmpty()) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35misEmpty\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpay_s5n9m.scala:13:23 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma\u001b[0m = l.toSeq().toBuffer()\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter n of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mLinearSeqOps\u001b[0m: (n: Int): Long\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = 0\n        var l6 = 0\n        var l7 = 0\n        var l8 = 0\n        var l9 = 0\n        var l10 = 0\n        var l11 = 0\n        var l12 = 0\n        var l13 = 0\n        var l14 = 0\n        var l15 = 0\n        var l16 = 0\n        var l17 = 0\n        var l18 = 0\n        var l19 = 0\n        var l20 = 0\n        var l21 = 0\n        var l22 = 0\n        var l23 = 0\n        var l24 = 0\n        var l25 = 0\n        var l26 = 0\n        var l27 = 0\n        var l28 = 0\n        var l29 = 0\n        var l30 = 0\n        var l31 = 0\n        var l32 = 0\n        var l33 = 0\n        var l34 = 0\n        var l35 = 0\n        var l36 = 0\n        var l37 = 0\n        var l38 = 0\n        var l39 = 0\n        var l40 = 0\n        var l41 = 0\n        var l42 = 0\n        var l43 = 0\n        var l44 = 0\n        var l45 = 0\n        var l46 = 0\n        var l47 = 0\n        var l48 = 0\n        var l49 = 0\n        var l50 = 0\n        var l51 = 0\n        var l52 = 0\n        var l53 = 0\n        var l54 = 0\n        var l55 = 0\n        var l56 = 0\n        var l57 = 0\n        var l58 = 0\n        var l59 = 0\n        var l60 = 0\n        var l61 = 0\n        var l62 = 0\n        var l63 = 0\n        var l64 = 0\n        var l65 = 0\n        var l66 = 0\n        var l67 = 0\n        var l68 = 0\n        var l69 = 0\n        var l70 = 0\n        var l71 = 0\n        var l72 = 0\n        var l73 = 0\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293311,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm__1aw3x.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm__1aw3x.scala:82:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        if (l.length == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var nums = l.toLongs()\n        var numsLen = nums.length\n        var numsCopy = nums.copy()\n        var numsCopyLen = numsCopy.length\n        var numsCopyCopy = numsCopy.copy()\n        var numsCopyCopyLen = numsCopyCopy.length\n        var numsCopyCopyCopy = numsCopyCopy.copy()\n        var numsCopyCopyCopyLen = numsCopyCopyCopy.length\n        var numsCopyCopyCopyCopy = numsCopyCopyCopy.copy()\n        var numsCopyCopyCopyCopyLen = numsCopyCopyCopyCopy.length\n        var numsCopyCopyCopyCopyCopy = numsCopyCopyCopyCopy.copy()\n        var numsCopyCopyCopyCopyCopyLen = numsCopyCopyCopyCopyCopy.length\n        var numsCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopy.copy()\n        var numsCopyCopyCopyCopyCopyCopyLen = numsCopyCopyCopyCopyCopyCopy.length\n        var numsCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopy.copy()\n        var numsCopyCopyCopyCopyCopyCopyCopyLen = numsCopyCopyCopyCopyCopyCopyCopy.length\n        var numsCopyCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopy.copy()\n        var numsCopyCopyCopyCopyCopyCopyCopyCopyLen = numsCopyCopyCopyCopyCopyCopyCopyCopyCopy.length\n        var numsCopyCopyCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopyCopyCopy.copy()\n        var numsCopyCopyCopyCopyCopyCopyCopyCopyCopyLen = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.length\n        var numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.copy()\n        var numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyLen = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.length\n        var numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = numsCopyCopyCopyCopyCopyCopyCopy\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293321,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo_oxvijc.scala:13:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mnums\u001b[0m = l.toLongs()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value toLongs is not a member of List[Long]\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpo_oxvijc.scala:31:55 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mnumsCopyCopyCopyCopyCopyCopyCopyCopyCopy\u001b[0m = numsCopyCopyCopyCopyCopyCopyCopyCopyCopy.copy()\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m  Recursive \u001b[33mvariable\u001b[0m \u001b[35mnumsCopyCopyCopyCopyCopyCopyCopyCopyCopy\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo_oxvijc.scala:34:62 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mnumsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyLen\u001b[0m = numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy.length\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m     Not found: numsCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo_oxvijc.scala:36:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqtjlt3pz.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpqtjlt3pz.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l4 - 1\n        var l7 = l6\n        var l8 = l6 + 1\n        var l9 = l8\n        var l10 = l7\n        var l11 = l5\n        var l12 = l4\n        var l13 = l3 - 1\n        var l14 = l13\n        var l15 = l13 + 1\n        var l16 = l15\n        var l17 = l14\n        var l18 = l12\n        var l19 = l11\n        var l20 = l10\n        var l21 = l9\n        var l22 = l8\n        var l23 = l7\n        var l24 = l6\n        var l25 = l5\n        var l26 = l4\n        var l27 = l3 - 1\n        var l28 = l27\n        var l29 = l27 + 1\n        var l30 = l29\n        var l31 = l28\n        var l32 = l27\n        var l33 = l26\n        var l34 = l25\n        var l35 = l24\n        var l36 = l23\n        var l37 = l22\n        var l38 = l21\n        var l39 = l20\n        var l40 = l19\n        var l41 = l18\n        var l42 = l17\n        var l43 = l16\n        var l44 = l15\n        var l45 = l14\n        var l46 = l13\n        var l47 = l12\n        var l48 = l11\n        var l49 = l10\n        var l50 = l9\n        var l51 = l8\n        var l52 = l7\n        var l53 = l6\n        var l54 = l5\n        var l55 = l4\n        var l56 = l3 - 1\n        var l57 = l56\n        var l58 = l56 + 1\n        var l59 = l58\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293322,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpnsmg1sj5.scala:71:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnsmg1sj5.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnsmg1sj5.scala:72:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l4\n        var l7 = l4\n        var l8 = l4\n        var l9 = l4\n        var l10 = l4\n        var l11 = l4\n        var l12 = l4\n        var l13 = l4\n        var l14 = l4\n        var l15 = l4\n        var l16 = l4\n        var l17 = l4\n        var l18 = l4\n        var l19 = l4\n        var l20 = l4\n        var l21 = l4\n        var l22 = l4\n        var l23 = l4\n        var l24 = l4\n        var l25 = l4\n        var l26 = l4\n        var l27 = l4\n        var l28 = l4\n        var l29 = l4\n        var l30 = l4\n        var l31 = l4\n        var l32 = l4\n        var l33 = l4\n        var l34 = l4\n        var l35 = l4\n        var l36 = l4\n        var l37 = l4\n        var l38 = l4\n        var l39 = l4\n        var l40 = l4\n        var l41 = l4\n        var l42 = l4\n        var l43 = l4\n        var l44 = l4\n        var l45 = l4\n        var l46 = l4\n        var l47 = l4\n        var l48 = l4\n        var l49 = l4\n        var l50 = l4\n        var l51 = l4\n        var l52 = l4\n        var l53 = l4\n        var l54 = l4\n        var l55 = l4\n        var l56 = l4\n        var l57 = l4\n        var l58 = l4\n        var l59 = l4\n        var l60 = l4\n        var l61 = l4\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp_43upnzg.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_43upnzg.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_43upnzg.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = 0l\n        var l6 = 0l\n        var l7 = 0l\n        var l8 = 0l\n        var l9 = 0l\n        var l10 = 0l\n        var l11 = 0l\n        var l12 = 0l\n        var l13 = 0l\n        var l14 = 0l\n        var l15 = 0l\n        var l16 = 0l\n        var l17 = 0l\n        var l18 = 0l\n        var l19 = 0l\n        var l20 = 0l\n        var l21 = 0l\n        var l22 = 0l\n        var l23 = 0l\n        var l24 = 0l\n        var l25 = 0l\n        var l26 = 0l\n        var l27 = 0l\n        var l28 = 0l\n        var l29 = 0l\n        var l30 = 0l\n        var l31 = 0l\n        var l32 = 0l\n        var l33 = 0l\n        var l34 = 0l\n        var l35 = 0l\n        var l36 = 0l\n        var l37 = 0l\n        var l38 = 0l\n        var l39 = 0l\n        var l40 = 0l\n        var l41 = 0l\n        var l42 = 0l\n        var l43 = 0l\n        var l44 = 0l\n        var l45 = 0l\n        var l46 = 0l\n        var l47 = 0l\n        var l48 = 0l\n        var l49 = 0l\n        var l50 = 0l\n        var l51 = 0l\n        var l52 = 0l\n        var l53 = 0l\n        var l54 = 0l\n        var l55 = 0l\n        var l56 = 0l\n        var l57 = 0l\n        var l58 = 0l\n        var l59 = 0l\n        var l60 = 0l\n        var l61 = 0l\n        var l62 = 0l\n        var l63 = 0l\n        var l64 = 0l\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp3yeozipa.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3yeozipa.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3yeozipa.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l(l.length() / 2) + l(l.length() / 2 - 1)) / 2.0f\n        } else {\n            return l(l.length() / 2)\n        }\n    }\n\n    // Return the median of the two given lists.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)), (List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // (15.0f)\n    def median(l1 : List[Long], l2 : List[Long]) : Float = {\n        l1.sort()\n        l2.sort()\n        if (l1.length() % 2 == 1) {\n            return (l1(l1.length() / 2) + l2(l2.length() / 2 - 1)) / 2.0f\n        } else {\n            return l1(l1.length() / 2)\n        }\n    }\n\n    // Return the median of the two given lists.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293322,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdgei1k4f.scala:46:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdgei1k4f.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpdgei1k4f.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpdgei1k4f.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpdgei1k4f.scala:12:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpdgei1k4f.scala:14:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m l(l.length() / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m             ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = 0\n        var l6 = 0\n        var l7 = 0\n        var l8 = 0\n        var l9 = 0\n        var l10 = 0\n        var l11 = 0\n        var l12 = 0\n        var l13 = 0\n        var l14 = 0\n        var l15 = 0\n        var l16 = 0\n        var l17 = 0\n        var l18 = 0\n        var l19 = 0\n        var l20 = 0\n        var l21 = 0\n        var l22 = 0\n        var l23 = 0\n        var l24 = 0\n        var l25 = 0\n        var l26 = 0\n        var l27 = 0\n        var l28 = 0\n        var l29 = 0\n        var l30 = 0\n        var l31 = 0\n        var l32 = 0\n        var l33 = 0\n        var l34 = 0\n        var l35 = 0\n        var l36 = 0\n        var l37 = 0\n        var l38 = 0\n        var l39 = 0\n        var l40 = 0\n        var l41 = 0\n        var l42 = 0\n        var l43 = 0\n        var l44 = 0\n        var l45 = 0\n        var l46 = 0\n        var l47 = 0\n        var l48 = 0\n        var l49 = 0\n        var l50 = 0\n        var l51 = 0\n        var l52 = 0\n        var l53 = 0\n        var l54 = 0\n        var l55 = 0\n        var l56 = 0\n        var l57 = 0\n        var l58 = 0\n        var l59 = 0\n        var l60 = 0\n        var l61 = 0\n        var l62 = 0\n        var l63 = 0\n        var l64 = 0\n        var l65 = 0\n        var l66 = 0\n        var l67 = 0\n        var l68 = 0\n        var l69 = 0\n        var l70 = 0\n        var l71 = 0\n        var l72 = 0\n        var l73 = 0\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293311,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm__1aw3x.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm__1aw3x.scala:82:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4 - 1\n        var l6 = l5 + 1\n        var l7 = l6 - 1\n        var l8 = l7 + 1\n        var l9 = l8 - 1\n        var l10 = l9 + 1\n        var l11 = l10 - 1\n        var l12 = l11 + 1\n        var l13 = l12 - 1\n        var l14 = l13 + 1\n        var l15 = l14 - 1\n        var l16 = l15 + 1\n        var l17 = l16 - 1\n        var l18 = l17 + 1\n        var l19 = l18 - 1\n        var l20 = l19 + 1\n        var l21 = l20 - 1\n        var l22 = l21 + 1\n        var l23 = l22 - 1\n        var l24 = l23 + 1\n        var l25 = l24 - 1\n        var l26 = l25 + 1\n        var l27 = l26 - 1\n        var l28 = l27 + 1\n        var l29 = l28 - 1\n        var l30 = l29 + 1\n        var l31 = l30 - 1\n        var l32 = l31 + 1\n        var l33 = l32 - 1\n        var l34 = l33 + 1\n        var l35 = l34 - 1\n        var l36 = l35 + 1\n        var l37 = l36 - 1\n        var l38 = l37 + 1\n        var l39 = l38 - 1\n        var l40 = l39 + 1\n        var l41 = l40 - 1\n        var l42 = l41 + 1\n        var l43 = l42 - 1\n        var l44 = l43 + 1\n        var l45 = l44 - 1\n        var l46 = l45 + 1\n        var l47 = l46 - 1\n        var l48 = l47 + 1\n        var l49 = l48 - 1\n        var l50 = l49 + 1\n        var l51 = l50 - 1\n        var l52 = l51 + 1\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293323,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp1km1nx86.scala:61:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1km1nx86.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1km1nx86.scala:62:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpktz3j3g8.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpktz3j3g8.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (_.toFloat(l.get(l.length() / 2 - 1)) + _.toFloat(l.get(l.length() / 2))) / 2.0f\n        } else {\n            return _.toFloat(l.get(l.length() / 2))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293307,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppjtbuw8a.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmppjtbuw8a.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmppjtbuw8a.scala:12:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) + _.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m))) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m(_$1, _$2) => \n\u001b[31m   |\u001b[0m  _$1.toFloat(l.get(l.length() / 2 - 1)) + _$2.toFloat(l.get(l.length() / 2)).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmppjtbuw8a.scala:12:59 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) + _.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m))) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m(_$1, _$2) => \n\u001b[31m   |\u001b[0m  _$1.toFloat(l.get(l.length() / 2 - 1)) + _$2.toFloat(l.get(l.length() / 2)).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmppjtbuw8a.scala:14:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m _.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = 0l\n        var l6 = 0l\n        var l7 = 0l\n        var l8 = 0l\n        var l9 = 0l\n        var l10 = 0l\n        var l11 = 0l\n        var l12 = 0l\n        var l13 = 0l\n        var l14 = 0l\n        var l15 = 0l\n        var l16 = 0l\n        var l17 = 0l\n        var l18 = 0l\n        var l19 = 0l\n        var l20 = 0l\n        var l21 = 0l\n        var l22 = 0l\n        var l23 = 0l\n        var l24 = 0l\n        var l25 = 0l\n        var l26 = 0l\n        var l27 = 0l\n        var l28 = 0l\n        var l29 = 0l\n        var l30 = 0l\n        var l31 = 0l\n        var l32 = 0l\n        var l33 = 0l\n        var l34 = 0l\n        var l35 = 0l\n        var l36 = 0l\n        var l37 = 0l\n        var l38 = 0l\n        var l39 = 0l\n        var l40 = 0l\n        var l41 = 0l\n        var l42 = 0l\n        var l43 = 0l\n        var l44 = 0l\n        var l45 = 0l\n        var l46 = 0l\n        var l47 = 0l\n        var l48 = 0l\n        var l49 = 0l\n        var l50 = 0l\n        var l51 = 0l\n        var l52 = 0l\n        var l53 = 0l\n        var l54 = 0l\n        var l55 = 0l\n        var l56 = 0l\n        var l57 = 0l\n        var l58 = 0l\n        var l59 = 0l\n        var l60 = 0l\n        var l61 = 0l\n        var l62 = 0l\n        var l63 = 0l\n        var l64 = 0l\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp3yeozipa.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3yeozipa.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3yeozipa.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqtjlt3pz.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpqtjlt3pz.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var n = l.length\n        if (n == 0)\n            throw new RuntimeException(\"List is empty\")\n        var m = n / 2\n        var a = l.slice(0, m)\n        var b = l.slice(m, n)\n        var c = a.sort().toList()\n        var d = b.sort().toList()\n        var e = c.length\n        var f = d.length\n        if (e == f) {\n            if (e % 2 == 1)\n                return (c.head + d.head) / 2.0f\n            else\n                return c.head\n        } else {\n            if (e > f)\n                return d.head\n            else\n                return c.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293324,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxjje819v.scala:16:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mc\u001b[0m = a.sort().toList()\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[Long] - did you mean List[Long].sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxjje819v.scala:17:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36md\u001b[0m = b.sort().toList()\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.seq AsJavaList\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversionsToJava.seq AsJavaList\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l(l.length() / 2) + l(l.length() / 2 - 1)) / 2.0f\n        } else {\n            return l(l.length() / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphymmidyt.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:14:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m l(l.length() / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer e",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqtjlt3pz.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpqtjlt3pz.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqtjlt3pz.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpqtjlt3pz.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = 0\n        while (l6 < l4) {\n            l6 = l6 + 1\n            var l7 = l6\n            var l8 = l7\n            var l9 = l7\n            var l10 = l7\n            var l11 = l7\n            var l12 = l7\n            var l13 = l7\n            var l14 = l7\n            var l15 = l7\n            var l16 = l7\n            var l17 = l7\n            var l18 = l7\n            var l19 = l7\n            var l20 = l7\n            var l21 = l7\n            var l22 = l7\n            var l23 = l7\n            var l24 = l7\n            var l25 = l7\n            var l26 = l7\n            var l27 = l7\n            var l28 = l7\n            var l29 = l7\n            var l30 = l7\n            var l31 = l7\n            var l32 = l7\n            var l33 = l7\n            var l34 = l7\n            var l35 = l7\n            var l36 = l7\n            var l37 = l7\n            var l38 = l7\n            var l39 = l7\n            var l40 = l7\n            var l41 = l7\n            var l42 = l7\n            var l43 = l7\n            var l44 = l7\n            var l45 = l7\n            var l46 = l7\n            var l47 = l7\n            var l48 = l7\n            var l49 = l7\n            var l50 = l7\n            var l51 = l7\n            var l52 = l7\n            var l53 = l7\n            var l54 = l7\n            var l55 = l7\n            var l56 = l7\n            var l57 = l7\n            var l58 = l7\n            var l59 = l7\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1kph7cko.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1kph7cko.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1kph7cko.scala:82:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp1kph7cko.scala:74:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m74 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        if (l.length == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var n = l.length\n        var m = n / 2\n        var i = 0\n        var j = n - 1\n        var k = 0\n        var x = 0.0f\n        while (i <= j) {\n            k = i + j\n            if (k == n) {\n                k = 0\n            }\n            if (l[i] > l[j]) {\n                x = l[i]\n                l[i] = l[j]\n                l[j] = x\n            }\n            if (l[i] < l[j]) {\n                x = l[i]\n                l[i] = l[j]\n                l[j] = x\n            }\n            if (l[i] == l[j]) {\n                i += 1\n                j -= 1\n            } else {\n                i += 1\n            }\n        }\n        return l[m]\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293319,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpllosm0_4.scala:26:21 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m                l[\u001b[35mi\u001b[0m] = l[j]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpllosm0_4.scala:27:21 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m                l[\u001b[35mj\u001b[0m] = x\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpllosm0_4.scala:31:21 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                l[\u001b[35mi\u001b[0m] = l[j]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpllosm0_4.scala:32:21 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                l[\u001b[35mj\u001b[0m] = x\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpllosm0_4.scala:24:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mif\u001b[0m (l[\u001b[35mi\u001b[0m] > l[\u001b[35mj\u001b[0m]) {\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpllosm0_4.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                x = l[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpllosm0_4.scala:26:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m                l[\u001b[35mi\u001b[0m] = l[j]\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available whe",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"Cannot take the median of an empty list\")\n        }\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l4\n        var l7 = l4\n        var l8 = l4\n        var l9 = l4\n        var l10 = l4\n        var l11 = l4\n        var l12 = l4\n        var l13 = l4\n        var l14 = l4\n        var l15 = l4\n        var l16 = l4\n        var l17 = l4\n        var l18 = l4\n        var l19 = l4\n        var l20 = l4\n        var l21 = l4\n        var l22 = l4\n        var l23 = l4\n        var l24 = l4\n        var l25 = l4\n        var l26 = l4\n        var l27 = l4\n        var l28 = l4\n        var l29 = l4\n        var l30 = l4\n        var l31 = l4\n        var l32 = l4\n        var l33 = l4\n        var l34 = l4\n        var l35 = l4\n        var l36 = l4\n        var l37 = l4\n        var l38 = l4\n        var l39 = l4\n        var l40 = l4\n        var l41 = l4\n        var l42 = l4\n        var l43 = l4\n        var l44 = l4\n        var l45 = l4\n        var l46 = l4\n        var l47 = l4\n        var l48 = l4\n        var l49 = l4\n        var l50 = l4\n        var l51 = l4\n        var l52 = l4\n        var l53 = l4\n        var l54 = l4\n        var l55 = l4\n        var l56 = l4\n        var l57 = l4\n        var l58 = l4\n        var l59 = l4\n        var l60 = l4\n        var l61\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293323,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp755cmmne.scala:73:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp755cmmne.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp755cmmne.scala:73:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.toList\n        var l4 = l3.sort(Comparator.comparingLong(l3.head))\n        var l5 = l4.tail\n        var l6 = l5.tail\n        var l7 = l6.tail\n        var l8 = l7.tail\n        var l9 = l8.tail\n        var l10 = l9.tail\n        var l11 = l10.tail\n        var l12 = l11.tail\n        var l13 = l12.tail\n        var l14 = l13.tail\n        var l15 = l14.tail\n        var l16 = l15.tail\n        var l17 = l16.tail\n        var l18 = l17.tail\n        var l19 = l18.tail\n        var l20 = l19.tail\n        var l21 = l20.tail\n        var l22 = l21.tail\n        var l23 = l22.tail\n        var l24 = l23.tail\n        var l25 = l24.tail\n        var l26 = l25.tail\n        var l27 = l26.tail\n        var l28 = l27.tail\n        var l29 = l28.tail\n        var l30 = l29.tail\n        var l31 = l30.tail\n        var l32 = l31.tail\n        var l33 = l32.tail\n        var l34 = l33.tail\n        var l35 = l34.tail\n        var l36 = l35.tail\n        var l37 = l36.tail\n        var l38 = l37.tail\n        var l39 = l38.tail\n        var l40 = l39.tail\n        var l41 = l40.tail\n        var l42 = l41.tail\n        var l43 = l42.tail\n        var l44 = l43.tail\n        var l45 = l44.tail\n        var l46 = l45.tail\n        var l47 = l46.tail\n        var l48 = l47.tail\n        var l49 = l48.tail\n        var l50 = l49.tail\n        var l51 = l50.\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwod961rj.scala:60:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwod961rj.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwod961rj.scala:60:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4 - 1\n        var l6 = l5 + 1\n        var l7 = l6.toFloat\n        var l8 = l7.toFloat\n        var l9 = l8.toFloat\n        var l10 = l9.toFloat\n        var l11 = l10.toFloat\n        var l12 = l11.toFloat\n        var l13 = l12.toFloat\n        var l14 = l13.toFloat\n        var l15 = l14.toFloat\n        var l16 = l15.toFloat\n        var l17 = l16.toFloat\n        var l18 = l17.toFloat\n        var l19 = l18.toFloat\n        var l20 = l19.toFloat\n        var l21 = l20.toFloat\n        var l22 = l21.toFloat\n        var l23 = l22.toFloat\n        var l24 = l23.toFloat\n        var l25 = l24.toFloat\n        var l26 = l25.toFloat\n        var l27 = l26.toFloat\n        var l28 = l27.toFloat\n        var l29 = l28.toFloat\n        var l30 = l29.toFloat\n        var l31 = l30.toFloat\n        var l32 = l31.toFloat\n        var l33 = l32.toFloat\n        var l34 = l33.toFloat\n        var l35 = l34.toFloat\n        var l36 = l35.toFloat\n        var l37 = l36.toFloat\n        var l38 = l37.toFloat\n        var l39 = l38.toFloat\n        var l40 = l39.toFloat\n        var l41 = l40.toFloat\n        var l42 = l41.toFloat\n        var l43 = l42.toFloat\n        var l44 = l43.toFloat\n        var l45 = l44.toFloat\n        var l46 = l45.toFloat\n        var l47 = l46.toFloat\n        var l48 = l47.toFloat\n\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293311,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxr1f3b6f.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxr1f3b6f.scala:58:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (_.toFloat(l.get(l.length() / 2 - 1) + l.get(l.length() / 2)) / 2.0f)\n        } else {\n            return _.toFloat(l.get(l.length() / 2))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprtx2w6ft.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmprtx2w6ft.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmprtx2w6ft.scala:12:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m) + l.get(l.length() / \u001b[31m2\u001b[0m)) / \u001b[31m2.0f\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m_$1 => _$1.toFloat(l.get(l.length() / 2 - 1) + l.get(l.length() / 2)) / \u001b[31m2.0f\u001b[0m.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmprtx2w6ft.scala:14:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m _.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.toFloat(l.get(l.length() / 2)).\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (_.toFloat(l.get(l.length() / 2 - 1) + l.get(l.length() / 2)) / 2)\n        } else {\n            return _.toFloat(l.get(l.length() / 2))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293310,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvhg5hjxh.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpvhg5hjxh.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpvhg5hjxh.scala:12:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m) + l.get(l.length() / \u001b[31m2\u001b[0m)) / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m_$1 => _$1.toFloat(l.get(l.length() / 2 - 1) + l.get(l.length() / 2)) / 2.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpvhg5hjxh.scala:14:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m _.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.toFloat(l.get(l.length() / 2)).\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length % 2 == 0) {\n            return (_.toFloat(l.head) + _.toFloat(l.tail.head)) / 2.0f\n        } else {\n            return _.toFloat(l.head)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293323,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsk3mjko_.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpsk3mjko_.scala:12:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l.head) + _.toFloat(l.tail.head)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   (_$1, _$2) => _$1.toFloat(l.head) + _$2.toFloat(l.tail.head).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpsk3mjko_.scala:12:40 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l.head) + _.toFloat(l.tail.head)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   (_$1, _$2) => _$1.toFloat(l.head) + _$2.toFloat(l.tail.head).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpsk3mjko_.scala:14:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m _.toFloat(l.head)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$3 of expanded function:\n\u001b[31m   |\u001b[0m   _$3 => _$3.toFloat(l.head).\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l5\n        var l7 = l6\n        var l8 = l7\n        var l9 = l8\n        var l10 = l9\n        var l11 = l10\n        var l12 = l11\n        var l13 = l12\n        var l14 = l13\n        var l15 = l14\n        var l16 = l15\n        var l17 = l16\n        var l18 = l17\n        var l19 = l18\n        var l20 = l19\n        var l21 = l20\n        var l22 = l21\n        var l23 = l22\n        var l24 = l23\n        var l25 = l24\n        var l26 = l25\n        var l27 = l26\n        var l28 = l27\n        var l29 = l28\n        var l30 = l29\n        var l31 = l30\n        var l32 = l31\n        var l33 = l32\n        var l34 = l33\n        var l35 = l34\n        var l36 = l35\n        var l37 = l36\n        var l38 = l37\n        var l39 = l38\n        var l40 = l39\n        var l41 = l40\n        var l42 = l41\n        var l43 = l42\n        var l44 = l43\n        var l45 = l44\n        var l46 = l45\n        var l47 = l46\n        var l48 = l47\n        var l49 = l48\n        var l50 = l49\n        var l51 = l50\n        var l52 = l51\n        var l53 = l52\n        var l54 = l53\n        var l55 = l54\n        var l56 = l55\n        var l57 = l56\n        var l58 = l57\n        var l59 = l58\n        var l60 = l59\n        var l61 = l60\n        var l62 = l61\n        var l63 = l62\n        var l64 = l63\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdoq009qi.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdoq009qi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoq009qi.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l5\n        var l7 = l6\n        var l8 = l7\n        var l9 = l8\n        var l10 = l9\n        var l11 = l10\n        var l12 = l11\n        var l13 = l12\n        var l14 = l13\n        var l15 = l14\n        var l16 = l15\n        var l17 = l16\n        var l18 = l17\n        var l19 = l18\n        var l20 = l19\n        var l21 = l20\n        var l22 = l21\n        var l23 = l22\n        var l24 = l23\n        var l25 = l24\n        var l26 = l25\n        var l27 = l26\n        var l28 = l27\n        var l29 = l28\n        var l30 = l29\n        var l31 = l30\n        var l32 = l31\n        var l33 = l32\n        var l34 = l33\n        var l35 = l34\n        var l36 = l35\n        var l37 = l36\n        var l38 = l37\n        var l39 = l38\n        var l40 = l39\n        var l41 = l40\n        var l42 = l41\n        var l43 = l42\n        var l44 = l43\n        var l45 = l44\n        var l46 = l45\n        var l47 = l46\n        var l48 = l47\n        var l49 = l48\n        var l50 = l49\n        var l51 = l50\n        var l52 = l51\n        var l53 = l52\n        var l54 = l53\n        var l55 = l54\n        var l56 = l55\n        var l57 = l56\n        var l58 = l57\n        var l59 = l58\n        var l60 = l59\n        var l61 = l60\n        var l62 = l61\n        var l63 = l62\n        var l64 = l63\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdoq009qi.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdoq009qi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoq009qi.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l5\n        var l7 = l6\n        var l8 = l7\n        var l9 = l8\n        var l10 = l9\n        var l11 = l10\n        var l12 = l11\n        var l13 = l12\n        var l14 = l13\n        var l15 = l14\n        var l16 = l15\n        var l17 = l16\n        var l18 = l17\n        var l19 = l18\n        var l20 = l19\n        var l21 = l20\n        var l22 = l21\n        var l23 = l22\n        var l24 = l23\n        var l25 = l24\n        var l26 = l25\n        var l27 = l26\n        var l28 = l27\n        var l29 = l28\n        var l30 = l29\n        var l31 = l30\n        var l32 = l31\n        var l33 = l32\n        var l34 = l33\n        var l35 = l34\n        var l36 = l35\n        var l37 = l36\n        var l38 = l37\n        var l39 = l38\n        var l40 = l39\n        var l41 = l40\n        var l42 = l41\n        var l43 = l42\n        var l44 = l43\n        var l45 = l44\n        var l46 = l45\n        var l47 = l46\n        var l48 = l47\n        var l49 = l48\n        var l50 = l49\n        var l51 = l50\n        var l52 = l51\n        var l53 = l52\n        var l54 = l53\n        var l55 = l54\n        var l56 = l55\n        var l57 = l56\n        var l58 = l57\n        var l59 = l58\n        var l60 = l59\n        var l61 = l60\n        var l62 = l61\n        var l63 = l62\n        var l64 = l63\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdoq009qi.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdoq009qi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoq009qi.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var l4 = l3 / 2\n        var l5 = l4 - 1\n        var l6 = l2[l5]\n        var l7 = l6\n        if (l5 == 0) {\n            l7 = l2[l4]\n        }\n        var l8 = l7\n        if (l5 == l3 - 1) {\n            l8 = l2[l5]\n        }\n        var l9 = l8\n        if (l5 == l3 / 2) {\n            l9 = l2[l5]\n        }\n        var l10 = l9\n        if (l5 == l3 / 2 - 1) {\n            l10 = l2[l5]\n        }\n        var l11 = l10\n        if (l5 == l3 / 2 + 1) {\n            l11 = l2[l5]\n        }\n        var l12 = l11\n        if (l5 == l3 / 2 + 2) {\n            l12 = l2[l5]\n        }\n        var l13 = l12\n        if (l5 == l3 / 2 + 3) {\n            l13 = l2[l5]\n        }\n        var l14 = l13\n        if (l5 == l3 / 2 + 4) {\n            l14 = l2[l5]\n        }\n        var l15 = l14\n        if (l5 == l3 / 2 + 5) {\n            l15 = l2[l5]\n        }\n        var l16 = l15\n        if (l5 == l3 / 2 + 6) {\n            l16 = l2[l5]\n        }\n        var l17 = l16\n        if (l5 == l3 / 2 + 7) {\n            l17 = l2[l5]\n        }\n        var l18 = l17\n        if (l5 == l3 / 2 + 8) {\n            l18 = l2[l5]\n        }\n        \n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293324,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpneik87ri.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpneik87ri.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml6\u001b[0m = l2[\u001b[35ml5\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: type l5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpneik87ri.scala:20:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            l7 = l2[\u001b[35ml4\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: type l4\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpneik87ri.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            l8 = l2[\u001b[35ml5\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: type l5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpneik87ri.scala:28:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            l9 = l2[\u001b[35ml5\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: type l5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpneik87ri.scala:32:21 --------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l4\n        var l7 = l4\n        var l8 = l4\n        var l9 = l4\n        var l10 = l4\n        var l11 = l4\n        var l12 = l4\n        var l13 = l4\n        var l14 = l4\n        var l15 = l4\n        var l16 = l4\n        var l17 = l4\n        var l18 = l4\n        var l19 = l4\n        var l20 = l4\n        var l21 = l4\n        var l22 = l4\n        var l23 = l4\n        var l24 = l4\n        var l25 = l4\n        var l26 = l4\n        var l27 = l4\n        var l28 = l4\n        var l29 = l4\n        var l30 = l4\n        var l31 = l4\n        var l32 = l4\n        var l33 = l4\n        var l34 = l4\n        var l35 = l4\n        var l36 = l4\n        var l37 = l4\n        var l38 = l4\n        var l39 = l4\n        var l40 = l4\n        var l41 = l4\n        var l42 = l4\n        var l43 = l4\n        var l44 = l4\n        var l45 = l4\n        var l46 = l4\n        var l47 = l4\n        var l48 = l4\n        var l49 = l4\n        var l50 = l4\n        var l51 = l4\n        var l52 = l4\n        var l53 = l4\n        var l54 = l4\n        var l55 = l4\n        var l56 = l4\n        var l57 = l4\n        var l58 = l4\n        var l59 = l4\n        var l60 = l4\n        var l61 = l4\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp_43upnzg.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_43upnzg.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_43upnzg.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l(l.length() / 2) + l(l.length() / 2 - 1)) / 2.0f\n        } else {\n            return l(l.length() / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphymmidyt.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:14:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m l(l.length() / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer e",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpktz3j3g8.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpktz3j3g8.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l4\n        var l7 = l4\n        var l8 = l4\n        var l9 = l4\n        var l10 = l4\n        var l11 = l4\n        var l12 = l4\n        var l13 = l4\n        var l14 = l4\n        var l15 = l4\n        var l16 = l4\n        var l17 = l4\n        var l18 = l4\n        var l19 = l4\n        var l20 = l4\n        var l21 = l4\n        var l22 = l4\n        var l23 = l4\n        var l24 = l4\n        var l25 = l4\n        var l26 = l4\n        var l27 = l4\n        var l28 = l4\n        var l29 = l4\n        var l30 = l4\n        var l31 = l4\n        var l32 = l4\n        var l33 = l4\n        var l34 = l4\n        var l35 = l4\n        var l36 = l4\n        var l37 = l4\n        var l38 = l4\n        var l39 = l4\n        var l40 = l4\n        var l41 = l4\n        var l42 = l4\n        var l43 = l4\n        var l44 = l4\n        var l45 = l4\n        var l46 = l4\n        var l47 = l4\n        var l48 = l4\n        var l49 = l4\n        var l50 = l4\n        var l51 = l4\n        var l52 = l4\n        var l53 = l4\n        var l54 = l4\n        var l55 = l4\n        var l56 = l4\n        var l57 = l4\n        var l58 = l4\n        var l59 = l4\n        var l60 = l4\n        var l61 = l4\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp_43upnzg.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_43upnzg.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_43upnzg.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l(l.length() / 2) + l(l.length() / 2 - 1)) / 2.0f\n        } else {\n            return l(l.length() / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphymmidyt.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:14:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m l(l.length() / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer e",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l(l.length() / 2) + l(l.length() / 2 - 1)) / 2.0f\n        } else {\n            return l(l.length() / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphymmidyt.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:14:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m l(l.length() / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer e",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length % 2 == 0) {\n            return (_.toFloat(l[(l.length / 2) - 1]) + _.toFloat(l[l.length / 2])) / 2.0f\n        } else {\n            return _.toFloat(l[l.length / 2])\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293323,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpk0q2hyv3.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpk0q2hyv3.scala:12:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l[(l.length \u001b[35m/\u001b[0m \u001b[31m2\u001b[0m) \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) + _.toFloat(l[l.length \u001b[35m/\u001b[0m \u001b[31m2\u001b[0m])) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   (_$1, _$2) => \n\u001b[31m   |\u001b[0m     _$1.toFloat(l[(l.length \u001b[35m/\u001b[0m \u001b[31m2\u001b[0m.\u001b[33mtype\u001b[0m) \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m.\u001b[33mtype\u001b[0m]) + \n\u001b[31m   |\u001b[0m       _$2.toFloat(l[l.length \u001b[35m/\u001b[0m \u001b[31m2\u001b[0m.\u001b[33mtype\u001b[0m]).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpk0q2hyv3.scala:12:55 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l[(l.length \u001b[35m/\u001b[0m \u001b[31m2\u001b[0m) \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) + _.toFloat(l[l.length \u001b[35m/\u001b[0m \u001b[31m2\u001b[0m])) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   (_$1, _$2) => \n\u001b[31m   |\u001b[0m     _$1.toFloat(l[(l.length \u001b[35m/\u001b[0m \u001b[31m2\u001b[0m.\u001b[33mtype\u001b[0m) \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m.\u001b[33mtype\u001b[0m]) + \n\u001b[31m   |\u001b[0m       _$2.toFloat(l[l.length \u001b[35m/\u001b[0m \u001b[31m2\u001b[0m.\u001b[33mtype\u001b[0m]).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpk0q2hyv3.scala:14:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m _.toFloat(l[l.length \u001b[35m/\u001b[0m \u001b[31m2\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$3 of expanded function:\n\u001b[31m   |\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l5\n        var l7 = l6\n        var l8 = l7\n        var l9 = l8\n        var l10 = l9\n        var l11 = l10\n        var l12 = l11\n        var l13 = l12\n        var l14 = l13\n        var l15 = l14\n        var l16 = l15\n        var l17 = l16\n        var l18 = l17\n        var l19 = l18\n        var l20 = l19\n        var l21 = l20\n        var l22 = l21\n        var l23 = l22\n        var l24 = l23\n        var l25 = l24\n        var l26 = l25\n        var l27 = l26\n        var l28 = l27\n        var l29 = l28\n        var l30 = l29\n        var l31 = l30\n        var l32 = l31\n        var l33 = l32\n        var l34 = l33\n        var l35 = l34\n        var l36 = l35\n        var l37 = l36\n        var l38 = l37\n        var l39 = l38\n        var l40 = l39\n        var l41 = l40\n        var l42 = l41\n        var l43 = l42\n        var l44 = l43\n        var l45 = l44\n        var l46 = l45\n        var l47 = l46\n        var l48 = l47\n        var l49 = l48\n        var l50 = l49\n        var l51 = l50\n        var l52 = l51\n        var l53 = l52\n        var l54 = l53\n        var l55 = l54\n        var l56 = l55\n        var l57 = l56\n        var l58 = l57\n        var l59 = l58\n        var l60 = l59\n        var l61 = l60\n        var l62 = l61\n        var l63 = l62\n        var l64 = l63\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdoq009qi.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdoq009qi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoq009qi.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (l(l.length() / 2) + l(l.length() / 2 - 1)) / 2.0f\n        } else {\n            return l(l.length() / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293307,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpls671_ji.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpls671_ji.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpls671_ji.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpls671_ji.scala:12:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpls671_ji.scala:14:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m l(l.length() / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer e",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = 0l\n        var l7 = 0l\n        var l8 = 0l\n        var l9 = 0l\n        var l10 = 0l\n        var l11 = 0l\n        var l12 = 0l\n        var l13 = 0l\n        var l14 = 0l\n        var l15 = 0l\n        var l16 = 0l\n        var l17 = 0l\n        var l18 = 0l\n        var l19 = 0l\n        var l20 = 0l\n        var l21 = 0l\n        var l22 = 0l\n        var l23 = 0l\n        var l24 = 0l\n        var l25 = 0l\n        var l26 = 0l\n        var l27 = 0l\n        var l28 = 0l\n        var l29 = 0l\n        var l30 = 0l\n        var l31 = 0l\n        var l32 = 0l\n        var l33 = 0l\n        var l34 = 0l\n        var l35 = 0l\n        var l36 = 0l\n        var l37 = 0l\n        var l38 = 0l\n        var l39 = 0l\n        var l40 = 0l\n        var l41 = 0l\n        var l42 = 0l\n        var l43 = 0l\n        var l44 = 0l\n        var l45 = 0l\n        var l46 = 0l\n        var l47 = 0l\n        var l48 = 0l\n        var l49 = 0l\n        var l50 = 0l\n        var l51 = 0l\n        var l52 = 0l\n        var l53 = 0l\n        var l54 = 0l\n        var l55 = 0l\n        var l56 = 0l\n        var l57 = 0l\n        var l58 = 0l\n        var l59 = 0l\n        var l60 = 0l\n        var l61 = 0l\n        var l62 = 0l\n        var l63 = 0l\n        var l64 = 0l\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293326,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpckuk4vrd.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpckuk4vrd.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpckuk4vrd.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l4 - 1\n        var l7 = l5\n        var l8 = l6\n        var l9 = l5\n        var l10 = l6\n        var l11 = l5\n        var l12 = l6\n        var l13 = l5\n        var l14 = l6\n        var l15 = l5\n        var l16 = l6\n        var l17 = l5\n        var l18 = l6\n        var l19 = l5\n        var l20 = l6\n        var l21 = l5\n        var l22 = l6\n        var l23 = l5\n        var l24 = l6\n        var l25 = l5\n        var l26 = l6\n        var l27 = l5\n        var l28 = l6\n        var l29 = l5\n        var l30 = l6\n        var l31 = l5\n        var l32 = l6\n        var l33 = l5\n        var l34 = l6\n        var l35 = l5\n        var l36 = l6\n        var l37 = l5\n        var l38 = l6\n        var l39 = l5\n        var l40 = l6\n        var l41 = l5\n        var l42 = l6\n        var l43 = l5\n        var l44 = l6\n        var l45 = l5\n        var l46 = l6\n        var l47 = l5\n        var l48 = l6\n        var l49 = l5\n        var l50 = l6\n        var l51 = l5\n        var l52 = l6\n        var l53 = l5\n        var l54 = l6\n        var l55 = l5\n        var l56 = l6\n        var l57 = l5\n        var l58 = l6\n        var l59 = l5\n        var l60 = l6\n        var l61 = l5\n\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293326,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqq9fdslg.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqq9fdslg.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var l4 = l3 / 2\n        var l5 = l4 - 1\n        var l6 = l2[l5]\n        var l7 = l6\n        if (l3 % 2 == 1) {\n            l7 = l6\n        }\n        var l8 = l7\n        var l9 = l8\n        if (l3 % 2 == 1) {\n            l9 = l8\n        }\n        var l10 = l9\n        if (l3 % 2 == 1) {\n            l10 = l8\n        }\n        var l11 = l10\n        var l12 = l11\n        if (l3 % 2 == 1) {\n            l12 = l10\n        }\n        var l13 = l12\n        var l14 = l13\n        if (l3 % 2 == 1) {\n            l14 = l10\n        }\n        var l15 = l14\n        var l16 = l15\n        if (l3 % 2 == 1) {\n            l16 = l10\n        }\n        var l17 = l16\n        var l18 = l17\n        if (l3 % 2 == 1) {\n            l18 = l10\n        }\n        var l19 = l18\n        var l20 = l19\n        if (l3 % 2 == 1) {\n            l20 = l10\n        }\n        var l21 = l20\n        var l22 = l21\n        if (l3 % 2 == 1) {\n            l22 = l10\n        }\n        var l23 = l22\n        var l24 = l23\n        if (l3 % 2 == 1) {\n            l24 = l10\n        }\n        var l25 = l24\n        var l26 = l25\n        if (l3 % 2 == 1) {\n            l26 = l10\n        }\n        var l27 = l26\n        var l28 = l27\n        if (l3 % 2 == 1) {\n            l28 = l10\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293327,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmb0qrmp6.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmb0qrmp6.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmb0qrmp6.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml6\u001b[0m = l2[\u001b[35ml5\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: type l5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmb0qrmp6.scala:84:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpmb0qrmp6.scala:76:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m76 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"Cannot take the median of an empty list\")\n        }\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l4\n        var l7 = 0l\n        var l8 = 0l\n        var l9 = 0l\n        var l10 = 0l\n        var l11 = 0l\n        var l12 = 0l\n        var l13 = 0l\n        var l14 = 0l\n        var l15 = 0l\n        var l16 = 0l\n        var l17 = 0l\n        var l18 = 0l\n        var l19 = 0l\n        var l20 = 0l\n        var l21 = 0l\n        var l22 = 0l\n        var l23 = 0l\n        var l24 = 0l\n        var l25 = 0l\n        var l26 = 0l\n        var l27 = 0l\n        var l28 = 0l\n        var l29 = 0l\n        var l30 = 0l\n        var l31 = 0l\n        var l32 = 0l\n        var l33 = 0l\n        var l34 = 0l\n        var l35 = 0l\n        var l36 = 0l\n        var l37 = 0l\n        var l38 = 0l\n        var l39 = 0l\n        var l40 = 0l\n        var l41 = 0l\n        var l42 = 0l\n        var l43 = 0l\n        var l44 = 0l\n        var l45 = 0l\n        var l46 = 0l\n        var l47 = 0l\n        var l48 = 0l\n        var l49 = 0l\n        var l50 = 0l\n        var l51 = 0l\n        var l52 = 0l\n        var l53 = 0l\n        var l54 = 0l\n        var l55 = 0l\n        var l56 = 0l\n        var l57 = 0l\n        var l58 = 0l\n        var l59 = 0l\n        var l60 = 0l\n        var l61\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293326,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjst9x1sl.scala:73:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjst9x1sl.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjst9x1sl.scala:73:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (_.toFloat(l.get(l.length() / 2 - 1)) + _.toFloat(l.get(l.length() / 2))) / 2.0f\n        } else {\n            return _.toFloat(l.get(l.length() / 2))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293307,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppjtbuw8a.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmppjtbuw8a.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmppjtbuw8a.scala:12:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) + _.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m))) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m(_$1, _$2) => \n\u001b[31m   |\u001b[0m  _$1.toFloat(l.get(l.length() / 2 - 1)) + _$2.toFloat(l.get(l.length() / 2)).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmppjtbuw8a.scala:12:59 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) + _.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m))) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m(_$1, _$2) => \n\u001b[31m   |\u001b[0m  _$1.toFloat(l.get(l.length() / 2 - 1)) + _$2.toFloat(l.get(l.length() / 2)).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmppjtbuw8a.scala:14:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m _.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (_.toFloat(l.get(l.length() / 2 - 1) + l.get(l.length() / 2)) / 2)\n        } else {\n            return _.toFloat(l.get(l.length() / 2))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293310,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvhg5hjxh.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpvhg5hjxh.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpvhg5hjxh.scala:12:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m) + l.get(l.length() / \u001b[31m2\u001b[0m)) / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m_$1 => _$1.toFloat(l.get(l.length() / 2 - 1) + l.get(l.length() / 2)) / 2.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpvhg5hjxh.scala:14:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m _.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.toFloat(l.get(l.length() / 2)).\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l5\n        var l7 = l6\n        var l8 = l7\n        var l9 = l8\n        var l10 = l9\n        var l11 = l10\n        var l12 = l11\n        var l13 = l12\n        var l14 = l13\n        var l15 = l14\n        var l16 = l15\n        var l17 = l16\n        var l18 = l17\n        var l19 = l18\n        var l20 = l19\n        var l21 = l20\n        var l22 = l21\n        var l23 = l22\n        var l24 = l23\n        var l25 = l24\n        var l26 = l25\n        var l27 = l26\n        var l28 = l27\n        var l29 = l28\n        var l30 = l29\n        var l31 = l30\n        var l32 = l31\n        var l33 = l32\n        var l34 = l33\n        var l35 = l34\n        var l36 = l35\n        var l37 = l36\n        var l38 = l37\n        var l39 = l38\n        var l40 = l39\n        var l41 = l40\n        var l42 = l41\n        var l43 = l42\n        var l44 = l43\n        var l45 = l44\n        var l46 = l45\n        var l47 = l46\n        var l48 = l47\n        var l49 = l48\n        var l50 = l49\n        var l51 = l50\n        var l52 = l51\n        var l53 = l52\n        var l54 = l53\n        var l55 = l54\n        var l56 = l55\n        var l57 = l56\n        var l58 = l57\n        var l59 = l58\n        var l60 = l59\n        var l61 = l60\n        var l62 = l61\n        var l63 = l62\n        var l64 = l63\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdoq009qi.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdoq009qi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoq009qi.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4 - 1\n        var l6 = l5.toInt\n        var l7 = l6.toInt\n        var l8 = l7.toInt\n        var l9 = l8.toInt\n        var l10 = l9.toInt\n        var l11 = l10.toInt\n        var l12 = l11.toInt\n        var l13 = l12.toInt\n        var l14 = l13.toInt\n        var l15 = l14.toInt\n        var l16 = l15.toInt\n        var l17 = l16.toInt\n        var l18 = l17.toInt\n        var l19 = l18.toInt\n        var l20 = l19.toInt\n        var l21 = l20.toInt\n        var l22 = l21.toInt\n        var l23 = l22.toInt\n        var l24 = l23.toInt\n        var l25 = l24.toInt\n        var l26 = l25.toInt\n        var l27 = l26.toInt\n        var l28 = l27.toInt\n        var l29 = l28.toInt\n        var l30 = l29.toInt\n        var l31 = l30.toInt\n        var l32 = l31.toInt\n        var l33 = l32.toInt\n        var l34 = l33.toInt\n        var l35 = l34.toInt\n        var l36 = l35.toInt\n        var l37 = l36.toInt\n        var l38 = l37.toInt\n        var l39 = l38.toInt\n        var l40 = l39.toInt\n        var l41 = l40.toInt\n        var l42 = l41.toInt\n        var l43 = l42.toInt\n        var l44 = l43.toInt\n        var l45 = l44.toInt\n        var l46 = l45.toInt\n        var l47 = l46.toInt\n        var l48 = l47.toInt\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293326,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1jrvr_pn.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1jrvr_pn.scala:57:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length % 2 == 1) {\n            return (l(l.length / 2).toFloat)\n        } else {\n            return ((l(l.length / 2 - 1).toFloat) + (l(l.length / 2).toFloat)) / 2.0f\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdr27iyvi.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l(l.length() / 2) + l(l.length() / 2 - 1)) / 2.0f\n        } else {\n            return l(l.length() / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphymmidyt.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:14:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m l(l.length() / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer e",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l(l.length() / 2) + l(l.length() / 2 - 1)) / 2.0f\n        } else {\n            return l(l.length() / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphymmidyt.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:14:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m l(l.length() / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer e",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l5\n        var l7 = l6\n        var l8 = l7\n        var l9 = l8\n        var l10 = l9\n        var l11 = l10\n        var l12 = l11\n        var l13 = l12\n        var l14 = l13\n        var l15 = l14\n        var l16 = l15\n        var l17 = l16\n        var l18 = l17\n        var l19 = l18\n        var l20 = l19\n        var l21 = l20\n        var l22 = l21\n        var l23 = l22\n        var l24 = l23\n        var l25 = l24\n        var l26 = l25\n        var l27 = l26\n        var l28 = l27\n        var l29 = l28\n        var l30 = l29\n        var l31 = l30\n        var l32 = l31\n        var l33 = l32\n        var l34 = l33\n        var l35 = l34\n        var l36 = l35\n        var l37 = l36\n        var l38 = l37\n        var l39 = l38\n        var l40 = l39\n        var l41 = l40\n        var l42 = l41\n        var l43 = l42\n        var l44 = l43\n        var l45 = l44\n        var l46 = l45\n        var l47 = l46\n        var l48 = l47\n        var l49 = l48\n        var l50 = l49\n        var l51 = l50\n        var l52 = l51\n        var l53 = l52\n        var l54 = l53\n        var l55 = l54\n        var l56 = l55\n        var l57 = l56\n        var l58 = l57\n        var l59 = l58\n        var l60 = l59\n        var l61 = l60\n        var l62 = l61\n        var l63 = l62\n        var l64 = l63\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdoq009qi.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdoq009qi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoq009qi.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l5\n        var l7 = l6\n        var l8 = l7\n        var l9 = l8\n        var l10 = l9\n        var l11 = l10\n        var l12 = l11\n        var l13 = l12\n        var l14 = l13\n        var l15 = l14\n        var l16 = l15\n        var l17 = l16\n        var l18 = l17\n        var l19 = l18\n        var l20 = l19\n        var l21 = l20\n        var l22 = l21\n        var l23 = l22\n        var l24 = l23\n        var l25 = l24\n        var l26 = l25\n        var l27 = l26\n        var l28 = l27\n        var l29 = l28\n        var l30 = l29\n        var l31 = l30\n        var l32 = l31\n        var l33 = l32\n        var l34 = l33\n        var l35 = l34\n        var l36 = l35\n        var l37 = l36\n        var l38 = l37\n        var l39 = l38\n        var l40 = l39\n        var l41 = l40\n        var l42 = l41\n        var l43 = l42\n        var l44 = l43\n        var l45 = l44\n        var l46 = l45\n        var l47 = l46\n        var l48 = l47\n        var l49 = l48\n        var l50 = l49\n        var l51 = l50\n        var l52 = l51\n        var l53 = l52\n        var l54 = l53\n        var l55 = l54\n        var l56 = l55\n        var l57 = l56\n        var l58 = l57\n        var l59 = l58\n        var l60 = l59\n        var l61 = l60\n        var l62 = l61\n        var l63 = l62\n        var l64 = l63\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdoq009qi.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdoq009qi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoq009qi.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l.apply(l.length() / 2).toFloat)\n        } else {\n            return ((l.apply(l.length() / 2 - 1).toFloat) + (l.apply(l.length() / 2).toFloat)) / 2.0f\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293326,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_0a69se2.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp_0a69se2.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp_0a69se2.scala:12:30 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l.apply(l.length() / \u001b[31m2\u001b[0m).toFloat)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp_0a69se2.scala:14:31 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m ((l.apply(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m).toFloat) + (l.apply(l.length() / \u001b[31m2\u001b[0m).toFloat)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp_0a69se2.scala:14:71 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m ((l.apply(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m).toFloat) + (l.apply(l.length() / \u001b[31m2\u001b[0m).toFloat)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                                     ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var result = 0.0f\n        var n = l.length\n        if (n == 0) {\n            return result\n        }\n        var l2 = l.toLong\n        var l3 = l2.sort(Comparator.comparingLong(l3 -> l3))\n        var l4 = l3.takeRight(n / 2)\n        var l5 = l4.toLong\n        var l6 = l5.sort(Comparator.comparingLong(l6 -> l6))\n        var l7 = l6.takeRight(n / 2)\n        var l8 = l7.toLong\n        var l9 = l8.sort(Comparator.comparingLong(l9 -> l9))\n        var l10 = l9.takeRight(n / 2)\n        var l11 = l10.toLong\n        var l12 = l11.sort(Comparator.comparingLong(l12 -> l12))\n        var l13 = l12.takeRight(n / 2)\n        var l14 = l13.toLong\n        var l15 = l14.sort(Comparator.comparingLong(l15 -> l15))\n        var l16 = l15.takeRight(n / 2)\n        var l17 = l16.toLong\n        var l18 = l17.sort(Comparator.comparingLong(l18 -> l18))\n        var l19 = l18.takeRight(n / 2)\n        var l20 = l19.toLong\n        var l21 = l20.sort(Comparator.comparingLong(l21 -> l21))\n        var l22 = l21.takeRight(n / 2)\n        var l23 = l22.toLong\n        var l24 = l23.sort(Comparator.comparingLong(l24 -> l24))\n        var l25 = l24.takeRight(n / 2)\n        var l26 = l25.toLong\n        var l27 = l26.sort(Comparator.comparingLong(l27 -> l27))\n        var l28 = l27.takeRight(n / 2)\n        var l29 = l28.toLong\n        var l30 = l29.sort(\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293333,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp19t9l1zl.scala:43:27 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml30\u001b[0m = l29.sort(\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp19t9l1zl.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp19t9l1zl.scala:44:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l5\n        var l7 = l6\n        var l8 = l7\n        var l9 = l8\n        var l10 = l9\n        var l11 = l10\n        var l12 = l11\n        var l13 = l12\n        var l14 = l13\n        var l15 = l14\n        var l16 = l15\n        var l17 = l16\n        var l18 = l17\n        var l19 = l18\n        var l20 = l19\n        var l21 = l20\n        var l22 = l21\n        var l23 = l22\n        var l24 = l23\n        var l25 = l24\n        var l26 = l25\n        var l27 = l26\n        var l28 = l27\n        var l29 = l28\n        var l30 = l29\n        var l31 = l30\n        var l32 = l31\n        var l33 = l32\n        var l34 = l33\n        var l35 = l34\n        var l36 = l35\n        var l37 = l36\n        var l38 = l37\n        var l39 = l38\n        var l40 = l39\n        var l41 = l40\n        var l42 = l41\n        var l43 = l42\n        var l44 = l43\n        var l45 = l44\n        var l46 = l45\n        var l47 = l46\n        var l48 = l47\n        var l49 = l48\n        var l50 = l49\n        var l51 = l50\n        var l52 = l51\n        var l53 = l52\n        var l54 = l53\n        var l55 = l54\n        var l56 = l55\n        var l57 = l56\n        var l58 = l57\n        var l59 = l58\n        var l60 = l59\n        var l61 = l60\n        var l62 = l61\n        var l63 = l62\n        var l64 = l63\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdoq009qi.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdoq009qi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoq009qi.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3.toInt\n        var l5 = l4.toInt\n        var l6 = l5.toInt\n        var l7 = l6.toInt\n        var l8 = l7.toInt\n        var l9 = l8.toInt\n        var l10 = l9.toInt\n        var l11 = l10.toInt\n        var l12 = l11.toInt\n        var l13 = l12.toInt\n        var l14 = l13.toInt\n        var l15 = l14.toInt\n        var l16 = l15.toInt\n        var l17 = l16.toInt\n        var l18 = l17.toInt\n        var l19 = l18.toInt\n        var l20 = l19.toInt\n        var l21 = l20.toInt\n        var l22 = l21.toInt\n        var l23 = l22.toInt\n        var l24 = l23.toInt\n        var l25 = l24.toInt\n        var l26 = l25.toInt\n        var l27 = l26.toInt\n        var l28 = l27.toInt\n        var l29 = l28.toInt\n        var l30 = l29.toInt\n        var l31 = l30.toInt\n        var l32 = l31.toInt\n        var l33 = l32.toInt\n        var l34 = l33.toInt\n        var l35 = l34.toInt\n        var l36 = l35.toInt\n        var l37 = l36.toInt\n        var l38 = l37.toInt\n        var l39 = l38.toInt\n        var l40 = l39.toInt\n        var l41 = l40.toInt\n        var l42 = l41.toInt\n        var l43 = l42.toInt\n        var l44 = l43.toInt\n        var l45 = l44.toInt\n        var l46 = l45.toInt\n        var l47 = l46.toInt\n        var l48 = l47.\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8jt5vz1c.scala:57:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8jt5vz1c.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8jt5vz1c.scala:57:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l5\n        var l7 = l6\n        var l8 = l7\n        var l9 = l8\n        var l10 = l9\n        var l11 = l10\n        var l12 = l11\n        var l13 = l12\n        var l14 = l13\n        var l15 = l14\n        var l16 = l15\n        var l17 = l16\n        var l18 = l17\n        var l19 = l18\n        var l20 = l19\n        var l21 = l20\n        var l22 = l21\n        var l23 = l22\n        var l24 = l23\n        var l25 = l24\n        var l26 = l25\n        var l27 = l26\n        var l28 = l27\n        var l29 = l28\n        var l30 = l29\n        var l31 = l30\n        var l32 = l31\n        var l33 = l32\n        var l34 = l33\n        var l35 = l34\n        var l36 = l35\n        var l37 = l36\n        var l38 = l37\n        var l39 = l38\n        var l40 = l39\n        var l41 = l40\n        var l42 = l41\n        var l43 = l42\n        var l44 = l43\n        var l45 = l44\n        var l46 = l45\n        var l47 = l46\n        var l48 = l47\n        var l49 = l48\n        var l50 = l49\n        var l51 = l50\n        var l52 = l51\n        var l53 = l52\n        var l54 = l53\n        var l55 = l54\n        var l56 = l55\n        var l57 = l56\n        var l58 = l57\n        var l59 = l58\n        var l60 = l59\n        var l61 = l60\n        var l62 = l61\n        var l63 = l62\n        var l64 = l63\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdoq009qi.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdoq009qi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoq009qi.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        if (l.isEmpty()) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        l.sort()\n        return (l.head + l.tail.size() / 2) / 2.0f\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpymiz60y4.scala:10:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mif\u001b[0m (l.isEmpty()) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35misEmpty\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpymiz60y4.scala:13:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpymiz60y4.scala:14:32 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mreturn\u001b[0m (l.head + l.tail.size() / \u001b[31m2\u001b[0m) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35msize\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mSeqOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var m = l.length\n        if (m == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var n = m / 2\n        var i = 0\n        var j = n\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var A = 0\n        var B = 0\n        var C = 0\n        var D = 0\n        var E = 0\n        var F = 0\n        var G = 0\n        var H = 0\n        var I = 0\n        var J = 0\n        var K = 0\n        var L = 0\n        var M = 0\n        var N = 0\n        var O = 0\n        var P = 0\n        var Q = 0\n        var R = 0\n        var S = 0\n        var T = 0\n        var U = 0\n        var V = 0\n        var W = 0\n        var X = 0\n        var Y = 0\n        var Z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var A = 0\n        var B = 0\n        var C = 0\n        var D = 0\n        var E = 0\n        var F = 0\n        var G = 0\n        var H = 0\n        var I = 0\n        var J = 0\n        var K = 0\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293331,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp8gop8ibq.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mm\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mm is already defined as \u001b[33mvariable\u001b[0m \u001b[35mm\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp8gop8ibq.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mn\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mn is already defined as \u001b[33mvariable\u001b[0m \u001b[35mn\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp8gop8ibq.scala:66:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mi\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mi is already defined as \u001b[33mvariable\u001b[0m \u001b[35mi\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp8gop8ibq.scala:67:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mj\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mj is already defined as \u001b[33mvariable\u001b[0m \u001b[35mj\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp8gop8ibq.scala:68:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mk\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mk is already defined as \u001b[33mvariable\u001b[0m \u001b[35mk\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp8gop8ibq.scala:69:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.toList\n        var l4 = l3.sort(Comparator.comparingLong(l3.head))\n        var l5 = l4.tail.toList\n        var l6 = l5.sort(Comparator.comparingLong(l5.head))\n        var l7 = l6.tail.toList\n        var l8 = l7.sort(Comparator.comparingLong(l7.head))\n        var l9 = l8.tail.toList\n        var l10 = l9.sort(Comparator.comparingLong(l9.head))\n        var l11 = l10.tail.toList\n        var l12 = l11.sort(Comparator.comparingLong(l11.head))\n        var l13 = l12.tail.toList\n        var l14 = l13.sort(Comparator.comparingLong(l13.head))\n        var l15 = l14.tail.toList\n        var l16 = l15.sort(Comparator.comparingLong(l15.head))\n        var l17 = l16.tail.toList\n        var l18 = l17.sort(Comparator.comparingLong(l17.head))\n        var l19 = l18.tail.toList\n        var l20 = l19.sort(Comparator.comparingLong(l19.head))\n        var l21 = l20.tail.toList\n        var l22 = l21.sort(Comparator.comparingLong(l21.head))\n        var l23 = l22.tail.toList\n        var l24 = l23.sort(Comparator.comparingLong(l23.head))\n        var l25 = l24.tail.toList\n        var l26 = l25.sort(Comparator.comparingLong(l25.head))\n        var l27 = l26.tail.toList\n        var l28 = l27.sort(Comparator.comparingLong(l27.head))\n        var l29 = l28.tail.toList\n        var l30 = l29.sort(Comparator.comparingLong(l29.head))\n\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293333,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0s67bp0y.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0s67bp0y.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l5\n        var l7 = l6\n        var l8 = l7\n        var l9 = l8\n        var l10 = l9\n        var l11 = l10\n        var l12 = l11\n        var l13 = l12\n        var l14 = l13\n        var l15 = l14\n        var l16 = l15\n        var l17 = l16\n        var l18 = l17\n        var l19 = l18\n        var l20 = l19\n        var l21 = l20\n        var l22 = l21\n        var l23 = l22\n        var l24 = l23\n        var l25 = l24\n        var l26 = l25\n        var l27 = l26\n        var l28 = l27\n        var l29 = l28\n        var l30 = l29\n        var l31 = l30\n        var l32 = l31\n        var l33 = l32\n        var l34 = l33\n        var l35 = l34\n        var l36 = l35\n        var l37 = l36\n        var l38 = l37\n        var l39 = l38\n        var l40 = l39\n        var l41 = l40\n        var l42 = l41\n        var l43 = l42\n        var l44 = l43\n        var l45 = l44\n        var l46 = l45\n        var l47 = l46\n        var l48 = l47\n        var l49 = l48\n        var l50 = l49\n        var l51 = l50\n        var l52 = l51\n        var l53 = l52\n        var l54 = l53\n        var l55 = l54\n        var l56 = l55\n        var l57 = l56\n        var l58 = l57\n        var l59 = l58\n        var l60 = l59\n        var l61 = l60\n        var l62 = l61\n        var l63 = l62\n        var l64 = l63\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdoq009qi.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdoq009qi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoq009qi.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (_.toFloat(l.get(l.length() / 2 - 1) + l.get(l.length() / 2)) / 2)\n        } else {\n            return _.toFloat(l.get(l.length() / 2))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293310,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvhg5hjxh.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpvhg5hjxh.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpvhg5hjxh.scala:12:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m) + l.get(l.length() / \u001b[31m2\u001b[0m)) / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m_$1 => _$1.toFloat(l.get(l.length() / 2 - 1) + l.get(l.length() / 2)) / 2.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpvhg5hjxh.scala:14:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m _.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.toFloat(l.get(l.length() / 2)).\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpktz3j3g8.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpktz3j3g8.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length % 2 == 0) {\n            return (_.toFloat(l[(l.length / 2) - 1]) + _.toFloat(l[l.length / 2])) / 2.0f\n        } else {\n            return _.toFloat(l[(l.length / 2)])\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293333,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6202la83.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp6202la83.scala:12:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l[(l.length \u001b[35m/\u001b[0m \u001b[31m2\u001b[0m) \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) + _.toFloat(l[l.length \u001b[35m/\u001b[0m \u001b[31m2\u001b[0m])) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   (_$1, _$2) => \n\u001b[31m   |\u001b[0m     _$1.toFloat(l[(l.length \u001b[35m/\u001b[0m \u001b[31m2\u001b[0m.\u001b[33mtype\u001b[0m) \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m.\u001b[33mtype\u001b[0m]) + \n\u001b[31m   |\u001b[0m       _$2.toFloat(l[l.length \u001b[35m/\u001b[0m \u001b[31m2\u001b[0m.\u001b[33mtype\u001b[0m]).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp6202la83.scala:12:55 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l[(l.length \u001b[35m/\u001b[0m \u001b[31m2\u001b[0m) \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m]) + _.toFloat(l[l.length \u001b[35m/\u001b[0m \u001b[31m2\u001b[0m])) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   (_$1, _$2) => \n\u001b[31m   |\u001b[0m     _$1.toFloat(l[(l.length \u001b[35m/\u001b[0m \u001b[31m2\u001b[0m.\u001b[33mtype\u001b[0m) \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m.\u001b[33mtype\u001b[0m]) + \n\u001b[31m   |\u001b[0m       _$2.toFloat(l[l.length \u001b[35m/\u001b[0m \u001b[31m2\u001b[0m.\u001b[33mtype\u001b[0m]).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp6202la83.scala:14:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m _.toFloat(l[(l.length \u001b[35m/\u001b[0m \u001b[31m2\u001b[0m)])\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$3 of expanded function:\n\u001b[31m   |\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length % 2 == 1) {\n            return l.head\n        } else {\n            return (l.head + l.tail.head) / 2.0f\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293334,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpize1etog.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = 0l\n        var l6 = 0l\n        var l7 = 0l\n        var l8 = 0l\n        var l9 = 0l\n        var l10 = 0l\n        var l11 = 0l\n        var l12 = 0l\n        var l13 = 0l\n        var l14 = 0l\n        var l15 = 0l\n        var l16 = 0l\n        var l17 = 0l\n        var l18 = 0l\n        var l19 = 0l\n        var l20 = 0l\n        var l21 = 0l\n        var l22 = 0l\n        var l23 = 0l\n        var l24 = 0l\n        var l25 = 0l\n        var l26 = 0l\n        var l27 = 0l\n        var l28 = 0l\n        var l29 = 0l\n        var l30 = 0l\n        var l31 = 0l\n        var l32 = 0l\n        var l33 = 0l\n        var l34 = 0l\n        var l35 = 0l\n        var l36 = 0l\n        var l37 = 0l\n        var l38 = 0l\n        var l39 = 0l\n        var l40 = 0l\n        var l41 = 0l\n        var l42 = 0l\n        var l43 = 0l\n        var l44 = 0l\n        var l45 = 0l\n        var l46 = 0l\n        var l47 = 0l\n        var l48 = 0l\n        var l49 = 0l\n        var l50 = 0l\n        var l51 = 0l\n        var l52 = 0l\n        var l53 = 0l\n        var l54 = 0l\n        var l55 = 0l\n        var l56 = 0l\n        var l57 = 0l\n        var l58 = 0l\n        var l59 = 0l\n        var l60 = 0l\n        var l61 = 0l\n        var l62 = 0l\n        var l63 = 0l\n        var l64 = 0l\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp3yeozipa.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3yeozipa.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3yeozipa.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l5\n        var l7 = l6\n        var l8 = l7\n        var l9 = l8\n        var l10 = l9\n        var l11 = l10\n        var l12 = l11\n        var l13 = l12\n        var l14 = l13\n        var l15 = l14\n        var l16 = l15\n        var l17 = l16\n        var l18 = l17\n        var l19 = l18\n        var l20 = l19\n        var l21 = l20\n        var l22 = l21\n        var l23 = l22\n        var l24 = l23\n        var l25 = l24\n        var l26 = l25\n        var l27 = l26\n        var l28 = l27\n        var l29 = l28\n        var l30 = l29\n        var l31 = l30\n        var l32 = l31\n        var l33 = l32\n        var l34 = l33\n        var l35 = l34\n        var l36 = l35\n        var l37 = l36\n        var l38 = l37\n        var l39 = l38\n        var l40 = l39\n        var l41 = l40\n        var l42 = l41\n        var l43 = l42\n        var l44 = l43\n        var l45 = l44\n        var l46 = l45\n        var l47 = l46\n        var l48 = l47\n        var l49 = l48\n        var l50 = l49\n        var l51 = l50\n        var l52 = l51\n        var l53 = l52\n        var l54 = l53\n        var l55 = l54\n        var l56 = l55\n        var l57 = l56\n        var l58 = l57\n        var l59 = l58\n        var l60 = l59\n        var l61 = l60\n        var l62 = l61\n        var l63 = l62\n        var l64 = l63\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdoq009qi.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdoq009qi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoq009qi.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"Cannot take the median of an empty list\")\n        }\n        var l4 = l2.head\n        var l5 = l2.tail\n        var l6 = l5.head\n        var l7 = l5.tail\n        var l8 = l6.head\n        var l9 = l6.tail\n        var l10 = l7.head\n        var l11 = l7.tail\n        var l12 = l8.head\n        var l13 = l8.tail\n        var l14 = l9.head\n        var l15 = l9.tail\n        var l16 = l10.head\n        var l17 = l10.tail\n        var l18 = l11.head\n        var l19 = l11.tail\n        var l20 = l12.head\n        var l21 = l12.tail\n        var l22 = l13.head\n        var l23 = l13.tail\n        var l24 = l14.head\n        var l25 = l14.tail\n        var l26 = l15.head\n        var l27 = l15.tail\n        var l28 = l16.head\n        var l29 = l16.tail\n        var l30 = l17.head\n        var l31 = l17.tail\n        var l32 = l18.head\n        var l33 = l18.tail\n        var l34 = l19.head\n        var l35 = l19.tail\n        var l36 = l20.head\n        var l37 = l20.tail\n        var l38 = l21.head\n        var l39 = l21.tail\n        var l40 = l22.head\n        var l41 = l22.tail\n        var l42 = l23.head\n        var l43 = l23.tail\n        var l44 = l24.head\n        var l45 = l24.tail\n        var l46 = l25.head\n        var l47 = l25.tail\n        var l48 = l26.head\n        var l49 = l26.tail\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp8s3zmqdk.scala:61:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8s3zmqdk.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8s3zmqdk.scala:62:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4.toInt\n        var l6 = l5.toInt\n        var l7 = l6.toInt\n        var l8 = l7.toInt\n        var l9 = l8.toInt\n        var l10 = l9.toInt\n        var l11 = l10.toInt\n        var l12 = l11.toInt\n        var l13 = l12.toInt\n        var l14 = l13.toInt\n        var l15 = l14.toInt\n        var l16 = l15.toInt\n        var l17 = l16.toInt\n        var l18 = l17.toInt\n        var l19 = l18.toInt\n        var l20 = l19.toInt\n        var l21 = l20.toInt\n        var l22 = l21.toInt\n        var l23 = l22.toInt\n        var l24 = l23.toInt\n        var l25 = l24.toInt\n        var l26 = l25.toInt\n        var l27 = l26.toInt\n        var l28 = l27.toInt\n        var l29 = l28.toInt\n        var l30 = l29.toInt\n        var l31 = l30.toInt\n        var l32 = l31.toInt\n        var l33 = l32.toInt\n        var l34 = l33.toInt\n        var l35 = l34.toInt\n        var l36 = l35.toInt\n        var l37 = l36.toInt\n        var l38 = l37.toInt\n        var l39 = l38.toInt\n        var l40 = l39.toInt\n        var l41 = l40.toInt\n        var l42 = l41.toInt\n        var l43 = l42.toInt\n        var l44 = l43.toInt\n        var l45 = l44.toInt\n        var l46 = l45.toInt\n        var l47 = l46.toInt\n        var l48 = l47.to\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293312,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp85qzylfi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp85qzylfi.scala:57:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l5\n        var l7 = l6\n        var l8 = l7\n        var l9 = l8\n        var l10 = l9\n        var l11 = l10\n        var l12 = l11\n        var l13 = l12\n        var l14 = l13\n        var l15 = l14\n        var l16 = l15\n        var l17 = l16\n        var l18 = l17\n        var l19 = l18\n        var l20 = l19\n        var l21 = l20\n        var l22 = l21\n        var l23 = l22\n        var l24 = l23\n        var l25 = l24\n        var l26 = l25\n        var l27 = l26\n        var l28 = l27\n        var l29 = l28\n        var l30 = l29\n        var l31 = l30\n        var l32 = l31\n        var l33 = l32\n        var l34 = l33\n        var l35 = l34\n        var l36 = l35\n        var l37 = l36\n        var l38 = l37\n        var l39 = l38\n        var l40 = l39\n        var l41 = l40\n        var l42 = l41\n        var l43 = l42\n        var l44 = l43\n        var l45 = l44\n        var l46 = l45\n        var l47 = l46\n        var l48 = l47\n        var l49 = l48\n        var l50 = l49\n        var l51 = l50\n        var l52 = l51\n        var l53 = l52\n        var l54 = l53\n        var l55 = l54\n        var l56 = l55\n        var l57 = l56\n        var l58 = l57\n        var l59 = l58\n        var l60 = l59\n        var l61 = l60\n        var l62 = l61\n        var l63 = l62\n        var l64 = l63\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdoq009qi.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdoq009qi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoq009qi.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (_.toFloat(l.get(l.length() / 2 - 1) + l.get(l.length() / 2)) / 2)\n        } else {\n            return _.toFloat(l.get(l.length() / 2))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293310,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvhg5hjxh.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpvhg5hjxh.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpvhg5hjxh.scala:12:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m) + l.get(l.length() / \u001b[31m2\u001b[0m)) / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m_$1 => _$1.toFloat(l.get(l.length() / 2 - 1) + l.get(l.length() / 2)) / 2.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpvhg5hjxh.scala:14:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m _.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.toFloat(l.get(l.length() / 2)).\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.toList\n        var l4 = l3.sort(Comparator[Long](_ <=> -1))\n        var l5 = l4.takeWhile(x => x < 0)\n        var l6 = l5.toList\n        var l7 = l6.takeWhile(x => x < 0)\n        var l8 = l7.toList\n        var l9 = l8.takeWhile(x => x < 0)\n        var l10 = l9.toList\n        var l11 = l10.takeWhile(x => x < 0)\n        var l12 = l11.toList\n        var l13 = l12.takeWhile(x => x < 0)\n        var l14 = l13.toList\n        var l15 = l14.takeWhile(x => x < 0)\n        var l16 = l15.toList\n        var l17 = l16.takeWhile(x => x < 0)\n        var l18 = l17.toList\n        var l19 = l18.takeWhile(x => x < 0)\n        var l20 = l19.toList\n        var l21 = l20.takeWhile(x => x < 0)\n        var l22 = l21.toList\n        var l23 = l22.takeWhile(x => x < 0)\n        var l24 = l23.toList\n        var l25 = l24.takeWhile(x => x < 0)\n        var l26 = l25.toList\n        var l27 = l26.takeWhile(x => x < 0)\n        var l28 = l27.toList\n        var l29 = l28.takeWhile(x => x < 0)\n        var l30 = l29.toList\n        var l31 = l30.takeWhile(x => x < 0)\n        var l32 = l31.toList\n        var l33 = l32.takeWhile(x => x < 0)\n        var l34 = l33.toList\n        var l35 = l34.takeWhile(x => x < 0)\n        var l36 = l35.toList\n        var l37 =\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293334,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp4m8_4uru.scala:45:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml37\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4m8_4uru.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4m8_4uru.scala:46:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l(l.length() / 2) + l(l.length() / 2 - 1)) / 2.0f\n        } else {\n            return l(l.length() / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphymmidyt.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:14:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m l(l.length() / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer e",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n\n    // Return the median of the two numbers a and b.\n    // >>> median(1l, 2l)\n    // 1.5\n    def median(a : Long, b : Long) : Float = {\n        return (a + b) / 2.0f\n    }\n\n    // Return the median of the two numbers a and b.\n    // >>> median(1l, 2l)\n    // 1.5\n    def median(a : Long, b : Long) : Float = {\n        return (a + b) / 2.0f\n    }\n\n    // Return the median of the two numbers a and b.\n    // >>> median(1l, 2l)\n    // 1.5\n    def median(a : Long, b : Long) : Float = {\n        return (a + b) / 2.0f\n    }\n\n    // Return the median of the two numbers a and b.\n    // >>> median(1l, 2l)\n    // 1.5\n    def median(a : Long, b : Long) : Float = {\n        return (a + b) / 2.0f\n    }\n\n    // Return the median of the two numbers a and b.\n    // >>> median(1l, 2l)\n    // 1.5\n    def median(a : Long, b : Long) : Float = {\n        return (a + b) / 2.0f\n    }\n\n    // Return the median of the two numbers a and b.\n    // >>> median(1l, 2l)\n    // 1.5\n    def median(a : Long, b : Long) : Float = {\n        return (a + b) / 2.0f\n    }\n\n    // Return the median of the two numbers a and b.\n    // >>> median(1l, 2l)\n    // 1.5\n    def median(a : Long, b : Long) : Float = {\n        return (a + b) / 2.0f\n    }\n\n    \n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpql9c04_8.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpql9c04_8.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpql9c04_8.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpql9c04_8.scala:28:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmedian\u001b[0m(\u001b[36ma\u001b[0m : \u001b[35mLong\u001b[0m, \u001b[36mb\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mFloat\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef median(a: Long, b: Long): Float in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 21 and\n\u001b[31m   |\u001b[0mdef median(a: Long, b: Long): Float in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 28\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpql9c04_8.scala:35:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmedian\u001b[0m(\u001b[36ma\u001b[0m : \u001b[35mLong\u001b[0m, \u001b[36mb\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mFloat\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef median(a: Long, b: Long): Float in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 28 and\n\u001b[31m   |\u001b[0mdef median(a: Long, b: Long): Float in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 35\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqtjlt3pz.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpqtjlt3pz.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4 - 1\n        var l6 = l5.toInt\n        var l7 = l6.toInt\n        var l8 = l7.toInt\n        var l9 = l8.toInt\n        var l10 = l9.toInt\n        var l11 = l10.toInt\n        var l12 = l11.toInt\n        var l13 = l12.toInt\n        var l14 = l13.toInt\n        var l15 = l14.toInt\n        var l16 = l15.toInt\n        var l17 = l16.toInt\n        var l18 = l17.toInt\n        var l19 = l18.toInt\n        var l20 = l19.toInt\n        var l21 = l20.toInt\n        var l22 = l21.toInt\n        var l23 = l22.toInt\n        var l24 = l23.toInt\n        var l25 = l24.toInt\n        var l26 = l25.toInt\n        var l27 = l26.toInt\n        var l28 = l27.toInt\n        var l29 = l28.toInt\n        var l30 = l29.toInt\n        var l31 = l30.toInt\n        var l32 = l31.toInt\n        var l33 = l32.toInt\n        var l34 = l33.toInt\n        var l35 = l34.toInt\n        var l36 = l35.toInt\n        var l37 = l36.toInt\n        var l38 = l37.toInt\n        var l39 = l38.toInt\n        var l40 = l39.toInt\n        var l41 = l40.toInt\n        var l42 = l41.toInt\n        var l43 = l42.toInt\n        var l44 = l43.toInt\n        var l45 = l44.toInt\n        var l46 = l45.toInt\n        var l47 = l46.toInt\n        var l48 = l47.toInt\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293326,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1jrvr_pn.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1jrvr_pn.scala:57:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var l4 = l3 / 2\n        var l5 = l4\n        if (l3 % 2 == 1) {\n            l5 = l4 + 1\n        }\n        var l6 = _.toFloat(l2[l5])\n        var l7 = _.toFloat(l2[l5 - 1])\n        var l8 = _.toFloat(l2[l5 + 1])\n        var l9 = _.toFloat(l2[0])\n        var l10 = _.toFloat(l2[l3 - 1])\n        var l11 = _.toFloat(l2[l3])\n        var l12 = _.toFloat(l2[l3 + 1])\n        var l13 = _.toFloat(l2[l4 - 1])\n        var l14 = _.toFloat(l2[l4])\n        var l15 = _.toFloat(l2[l4 + 1])\n        var l16 = _.toFloat(l2[l5 - 2])\n        var l17 = _.toFloat(l2[l5 - 1])\n        var l18 = _.toFloat(l2[l5])\n        var l19 = _.toFloat(l2[l5 + 1])\n        var l20 = _.toFloat(l2[l5 + 2])\n        var l21 = _.toFloat(l2[l5 + 3])\n        var l22 = _.toFloat(l2[l5 + 4])\n        var l23 = _.toFloat(l2[l5 + 5])\n        var l24 = _.toFloat(l2[l5 + 6])\n        var l25 = _.toFloat(l2[l5 + 7])\n        var l26 = _.toFloat(l2[l5 + 8])\n        var l27 = _.toFloat(l2[l5 + 9])\n        var l28 = _.toFloat(l2[l5 + 10])\n\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxuvwt7ss.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpxuvwt7ss.scala:20:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml6\u001b[0m = _.toFloat(l2[\u001b[35ml5\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.toFloat(l2[\u001b[35ml5\u001b[0m]).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpxuvwt7ss.scala:21:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml7\u001b[0m = _.toFloat(l2[\u001b[35ml5\u001b[0m \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.toFloat(l2[\u001b[35ml5\u001b[0m \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m.\u001b[33mtype\u001b[0m]).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpxuvwt7ss.scala:22:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml8\u001b[0m = _.toFloat(l2[\u001b[35ml5\u001b[0m \u001b[35m+\u001b[0m \u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$3 of expanded function:\n\u001b[31m   |\u001b[0m   _$3 => _$3.toFloat(l2[\u001b[35ml5\u001b[0m \u001b[35m+\u001b[0m \u001b[31m1\u001b[0m.\u001b[33mtype\u001b[0m]).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpxuvwt7ss.scala:23:17 --------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        if (l.length == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var a = l.toLongs\n        var b = a.length\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var A = 0\n        var B = 0\n        var C = 0\n        var D = 0\n        var E = 0\n        var F = 0\n        var G = 0\n        var H = 0\n        var I = 0\n        var J = 0\n        var K = 0\n        var L = 0\n        var M = 0\n        var N = 0\n        var O = 0\n        var P = 0\n        var Q = 0\n        var R = 0\n        var S = 0\n        var T = 0\n        var U = 0\n        var V = 0\n        var W = 0\n        var X = 0\n        var Y = 0\n        var Z = 0\n        var _ = 0\n        var $ = 0\n        var % = 0\n        var ^ = 0\n        var & = 0\n        var * = 0\n        var (a0, b0, c0, d0, e0, f0, g0, h0, i0, j0, k0, l0, m0, n0, o0, p0, q0, r0, s0, t0, u0, v0, w0, x0, y0, z0, A0, B0, C0, D0, E0, F0, G0, H0, I0, J0, K0, L0, M0, N0, O0, P0, Q0, R\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8b_h9mca.scala:72:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8b_h9mca.scala:10:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mif\u001b[0m (l.length == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value length is not a member of Int\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8b_h9mca.scala:13:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma\u001b[0m = l.toLongs\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m         value toLongs is not a member of Int - did you mean Int.toLong?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8b_h9mca.scala:71:117 -----------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m        \u001b[33mvar\u001b[0m (a0, b0, c0, d0, e0, f0, g0, h0, i0, j0, k0, l0, m0, n0, o0, p0, q0, r0, s0, t0, u0, v0, w0, x0, y0, z0, A0, B0, C0, D0, E0, F0, G0, H0, I0, J0, K0, L0, M0, N0, O0, P0, Q0, R\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                     ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                           Not found: A0\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8b_h9mca.scala:71:121 -----------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m        \u001b[33mvar\u001b[0m (a0, b0, c0, d0, e0, f0, g0, h0, i0, j0, k0, l0, m0, n0, o0, p0, q0, r0, s0, t0, u0, v0, w0, x0, y0, z0, A0, B0, C0, D0, E0, F0, G0, H0, I0, J0, K0, L0, M0, N0, O0, P0, Q0, R\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                         ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                           Not found: B0\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8b_h9mc",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"Cannot take the median of an empty list\")\n        }\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l4 - 1\n        var l7 = l5\n        var l8 = l6\n        var l9 = l7\n        var l10 = l8\n        var l11 = l9\n        var l12 = l10\n        var l13 = l11\n        var l14 = l12\n        var l15 = l13\n        var l16 = l14\n        var l17 = l15\n        var l18 = l16\n        var l19 = l17\n        var l20 = l18\n        var l21 = l19\n        var l22 = l20\n        var l23 = l21\n        var l24 = l22\n        var l25 = l23\n        var l26 = l24\n        var l27 = l25\n        var l28 = l26\n        var l29 = l27\n        var l30 = l28\n        var l31 = l29\n        var l32 = l30\n        var l33 = l31\n        var l34 = l32\n        var l35 = l33\n        var l36 = l34\n        var l37 = l35\n        var l38 = l36\n        var l39 = l37\n        var l40 = l38\n        var l41 = l39\n        var l42 = l40\n        var l43 = l41\n        var l44 = l42\n        var l45 = l43\n        var l46 = l44\n        var l47 = l45\n        var l48 = l46\n        var l49 = l47\n        var l50 = l48\n        var l51 = l49\n        var l52 = l50\n        var l53 = l51\n        var l54 = l52\n        var l55 = l53\n        var l56 = l54\n        var l57 = l55\n        var l58 = l56\n        var l59 = l57\n        var l60 = l58\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpvl51docu.scala:72:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvl51docu.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvl51docu.scala:73:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqtjlt3pz.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpqtjlt3pz.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l(l.length() / 2) + l(l.length() / 2 - 1)) / 2.0f\n        } else {\n            return l(l.length() / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphymmidyt.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:14:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m l(l.length() / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer e",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (_.toFloat(l.get(l.length() / 2 - 1) + l.get(l.length() / 2)) / 2)\n        } else {\n            return _.toFloat(l.get(l.length() / 2))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293310,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvhg5hjxh.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpvhg5hjxh.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpvhg5hjxh.scala:12:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m) + l.get(l.length() / \u001b[31m2\u001b[0m)) / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m_$1 => _$1.toFloat(l.get(l.length() / 2 - 1) + l.get(l.length() / 2)) / 2.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpvhg5hjxh.scala:14:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m _.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.toFloat(l.get(l.length() / 2)).\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l5\n        var l7 = l6\n        var l8 = l7\n        var l9 = l8\n        var l10 = l9\n        var l11 = l10\n        var l12 = l11\n        var l13 = l12\n        var l14 = l13\n        var l15 = l14\n        var l16 = l15\n        var l17 = l16\n        var l18 = l17\n        var l19 = l18\n        var l20 = l19\n        var l21 = l20\n        var l22 = l21\n        var l23 = l22\n        var l24 = l23\n        var l25 = l24\n        var l26 = l25\n        var l27 = l26\n        var l28 = l27\n        var l29 = l28\n        var l30 = l29\n        var l31 = l30\n        var l32 = l31\n        var l33 = l32\n        var l34 = l33\n        var l35 = l34\n        var l36 = l35\n        var l37 = l36\n        var l38 = l37\n        var l39 = l38\n        var l40 = l39\n        var l41 = l40\n        var l42 = l41\n        var l43 = l42\n        var l44 = l43\n        var l45 = l44\n        var l46 = l45\n        var l47 = l46\n        var l48 = l47\n        var l49 = l48\n        var l50 = l49\n        var l51 = l50\n        var l52 = l51\n        var l53 = l52\n        var l54 = l53\n        var l55 = l54\n        var l56 = l55\n        var l57 = l56\n        var l58 = l57\n        var l59 = l58\n        var l60 = l59\n        var l61 = l60\n        var l62 = l61\n        var l63 = l62\n        var l64 = l63\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdoq009qi.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdoq009qi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoq009qi.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var result = 0.0f\n        var size = l.size()\n        var i = 0\n        while (i < size) {\n            var j = i + 1\n            while (j < size) {\n                if (l.apply(i).compareTo(l.apply(j)) > 0) {\n                    var temp = l.apply(i)\n                    l.update(i, l.apply(j))\n                    l.update(j, temp)\n                }\n                j += 1\n            }\n            i += 1\n        }\n        if (size % 2 == 1) {\n            result = l.apply(size / 2)\n        } else {\n            var j = size / 2\n            var k = size / 2\n            var temp = l.apply(j)\n            l.update(j, l.apply(k))\n            l.update(k, temp)\n            result = (l.apply(j) + l.apply(k)) / 2.0f\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpqd9rndxu.scala:11:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36msize\u001b[0m = l.size()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   \u001b[33mmethod\u001b[0m \u001b[35msize\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mSeqOps\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqd9rndxu.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                    l.update(i, l.apply(j))\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m    value update is not a member of List[Long] - did you mean l.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqd9rndxu.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                    l.update(j, temp)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m    value update is not a member of List[Long] - did you mean l.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqd9rndxu.scala:31:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            l.update(j, l.apply(k))\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m    value update is not a member of List[Long] - did you mean l.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqd9rndxu.scala:32:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            l.update(k, temp)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m    value update is not a member of List[Long] - did you mean l.updated?\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (l(l.length() / 2 - 1) + l(l.length() / 2)) / 2.0f\n        } else {\n            return l(l.length() / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmped1gfl3h.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmped1gfl3h.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmped1gfl3h.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmped1gfl3h.scala:12:48 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmped1gfl3h.scala:14:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m l(l.length() / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m long",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l5\n        var l7 = l6\n        var l8 = l7\n        var l9 = l8\n        var l10 = l9\n        var l11 = l10\n        var l12 = l11\n        var l13 = l12\n        var l14 = l13\n        var l15 = l14\n        var l16 = l15\n        var l17 = l16\n        var l18 = l17\n        var l19 = l18\n        var l20 = l19\n        var l21 = l20\n        var l22 = l21\n        var l23 = l22\n        var l24 = l23\n        var l25 = l24\n        var l26 = l25\n        var l27 = l26\n        var l28 = l27\n        var l29 = l28\n        var l30 = l29\n        var l31 = l30\n        var l32 = l31\n        var l33 = l32\n        var l34 = l33\n        var l35 = l34\n        var l36 = l35\n        var l37 = l36\n        var l38 = l37\n        var l39 = l38\n        var l40 = l39\n        var l41 = l40\n        var l42 = l41\n        var l43 = l42\n        var l44 = l43\n        var l45 = l44\n        var l46 = l45\n        var l47 = l46\n        var l48 = l47\n        var l49 = l48\n        var l50 = l49\n        var l51 = l50\n        var l52 = l51\n        var l53 = l52\n        var l54 = l53\n        var l55 = l54\n        var l56 = l55\n        var l57 = l56\n        var l58 = l57\n        var l59 = l58\n        var l60 = l59\n        var l61 = l60\n        var l62 = l61\n        var l63 = l62\n        var l64 = l63\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdoq009qi.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdoq009qi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoq009qi.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n\n    // Return the median of the list of lists l.\n    // >>> median((List(List(1l.toLong, 2l.toLong, 3l.toLong), List(4l.toLong, 5l.toLong, 6l.toLong))))\n    // (3l, 3l)\n    def medianOfLists(l : List[List[Long]]) : Tuple[Float, Float] = {\n        l.sort((a, b) => a.length() - b.length())\n        if (l.length() % 2 == 1) {\n            return (l.head + l.tail.head) / 2.0f, (l.head + l.tail.tail.head) / 2.0f\n        } else {\n            return l.head, l.tail.head\n        }\n    }\n\n    // Return the median of the list of lists l.\n    // >>> median((List(List(1l.toLong, 2l.toLong, 3l.toLong), List(4l.toLong, 5l.toLong, 6l.toLong))))\n    // (3l, 3l)\n    def medianOfLists2(l : List[List[Long]]) : Tuple[Float, Float] = {\n        l.sort((a, b) => a.length() - b.length())\n        if (l.length() % 2 == 1) {\n            return (l.head + l.tail.head) / 2.0f, (l.head + l.tail.tail.head) / 2.0f\n        } else {\n            return l.head, l.tail.head\n        }\n    }\n\n    // Return the median of the list of lists l.\n    // >>> median((List(List(1l.toLong, 2l.toLong, 3l.toLong), List(4l.toLong, 5l.toLong, 6l.toLong))))\n    // (3l, 3l\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpvq80a7gz.scala:24:48 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m (l.head + l.tail.head) / \u001b[31m2.0f\u001b[0m, (l.head + l.tail.tail.head) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but ',' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvq80a7gz.scala:26:25 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            \u001b[33mreturn\u001b[0m l.head, l.tail.head\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         end of statement expected but ',' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvq80a7gz.scala:36:48 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mreturn\u001b[0m (l.head + l.tail.head) / \u001b[31m2.0f\u001b[0m, (l.head + l.tail.tail.head) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but ',' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvq80a7gz.scala:38:25 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m            \u001b[33mreturn\u001b[0m l.head, l.tail.head\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         end of statement expected but ',' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvq80a7gz.scala:54:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvq80a7gz.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpvq80a7gz.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqtjlt3pz.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpqtjlt3pz.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqtjlt3pz.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpqtjlt3pz.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l5\n        var l7 = l6\n        var l8 = l7\n        var l9 = l8\n        var l10 = l9\n        var l11 = l10\n        var l12 = l11\n        var l13 = l12\n        var l14 = l13\n        var l15 = l14\n        var l16 = l15\n        var l17 = l16\n        var l18 = l17\n        var l19 = l18\n        var l20 = l19\n        var l21 = l20\n        var l22 = l21\n        var l23 = l22\n        var l24 = l23\n        var l25 = l24\n        var l26 = l25\n        var l27 = l26\n        var l28 = l27\n        var l29 = l28\n        var l30 = l29\n        var l31 = l30\n        var l32 = l31\n        var l33 = l32\n        var l34 = l33\n        var l35 = l34\n        var l36 = l35\n        var l37 = l36\n        var l38 = l37\n        var l39 = l38\n        var l40 = l39\n        var l41 = l40\n        var l42 = l41\n        var l43 = l42\n        var l44 = l43\n        var l45 = l44\n        var l46 = l45\n        var l47 = l46\n        var l48 = l47\n        var l49 = l48\n        var l50 = l49\n        var l51 = l50\n        var l52 = l51\n        var l53 = l52\n        var l54 = l53\n        var l55 = l54\n        var l56 = l55\n        var l57 = l56\n        var l58 = l57\n        var l59 = l58\n        var l60 = l59\n        var l61 = l60\n        var l62 = l61\n        var l63 = l62\n        var l64 = l63\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpdoq009qi.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdoq009qi.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdoq009qi.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        if (l.length == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        if (l.length == 1) {\n            return l.head.toFloat\n        }\n        return (l.head.toFloat + l.tail.head.toFloat) / 2.0f\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293336,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprajx3ia2.scala:19)\n\tat Problem.main(tmprajx3ia2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (_.toFloat(l.get(l.length() / 2 - 1)) + _.toFloat(l.get(l.length() / 2))) / 2.0f\n        } else {\n            return _.toFloat(l.get(l.length() / 2))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293307,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppjtbuw8a.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmppjtbuw8a.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmppjtbuw8a.scala:12:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) + _.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m))) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m(_$1, _$2) => \n\u001b[31m   |\u001b[0m  _$1.toFloat(l.get(l.length() / 2 - 1)) + _$2.toFloat(l.get(l.length() / 2)).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmppjtbuw8a.scala:12:59 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) + _.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m))) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m(_$1, _$2) => \n\u001b[31m   |\u001b[0m  _$1.toFloat(l.get(l.length() / 2 - 1)) + _$2.toFloat(l.get(l.length() / 2)).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmppjtbuw8a.scala:14:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m _.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = 0l\n        var l6 = 0l\n        var l7 = 0l\n        var l8 = 0l\n        var l9 = 0l\n        var l10 = 0l\n        var l11 = 0l\n        var l12 = 0l\n        var l13 = 0l\n        var l14 = 0l\n        var l15 = 0l\n        var l16 = 0l\n        var l17 = 0l\n        var l18 = 0l\n        var l19 = 0l\n        var l20 = 0l\n        var l21 = 0l\n        var l22 = 0l\n        var l23 = 0l\n        var l24 = 0l\n        var l25 = 0l\n        var l26 = 0l\n        var l27 = 0l\n        var l28 = 0l\n        var l29 = 0l\n        var l30 = 0l\n        var l31 = 0l\n        var l32 = 0l\n        var l33 = 0l\n        var l34 = 0l\n        var l35 = 0l\n        var l36 = 0l\n        var l37 = 0l\n        var l38 = 0l\n        var l39 = 0l\n        var l40 = 0l\n        var l41 = 0l\n        var l42 = 0l\n        var l43 = 0l\n        var l44 = 0l\n        var l45 = 0l\n        var l46 = 0l\n        var l47 = 0l\n        var l48 = 0l\n        var l49 = 0l\n        var l50 = 0l\n        var l51 = 0l\n        var l52 = 0l\n        var l53 = 0l\n        var l54 = 0l\n        var l55 = 0l\n        var l56 = 0l\n        var l57 = 0l\n        var l58 = 0l\n        var l59 = 0l\n        var l60 = 0l\n        var l61 = 0l\n        var l62 = 0l\n        var l63 = 0l\n        var l64 = 0l\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp3yeozipa.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3yeozipa.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3yeozipa.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        if (l.length == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var n = l.length\n        var m = n / 2\n        var i = 0\n        var j = n - 1\n        var k = 0\n        var tmp = 0.0f\n        while (i <= j) {\n            k = i + j\n            if (k == n) {\n                k = (i + j) / 2\n            }\n            if (l[i] > l[j]) {\n                tmp = l[i]\n                l[i] = l[j]\n                l[j] = tmp\n            }\n            i = i + 1\n            j = j - 1\n        }\n        return l[m]\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293333,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpf93rejfw.scala:26:21 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m                l[\u001b[35mi\u001b[0m] = l[j]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     end of statement expected but '=' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpf93rejfw.scala:27:21 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m                l[\u001b[35mj\u001b[0m] = tmp\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf93rejfw.scala:24:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mif\u001b[0m (l[\u001b[35mi\u001b[0m] > l[\u001b[35mj\u001b[0m]) {\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf93rejfw.scala:25:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                tmp = l[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf93rejfw.scala:26:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m                l[\u001b[35mi\u001b[0m] = l[j]\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf93rejfw.scala:27:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m                l[\u001b[35mj\u001b[0m] = tmp\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: type j\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf93rejfw.scala:32:17 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mreturn\u001b[0m l[\u001b[35mm\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = l4\n        var l7 = l4\n        var l8 = l4\n        var l9 = l4\n        var l10 = l4\n        var l11 = l4\n        var l12 = l4\n        var l13 = l4\n        var l14 = l4\n        var l15 = l4\n        var l16 = l4\n        var l17 = l4\n        var l18 = l4\n        var l19 = l4\n        var l20 = l4\n        var l21 = l4\n        var l22 = l4\n        var l23 = l4\n        var l24 = l4\n        var l25 = l4\n        var l26 = l4\n        var l27 = l4\n        var l28 = l4\n        var l29 = l4\n        var l30 = l4\n        var l31 = l4\n        var l32 = l4\n        var l33 = l4\n        var l34 = l4\n        var l35 = l4\n        var l36 = l4\n        var l37 = l4\n        var l38 = l4\n        var l39 = l4\n        var l40 = l4\n        var l41 = l4\n        var l42 = l4\n        var l43 = l4\n        var l44 = l4\n        var l45 = l4\n        var l46 = l4\n        var l47 = l4\n        var l48 = l4\n        var l49 = l4\n        var l50 = l4\n        var l51 = l4\n        var l52 = l4\n        var l53 = l4\n        var l54 = l4\n        var l55 = l4\n        var l56 = l4\n        var l57 = l4\n        var l58 = l4\n        var l59 = l4\n        var l60 = l4\n        var l61 = l4\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp_43upnzg.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_43upnzg.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_43upnzg.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3 / 2\n        var l5 = 0l\n        var l6 = 0l\n        var l7 = 0l\n        var l8 = 0l\n        var l9 = 0l\n        var l10 = 0l\n        var l11 = 0l\n        var l12 = 0l\n        var l13 = 0l\n        var l14 = 0l\n        var l15 = 0l\n        var l16 = 0l\n        var l17 = 0l\n        var l18 = 0l\n        var l19 = 0l\n        var l20 = 0l\n        var l21 = 0l\n        var l22 = 0l\n        var l23 = 0l\n        var l24 = 0l\n        var l25 = 0l\n        var l26 = 0l\n        var l27 = 0l\n        var l28 = 0l\n        var l29 = 0l\n        var l30 = 0l\n        var l31 = 0l\n        var l32 = 0l\n        var l33 = 0l\n        var l34 = 0l\n        var l35 = 0l\n        var l36 = 0l\n        var l37 = 0l\n        var l38 = 0l\n        var l39 = 0l\n        var l40 = 0l\n        var l41 = 0l\n        var l42 = 0l\n        var l43 = 0l\n        var l44 = 0l\n        var l45 = 0l\n        var l46 = 0l\n        var l47 = 0l\n        var l48 = 0l\n        var l49 = 0l\n        var l50 = 0l\n        var l51 = 0l\n        var l52 = 0l\n        var l53 = 0l\n        var l54 = 0l\n        var l55 = 0l\n        var l56 = 0l\n        var l57 = 0l\n        var l58 = 0l\n        var l59 = 0l\n        var l60 = 0l\n        var l61 = 0l\n        var l62 = 0l\n        var l63 = 0l\n        var l64 = 0l\n        var\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp3yeozipa.scala:73:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3yeozipa.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3yeozipa.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqtjlt3pz.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpqtjlt3pz.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqtjlt3pz.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpqtjlt3pz.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var result = 0.0f\n        var n = l.length\n        if (n == 0) {\n            return result\n        }\n        var l2 = l.toLong\n        var l3 = l2.sort(Comparator.comparingLong(l3 -> l3))\n        var l4 = l3.takeRight(n / 2)\n        var l5 = l4.toLong\n        var l6 = l5.sort(Comparator.comparingLong(l6 -> l6))\n        var l7 = l6.takeRight(n / 2)\n        var l8 = l7.toLong\n        var l9 = l8.sort(Comparator.comparingLong(l9 -> l9))\n        var l10 = l9.takeRight(n / 2)\n        var l11 = l10.toLong\n        var l12 = l11.sort(Comparator.comparingLong(l12 -> l12))\n        var l13 = l12.takeRight(n / 2)\n        var l14 = l13.toLong\n        var l15 = l14.sort(Comparator.comparingLong(l15 -> l15))\n        var l16 = l15.takeRight(n / 2)\n        var l17 = l16.toLong\n        var l18 = l17.sort(Comparator.comparingLong(l18 -> l18))\n        var l19 = l18.takeRight(n / 2)\n        var l20 = l19.toLong\n        var l21 = l20.sort(Comparator.comparingLong(l21 -> l21))\n        var l22 = l21.takeRight(n / 2)\n        var l23 = l22.toLong\n        var l24 = l23.sort(Comparator.comparingLong(l24 -> l24))\n        var l25 = l24.takeRight(n / 2)\n        var l26 = l25.toLong\n        var l27 = l26.sort(Comparator.comparingLong(l27 -> l27))\n        var l28 = l27.takeRight(n / 2)\n        var l29 = l28.toLong\n        var l30 = l29.sort(\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293333,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp19t9l1zl.scala:43:27 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml30\u001b[0m = l29.sort(\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp19t9l1zl.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp19t9l1zl.scala:44:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        if (l.isEmpty())\n            throw new RuntimeException(\"List is empty\")\n        l.sort()\n        return (l.length() % 2 == 0) ? (l.head + l.tail.head) / 2.0f : l.head\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpw9vsbnc8.scala:10:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mif\u001b[0m (l.isEmpty())\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35misEmpty\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpw9vsbnc8.scala:12:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpw9vsbnc8.scala:13:73 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mreturn\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) ? (l.head + l.tail.head) / \u001b[31m2.0f\u001b[0m : l.head\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 type head is not a member of List[Long]\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpw9vsbnc8.scala:13:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mreturn\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) ? (l.head + l.tail.head) / \u001b[31m2.0f\u001b[0m : l.head\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3.toInt\n        var l5 = l4.toInt\n        var l6 = l5.toInt\n        var l7 = l6.toInt\n        var l8 = l7.toInt\n        var l9 = l8.toInt\n        var l10 = l9.toInt\n        var l11 = l10.toInt\n        var l12 = l11.toInt\n        var l13 = l12.toInt\n        var l14 = l13.toInt\n        var l15 = l14.toInt\n        var l16 = l15.toInt\n        var l17 = l16.toInt\n        var l18 = l17.toInt\n        var l19 = l18.toInt\n        var l20 = l19.toInt\n        var l21 = l20.toInt\n        var l22 = l21.toInt\n        var l23 = l22.toInt\n        var l24 = l23.toInt\n        var l25 = l24.toInt\n        var l26 = l25.toInt\n        var l27 = l26.toInt\n        var l28 = l27.toInt\n        var l29 = l28.toInt\n        var l30 = l29.toInt\n        var l31 = l30.toInt\n        var l32 = l31.toInt\n        var l33 = l32.toInt\n        var l34 = l33.toInt\n        var l35 = l34.toInt\n        var l36 = l35.toInt\n        var l37 = l36.toInt\n        var l38 = l37.toInt\n        var l39 = l38.toInt\n        var l40 = l39.toInt\n        var l41 = l40.toInt\n        var l42 = l41.toInt\n        var l43 = l42.toInt\n        var l44 = l43.toInt\n        var l45 = l44.toInt\n        var l46 = l45.toInt\n        var l47 = l46.toInt\n        var l48 = l47.\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8jt5vz1c.scala:57:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8jt5vz1c.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8jt5vz1c.scala:57:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        if (l3 == 0) {\n            throw new RuntimeException(\"List is empty\")\n        }\n        var l4 = l3 / 2\n        var l5 = l4\n        var l6 = 0\n        var l7 = 0\n        while (l6 < l4) {\n            l7 = l6\n            l6 = l6 + 1\n        }\n        var l8 = l7\n        var l9 = l6\n        var l10 = l6\n        var l11 = l6\n        var l12 = l6\n        var l13 = l6\n        var l14 = l6\n        var l15 = l6\n        var l16 = l6\n        var l17 = l6\n        var l18 = l6\n        var l19 = l6\n        var l20 = l6\n        var l21 = l6\n        var l22 = l6\n        var l23 = l6\n        var l24 = l6\n        var l25 = l6\n        var l26 = l6\n        var l27 = l6\n        var l28 = l6\n        var l29 = l6\n        var l30 = l6\n        var l31 = l6\n        var l32 = l6\n        var l33 = l6\n        var l34 = l6\n        var l35 = l6\n        var l36 = l6\n        var l37 = l6\n        var l38 = l6\n        var l39 = l6\n        var l40 = l6\n        var l41 = l6\n        var l42 = l6\n        var l43 = l6\n        var l44 = l6\n        var l45 = l6\n        var l46 = l6\n        var l47 = l6\n        var l48 = l6\n        var l49 = l6\n        var l50 = l6\n        var l51 = l6\n        var l52 = l6\n        var l53 = l6\n        var l54 = l6\n        var l55 = l6\n        var l56 = l6\n        var l57 = l6\n        var l58 = l\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6r9z869u.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6r9z869u.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        var l2 = l.toLong\n        var l3 = l2.length\n        var l4 = l3.div(2)\n        var l5 = l4.toInt\n        var l6 = l5.div(2)\n        var l7 = l6.toInt\n        var l8 = l7.div(2)\n        var l9 = l8.toInt\n        var l10 = l9.div(2)\n        var l11 = l10.toInt\n        var l12 = l11.div(2)\n        var l13 = l12.toInt\n        var l14 = l13.div(2)\n        var l15 = l14.toInt\n        var l16 = l15.div(2)\n        var l17 = l16.toInt\n        var l18 = l17.div(2)\n        var l19 = l18.toInt\n        var l20 = l19.div(2)\n        var l21 = l20.toInt\n        var l22 = l21.div(2)\n        var l23 = l22.toInt\n        var l24 = l23.div(2)\n        var l25 = l24.toInt\n        var l26 = l25.div(2)\n        var l27 = l26.toInt\n        var l28 = l27.div(2)\n        var l29 = l28.toInt\n        var l30 = l29.div(2)\n        var l31 = l30.toInt\n        var l32 = l31.div(2)\n        var l33 = l32.toInt\n        var l34 = l33.div(2)\n        var l35 = l34.toInt\n        var l36 = l35.div(2)\n        var l37 = l36.toInt\n        var l38 = l37.div(2)\n        var l39 = l38.toInt\n        var l40 = l39.div(2)\n        var l41 = l40.toInt\n        var l42 = l41.div(2)\n        var l43 = l42.toInt\n        var l44 = l43.div(2)\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpud8negyd.scala:10:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml2\u001b[0m = l.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toLong is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpud8negyd.scala:53:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return l.head\n        } else {\n            return (l.head + l.tail.head) / 2.0f\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4rfh3wp_.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp4rfh3wp_.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l.head + l.tail.head) / 2.0f\n        } else {\n            return l.head\n        }\n    }\n\n    // Return the median of the two numbers a and b.\n    // >>> median(1l, 2l)\n    // 1.5\n    def median(a : Long, b : Long) : Float = {\n        return (a + b) / 2.0f\n    }\n\n    // Return the median of the two numbers a and b.\n    // >>> median(1l, 2l)\n    // 1.5\n    def median(a : Long, b : Long) : Float = {\n        return (a + b) / 2.0f\n    }\n\n    // Return the median of the two numbers a and b.\n    // >>> median(1l, 2l)\n    // 1.5\n    def median(a : Long, b : Long) : Float = {\n        return (a + b) / 2.0f\n    }\n\n    // Return the median of the two numbers a and b.\n    // >>> median(1l, 2l)\n    // 1.5\n    def median(a : Long, b : Long) : Float = {\n        return (a + b) / 2.0f\n    }\n\n    // Return the median of the two numbers a and b.\n    // >>> median(1l, 2l)\n    // 1.5\n    def median(a : Long, b : Long) : Float = {\n        return (a + b) / 2.0f\n    }\n\n    // Return the median of the two numbers a and b.\n    // >>> median(1l, 2l)\n    // 1.5\n    def median(a : Long, b : Long) : Float = {\n        return (a + b) / 2.0f\n    }\n\n    // Return the median of the two numbers a and b.\n    // >>> median(1l, 2l)\n    // 1.5\n    def median(a : Long, b : Long) : Float = {\n        return (a + b) / 2.0f\n    }\n\n    \n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpql9c04_8.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpql9c04_8.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpql9c04_8.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpql9c04_8.scala:28:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmedian\u001b[0m(\u001b[36ma\u001b[0m : \u001b[35mLong\u001b[0m, \u001b[36mb\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mFloat\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef median(a: Long, b: Long): Float in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 21 and\n\u001b[31m   |\u001b[0mdef median(a: Long, b: Long): Float in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 28\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpql9c04_8.scala:35:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmedian\u001b[0m(\u001b[36ma\u001b[0m : \u001b[35mLong\u001b[0m, \u001b[36mb\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mFloat\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef median(a: Long, b: Long): Float in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 28 and\n\u001b[31m   |\u001b[0mdef median(a: Long, b: Long): Float in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 35\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 0) {\n            return (_.toFloat(l.get(l.length() / 2 - 1) + l.get(l.length() / 2)) / 2)\n        } else {\n            return _.toFloat(l.get(l.length() / 2))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293310,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvhg5hjxh.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpvhg5hjxh.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpvhg5hjxh.scala:12:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (_.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m) + l.get(l.length() / \u001b[31m2\u001b[0m)) / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m_$1 => _$1.toFloat(l.get(l.length() / 2 - 1) + l.get(l.length() / 2)) / 2.\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpvhg5hjxh.scala:14:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m _.toFloat(l.get(l.length() / \u001b[31m2\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.toFloat(l.get(l.length() / 2)).\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        l.sort()\n        if (l.length() % 2 == 1) {\n            return (l(l.length() / 2) + l(l.length() / 2 - 1)) / 2.0f\n        } else {\n            return l(l.length() / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n    assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong, 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong, 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphymmidyt.scala:10:10 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        l.sort()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m       value sort is not a member of List[Long] - did you mean l.sortBy?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:11:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (l.length() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:12:44 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mreturn\u001b[0m (l(l.length() / \u001b[31m2\u001b[0m) + l(l.length() / \u001b[31m2\u001b[0m - \u001b[31m1\u001b[0m)) / \u001b[31m2.0f\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmphymmidyt.scala:14:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mreturn\u001b[0m l(l.length() / \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mList\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer e",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}