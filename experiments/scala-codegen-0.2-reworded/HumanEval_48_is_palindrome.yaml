name: HumanEval_48_is_palindrome
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Checks if given string is a palindrome\n    // >>> isPalindrome((\"\"))\n\
  \    // (true)\n    // >>> isPalindrome((\"aba\"))\n    // (true)\n    // >>> isPalindrome((\"\
  aaaaa\"))\n    // (true)\n    // >>> isPalindrome((\"zbcd\"))\n    // (false)\n\
  \    def isPalindrome(text : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\"\
  )) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
  aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
  xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n    assert(isPalindrome((\"\
  xywzx\")) == (false));\n    }\n\n}\n"
completions: ["        if (text.length == 0) {\n            true\n        } else {\n\
    \            if (text.length == 1) {\n                text.charAt(0) == text.charAt(0)\n\
    \            } else {\n                var i = 0\n                var j = text.length\
    \ - 1\n                while (i < j) {\n                    if (text.charAt(i)\
    \ != text.charAt(j)) {\n                        return false\n               \
    \     }\n                    i += 1\n                    j -= 1\n            \
    \    }\n                true\n            }\n        }\n    }\n\n    // Returns\
    \ the longest palindrome in given string\n    // >>> longestPalindrome((\"\"))\n\
    \    // \"\"\n    // >>> longestPalindrome((\"a\"))\n    // \"a\"\n    // >>>\
    \ longestPalindrome((\"ab\"))\n    // \"ab\"\n    // >>> longestPalindrome((\"\
    aba\"))\n    // \"aba\"\n    // >>> longestPalindrome((\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   var i = 0\n            var j = text.length - 1\n            while (i < j)\
    \ {\n                if (text.charAt(i) != text.charAt(j)) {\n               \
    \     return false\n                }\n                i += 1\n              \
    \  j -= 1\n            }\n            true\n        }\n    }\n\n    // Checks\
    \ if given string is a palindrome ignoring case\n    // >>> isPalindromeIgnoreCase((\"\
    \"))\n    // (true)\n    // >>> isPalindromeIgnoreCase((\"aba\"))\n    // (true)\n\
    \    // >>> isPalindromeIgnoreCase((\"aaaaa\"))\n    // (true)\n    // >>> isPalindromeIgnoreCase((\"\
    zbcd\"))\n    // (false)\n    def isPalindromeIgnoreCase(text : String) : Boolean\
    \ = {\n        if (text.length == 0) {\n            true\n        } else {\n \
    \           var i = 0\n            var j = text.length - 1\n            while\
    \ (i < j) {\n                if (Character.toLowerCase(text.charAt(i)) != Character.toLowerCase(text.charAt(j)))\
    \ {\n                    return false\n                }\n                i +=\
    \ 1\n                j -= 1\n            }\n            true\n        }\n    }\n\
    \n    // Returns the longest palindrome substring in given string\n    // >>>\
    \ getLongestPalindromeSubstring(\"\")\n    // \"\"\n    // >>> getLongestPalindromeSubstring(\"\
    a\")\n    // \"a\"\n    // >>> getLongestPalindromeSubstring(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   if (text.length == 1) {\n                text == text.reverse()\n        \
    \    } else {\n                var firstHalf = text.substring(0, text.length /\
    \ 2)\n                var secondHalf = text.substring(text.length / 2, text.length)\n\
    \                firstHalf == secondHalf.reverse()\n            }\n        }\n\
    \    }\n\n    // Returns the number of palindromes in given string\n    // >>>\
    \ countPalindromes(\"\")\n    // (0)\n    // >>> countPalindromes(\"a\")\n   \
    \ // (1)\n    // >>> countPalindromes(\"ab\")\n    // (2)\n    // >>> countPalindromes(\"\
    aba\")\n    // (1)\n    // >>> countPalindromes(\"abba\")\n    // (2)\n    //\
    \ >>> countPalindromes(\"ababab\")\n    // (3)\n    def countPalindromes(text\
    \ : String) : Int = {\n        if (text.length == 0) {\n            0\n      \
    \  } else {\n            var count = 0\n            var i = 0\n            while\
    \ (i < text.length) {\n                var j = i + 1\n                while (j\
    \ < text.length && text.charAt(i) == text.charAt(j)) {\n                    j\
    \ += 1\n                }\n                if (j - i == 1) {\n               \
    \     count += 1\n                }\n                i = j\n            }\n  \
    \          count\n        }\n    }\n\n    // Returns the number of palindromes\
    \ in given string\n    // >>> countPalindromes(\"\")\n    // (0)\n    // >>> countPalindromes(\"\
    a\")\n    // (1)\n    // >>> countPalindromes(\"ab\")\n    // (2)\n    // >>>\
    \ countPalindromes(\"aba\")\n    // (1)\n    // >>> countPalindromes(\"abba\"\
    )\n    // (2)\n    // >>> countPalindromes(\"ababab\")\n    // (3)\n    def countPalindromes2(text\
    \ : String) : Int = {\n        if (text.length == 0)", "        if (text == \"\
    \")\n            return true\n        else {\n            var i = 0\n        \
    \    var j = text.length - 1\n            while (i < j) {\n                if\
    \ (text.charAt(i) != text.charAt(j))\n                    return false\n     \
    \           i += 1\n                j -= 1\n            }\n            return\
    \ true\n        }", "        if (text.length == 0) {\n            true\n     \
    \   } else {\n            var i = 0\n            var j = text.length - 1\n   \
    \         while (i < j) {\n                if (text.charAt(i) != text.charAt(j))\
    \ {\n                    return false\n                }\n                i +=\
    \ 1\n                j -= 1\n            }\n            true\n        }\n    }\n\
    \n    // Returns the longest palindrome in given string\n    // >>> getLongestPalindrome(\"\
    \")\n    // \"\"\n    // >>> getLongestPalindrome(\"a\")\n    // \"a\"\n    //\
    \ >>> getLongestPalindrome(\"ab\")\n    // \"ab\"\n    // >>> getLongestPalindrome(\"\
    aba\")\n    // \"aba\"\n    // >>> getLongestPalindrome(\"ababab\")\n    // \"\
    abab\"\n    def getLongestPalindrome(text : String) : String = {\n        if (text.length\
    \ == 0) {\n            \"\"\n        } else {\n            var i = 0\n       \
    \     var j = text.length - 1\n            var max = \"\"\n            while (i\
    \ < j) {\n                if (text.charAt(i) == text.charAt(j)) {\n          \
    \          var len = 2\n                    while (i + len < j && text.charAt(i\
    \ + len) == text.charAt(j - len)) {\n                        len += 1\n      \
    \              }\n                    if (len > max.length) {\n              \
    \          max = text.substring(i, j)\n                    }\n               \
    \ }\n                i += 1\n                j -= 1\n            }\n         \
    \   max\n        }\n    }\n\n    // Returns the longest palindrome in given string\n\
    \    // >>> getLongestPalindrome2(\"\")\n    // \"\"\n    // >>> getLongestPalindrome2(\"\
    a\")\n    // \"a\"\n    // >>> getLongestPalindrome2(\"ab\")\n    // \"ab\"\n\
    \    // >>> getLongestPalindrome2(\"aba\")\n    // \"aba\"\n    // >>> getLongestPalindrome2(\"\
    ababab\")\n    // \"abab\"\n    def getLongestPalindrome2(text : String) : String",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   var left = 0\n            var right = text.length - 1\n            while (left\
    \ < right) {\n                if (text[left] != text[right]) {\n             \
    \       return false\n                }\n                left += 1\n         \
    \       right -= 1\n            }\n            true\n        }", "        if (text.length\
    \ == 0) {\n            true\n        } else {\n            var i = 0\n       \
    \     var j = text.length - 1\n            while (i < j) {\n                if\
    \ (text.charAt(i) != text.charAt(j)) {\n                    return false\n   \
    \             }\n                i += 1\n                j -= 1\n            }\n\
    \            true\n        }", "        if (text.length() == 0) {\n          \
    \  true\n        } else {\n            var isPalindrome = true\n            for\
    \ (i <- 0 until (text.length() - 1)) {\n                if (text.charAt(i) !=\
    \ text.charAt(text.length() - 1 - i)) {\n                    isPalindrome = false\n\
    \                    break\n                }\n            }\n            isPalindrome\n\
    \        }\n    }\n\n    // Returns the number of palindromic substrings in given\
    \ string\n    // >>> countPalindromes((\"\"))\n    // (0)\n    // >>> countPalindromes((\"\
    aba\"))\n    // (2)\n    // >>> countPalindromes((\"abaaba\"))\n    // (4)\n \
    \   // >>> countPalindromes((\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length() < 2) {\n            return true\n        } else {\n \
    \           return text.charAt(0) == text.charAt(text.length() - 1) && isPalindrome(text.substring(1,\
    \ text.length() - 1))\n        }\n    }\n\n    // Returns the longest palindrome\
    \ substring in given string\n    // >>> getLongestPalindrome(\"\")\n    // \"\"\
    \n    // >>> getLongestPalindrome(\"a\")\n    // \"a\"\n    // >>> getLongestPalindrome(\"\
    ab\")\n    // \"ab\"\n    // >>> getLongestPalindrome(\"aba\")\n    // \"aba\"\
    \n    // >>> getLongestPalindrome(\"abba\")\n    // \"abba\"\n    // >>> getLongestPalindrome(\"\
    ababab\")\n    // \"abab\"\n    def getLongestPalindrome(text : String) : String\
    \ = {\n        if (text.length() < 2) {\n            return text\n        } else\
    \ {\n            var left = 0\n            var right = text.length() - 1\n   \
    \         var max = \"\"\n            while (left < right) {\n               \
    \ var mid = left + (right - left) / 2\n                if (text.charAt(mid) ==\
    \ text.charAt(right)) {\n                    right = mid\n                } else\
    \ if (text.charAt(left) == text.charAt(right)) {\n                    left = right\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n            max = text.substring(left, right + 1)\n            return\
    \ getLongestPalindrome(text.substring(0, left) + max + text.substring(right +\
    \ 1))\n        }\n    }\n\n    // Returns the longest palindrome substring in\
    \ given string\n    // >>> getLongestPalindrome2(\"\")\n    // \"\"\n    // >>>\
    \ getLongestPalindrome2(\"a\")\n    // \"a\"\n    // >>> getLongestPalindrome2(\"\
    ab\")\n    // \"ab\"\n    // >>> getLongestPalindrome2(\"aba\")\n    // \"aba\"\
    \n    // >>> getLongestPalindrome2(\"abba\")\n    // \"abba\"\n", "        if\
    \ (text.length == 0) {\n            true\n        } else {\n            if (text.length\
    \ == 1) {\n                text.charAt(0) == text.charAt(0)\n            } else\
    \ {\n                var left = 0\n                var right = text.length - 1\n\
    \                while (left < right) {\n                    if (text.charAt(left)\
    \ != text.charAt(right)) {\n                        return false\n           \
    \         }\n                    left += 1\n                    right -= 1\n \
    \               }\n                return true\n            }\n        }\n   \
    \ }\n\n    // Returns the longest palindrome in given string\n    // >>> longestPalindrome((\"\
    \"))\n    // \"\"\n    // >>> longestPalindrome((\"a\"))\n    // \"a\"\n    //\
    \ >>> longestPalindrome((\"aa\"))\n    // \"aa\"\n    // >>> longestPalindrome((\"\
    aaa\"))\n    // \"aaa\"\n    // >>> longestPalindrome((\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   var firstChar = text[0]\n            var lastChar = text[text.length - 1]\n\
    \            var middle = text.length / 2\n            var left = text.substring(0,\
    \ middle)\n            var right = text.substring(middle, text.length)\n     \
    \       if (left.equals(right)) {\n                true\n            } else {\n\
    \                false\n            }\n        }", "        if (text.length()\
    \ < 2) {\n            return true\n        }\n        var i = 0\n        var j\
    \ = text.length() - 1\n        while (i < j) {\n            if (text.charAt(i)\
    \ != text.charAt(j)) {\n                return false\n            }\n        \
    \    i += 1\n            j -= 1\n        }\n        return true", "        if\
    \ (text.length() == 0) {\n            return true\n        }\n        if (text.length()\
    \ == 1) {\n            return true\n        }\n        if (text.length() == 2)\
    \ {\n            return true\n        }\n        if (text.length() == 3) {\n \
    \           return true\n        }\n        if (text.length() == 4) {\n      \
    \      return true\n        }\n        if (text.length() == 5) {\n           \
    \ return true\n        }\n        if (text.length() == 6) {\n            return\
    \ true\n        }\n        if (text.length() == 7) {\n            return true\n\
    \        }\n        if (text.length() == 8) {\n            return true\n     \
    \   }\n        if (text.length() == 9) {\n            return true\n        }\n\
    \        if (text.length() == 10) {\n            return true\n        }\n    \
    \    if (text.length() == 11) {\n            return true\n        }\n        if\
    \ (text.length() == 12) {\n            return true\n        }\n        if (text.length()\
    \ == 13) {\n            return true\n        }\n        if (text.length() == 14)\
    \ {\n            return true\n        }\n        if (text.length() == 15) {\n\
    \            return true\n        }\n        if (text.length() == 16) {\n    \
    \        return true\n        }\n        if (text.length() == 17) {\n        \
    \    return true\n        }\n        if (text.length() == 18) {\n            return\
    \ true\n        }\n        if (text.length() == 19) {\n            return true\n\
    \        }\n        if (text.length() == 20) {\n            return true\n    \
    \    }\n        if (text.length() == 21) {\n            return true\n        }\n\
    \        if (text.length() == 22) {\n            return true\n        }\n    \
    \    if (text.length() == 23) {\n            return true\n        }\n        if\
    \ (text.length() == 24) {\n            return true\n        }\n        if (text.length()\
    \ == 25) {\n            return true\n        }\n        if (text.length() == 26)\
    \ {\n            return true\n        }", "        if (text.length() == 0) {\n\
    \            true\n        } else {\n            var i = 0\n            var j\
    \ = text.length() - 1\n            while (i < j) {\n                if (text.charAt(i)\
    \ != text.charAt(j)) {\n                    return false\n                }\n\
    \                i += 1\n                j -= 1\n            }\n            true\n\
    \        }", "        if (text == null) return false\n        if (text.length()\
    \ == 0) return true\n        if (text.length() == 1) return true\n        if (text.length()\
    \ == 2) return true\n        if (text.length() == 3) return true\n        if (text.length()\
    \ == 4) return true\n        if (text.length() == 5) return true\n        if (text.length()\
    \ == 6) return true\n        if (text.length() == 7) return true\n        if (text.length()\
    \ == 8) return true\n        if (text.length() == 9) return true\n        if (text.length()\
    \ == 10) return true\n        if (text.length() == 11) return true\n        if\
    \ (text.length() == 12) return true\n        if (text.length() == 13) return true\n\
    \        if (text.length() == 14) return true\n        if (text.length() == 15)\
    \ return true\n        if (text.length() == 16) return true\n        if (text.length()\
    \ == 17) return true\n        if (text.length() == 18) return true\n        if\
    \ (text.length() == 19) return true\n        if (text.length() == 20) return true\n\
    \        if (text.length() == 21) return true\n        if (text.length() == 22)\
    \ return true\n        if (text.length() == 23) return true\n        if (text.length()\
    \ == 24) return true\n        if (text.length() == 25) return true\n        if\
    \ (text.length() == 26) return true\n        if (text.length() == 27) return true\n\
    \        if (text.length() == 28) return true\n        if (text.length() == 29)\
    \ return true\n        if (text.length() == 30) return true\n        if (text.length()\
    \ == 31) return true\n        if (text.length() == 32) return true\n        if\
    \ (text.length() == 33) return true\n        if (text.length() == 34) return true\n\
    \        if (text.length() == 35) return true\n        if (text.length() == 36)\
    \ return true\n        if (text.length() == 37) return true\n        if (text.length()\
    \ ==", "        if (text.length == 0) {\n            true\n        } else {\n\
    \            if (text.length == 1) {\n                text.charAt(0) == text.charAt(0)\n\
    \            } else {\n                if (text.length % 2 == 0) {\n         \
    \           var i = 0\n                    var j = text.length - 1\n         \
    \           while (i < j) {\n                        if (text.charAt(i) != text.charAt(j))\
    \ {\n                            return false\n                        }\n   \
    \                     i += 1\n                        j -= 1\n               \
    \     }\n                    true\n                } else {\n                \
    \    var i = 0\n                    var j = text.length - 1\n                \
    \    while (i < j) {\n                        if (text.charAt(i) != text.charAt(j))\
    \ {\n                            return false\n                        }\n   \
    \                     i += 1\n                        j -= 1\n               \
    \     }\n                    true\n                }\n            }\n        }\n\
    \    }\n\n    // Returns the longest palindrome in given string\n    // >>> longestPalindrome((\"\
    \"))\n    // \"\"\n    // >>> longestPalindrome((\"a\"))\n    // \"a\"\n    //\
    \ >>> longestPalindrome((\"ab\"))\n    // \"ab\"\n    // >>> longestPalindrome((\"\
    aba\"))\n    // \"aba\"\n    // >>> longestPalindrome((\"abaab\"))\n    // \"\
    abaab\"\n    def longestPalindrome(text : String) : String = {\n        if (text.length\
    \ == 0) {\n            \"\"\n        } else {\n            if (text.length ==\
    \ 1) {\n                text.charAt(0)\n            } else {\n               \
    \ if (text.length % 2 == 0) {\n                    var i = 0\n               \
    \     var j = text.length - 1\n                    while (i < j) {\n         \
    \               if (text.charAt(i) != text.charAt(j)) {\n                    \
    \        var mid = (i + j) / 2\n                            var left = mid - 1\n\
    \                            var right = mid + 1\n                           \
    \ if (left < 0) {\n                                left = 0\n                \
    \            }\n                            if (right > text.length - 1) {\n \
    \                               right = text.length - 1\n                    \
    \        }\n                            var leftText =", "        if (text.length()\
    \ == 0) {\n            true\n        } else {\n            var firstChar = text.charAt(0)\n\
    \            var lastChar = text.charAt(text.length() - 1)\n            if (firstChar\
    \ == lastChar) {\n                text.substring(1, text.length() - 1).chars().forEach(c\
    \ -> {\n                    if (c != firstChar) {\n                        false\n\
    \                    }\n                })\n                true\n           \
    \ } else {\n                false\n            }\n        }\n    }\n\n    // Returns\
    \ the sum of all the digits in given string\n    // >>> sumDigits(\"\")\n    //\
    \ (0)\n    // >>> sumDigits(\"123\")\n    // (3)\n    // >>> sumDigits(\"1234\"\
    )\n    // (6)\n    // >>> sumDigits(\"12345\")\n    // (10)\n    def sumDigits(text\
    \ : String) : Int = {\n        if (text.length() == 0) {\n            0\n    \
    \    } else {\n            var sum = 0\n            text.chars().forEach(c ->\
    \ {\n                if (Character.isDigit(c)) {\n                    sum += Character.digit(c,\
    \ 10)\n                }\n            })\n            return sum\n        }\n\
    \    }\n\n    // Returns the sum of all the digits in given string\n    // >>>\
    \ sumDigits(\"\")\n    // (0)\n    // >>> sumDigits(\"123\")\n    // (3)\n   \
    \ // >>> sumDigits(\"1234\")\n    // (6)\n    // >>> sumDigits(\"12345\")\n  \
    \  // (10)\n    def sumDigits2(text : String) : Int = {\n        if (text.length()\
    \ == 0) {\n            0\n        } else {\n            var sum = 0\n        \
    \    var i = 0\n            while (i < text.length()) {\n                var c\
    \ = text.charAt(i)\n                if (Character.isDigit(c)) {\n            \
    \        sum += Character.digit(c, 10)\n                }\n                i +=\
    \ 1\n            }\n            return sum\n        }\n    }\n\n    // Returns\
    \ the sum of all the digits in given string\n    // >>> sumDig", "        if (text.length\
    \ == 0) {\n            true\n        } else {\n            var i = 0\n       \
    \     var j = text.length - 1\n            while (i < j) {\n                if\
    \ (text.charAt(i) != text.charAt(j)) {\n                    return false\n   \
    \             }\n                i += 1\n                j -= 1\n            }\n\
    \            true\n        }", "        if (text.length() == 0) {\n          \
    \  true\n        } else {\n            var firstChar = text.charAt(0)\n      \
    \      var lastChar = text.charAt(text.length() - 1)\n            if (firstChar\
    \ == lastChar) {\n                true\n            } else {\n               \
    \ false\n            }\n        }\n    }\n\n    // Returns the longest palindrome\
    \ substring in given string\n    // >>> getLongestPalindrome((\"aba\"))\n    //\
    \ (ab)\n    // >>> getLongestPalindrome((\"abaaba\"))\n    // (aba)\n    // >>>\
    \ getLongestPalindrome((\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length() < 2) {\n            return true\n        }\n        var\
    \ i = 0\n        var j = text.length() - 1\n        while (i < j) {\n        \
    \    if (text.charAt(i) != text.charAt(j)) {\n                return false\n \
    \           }\n            i += 1\n            j -= 1\n        }\n        return\
    \ true", "        if (text.length == 0) {\n            true\n        } else {\n\
    \            if (text.length == 1) {\n                text.charAt(0) == text.charAt(0)\n\
    \            } else {\n                if (text.length % 2 == 0) {\n         \
    \           var half = text.length / 2\n                    var firstHalf = text.substring(0,\
    \ half)\n                    var secondHalf = text.substring(half)\n         \
    \           var firstHalfReverse = reverse(firstHalf)\n                    var\
    \ secondHalfReverse = reverse(secondHalf)\n                    firstHalfReverse\
    \ == secondHalfReverse\n                } else {\n                    var half\
    \ = text.length / 2\n                    var firstHalf = text.substring(0, half)\n\
    \                    var secondHalf = text.substring(half)\n                 \
    \   var firstHalfReverse = reverse(firstHalf)\n                    var secondHalfReverse\
    \ = reverse(secondHalf)\n                    firstHalfReverse == secondHalfReverse\n\
    \                }\n            }\n        }\n    }\n\n    // Returns reversed\
    \ string\n    // >>> reverse(\"abc\")\n    // (cba)\n    def reverse(text : String)\
    \ : String = {\n        if (text.length == 0) {\n            \"\"\n        } else\
    \ {\n            if (text.length == 1) {\n                text.charAt(0)\n   \
    \         } else {\n                var half = text.length / 2\n             \
    \   var firstHalf = text.substring(0, half)\n                var secondHalf =\
    \ text.substring(half)\n                var firstHalfReverse = reverse(firstHalf)\n\
    \                var secondHalfReverse = reverse(secondHalf)\n               \
    \ firstHalfReverse + secondHalfReverse\n            }\n        }\n    }\n\n  \
    \  // Returns string with all letters in reverse order\n    // >>> reverseAll(\"\
    abc\")\n    // (cba)\n    def reverseAll(text : String) : String = {\n       \
    \ if (text.length == 0) {\n            \"\"\n        } else {\n            if\
    \ (text.length == 1) {\n                text.charAt(0)\n            } else {\n\
    \                var half = text.length / 2\n                var firstHalf = text.substring(0",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   var i = 0\n            var j = text.length - 1\n            while (i < j)\
    \ {\n                if (text.charAt(i) != text.charAt(j)) {\n               \
    \     return false\n                }\n                i += 1\n              \
    \  j -= 1\n            }\n            true\n        }", "        if (text.length\
    \ == 0) {\n            true\n        } else {\n            var i = 0\n       \
    \     var j = text.length - 1\n            while (i < j) {\n                if\
    \ (text.charAt(i) != text.charAt(j)) {\n                    return false\n   \
    \             }\n                i += 1\n                j -= 1\n            }\n\
    \            true\n        }\n    }\n\n    // Returns the longest palindrome in\
    \ given string\n    // >>> longestPalindrome(\"\")\n    // \"\"\n    // >>> longestPalindrome(\"\
    a\")\n    // \"a\"\n    // >>> longestPalindrome(\"ab\")\n    // \"ab\"\n    //\
    \ >>> longestPalindrome(\"abba\")\n    // \"abba\"\n    // >>> longestPalindrome(\"\
    abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   var i = 0\n            var j = text.length - 1\n            while (i < j)\
    \ {\n                if (text.charAt(i) != text.charAt(j)) {\n               \
    \     return false\n                }\n                i += 1\n              \
    \  j -= 1\n            }\n            true\n        }", "        if (text.length()\
    \ == 0) {\n            true\n        } else {\n            var s = text.toLowerCase()\n\
    \            var i = 0\n            var j = s.length() - 1\n            while\
    \ (i < j) {\n                if (s.charAt(i) != s.charAt(j)) {\n             \
    \       return false\n                }\n                i += 1\n            \
    \    j -= 1\n            }\n            true\n        }", "        text.length\
    \ == 0\n        ? true\n        : text.length == 1\n        ? true\n        :\
    \ text.length == 2\n        ? text.equals(text.reverse())\n        : false\n \
    \   }\n\n    // Returns the number of palindromes in given string\n    // >>>\
    \ countPalindromes(\"\")\n    // (0)\n    // >>> countPalindromes(\"a\")\n   \
    \ // (1)\n    // >>> countPalindromes(\"ab\")\n    // (2)\n    // >>> countPalindromes(\"\
    aba\")\n    // (3)\n    // >>> countPalindromes(\"abab\")\n    // (4)\n    //\
    \ >>> countPalindromes(\"ababa\")\n    // (5)\n    def countPalindromes(text :\
    \ String) : Int = {\n        text.length == 0\n        ? 0\n        : text.length\
    \ == 1\n        ? 1\n        : text.length == 2\n        ? 2\n        : text.length\
    \ == 3\n        ? 3\n        : text.length == 4\n        ? 4\n        : text.length\
    \ == 5\n        ? 5\n        : text.length == 6\n        ? 6\n        : text.length\
    \ == 7\n        ? 7\n        : text.length == 8\n        ? 8\n        : text.length\
    \ == 9\n        ? 9\n        : text.length == 10\n        ? 10\n        : text.length\
    \ == 11\n        ? 11\n        : text.length == 12\n        ? 12\n        : text.length\
    \ == 13\n        ? 13\n        : text.length == 14\n        ? 14\n        : text.length\
    \ == 15\n        ? 15\n        : text.length == 16\n        ? 16\n        : text.length\
    \ == 17\n        ? 17\n        : text.length == 18\n        ? 18\n        : text.length\
    \ == 19\n        ? 19\n        : text.length == 20\n        ? 20\n        : text.length\
    \ == 21\n        ? 21\n        : text.length == 22\n        ? 22\n        : text.length\
    \ == 23\n        ? 23\n        : text.length == 24\n        ? 24\n        : text.length\
    \ == 25\n        ? 25\n        : text.length == 26\n        ? 26", "        if\
    \ (text.length == 0) {\n            true\n        } else {\n            var i\
    \ = 0\n            var j = text.length - 1\n            while (i < j) {\n    \
    \            if (text.charAt(i) != text.charAt(j)) {\n                    return\
    \ false\n                }\n                i += 1\n                j -= 1\n \
    \           }\n            true\n        }\n    }\n\n    // Returns the number\
    \ of palindromic subsequences in given string\n    // >>> countPalindromicSubsequences(\"\
    \")\n    // (0)\n    // >>> countPalindromicSubsequences(\"a\")\n    // (1)\n\
    \    // >>> countPalindromicSubsequences(\"ab\")\n    // (2)\n    // >>> countPalindromicSubsequences(\"\
    aba\")\n    // (3)\n    // >>> countPalindromicSubsequences(\"abab\")\n    //\
    \ (4)\n    // >>> countPalindromicSubsequences(\"ababa\")\n    // (5)\n    def\
    \ countPalindromicSubsequences(text : String) : Int = {\n        if (text.length\
    \ == 0) {\n            0\n        } else {\n            var i = 0\n          \
    \  var j = text.length - 1\n            var count = 0\n            while (i <\
    \ j) {\n                if (text.charAt(i) == text.charAt(j)) {\n            \
    \        count += 1\n                    i += 1\n                    j -= 1\n\
    \                } else {\n                    i += 1\n                }\n   \
    \         }\n            count\n        }\n    }\n\n    // Returns the number\
    \ of palindromic subsequences in given string\n    // >>> countPalindromicSubstrings(\"\
    \")\n    // (0)\n    // >>> countPalindromicSubstrings(\"a\")\n    // (1)\n  \
    \  // >>> countPalindromicSubstrings(\"ab\")\n    // (2)\n    // >>> countPalindromicSubstrings(\"\
    aba\")\n    // (3)\n    // >>> countPalindromicSubstrings(\"abab\")\n    // (4)\n\
    \    // >>> countPalindromicSubstrings(\"ababa\")\n    // (5)\n    def countPalindromicSubstrings",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   var i = 0\n            var j = text.length - 1\n            while (i < j)\
    \ {\n                if (text.charAt(i) != text.charAt(j)) {\n               \
    \     return false\n                }\n                i += 1\n              \
    \  j -= 1\n            }\n            true\n        }", "        if (text.length\
    \ == 0) {\n            true\n        } else {\n            text.split(\"\").reverse().foldLeft(true,\
    \ (x, y) => x && y)\n        }\n    }\n\n    // Returns the longest palindrome\
    \ substring in given string\n    // >>> getLongestPalindrome(\"\")\n    // \"\"\
    \n    // >>> getLongestPalindrome(\"a\")\n    // \"a\"\n    // >>> getLongestPalindrome(\"\
    abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text == \"\") {\n            true\n        } else {\n            var\
    \ isPalindrome = true\n            for (i <- 0 until (text.length - 1)) {\n  \
    \              if (text[i] != text[(text.length - 1) - i]) {\n               \
    \     isPalindrome = false\n                }\n            }\n            isPalindrome\n\
    \        }", "        if (text.length == 0) {\n            true\n        } else\
    \ if (text.length == 1) {\n            text == text.reverse()\n        } else\
    \ {\n            var left = 0\n            var right = text.length - 1\n     \
    \       while (left < right) {\n                if (text[left] != text[right])\
    \ {\n                    return false\n                }\n                left\
    \ += 1\n                right -= 1\n            }\n            true\n        }",
  "        if (text.length() == 0) {\n            true\n        } else {\n       \
    \     var i = 0\n            var j = text.length() - 1\n            while (i <\
    \ j) {\n                if (text.charAt(i) != text.charAt(j)) {\n            \
    \        return false\n                }\n                i += 1\n           \
    \     j -= 1\n            }\n            true\n        }", "        if (text.length\
    \ == 0) {\n            true\n        } else {\n            if (text.length ==\
    \ 1) {\n                text.charAt(0) == text.charAt(0)\n            } else {\n\
    \                var left = 0\n                var right = text.length - 1\n \
    \               while (left < right) {\n                    if (text.charAt(left)\
    \ != text.charAt(right)) {\n                        return false\n           \
    \         }\n                    left += 1\n                    right -= 1\n \
    \               }\n                true\n            }\n        }\n    }\n\n \
    \   // Returns the number of palindromic strings in given string\n    // >>> countPalindromes((\"\
    \"))\n    // (0)\n    // >>> countPalindromes((\"a\"))\n    // (1)\n    // >>>\
    \ countPalindromes((\"ab\"))\n    // (2)\n    // >>> countPalindromes((\"aba\"\
    ))\n    // (1)\n    // >>> countPalindromes((\"abba\"))\n    // (2)\n    // >>>\
    \ countPalindromes((\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length() == 0) {\n            true\n        } else {\n       \
    \     var i = 0\n            var j = text.length() - 1\n            while (i <\
    \ j) {\n                if (text.charAt(i) != text.charAt(j)) {\n            \
    \        return false\n                }\n                i += 1\n           \
    \     j -= 1\n            }\n            true\n        }", "        if (text.length()\
    \ < 2) {\n            return true\n        }\n        var i = 0\n        var j\
    \ = text.length() - 1\n        while (i < j) {\n            if (text.charAt(i)\
    \ != text.charAt(j)) {\n                return false\n            }\n        \
    \    i += 1\n            j -= 1\n        }\n        return true\n    }\n\n   \
    \ // Returns the longest palindrome substring in given string\n    // >>> getLongestPalindrome((\"\
    abcd\"))\n    // (ab)\n    // >>> getLongestPalindrome((\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text == null) return false\n        if (text.length() == 0) return\
    \ true\n        if (text.length() == 1) return true\n        if (text.length()\
    \ == 2) return true\n        if (text.length() == 3) return true\n        if (text.length()\
    \ == 4) return true\n        if (text.length() == 5) return true\n        if (text.length()\
    \ == 6) return true\n        if (text.length() == 7) return true\n        if (text.length()\
    \ == 8) return true\n        if (text.length() == 9) return true\n        if (text.length()\
    \ == 10) return true\n        if (text.length() == 11) return true\n        if\
    \ (text.length() == 12) return true\n        if (text.length() == 13) return true\n\
    \        if (text.length() == 14) return true\n        if (text.length() == 15)\
    \ return true\n        if (text.length() == 16) return true\n        if (text.length()\
    \ == 17) return true\n        if (text.length() == 18) return true\n        if\
    \ (text.length() == 19) return true\n        if (text.length() == 20) return true\n\
    \        if (text.length() == 21) return true\n        if (text.length() == 22)\
    \ return true\n        if (text.length() == 23) return true\n        if (text.length()\
    \ == 24) return true\n        if (text.length() == 25) return true\n        if\
    \ (text.length() == 26) return true\n        if (text.length() == 27) return true\n\
    \        if (text.length() == 28) return true\n        if (text.length() == 29)\
    \ return true\n        if (text.length() == 30) return true\n        if (text.length()\
    \ == 31) return true\n        if (text.length() == 32) return true\n        if\
    \ (text.length() == 33) return true\n        if (text.length() == 34) return true\n\
    \        if (text.length() == 35) return true\n        if (text.length() == 36)\
    \ return true\n        if (text.length() == 37) return true\n        if (text.length()\
    \ ==", "        if (text.length() == 0) {\n            true\n        } else {\n\
    \            var i = 0\n            var j = text.length() - 1\n            while\
    \ (i < j) {\n                if (text.charAt(i) != text.charAt(j)) {\n       \
    \             return false\n                }\n                i += 1\n      \
    \          j -= 1\n            }\n            true\n        }", "        text.length\
    \ == 0\n        ? true\n        : text.length == 1\n        ? true\n        :\
    \ text.length == 2\n        ? text == text.reverse()\n        : false\n    }\n\
    \n    // Checks if given string is a palindrome ignoring case\n    // >>> isPalindromeIgnoreCase((\"\
    \"))\n    // (true)\n    // >>> isPalindromeIgnoreCase((\"aba\"))\n    // (true)\n\
    \    // >>> isPalindromeIgnoreCase((\"aaaaa\"))\n    // (true)\n    // >>> isPalindromeIgnoreCase((\"\
    zbcd\"))\n    // (false)\n    def isPalindromeIgnoreCase(text : String) : Boolean\
    \ = {\n        text.length == 0\n        ? true\n        : text.length == 1\n\
    \        ? true\n        : text.length == 2\n        ? text.equalsIgnoreCase(text.reverse())\n\
    \        : false\n    }\n\n    // Checks if given string is a palindrome ignoring\
    \ case and\n    // ignoring spaces\n    // >>> isPalindromeIgnoreCaseAndSpaces((\"\
    \"))\n    // (true)\n    // >>> isPalindromeIgnoreCaseAndSpaces((\"aba\"))\n \
    \   // (true)\n    // >>> isPalindromeIgnoreCaseAndSpaces((\"  aba  \"))\n   \
    \ // (true)\n    // >>> isPalindromeIgnoreCaseAndSpaces((\"  aba   \"))\n    //\
    \ (true)\n    // >>> isPalindromeIgnoreCaseAndSpaces((\"  aba  a\"))\n    // (true)\n\
    \    // >>> isPalindromeIgnoreCaseAndSpaces((\"  aba  a  \"))\n    // (true)\n\
    \    // >>> isPalindromeIgnoreCaseAndSpaces((\"  aba  a  a\"))\n    // (true)\n\
    \    // >>> isPalindromeIgnoreCaseAndSpaces((\"  aba  a  a  \"))\n    // (true)\n\
    \    // >>> isPalindromeIgnoreCaseAndSpaces((\"  aba  a  a  a\"))\n    // (true)\n\
    \    // >>> isPalindromeIgnoreCaseAndSpaces((\"  aba  a  a  a  \"))\n    // (",
  "        if (text == null) return false\n        if (text.length() == 0) return\
    \ true\n        if (text.length() == 1) return true\n        if (text.length()\
    \ == 2) return true\n        if (text.length() == 3) return true\n        if (text.length()\
    \ == 4) return true\n        if (text.length() == 5) return true\n        if (text.length()\
    \ == 6) return true\n        if (text.length() == 7) return true\n        if (text.length()\
    \ == 8) return true\n        if (text.length() == 9) return true\n        if (text.length()\
    \ == 10) return true\n        if (text.length() == 11) return true\n        if\
    \ (text.length() == 12) return true\n        if (text.length() == 13) return true\n\
    \        if (text.length() == 14) return true\n        if (text.length() == 15)\
    \ return true\n        if (text.length() == 16) return true\n        if (text.length()\
    \ == 17) return true\n        if (text.length() == 18) return true\n        if\
    \ (text.length() == 19) return true\n        if (text.length() == 20) return true\n\
    \        if (text.length() == 21) return true\n        if (text.length() == 22)\
    \ return true\n        if (text.length() == 23) return true\n        if (text.length()\
    \ == 24) return true\n        if (text.length() == 25) return true\n        if\
    \ (text.length() == 26) return true\n        if (text.length() == 27) return true\n\
    \        if (text.length() == 28) return true\n        if (text.length() == 29)\
    \ return true\n        if (text.length() == 30) return true\n        if (text.length()\
    \ == 31) return true\n        if (text.length() == 32) return true\n        if\
    \ (text.length() == 33) return true\n        if (text.length() == 34) return true\n\
    \        if (text.length() == 35) return true\n        if (text.length() == 36)\
    \ return true\n        if (text.length() == 37) return true\n        if (text.length()\
    \ ==", "        if (text.length == 0) {\n            true\n        } else {\n\
    \            var firstChar = text.charAt(0)\n            var lastChar = text.charAt(text.length\
    \ - 1)\n            if (firstChar == lastChar) {\n                text = text.substring(1,\
    \ text.length - 1)\n                return isPalindrome(text)\n            } else\
    \ {\n                return false\n            }\n        }\n    }\n\n    // Returns\
    \ the number of palindromic substrings in given string\n    // >>> countPalindromes((\"\
    \"))\n    // (0)\n    // >>> countPalindromes((\"a\"))\n    // (1)\n    // >>>\
    \ countPalindromes((\"ab\"))\n    // (2)\n    // >>> countPalindromes((\"aba\"\
    ))\n    // (2)\n    // >>> countPalindromes((\"abaaba\"))\n    // (4)\n    def\
    \ countPalindromes(text : String) : Int = {\n        var count = 0\n        var\
    \ length = text.length\n        for (var i = 0; i < length; i++) {\n         \
    \   var firstChar = text.charAt(i)\n            var lastChar = text.charAt(length\
    \ - 1 - i)\n            if (firstChar == lastChar) {\n                count +=\
    \ 1\n                text = text.substring(i + 1, length - i)\n              \
    \  count += countPalindromes(text)\n                text = text.substring(0, i)\n\
    \            }\n        }\n        return count\n    }\n\n    // Returns the number\
    \ of palindromic substrings in given string\n    // >>> countPalindromes2((\"\"\
    ))\n    // (0)\n    // >>> countPalindromes2((\"a\"))\n    // (1)\n    // >>>\
    \ countPalindromes2((\"ab\"))\n    // (2)\n    // >>> countPalindromes2((\"aba\"\
    ))\n    // (2)\n    // >>> countPalindromes2((\"abaaba\"))\n    // (4)\n    def\
    \ countPalindromes2(text : String) : Int = {\n        var count = 0\n        var\
    \ length = text.length\n", "        if (text.length == 0) {\n            true\n\
    \        } else {\n            if (text.length == 1) {\n                text ==\
    \ text.reverse()\n            } else {\n                var firstHalf = text.substring(0,\
    \ text.length / 2)\n                var secondHalf = text.substring(text.length\
    \ / 2)\n                if (firstHalf == secondHalf.reverse()) {\n           \
    \         true\n                } else {\n                    false\n        \
    \        }\n            }\n        }", "        if (text.length == 0) {\n    \
    \        true\n        } else if (text.length == 1) {\n            text == text.reverse()\n\
    \        } else {\n            text.substring(0, text.length / 2).reverse() ==\
    \ text.substring(text.length / 2)\n        }\n    }\n\n    // Returns the longest\
    \ palindromic substring in given string\n    // >>> getLongestPalindrome(\"abcd\"\
    )\n    // (abcd)\n    // >>> getLongestPalindrome(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length() < 2) {\n            return true\n        }\n        var\
    \ left = 0\n        var right = text.length() - 1\n        while (left < right)\
    \ {\n            if (text.charAt(left) != text.charAt(right)) {\n            \
    \    return false\n            }\n            left += 1\n            right -=\
    \ 1\n        }\n        return true\n    }\n\n    // Returns the longest palindrome\
    \ substring in given string\n    // >>> getLongestPalindrome((\"abcd\"))\n   \
    \ // (ab)\n    // >>> getLongestPalindrome((\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   var left = 0\n            var right = text.length - 1\n            while (left\
    \ < right) {\n                if (text.charAt(left) != text.charAt(right)) {\n\
    \                    return false\n                }\n                left +=\
    \ 1\n                right -= 1\n            }\n            true\n        }\n\
    \    }\n\n    // Checks if given string is a palindrome ignoring case\n    //\
    \ >>> isPalindromeIgnoreCase((\"\"))\n    // (true)\n    // >>> isPalindromeIgnoreCase((\"\
    aba\"))\n    // (true)\n    // >>> isPalindromeIgnoreCase((\"aaaaa\"))\n    //\
    \ (true)\n    // >>> isPalindromeIgnoreCase((\"zbcd\"))\n    // (false)\n    def\
    \ isPalindromeIgnoreCase(text : String) : Boolean = {\n        if (text.length\
    \ == 0) {\n            true\n        } else {\n            var left = 0\n    \
    \        var right = text.length - 1\n            while (left < right) {\n   \
    \             if (Character.toLowerCase(text.charAt(left)) != Character.toLowerCase(text.charAt(right)))\
    \ {\n                    return false\n                }\n                left\
    \ += 1\n                right -= 1\n            }\n            true\n        }\n\
    \    }\n\n    // Returns the number of palindromic strings in given string\n \
    \   // >>> countPalindromes((\"\"))\n    // (0)\n    // >>> countPalindromes((\"\
    aba\"))\n    // (1)\n    // >>> countPalindromes((\"abaaba\"))\n    // (2)\n \
    \   // >>> countPalindromes((\"abba\"))\n    // (1)\n    // >>> countPalindromes((\"\
    abbaabba\"))\n    // (2)\n    // >>> countPalindromes((\"abbaabbaabba\"))\n  \
    \  // (3)\n    def countPalindromes(text : String) : Int = {\n        if (text.length\
    \ == 0) {\n            0\n        } else {\n            var left = 0\n       \
    \     var right = text.length - 1\n            var count = 0\n            while\
    \ (left < right", "        if (text.length == 0) {\n            true\n       \
    \ } else if (text.length == 1) {\n            text == text.reverse()\n       \
    \ } else {\n            text.substring(0, text.length / 2).reverse() == text.substring(text.length\
    \ / 2)\n        }\n    }\n\n    // Returns the longest palindrome in given string\n\
    \    // >>> longestPalindrome(\"\")\n    // \"\"\n    // >>> longestPalindrome(\"\
    a\")\n    // \"a\"\n    // >>> longestPalindrome(\"ab\")\n    // \"ab\"\n    //\
    \ >>> longestPalindrome(\"abba\")\n    // \"abba\"\n    // >>> longestPalindrome(\"\
    abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   if (text.length == 1) {\n                text.charAt(0) == text.charAt(0)\n\
    \            } else {\n                var firstChar = text.charAt(0)\n      \
    \          var lastChar = text.charAt(text.length - 1)\n                if (firstChar\
    \ == lastChar) {\n                    text.substring(1, text.length - 1).chars().allMatch(c\
    \ -> c == firstChar)\n                } else {\n                    false\n  \
    \              }\n            }\n        }", "        if (text.length == 0) {\n\
    \            true\n        } else {\n            if (text.length == 1) {\n   \
    \             text.charAt(0) == text.charAt(0)\n            } else {\n       \
    \         var i = 0\n                var j = text.length - 1\n               \
    \ while (i < j) {\n                    if (text.charAt(i) != text.charAt(j)) {\n\
    \                        return false\n                    }\n               \
    \     i += 1\n                    j -= 1\n                }\n                true\n\
    \            }\n        }\n    }\n\n    // Returns the number of palindromes in\
    \ given string\n    // >>> countPalindromes((\"\"))\n    // (0)\n    // >>> countPalindromes((\"\
    aba\"))\n    // (1)\n    // >>> countPalindromes((\"aaaaa\"))\n    // (2)\n  \
    \  // >>> countPalindromes((\"zbcd\"))\n    // (0)\n    def countPalindromes(text\
    \ : String) : Int = {\n        var count = 0\n        for (var i = 0; i < text.length;\
    \ i++) {\n            var j = i\n            while (j < text.length && text.charAt(i)\
    \ == text.charAt(j)) {\n                j += 1\n            }\n            if\
    \ (j - i == 1) {\n                count += 1\n            }\n        }\n     \
    \   return count\n    }\n\n    // Returns the number of palindromes in given string\n\
    \    // >>> countPalindromes2((\"\"))\n    // (0)\n    // >>> countPalindromes2((\"\
    aba\"))\n    // (1)\n    // >>> countPalindromes2((\"aaaaa\"))\n    // (2)\n \
    \   // >>> countPalindromes2((\"zbcd\"))\n    // (0)\n    def countPalindromes2(text\
    \ : String) : Int = {\n        var count = 0\n        for (var i = 0; i < text.length;\
    \ i++) {\n            var j = i\n            while (j < text.length && text.charAt(i)\
    \ == text.charAt(j)) {\n                j += 1\n            }\n            if\
    \ (j -", "        if (text.length == 0) {\n            true\n        } else if\
    \ (text.length == 1) {\n            text == text.toLowerCase()\n        } else\
    \ {\n            var isPalindrome = true\n            var i = 0\n            var\
    \ j = text.length - 1\n            while (i < j) {\n                if (text.charAt(i)\
    \ != text.charAt(j)) {\n                    isPalindrome = false\n           \
    \         break\n                }\n                i += 1\n                j\
    \ -= 1\n            }\n            return isPalindrome\n        }\n    }\n\n \
    \   // Returns the longest palindrome in given string\n    // >>> getLongestPalindrome(\"\
    \")\n    // \"\"\n    // >>> getLongestPalindrome(\"a\")\n    // \"a\"\n    //\
    \ >>> getLongestPalindrome(\"ab\")\n    // \"ab\"\n    // >>> getLongestPalindrome(\"\
    aba\")\n    // \"aba\"\n    // >>> getLongestPalindrome(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   var left = 0\n            var right = text.length - 1\n            while (left\
    \ < right) {\n                if (text.charAt(left) != text.charAt(right)) {\n\
    \                    return false\n                }\n                left +=\
    \ 1\n                right -= 1\n            }\n            true\n        }",
  "        if (text.length() == 0) {\n            true\n        } else {\n       \
    \     var left = 0\n            var right = text.length() - 1\n            while\
    \ (left < right) {\n                if (text.charAt(left) != text.charAt(right))\
    \ {\n                    return false\n                }\n                left\
    \ += 1\n                right -= 1\n            }\n            true\n        }",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   var isPalindrome = true\n            for (i <- 0 until (text.length - 1))\
    \ {\n                if (text[i] != text[(text.length - 1) - i]) {\n         \
    \           isPalindrome = false\n                    break\n                }\n\
    \            }\n            isPalindrome\n        }", "        if (text == \"\"\
    ) {\n            true\n        } else {\n            if (text.length() == 1) {\n\
    \                true\n            } else {\n                if (text.length()\
    \ % 2 == 0) {\n                    var half = text.length() / 2\n            \
    \        var firstHalf = text.substring(0, half)\n                    var secondHalf\
    \ = text.substring(half)\n                    if (firstHalf == secondHalf.reverse())\
    \ {\n                        true\n                    } else {\n            \
    \            false\n                    }\n                } else {\n        \
    \            false\n                }\n            }\n        }\n    }\n\n   \
    \ // Returns the number of palindromic strings in given string\n    // >>> countPalindromes(\"\
    \")\n    // (0)\n    // >>> countPalindromes(\"a\")\n    // (1)\n    // >>> countPalindromes(\"\
    ab\")\n    // (2)\n    // >>> countPalindromes(\"aba\")\n    // (1)\n    // >>>\
    \ countPalindromes(\"abba\")\n    // (1)\n    // >>> countPalindromes(\"ababab\"\
    )\n    // (2)\n    def countPalindromes(text : String) : Int = {\n        if (text\
    \ == \"\") {\n            0\n        } else {\n            if (text.length() ==\
    \ 1) {\n                1\n            } else {\n                if (text.length()\
    \ % 2 == 0) {\n                    var half = text.length() / 2\n            \
    \        var firstHalf = text.substring(0, half)\n                    var secondHalf\
    \ = text.substring(half)\n                    if (firstHalf == secondHalf.reverse())\
    \ {\n                        1 + countPalindromes(text.substring(half))\n    \
    \                } else {\n                        countPalindromes(text.substring(half))\n\
    \                    }\n                } else {\n                    countPalindromes(text.substring(half))\n\
    \                }\n            }\n        }\n    }\n\n    // Returns the number\
    \ of words in given string\n    // >>> countWords(\"\")\n    // (0)\n    // >>>\
    \ countWords(\"a\")\n    // (1)\n    // >>> countWords(\"ab\")\n    // (2)\n \
    \   // >>> count", "        if (text.length() == 0) {\n            true\n    \
    \    } else {\n            var i = 0\n            var j = text.length() - 1\n\
    \            while (i < j) {\n                if (text.charAt(i) != text.charAt(j))\
    \ {\n                    return false\n                }\n                i +=\
    \ 1\n                j -= 1\n            }\n            true\n        }\n    }\n\
    \n    // Returns the longest palindrome in given string\n    // >>> longestPalindrome((\"\
    \"))\n    // \"\"\n    // >>> longestPalindrome((\"a\"))\n    // \"a\"\n    //\
    \ >>> longestPalindrome((\"aa\"))\n    // \"aa\"\n    // >>> longestPalindrome((\"\
    aaa\"))\n    // \"aaa\"\n    // >>> longestPalindrome((\"abcd\"))\n    // \"ab\"\
    \n    def longestPalindrome(text : String) : String = {\n        if (text.length()\
    \ == 0) {\n            \"\"\n        } else {\n            var i = 0\n       \
    \     var j = text.length() - 1\n            var max = \"\"\n            while\
    \ (i < j) {\n                if (text.charAt(i) == text.charAt(j)) {\n       \
    \             var s = text.substring(i, j + 1)\n                    if (s.length()\
    \ > max.length()) {\n                        max = s\n                    }\n\
    \                }\n                i += 1\n                j -= 1\n         \
    \   }\n            return max\n        }\n    }\n\n    // Returns the longest\
    \ palindrome in given string\n    // >>> longestPalindrome2((\"\"))\n    // \"\
    \"\n    // >>> longestPalindrome2((\"a\"))\n    // \"a\"\n    // >>> longestPalindrome2((\"\
    aa\"))\n    // \"aa\"\n    // >>> longestPalindrome2((\"aaa\"))\n    // \"aaa\"\
    \n    // >>> longestPalindrome2((\"abcd\"))\n    // \"ab\"\n    def longestPalindrome2(text\
    \ : String) : String = {\n        if (text.length() == 0) {\n            \"\"\n\
    \        } else {\n            var i = 0\n            var j = text.length() -\
    \ 1\n            var max = \"\"\n", "        if (text.length == 0) {\n       \
    \     true\n        } else if (text.length == 1) {\n            text == text.toLowerCase()\n\
    \        } else {\n            var i = 0\n            var j = text.length - 1\n\
    \            while (i < j) {\n                if (text.charAt(i) != text.charAt(j))\
    \ {\n                    return false\n                }\n                i +=\
    \ 1\n                j -= 1\n            }\n            true\n        }\n    }\n\
    \n    // Returns the number of palindromes in given string\n    // >>> countPalindromes(\"\
    \")\n    // (0)\n    // >>> countPalindromes(\"a\")\n    // (1)\n    // >>> countPalindromes(\"\
    ab\")\n    // (2)\n    // >>> countPalindromes(\"aba\")\n    // (1)\n    // >>>\
    \ countPalindromes(\"abba\")\n    // (2)\n    // >>> countPalindromes(\"ababab\"\
    )\n    // (3)\n    def countPalindromes(text : String) : Int = {\n        var\
    \ count = 0\n        var i = 0\n        var j = text.length - 1\n        while\
    \ (i < j) {\n            if (text.charAt(i) == text.charAt(j)) {\n           \
    \     count += 1\n                i += 1\n                j -= 1\n           \
    \ } else {\n                i += 1\n            }\n        }\n        return count\n\
    \    }\n\n    // Returns the number of palindromes in given string\n    // >>>\
    \ countPalindromes(\"\")\n    // (0)\n    // >>> countPalindromes(\"a\")\n   \
    \ // (1)\n    // >>> countPalindromes(\"ab\")\n    // (2)\n    // >>> countPalindromes(\"\
    aba\")\n    // (1)\n    // >>> countPalindromes(\"abba\")\n    // (2)\n    //\
    \ >>> countPalindromes(\"ababab\")\n    // (3)\n    def countPalindromes2(text\
    \ : String) : Int = {\n        var count = 0\n        var i = 0\n        var j\
    \ = text.length - 1\n        while (i", "        if (text == \"\")\n         \
    \   return true\n        else {\n            var i = 0\n            var j = text.length()\
    \ - 1\n            while (i < j) {\n                if (text.charAt(i) != text.charAt(j))\n\
    \                    return false\n                i += 1\n                j -=\
    \ 1\n            }\n            return true\n        }", "        if (text.length\
    \ == 0) {\n            true\n        } else {\n            var i = 0\n       \
    \     var j = text.length - 1\n            while (i < j) {\n                if\
    \ (text.charAt(i) != text.charAt(j)) {\n                    return false\n   \
    \             }\n                i += 1\n                j -= 1\n            }\n\
    \            true\n        }\n    }\n\n    // Returns the longest palindrome substring\
    \ in given string\n    // >>> getLongestPalindrome((\"\"))\n    // \"\"\n    //\
    \ >>> getLongestPalindrome((\"a\"))\n    // \"a\"\n    // >>> getLongestPalindrome((\"\
    ab\"))\n    // \"ab\"\n    // >>> getLongestPalindrome((\"aba\"))\n    // \"aba\"\
    \n    // >>> getLongestPalindrome((\"abaab\"))\n    // \"aba\"\n    def getLongestPalindrome(text\
    \ : String) : String = {\n        if (text.length == 0) {\n            \"\"\n\
    \        } else {\n            var i = 0\n            var j = text.length - 1\n\
    \            var max = \"\"\n            while (i < j) {\n                if (text.charAt(i)\
    \ == text.charAt(j)) {\n                    var s = \"\"\n                   \
    \ var k = i\n                    while (k < j) {\n                        s +=\
    \ text.charAt(k)\n                        k += 1\n                    }\n    \
    \                if (s.length > max.length) {\n                        max = s\n\
    \                    }\n                }\n                i += 1\n          \
    \      j -= 1\n            }\n            max\n        }\n    }\n\n    // Returns\
    \ the longest palindrome substring in given string\n    // >>> getLongestPalindrome2((\"\
    \"))\n    // \"\"\n    // >>> getLongestPalindrome2((\"a\"))\n    // \"a\"\n \
    \   // >>> getLongestPalindrome2((\"ab\"))\n    // \"ab\"\n    // >>> getLongestPalindrome2((\"\
    aba\"))\n    // \"aba\"\n    // >>> getLongestPalindrome2((\"abaab\"))\n    //\
    \ \"aba\"\n    def getLongestPalindrome2(text : String) : String", "        if\
    \ (text.length == 0) {\n            true\n        } else {\n            var i\
    \ = 0\n            var j = text.length - 1\n            while (i < j) {\n    \
    \            if (text.charAt(i) != text.charAt(j)) {\n                    return\
    \ false\n                }\n                i = i + 1\n                j = j -\
    \ 1\n            }\n            true\n        }", "        text.length == 0\n\
    \        || text.length == 1\n        || text.length == 2\n        && text.charAt(0)\
    \ == text.charAt(1)\n        || text.length > 2\n        && text.charAt(0) ==\
    \ text.charAt(1)\n        && text.charAt(text.length - 1) == text.charAt(text.length\
    \ - 2)\n        && text.charAt(text.length - 2) == text.charAt(text.length - 3)\n\
    \        && text.charAt(text.length - 3) == text.charAt(text.length - 4)\n   \
    \     && text.charAt(text.length - 4) == text.charAt(text.length - 5)\n      \
    \  && text.charAt(text.length - 5) == text.charAt(text.length - 6)\n        &&\
    \ text.charAt(text.length - 6) == text.charAt(text.length - 7)\n        && text.charAt(text.length\
    \ - 7) == text.charAt(text.length - 8)\n        && text.charAt(text.length - 8)\
    \ == text.charAt(text.length - 9)\n        && text.charAt(text.length - 9) ==\
    \ text.charAt(text.length - 10)\n        && text.charAt(text.length - 10) == text.charAt(text.length\
    \ - 11)\n        && text.charAt(text.length - 11) == text.charAt(text.length -\
    \ 12)\n        && text.charAt(text.length - 12) == text.charAt(text.length - 13)\n\
    \        && text.charAt(text.length - 13) == text.charAt(text.length - 14)\n \
    \       && text.charAt(text.length - 14) == text.charAt(text.length - 15)\n  \
    \      && text.charAt(text.length - 15) == text.charAt(text.length - 16)\n   \
    \     && text.charAt(text.length - 16) == text.charAt(text.length - 17)\n    \
    \    && text.charAt(text.length - 17) == text.charAt(text.length - 18)\n     \
    \   && text", "        if (text.length == 0) {\n            true\n        } else\
    \ {\n            if (text.length == 1) {\n                text.charAt(0) == text.charAt(0)\n\
    \            } else {\n                var left = 0\n                var right\
    \ = text.length - 1\n                while (left < right) {\n                \
    \    if (text.charAt(left) != text.charAt(right)) {\n                        return\
    \ false\n                    }\n                    left += 1\n              \
    \      right -= 1\n                }\n                true\n            }\n  \
    \      }\n    }\n\n    // Returns the longest palindrome in given string\n   \
    \ // >>> getLongestPalindrome(\"\")\n    // \"\"\n    // >>> getLongestPalindrome(\"\
    a\")\n    // \"a\"\n    // >>> getLongestPalindrome(\"ab\")\n    // \"ab\"\n \
    \   // >>> getLongestPalindrome(\"aba\")\n    // \"aba\"\n    // >>> getLongestPalindrome(\"\
    abaaba\")\n    // \"abaaba\"\n    def getLongestPalindrome(text : String) : String\
    \ = {\n        if (text.length == 0) {\n            \"\"\n        } else {\n \
    \           if (text.length == 1) {\n                text.charAt(0)\n        \
    \    } else {\n                var left = 0\n                var right = text.length\
    \ - 1\n                var max = \"\"\n                while (left < right) {\n\
    \                    if (text.charAt(left) == text.charAt(right)) {\n        \
    \                max = text.substring(left, right + 1)\n                     \
    \   left += 1\n                        right -= 1\n                    } else\
    \ {\n                        left += 1\n                    }\n              \
    \  }\n                max\n            }\n        }\n    }\n\n    // Returns the\
    \ longest palindrome in given string\n    // >>> getLongestPalindrome2(\"\")\n\
    \    // \"\"\n    // >>> getLongestPalindrome2(\"a\")\n    // \"a\"\n    // >>>\
    \ getLongestPalindrome2(\"ab\")\n    // \"ab\"\n    // >>> getLongestPalindrome2(\"\
    aba\")\n    // \"aba\"\n    // >>> getLongestPalindrome2(\"abaaba\")\n    // \"\
    abaaba\"\n", "        if (text.length == 0) {\n            true\n        } else\
    \ {\n            var left = 0\n            var right = text.length - 1\n     \
    \       while (left < right) {\n                if (text[left] != text[right])\
    \ {\n                    return false\n                }\n                left\
    \ += 1\n                right -= 1\n            }\n            true\n        }\n\
    \    }\n\n    // Returns the longest palindrome substring in given string\n  \
    \  // >>> getLongestPalindrome(\"\")\n    // \"\"\n    // >>> getLongestPalindrome(\"\
    a\")\n    // \"a\"\n    // >>> getLongestPalindrome(\"abab\")\n    // \"ab\"\n\
    \    // >>> getLongestPalindrome(\"abba\")\n    // \"ba\"\n    // >>> getLongestPalindrome(\"\
    abababa\")\n    // \"aba\"\n    def getLongestPalindrome(text : String) : String\
    \ = {\n        if (text.length == 0) {\n            \"\"\n        } else {\n \
    \           var left = 0\n            var right = text.length - 1\n          \
    \  var max = \"\"\n            while (left < right) {\n                if (text[left]\
    \ == text[right]) {\n                    var len = 2\n                    while\
    \ (left + len < right) {\n                        if (text[left + len] != text[right\
    \ - len]) {\n                            break\n                        }\n  \
    \                      len += 1\n                    }\n                    if\
    \ (len > max.length) {\n                        max = text[left:right]\n     \
    \               }\n                }\n                left += 1\n            \
    \    right -= 1\n            }\n            max\n        }\n    }\n\n    // Returns\
    \ the longest palindrome substring in given string\n    // >>> getLongestPalindrome2(\"\
    \")\n    // \"\"\n    // >>> getLongestPalindrome2(\"a\")\n    // \"a\"\n    //\
    \ >>> getLongestPalindrome2(\"abab\")\n    // \"ab\"\n    // >>> getLongestPalindrome2(\"\
    abba\")\n    // \"ba\"\n    // >>> getLongestPalindrome2(\"abababa\")\n    //\
    \ \"aba\"\n    def getLongestPalindrome2(text : String) : String = {\n       \
    \ if (", "        if (text.length == 0) {\n            true\n        } else if\
    \ (text.length == 1) {\n            text == text.toLowerCase()\n        } else\
    \ {\n            var left = 0\n            var right = text.length - 1\n     \
    \       while (left < right) {\n                if (text.charAt(left) != text.charAt(right))\
    \ {\n                    return false\n                }\n                left\
    \ += 1\n                right -= 1\n            }\n            true\n        }",
  "        if (text == \"\")\n            true\n        else {\n            var i\
    \ = 0\n            var j = text.length - 1\n            while (i < j) {\n    \
    \            if (text.charAt(i) != text.charAt(j))\n                    return\
    \ false\n                i += 1\n                j -= 1\n            }\n     \
    \       return true\n        }\n    }\n\n    // Returns the longest palindrome\
    \ in given string\n    // >>> getLongestPalindrome(\"\")\n    // \"\"\n    //\
    \ >>> getLongestPalindrome(\"a\")\n    // \"a\"\n    // >>> getLongestPalindrome(\"\
    ab\")\n    // \"ab\"\n    // >>> getLongestPalindrome(\"aba\")\n    // \"aba\"\
    \n    // >>> getLongestPalindrome(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   if (text.length == 1) {\n                text.charAt(0) == text.charAt(0)\n\
    \            } else {\n                var i = 0\n                var j = text.length\
    \ - 1\n                while (i < j) {\n                    if (text.charAt(i)\
    \ != text.charAt(j)) {\n                        return false\n               \
    \     }\n                    i = i + 1\n                    j = j - 1\n      \
    \          }\n                true\n            }\n        }\n    }\n\n    //\
    \ Returns the number of palindromic strings in the given string\n    // >>> countPalindromes(\"\
    \")\n    // (0)\n    // >>> countPalindromes(\"a\")\n    // (1)\n    // >>> countPalindromes(\"\
    ab\")\n    // (2)\n    // >>> countPalindromes(\"aba\")\n    // (1)\n    // >>>\
    \ countPalindromes(\"abba\")\n    // (2)\n    // >>> countPalindromes(\"abab\"\
    )\n    // (2)\n    def countPalindromes(text : String) : Int = {\n        if (text.length\
    \ == 0) {\n            0\n        } else {\n            if (text.length == 1)\
    \ {\n                1\n            } else {\n                var i = 0\n    \
    \            var j = text.length - 1\n                var count = 0\n        \
    \        while (i < j) {\n                    if (text.charAt(i) == text.charAt(j))\
    \ {\n                        count = count + 1\n                        i = i\
    \ + 1\n                        j = j - 1\n                    } else {\n     \
    \                   i = i + 1\n                    }\n                }\n    \
    \            count\n            }\n        }\n    }\n\n    // Returns the number\
    \ of palindromic strings in the given string\n    // >>> countPalindromes(\"\"\
    )\n    // (0)\n    // >>> countPalindromes(\"a\")\n    // (1)\n    // >>> countPalindromes(\"\
    ab\")\n    // (2)\n    // >>> countPalindromes(\"aba\")\n    // (1)\n    // >>>\
    \ countPalindromes(\"abba\")", "        if (text.length == 0) {\n            true\n\
    \        } else {\n            var i = 0\n            var j = text.length - 1\n\
    \            while (i < j) {\n                if (text.charAt(i) != text.charAt(j))\
    \ {\n                    return false\n                }\n                i +=\
    \ 1\n                j -= 1\n            }\n            true\n        }", "  \
    \      if (text.length == 0) {\n            true\n        } else {\n         \
    \   var left = 0\n            var right = text.length - 1\n            while (left\
    \ < right) {\n                if (text[left] != text[right]) {\n             \
    \       return false\n                }\n                left += 1\n         \
    \       right -= 1\n            }\n            true\n        }", "        if (text.length\
    \ == 0) {\n            true\n        } else if (text.length == 1) {\n        \
    \    text == text.toLowerCase()\n        } else {\n            var left = 0\n\
    \            var right = text.length - 1\n            while (left < right) {\n\
    \                if (text.charAt(left) != text.charAt(right)) {\n            \
    \        return false\n                }\n                left += 1\n        \
    \        right -= 1\n            }\n            true\n        }\n    }\n\n   \
    \ // Returns the longest palindrome substring in given string\n    // >>> getLongestPalindrome(\"\
    \")\n    // \"\"\n    // >>> getLongestPalindrome(\"a\")\n    // \"a\"\n    //\
    \ >>> getLongestPalindrome(\"ab\")\n    // \"ab\"\n    // >>> getLongestPalindrome(\"\
    abcba\")\n    // \"abcba\"\n    // >>> getLongestPalindrome(\"abcbaa\")\n    //\
    \ \"abcba\"\n    def getLongestPalindrome(text : String) : String = {\n      \
    \  if (text.length == 0) {\n            \"\"\n        } else if (text.length ==\
    \ 1) {\n            text\n        } else {\n            var max = \"\"\n     \
    \       var left = 0\n            var right = text.length - 1\n            while\
    \ (left < right) {\n                if (text.charAt(left) == text.charAt(right))\
    \ {\n                    var temp = text.substring(left, right + 1)\n        \
    \            if (temp.length > max.length) {\n                        max = temp\n\
    \                    }\n                }\n                left += 1\n       \
    \         right -= 1\n            }\n            max\n        }\n    }\n\n   \
    \ // Returns the longest palindrome substring in given string\n    // >>> getLongestPalindrome(\"\
    \")\n    // \"\"\n    // >>> getLongestPalindrome(\"a\")\n    // \"a\"\n    //\
    \ >>> getLongestPalindrome(\"ab\")\n    // \"ab\"\n    // >>> getLongestPalindrome(\"\
    abcba\")\n    // \"abcba\"\n    // >>> getLongestPalindrome(\"abcbaa\")\n    //\
    \ \"abcba\"\n    def getLongestPalindrome", "        if (text == null) return\
    \ false\n        if (text.length() == 0) return true\n        if (text.length()\
    \ == 1) return true\n        if (text.length() == 2) return true\n        if (text.length()\
    \ % 2 == 0) return false\n        if (text.length() == 1) return true\n      \
    \  if (text.length() == 2) return true\n        if (text.length() == 3) return\
    \ true\n        if (text.length() == 4) return true\n        if (text.length()\
    \ == 5) return true\n        if (text.length() == 6) return true\n        if (text.length()\
    \ == 7) return true\n        if (text.length() == 8) return true\n        if (text.length()\
    \ == 9) return true\n        if (text.length() == 10) return true\n        if\
    \ (text.length() == 11) return true\n        if (text.length() == 12) return true\n\
    \        if (text.length() == 13) return true\n        if (text.length() == 14)\
    \ return true\n        if (text.length() == 15) return true\n        if (text.length()\
    \ == 16) return true\n        if (text.length() == 17) return true\n        if\
    \ (text.length() == 18) return true\n        if (text.length() == 19) return true\n\
    \        if (text.length() == 20) return true\n        if (text.length() == 21)\
    \ return true\n        if (text.length() == 22) return true\n        if (text.length()\
    \ == 23) return true\n        if (text.length() == 24) return true\n        if\
    \ (text.length() == 25) return true\n        if (text.length() == 26) return true\n\
    \        if (text.length() == 27) return true\n        if (text.length() == 28)\
    \ return true\n        if (text.length() == 29) return true\n        if (text.length()\
    \ == 30) return true\n        if (text.length() == 31) return true\n        if\
    \ (text.length() == 32) return true\n        if (text.length() == 33) return true\n\
    \        if (text.length() == 34) return true\n        if (text.length", "   \
    \     if (text.length == 0) {\n            true\n        } else {\n          \
    \  var first = text.charAt(0)\n            var last = text.charAt(text.length\
    \ - 1)\n            if (first == last) {\n                isPalindrome(text.substring(1,\
    \ text.length - 1))\n            } else {\n                false\n           \
    \ }\n        }\n    }\n\n    // Returns the longest palindrome in given string\n\
    \    // >>> longestPalindrome(\"abccccdd\")\n    // (abccccdd)\n    // >>> longestPalindrome(\"\
    abccccdddd\")\n    // (abccccdddd)\n    // >>> longestPalindrome(\"abccccdddddd\"\
    )\n    // (abccccdddddd)\n    def longestPalindrome(text : String) : String =\
    \ {\n        if (text.length == 0) {\n            \"\"\n        } else {\n   \
    \         var first = text.charAt(0)\n            var last = text.charAt(text.length\
    \ - 1)\n            var max = first\n            var max_len = 1\n           \
    \ var max_start = 0\n            var max_end = 1\n            for (var i = 1;\
    \ i < text.length - 1; i++) {\n                var curr = text.charAt(i)\n   \
    \             var curr_len = 1\n                if (curr == first) {\n       \
    \             curr_len = 2\n                } else if (curr == last) {\n     \
    \               curr_len = 2\n                } else {\n                    curr_len\
    \ = 1\n                }\n                if (curr_len > max_len) {\n        \
    \            max_len = curr_len\n                    max_start = i - curr_len\
    \ / 2\n                    max_end = i + curr_len / 2\n                }\n   \
    \         }\n            return text.substring(max_start, max_end)\n        }\n\
    \    }\n\n    // Returns the longest palindrome in given string\n    // >>> longestPalindrome(\"\
    abccccdd\")\n    // (abccccdd)\n    // >>> longestPalindrome(\"abccccdddd\")\n\
    \    // (abccccdddd)\n    // >>>", "        if (text.length == 0) {\n        \
    \    true\n        } else {\n            text.split(\"\").reverse().mkString().equals(text)\n\
    \        }\n    }\n\n    // Returns the number of palindromic subsequences in\
    \ given string\n    // >>> countPalindromes((\"\"))\n    // (0)\n    // >>> countPalindromes((\"\
    aba\"))\n    // (2)\n    // >>> countPalindromes((\"aaaaa\"))\n    // (4)\n  \
    \  // >>> countPalindromes((\"zbcd\"))\n    // (0)\n    def countPalindromes(text\
    \ : String) : Int = {\n        if (text.length == 0) {\n            0\n      \
    \  } else {\n            var result = 0\n            var i = 0\n            var\
    \ j = text.length - 1\n            while (i < j) {\n                if (text.charAt(i)\
    \ == text.charAt(j)) {\n                    result += 1\n                    i\
    \ += 1\n                    j -= 1\n                } else {\n               \
    \     break\n                }\n            }\n            return result\n   \
    \     }\n    }\n\n    // Returns the number of palindromic subsequences in given\
    \ string\n    // >>> countPalindromes2((\"\"))\n    // (0)\n    // >>> countPalindromes2((\"\
    aba\"))\n    // (2)\n    // >>> countPalindromes2((\"aaaaa\"))\n    // (4)\n \
    \   // >>> countPalindromes2((\"zbcd\"))\n    // (0)\n    def countPalindromes2(text\
    \ : String) : Int = {\n        if (text.length == 0) {\n            0\n      \
    \  } else {\n            var result = 0\n            var i = 0\n            var\
    \ j = text.length - 1\n            while (i < j) {\n                if (text.charAt(i)\
    \ == text.charAt(j)) {\n                    result += 1\n                    i\
    \ += 1\n                    j -= 1\n                } else {\n               \
    \     break\n                }\n            }\n            return result\n   \
    \     }\n    }\n\n    // Returns the number of palindromic subsequences in given\
    \ string\n    // >>> countPalindromes3((\"", "        if (text.length == 0) {\n\
    \            true\n        } else {\n            var firstChar = text.charAt(0)\n\
    \            var lastChar = text.charAt(text.length - 1)\n            if (firstChar\
    \ == lastChar) {\n                text.substring(1, text.length - 1).chars().allMatch(c\
    \ -> c == firstChar)\n            } else {\n                false\n          \
    \  }\n        }", "        if (text.length() == 0) {\n            true\n     \
    \   } else {\n            var firstChar = text.charAt(0)\n            var lastChar\
    \ = text.charAt(text.length() - 1)\n            if (firstChar == lastChar) {\n\
    \                text.substring(1, text.length() - 1).chars().allMatch(c -> c\
    \ == firstChar)\n            } else {\n                false\n            }\n\
    \        }", "        if (text.length == 0) {\n            true\n        } else\
    \ {\n            if (text.length == 1) {\n                text == text.toLowerCase()\n\
    \            } else {\n                var firstChar = text.charAt(0)\n      \
    \          var lastChar = text.charAt(text.length - 1)\n                if (firstChar\
    \ == lastChar) {\n                    text = text.substring(1, text.length - 1)\n\
    \                    isPalindrome(text)\n                } else {\n          \
    \          false\n                }\n            }\n        }\n    }\n\n    //\
    \ Returns the length of the longest palindrome in given string\n    // >>> getLongestPalindromeLength(\"\
    \")\n    // (0)\n    // >>> getLongestPalindromeLength(\"a\")\n    // (1)\n  \
    \  // >>> getLongestPalindromeLength(\"ab\")\n    // (2)\n    // >>> getLongestPalindromeLength(\"\
    aba\")\n    // (3)\n    // >>> getLongestPalindromeLength(\"abaaba\")\n    //\
    \ (4)\n    // >>> getLongestPalindromeLength(\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   var left = 0\n            var right = text.length - 1\n            while (left\
    \ < right) {\n                if (text.charAt(left) != text.charAt(right)) {\n\
    \                    return false\n                }\n                left +=\
    \ 1\n                right -= 1\n            }\n            true\n        }\n\
    \    }\n\n    // Returns the number of palindromic strings in the given string\n\
    \    // >>> countPalindromes((\"\"))\n    // (0)\n    // >>> countPalindromes((\"\
    a\"))\n    // (1)\n    // >>> countPalindromes((\"ab\"))\n    // (2)\n    // >>>\
    \ countPalindromes((\"aba\"))\n    // (1)\n    // >>> countPalindromes((\"abba\"\
    ))\n    // (2)\n    // >>> countPalindromes((\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text == \"\")\n            return true\n        else {\n          \
    \  var i = 0\n            var j = text.length - 1\n            while (i < j) {\n\
    \                if (text[i] != text[j])\n                    return false\n \
    \               i += 1\n                j -= 1\n            }\n            return\
    \ true\n        }", "        if (text.length == 0) {\n            true\n     \
    \   } else {\n            if (text.length == 1) {\n                text.charAt(0)\
    \ == text.charAt(0)\n            } else {\n                if (text.length % 2\
    \ == 0) {\n                    var half = text.length / 2\n                  \
    \  var firstHalf = text.substring(0, half)\n                    var secondHalf\
    \ = text.substring(half)\n                    firstHalf == secondHalf.reverse()\n\
    \                } else {\n                    var half = (text.length - 1) /\
    \ 2\n                    var firstHalf = text.substring(0, half)\n           \
    \         var secondHalf = text.substring(half)\n                    firstHalf\
    \ == secondHalf.reverse()\n                }\n            }\n        }", "   \
    \     if (text.length == 0) {\n            true\n        } else if (text.length\
    \ == 1) {\n            text == text.toLowerCase()\n        } else {\n        \
    \    var i = 0\n            var j = text.length - 1\n            while (i < j)\
    \ {\n                if (text.charAt(i) != text.charAt(j)) {\n               \
    \     return false\n                }\n                i += 1\n              \
    \  j -= 1\n            }\n            true\n        }\n    }\n\n    // Returns\
    \ the longest palindrome substring in given string\n    // >>> getLongestPalindrome(\"\
    abccccdd\")\n    // (abccccdd)\n    // >>> getLongestPalindrome(\"abccccdddd\"\
    )\n    // (abccccdd)\n    // >>> getLongestPalindrome(\"abccccdddddd\")\n    //\
    \ (abccccdddd)\n    // >>> getLongestPalindrome(\"abccccdddddddd\")\n    // (abccccdddddd)\n\
    \    def getLongestPalindrome(text : String) : String = {\n        if (text.length\
    \ == 0) {\n            \"\"\n        } else if (text.length == 1) {\n        \
    \    text\n        } else {\n            var i = 0\n            var j = text.length\
    \ - 1\n            var max = \"\"\n            while (i < j) {\n             \
    \   if (text.charAt(i) == text.charAt(j)) {\n                    var s = text.substring(i,\
    \ j + 1)\n                    if (s.length > max.length) {\n                 \
    \       max = s\n                    }\n                }\n                i +=\
    \ 1\n                j -= 1\n            }\n            max\n        }\n    }\n\
    \n    // Returns the longest palindrome substring in given string\n    // >>>\
    \ getLongestPalindrome(\"abccccdd\")\n    // (abccccdd)\n    // >>> getLongestPalindrome(\"\
    abccccdddd\")\n    // (abccccdddd)\n    // >>> getLongestPalindrome(\"abccccdddddd\"\
    )\n    // (abccccdddddd)\n    // >>> getLongestPalindrome(\"abcc", "        if\
    \ (text.length == 0) {\n            true\n        } else {\n            var i\
    \ = 0\n            var j = text.length - 1\n            while (i < j) {\n    \
    \            if (text.charAt(i) != text.charAt(j)) {\n                    return\
    \ false\n                }\n                i = i + 1\n                j = j -\
    \ 1\n            }\n            true\n        }", "        if (text.length ==\
    \ 0) {\n            true\n        } else {\n            var firstChar = text[0]\n\
    \            var lastChar = text[text.length - 1]\n            var index = text.indexOf(firstChar)\n\
    \            if (index == -1) {\n                true\n            } else {\n\
    \                var secondChar = text[index + 1]\n                if (secondChar\
    \ != lastChar) {\n                    false\n                } else {\n      \
    \              true\n                }\n            }\n        }", "        if\
    \ (text.length() < 2)\n            return true\n        else {\n            var\
    \ i = 0\n            var j = text.length() - 1\n            while (i < j) {\n\
    \                if (text.charAt(i) != text.charAt(j))\n                    return\
    \ false\n                i += 1\n                j -= 1\n            }\n     \
    \       return true\n        }\n    }\n\n    // Returns the longest palindrome\
    \ substring in given string\n    // >>> getLongestPalindrome(\"\")\n    // \"\"\
    \n    // >>> getLongestPalindrome(\"a\")\n    // \"a\"\n    // >>> getLongestPalindrome(\"\
    ab\")\n    // \"ab\"\n    // >>> getLongestPalindrome(\"abc\")\n    // \"abc\"\
    \n    // >>> getLongestPalindrome(\"abcd\")\n    // \"abc\"\n    def getLongestPalindrome(text\
    \ : String) : String = {\n        var max = \"\"\n        var i = 0\n        var\
    \ j = 0\n        while (i < text.length()) {\n            var palindrome = \"\"\
    \n            while (i < text.length() && j < text.length()) {\n             \
    \   if (text.charAt(i) == text.charAt(j))\n                    palindrome += text.charAt(i)\n\
    \                    i += 1\n                    j += 1\n                else\n\
    \                    break\n            }\n            if (palindrome.length()\
    \ > max.length())\n                max = palindrome\n            i = j\n     \
    \   }\n        return max\n    }\n\n    // Returns the longest palindrome substring\
    \ in given string\n    // >>> getLongestPalindrome2(\"\")\n    // \"\"\n    //\
    \ >>> getLongestPalindrome2(\"a\")\n    // \"a\"\n    // >>> getLongestPalindrome2(\"\
    ab\")\n    // \"ab\"\n    // >>> getLongestPalindrome2(\"abc\")\n    // \"abc\"\
    \n    // >>> getLongestPalindrome2(\"abcd\")\n    // \"abc\"\n    def getLongestPalindrome2(text\
    \ : String) : String = {\n        var max = \"\"\n        var i = 0\n        var\
    \ j = 0\n        while (i", "        if (text.length() < 2) {\n            return\
    \ true\n        } else {\n            return text.substring(0, text.length() /\
    \ 2) == text.substring(text.length() / 2, text.length())\n        }\n    }\n\n\
    \    // Returns the longest palindrome in given string\n    // >>> longestPalindrome((\"\
    \"))\n    // \"\"\n    // >>> longestPalindrome((\"a\"))\n    // \"a\"\n    //\
    \ >>> longestPalindrome((\"ab\"))\n    // \"ab\"\n    // >>> longestPalindrome((\"\
    aba\"))\n    // \"aba\"\n    // >>> longestPalindrome((\"abba\"))\n    // \"abba\"\
    \n    // >>> longestPalindrome((\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   var i = 0\n            var j = text.length - 1\n            while (i < j)\
    \ {\n                if (text.charAt(i) != text.charAt(j)) {\n               \
    \     return false\n                }\n                i = i + 1\n           \
    \     j = j - 1\n            }\n            true\n        }", "        if (text.length()\
    \ < 2) {\n            return true\n        }\n        var left = 0\n        var\
    \ right = text.length() - 1\n        while (left < right) {\n            if (text.charAt(left)\
    \ != text.charAt(right)) {\n                return false\n            }\n    \
    \        left += 1\n            right -= 1\n        }\n        return true\n \
    \   }\n\n    // Returns the longest palindrome in given string\n    // >>> longestPalindrome(\"\
    abccccdd\")\n    // (abccccdd)\n    // >>> longestPalindrome(\"a\")\n    // (a)\n\
    \    // >>> longestPalindrome(\"abccccdd\")\n    // (abccccdd)\n    def longestPalindrome(text\
    \ : String) : String = {\n        if (text.length() < 2) {\n            return\
    \ text\n        }\n        var max = \"\"\n        var maxLength = 0\n       \
    \ var left = 0\n        var right = text.length() - 1\n        while (left < right)\
    \ {\n            var mid = left + (right - left) / 2\n            if (text.charAt(left)\
    \ == text.charAt(right)) {\n                var length = 2\n                while\
    \ (left + 1 < right && text.charAt(left + 1) == text.charAt(right - 1)) {\n  \
    \                  left += 1\n                    right -= 1\n               \
    \     length += 1\n                }\n                if (length > maxLength)\
    \ {\n                    max = text.substring(left, right + 1)\n             \
    \       maxLength = length\n                }\n            }\n            if (text.charAt(left)\
    \ < text.charAt(right)) {\n                left = mid + 1\n            } else\
    \ {\n                right = mid - 1\n            }\n        }\n        return\
    \ max\n    }\n\n    // Returns the longest palindrome in given string\n    //\
    \ >>> longestPalindrome(\"abccccdd\")\n    // (abccccdd)\n    // >>> longestPalindrome(\"\
    a\")\n    // (a)\n    // >>> longestPalindrome(\"abccccdd\")\n    // (abccccdd)\n\
    \    def longestPalindrome2(text : String) : String = {\n        if", "      \
    \  if (text.length == 0) {\n            true\n        } else {\n            if\
    \ (text.length == 1) {\n                text == text.reverse()\n            }\
    \ else {\n                if (text.length % 2 == 0) {\n                    var\
    \ half = text.length / 2\n                    var left = text.substring(0, half)\n\
    \                    var right = text.substring(half, text.length)\n         \
    \           left == right.reverse()\n                } else {\n              \
    \      var half = text.length / 2\n                    var left = text.substring(0,\
    \ half)\n                    var right = text.substring(half, text.length)\n \
    \                   left == right.reverse()\n                }\n            }\n\
    \        }\n    }\n\n    // Returns the number of palindromic strings in given\
    \ string\n    // >>> countPalindromes((\"\"))\n    // (0)\n    // >>> countPalindromes((\"\
    aba\"))\n    // (1)\n    // >>> countPalindromes((\"abaaba\"))\n    // (2)\n \
    \   // >>> countPalindromes((\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   text.split(\"\").reverse().mkString(\"\").equals(text)\n        }\n    }\n\
    \n    // Returns the longest palindrome substring in given string\n    // >>>\
    \ getLongestPalindrome(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else if (text.length\
    \ == 1) {\n            text == text.toLowerCase()\n        } else {\n        \
    \    var left = 0\n            var right = text.length - 1\n            while\
    \ (left < right) {\n                if (text.charAt(left) != text.charAt(right))\
    \ {\n                    return false\n                }\n                left\
    \ += 1\n                right -= 1\n            }\n            true\n        }\n\
    \    }\n\n    // Returns the number of palindromes in given string\n    // >>>\
    \ countPalindromes((\"\"))\n    // (0)\n    // >>> countPalindromes((\"a\"))\n\
    \    // (1)\n    // >>> countPalindromes((\"ab\"))\n    // (2)\n    // >>> countPalindromes((\"\
    aba\"))\n    // (1)\n    // >>> countPalindromes((\"abba\"))\n    // (2)\n   \
    \ // >>> countPalindromes((\"abbaabba\"))\n    // (3)\n    def countPalindromes(text\
    \ : String) : Int = {\n        if (text.length == 0) {\n            0\n      \
    \  } else if (text.length == 1) {\n            1\n        } else {\n         \
    \   var count = 0\n            var left = 0\n            var right = text.length\
    \ - 1\n            while (left < right) {\n                if (text.charAt(left)\
    \ == text.charAt(right)) {\n                    count += 1\n                 \
    \   left += 1\n                    right -= 1\n                } else {\n    \
    \                right -= 1\n                }\n            }\n            count\n\
    \        }\n    }\n\n    // Returns the number of palindromes in given string\n\
    \    // >>> countPalindromes((\"\"))\n    // (0)\n    // >>> countPalindromes((\"\
    a\"))\n    // (1)\n    // >>> countPalindromes((\"ab\"))\n    // (2)\n    // >>>\
    \ countPalindromes((\"aba\"))\n    // (1)\n    // >>> countPalindromes((\"abba\"\
    ))\n    // (2)\n    // >>> countPalindromes((\"abbaabba\"))\n    // (", "    \
    \    if (text == \"\")\n            true\n        else {\n            var i =\
    \ 0\n            var j = text.length - 1\n            while (i < j) {\n      \
    \          if (text[i] != text[j])\n                    false\n              \
    \  i += 1\n                j -= 1\n            }\n            true\n        }",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   var left = 0\n            var right = text.length - 1\n            while (left\
    \ < right) {\n                if (text[left] != text[right]) {\n             \
    \       return false\n                }\n                left += 1\n         \
    \       right -= 1\n            }\n            true\n        }", "        if (text.length\
    \ == 0) {\n            true\n        } else {\n            var i = 0\n       \
    \     var j = text.length - 1\n            while (i < j) {\n                if\
    \ (text.charAt(i) != text.charAt(j)) {\n                    return false\n   \
    \             }\n                i += 1\n                j -= 1\n            }\n\
    \            true\n        }", "        if (text == \"\") {\n            true\n\
    \        } else {\n            if (text.length() == 1) {\n                true\n\
    \            } else {\n                if (text.length() % 2 == 0) {\n       \
    \             var half = text.length() / 2\n                    var left = text.substring(0,\
    \ half)\n                    var right = text.substring(half)\n              \
    \      if (left == right.reverse()) {\n                        true\n        \
    \            } else {\n                        false\n                    }\n\
    \                } else {\n                    false\n                }\n    \
    \        }\n        }", "        if (text.length == 0) {\n            true\n \
    \       } else {\n            var first = text.charAt(0)\n            var last\
    \ = text.charAt(text.length - 1)\n            if (first == last) {\n         \
    \       true\n            } else {\n                false\n            }\n   \
    \     }", "        if (text.length() == 0) {\n            true\n        } else\
    \ {\n            if (text.length() == 1) {\n                text.charAt(0) ==\
    \ text.charAt(0)\n            } else {\n                var left = 0\n       \
    \         var right = text.length() - 1\n                while (left < right)\
    \ {\n                    if (text.charAt(left) != text.charAt(right)) {\n    \
    \                    return false\n                    }\n                   \
    \ left += 1\n                    right -= 1\n                }\n             \
    \   return true\n            }\n        }", "        if (text.length == 0) {\n\
    \            true\n        } else {\n            var firstChar = text[0]\n   \
    \         var lastChar = text[text.length - 1]\n            var index = text.indexOf(firstChar)\n\
    \            if (index == -1) {\n                true\n            } else {\n\
    \                var mid = text.substring(0, index)\n                if (mid.length\
    \ == 1) {\n                    true\n                } else {\n              \
    \      var mid2 = mid.substring(1, mid.length - 1)\n                    if (mid2.equals(lastChar))\
    \ {\n                        true\n                    } else {\n            \
    \            false\n                    }\n                }\n            }\n\
    \        }\n    }\n\n    // Returns the longest palindrome substring in given\
    \ string\n    // >>> getLongestPalindrome(\"\")\n    // \"\"\n    // >>> getLongestPalindrome(\"\
    a\")\n    // \"a\"\n    // >>> getLongestPalindrome(\"ab\")\n    // \"ab\"\n \
    \   // >>> getLongestPalindrome(\"abba\")\n    // \"abba\"\n    // >>> getLongestPalindrome(\"\
    abcd\")\n    // \"ab\"\n    def getLongestPalindrome(text : String) : String =\
    \ {\n        if (text.length == 0) {\n            \"\"\n        } else {\n   \
    \         var firstChar = text[0]\n            var lastChar = text[text.length\
    \ - 1]\n            var index = text.indexOf(firstChar)\n            if (index\
    \ == -1) {\n                text\n            } else {\n                var mid\
    \ = text.substring(0, index)\n                if (mid.length == 1) {\n       \
    \             text\n                } else {\n                    var mid2 = mid.substring(1,\
    \ mid.length - 1)\n                    if (mid2.equals(lastChar)) {\n        \
    \                text\n                    } else {\n                        var\
    \ mid3 = mid2.substring(0, mid2.length / 2)\n                        var mid4\
    \ = mid2.substring(mid2.length / 2, mid2.length)\n                        if (isPalindrome(mid3)\
    \ && isPalindrome(mid4)) {\n                            text\n               \
    \         } else", "        if (text.length() < 2) {\n            return true\n\
    \        }\n        var s = text.toLowerCase()\n        var i = 0\n        var\
    \ j = s.length() - 1\n        while (i < j) {\n            if (s.charAt(i) !=\
    \ s.charAt(j)) {\n                return false\n            }\n            i +=\
    \ 1\n            j -= 1\n        }\n        return true", "        if (text.length\
    \ == 0) {\n            true\n        } else {\n            var i = 0\n       \
    \     var j = text.length - 1\n            while (i < j) {\n                if\
    \ (text.charAt(i) != text.charAt(j)) {\n                    return false\n   \
    \             }\n                i += 1\n                j -= 1\n            }\n\
    \            true\n        }\n    }\n\n    // Returns the longest palindrome in\
    \ given string\n    // >>> getLongestPalindrome((\"\"))\n    // \"\"\n    // >>>\
    \ getLongestPalindrome((\"a\"))\n    // \"a\"\n    // >>> getLongestPalindrome((\"\
    ab\"))\n    // \"ab\"\n    // >>> getLongestPalindrome((\"aba\"))\n    // \"aba\"\
    \n    // >>> getLongestPalindrome((\"abaaba\"))\n    // \"abaaba\"\n    // >>>\
    \ getLongestPalindrome((\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   var i = 0\n            var j = text.length - 1\n            while (i < j)\
    \ {\n                if (text.charAt(i) != text.charAt(j)) {\n               \
    \     return false\n                }\n                i += 1\n              \
    \  j -= 1\n            }\n            true\n        }", "        if (text == \"\
    \")\n            true\n        else {\n            var i = 0\n            var\
    \ j = text.length - 1\n            while (i < j) {\n                if (text[i]\
    \ != text[j])\n                    false\n                i += 1\n           \
    \     j -= 1\n            }\n            true\n        }", "        if (text.length\
    \ == 0) {\n            true\n        } else {\n            var i = 0\n       \
    \     var j = text.length - 1\n            while (i < j) {\n                if\
    \ (text[i] != text[j]) {\n                    return false\n                }\n\
    \                i += 1\n                j -= 1\n            }\n            true\n\
    \        }", "        if (text.length == 0) {\n            true\n        } else\
    \ {\n            var firstChar = text.charAt(0)\n            var lastChar = text.charAt(text.length\
    \ - 1)\n            if (firstChar == lastChar) {\n                var i = 1\n\
    \                while (i < text.length - 1) {\n                    var char1\
    \ = text.charAt(i)\n                    var char2 = text.charAt(text.length -\
    \ i - 1)\n                    if (char1 != char2) {\n                        false\n\
    \                    }\n                    i = i + 1\n                }\n   \
    \             true\n            } else {\n                false\n            }\n\
    \        }\n    }\n\n    // Returns the number of palindromic substrings in given\
    \ string\n    // >>> countPalindromes((\"\"))\n    // (0)\n    // >>> countPalindromes((\"\
    aba\"))\n    // (2)\n    // >>> countPalindromes((\"abaaba\"))\n    // (4)\n \
    \   // >>> countPalindromes((\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   if (text.length == 1) {\n                text.charAt(0) == text.charAt(0)\n\
    \            } else {\n                text.substring(0, text.length / 2).equals(text.substring(text.length\
    \ / 2, text.length))\n            }\n        }\n    }\n\n    // Returns the longest\
    \ palindrome in given string\n    // >>> longestPalindrome(\"abccccdd\")\n   \
    \ // (abccccdd)\n    // >>> longestPalindrome(\"a\")\n    // (a)\n    // >>> longestPalindrome(\"\
    abccccdd\")\n    // (abccccdd)\n    def longestPalindrome(text : String) : String\
    \ = {\n        if (text.length == 0) {\n            \"\"\n        } else {\n \
    \           if (text.length == 1) {\n                text.charAt(0)\n        \
    \    } else {\n                var max = \"\"\n                var max_index =\
    \ 0\n                for (var i = 0; i < text.length; i++) {\n               \
    \     var palindrome = text.substring(i, i + 1)\n                    var palindrome_index\
    \ = i\n                    var palindrome_length = 1\n                    for\
    \ (var j = i + 1; j < text.length; j++) {\n                        var palindrome2\
    \ = text.substring(i, j)\n                        if (isPalindrome(palindrome2))\
    \ {\n                            palindrome_length = palindrome_length + j - i\n\
    \                            palindrome_index = i\n                        }\n\
    \                    }\n                    if (palindrome_length > max_length)\
    \ {\n                        max = palindrome\n                        max_index\
    \ = palindrome_index\n                        max_length = palindrome_length\n\
    \                    }\n                }\n                max\n            }\n\
    \        }", "        if (text.length == 0) {\n            true\n        } else\
    \ {\n            if (text.length == 1) {\n                text.charAt(0) == text.charAt(0)\n\
    \            } else {\n                var i = 0\n                var j = text.length\
    \ - 1\n                while (i < j) {\n                    if (text.charAt(i)\
    \ != text.charAt(j)) {\n                        return false\n               \
    \     }\n                    i += 1\n                    j -= 1\n            \
    \    }\n                true\n            }\n        }\n    }\n\n    // Returns\
    \ the number of palindromic substrings in given string\n    // >>> countPalindromes((\"\
    abcd\"))\n    // (2)\n    // >>> countPalindromes((\"abcdabcd\"))\n    // (4)\n\
    \    // >>> countPalindromes((\"abcdabcdabcd\"))\n    // (8)\n    def countPalindromes(text\
    \ : String) : Int = {\n        if (text.length == 0) {\n            0\n      \
    \  } else {\n            if (text.length == 1) {\n                1\n        \
    \    } else {\n                var i = 0\n                var j = text.length\
    \ - 1\n                var count = 0\n                while (i < j) {\n      \
    \              if (text.charAt(i) == text.charAt(j)) {\n                     \
    \   count += 1\n                        i += 1\n                        j -= 1\n\
    \                    } else {\n                        j -= 1\n              \
    \      }\n                }\n                count\n            }\n        }\n\
    \    }\n\n    // Returns the number of palindromic substrings in given string\n\
    \    // >>> countPalindromes2((\"abcd\"))\n    // (2)\n    // >>> countPalindromes2((\"\
    abcdabcd\"))\n    // (4)\n    // >>> countPalindromes2((\"abcdabcdabcd\"))\n \
    \   // (8)\n    def countPalindromes2(text : String) : Int = {\n        if (text.length\
    \ == 0) {\n            0\n        } else {\n            if (text.length == 1)\
    \ {\n                1\n            } else {\n                var i = 0\n    \
    \            var j = text", "        if (text.length == 0) {\n            true\n\
    \        } else {\n            if (text.length == 1) {\n                text.charAt(0)\
    \ == text.charAt(0)\n            } else {\n                var i = 0\n       \
    \         var j = text.length - 1\n                while (i < j) {\n         \
    \           if (text.charAt(i) != text.charAt(j)) {\n                        return\
    \ false\n                    }\n                    i += 1\n                 \
    \   j -= 1\n                }\n                true\n            }\n        }\n\
    \    }\n\n    // Returns the longest palindrome in given string\n    // >>> longestPalindrome(\"\
    \")\n    // \"\"\n    // >>> longestPalindrome(\"a\")\n    // \"a\"\n    // >>>\
    \ longestPalindrome(\"ab\")\n    // \"ab\"\n    // >>> longestPalindrome(\"abba\"\
    )\n    // \"abba\"\n    // >>> longestPalindrome(\"abc\")\n    // \"abc\"\n  \
    \  def longestPalindrome(text : String) : String = {\n        if (text.length\
    \ == 0) {\n            \"\"\n        } else {\n            var i = 0\n       \
    \     var j = text.length - 1\n            var max = \"\"\n            while (i\
    \ < j) {\n                if (text.charAt(i) == text.charAt(j)) {\n          \
    \          var len = 2\n                    while (i + len < j) {\n          \
    \              if (text.charAt(i + len) != text.charAt(j - len)) {\n         \
    \                   break\n                        }\n                       \
    \ len += 1\n                    }\n                    if (len > max.length) {\n\
    \                        max = text.substring(i, j)\n                    }\n \
    \               }\n                i += 1\n                j -= 1\n          \
    \  }\n            max\n        }\n    }\n\n    // Returns the longest palindrome\
    \ in given string\n    // >>> longestPalindrome(\"\")\n    // \"\"\n    // >>>\
    \ longestPalindrome(\"a\")\n    // \"a\"\n    // >>> longestPalindrome(\"ab\"\
    )\n    // \"ab\"\n    // >>> longestPalindrome(\"abba\")\n    // \"abba\"\n  \
    \  // >>> longestPalindrome(\"abc\")\n    // \"abc\"\n    def", "        if (text.length\
    \ == 0) {\n            true\n        } else {\n            var i = 0\n       \
    \     var j = text.length - 1\n            while (i < j) {\n                if\
    \ (text.charAt(i) != text.charAt(j)) {\n                    return false\n   \
    \             }\n                i += 1\n                j -= 1\n            }\n\
    \            true\n        }", "        if (text.length == 0) {\n            true\n\
    \        } else {\n            if (text.length == 1) {\n                text ==\
    \ text.toLowerCase()\n            } else {\n                var left = 0\n   \
    \             var right = text.length - 1\n                while (left < right)\
    \ {\n                    if (text.charAt(left) != text.charAt(right)) {\n    \
    \                    return false\n                    }\n                   \
    \ left += 1\n                    right -= 1\n                }\n             \
    \   return true\n            }\n        }", "        if (text == \"\") {\n   \
    \         true\n        } else {\n            var s = text.toLowerCase()\n   \
    \         var i = 0\n            var j = s.length - 1\n            while (i <\
    \ j) {\n                if (s[i] != s[j]) {\n                    return false\n\
    \                }\n                i += 1\n                j -= 1\n         \
    \   }\n            true\n        }", "        if (text.length == 0) {\n      \
    \      true\n        } else if (text.length == 1) {\n            text == text.toLowerCase()\n\
    \        } else {\n            var left = 0\n            var right = text.length\
    \ - 1\n            while (left < right) {\n                if (text[left].toLowerCase()\
    \ != text[right].toLowerCase()) {\n                    return false\n        \
    \        }\n                left += 1\n                right -= 1\n          \
    \  }\n            return true\n        }\n    }\n\n    // Returns the longest\
    \ palindrome substring in given string\n    // >>> getLongestPalindrome(\"\")\n\
    \    // \"\"\n    // >>> getLongestPalindrome(\"a\")\n    // \"a\"\n    // >>>\
    \ getLongestPalindrome(\"ab\")\n    // \"ab\"\n    // >>> getLongestPalindrome(\"\
    aba\")\n    // \"aba\"\n    // >>> getLongestPalindrome(\"abba\")\n    // \"abba\"\
    \n    def getLongestPalindrome(text : String) : String = {\n        if (text.length\
    \ == 0) {\n            \"\"\n        } else if (text.length == 1) {\n        \
    \    text\n        } else {\n            var left = 0\n            var right =\
    \ text.length - 1\n            var max = \"\"\n            while (left < right)\
    \ {\n                var mid = left + ((right - left) / 2)\n                if\
    \ (text[left].toLowerCase() == text[right].toLowerCase()) {\n                \
    \    if (right - left + 1 > max.length) {\n                        max = text[left:right\
    \ + 1]\n                    }\n                    left = mid + 1\n          \
    \          right = mid\n                } else if (text[left].toLowerCase() <\
    \ text[right].toLowerCase()) {\n                    left = mid + 1\n         \
    \       } else {\n                    right = mid\n                }\n       \
    \     }\n            if (left == right) {\n                if (right - left +\
    \ 1 > max.length) {\n                    max = text[left:right + 1]\n        \
    \        }\n            }\n            return max\n        }\n    }\n\n    //\
    \ Returns the longest palindrome substring in given string\n    // >>> getLongestPalindrome2(\"",
  "        if (text == \"\") {\n            true\n        } else {\n            var\
    \ first = text.charAt(0)\n            var last = text.charAt(text.length - 1)\n\
    \            if (first == last) {\n                true\n            } else {\n\
    \                false\n            }\n        }", "        if (text.length ==\
    \ 0) {\n            true\n        } else {\n            var firstChar = text[0]\n\
    \            var lastChar = text[text.length - 1]\n            var isPalindrome\
    \ = firstChar == lastChar\n            for (i <- 1 to (text.length - 1)) {\n \
    \               var currentChar = text[i]\n                isPalindrome = isPalindrome\
    \ && currentChar == lastChar\n                lastChar = currentChar\n       \
    \     }\n            isPalindrome\n        }\n    }\n\n    // Returns the longest\
    \ palindromic substring in given string\n    // >>> getLongestPalindrome(\"\"\
    )\n    // \"\"\n    // >>> getLongestPalindrome(\"a\")\n    // \"a\"\n    // >>>\
    \ getLongestPalindrome(\"ab\")\n    // \"ab\"\n    // >>> getLongestPalindrome(\"\
    aba\")\n    // \"aba\"\n    // >>> getLongestPalindrome(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else if (text.length\
    \ == 1) {\n            text == text.toLowerCase()\n        } else {\n        \
    \    text.toLowerCase().equals(text.reverse().toLowerCase())\n        }\n    }\n\
    \n    // Returns the longest palindrome in given string\n    // >>> longestPalindrome((\"\
    \"))\n    // \"\"\n    // >>> longestPalindrome((\"a\"))\n    // \"a\"\n    //\
    \ >>> longestPalindrome((\"ab\"))\n    // \"ab\"\n    // >>> longestPalindrome((\"\
    abba\"))\n    // \"abba\"\n    // >>> longestPalindrome((\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length() == 0) {\n            true\n        } else {\n       \
    \     var firstChar = text.charAt(0)\n            var lastChar = text.charAt(text.length()\
    \ - 1)\n            if (firstChar == lastChar) {\n                var i = 1\n\
    \                while (i < text.length() - 1) {\n                    var char1\
    \ = text.charAt(i)\n                    var char2 = text.charAt(text.length()\
    \ - i - 1)\n                    if (char1 != char2) {\n                      \
    \  return false\n                    }\n                    i += 1\n         \
    \       }\n                return true\n            } else {\n               \
    \ return false\n            }\n        }\n    }\n\n    // Returns the number of\
    \ palindromic strings in the given string\n    // >>> countPalindromes(\"\")\n\
    \    // (0)\n    // >>> countPalindromes(\"a\")\n    // (1)\n    // >>> countPalindromes(\"\
    ab\")\n    // (2)\n    // >>> countPalindromes(\"aba\")\n    // (1)\n    // >>>\
    \ countPalindromes(\"abba\")\n    // (1)\n    // >>> countPalindromes(\"ababab\"\
    )\n    // (2)\n    def countPalindromes(text : String) : Int = {\n        var\
    \ count = 0\n        var i = 0\n        while (i < text.length()) {\n        \
    \    var j = i\n            while (j < text.length() && isPalindrome(text.substring(i,\
    \ j + 1))) {\n                j += 1\n            }\n            i = j\n     \
    \       count += 1\n        }\n        return count\n    }\n\n    // Returns the\
    \ number of palindromic strings in the given string\n    // >>> countPalindromes(\"\
    \")\n    // (0)\n    // >>> countPalindromes(\"a\")\n    // (1)\n    // >>> countPalindromes(\"\
    ab\")\n    // (2)\n    // >>> countPalindromes(\"aba\")\n    // (1)\n    // >>>\
    \ countPalindromes(\"abba\")\n    // (1)\n    // >>> countPalindromes(\"ababab\"\
    )\n    // (", "        if (text == \"\")\n            true\n        else {\n \
    \           var firstHalf = text.substring(0, text.length / 2)\n            var\
    \ secondHalf = text.substring(text.length / 2)\n            if (firstHalf == secondHalf)\n\
    \                true\n            else\n                false\n        }", " \
    \       if (text == \"\") {\n            true\n        } else {\n            if\
    \ (text.length() == 1) {\n                true\n            } else {\n       \
    \         if (text.length() % 2 == 0) {\n                    var half = text.length()\
    \ / 2\n                    var left = text.substring(0, half)\n              \
    \      var right = text.substring(half, text.length())\n                    if\
    \ (left.equals(right)) {\n                        true\n                    }\
    \ else {\n                        false\n                    }\n             \
    \   } else {\n                    false\n                }\n            }\n  \
    \      }", "        if (text.length == 0) {\n            true\n        } else\
    \ {\n            text.reverse() == text\n        }\n    }\n\n    // Returns the\
    \ longest palindrome substring in given string\n    // >>> longestPalindrome((\"\
    \"))\n    // \"\"\n    // >>> longestPalindrome((\"a\"))\n    // \"a\"\n    //\
    \ >>> longestPalindrome((\"ab\"))\n    // \"ab\"\n    // >>> longestPalindrome((\"\
    aba\"))\n    // \"aba\"\n    // >>> longestPalindrome((\"abaab\"))\n    // \"\
    aba\"\n    def longestPalindrome(text : String) : String = {\n        if (text.length\
    \ == 0) {\n            \"\"\n        } else {\n            var max = 0\n     \
    \       var max_index = 0\n            var max_length = 0\n            var i =\
    \ 0\n            var j = 0\n            while (i < text.length) {\n          \
    \      var length = 1\n                while (i + length < text.length && text.charAt(i\
    \ + length) == text.charAt(i)) {\n                    length += 1\n          \
    \      }\n                if (length > max_length) {\n                    max_index\
    \ = i\n                    max_length = length\n                }\n          \
    \      i += 1\n            }\n            if (max_length > 0) {\n            \
    \    return text.substring(max_index, max_index + max_length)\n            } else\
    \ {\n                return \"\"\n            }\n        }\n    }\n\n    // Returns\
    \ the longest palindrome substring in given string\n    // >>> longestPalindrome2((\"\
    \"))\n    // \"\"\n    // >>> longestPalindrome2((\"a\"))\n    // \"a\"\n    //\
    \ >>> longestPalindrome2((\"ab\"))\n    // \"ab\"\n    // >>> longestPalindrome2((\"\
    aba\"))\n    // \"aba\"\n    // >>> longestPalindrome2((\"abaab\"))\n    // \"\
    aba\"\n    def longestPalindrome2(text : String) : String = {\n        if (text.length\
    \ == 0) {\n            \"\"\n        } else {\n            var max = 0\n     \
    \       var max_index = 0\n            var max_length = 0\n            var i",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   if (text.length == 1) {\n                text.charAt(0) == text.charAt(0)\n\
    \            } else {\n                var left = 0\n                var right\
    \ = text.length - 1\n                while (left < right) {\n                \
    \    if (text.charAt(left) != text.charAt(right)) {\n                        return\
    \ false\n                    }\n                    left += 1\n              \
    \      right -= 1\n                }\n                true\n            }\n  \
    \      }\n    }\n\n    // Returns the number of palindromes in given string\n\
    \    // >>> countPalindromes(\"\")\n    // (0)\n    // >>> countPalindromes(\"\
    a\")\n    // (1)\n    // >>> countPalindromes(\"ab\")\n    // (2)\n    // >>>\
    \ countPalindromes(\"aba\")\n    // (1)\n    // >>> countPalindromes(\"abba\"\
    )\n    // (2)\n    // >>> countPalindromes(\"ababab\")\n    // (3)\n    def countPalindromes(text\
    \ : String) : Int = {\n        if (text.length == 0) {\n            0\n      \
    \  } else {\n            if (text.length == 1) {\n                1\n        \
    \    } else {\n                var left = 0\n                var right = text.length\
    \ - 1\n                var count = 0\n                while (left < right) {\n\
    \                    if (text.charAt(left) == text.charAt(right)) {\n        \
    \                count += 1\n                        left += 1\n             \
    \           right -= 1\n                    } else {\n                       \
    \ break\n                    }\n                }\n                count\n   \
    \         }\n        }\n    }\n\n    // Returns the number of palindromes in given\
    \ string\n    // >>> countPalindromes(\"\")\n    // (0)\n    // >>> countPalindromes(\"\
    a\")\n    // (1)\n    // >>> countPalindromes(\"ab\")\n    // (2)\n    // >>>\
    \ countPalindromes(\"aba\")\n    // (1)\n    // >>> countPalindromes(\"abba\"\
    )\n    // (2)\n    // >>> countPalindromes(\"ab", "        if (text.length() ==\
    \ 0) {\n            true\n        } else {\n            var i = 0\n          \
    \  var j = text.length() - 1\n            while (i < j) {\n                if\
    \ (text.charAt(i) != text.charAt(j)) {\n                    return false\n   \
    \             }\n                i += 1\n                j -= 1\n            }\n\
    \            true\n        }\n    }\n\n    // Returns the longest palindrome in\
    \ given string\n    // >>> longestPalindrome((\"\"))\n    // \"\"\n    // >>>\
    \ longestPalindrome((\"a\"))\n    // \"a\"\n    // >>> longestPalindrome((\"ab\"\
    ))\n    // \"ab\"\n    // >>> longestPalindrome((\"abba\"))\n    // \"abba\"\n\
    \    // >>> longestPalindrome((\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   if (text.length == 1) {\n                text == text.reverse()\n        \
    \    } else {\n                var i = 0\n                var j = text.length\
    \ - 1\n                while (i < j) {\n                    if (text[i] != text[j])\
    \ {\n                        return false\n                    }\n           \
    \         i += 1\n                    j -= 1\n                }\n            }\n\
    \            true\n        }", "        if (text == \"\")\n            true\n\
    \        else if (text.length() == 1)\n            true\n        else {\n    \
    \        var i = 0\n            var j = text.length() - 1\n            while (i\
    \ < j) {\n                if (text.charAt(i) != text.charAt(j))\n            \
    \        return false\n                i += 1\n                j -= 1\n      \
    \      }\n            return true\n        }", "        if (text.length == 0)\
    \ {\n            true\n        } else {\n            var left = 0\n          \
    \  var right = text.length - 1\n            while (left < right) {\n         \
    \       if (text.charAt(left) != text.charAt(right)) {\n                    return\
    \ false\n                }\n                left += 1\n                right -=\
    \ 1\n            }\n            true\n        }\n    }\n\n    // Returns the number\
    \ of palindromic subsequences in given string\n    // >>> countPalindromicSubsequences((\"\
    \"))\n    // (0)\n    // >>> countPalindromicSubsequences((\"a\"))\n    // (1)\n\
    \    // >>> countPalindromicSubsequences((\"aa\"))\n    // (2)\n    // >>> countPalindromicSubsequences((\"\
    aaa\"))\n    // (3)\n    // >>> countPalindromicSubsequences((\"abcd\"))\n   \
    \ // (4)\n    def countPalindromicSubsequences(text : String) : Int = {\n    \
    \    var result = 0\n        var left = 0\n        var right = text.length - 1\n\
    \        while (left < right) {\n            if (text.charAt(left) == text.charAt(right))\
    \ {\n                result += 1\n                left += 1\n                right\
    \ -= 1\n            } else {\n                left += 1\n            }\n     \
    \   }\n        result\n    }\n\n    // Returns the number of palindromic subsequences\
    \ in given string\n    // >>> countPalindromicSubstrings((\"\"))\n    // (0)\n\
    \    // >>> countPalindromicSubstrings((\"a\"))\n    // (1)\n    // >>> countPalindromicSubstrings((\"\
    aa\"))\n    // (2)\n    // >>> countPalindromicSubstrings((\"aaa\"))\n    // (3)\n\
    \    // >>> countPalindromicSubstrings((\"abcd\"))\n    // (4)\n    def countPalindromicSubstrings(text\
    \ : String) : Int = {\n        var result = 0\n        var left = 0\n        var\
    \ right = text.length - 1\n        while (left < right) {\n            if (text.substring(left,\
    \ right).equals", "        if (text.length == 0) {\n            true\n       \
    \ } else {\n            text.split(\"\").reverse().toString.equals(text)\n   \
    \     }\n    }\n\n    // Returns the longest palindrome substring in given string\n\
    \    // >>> getLongestPalindrome(\"\")\n    // \"\"\n    // >>> getLongestPalindrome(\"\
    a\")\n    // \"a\"\n    // >>> getLongestPalindrome(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length() == 0) {\n            true\n        } else {\n       \
    \     var i = 0\n            var j = text.length() - 1\n            while (i <\
    \ j) {\n                if (text.charAt(i) != text.charAt(j)) {\n            \
    \        return false\n                }\n                i += 1\n           \
    \     j -= 1\n            }\n            true\n        }\n    }\n\n    // Returns\
    \ the longest palindrome in given string\n    // >>> longestPalindrome((\"\"))\n\
    \    // \"\"\n    // >>> longestPalindrome((\"a\"))\n    // \"a\"\n    // >>>\
    \ longestPalindrome((\"ab\"))\n    // \"ab\"\n    // >>> longestPalindrome((\"\
    aba\"))\n    // \"aba\"\n    // >>> longestPalindrome((\"aaaaa\"))\n    // \"\
    aaaa\"\n    // >>> longestPalindrome((\"abcd\"))\n    // \"abcd\"\n    def longestPalindrome(text\
    \ : String) : String = {\n        var i = 0\n        var j = text.length() - 1\n\
    \        var max = \"\"\n        while (i < j) {\n            if (text.charAt(i)\
    \ == text.charAt(j)) {\n                var len = 2\n                while (i\
    \ + len < j && text.charAt(i + len) == text.charAt(i)) {\n                   \
    \ len += 1\n                }\n                if (len > max.length()) {\n   \
    \                 max = text.substring(i, i + len)\n                }\n      \
    \          i += 1\n                j -= 1\n            } else {\n            \
    \    i += 1\n            }\n        }\n        return max\n    }\n\n    // Returns\
    \ the longest palindrome in given string\n    // >>> longestPalindrome((\"\"))\n\
    \    // \"\"\n    // >>> longestPalindrome((\"a\"))\n    // \"a\"\n    // >>>\
    \ longestPalindrome((\"ab\"))\n    // \"ab\"\n    // >>> longestPalindrome((\"\
    aba\"))\n    // \"aba\"\n    // >>> longestPalindrome((\"aaaaa\"))\n    // \"\
    aaaa\"\n    // >>> longestPalindrome((\"abcd\"))\n    // \"abcd\"\n    def longestPalind",
  "        if (text.length() < 2) {\n            return true\n        }\n        var\
    \ left = 0\n        var right = text.length() - 1\n        while (left < right)\
    \ {\n            if (text.charAt(left) != text.charAt(right)) {\n            \
    \    return false\n            }\n            left += 1\n            right -=\
    \ 1\n        }\n        return true\n    }\n\n    // Returns the longest palindrome\
    \ in given string\n    // >>> longestPalindrome((\"\"))\n    // \"\"\n    // >>>\
    \ longestPalindrome((\"a\"))\n    // \"a\"\n    // >>> longestPalindrome((\"ab\"\
    ))\n    // \"ab\"\n    // >>> longestPalindrome((\"aba\"))\n    // \"aba\"\n \
    \   // >>> longestPalindrome((\"abaab\"))\n    // \"abaab\"\n    // >>> longestPalindrome((\"\
    abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   if (text.length == 1) {\n                text.charAt(0) == text.charAt(0)\n\
    \            } else {\n                var left = 0\n                var right\
    \ = text.length - 1\n                while (left < right) {\n                \
    \    if (text.charAt(left) != text.charAt(right)) {\n                        return\
    \ false\n                    }\n                    left += 1\n              \
    \      right -= 1\n                }\n                return true\n          \
    \  }\n        }\n    }\n\n    // Returns the longest palindrome in given string\n\
    \    // >>> longestPalindrome((\"\"))\n    // \"\"\n    // >>> longestPalindrome((\"\
    a\"))\n    // \"a\"\n    // >>> longestPalindrome((\"ab\"))\n    // \"ab\"\n \
    \   // >>> longestPalindrome((\"aba\"))\n    // \"aba\"\n    // >>> longestPalindrome((\"\
    abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   if (text.length == 1) {\n                text.charAt(0) == text.charAt(0)\n\
    \            } else {\n                var left = 0\n                var right\
    \ = text.length - 1\n                while (left < right) {\n                \
    \    if (text.charAt(left) != text.charAt(right)) {\n                        return\
    \ false\n                    }\n                    left += 1\n              \
    \      right -= 1\n                }\n                return true\n          \
    \  }\n        }\n    }\n\n    // Returns the longest palindrome substring in given\
    \ string\n    // >>> getLongestPalindrome(\"abccccdd\")\n    // (abccccdd)\n \
    \   // >>> getLongestPalindrome(\"abccccdddd\")\n    // (abccccdd)\n    // >>>\
    \ getLongestPalindrome(\"abccccdddddd\")\n    // (abccccdddd)\n    // >>> getLongestPalindrome(\"\
    abccccdddddddd\")\n    // (abccccdddddd)\n    def getLongestPalindrome(text :\
    \ String) : String = {\n        var result = \"\"\n        var max = 0\n     \
    \   var start = 0\n        var end = 0\n        for (var i = 0; i < text.length;\
    \ i++) {\n            var palindrome = isPalindrome(text.substring(i))\n     \
    \       if (palindrome) {\n                if (i - start + 1 > max) {\n      \
    \              max = i - start + 1\n                    start = i\n          \
    \          end = i\n                }\n            }\n        }\n        if (max\
    \ == 0) {\n            return \"\"\n        } else {\n            return text.substring(start,\
    \ end + 1)\n        }\n    }\n\n    // Returns the longest palindrome substring\
    \ in given string\n    // >>> getLongestPalindrome2(\"abccccdd\")\n    // (abccccdd)\n\
    \    // >>> getLongestPalindrome2(\"abccccdddd\")\n    // (abccccdddd)\n    //\
    \ >>> getLongestPalindrome2(\"abccccdddddd\")\n    // (abcc", "        if (text.length\
    \ == 0) {\n            true\n        } else {\n            var firstChar = text.charAt(0)\n\
    \            var lastChar = text.charAt(text.length - 1)\n            if (firstChar\
    \ == lastChar) {\n                true\n            } else {\n               \
    \ false\n            }\n        }", "        if (text.length == 0) {\n       \
    \     true\n        } else {\n            if (text.length == 1) {\n          \
    \      text.charAt(0) == text.charAt(0)\n            } else {\n              \
    \  var left = 0\n                var right = text.length - 1\n               \
    \ while (left < right) {\n                    if (text.charAt(left) != text.charAt(right))\
    \ {\n                        return false\n                    }\n           \
    \         left += 1\n                    right -= 1\n                }\n     \
    \           true\n            }\n        }\n    }\n\n    // Returns the longest\
    \ palindrome in given string\n    // >>> longestPalindrome((\"\"))\n    // \"\"\
    \n    // >>> longestPalindrome((\"a\"))\n    // \"a\"\n    // >>> longestPalindrome((\"\
    ab\"))\n    // \"ab\"\n    // >>> longestPalindrome((\"aba\"))\n    // \"aba\"\
    \n    // >>> longestPalindrome((\"abaab\"))\n    // \"abaab\"\n    def longestPalindrome(text\
    \ : String) : String = {\n        if (text.length == 0) {\n            \"\"\n\
    \        } else {\n            if (text.length == 1) {\n                text.charAt(0)\n\
    \            } else {\n                var left = 0\n                var right\
    \ = text.length - 1\n                var max = \"\"\n                while (left\
    \ < right) {\n                    var mid = left + (right - left) / 2\n      \
    \              if (text.charAt(mid) == text.charAt(mid)) {\n                 \
    \       if (mid - left > 1) {\n                            max = text.substring(left,\
    \ mid)\n                        }\n                        left = mid + 1\n  \
    \                  } else {\n                        right = mid\n           \
    \         }\n                }\n                if (left == right) {\n       \
    \             max = text.substring(left, right)\n                }\n         \
    \       max\n            }\n        }\n    }\n\n    // Returns the longest palindrome\
    \ in given string\n    // >>> longestPalindrome2((\"\"))\n    // \"\"\n    //\
    \ >>> longestPalindrome2((\"a\"))\n    // \"a\"\n    // >>> longestPalindrome2((\"\
    ab\"))\n    // \"ab\"\n    // >>> longest", "        if (text.length() == 0) {\n\
    \            true\n        } else {\n            var i = 0\n            var j\
    \ = text.length() - 1\n            while (i < j) {\n                if (text.charAt(i)\
    \ != text.charAt(j)) {\n                    return false\n                }\n\
    \                i += 1\n                j -= 1\n            }\n            true\n\
    \        }", "        if (text.length == 0) {\n            true\n        } else\
    \ {\n            var firstChar = text.charAt(0)\n            var lastChar = text.charAt(text.length\
    \ - 1)\n            if (firstChar == lastChar) {\n                true\n     \
    \       } else {\n                false\n            }\n        }\n    }\n\n \
    \   // Checks if given string is a palindrome ignoring case\n    // >>> isPalindromeIgnoreCase((\"\
    \"))\n    // (true)\n    // >>> isPalindromeIgnoreCase((\"aba\"))\n    // (true)\n\
    \    // >>> isPalindromeIgnoreCase((\"aaaaa\"))\n    // (true)\n    // >>> isPalindromeIgnoreCase((\"\
    zbcd\"))\n    // (false)\n    def isPalindromeIgnoreCase(text : String) : Boolean\
    \ = {\n        if (text.length == 0) {\n            true\n        } else {\n \
    \           var firstChar = text.charAt(0).toLowerCase()\n            var lastChar\
    \ = text.charAt(text.length - 1).toLowerCase()\n            if (firstChar == lastChar)\
    \ {\n                true\n            } else {\n                false\n     \
    \       }\n        }\n    }\n\n    // Returns the longest palindrome in given\
    \ string\n    // >>> longestPalindrome((\"\"))\n    // \"\"\n    // >>> longestPalindrome((\"\
    a\"))\n    // \"a\"\n    // >>> longestPalindrome((\"ab\"))\n    // \"ab\"\n \
    \   // >>> longestPalindrome((\"abba\"))\n    // \"abba\"\n    // >>> longestPalindrome((\"\
    abbaabba\"))\n    // \"abbaabba\"\n    def longestPalindrome(text : String) :\
    \ String = {\n        if (text.length == 0) {\n            \"\"\n        } else\
    \ {\n            var maxLength = 0\n            var maxPalindrome = \"\"\n   \
    \         for (var i = 0; i < text.length; i++) {\n                var palindrome\
    \ = text.substring(i, text.length - i)\n                if (isPalindrome(palindrome)\
    \ && palindrome.length > maxLength) {\n                    maxLength = palindrome.length\n\
    \                    max", "        if (text.length == 0) {\n            true\n\
    \        } else {\n            var left = 0\n            var right = text.length\
    \ - 1\n            while (left < right) {\n                if (text.charAt(left)\
    \ != text.charAt(right)) {\n                    return false\n               \
    \ }\n                left += 1\n                right -= 1\n            }\n  \
    \          return true\n        }\n    }\n\n    // Returns the longest palindrome\
    \ in given string\n    // >>> longestPalindrome((\"\"))\n    // \"\"\n    // >>>\
    \ longestPalindrome((\"a\"))\n    // \"a\"\n    // >>> longestPalindrome((\"aa\"\
    ))\n    // \"aa\"\n    // >>> longestPalindrome((\"aaa\"))\n    // \"aaa\"\n \
    \   // >>> longestPalindrome((\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length() == 0) {\n            true\n        } else {\n       \
    \     var left = 0\n            var right = text.length() - 1\n            while\
    \ (left < right) {\n                if (text.charAt(left) != text.charAt(right))\
    \ {\n                    return false\n                }\n                left\
    \ += 1\n                right -= 1\n            }\n            true\n        }\n\
    \    }\n\n    // Returns the longest palindrome substring in given string\n  \
    \  // >>> longestPalindrome((\"\"))\n    // \"\"\n    // >>> longestPalindrome((\"\
    a\"))\n    // \"a\"\n    // >>> longestPalindrome((\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   if (text.length == 1) {\n                text == text.reverse()\n        \
    \    } else {\n                if (text.length % 2 == 0) {\n                 \
    \   var half = text.length / 2\n                    var left = text.substring(0,\
    \ half)\n                    var right = text.substring(half)\n              \
    \      left == right.reverse()\n                } else {\n                   \
    \ var half = text.length / 2\n                    var left = text.substring(0,\
    \ half)\n                    var right = text.substring(half)\n              \
    \      left == right.reverse()\n                }\n            }\n        }",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   var i = 0\n            var j = text.length - 1\n            while (i < j)\
    \ {\n                if (text.charAt(i) != text.charAt(j)) {\n               \
    \     return false\n                }\n                i += 1\n              \
    \  j -= 1\n            }\n            true\n        }\n    }\n\n    // Returns\
    \ the number of palindromes in the given string\n    // >>> countPalindromes(\"\
    \")\n    // (0)\n    // >>> countPalindromes(\"a\")\n    // (1)\n    // >>> countPalindromes(\"\
    ab\")\n    // (2)\n    // >>> countPalindromes(\"aba\")\n    // (2)\n    // >>>\
    \ countPalindromes(\"aaaaa\")\n    // (4)\n    // >>> countPalindromes(\"zbcd\"\
    )\n    // (0)\n    def countPalindromes(text : String) : Int = {\n        if (text.length\
    \ == 0) {\n            0\n        } else {\n            var count = 0\n      \
    \      var i = 0\n            var j = text.length - 1\n            while (i <\
    \ j) {\n                if (text.charAt(i) == text.charAt(j)) {\n            \
    \        count += 1\n                }\n                i += 1\n             \
    \   j -= 1\n            }\n            count\n        }\n    }\n\n    // Returns\
    \ the number of palindromes in the given string\n    // >>> countPalindromes(\"\
    \")\n    // (0)\n    // >>> countPalindromes(\"a\")\n    // (1)\n    // >>> countPalindromes(\"\
    ab\")\n    // (2)\n    // >>> countPalindromes(\"aba\")\n    // (2)\n    // >>>\
    \ countPalindromes(\"aaaaa\")\n    // (4)\n    // >>> countPalindromes(\"zbcd\"\
    )\n    // (0)\n    def countPalindromes2(text : String) : Int = {\n        if\
    \ (text.length == 0) {\n            0\n        } else {\n            var count\
    \ = 0\n            var i = 0\n            var j = text", "        if (text.length\
    \ == 0) {\n            true\n        } else if (text.length == 1) {\n        \
    \    text == text.toLowerCase()\n        } else {\n            var s = text.toLowerCase()\n\
    \            var i = 0\n            var j = s.length - 1\n            while (i\
    \ < j) {\n                if (s[i] != s[j]) {\n                    return false\n\
    \                }\n                i += 1\n                j -= 1\n         \
    \   }\n            true\n        }", "        if (text.length == 0) {\n      \
    \      true\n        } else if (text.length == 1) {\n            text == text.toLowerCase()\n\
    \        } else {\n            var left = 0\n            var right = text.length\
    \ - 1\n            while (left < right) {\n                if (text.charAt(left)\
    \ != text.charAt(right)) {\n                    return false\n               \
    \ }\n                left += 1\n                right -= 1\n            }\n  \
    \          true\n        }\n    }\n\n    // Returns the longest palindrome in\
    \ given string\n    // >>> longestPalindrome((\"\"))\n    // \"\"\n    // >>>\
    \ longestPalindrome((\"a\"))\n    // \"a\"\n    // >>> longestPalindrome((\"ab\"\
    ))\n    // \"ab\"\n    // >>> longestPalindrome((\"abba\"))\n    // \"abba\"\n\
    \    // >>> longestPalindrome((\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length() == 0) {\n            true\n        } else {\n       \
    \     var firstChar = text.charAt(0)\n            var lastChar = text.charAt(text.length()\
    \ - 1)\n            if (firstChar == lastChar) {\n                text.substring(1,\
    \ text.length() - 1).chars().allMatch(c -> c == firstChar)\n            } else\
    \ {\n                false\n            }\n        }\n    }\n\n    // Returns\
    \ the longest palindrome substring in given string\n    // >>> getLongestPalindrome(\"\
    \")\n    // \"\"\n    // >>> getLongestPalindrome(\"a\")\n    // \"a\"\n    //\
    \ >>> getLongestPalindrome(\"ab\")\n    // \"ab\"\n    // >>> getLongestPalindrome(\"\
    aba\")\n    // \"aba\"\n    // >>> getLongestPalindrome(\"abaaba\")\n    // \"\
    aba\"\n    def getLongestPalindrome(text : String) : String = {\n        if (text.length()\
    \ == 0) {\n            \"\"\n        } else {\n            var maxLength = 0\n\
    \            var maxPalindrome = \"\"\n            var i = 0\n            var\
    \ j = 0\n            while (i < text.length()) {\n                var palindrome\
    \ = \"\"\n                while (i < text.length() && j < text.length()) {\n \
    \                   if (text.charAt(i) == text.charAt(j)) {\n                \
    \        palindrome += text.charAt(i)\n                        i += 1\n      \
    \                  j += 1\n                    } else {\n                    \
    \    break\n                    }\n                }\n                if (palindrome.length()\
    \ > maxLength) {\n                    maxLength = palindrome.length()\n      \
    \              maxPalindrome = palindrome\n                }\n               \
    \ i += 1\n                j += 1\n            }\n            return maxPalindrome\n\
    \        }\n    }\n\n    // Returns the longest palindrome substring in given\
    \ string\n    // >>> getLongestPalindrome2(\"\")\n    // \"\"\n    // >>> getLongestPalindrome2(\"\
    a\")\n    // \"a\"\n    // >>> getLongestPalindrome2(\"ab\")\n    // \"ab\"\n\
    \    ", "        if (text.length() == 0) {\n            return true\n        }\
    \ else {\n            return (text.charAt(0) == text.charAt(text.length() - 1))\
    \ && isPalindrome(text.substring(1, text.length() - 1))\n        }\n    }\n\n\
    \    // Returns the longest palindrome in given string\n    // >>> getLongestPalindrome(\"\
    abccccdd\")\n    // (abccccdd)\n    // >>> getLongestPalindrome(\"abccccdddd\"\
    )\n    // (abccccdddd)\n    // >>> getLongestPalindrome(\"abccccdddddd\")\n  \
    \  // (abccccdddddd)\n    // >>> getLongestPalindrome(\"abccccdddddddd\")\n  \
    \  // (abccccdddddddd)\n    def getLongestPalindrome(text : String) : String =\
    \ {\n        if (text.length() == 0) {\n            return \"\"\n        } else\
    \ {\n            var max = \"\"\n            var start = 0\n            var end\
    \ = 0\n            for (i <- 0 until text.length - 1) {\n                var j\
    \ = i\n                while (j < text.length && text.charAt(j) == text.charAt(i))\
    \ {\n                    j += 1\n                }\n                if (j - i\
    \ > max.length) {\n                    max = text.substring(i, j)\n          \
    \          start = i\n                    end = j\n                }\n       \
    \         i = j\n            }\n            return max\n        }\n    }\n\n \
    \   // Returns the longest palindrome in given string\n    // >>> getLongestPalindrome2(\"\
    abccccdd\")\n    // (abccccdd)\n    // >>> getLongestPalindrome2(\"abccccdddd\"\
    )\n    // (abccccdddd)\n    // >>> getLongestPalindrome2(\"abccccdddddd\")\n \
    \   // (abccccdddddd)\n    // >>> getLongestPalindrome2(\"abccccdddddddd\")\n\
    \    // (abccccdddddddd)\n    def getLongestPalindrome2(text : String) : String\
    \ = {\n        ", "        if (text.length() == 0) {\n            return true\n\
    \        }\n        var left = 0\n        var right = text.length() - 1\n    \
    \    while (left < right) {\n            if (text.charAt(left) != text.charAt(right))\
    \ {\n                return false\n            }\n            left += 1\n    \
    \        right -= 1\n        }\n        return true\n    }\n\n    // Returns the\
    \ number of palindromic substrings in given string\n    // >>> countPalindromes((\"\
    \"))\n    // (0)\n    // >>> countPalindromes((\"aba\"))\n    // (1)\n    // >>>\
    \ countPalindromes((\"abaaba\"))\n    // (2)\n    // >>> countPalindromes((\"\
    ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length() < 2) {\n            return true\n        }\n        val\
    \ textLength = text.length()\n        val half = textLength / 2\n        val halfIndex\
    \ = (textLength - 1) - half\n        val halfText = text.substring(halfIndex)\n\
    \        val halfTextLength = halfText.length()\n        val halfTextIndex = (halfTextLength\
    \ - 1) - halfTextLength / 2\n        val halfTextChar = halfText.charAt(halfTextIndex)\n\
    \        val halfTextCharIndex = halfText.indexOf(halfTextChar)\n        val halfTextCharIndex2\
    \ = halfText.lastIndexOf(halfTextChar)\n        if (halfTextCharIndex != halfTextCharIndex2)\
    \ {\n            return false\n        }\n        val halfTextCharIndex3 = halfText.indexOf(halfTextChar,\
    \ halfTextCharIndex + 1)\n        if (halfTextCharIndex3 != -1) {\n          \
    \  return false\n        }\n        return true", "        if (text.length ==\
    \ 0) {\n            true\n        } else if (text.length == 1) {\n           \
    \ text == text.toLowerCase()\n        } else {\n            var first = text.substring(0,\
    \ text.length / 2)\n            var second = text.substring(text.length / 2, text.length)\n\
    \            first == second.toLowerCase()\n        }\n    }\n\n    // Returns\
    \ the longest palindrome in given string\n    // >>> longestPalindrome((\"\"))\n\
    \    // \"\"\n    // >>> longestPalindrome((\"a\"))\n    // \"a\"\n    // >>>\
    \ longestPalindrome((\"ab\"))\n    // \"ab\"\n    // >>> longestPalindrome((\"\
    aba\"))\n    // \"aba\"\n    // >>> longestPalindrome((\"abaaba\"))\n    // \"\
    abaaba\"\n    // >>> longestPalindrome((\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   var firstChar = text[0]\n            var lastChar = text[text.length - 1]\n\
    \            if (firstChar == lastChar) {\n                text.substring(1, text.length\
    \ - 1).toSeq().foldLeft(true)((x, y) => x && y)\n            } else {\n      \
    \          false\n            }\n        }\n    }\n\n    // Returns the longest\
    \ palindrome substring in given string\n    // >>> getLongestPalindrome(\"\")\n\
    \    // \"\"\n    // >>> getLongestPalindrome(\"a\")\n    // \"a\"\n    // >>>\
    \ getLongestPalindrome(\"ab\")\n    // \"ab\"\n    // >>> getLongestPalindrome(\"\
    aba\")\n    // \"aba\"\n    // >>> getLongestPalindrome(\"abaaba\")\n    // \"\
    aba\"\n    def getLongestPalindrome(text : String) : String = {\n        if (text.length\
    \ == 0) {\n            \"\"\n        } else {\n            var maxLength = 0\n\
    \            var maxPalindrome = \"\"\n            var currentPalindrome = \"\"\
    \n            var currentLength = 0\n            var currentStart = 0\n      \
    \      var currentEnd = 0\n            var currentChar = \"\"\n            for\
    \ (var i = 0; i < text.length; i++) {\n                currentChar = text[i]\n\
    \                currentPalindrome = currentPalindrome + currentChar\n       \
    \         currentLength = currentLength + 1\n                if (currentLength\
    \ > maxLength) {\n                    maxLength = currentLength\n            \
    \        maxPalindrome = currentPalindrome\n                    currentStart =\
    \ i - currentLength + 1\n                    currentEnd = i + 1\n            \
    \    }\n                for (var j = i + 1; j < text.length; j++) {\n        \
    \            currentChar = text[j]\n                    currentPalindrome = currentPalindrome\
    \ + currentChar\n                    currentLength = currentLength + 1\n     \
    \               if (currentLength > maxLength) {\n                        maxLength\
    \ = currentLength\n                        maxPalindrome = currentPalindrome\n\
    \                        currentStart = i - currentLength + 1\n              \
    \          currentEnd = i + 1\n                    }\n                }\n    \
    \        }\n", "        if (text.length == 0) {\n            true\n        } else\
    \ {\n            var left = 0\n            var right = text.length - 1\n     \
    \       while (left < right) {\n                if (text[left] != text[right])\
    \ {\n                    return false\n                }\n                left\
    \ += 1\n                right -= 1\n            }\n            true\n        }\n\
    \    }\n\n    // Returns the longest palindrome in given string\n    // >>> longestPalindrome((\"\
    \"))\n    // \"\"\n    // >>> longestPalindrome((\"a\"))\n    // \"a\"\n    //\
    \ >>> longestPalindrome((\"ab\"))\n    // \"ab\"\n    // >>> longestPalindrome((\"\
    aba\"))\n    // \"aba\"\n    // >>> longestPalindrome((\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else if (text.length\
    \ == 1) {\n            text == text.toLowerCase()\n        } else {\n        \
    \    text.toLowerCase().split(\"\").reverse().mkString(\"\").equals(text)\n  \
    \      }\n    }\n\n    // Returns the longest palindrome substring in given string\n\
    \    // >>> getLongestPalindrome(\"abcdefghijklmnopqrstuvwxyz\")\n    // (\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    // >>> getLongestPalindrome(\"abcdefghijklmnopqrstuvwxyz1234567890\")\n\
    \    // (\"abcdefghijklmnopqrstuvwxyz\")\n    // >>> getLongestPalindrome(\"abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890\"\
    )\n    // (\"abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890\"\
    )\n    def getLongestPalindrome(text : String) : String = {\n        var max =\
    \ 0\n        var maxPalindrome = \"\"\n        for (i <- 0 until text.length)\
    \ {\n            for (j <- 0 until text.length - i) {\n                if (isPalindrome(text.substring(i,\
    \ i + j + 1))) {\n                    if (j + i > max) {\n                   \
    \     max = j + i", "        if (text.length == 0) {\n            true\n     \
    \   } else {\n            if (text.length == 1) {\n                text.charAt(0)\
    \ == text.charAt(0)\n            } else {\n                var i = 0\n       \
    \         var j = text.length - 1\n                while (i < j) {\n         \
    \           if (text.charAt(i) != text.charAt(j)) {\n                        return\
    \ false\n                    }\n                    i += 1\n                 \
    \   j -= 1\n                }\n                true\n            }\n        }\n\
    \    }\n\n    // Returns the number of palindromic substrings in given string\n\
    \    // >>> countPalindromicSubstrings(\"\")\n    // (0)\n    // >>> countPalindromicSubstrings(\"\
    a\")\n    // (1)\n    // >>> countPalindromicSubstrings(\"ab\")\n    // (2)\n\
    \    // >>> countPalindromicSubstrings(\"aba\")\n    // (2)\n    // >>> countPalindromicSubstrings(\"\
    abab\")\n    // (4)\n    def countPalindromicSubstrings(text : String) : Int =\
    \ {\n        if (text.length == 0) {\n            0\n        } else {\n      \
    \      if (text.length == 1) {\n                1\n            } else {\n    \
    \            var count = 0\n                var i = 0\n                var j =\
    \ text.length - 1\n                while (i < j) {\n                    if (text.charAt(i)\
    \ == text.charAt(j)) {\n                        count += 1\n                 \
    \       i += 1\n                        j -= 1\n                    } else {\n\
    \                        break\n                    }\n                }\n   \
    \             count\n            }\n        }\n    }\n\n    // Returns the number\
    \ of palindromic substrings in given string\n    // >>> countPalindromicSubstrings(\"\
    \")\n    // (0)\n    // >>> countPalindromicSubstrings(\"a\")\n    // (1)\n  \
    \  // >>> countPalindromicSubstrings(\"ab\")\n    // (2)\n    // >>> countPalindromicSubstrings(\"\
    aba\")\n    // (2)\n    // >>> countPalindromicSubstrings(\"abab\")\n    // (4)\n\
    \    def", "        if (text.length == 0) {\n            true\n        } else\
    \ if (text.length == 1) {\n            text == text.toLowerCase()\n        } else\
    \ {\n            var left = 0\n            var right = text.length - 1\n     \
    \       while (left < right) {\n                if (text.charAt(left) != text.charAt(right))\
    \ {\n                    return false\n                }\n                left\
    \ += 1\n                right -= 1\n            }\n            true\n        }\n\
    \    }\n\n    // Returns the longest palindrome substring in given string\n  \
    \  // >>> longestPalindrome((\"\"))\n    // \"\"\n    // >>> longestPalindrome((\"\
    a\"))\n    // \"a\"\n    // >>> longestPalindrome((\"ab\"))\n    // \"ab\"\n \
    \   // >>> longestPalindrome((\"aba\"))\n    // \"aba\"\n    // >>> longestPalindrome((\"\
    abba\"))\n    // \"abba\"\n    // >>> longestPalindrome((\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text == \"\") {\n            true\n        } else {\n            var\
    \ s = text.toLowerCase()\n            var i = 0\n            var j = s.length\
    \ - 1\n            while (i < j) {\n                if (s[i] != s[j]) {\n    \
    \                return false\n                }\n                i += 1\n   \
    \             j -= 1\n            }\n            true\n        }", "        if\
    \ (text.length() == 0) {\n            true\n        } else {\n            var\
    \ i = 0\n            var j = text.length() - 1\n            while (i < j) {\n\
    \                if (text.charAt(i) != text.charAt(j)) {\n                   \
    \ return false\n                }\n                i += 1\n                j -=\
    \ 1\n            }\n            true\n        }\n    }\n\n    // Returns the longest\
    \ palindrome in given string\n    // >>> longestPalindrome((\"\"))\n    // \"\"\
    \n    // >>> longestPalindrome((\"a\"))\n    // \"a\"\n    // >>> longestPalindrome((\"\
    ab\"))\n    // \"ab\"\n    // >>> longestPalindrome((\"aba\"))\n    // \"aba\"\
    \n    // >>> longestPalindrome((\"ababab\"))\n    // \"abab\"\n    def longestPalindrome(text\
    \ : String) : String = {\n        if (text.length() == 0) {\n            \"\"\n\
    \        } else {\n            var i = 0\n            var j = text.length() -\
    \ 1\n            var max = \"\"\n            while (i < j) {\n               \
    \ if (text.charAt(i) == text.charAt(j)) {\n                    if (text.substring(i,\
    \ j + 1).length() > max.length()) {\n                        max = text.substring(i,\
    \ j + 1)\n                    }\n                }\n                i += 1\n \
    \               j -= 1\n            }\n            return max\n        }\n   \
    \ }\n\n    // Returns the longest palindrome in given string\n    // >>> longestPalindrome((\"\
    \"))\n    // \"\"\n    // >>> longestPalindrome((\"a\"))\n    // \"a\"\n    //\
    \ >>> longestPalindrome((\"ab\"))\n    // \"ab\"\n    // >>> longestPalindrome((\"\
    aba\"))\n    // \"aba\"\n    // >>> longestPalindrome((\"ababab\"))\n    // \"\
    abab\"\n    def longestPalindrome2(text : String) : String = {\n        if (text.length()\
    \ == 0) {\n            \"\"\n        } else {\n            var i = 0\n       \
    \     var j = text.length() - 1\n            var max =", "        if (text.length\
    \ == 0) {\n            true\n        } else {\n            if (text.length ==\
    \ 1) {\n                text.charAt(0) == text.charAt(0)\n            } else {\n\
    \                var left = 0\n                var right = text.length - 1\n \
    \               while (left < right) {\n                    if (text.charAt(left)\
    \ != text.charAt(right)) {\n                        return false\n           \
    \         }\n                    left += 1\n                    right -= 1\n \
    \               }\n                return true\n            }\n        }", " \
    \       if (text.length == 0) {\n            true\n        } else if (text.length\
    \ == 1) {\n            text == text.toLowerCase()\n        } else {\n        \
    \    var left = 0\n            var right = text.length - 1\n            while\
    \ (left < right) {\n                if (text.charAt(left) != text.charAt(right))\
    \ {\n                    return false\n                }\n                left\
    \ += 1\n                right -= 1\n            }\n            true\n        }",
  "        if (text == null) return false\n        if (text.length() == 0) return\
    \ true\n        if (text.length() == 1) return true\n        if (text.length()\
    \ == 2) return true\n        if (text.length() == 3) return true\n        if (text.length()\
    \ == 4) return true\n        if (text.length() == 5) return true\n        if (text.length()\
    \ == 6) return true\n        if (text.length() == 7) return true\n        if (text.length()\
    \ == 8) return true\n        if (text.length() == 9) return true\n        if (text.length()\
    \ == 10) return true\n        if (text.length() == 11) return true\n        if\
    \ (text.length() == 12) return true\n        if (text.length() == 13) return true\n\
    \        if (text.length() == 14) return true\n        if (text.length() == 15)\
    \ return true\n        if (text.length() == 16) return true\n        if (text.length()\
    \ == 17) return true\n        if (text.length() == 18) return true\n        if\
    \ (text.length() == 19) return true\n        if (text.length() == 20) return true\n\
    \        if (text.length() == 21) return true\n        if (text.length() == 22)\
    \ return true\n        if (text.length() == 23) return true\n        if (text.length()\
    \ == 24) return true\n        if (text.length() == 25) return true\n        if\
    \ (text.length() == 26) return true\n        if (text.length() == 27) return true\n\
    \        if (text.length() == 28) return true\n        if (text.length() == 29)\
    \ return true\n        if (text.length() == 30) return true\n        if (text.length()\
    \ == 31) return true\n        if (text.length() == 32) return true\n        if\
    \ (text.length() == 33) return true\n        if (text.length() == 34) return true\n\
    \        if (text.length() == 35) return true\n        if (text.length() == 36)\
    \ return true\n        if (text.length() == 37) return true\n        if (text.length()\
    \ ==", "        if (text.length == 0) {\n            true\n        } else {\n\
    \            var firstChar = text.charAt(0)\n            var lastChar = text.charAt(text.length\
    \ - 1)\n            if (firstChar == lastChar) {\n                text.substring(1,\
    \ text.length - 1).chars().allMatch(c -> c == firstChar)\n            } else {\n\
    \                false\n            }\n        }", "        if (text.length ==\
    \ 0) {\n            true\n        } else {\n            var isPalindrome = true\n\
    \            for (i <- 0 until (text.length - 1)) {\n                if (text[i]\
    \ != text[(text.length - 1) - i]) {\n                    isPalindrome = false\n\
    \                    break\n                }\n            }\n            isPalindrome\n\
    \        }\n    }\n\n    // Returns the longest palindrome substring in given\
    \ string\n    // >>> getLongestPalindrome((\"abcd\"))\n    // (ab)\n    // >>>\
    \ getLongestPalindrome((\"a\"))\n    // (a)\n    // >>> getLongestPalindrome((\"\
    ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   var firstChar = text.charAt(0)\n            var lastChar = text.charAt(text.length\
    \ - 1)\n            if (firstChar == lastChar) {\n                isPalindrome(text.substring(1,\
    \ text.length - 1))\n            } else {\n                false\n           \
    \ }\n        }\n    }\n\n    // Returns the longest palindrome in given string\n\
    \    // >>> longestPalindrome((\"\"))\n    // \"\"\n    // >>> longestPalindrome((\"\
    a\"))\n    // \"a\"\n    // >>> longestPalindrome((\"aa\"))\n    // \"aa\"\n \
    \   // >>> longestPalindrome((\"aaa\"))\n    // \"aaa\"\n    // >>> longestPalindrome((\"\
    ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   var i = 0\n            var j = text.length - 1\n            while (i < j)\
    \ {\n                if (text.charAt(i) != text.charAt(j)) {\n               \
    \     return false\n                }\n                i += 1\n              \
    \  j -= 1\n            }\n            true\n        }", "        if (text.length\
    \ == 0) {\n            true\n        } else {\n            var left = 0\n    \
    \        var right = text.length - 1\n            while (left < right) {\n   \
    \             if (text.charAt(left) != text.charAt(right)) {\n               \
    \     return false\n                }\n                left += 1\n           \
    \     right -= 1\n            }\n            true\n        }", "        if (text.length()\
    \ == 0) {\n            true\n        } else {\n            var left = 0\n    \
    \        var right = text.length() - 1\n            while (left < right) {\n \
    \               if (text.charAt(left) != text.charAt(right)) {\n             \
    \       return false\n                }\n                left += 1\n         \
    \       right -= 1\n            }\n            true\n        }", "        if (text.length\
    \ == 0) {\n            true\n        } else {\n            var i = 0\n       \
    \     var j = text.length - 1\n            while (i < j) {\n                if\
    \ (text.charAt(i) != text.charAt(j)) {\n                    return false\n   \
    \             }\n                i += 1\n                j -= 1\n            }\n\
    \            true\n        }", "        if (text.length == 0) {\n            true\n\
    \        } else {\n            if (text.length == 1) {\n                text.charAt(0)\
    \ == text.charAt(0)\n            } else {\n                var i = 0\n       \
    \         var j = text.length - 1\n                while (i < j) {\n         \
    \           if (text.charAt(i) != text.charAt(j)) {\n                        return\
    \ false\n                    }\n                    i += 1\n                 \
    \   j -= 1\n                }\n                true\n            }\n        }\n\
    \    }\n\n    // Returns the longest palindrome in given string\n    // >>> getLongestPalindrome(\"\
    \")\n    // \"\"\n    // >>> getLongestPalindrome(\"a\")\n    // \"a\"\n    //\
    \ >>> getLongestPalindrome(\"ab\")\n    // \"ab\"\n    // >>> getLongestPalindrome(\"\
    aba\")\n    // \"aba\"\n    // >>> getLongestPalindrome(\"abaaba\")\n    // \"\
    abaaba\"\n    def getLongestPalindrome(text : String) : String = {\n        if\
    \ (text.length == 0) {\n            \"\"\n        } else {\n            var i\
    \ = 0\n            var j = text.length - 1\n            var max = \"\"\n     \
    \       while (i < j) {\n                if (text.charAt(i) == text.charAt(j))\
    \ {\n                    var len = 2\n                    while (i + len < j &&\
    \ text.charAt(i + len) == text.charAt(j - len)) {\n                        len\
    \ += 1\n                    }\n                    if (len > max.length) {\n \
    \                       max = text.substring(i, j)\n                    }\n  \
    \              }\n                i += 1\n                j -= 1\n           \
    \ }\n            max\n        }\n    }\n\n    // Returns the longest palindrome\
    \ in given string\n    // >>> getLongestPalindrome2(\"\")\n    // \"\"\n    //\
    \ >>> getLongestPalindrome2(\"a\")\n    // \"a\"\n    // >>> getLongestPalindrome2(\"\
    ab\")\n    // \"ab\"\n    // >>> getLongestPalindrome2(\"aba\")\n    // \"aba\"\
    \n    // >>> get", "        if (text.length == 0) {\n            true\n      \
    \  } else {\n            var i = 0\n            var j = text.length - 1\n    \
    \        while (i < j) {\n                if (text.charAt(i) != text.charAt(j))\
    \ {\n                    return false\n                }\n                i +=\
    \ 1\n                j -= 1\n            }\n            true\n        }\n    }\n\
    \n    // Returns the longest palindrome in given string\n    // >>> longestPalindrome((\"\
    \"))\n    // \"\"\n    // >>> longestPalindrome((\"a\"))\n    // \"a\"\n    //\
    \ >>> longestPalindrome((\"ab\"))\n    // \"ab\"\n    // >>> longestPalindrome((\"\
    aba\"))\n    // \"aba\"\n    // >>> longestPalindrome((\"abba\"))\n    // \"abba\"\
    \n    // >>> longestPalindrome((\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   var i = 0\n            var j = text.length - 1\n            while (i < j)\
    \ {\n                if (text.charAt(i) != text.charAt(j)) {\n               \
    \     return false\n                }\n                i = i + 1\n           \
    \     j = j - 1\n            }\n            true\n        }", "        if (text.length()\
    \ == 0) {\n            true\n        } else {\n            if (text.length() ==\
    \ 1) {\n                text.charAt(0) == text.charAt(0)\n            } else {\n\
    \                var left = 0\n                var right = text.length() - 1\n\
    \                while (left < right) {\n                    if (text.charAt(left)\
    \ != text.charAt(right)) {\n                        return false\n           \
    \         }\n                    left += 1\n                    right -= 1\n \
    \               }\n                true\n            }\n        }", "        if\
    \ (text.length == 0) {\n            true\n        } else {\n            var i\
    \ = 0\n            var j = text.length - 1\n            while (i < j) {\n    \
    \            if (text.charAt(i) != text.charAt(j)) {\n                    return\
    \ false\n                }\n                i += 1\n                j -= 1\n \
    \           }\n            true\n        }", "        if (text == \"\") {\n  \
    \          true\n        } else {\n            var textLength = text.length\n\
    \            var half = textLength / 2\n            var i = 0\n            var\
    \ j = half\n            while (i < half) {\n                if (text[i] != text[j])\
    \ {\n                    return false\n                }\n                i +=\
    \ 1\n                j -= 1\n            }\n            return true\n        }",
  "        if (text.length() < 2) {\n            return true\n        } else {\n \
    \           return (text.charAt(0) == text.charAt(text.length() - 1)) && isPalindrome(text.substring(1,\
    \ text.length() - 1))\n        }\n    }\n\n    // Returns the longest palindromic\
    \ substring in given string\n    // >>> getLongestPalindrome((\"abcd\"))\n   \
    \ // (\"abc\")\n    // >>> getLongestPalindrome((\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   if (text.length == 1) {\n                text.charAt(0) == text.charAt(0)\n\
    \            } else {\n                var left = 0\n                var right\
    \ = text.length - 1\n                while (left < right) {\n                \
    \    if (text.charAt(left) != text.charAt(right)) {\n                        return\
    \ false\n                    }\n                    left += 1\n              \
    \      right -= 1\n                }\n                true\n            }\n  \
    \      }\n    }\n\n    // Returns the longest palindrome in given string\n   \
    \ // >>> longestPalindrome((\"\"))\n    // \"\"\n    // >>> longestPalindrome((\"\
    a\"))\n    // \"a\"\n    // >>> longestPalindrome((\"ab\"))\n    // \"ab\"\n \
    \   // >>> longestPalindrome((\"abba\"))\n    // \"abba\"\n    // >>> longestPalindrome((\"\
    ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text == \"\")\n            return true\n        else {\n          \
    \  var i = 0\n            var j = text.length - 1\n            while (i < j) {\n\
    \                if (text.charAt(i) != text.charAt(j))\n                    return\
    \ false\n                i += 1\n                j -= 1\n            }\n     \
    \       return true\n        }\n    }\n\n    // Returns the longest palindrome\
    \ in given string\n    // >>> longestPalindrome((\"\"))\n    // \"\"\n    // >>>\
    \ longestPalindrome((\"a\"))\n    // \"a\"\n    // >>> longestPalindrome((\"ab\"\
    ))\n    // \"ab\"\n    // >>> longestPalindrome((\"aba\"))\n    // \"aba\"\n \
    \   // >>> longestPalindrome((\"abaab\"))\n    // \"abaab\"\n    // >>> longestPalindrome((\"\
    ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else if (text.length\
    \ == 1) {\n            text == text.toLowerCase()\n        } else {\n        \
    \    text.toLowerCase().split(\"\").reverse().mkString(\"\").equals(text)\n  \
    \      }\n    }\n\n    // Returns the number of palindromic strings in given string\n\
    \    // >>> countPalindromes(\"\")\n    // (0)\n    // >>> countPalindromes(\"\
    a\")\n    // (1)\n    // >>> countPalindromes(\"ab\")\n    // (2)\n    // >>>\
    \ countPalindromes(\"aba\")\n    // (1)\n    // >>> countPalindromes(\"abba\"\
    )\n    // (2)\n    // >>> countPalindromes(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   if (text.length == 1) {\n                text.charAt(0) == text.charAt(0)\n\
    \            } else {\n                var i = 0\n                var j = text.length\
    \ - 1\n                while (i < j) {\n                    if (text.charAt(i)\
    \ != text.charAt(j)) {\n                        return false\n               \
    \     }\n                    i += 1\n                    j -= 1\n            \
    \    }\n                true\n            }\n        }\n    }\n\n    // Returns\
    \ the longest palindrome in given string\n    // >>> getLongestPalindrome(\"\"\
    )\n    // \"\"\n    // >>> getLongestPalindrome(\"a\")\n    // \"a\"\n    // >>>\
    \ getLongestPalindrome(\"ab\")\n    // \"ab\"\n    // >>> getLongestPalindrome(\"\
    aba\")\n    // \"aba\"\n    // >>> getLongestPalindrome(\"abba\")\n    // \"abba\"\
    \n    def getLongestPalindrome(text : String) : String = {\n        if (text.length\
    \ == 0) {\n            \"\"\n        } else {\n            if (text.length ==\
    \ 1) {\n                text.charAt(0)\n            } else {\n               \
    \ var i = 0\n                var j = text.length - 1\n                var max\
    \ = \"\"\n                while (i < j) {\n                    if (text.charAt(i)\
    \ == text.charAt(j)) {\n                        if (text.substring(i, j + 1).length\
    \ > max.length) {\n                            max = text.substring(i, j + 1)\n\
    \                        }\n                    }\n                    i += 1\n\
    \                    j -= 1\n                }\n                max\n        \
    \    }\n        }\n    }\n\n    // Returns the longest palindrome in given string\n\
    \    // >>> getLongestPalindrome2(\"\")\n    // \"\"\n    // >>> getLongestPalindrome2(\"\
    a\")\n    // \"a\"\n    // >>> getLongestPalindrome2(\"ab\")\n    // \"ab\"\n\
    \    // >>> getLongestPalindrome2(\"aba\")\n    // \"aba\"\n    // >>> getLongestPalindrome",
  "        if (text == \"\") {\n            true\n        } else {\n            var\
    \ i = 0\n            var j = text.length - 1\n            while (i < j) {\n  \
    \              if (text.charAt(i) != text.charAt(j)) {\n                    return\
    \ false\n                }\n                i += 1\n                j -= 1\n \
    \           }\n            true\n        }\n    }\n\n    // Returns the longest\
    \ palindrome substring in given string\n    // >>> getLongestPalindrome((\"abcd\"\
    ))\n    // (ab)\n    // >>> getLongestPalindrome((\"abc\"))\n    // (abc)\n  \
    \  // >>> getLongestPalindrome((\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length() == 0) {\n            true\n        } else {\n       \
    \     var firstChar = text.charAt(0)\n            var lastChar = text.charAt(text.length()\
    \ - 1)\n            if (firstChar == lastChar) {\n                text.substring(1,\
    \ text.length() - 1).chars().allMatch(c -> c == firstChar)\n            } else\
    \ {\n                false\n            }\n        }", "        if (text.length\
    \ == 0) {\n            true\n        } else if (text.length == 1) {\n        \
    \    text == text.toLowerCase()\n        } else {\n            var isPalindrome\
    \ = true\n            var i = 0\n            var j = text.length - 1\n       \
    \     while (i < j) {\n                if (text.charAt(i) != text.charAt(j)) {\n\
    \                    isPalindrome = false\n                    break\n       \
    \         }\n                i += 1\n                j -= 1\n            }\n \
    \           return isPalindrome\n        }", "        if (text.length() == 0)\
    \ {\n            true\n        } else {\n            if (text.length() == 1) {\n\
    \                text.charAt(0) == text.charAt(0)\n            } else {\n    \
    \            if (text.length() % 2 == 0) {\n                    var half = text.length()\
    \ / 2\n                    var left = text.substring(0, half)\n              \
    \      var right = text.substring(half)\n                    left == right.reverse()\n\
    \                } else {\n                    var half = (text.length() - 1)\
    \ / 2\n                    var left = text.substring(0, half)\n              \
    \      var right = text.substring(half)\n                    left == right.reverse()\n\
    \                }\n            }\n        }\n    }\n\n    // Returns the number\
    \ of palindromes in given string\n    // >>> countPalindromes(\"\")\n    // (0)\n\
    \    // >>> countPalindromes(\"a\")\n    // (1)\n    // >>> countPalindromes(\"\
    ab\")\n    // (2)\n    // >>> countPalindromes(\"aba\")\n    // (1)\n    // >>>\
    \ countPalindromes(\"abba\")\n    // (2)\n    // >>> countPalindromes(\"ababab\"\
    )\n    // (3)\n    def countPalindromes(text : String) : Int = {\n        if (text.length()\
    \ == 0) {\n            0\n        } else {\n            if (text.length() == 1)\
    \ {\n                1\n            } else {\n                if (text.length()\
    \ % 2 == 0) {\n                    var half = text.length() / 2\n            \
    \        var left = text.substring(0, half)\n                    var right = text.substring(half)\n\
    \                    var count = 0\n                    for (var i = 0; i < left.length();\
    \ i++) {\n                        if (left.charAt(i) == right.charAt(i)) {\n \
    \                           count += 1\n                        }\n          \
    \          }\n                    return count\n                } else {\n   \
    \                 var half = (text.length() - 1) / 2\n                    var\
    \ left = text.substring(0, half)\n                    var right = text.substring(",
  "        if (text == \"\") {\n            true\n        } else {\n            var\
    \ s = text.toLowerCase()\n            var i = 0\n            var j = s.length\
    \ - 1\n            while (i < j) {\n                if (s[i] != s[j]) {\n    \
    \                return false\n                }\n                i += 1\n   \
    \             j -= 1\n            }\n            true\n        }\n    }\n\n  \
    \  // Returns the sum of all the digits in given string\n    // >>> sumDigits(\"\
    \")\n    // (0)\n    // >>> sumDigits(\"123\")\n    // (3)\n    // >>> sumDigits(\"\
    1234\")\n    // (6)\n    // >>> sumDigits(\"12345\")\n    // (10)\n    def sumDigits(text\
    \ : String) : Int = {\n        if (text == \"\") {\n            0\n        } else\
    \ {\n            var s = text.toLowerCase()\n            var sum = 0\n       \
    \     for (i <- 0 until s.length) {\n                sum += s[i].digitValue()\n\
    \            }\n            sum\n        }\n    }\n\n    // Returns the sum of\
    \ all the digits in given string\n    // >>> sumDigits(\"\")\n    // (0)\n   \
    \ // >>> sumDigits(\"123\")\n    // (3)\n    // >>> sumDigits(\"1234\")\n    //\
    \ (6)\n    // >>> sumDigits(\"12345\")\n    // (10)\n    def sumDigits2(text :\
    \ String) : Int = {\n        if (text == \"\") {\n            0\n        } else\
    \ {\n            var s = text.toLowerCase()\n            var sum = 0\n       \
    \     for (i <- 0 until s.length) {\n                sum += s[i].digitValue()\n\
    \            }\n            sum\n        }\n    }\n\n    // Returns the sum of\
    \ all the digits in given string\n    // >>> sumDigits(\"\")\n    // (0)\n   \
    \ // >>> sumDigits(\"123\")\n    // (3)\n    // >>> sumDigits(\"1234\")\n    //\
    \ (6)\n    // >>> sumDigits(\"12345\")\n    // (10)\n    def sumDigits3(text :\
    \ String)", "        if (text == null) return false\n        if (text.length ==\
    \ 0) return true\n        if (text.length == 1) return true\n        if (text.length\
    \ == 2) return true\n        if (text.length == 3) return true\n        if (text.length\
    \ == 4) return true\n        if (text.length == 5) return true\n        if (text.length\
    \ == 6) return true\n        if (text.length == 7) return true\n        if (text.length\
    \ == 8) return true\n        if (text.length == 9) return true\n        if (text.length\
    \ == 10) return true\n        if (text.length == 11) return true\n        if (text.length\
    \ == 12) return true\n        if (text.length == 13) return true\n        if (text.length\
    \ == 14) return true\n        if (text.length == 15) return true\n        if (text.length\
    \ == 16) return true\n        if (text.length == 17) return true\n        if (text.length\
    \ == 18) return true\n        if (text.length == 19) return true\n        if (text.length\
    \ == 20) return true\n        if (text.length == 21) return true\n        if (text.length\
    \ == 22) return true\n        if (text.length == 23) return true\n        if (text.length\
    \ == 24) return true\n        if (text.length == 25) return true\n        if (text.length\
    \ == 26) return true\n        if (text.length == 27) return true\n        if (text.length\
    \ == 28) return true\n        if (text.length == 29) return true\n        if (text.length\
    \ == 30) return true\n        if (text.length == 31) return true\n        if (text.length\
    \ == 32) return true\n        if (text.length == 33) return true\n        if (text.length\
    \ == 34) return true\n        if (text.length == 35) return true\n        if (text.length\
    \ == 36) return true\n        if (text.length == 37) return true\n        if (text.length\
    \ == 38) return true\n        if (text.length == 39) return true\n        if (text.length\
    \ == 40) return true\n        if (text.length == 41) return", "        if (text.length()\
    \ == 0) {\n            true\n        } else {\n            var i = 0\n       \
    \     var j = text.length() - 1\n            while (i < j) {\n               \
    \ if (text.charAt(i) != text.charAt(j)) {\n                    return false\n\
    \                }\n                i += 1\n                j -= 1\n         \
    \   }\n            true\n        }", "        if (text.length == 0) {\n      \
    \      true\n        } else {\n            var isPalindrome = true\n         \
    \   for (i <- 0 until (text.length - 1)) {\n                if (text[i] != text[text.length\
    \ - 1 - i]) {\n                    isPalindrome = false\n                }\n \
    \           }\n            isPalindrome\n        }", "        if (text.length\
    \ == 0) {\n            true\n        } else {\n            if (text.length ==\
    \ 1) {\n                text == text.reverse()\n            } else {\n       \
    \         var left = 0\n                var right = text.length - 1\n        \
    \        while (left < right) {\n                    if (text[left] != text[right])\
    \ {\n                        return false\n                    }\n           \
    \         left += 1\n                    right -= 1\n                }\n     \
    \       }\n            true\n        }\n    }\n\n    // Returns the longest palindrome\
    \ in given string\n    // >>> longestPalindrome((\"\"))\n    // \"\"\n    // >>>\
    \ longestPalindrome((\"a\"))\n    // \"a\"\n    // >>> longestPalindrome((\"ab\"\
    ))\n    // \"ab\"\n    // >>> longestPalindrome((\"aba\"))\n    // \"aba\"\n \
    \   // >>> longestPalindrome((\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length() == 0) {\n            true\n        } else {\n       \
    \     if (text.length() == 1) {\n                text.charAt(0) == text.charAt(0)\n\
    \            } else {\n                var left = 0\n                var right\
    \ = text.length() - 1\n                while (left < right) {\n              \
    \      if (text.charAt(left) != text.charAt(right)) {\n                      \
    \  return false\n                    }\n                    left += 1\n      \
    \              right -= 1\n                }\n                return true\n  \
    \          }\n        }", "        if (text == \"\") {\n            true\n   \
    \     } else {\n            if (text.length() == 1) {\n                true\n\
    \            } else {\n                if (text.length() % 2 == 0) {\n       \
    \             var half = text.length() / 2\n                    var firstHalf\
    \ = text.substring(0, half)\n                    var secondHalf = text.substring(half)\n\
    \                    if (firstHalf == secondHalf.reverse()) {\n              \
    \          true\n                    } else {\n                        false\n\
    \                    }\n                } else {\n                    false\n\
    \                }\n            }\n        }", "        if (text == null) return\
    \ false\n        if (text.length() == 0) return true\n        if (text.length()\
    \ == 1) return true\n        if (text.length() == 2) return true\n        if (text.length()\
    \ == 3) return true\n        if (text.length() == 4) return true\n        if (text.length()\
    \ == 5) return true\n        if (text.length() == 6) return true\n        if (text.length()\
    \ == 7) return true\n        if (text.length() == 8) return true\n        if (text.length()\
    \ == 9) return true\n        if (text.length() == 10) return true\n        if\
    \ (text.length() == 11) return true\n        if (text.length() == 12) return true\n\
    \        if (text.length() == 13) return true\n        if (text.length() == 14)\
    \ return true\n        if (text.length() == 15) return true\n        if (text.length()\
    \ == 16) return true\n        if (text.length() == 17) return true\n        if\
    \ (text.length() == 18) return true\n        if (text.length() == 19) return true\n\
    \        if (text.length() == 20) return true\n        if (text.length() == 21)\
    \ return true\n        if (text.length() == 22) return true\n        if (text.length()\
    \ == 23) return true\n        if (text.length() == 24) return true\n        if\
    \ (text.length() == 25) return true\n        if (text.length() == 26) return true\n\
    \        if (text.length() == 27) return true\n        if (text.length() == 28)\
    \ return true\n        if (text.length() == 29) return true\n        if (text.length()\
    \ == 30) return true\n        if (text.length() == 31) return true\n        if\
    \ (text.length() == 32) return true\n        if (text.length() == 33) return true\n\
    \        if (text.length() == 34) return true\n        if (text.length() == 35)\
    \ return true\n        if (text.length() == 36) return true\n        if (text.length()\
    \ == 37) return true\n        if (text.length() ==", "        if (text.length\
    \ == 0) {\n            true\n        } else {\n            if (text.length ==\
    \ 1) {\n                text.charAt(0) == text.charAt(0)\n            } else {\n\
    \                if (text.length % 2 == 0) {\n                    var half = text.length\
    \ / 2\n                    var left = text.substring(0, half)\n              \
    \      var right = text.substring(half)\n                    left.equals(right)\n\
    \                } else {\n                    var half = (text.length - 1) /\
    \ 2\n                    var left = text.substring(0, half)\n                \
    \    var right = text.substring(half)\n                    left.equals(right)\n\
    \                }\n            }\n        }", "        if (text == \"\") {\n\
    \            true\n        } else {\n            if (text.length() == 1) {\n \
    \               true\n            } else {\n                if (text.length()\
    \ % 2 == 0) {\n                    var half = text.length() / 2\n            \
    \        var left = text.substring(0, half)\n                    var right = text.substring(half)\n\
    \                    if (left == right.reverse()) {\n                        true\n\
    \                    } else {\n                        false\n               \
    \     }\n                } else {\n                    false\n               \
    \ }\n            }\n        }", "        if (text == \"\") {\n            true\n\
    \        } else {\n            if (text.length() == 1) {\n                true\n\
    \            } else {\n                if (text.length() % 2 == 0) {\n       \
    \             var half = text.length() / 2\n                    var firstHalf\
    \ = text.substring(0, half)\n                    var secondHalf = text.substring(half)\n\
    \                    if (firstHalf == secondHalf.reverse()) {\n              \
    \          true\n                    } else {\n                        false\n\
    \                    }\n                } else {\n                    false\n\
    \                }\n            }\n        }", "        if (text == null) return\
    \ false\n        if (text.length() == 0) return true\n        if (text.length()\
    \ == 1) return true\n        if (text.length() == 2) return true\n        if (text.length()\
    \ == 3) return true\n        if (text.length() == 4) return true\n        if (text.length()\
    \ == 5) return true\n        if (text.length() == 6) return true\n        if (text.length()\
    \ == 7) return true\n        if (text.length() == 8) return true\n        if (text.length()\
    \ == 9) return true\n        if (text.length() == 10) return true\n        if\
    \ (text.length() == 11) return true\n        if (text.length() == 12) return true\n\
    \        if (text.length() == 13) return true\n        if (text.length() == 14)\
    \ return true\n        if (text.length() == 15) return true\n        if (text.length()\
    \ == 16) return true\n        if (text.length() == 17) return true\n        if\
    \ (text.length() == 18) return true\n        if (text.length() == 19) return true\n\
    \        if (text.length() == 20) return true\n        if (text.length() == 21)\
    \ return true\n        if (text.length() == 22) return true\n        if (text.length()\
    \ == 23) return true\n        if (text.length() == 24) return true\n        if\
    \ (text.length() == 25) return true\n        if (text.length() == 26) return true\n\
    \        if (text.length() == 27) return true\n        if (text.length() == 28)\
    \ return true\n        if (text.length() == 29) return true\n        if (text.length()\
    \ == 30) return true\n        if (text.length() == 31) return true\n        if\
    \ (text.length() == 32) return true\n        if (text.length() == 33) return true\n\
    \        if (text.length() == 34) return true\n        if (text.length() == 35)\
    \ return true\n        if (text.length() == 36) return true\n        if (text.length()\
    \ == 37) return true\n        if (text.length() ==", "        if (text.length\
    \ == 0) {\n            true\n        } else {\n            if (text.length ==\
    \ 1) {\n                text == text.reverse()\n            } else {\n       \
    \         var firstHalf = text.substring(0, text.length / 2)\n               \
    \ var secondHalf = text.substring(text.length / 2)\n                firstHalf\
    \ == secondHalf.reverse()\n            }\n        }", "        if (text.length\
    \ == 0) {\n            true\n        } else {\n            var isPalindrome =\
    \ true\n            for (i <- 0 until (text.length - 1)) {\n                if\
    \ (text[i] != text[text.length - 1 - i]) {\n                    isPalindrome =\
    \ false\n                    break\n                }\n            }\n       \
    \     isPalindrome\n        }\n    }\n\n    // Returns the longest palindrome\
    \ substring in given string\n    // >>> getLongestPalindrome((\"aba\"))\n    //\
    \ (ab)\n    // >>> getLongestPalindrome((\"abaab\"))\n    // (ab)\n    // >>>\
    \ getLongestPalindrome((\"abaabcc\"))\n    // (abcc)\n    def getLongestPalindrome(text\
    \ : String) : String = {\n        var maxLength = 0\n        var maxPalindrome\
    \ = \"\"\n        for (i <- 0 until (text.length - 1)) {\n            for (j <-\
    \ i until (text.length - 1)) {\n                if (text[i] == text[j] && (j -\
    \ i) > maxLength) {\n                    maxLength = j - i\n                 \
    \   maxPalindrome = text[i] + text[j]\n                }\n            }\n    \
    \    }\n        maxPalindrome\n    }\n\n    // Returns the longest palindrome\
    \ substring in given string\n    // >>> getLongestPalindrome2((\"aba\"))\n   \
    \ // (ab)\n    // >>> getLongestPalindrome2((\"abaab\"))\n    // (ab)\n    //\
    \ >>> getLongestPalindrome2((\"abaabcc\"))\n    // (abcc)\n    def getLongestPalindrome2(text\
    \ : String) : String = {\n        var maxLength = 0\n        var maxPalindrome\
    \ = \"\"\n        for (i <- 0 until (text.length - 1)) {\n            for (j <-\
    \ i until (text.length - 1)) {\n                if (text[i] == text[j] && (j -\
    \ i) > maxLength) {\n                    maxLength = j - i\n                 \
    \   maxPalindrome = text[i] + text[j]\n                }\n            }\n    \
    \    }\n        maxPalind", "        if (text.length == 0) {\n            true\n\
    \        } else {\n            var i = 0\n            var j = text.length - 1\n\
    \            while (i < j) {\n                if (text.charAt(i) != text.charAt(j))\
    \ {\n                    return false\n                }\n                i +=\
    \ 1\n                j -= 1\n            }\n            true\n        }", "  \
    \      if (text.length == 0) {\n            true\n        } else {\n         \
    \   var firstChar = text.charAt(0)\n            var lastChar = text.charAt(text.length\
    \ - 1)\n            var isPalindrome = firstChar == lastChar\n            for\
    \ (i <- 1 until text.length - 1) {\n                isPalindrome = isPalindrome\
    \ && text.charAt(i) == firstChar\n            }\n            isPalindrome\n  \
    \      }\n    }\n\n    // Returns the longest palindrome substring in given string\n\
    \    // >>> getLongestPalindrome(\"abcd\")\n    // (ab)\n    // >>> getLongestPalindrome(\"\
    abccba\")\n    // (abcba)\n    // >>> getLongestPalindrome(\"abccbaa\")\n    //\
    \ (abcbaa)\n    // >>> getLongestPalindrome(\"abccbaabccba\")\n    // (abcbaabccba)\n\
    \    def getLongestPalindrome(text : String) : String = {\n        var maxLength\
    \ = 0\n        var maxPalindrome = \"\"\n        for (i <- 0 until text.length)\
    \ {\n            for (j <- 0 until text.length) {\n                if (isPalindrome(text.substring(i,\
    \ j + 1))) {\n                    var length = j - i + 1\n                   \
    \ if (length > maxLength) {\n                        maxLength = length\n    \
    \                    maxPalindrome = text.substring(i, j + 1)\n              \
    \      }\n                }\n            }\n        }\n        maxPalindrome\n\
    \    }\n\n    // Returns the longest palindrome substring in given string\n  \
    \  // >>> getLongestPalindrome2(\"abcd\")\n    // (ab)\n    // >>> getLongestPalindrome2(\"\
    abccba\")\n    // (abcba)\n    // >>> getLongestPalindrome2(\"abccbaa\")\n   \
    \ // (abcbaa)\n    // >>> getLongestPalindrome2(\"abccbaabccba\")\n    // (abcbaabccba)\n\
    \    def getLongestPalindrome2(text : String) : String = {\n        var maxLength\
    \ = 0\n        var maxPalindrome", "        if (text == \"\") {\n            true\n\
    \        } else {\n            if (text.length() == 1) {\n                true\n\
    \            } else {\n                if (text.length() % 2 == 0) {\n       \
    \             var half = text.length() / 2\n                    var left = text.substring(0,\
    \ half)\n                    var right = text.substring(half)\n              \
    \      if (left == right.reverse()) {\n                        true\n        \
    \            } else {\n                        false\n                    }\n\
    \                } else {\n                    false\n                }\n    \
    \        }\n        }\n    }\n\n    // Returns the longest palindrome in given\
    \ string\n    // >>> longestPalindrome((\"\"))\n    // \"\"\n    // >>> longestPalindrome((\"\
    a\"))\n    // \"a\"\n    // >>> longestPalindrome((\"ab\"))\n    // \"ab\"\n \
    \   // >>> longestPalindrome((\"aba\"))\n    // \"aba\"\n    // >>> longestPalindrome((\"\
    abaab\"))\n    // \"abaab\"\n    // >>> longestPalindrome((\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else if (text.length\
    \ == 1) {\n            text == text.reverse()\n        } else {\n            var\
    \ i = 0\n            var j = text.length - 1\n            while (i < j) {\n  \
    \              if (text[i] != text[j]) {\n                    return false\n \
    \               }\n                i += 1\n                j -= 1\n          \
    \  }\n            true\n        }", "        if (text.length() == 0) {\n     \
    \       true\n        } else {\n            if (text.length() == 1) {\n      \
    \          text.charAt(0) == text.charAt(0)\n            } else {\n          \
    \      var i = 0\n                var j = text.length() - 1\n                while\
    \ (i < j) {\n                    if (text.charAt(i) != text.charAt(j)) {\n   \
    \                     return false\n                    }\n                  \
    \  i += 1\n                    j -= 1\n                }\n                true\n\
    \            }\n        }\n    }\n\n    // Returns the longest palindrome in given\
    \ string\n    // >>> longestPalindrome((\"\"))\n    // \"\"\n    // >>> longestPalindrome((\"\
    a\"))\n    // \"a\"\n    // >>> longestPalindrome((\"aa\"))\n    // \"aa\"\n \
    \   // >>> longestPalindrome((\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        text.length == 0\n        || text.length == 1\n        || text.length ==\
    \ 2\n        || text.length == 3\n        || text.length == 4\n        || text.length\
    \ == 5\n        || text.length == 6\n        || text.length == 7\n        || text.length\
    \ == 8\n        || text.length == 9\n        || text.length == 10\n        ||\
    \ text.length == 11\n        || text.length == 12\n        || text.length == 13\n\
    \        || text.length == 14\n        || text.length == 15\n        || text.length\
    \ == 16\n        || text.length == 17\n        || text.length == 18\n        ||\
    \ text.length == 19\n        || text.length == 20\n        || text.length == 21\n\
    \        || text.length == 22\n        || text.length == 23\n        || text.length\
    \ == 24\n        || text.length == 25\n        || text.length == 26\n        ||\
    \ text.length == 27\n        || text.length == 28\n        || text.length == 29\n\
    \        || text.length == 30\n        || text.length == 31\n        || text.length\
    \ == 32\n        || text.length == 33\n        || text.length == 34\n        ||\
    \ text.length == 35\n        || text.length == 36\n        || text.length == 37\n\
    \        || text.length == 38\n        || text.length == 39\n        || text.length\
    \ == 40\n        || text.length == 41\n        || text.length == 42\n        ||\
    \ text.length == 43\n        || text.length == 44\n        || text.length == 45\n\
    \        || text.length == 46\n        || text.length == 47\n        || text.length\
    \ == 48\n        || text.length == 49\n        || text.length == 50\n        ||\
    \ text.length == 51\n        || text.length == 52\n        || text.length == 53\n\
    \        || text.length == 54\n        || text.length == 55\n        || text.length\
    \ == 56\n        || text.length == 57\n        || text.length == 58\n        ||\
    \ text.length == 59\n        || text.length == 60\n        || text.length == 61\n\
    \        || text.length == 62\n        || text.length == 63\n        ", "    \
    \    if (text.length == 0) {\n            true\n        } else if (text.length\
    \ == 1) {\n            text == text.toLowerCase()\n        } else {\n        \
    \    var firstHalf = text.substring(0, text.length / 2)\n            var secondHalf\
    \ = text.substring(text.length / 2)\n            firstHalf == secondHalf.reverse()\n\
    \            true\n        }\n    }\n\n    // Returns the number of palindromes\
    \ in given string\n    // >>> countPalindromes(\"\")\n    // (0)\n    // >>> countPalindromes(\"\
    a\")\n    // (1)\n    // >>> countPalindromes(\"ab\")\n    // (2)\n    // >>>\
    \ countPalindromes(\"abc\")\n    // (3)\n    // >>> countPalindromes(\"abcd\"\
    )\n    // (4)\n    def countPalindromes(text : String) : Int = {\n        if (text.length\
    \ == 0) {\n            0\n        } else if (text.length == 1) {\n           \
    \ 1\n        } else {\n            var firstHalf = text.substring(0, text.length\
    \ / 2)\n            var secondHalf = text.substring(text.length / 2)\n       \
    \     secondHalf == secondHalf.reverse()\n            (text.length / 2) + (countPalindromes(firstHalf)\
    \ + countPalindromes(secondHalf))\n        }\n    }\n\n    // Returns the number\
    \ of palindromes in given string\n    // >>> countPalindromes(\"\")\n    // (0)\n\
    \    // >>> countPalindromes(\"a\")\n    // (1)\n    // >>> countPalindromes(\"\
    ab\")\n    // (2)\n    // >>> countPalindromes(\"abc\")\n    // (3)\n    // >>>\
    \ countPalindromes(\"abcd\")\n    // (4)\n    def countPalindromes2(text : String)\
    \ : Int = {\n        if (text.length == 0) {\n            0\n        } else if\
    \ (text.length == 1) {\n            1\n        } else {\n            var firstHalf\
    \ = text.substring(0, text.length / 2)\n            ", "        if (text.length\
    \ == 0) {\n            true\n        } else {\n            var left = 0\n    \
    \        var right = text.length - 1\n            while (left < right) {\n   \
    \             if (text.charAt(left) != text.charAt(right)) {\n               \
    \     return false\n                }\n                left += 1\n           \
    \     right -= 1\n            }\n            true\n        }\n    }\n\n    //\
    \ Returns the longest palindrome substring in given string\n    // >>> getLongestPalindrome((\"\
    abcd\"))\n    // (ab)\n    // >>> getLongestPalindrome((\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   var i = 0\n            var j = text.length - 1\n            while (i < j)\
    \ {\n                if (text.charAt(i) != text.charAt(j)) {\n               \
    \     return false\n                }\n                i += 1\n              \
    \  j -= 1\n            }\n            true\n        }\n    }\n\n    // Returns\
    \ the sum of all the numbers in the given string\n    // >>> sumNumbers((\"\"\
    ))\n    // (0)\n    // >>> sumNumbers((\"1\"))\n    // (1)\n    // >>> sumNumbers((\"\
    12\"))\n    // (3)\n    // >>> sumNumbers((\"123\"))\n    // (6)\n    // >>> sumNumbers((\"\
    1234\"))\n    // (10)\n    def sumNumbers(text : String) : Int = {\n        if\
    \ (text.length == 0) {\n            0\n        } else {\n            var i = 0\n\
    \            var j = text.length - 1\n            var sum = 0\n            while\
    \ (i < j) {\n                var digit = text.charAt(i) - '0'\n              \
    \  sum = sum * 10 + digit\n                i += 1\n            }\n           \
    \ sum\n        }\n    }\n\n    // Returns the product of all the numbers in the\
    \ given string\n    // >>> productNumbers((\"\"))\n    // (1)\n    // >>> productNumbers((\"\
    1\"))\n    // (1)\n    // >>> productNumbers((\"12\"))\n    // (12)\n    // >>>\
    \ productNumbers((\"123\"))\n    // (123)\n    // >>> productNumbers((\"1234\"\
    ))\n    // (1234)\n    def productNumbers(text : String) : Int = {\n        if\
    \ (text.length == 0) {\n            1\n        } else {\n            var i = 0\n\
    \            var j = text.length - 1\n            var product = 1\n          \
    \  while (i < j) {\n                var digit = text.charAt(i) - '0'\n       \
    \         product = product * digit\n                i += 1\n            }\n \
    \           product\n        }\n    }\n\n    // Returns the sum of the squares\
    \ of the numbers in the given string\n    // >>> sum", "        if (text.length()\
    \ == 0) {\n            true\n        } else {\n            var left = 0\n    \
    \        var right = text.length() - 1\n            while (left < right) {\n \
    \               if (text.charAt(left) != text.charAt(right)) {\n             \
    \       return false\n                }\n                left += 1\n         \
    \       right -= 1\n            }\n            true\n        }", "        if (text.length\
    \ == 0) {\n            true\n        } else {\n            var i = 0\n       \
    \     var j = text.length - 1\n            while (i < j) {\n                if\
    \ (text.charAt(i) != text.charAt(j)) {\n                    return false\n   \
    \             }\n                i += 1\n                j -= 1\n            }\n\
    \            true\n        }", "        if (text.length == 0) {\n            true\n\
    \        } else {\n            if (text.length == 1) {\n                text.charAt(0)\
    \ == text.charAt(0)\n            } else {\n                var i = 0\n       \
    \         var j = text.length - 1\n                while (i < j) {\n         \
    \           if (text.charAt(i) != text.charAt(j)) {\n                        return\
    \ false\n                    }\n                    i += 1\n                 \
    \   j -= 1\n                }\n                true\n            }\n        }",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   var left = 0\n            var right = text.length - 1\n            while (left\
    \ < right) {\n                if (text.charAt(left) != text.charAt(right)) {\n\
    \                    return false\n                }\n                left +=\
    \ 1\n                right -= 1\n            }\n            true\n        }",
  "        if (text.length == 0) {\n            true\n        } else {\n         \
    \   if (text.length == 1) {\n                text == text.reverse()\n        \
    \    } else {\n                var half = text.length / 2\n                var\
    \ left = text.substring(0, half)\n                var right = text.substring(half)\n\
    \                left == right.reverse()\n            }\n        }", "       \
    \ if (text == \"\") {\n            true\n        } else {\n            var i =\
    \ 0\n            var j = text.length - 1\n            while (i < j) {\n      \
    \          if (text[i] != text[j]) {\n                    return false\n     \
    \           }\n                i += 1\n                j -= 1\n            }\n\
    \            true\n        }", "        if (text.length() == 0) {\n          \
    \  true\n        } else {\n            var isPalindrome = true\n            for\
    \ (i <- 0 until (text.length() - 1)) {\n                if (text.charAt(i) !=\
    \ text.charAt(text.length() - 1 - i)) {\n                    isPalindrome = false\n\
    \                    break\n                }\n            }\n            isPalindrome\n\
    \        }", "        if (text == \"\")\n            true\n        else if (text.length()\
    \ == 1)\n            true\n        else {\n            var left = 0\n        \
    \    var right = text.length() - 1\n            while (left < right) {\n     \
    \           if (text.charAt(left) != text.charAt(right))\n                   \
    \ return false\n                left += 1\n                right -= 1\n      \
    \      }\n            return true\n        }"]
stop_tokens:
- "\n    }\n"
