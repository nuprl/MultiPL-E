name: HumanEval_83_starts_one_ends
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return the count of the numbers of n-digit\n\
  \    // positive integers that start or end with 1.\n    def startsOneEnds(n : Long)\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
  \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
  \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
  \ == (18000l));\n    }\n\n}\n"
completions: ["        var result = 0L\n        for (i <- 0 until n) {\n         \
    \   if (i == 0) {\n                result += 1L\n            } else {\n      \
    \          result += (i * 10) + 1L\n            }\n        }\n        return result",
  "        var result = 0L\n        for (i <- 0 until n) {\n            if (i == 0)\
    \ {\n                result += 1L\n            } else {\n                result\
    \ += (i - 1) * (i - 1) + 1L\n            }\n        }\n        return result",
  "        var result = 0L\n        for (i <- 0L to (n - 1)) {\n            if (i\
    \ == 0L) {\n                result += 1L\n            } else {\n             \
    \   result += (i * 10L)\n            }\n        }\n        return result", " \
    \       val digits = scala.collection.mutable.ListBuffer[Long]()\n        for\
    \ (i <- 0 until n) {\n          digits.append(i)\n        }\n        val result\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until digits.size())\
    \ {\n          val digit = digits.get(i)\n          if (digit == 0) {\n      \
    \      result.append(0)\n          } else {\n            val start = digit - 1\n\
    \            val end = digit + 1\n            val startDigit = digits.get(start)\n\
    \            val endDigit = digits.get(end)\n            if (startDigit == 1 &&\
    \ endDigit == 1) {\n              result.append(1)\n            }\n          }\n\
    \        }\n        result.toList", "        val digits = scala.math.BigInt.range(1,\
    \ n)\n        val starts = digits.filter(d -> d.toString().startsWith(\"1\"))\n\
    \        val ends = digits.filter(d -> d.toString().endsWith(\"1\"))\n       \
    \ val startsOneEnds = starts.zip(ends).map(t -> t._1.toString().length() + t._2.toString().length()).sum()\n\
    \        return startsOneEnds", "        val s = \"\"\n        for(i <- 0 until\
    \ n) {\n            s += \"1\"\n        }\n        val s1 = s.substring(0, n -\
    \ 1)\n        val s2 = s.substring(1, n)\n        val s3 = s.substring(n - 1)\n\
    \        val s4 = s.substring(0, 1)\n        val s5 = s.substring(n)\n       \
    \ val s6 = s.substring(0, n - 1)\n        val s7 = s.substring(n - 1)\n      \
    \  val s8 = s.substring(0, 1)\n        val s9 = s.substring(n)\n        val s10\
    \ = s.substring(0, n - 1)\n        val s11 = s.substring(n - 1)\n        val s12\
    \ = s.substring(0, 1)\n        val s13 = s.substring(n)\n        val s14 = s.substring(0,\
    \ n - 1)\n        val s15 = s.substring(n - 1)\n        val s16 = s.substring(0,\
    \ 1)\n        val s17 = s.substring(n)\n        val s18 = s.substring(0, n - 1)\n\
    \        val s19 = s.substring(n - 1)\n        val s20 = s.substring(0, 1)\n \
    \       val s21 = s.substring(n)\n        val s22 = s.substring(0, n - 1)\n  \
    \      val s23 = s.substring(n - 1)\n        val s24 = s.substring(0, 1)\n   \
    \     val s25 = s.substring(n)\n        val s26 = s.substring(0, n - 1)\n    \
    \    val s27 = s.substring(n - 1)\n        val s28 = s.substring(0, 1)\n     \
    \   val s29 = s.substring(n)\n        val s30 = s.substring(0, n - 1)\n      \
    \  val s31 = s.substring(n - 1)\n        val s32 = s.substring(0, 1)\n       \
    \ val s", "        var digits = scala.collection.mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until n) {\n            digits.append(i)\n        }\n   \
    \     var result = 0\n        for (i <- 0 until digits.size) {\n            var\
    \ digit = digits.get(i)\n            if (digit == 1) {\n                result\
    \ += 1\n            }\n            if (digit > 1) {\n                result +=\
    \ 1\n            }\n        }\n        return result", "        var result = 0L\n\
    \        for (i <- 1L to n) {\n            if (i % 10 == 1) {\n              \
    \  result += 1L\n            }\n            if (i % 10 == 0) {\n             \
    \   result += 1L\n            }\n        }\n        return result", "        var\
    \ digits = 1L\n        var result = 0L\n        for i <- 1L to n - 1L {\n    \
    \        digits = digits * 10L\n            result += digits\n            if digits\
    \ == 10L {\n                digits = 1L\n            }\n        }\n        return\
    \ result", "        var result = 0L\n        for (i <- 0 until n) {\n        \
    \    var digit = i % 10\n            if (digit == 1) {\n                result\
    \ += 1L\n            } else {\n                result += (i / 10) * 10\n     \
    \       }\n        }\n        return result", "        val digits = scala.math.BigInt.range(1,\
    \ n)\n        val starts = digits.filter(d -> d.toString().startsWith(\"1\"))\n\
    \        val ends = digits.filter(d -> d.toString().endsWith(\"1\"))\n       \
    \ val startsOneEnds = starts.zip(ends).map(t -> t._1.toString().length() + t._2.toString().length()).sum()\n\
    \        return startsOneEnds", "        var result = 0L\n        for (i <- 0\
    \ until n) {\n            if (i == 0) {\n                result += 1L\n      \
    \      } else {\n                result += (10L * (i - 1) + 1L) * (10L * (n -\
    \ i) + 1L)\n            }\n        }\n        return result", "        var result\
    \ = 0L\n        for (i <- 0 until n) {\n            if (i == 0) {\n          \
    \      result += 1\n            } else {\n                result += (i * 9) +\
    \ 1\n            }\n        }\n        return result", "        val digits = scala.collection.mutable.Buffer[Long]()\n\
    \        for (i <- 1 to n) {\n            digits.append(i)\n        }\n      \
    \  val result = 0\n        for (i <- 1 to n) {\n            if (digits.apply(i)\
    \ == 1) {\n                result += 1\n            }\n        }\n        return\
    \ result", "        var result = 0L\n        for (i <- 1L to n) {\n          \
    \  if (i % 10 == 1) {\n                result += 1L\n            }\n        }\n\
    \        return result", "        val result = 0L\n        for (i <- 0 until n)\
    \ {\n            val digit = i % 10\n            if (digit == 1) {\n         \
    \       result += 1L\n            } else {\n                result += (i / 10)\
    \ * 10\n            }\n        }\n        return result", "        var digits\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 1 to n) {\n\
    \            digits.append(i)\n        }\n        var result = 0\n        for\
    \ (i <- 1 to n) {\n            if (digits.get(i) == 1) {\n                result\
    \ += 1\n            }\n            if (digits.get(i) > 1) {\n                digits.set(i\
    \ - 1, digits.get(i - 1) - 1)\n            }\n        }\n        return result",
  "        var digits = scala.math.BigInt(n)\n        var result = 0L\n        for\
    \ (i <- 1L to digits.intPart) {\n            var digit = digits.intPart - i\n\
    \            if (digit == 1) {\n                result += 1L\n            } else\
    \ {\n                break\n            }\n        }\n        for (i <- 1L to\
    \ digits.intPart) {\n            var digit = digits.intPart - i\n            if\
    \ (digit == 1) {\n                result += 1L\n            } else {\n       \
    \         break\n            }\n        }\n        return result", "        var\
    \ result = 0L\n        for (i <- 0 until n) {\n            if (i == 0) {\n   \
    \             result += 1L\n            } else {\n                result += (i\
    \ - 1) * 10L\n            }\n        }\n        return result", "        var i\
    \ = 1L\n        while (i < n) {\n            i = i + 1L\n            if (i % 10\
    \ == 1) {\n                i = i / 10\n            } else {\n                i\
    \ = i / 10 + 1L\n            }\n        }\n        return i", "        var result\
    \ = 0L\n        for (i <- 0 until n) {\n            var digit = i % 10\n     \
    \       if (digit == 1) {\n                result += 1L\n            }\n     \
    \       i /= 10\n        }\n        return result", "        var result = 0L\n\
    \        for (i <- 0 until n) {\n            var digit = i % 10\n            if\
    \ (digit == 1) {\n                result += 1L\n            } else {\n       \
    \         result += (digit - 1) * 10\n            }\n            i /= 10\n   \
    \     }\n        return result", "        var s = 0\n        for(i <- 0 until\
    \ n) {\n            if(i == 0) {\n                s += 1\n            } else {\n\
    \                s += (i * 10) + 1\n            }\n        }\n        return s",
  "        var result = 0L\n        for (i <- 0L to n - 1) {\n            if (i ==\
    \ 0L) {\n                result += 1L\n            } else {\n                result\
    \ += (i * 10L) + 1L\n            }\n        }\n        return result", "     \
    \   val result = 0L\n        for (i <- 1L to n) {\n            if (i % 10 == 1)\
    \ {\n                result += 1L\n            }\n            if (i % 10 == 0)\
    \ {\n                result += 1L\n            }\n        }\n        return result",
  "        var i = 1L\n        while (i < n) {\n            i = i * 10L\n        }\n\
    \        var j = 1L\n        while (j < n) {\n            j = j * 10L\n      \
    \  }\n        var k = 1L\n        while (k < n) {\n            k = k * 10L\n \
    \       }\n        var l = 1L\n        while (l < n) {\n            l = l * 10L\n\
    \        }\n        var m = 1L\n        while (m < n) {\n            m = m * 10L\n\
    \        }\n        var n = 1L\n        while (n < n) {\n            n = n * 10L\n\
    \        }\n        var o = 1L\n        while (o < n) {\n            o = o * 10L\n\
    \        }\n        var p = 1L\n        while (p < n) {\n            p = p * 10L\n\
    \        }\n        var q = 1L\n        while (q < n) {\n            q = q * 10L\n\
    \        }\n        var r = 1L\n        while (r < n) {\n            r = r * 10L\n\
    \        }\n        var s = 1L\n        while (s < n) {\n            s = s * 10L\n\
    \        }\n        var t = 1L\n        while (t < n) {\n            t = t * 10L\n\
    \        }\n        var u = 1L\n        while (u < n) {\n            u = u * 10L\n\
    \        }\n        var v = 1L\n        while (v < n) {\n            v = v * 10L\n\
    \        }\n        var w = 1L\n        while (w < n) {\n            w = w * 10L\n\
    \        }\n        var x = 1L\n        while (x < n) {\n            x = x * 10L\n\
    \        }\n        var y = 1L\n        while (y < n) {\n            y = y * 10L\n\
    \        }\n        var z = 1L\n        while (z < n) {\n            z = z * 10L\n\
    \        }\n        var a = 1L\n        while (a < n) {\n            a = a * 10L\n\
    \        }", "        var result = 0L\n        for (i <- 0 until n) {\n      \
    \      if (i == 0) {\n                result += 1L\n            } else {\n   \
    \             result += (i * 10L) + 1L\n            }\n        }\n        return\
    \ result", "        val nums = mutable.ListBuffer[Long]()\n        for i in range(1,\
    \ n) {\n            nums.append(i)\n        }\n        for i in range(1, n) {\n\
    \            nums.append(i * 10)\n        }\n        for i in range(1, n) {\n\
    \            nums.append(i * 100)\n        }\n        for i in range(1, n) {\n\
    \            nums.append(i * 1000)\n        }\n        for i in range(1, n) {\n\
    \            nums.append(i * 10000)\n        }\n        for i in range(1, n) {\n\
    \            nums.append(i * 100000)\n        }\n        for i in range(1, n)\
    \ {\n            nums.append(i * 1000000)\n        }\n        for i in range(1,\
    \ n) {\n            nums.append(i * 10000000)\n        }\n        for i in range(1,\
    \ n) {\n            nums.append(i * 100000000)\n        }\n        for i in range(1,\
    \ n) {\n            nums.append(i * 1000000000)\n        }\n        for i in range(1,\
    \ n) {\n            nums.append(i * 10000000000L)\n        }\n        for i in\
    \ range(1, n) {\n            nums.append(i * 100000000000L)\n        }\n     \
    \   for i in range(1, n) {\n            nums.append(i * 1000000000000L)\n    \
    \    }\n        for i in range(1, n) {\n            nums.append(i * 10000000000000L)\n\
    \        }\n        for i in range(1, n) {\n            nums.append(i * 100000000000000L)\n\
    \        }\n        for i in range(1, n) {\n            nums.append(i * 1000000000000000L)\n\
    \        }\n        for i in range(1, n) {\n            nums.append(i * 10000000000000000L)\n\
    \        }\n        for i in range(1, n) {\n            nums.append(i * 100000000000000000L)\n\
    \        }\n        for i", "        val nums = mutable.ListBuffer[Long]()\n \
    \       for i in range(1, n) {\n            val num = i\n            while num\
    \ > 0 {\n                nums.append(num % 10)\n                num /= 10\n  \
    \          }\n        }\n        val result = 0\n        for i in nums.toList.map(x\
    \ => x + 1).toList.map(x => x * x).toList.map(x => x + 1).toList.map(x => x *\
    \ x).toList.map(x => x + 1).toList.map(x => x * x).toList.map(x => x + 1).toList.map(x\
    \ => x * x).toList.map(x => x + 1).toList.map(x => x * x).toList.map(x => x +\
    \ 1).toList.map(x => x * x).toList.map(x => x + 1).toList.map(x => x * x).toList.map(x\
    \ => x + 1).toList.map(x => x * x).toList.map(x => x + 1).toList.map(x => x *\
    \ x).toList.map(x => x + 1).toList.map(x => x * x).toList.map(x => x + 1).toList.map(x\
    \ => x * x).toList.map(x => x + 1).toList.map(x => x * x).toList.map(x => x +\
    \ 1).toList.map(x => x * x).toList.map(x => x + 1).toList.map(x => x * x).toList.map(x\
    \ => x + 1).toList.map(x => x * x).toList.map(x => x + 1).toList.map(x => x *\
    \ x).toList.map(x => x + 1).toList.map(x => x * x).toList.map(x => x + 1).toList.map(x\
    \ => x * x).toList.map(x => x + 1).toList.map(x => x * x).toList.map(x => x +\
    \ 1).toList.map(x =>", "        var start = 1L\n        var end = start\n    \
    \    while (start <= n) {\n            start = start + 1L\n            end = end\
    \ + 1L\n            if (start == end) {\n                start = start + 1L\n\
    \                end = end + 1L\n            }\n        }\n        return end",
  "        val result = 0L\n        for (i <- 0 until n) {\n            val digit\
    \ = i % 10\n            if (digit == 1) {\n                result += 1L\n    \
    \        } else {\n                result += (i / 10) * (10 - digit)\n       \
    \     }\n        }\n        return result", "        val s = \"\"\n        for(i\
    \ <- 0 until n) {\n            s += \"1\"\n        }\n        val t = s.toInt\n\
    \        if(t == 0) {\n            return 0\n        } else {\n            return\
    \ 1 + startsOneEnds(n - t)\n        }", "        var result = 0L\n        for\
    \ (i <- 0 until n) {\n            var digit = i % 10\n            if (digit ==\
    \ 1) {\n                result += 1L\n            }\n            i /= 10\n   \
    \     }\n        return result", "        var digits = scala.collection.mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until n) {\n            digits.append(i)\n        }\n   \
    \     var result = 0\n        for (i <- 0 until digits.size) {\n            var\
    \ digit = digits.get(i)\n            if (digit == 1) {\n                result\
    \ += 1\n            }\n            if (digit > 1) {\n                result +=\
    \ 1\n            }\n        }\n        return result", "        var result = 0L\n\
    \        for (i <- 0 until n) {\n            if (i == 0) {\n                result\
    \ += 1L\n            } else {\n                result += (i * 10) + 1L\n     \
    \       }\n        }\n        return result", "        var digits = scala.collection.mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until n) {\n            digits.append(i)\n        }\n   \
    \     var result = 0L\n        for (i <- 0 until digits.size) {\n            var\
    \ digit = digits.get(i)\n            if (digit == 1) {\n                result\
    \ += 1L\n            }\n            if (digit > 1) {\n                result +=\
    \ 1L\n            }\n        }\n        return result", "        var i = 1L\n\
    \        while (i < n) {\n            i = i + 1L\n            if (i % 10 == 1)\
    \ {\n                i = i / 10\n            } else {\n                i = i /\
    \ 10 + 1L\n            }\n        }\n        return i", "        var s = 0L\n\
    \        for (i <- 0 to n - 1) {\n            if (i == 0) {\n                s\
    \ += 1L\n            } else {\n                s += (i * 10L + 1L)\n         \
    \   }\n        }\n        return s", "        var result = 0L\n        for (i\
    \ <- 0 until n) {\n            if (i == 0) {\n                result += 1L\n \
    \           } else {\n                result += (i * 10L) + 1L\n            }\n\
    \        }\n        return result", "        var digits = scala.collection.mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until n) {\n            digits.append(i)\n        }\n   \
    \     var result = 0\n        for (i <- 0 until digits.size) {\n            if\
    \ (digits.get(i) == 1) {\n                result += 1\n            }\n       \
    \     if (digits.get(i) == n) {\n                result += 1\n            }\n\
    \        }\n        return result", "        var start = 0\n        var end =\
    \ 0\n        for i in 1 to n {\n            start = start + 1\n            end\
    \ = end + 1\n            if start == 10 {\n                start = 0\n       \
    \     }\n            if end == 10 {\n                end = 0\n            }\n\
    \        }\n        return start + end", "        val result = 0L\n        for\
    \ (i <- 0 until n) {\n            val digit = i % 10\n            if (digit ==\
    \ 1) {\n                result += 1L\n            } else {\n                result\
    \ += (10 - digit) * (10 - digit)\n            }\n            i /= 10\n       \
    \ }\n        return result", "        var result = 0L\n        for (i <- 0 until\
    \ n) {\n            var digit = i % 10\n            if (digit == 1) {\n      \
    \          result += 1L\n            }\n            i /= 10\n        }\n     \
    \   return result", "        var result = 0L\n        for (i <- 0 until n) {\n\
    \            if (i == 0) {\n                result += 1L\n            } else {\n\
    \                result += (i * 10) + 1L\n            }\n        }\n        return\
    \ result", "        var s = 0L\n        for(i <- 0 until n) {\n            if(i\
    \ == 0) {\n                s += 1L\n            } else {\n                s +=\
    \ (i * 10L)\n            }\n        }\n        return s", "        var s = 0L\n\
    \        for(i <- 0L to n - 1) {\n            if(i == 0) {\n                s\
    \ += 1L\n            } else {\n                s += i\n            }\n       \
    \ }\n        return s", "        var result = 0L\n        for (i <- 0 until n)\
    \ {\n            if (i == 0) {\n                result += 1L\n            } else\
    \ {\n                result += (i * 10L)\n            }\n        }\n        return\
    \ result", "        var i = 0\n        while(i < n) {\n            var j = 0\n\
    \            while(j < n) {\n                if(j == 0) {\n                  \
    \  j++\n                } else {\n                    j--\n                }\n\
    \            }\n            i++\n        }", "        var i = 0\n        while\
    \ (i < n) {\n            var j = 0\n            while (j < n) {\n            \
    \    if (j == 0) {\n                    j++\n                } else {\n      \
    \              j--\n                }\n            }\n            i++\n      \
    \  }", "        var result = 0L\n        for (i <- 0 until n) {\n            var\
    \ digit = i % 10\n            if (digit == 1) {\n                result += 1L\n\
    \            }\n            i /= 10\n        }\n        return result", "    \
    \    var i = 0\n        var j = 0\n        var count = 0\n        while (i < n)\
    \ {\n            if (j == 0) {\n                count += 1\n                i\
    \ += 1\n                j = 1\n            } else {\n                j -= 1\n\
    \            }\n        }\n        return count", "        val digits = scala.collection.mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until n) {\n          digits.append(i)\n        }\n     \
    \   val digits = digits.toList\n        val result = 0\n        for (i <- 0 until\
    \ digits.size) {\n          val digit = digits[i]\n          val start = digit\
    \ == 0\n          val end = digit == 1\n          if (start || end) {\n      \
    \      result += 1\n          }\n        }\n        result", "        val nums\
    \ = mutable.List[Long]()\n        for i in range(1, n) {\n            nums.append(i)\n\
    \        }\n        for i in range(n, 0, -1) {\n            nums.append(i)\n \
    \       }\n        val result = 0L\n        for i in nums.toSeq.map(x => x.toString).toSeq.map(x\
    \ => x.length()).toSeq.map(x => x - 1).toSeq.map(x => x.toInt).toSeq.map(x =>\
    \ x + 1).toSeq.map(x => x.toInt).toSeq.map(x => x).toSeq.map(x => x).toSeq.map(x\
    \ => x).toSeq.map(x => x).toSeq.map(x => x).toSeq.map(x => x).toSeq.map(x => x).toSeq.map(x\
    \ => x).toSeq.map(x => x).toSeq.map(x => x).toSeq.map(x => x).toSeq.map(x => x).toSeq.map(x\
    \ => x).toSeq.map(x => x).toSeq.map(x => x).toSeq.map(x => x).toSeq.map(x => x).toSeq.map(x\
    \ => x).toSeq.map(x => x).toSeq.map(x => x).toSeq.map(x => x).toSeq.map(x => x).toSeq.map(x\
    \ => x).toSeq.map(x => x).toSeq.map(x => x).toSeq.map(x => x).toSeq.map(x => x).toSeq.map(x\
    \ => x).toSeq.map(x => x).toSeq.map(x => x).toSeq.map(x => x).toSeq.map(x => x).toSeq.map(x\
    \ => x).toSeq.map(x => x).toSeq.map(x => x).toSeq.map(x", "        val nums =\
    \ mutable.List[Long]()\n        for i in 1 to n {\n            val num = i\n \
    \           while num > 0 {\n                nums.append(num % 10)\n         \
    \       num /= 10\n            }\n        }\n        val count = 0\n        for\
    \ i in nums.reverse() {\n            if i == 1 {\n                count += 1\n\
    \            }\n        }\n        return count", "        var start = 1L\n  \
    \      var end = start\n        while (start <= n) {\n            start = start\
    \ + 1L\n            end = end + 1L\n        }\n        return end", "        var\
    \ result = 0L\n        for (i <- 0L to (n - 1)) {\n            var digit = i %\
    \ 10\n            if (digit == 1) {\n                result += 1L\n          \
    \  }\n        }\n        return result", "        var start = 1L\n        var\
    \ end = start\n        var count = 0L\n        while (start <= n) {\n        \
    \    end = start + 1L\n            while (end <= n && end % 10L == 0L) {\n   \
    \             end = end + 1L\n            }\n            if (end > n) {\n    \
    \            count = count + 1L\n            }\n            start = start + 1L\n\
    \        }\n        return count", "        val result = 0L\n        for (i <-\
    \ 0 until n) {\n            val digit = i % 10\n            if (digit == 1) {\n\
    \                result += 1L\n            }\n            i /= 10\n        }\n\
    \        return result", "        var start = 1L\n        var end = start\n  \
    \      while (start <= n) {\n            start = start * 10L\n            end\
    \ = end + 1L\n        }\n        return end - start + 1L", "        var result\
    \ = 0L\n        for (i <- 0 until n) {\n            if (i == 0) {\n          \
    \      result += 1L\n            } else {\n                result += (i * 10)\
    \ + 1L\n            }\n        }\n        return result", "        var i = 0\n\
    \        var j = 0\n        var count = 0\n        while (i < n) {\n         \
    \   if (j == 0) {\n                count += 1\n                i += 1\n      \
    \          j = 1\n            } else {\n                j -= 1\n            }\n\
    \        }\n        return count", "        val digits = scala.math.BigInt.range(1,\
    \ n)\n        val result = scala.collection.mutable.ListBuffer[Long]()\n     \
    \   for (i <- 0 until digits.size) {\n          val digit = digits.apply(i)\n\
    \          val start = digit.toString.substring(0, 1)\n          val end = digit.toString.substring(n\
    \ - 1)\n          if (start == \"1\" && end == \"1\") {\n            result.append(1)\n\
    \          }\n        }\n        result.toList", "        var result = 0L\n  \
    \      for (i <- 0L to n - 1) {\n            if (i == 0L) {\n                result\
    \ += 1L\n            } else {\n                result += (i * 10L)\n         \
    \   }\n        }\n        return result", "        var s = 0L\n        for i <-\
    \ 1L to n - 1L {\n            if (i % 10 == 1) {\n                s += 1L\n  \
    \          }\n        }\n        for i <- 1L to n - 1L {\n            if (i %\
    \ 10 == 9) {\n                s += 1L\n            }\n        }\n        return\
    \ s", "        var result = 0L\n        for (i <- 0 until n) {\n            var\
    \ digit = i % 10\n            if (digit == 1) {\n                result += 1L\n\
    \            }\n            i /= 10\n        }\n        return result", "    \
    \    val result = 0L\n        for (i <- 0 until n) {\n            val digit =\
    \ i % 10\n            if (digit == 1) {\n                result += 1L\n      \
    \      }\n            i /= 10\n        }\n        return result", "        var\
    \ result = 0L\n        for (i <- 1L to n) {\n            if (i % 10 == 1) {\n\
    \                result += 1L\n            }\n            if (i % 10 == 0) {\n\
    \                result += 1L\n            }\n        }\n        return result",
  "        var start = 1L\n        var end = start\n        while (end < 10L) {\n\
    \            end = start + 1L\n            while (end < 10L) {\n             \
    \   if (end % n == 0) {\n                    end = end / n\n                }\
    \ else {\n                    end = end + 1L\n                }\n            }\n\
    \            start = start + 1L\n        }\n        return start", "        var\
    \ result = 0L\n        for (i <- 1L to n) {\n            if (i % 10 == 1) {\n\
    \                result += 1L\n            }\n            if (i % 10 == 0) {\n\
    \                result += 1L\n            }\n        }\n        return result",
  "        var start = 1L\n        var end = start\n        for (i <- 0 until n -\
    \ 1) {\n            start = start * 10 + 1\n            end = end * 10 + 1\n \
    \       }\n        var count = 0L\n        for (i <- 0 until end - 1) {\n    \
    \        if (i == 0 || i == end - 1) {\n                count += 1L\n        \
    \    }\n        }\n        return count", "        var result = 0L\n        for\
    \ (i <- 0 until n) {\n            if (i == 0) {\n                result += 1L\n\
    \            } else {\n                result += (10L * (i - 1) + 1L) * (i + 1)\n\
    \            }\n        }\n        return result", "        val nDigits = n.toInt\n\
    \        val nDigitsInt = nDigits.toInt\n        val nDigitsIntPlusOne = nDigitsInt\
    \ + 1\n        val nDigitsIntPlusOneInt = nDigitsIntPlusOne.toInt\n        val\
    \ nDigitsIntPlusOneIntPlusOne = nDigitsIntPlusOneInt + 1\n        val nDigitsIntPlusOneIntPlusOneInt\
    \ = nDigitsIntPlusOneIntPlusOne.toInt\n        val nDigitsIntPlusOneIntPlusOneIntPlusOne\
    \ = nDigitsIntPlusOneIntPlusOneInt + 1\n        val nDigitsIntPlusOneIntPlusOneIntPlusOneInt\
    \ = nDigitsIntPlusOneIntPlusOneIntPlusOne.toInt\n        val nDigitsIntPlusOneIntPlusOneIntPlusOneIntPlusOne\
    \ = nDigitsIntPlusOneIntPlusOneIntPlusOneInt + 1\n        val nDigitsIntPlusOneIntPlusOneIntPlusOneIntPlusOneInt\
    \ = nDigitsIntPlusOneIntPlusOneIntPlusOneIntPlusOne.toInt\n        val nDigitsIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne\
    \ = nDigitsIntPlusOneIntPlusOneIntPlusOneIntPlusOneInt + 1\n        val nDigitsIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneInt\
    \ = nDigitsIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne.toInt\n        val\
    \ nDigitsIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne = nDigitsIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneInt\
    \ + 1\n        val nDigitsIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne\
    \ = nDigitsIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne.toInt\n\
    \        val nDigitsIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne\
    \ = nDigitsIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneInt + 1\n\
    \        val nDigitsIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne\
    \ = n", "        var result = 0L\n        for (i <- 1L to n) {\n            if\
    \ (i % 10 == 1) {\n                result += 1L\n            }\n            if\
    \ (i % 10 == 9) {\n                result += 1L\n            }\n        }\n  \
    \      return result", "        var result = 0L\n        for (i <- 0 until n)\
    \ {\n            if (i == 0) {\n                result += 1L\n            } else\
    \ {\n                result += (i * (i + 1) / 2)\n            }\n        }\n \
    \       return result", "        var start = 1L\n        var end = start\n   \
    \     while (end < n) {\n            end = end + 1L\n            if (end % 10\
    \ == 1) {\n                start = start + 1L\n            }\n        }\n    \
    \    return start", "        var result = 0L\n        for (i <- 0L to n - 1) {\n\
    \            if (i == 0L) {\n                result += 1L\n            } else\
    \ {\n                result += (i * 10L) + 1L\n            }\n        }\n    \
    \    return result", "        val result = 0L\n        for (i <- 0 until n) {\n\
    \            val digit = i % 10\n            if (digit == 1) {\n             \
    \   result += 1L\n            } else {\n                result += (digit - 1)\
    \ * (digit - 1)\n            }\n            i /= 10\n        }\n        result",
  "        var i = 0\n        while (i < n) {\n            var j = i\n           \
    \ while (j < n) {\n                if (j == 0) {\n                    j++\n  \
    \              } else {\n                    j = j - 1\n                }\n  \
    \              if (j == 0) {\n                    j++\n                } else\
    \ {\n                    j = j - 1\n                }\n                if (j ==\
    \ 0) {\n                    j++\n                } else {\n                  \
    \  j = j - 1\n                }\n                if (j == 0) {\n             \
    \       j++\n                } else {\n                    j = j - 1\n       \
    \         }\n                if (j == 0) {\n                    j++\n        \
    \        } else {\n                    j = j - 1\n                }\n        \
    \        if (j == 0) {\n                    j++\n                } else {\n  \
    \                  j = j - 1\n                }\n                if (j == 0) {\n\
    \                    j++\n                } else {\n                    j = j\
    \ - 1\n                }\n                if (j == 0) {\n                    j++\n\
    \                } else {\n                    j = j - 1\n                }\n\
    \                if (j == 0) {\n                    j++\n                } else\
    \ {\n                    j = j - 1\n                }\n                if (j ==\
    \ 0) {\n                    j++\n                } else {\n                  \
    \  j = j - 1\n                }\n                if (j == 0) {\n             \
    \       j++\n                } else {\n                    j = j - 1\n       \
    \         }\n                if (j == 0) {\n                    j++\n        \
    \        } else {\n                    j = j - 1\n                }\n        \
    \        if (j == 0) {\n                    j++\n                } else {\n  \
    \                  j = j - 1\n                }\n                if (j == 0) {\n\
    \                    j++\n                } else {\n                    j = j\
    \ - 1\n                }\n                if (j == 0) {\n                    j++\n\
    \                } else {\n                    j = j - 1\n                }\n\
    \                if (j == 0) {\n                    j++\n                } else\
    \ {\n                    j = j - 1\n                }\n                if (j ==\
    \ 0) {\n                    j++\n                } else {\n                  \
    \  j = j - 1\n                }\n                if (j == 0", "        var i =\
    \ 1L\n        while (i < n) {\n            i = i + 1L\n            if (i % 10\
    \ == 1) {\n                i = i / 10\n            } else {\n                i\
    \ = i / 10 + 1L\n            }\n        }\n        return i", "        var start\
    \ = 1L\n        var end = start\n        while (start <= n) {\n            start\
    \ = start * 10\n            end = end + 1L\n        }\n        return end - start\
    \ + 1L", "        val digits = scala.math.BigInt.range(1, n).toArray[scala.math.BigInt]\n\
    \        val result = 0L\n        for (i <- 0 until digits.length - 1) {\n   \
    \       val digit = digits[i]\n          val start = digit.toString.substring(0,\
    \ 1)\n          val end = digit.toString.substring(n - 1)\n          if (start\
    \ == \"1\" || end == \"1\") {\n            result += 1L\n          }\n       \
    \ }\n        return result", "        val result = 0L\n        for (i <- 0 until\
    \ n) {\n            val digit = i % 10\n            if (digit == 1) {\n      \
    \          result += 1L\n            } else {\n                result += (digit\
    \ - 1) * 9L\n            }\n            i /= 10\n        }\n        return result",
  "        val result = 0L\n        for (i <- 0 until n) {\n            val digit\
    \ = i % 10\n            if (digit == 1) {\n                result += 1L\n    \
    \        }\n            i /= 10\n        }\n        return result", "        var\
    \ result = 0L\n        for (i <- 0L to (n - 1)) {\n            var digit = i %\
    \ 10L\n            if (digit == 1L) {\n                result += 1L\n        \
    \    } else {\n                break\n            }\n        }\n        for (i\
    \ <- 0L to (n - 1)) {\n            var digit = i % 10L\n            if (digit\
    \ == 1L) {\n                result += 1L\n            } else {\n             \
    \   break\n            }\n        }\n        return result", "        val result\
    \ = 0L\n        for (i <- 0 until n) {\n            val digit = i % 10\n     \
    \       if (digit == 1) {\n                result += 1L\n            } else {\n\
    \                result += (digit - 1) * 10\n            }\n            i /= 10\n\
    \        }\n        result", "        var start = 1L\n        var end = 1L\n \
    \       for (i <- 1L to n) {\n            start = start * 10 + 1L\n          \
    \  end = end * 10 + 1L\n        }\n        start", "        val digits = scala.collection.mutable.Buffer[Long]()\n\
    \        for (i <- 0 until n) {\n            digits.append(i)\n        }\n   \
    \     val result = 0\n        for (i <- 0 until digits.length) {\n           \
    \ if (digits.apply(i) == 1) {\n                result += 1\n            }\n  \
    \      }\n        return result", "        val digits = scala.math.BigInt.range(1,\
    \ n).toSeq\n        val starts = digits.filter(d => d == 1).toSeq\n        val\
    \ ends = digits.filter(d => d == 1).toSeq\n        val result = starts.length\
    \ + ends.length\n        return result", "        val result = 0L\n        for\
    \ (i <- 0 until n) {\n            val s = i.toString\n            if (s.startsWith(\"\
    1\")) {\n                result += 1L\n            }\n            if (s.endsWith(\"\
    1\")) {\n                result += 1L\n            }\n        }\n        result",
  "        var result = 0L\n        for (i <- 0 until n) {\n            var digit\
    \ = i % 10\n            if (digit == 1) {\n                result += 1L\n    \
    \        } else {\n                result += (digit - 1) * (digit - 1)\n     \
    \       }\n            i /= 10\n        }\n        return result", "        val\
    \ nums = mutable.List[Long]()\n        for i in range(1, n) {\n            nums.append(i)\n\
    \        }\n        val result = mutable.List[Long]()\n        for i in nums {\n\
    \            val num = i.toString().replaceAll(\"^0+\", \"\").replaceAll(\"^$\"\
    , \"\").replaceAll(\"^[1-9]\", \"\")\n            if (num.length() == n) {\n \
    \               result.append(1)\n            } else if (num.length() == n - 1)\
    \ {\n                result.append(2)\n            }\n        }\n        result.foreach(x\
    \ => println(x))\n        result.foreach(x => println(x))\n        result.foreach(x\
    \ => println(x))\n        result.foreach(x => println(x))\n        result.foreach(x\
    \ => println(x))\n        result.foreach(x => println(x))\n        result.foreach(x\
    \ => println(x))\n        result.foreach(x => println(x))\n        result.foreach(x\
    \ => println(x))\n        result.foreach(x => println(x))\n        result.foreach(x\
    \ => println(x))\n        result.foreach(x => println(x))\n        result.foreach(x\
    \ => println(x))\n        result.foreach(x => println(x))\n        result.foreach(x\
    \ => println(x))\n        result.foreach(x => println(x))\n        result.foreach(x\
    \ => println(x))\n        result.foreach(x => println(x))\n        result.foreach(x\
    \ => println(x))\n        result.foreach(x => println(x))\n        result.foreach(x\
    \ => println(x))\n        result.foreach(x => println(x))\n        result.foreach(x\
    \ => println(x))\n        result.foreach(x => println(x))\n        result.foreach(x\
    \ => println(x))\n        result.foreach(x => println(x))\n        result.foreach(x\
    \ => println(x))\n        result.foreach(x => println(x))\n", "        val result\
    \ = 0L\n        for (i <- 0 until n) {\n            val digit = i % 10\n     \
    \       if (digit == 1) {\n                result += 1L\n            }\n     \
    \       i /= 10\n        }\n        return result", "        var start = 1L\n\
    \        var end = 1L\n        for (i <- 0 until n) {\n            start = start\
    \ * 10 + 1L\n            end = end * 10 + 1L\n        }\n        start", "   \
    \     var i = 1L\n        while (i <= n) {\n            var j = 1L\n         \
    \   while (j <= n) {\n                if (j == 1L) {\n                    j++\n\
    \                } else {\n                    j--\n                }\n      \
    \      }\n            i++\n        }", "        var result = 0L\n        for (i\
    \ <- 0 until n) {\n            var digit = i % 10\n            if (digit == 1)\
    \ {\n                result += 1L\n            }\n            i /= 10\n      \
    \  }\n        return result", "        var result = 0L\n        for (i <- 0 until\
    \ n) {\n            if (i == 0) {\n                result += 1\n            }\
    \ else {\n                result += (i - 1) * 10 + 1\n            }\n        }\n\
    \        return result", "        var digits = 1L\n        var start = 1L\n  \
    \      var end = 1L\n        while (digits < n) {\n            digits = digits\
    \ + 1L\n            start = start * 10L\n            end = end * 10L\n       \
    \ }\n        var result = 0L\n        var i = start\n        while (i <= end)\
    \ {\n            if (i % 10L == 1L) {\n                result = result + 1L\n\
    \            }\n            i = i + 1L\n        }\n        return result", " \
    \       var result = 0L\n        for (i <- 0L to n - 1) {\n            if (i ==\
    \ 0L) {\n                result += 1L\n            } else {\n                result\
    \ += (i * 10L)\n            }\n        }\n        return result", "        val\
    \ nDigits = n.toInt\n        val result = 0L\n        for (i <- 0 until nDigits)\
    \ {\n          val digit = i.toInt\n          if (digit == 1) {\n            result\
    \ += 1L\n          } else {\n            result += 1L + startsOneEnds(n - digit)\n\
    \          }\n        }\n        return result", "        var result = 0L\n  \
    \      for (i <- 0 until n) {\n            var digit = i % 10\n            if\
    \ (digit == 1) {\n                result += 1L\n            } else {\n       \
    \         result += (10L - digit)\n            }\n        }\n        return result",
  "        var result = 0L\n        for (i <- 0L to n - 1) {\n            if (i ==\
    \ 0L) {\n                result += 1L\n            } else {\n                result\
    \ += (i * 10L) + 1L\n            }\n        }\n        return result", "     \
    \   val result = 0L\n        for (i <- 0 until n) {\n            val digit = i\
    \ % 10\n            if (digit == 1) {\n                result += 1L\n        \
    \    }\n            i /= 10\n        }\n        return result", "        var i\
    \ = 0\n        while (i < n) {\n            var j = 0\n            while (j <\
    \ n) {\n                if (j == 0) {\n                    j = 1\n           \
    \     } else {\n                    j = j + 1\n                }\n           \
    \ }\n            i = i + 1\n        }\n        return i", "        var result\
    \ = 0L\n        for (i <- 0L to n - 1) {\n            if (i % 10 == 1) {\n   \
    \             result += 1L\n            }\n            if (i % 10 == 0) {\n  \
    \              result += 1L\n            }\n        }\n        return result",
  "        var result = 0L\n        for (i <- 0 until n) {\n            var digit\
    \ = i % 10\n            if (digit == 1) {\n                result += 1L\n    \
    \        }\n            i /= 10\n        }\n        return result", "        var\
    \ result = 0L\n        for (i <- 0 until n) {\n            if (i == 0) {\n   \
    \             result += 1L\n            } else {\n                result += (i\
    \ - 1) * 9L\n            }\n        }\n        return result", "        var result\
    \ = 0L\n        for (i <- 0 until n) {\n            if (i == 0) {\n          \
    \      result += 1L\n            } else {\n                result += (i * 9) +\
    \ 1\n            }\n        }\n        return result", "        val s = \"\"\n\
    \        for(i <- 0 until n) {\n            s += \"1\"\n        }\n        val\
    \ r = startsOneEnds(n - 1)\n        val t = startsOneEnds(n - 2)\n        val\
    \ m = startsOneEnds(n - 3)\n        val n = startsOneEnds(n - 4)\n        val\
    \ o = startsOneEnds(n - 5)\n        val p = startsOneEnds(n - 6)\n        val\
    \ q = startsOneEnds(n - 7)\n        val r = startsOneEnds(n - 8)\n        val\
    \ s = startsOneEnds(n - 9)\n        val t = startsOneEnds(n - 10)\n        val\
    \ u = startsOneEnds(n - 11)\n        val v = startsOneEnds(n - 12)\n        val\
    \ w = startsOneEnds(n - 13)\n        val x = startsOneEnds(n - 14)\n        val\
    \ y = startsOneEnds(n - 15)\n        val z = startsOneEnds(n - 16)\n        val\
    \ a = startsOneEnds(n - 17)\n        val b = startsOneEnds(n - 18)\n        val\
    \ c = startsOneEnds(n - 19)\n        val d = startsOneEnds(n - 20)\n        val\
    \ e = startsOneEnds(n - 21)\n        val f = startsOneEnds(n - 22)\n        val\
    \ g = startsOneEnds(n - 23)\n        val h = startsOneEnds(n - 24)\n        val\
    \ i = startsOneEnds(n - 25)\n        val j = startsOneEnds(n - 26)\n        val\
    \ k = startsOneEnds(n - 27)\n        val l = startsOneEnds(n - 28)\n        val\
    \ m = startsOneEnds(n - 29)\n        val n = startsOneEnds(n - 30)\n        val\
    \ o = startsOneEnds(n - 31)\n        val p = startsOneEnds(n - 32)\n        val\
    \ q = startsOneEnds(n - 33)\n        val r = startsOneEnds(n - 34)\n        val\
    \ s = startsOneEnds(", "        var count = 0L\n        for (i <- 1L to n) {\n\
    \            if (i.toString().startsWith(\"1\")) {\n                count += 1L\n\
    \            }\n        }\n        return count", "        var s = 0L\n      \
    \  for (i <- 0 until n) {\n            if (i == 0) {\n                s += 1L\n\
    \            } else {\n                s += (i * 10L) + 1L\n            }\n  \
    \      }\n        return s", "        val digits = scala.collection.mutable.Buffer[Long]()\n\
    \        for (i <- 0 until n) {\n          digits.append(i)\n        }\n     \
    \   val result = scala.collection.mutable.Buffer[Long]()\n        for (i <- 0\
    \ until digits.length) {\n          if (digits.apply(i) == 1) {\n            result.append(i)\n\
    \          }\n        }\n        result.foreach(i => {\n          if (digits.apply(i)\
    \ == 1) {\n            result.append(i)\n          }\n        })\n        result.foreach(i\
    \ => {\n          if (digits.apply(i) == 1) {\n            result.append(i)\n\
    \          }\n        })\n        result.foreach(i => {\n          if (digits.apply(i)\
    \ == 1) {\n            result.append(i)\n          }\n        })\n        result.foreach(i\
    \ => {\n          if (digits.apply(i) == 1) {\n            result.append(i)\n\
    \          }\n        })\n        result.foreach(i => {\n          if (digits.apply(i)\
    \ == 1) {\n            result.append(i)\n          }\n        })\n        result.foreach(i\
    \ => {\n          if (digits.apply(i) == 1) {\n            result.append(i)\n\
    \          }\n        })\n        result.foreach(i => {\n          if (digits.apply(i)\
    \ == 1) {\n            result.append(i)\n          }\n        })\n        result.foreach(i\
    \ => {\n          if (digits.apply(i) == 1) {\n            result.append(i)\n\
    \          }\n        })\n        result.foreach(i => {\n          if (digits.apply(i)\
    \ == 1) {\n            result.append(i)\n          }\n        })\n        result.foreach(i\
    \ => {\n          if (digits.apply(i) == 1) {\n            result.append(i)\n\
    \          }\n        })\n        result.foreach(i => {\n          if (digits.apply(i)\
    \ ==", "        val nDigits = n.toInt\n        val result = 0L\n        for (i\
    \ <- 1 to nDigits) {\n          val digit = i.toInt\n          if (digit == 1)\
    \ {\n            result += 1L\n          } else {\n            result += (n -\
    \ i) * (n - i + 1) / 2\n          }\n        }\n        result", "        var\
    \ start = 0\n        var end = 0\n        for i <- 0 until n {\n            start\
    \ = start + 1\n            end = end + 1\n            if start == 1 {\n      \
    \          start = 0\n            }\n            if end == 1 {\n             \
    \   end = 0\n            }\n        }\n        start", "        var i = 1L\n \
    \       while (i <= n) {\n            var j = 1L\n            while (j <= n) {\n\
    \                if (j == 1L) {\n                    j++\n                } else\
    \ {\n                    j--\n                }\n            }\n            i++\n\
    \        }", "        var i = 0\n        while (i < n) {\n            var j =\
    \ 0\n            while (j < n) {\n                if (j == 0) {\n            \
    \        j = 1\n                } else {\n                    j = j + 1\n    \
    \            }\n            }\n            i = i + 1\n        }", "        var\
    \ result = 0L\n        for (i <- 0L to n - 1) {\n            if (i == 0L) {\n\
    \                result += 1L\n            } else {\n                result +=\
    \ (i * 10L)\n            }\n        }\n        return result", "        var start\
    \ = 1L\n        var end = 1L\n        for i in 1 to n {\n            start = start\
    \ * 10 + 1\n            end = end * 10 + 1\n        }\n        return start *\
    \ end", "        val digits = scala.math.BigInt.range(1, n)\n        val starts\
    \ = digits.filter(d => d == 1).toSeq.map(d => d.toString).map(d => d.length()).map(d\
    \ => d + 1).toSeq\n        val ends = digits.filter(d => d == 1).toSeq.map(d =>\
    \ d.toString).map(d => d.length()).map(d => d + 1).toSeq\n        starts.zip(ends).map(t\
    \ => t._1 + t._2).sum()", "        var result = 0L\n        for (i <- 0 until\
    \ n) {\n            var digit = i % 10\n            if (digit == 1) {\n      \
    \          result += 1L\n            } else {\n                result += (digit\
    \ - 1) * 10L\n            }\n            i /= 10\n        }\n        return result",
  "        var count = 0L\n        for (i <- 0 until n) {\n            if (i == 0)\
    \ {\n                count += 1L\n            }\n            if (i == n - 1) {\n\
    \                count += 1L\n            }\n            if (i > 0 && i < n -\
    \ 1) {\n                count += 1L\n            }\n        }\n        return\
    \ count", "        val s = mutable.ListBuffer[Long]()\n        for i in 1 to n\
    \ {\n            val n = i\n            if n.toString().startsWith(\"1\") {\n\
    \                s.append(n)\n            }\n        }\n        val s1 = mutable.ListBuffer[Long]()\n\
    \        for i in 1 to n {\n            val n = i\n            if n.toString().endsWith(\"\
    1\") {\n                s1.append(n)\n            }\n        }\n        s.appendAll(s1)\n\
    \        s.sort()\n        s.reverse()\n        return s.length()", "        var\
    \ start = 1L\n        var end = start\n        while (start <= n) {\n        \
    \    start = start * 10L\n            end = end + 1L\n        }\n        return\
    \ end", "        var result = 0L\n        for (i <- 0 until n) {\n           \
    \ var digit = i % 10\n            if (digit == 1) {\n                result +=\
    \ 1L\n            }\n            i /= 10\n        }\n        return result", " \
    \       var s = 0L\n        for (i <- 0 until n) {\n            var d = i\n  \
    \          var c = 1L\n            while (d != 0) {\n                d = d / 10\n\
    \                c = c * 10\n            }\n            if (c == 1) s += 1L\n\
    \        }\n        return s", "        var result = 0L\n        for (i <- 0 until\
    \ n) {\n            var digit = i % 10\n            if (digit == 1) {\n      \
    \          result += 1L\n            }\n            i /= 10\n        }\n     \
    \   return result", "        var start = 1L\n        var end = start\n       \
    \ while (start <= n) {\n            start = start * 10L\n            end = end\
    \ + 1L\n        }\n        return end - start + 1L", "        val result = 0L\n\
    \        for (i <- 0 until n) {\n            val digit = i % 10\n            if\
    \ (digit == 1) {\n                result += 1L\n            }\n            i /=\
    \ 10\n        }\n        return result", "        var result = 0L\n        for\
    \ (i <- 0L to n - 1) {\n            if (i % 10 == 1) {\n                result\
    \ += 1L\n            }\n            if (i % 10 == 0) {\n                result\
    \ += 1L\n            }\n        }\n        return result", "        var result\
    \ = 0L\n        for (i <- 0 until n) {\n            if (i == 0) {\n          \
    \      result += 1L\n            } else {\n                result += (i * 9L)\
    \ + 1L\n            }\n        }\n        return result", "        val s = \"\"\
    \n        for (i <- 0 until n) {\n            s += \"1\"\n        }\n        val\
    \ s1 = s.substring(0, n - 1)\n        val s2 = s.substring(1, n)\n        val\
    \ s3 = s.substring(n - 1, n)\n        val s4 = s.substring(n, n + 1)\n       \
    \ val s5 = s.substring(n + 1, n + 2)\n        val s6 = s.substring(n + 2, n +\
    \ 3)\n        val s7 = s.substring(n + 3, n + 4)\n        val s8 = s.substring(n\
    \ + 4, n + 5)\n        val s9 = s.substring(n + 5, n + 6)\n        val s10 = s.substring(n\
    \ + 6, n + 7)\n        val s11 = s.substring(n + 7, n + 8)\n        val s12 =\
    \ s.substring(n + 8, n + 9)\n        val s13 = s.substring(n + 9, n + 10)\n  \
    \      val s14 = s.substring(n + 10, n + 11)\n        val s15 = s.substring(n\
    \ + 11, n + 12)\n        val s16 = s.substring(n + 12, n + 13)\n        val s17\
    \ = s.substring(n + 13, n + 14)\n        val s18 = s.substring(n + 14, n + 15)\n\
    \        val s19 = s.substring(n + 15, n + 16)\n        val s20 = s.substring(n\
    \ + 16, n + 17)\n        val s21 = s.substring(n + 17, n + 18)\n        val s22\
    \ = s.substring(n + 18, n + 19)\n        val s23 = s.substring(n + 19, n + 20)\n\
    \        val s24 = s.substring(n + 20, n + 21)\n        val s25 = s.substring(n\
    \ + 21, n + 22)\n        val s26 = s.substring(n + 22, n + 23)\n        ", " \
    \       val result = 0L\n        for (i <- 0 until n) {\n            val digit\
    \ = i % 10\n            if (digit == 1) {\n                result += 1L\n    \
    \        }\n            i /= 10\n        }\n        return result", "        val\
    \ nums = mutable.List[Long]()\n        for i in 1 to n {\n            val num\
    \ = i\n            while num > 0 {\n                nums.append(num % 10)\n  \
    \              num /= 10\n            }\n        }\n        val result = 0\n \
    \       for i in nums.reverse() {\n            if i == 1 {\n                result\
    \ += 1\n            }\n        }\n        return result", "        val result\
    \ = 0L\n        for (i <- 0 until n) {\n            val digits = i.toString.padTo(n)\n\
    \            if (digits.startsWith(\"1\")) {\n                result += 1L\n \
    \           }\n            if (digits.endsWith(\"1\")) {\n                result\
    \ += 1L\n            }\n        }\n        result", "        var result = 0L\n\
    \        for (i <- 0 until n) {\n            if (i == 0) {\n                result\
    \ += 1L\n            } else {\n                result += (i * 9L) + 1L\n     \
    \       }\n        }\n        return result", "        var result = 0L\n     \
    \   for (i <- 0L to n - 1) {\n            if (i == 0L) {\n                result\
    \ += 1L\n            } else {\n                result += (i * 10L)\n         \
    \   }\n        }\n        return result", "        val nDigits = n.toInt\n   \
    \     val nDigits1 = nDigits - 1\n        val nDigits2 = nDigits - 2\n       \
    \ val nDigits3 = nDigits - 3\n        val nDigits4 = nDigits - 4\n        val\
    \ nDigits5 = nDigits - 5\n        val nDigits6 = nDigits - 6\n        val nDigits7\
    \ = nDigits - 7\n        val nDigits8 = nDigits - 8\n        val nDigits9 = nDigits\
    \ - 9\n        val nDigits10 = nDigits - 10\n        val nDigits11 = nDigits -\
    \ 11\n        val nDigits12 = nDigits - 12\n        val nDigits13 = nDigits -\
    \ 13\n        val nDigits14 = nDigits - 14\n        val nDigits15 = nDigits -\
    \ 15\n        val nDigits16 = nDigits - 16\n        val nDigits17 = nDigits -\
    \ 17\n        val nDigits18 = nDigits - 18\n        val nDigits19 = nDigits -\
    \ 19\n        val nDigits20 = nDigits - 20\n        val nDigits21 = nDigits -\
    \ 21\n        val nDigits22 = nDigits - 22\n        val nDigits23 = nDigits -\
    \ 23\n        val nDigits24 = nDigits - 24\n        val nDigits25 = nDigits -\
    \ 25\n        val nDigits26 = nDigits - 26\n        val nDigits27 = nDigits -\
    \ 27\n        val nDigits28 = nDigits - 28\n        val nDigits29 = nDigits -\
    \ 29\n        val nDigits30 = nDigits - 30\n        val nDigits31 = nDigits -\
    \ 31\n        val nDigits32 = nDigits - 32\n        val nDigits33 = nDigits -\
    \ 33\n        val nDigits34 = nDigits - 34\n        val nDigits35 = nDigits -\
    \ 35\n        val nDigits36 = nDigits - 36\n        val nDigits37 = nDigits -\
    \ 37\n        val nDigits38 = nDigits - 38\n        val nDigits39 =", "      \
    \  var start = 1L\n        var end = start\n        var count = 0L\n        while\
    \ (start <= n) {\n            end = start + 1L\n            while (end <= n) {\n\
    \                if (end % 10 == 1) {\n                    count += 1L\n     \
    \           }\n                end = end + 1L\n            }\n            start\
    \ = start + 1L\n        }\n        return count", "        val digits = scala.math.BigInt.range(1,\
    \ n).toSeq\n        val starts = digits.filter(d -> d.toString().startsWith(\"\
    1\")).count\n        val ends = digits.filter(d -> d.toString().endsWith(\"1\"\
    )).count\n        starts + ends", "        val result = 0L\n        for (i <-\
    \ 0 until n) {\n            val digit = i % 10\n            if (digit == 1) {\n\
    \                result += 1L\n            }\n            i /= 10\n        }\n\
    \        return result", "        val result = 0L\n        for (i <- 0 until n)\
    \ {\n            val digit = i % 10\n            if (digit == 1) {\n         \
    \       result += 1L\n            }\n            i /= 10\n        }\n        return\
    \ result", "        var s = 0L\n        for (i <- 0L to n - 1) {\n           \
    \ if (i == 0L) {\n                s += 1L\n            } else {\n            \
    \    s += (_.toInt(i) % 10) == 1L\n            }\n        }\n        return s",
  "        val result = 0L\n        for (i <- 0 until n) {\n            val digit\
    \ = i % 10\n            if (digit == 1) {\n                result += 1L\n    \
    \        } else {\n                result += (10L - digit) * (10L - digit + 1L)\
    \ / 2L\n            }\n            i /= 10\n        }\n        result", "    \
    \    var start = 1L\n        var end = 1L\n        var count = 0L\n        while(start\
    \ <= n) {\n            start = start * 10L\n            end = end * 10L + 9L\n\
    \            if(start <= n && end >= n) {\n                count += 1L\n     \
    \       }\n        }\n        return count", "        val result = 0L\n      \
    \  for (i <- 0 until n) {\n            val digit = i % 10\n            if (digit\
    \ == 1) {\n                result += 1L\n            } else {\n              \
    \  result += (i / 10) * 9L\n            }\n        }\n        return result",
  "        var result = 0L\n        for (i <- 0 until n) {\n            if (i == 0)\
    \ {\n                result += 1L\n            } else {\n                result\
    \ += (i * 9) + 1L\n            }\n        }\n        return result", "       \
    \ val result = 0L\n        for (i <- 0 until n) {\n            val digit = i %\
    \ 10\n            if (digit == 1) {\n                result += 1L\n          \
    \  }\n            i /= 10\n        }\n        return result", "        val digits\
    \ = scala.math.BigInt.range(1, n)\n        val starts = digits.filter(d -> d.toString().startsWith(\"\
    1\"))\n        val ends = digits.filter(d -> d.toString().endsWith(\"1\"))\n \
    \       val startsOneEnds = starts.zip(ends).map(t -> t._1.toString().length()\
    \ + t._2.toString().length()).sum()\n        return startsOneEnds", "        var\
    \ result = 0L\n        for (i <- 0 until n) {\n            var digit = i % 10\n\
    \            if (digit == 1) {\n                result += 1L\n            }\n\
    \            i /= 10\n        }\n        return result", "        val result =\
    \ 0L\n        for (i <- 0 until n) {\n            val digit = i % 10\n       \
    \     if (digit == 1) {\n                result += 1L\n            }\n       \
    \     i /= 10\n        }\n        return result", "        val s = \"\"\n    \
    \    for (i <- 0 until n) {\n            s += \"1\"\n        }\n        val s2\
    \ = s.replaceAll(\"1\", \"\")\n        val s3 = s2.replaceAll(\"0\", \"\")\n \
    \       val s4 = s3.replaceAll(\"1\", \"\")\n        val s5 = s4.replaceAll(\"\
    0\", \"\")\n        val s6 = s5.replaceAll(\"1\", \"\")\n        val s7 = s6.replaceAll(\"\
    0\", \"\")\n        val s8 = s7.replaceAll(\"1\", \"\")\n        val s9 = s8.replaceAll(\"\
    0\", \"\")\n        val s10 = s9.replaceAll(\"1\", \"\")\n        val s11 = s10.replaceAll(\"\
    0\", \"\")\n        val s12 = s11.replaceAll(\"1\", \"\")\n        val s13 = s12.replaceAll(\"\
    0\", \"\")\n        val s14 = s13.replaceAll(\"1\", \"\")\n        val s15 = s14.replaceAll(\"\
    0\", \"\")\n        val s16 = s15.replaceAll(\"1\", \"\")\n        val s17 = s16.replaceAll(\"\
    0\", \"\")\n        val s18 = s17.replaceAll(\"1\", \"\")\n        val s19 = s18.replaceAll(\"\
    0\", \"\")\n        val s20 = s19.replaceAll(\"1\", \"\")\n        val s21 = s20.replaceAll(\"\
    0\", \"\")\n        val s22 = s21.replaceAll(\"1\", \"\")\n        val s23 = s22.replaceAll(\"\
    0\", \"\")\n        val s24 = s23.replaceAll(\"1\", \"\")\n        val s25 = s24.replaceAll(\"\
    0\", \"\")\n        val s26 = s25.replaceAll(\"1\", \"\")\n        val s27 = s26.replaceAll(\"\
    0\", \"\")\n        val s28 = s27.replaceAll(\"1\", \"\")\n        val s29 = s28.replaceAll(\"\
    0\", \"\")\n        val s30 = s29.replaceAll(\"1\", \"\")\n        val s31 = s30.replaceAll(\"\
    0\", \"\")\n        val s32 = s", "        var digits = scala.collection.mutable.Buffer[Long]()\n\
    \        var i = 0\n        while (i < n) {\n            digits = digits.append(i)\n\
    \            i = i + 1\n        }\n        var result = 0\n        for (i <- 0\
    \ until digits.length) {\n            var digit = digits.apply(i)\n          \
    \  if (digit == 1) {\n                result = result + 1\n            }\n   \
    \     }\n        return result", "        var start = 1L\n        var end = start\n\
    \        while (start <= n) {\n            start = start * 10\n            end\
    \ = end + 1\n        }\n        return (end - start + 1)", "        var result\
    \ = 0L\n        for (i <- 0 until n) {\n            var digit = i % 10\n     \
    \       if (digit == 1) {\n                result += 1L\n            }\n     \
    \       i /= 10\n        }\n        return result", "        val nDigits = n.toInt\n\
    \        val result = 0L\n        for (i <- 1 to nDigits - 1) {\n          val\
    \ digit = i.toInt\n          if (digit == 1) {\n            result += 1L\n   \
    \       } else {\n            result += (n - digit)\n          }\n        }\n\
    \        result", "        var result = 0L\n        for (i <- 0L to n - 1) {\n\
    \            if (i % 10 == 1) {\n                result += 1L\n            }\n\
    \        }\n        return result", "        val digits = scala.math.BigInt.range(1,\
    \ n)\n        val result = digits.map(d -> d.toString).filter(s -> s.startsWith(\"\
    1\") || s.endsWith(\"1\")).count()\n        result", "        var digits = 1L\n\
    \        var start = 1L\n        while (digits <= n) {\n            digits = digits\
    \ * 10L\n            start = start * 10L\n        }\n        var result = 0L\n\
    \        for (i <- 1L to digits - 1L) {\n            result = result + scala.math.factorial(i)\n\
    \        }\n        result = result + scala.math.factorial(digits - 1L)\n    \
    \    result = result + scala.math.factorial(n - digits)\n        result = result\
    \ + scala.math.factorial(start - 1L)\n        result = result + scala.math.factorial(n\
    \ - start)\n        return result", "        var start = 1L\n        var end =\
    \ start\n        for (i <- 1L to n) {\n            start = start * 10 + 1L\n \
    \           end = end * 10 + 1L\n        }\n        var count = 0L\n        for\
    \ (i <- start to end) {\n            if (i == 1L) {\n                count +=\
    \ 1L\n            }\n        }\n        return count", "        var result = 0L\n\
    \        for (i <- 0L to (n - 1)) {\n            var digit = i % 10\n        \
    \    if (digit == 1) {\n                result += 1L\n            } else {\n \
    \               result += 2L\n            }\n        }\n        return result",
  "        var start = 1L\n        var end = 1L\n        for i in 1 to n {\n     \
    \       start = start * 10 + 1\n            end = end * 10 + 1\n        }\n  \
    \      start", "        var digits = \"\"\n        for (i <- 0 until n) {\n  \
    \          digits = digits + \"1\"\n        }\n        var start = 1\n       \
    \ var end = 1\n        var count = 0\n        while (start <= digits.length) {\n\
    \            if (start == digits.length) {\n                count = count + 1\n\
    \            } else {\n                var digit = digits[start]\n           \
    \     if (digit == \"1\") {\n                    count = count + 1\n         \
    \       }\n            }\n            start = start + 1\n        }\n        return\
    \ count", "        val nums = mutable.List[Long]()\n        for i in range(1,\
    \ n) {\n            nums.append(i)\n        }\n        for i in range(n, 0, -1)\
    \ {\n            nums.append(i)\n        }\n        val result = 0\n        for\
    \ i in nums.toSeq.map(x => x.toString).toSeq.map(x => x.length()).toSeq.map(x\
    \ => x - 1).toSeq.map(x => x + 1).toSeq.map(x => x.toInt).toSeq.map(x => x.toInt).toSeq.map(x\
    \ => x.toInt).toSeq.map(x => x.toInt).toSeq.map(x => x.toInt).toSeq.map(x => x.toInt).toSeq.map(x\
    \ => x.toInt).toSeq.map(x => x.toInt).toSeq.map(x => x.toInt).toSeq.map(x => x.toInt).toSeq.map(x\
    \ => x.toInt).toSeq.map(x => x.toInt).toSeq.map(x => x.toInt).toSeq.map(x => x.toInt).toSeq.map(x\
    \ => x.toInt).toSeq.map(x => x.toInt).toSeq.map(x => x.toInt).toSeq.map(x => x.toInt).toSeq.map(x\
    \ => x.toInt).toSeq.map(x => x.toInt).toSeq.map(x => x.toInt).toSeq.map(x => x.toInt).toSeq.map(x\
    \ => x.toInt).toSeq.map(x => x.toInt).toSeq.map(x => x.toInt).toSeq.map(x => x.toInt).toSeq.map(x\
    \ => x.toInt).toSeq.map(x => x.toInt).toSeq.map(x => x.toInt).toSeq.map(x", " \
    \       val nums = mutable.List[Long]()\n        for i in 1 to n {\n         \
    \   nums.append(i)\n        }\n        for i in 1 to n {\n            val num\
    \ = nums.head\n            nums.remove(num)\n            if num == 1 {\n     \
    \           nums.append(num * 10)\n            }\n        }\n        val result\
    \ = 0\n        for i in nums {\n            if i % 10 == 1 {\n               \
    \ result += 1\n            }\n        }\n        return result", "        var\
    \ result = 0L\n        for (i <- 0 until n) {\n            if (i == 0) {\n   \
    \             result += 1L\n            } else {\n                result += (i\
    \ - 1) * 10L\n            }\n        }\n        return result", "        val digits\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until n)\
    \ {\n            digits.append(i)\n        }\n        val result = scala.collection.mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until digits.size) {\n            val digit = digits.get(i)\n\
    \            if (digit == 1) {\n                result.append(1)\n           \
    \ } else {\n                result.append(0)\n            }\n        }\n     \
    \   result.append(0)\n        result.append(1)\n        result.append(0)\n   \
    \     result.append(0)\n        result.append(0)\n        result.append(0)\n \
    \       result.append(0)\n        result.append(0)\n        result.append(0)\n\
    \        result.append(0)\n        result.append(0)\n        result.append(0)\n\
    \        result.append(0)\n        result.append(0)\n        result.append(0)\n\
    \        result.append(0)\n        result.append(0)\n        result.append(0)\n\
    \        result.append(0)\n        result.append(0)\n        result.append(0)\n\
    \        result.append(0)\n        result.append(0)\n        result.append(0)\n\
    \        result.append(0)\n        result.append(0)\n        result.append(0)\n\
    \        result.append(0)\n        result.append(0)\n        result.append(0)\n\
    \        result.append(0)\n        result.append(0)\n        result.append(0)\n\
    \        result.append(0)\n        result.append(0)\n        result.append(0)\n\
    \        result.append(0)\n        result.append(0)\n        result.append(0)\n\
    \        result.append(0)\n        result.append(0)\n        result.append(0)\n\
    \        result.append(0)\n        result.append(0)\n        result.append(0)\n\
    \        result.append(0)\n        result.append(0)\n        result.append(0)\n\
    \        result.append(0)", "        val nDigits = n.toString.length\n       \
    \ val nDigitsStart = nDigits - 1\n        val nDigitsEnd = nDigitsStart + 1\n\
    \        val nDigitsStartOne = nDigitsStart + 1\n        val nDigitsEndOne = nDigitsEnd\
    \ + 1\n        val nDigitsStartOneEnds = nDigitsStartOne + nDigitsEnd - 1\n  \
    \      val nDigitsEndOneStarts = nDigitsEndOne + nDigitsStart - 1\n        val\
    \ nDigitsStartOneEndsOne = nDigitsStartOneEnds + 1\n        val nDigitsEndOneStartsOne\
    \ = nDigitsEndOneStarts + 1\n        val nDigitsStartOneEndsOneEnds = nDigitsStartOneEndsOne\
    \ + nDigitsEndOne - 1\n        val nDigitsEndOneStartsOneEnds = nDigitsEndOneStartsOne\
    \ + nDigitsStartOneEnds - 1\n        val nDigitsStartOneEndsOneEndsOne = nDigitsStartOneEndsOneEnds\
    \ + 1\n        val nDigitsEndOneStartsOneEndsOne = nDigitsEndOneStartsOneEnds\
    \ + 1\n        val nDigitsStartOneEndsOneEndsOneEnds = nDigitsStartOneEndsOneEndsOne\
    \ + nDigitsEndOneStartsOneEnds - 1\n        val nDigitsEndOneStartsOneEndsOneEnds\
    \ = nDigitsEndOneStartsOneEndsOne + nDigitsStartOneEndsOneEnds - 1\n        val\
    \ nDigitsStartOneEndsOneEndsOneEndsOne = nDigitsStartOneEndsOneEndsOneEnds + 1\n\
    \        val nDigitsEndOneStartsOneEndsOneEndsOne = nDigitsEndOneStartsOneEndsOneEnds\
    \ + 1\n        val nDigitsStartOneEndsOneEndsOneEndsOneEnds = nDigitsStartOneEndsOneEndsOneEndsOne\
    \ + nDigitsEndOneStartsOneEndsOneEnds - 1\n        val nDigitsEndOneStartsOneEndsOneEndsOneEnds\
    \ = nDigitsEndOneStartsOneEndsOneEndsOne + nDigitsStartOneEnd", "        val result\
    \ = 0L\n        for (i <- 0 until n) {\n            val digit = i % 10\n     \
    \       if (digit == 1) {\n                result += 1L\n            } else {\n\
    \                result += 1L * (10L - digit)\n            }\n            i /=\
    \ 10\n        }\n        result", "        var result = 0L\n        for (i <-\
    \ 0 until n) {\n            if (i == 0) {\n                result += 1L\n    \
    \        } else {\n                result += (i * 9L) + 1L\n            }\n  \
    \      }\n        return result", "        var result = 0L\n        for (i <-\
    \ 0 until n) {\n            if (i == 0) {\n                result += 1L\n    \
    \        } else {\n                result += (i - 1) * 10L\n            }\n  \
    \      }\n        return result", "        val nDigits = n.toInt\n        val\
    \ result = 0L\n        for (i <- 1L to nDigits) {\n            val digit = i.toInt\n\
    \            if (digit == 1) {\n                result += 1L\n            } else\
    \ {\n                result += (nDigits - i) * (nDigits - i + 1L) / 2L\n     \
    \       }\n        }\n        return result", "        var i = 0\n        var\
    \ j = 0\n        var count = 0\n        while (i < n) {\n            if (j ==\
    \ 0) {\n                count += 1\n                i += 1\n                j\
    \ = 1\n            } else {\n                j -= 1\n            }\n        }\n\
    \        return count", "        val s = mutable.ListBuffer[Long]()\n        for\
    \ i in 1 to n {\n            val d = i.toString.padTo(n)\n            if d.startsWith(\"\
    1\") {\n                s += 1\n            }\n            if d.startsWith(\"\
    10\") {\n                s += 1\n            }\n        }\n        s.toList",
  "        var result = 0L\n        for (i <- 0 until n) {\n            if (i == 0)\
    \ {\n                result += 1L\n            } else {\n                result\
    \ += (i * 10L) + 1L\n            }\n        }\n        return result", "     \
    \   val digits = new ArrayBuffer[Long]()\n        for (i <- 0 until n) {\n   \
    \         digits.append(i)\n        }\n        val result = 0\n        for (i\
    \ <- 0 until digits.length) {\n            val digit = digits.apply(i)\n     \
    \       if (digit == 1) {\n                result += 1\n            }\n      \
    \      if (digit == n) {\n                result += 1\n            }\n       \
    \ }\n        return result", "        val s = \"\"\n        for (i <- 0 until\
    \ n) {\n            s += \"1\"\n        }\n        val s1 = s.substring(0, n -\
    \ 1)\n        val s2 = s.substring(1, n)\n        val s3 = s.substring(n - 1)\n\
    \        val s4 = s.substring(0, 1)\n        val s5 = s.substring(n)\n       \
    \ val s6 = s.substring(0, n - 1)\n        val s7 = s.substring(n - 1)\n      \
    \  val s8 = s.substring(0, 1)\n        val s9 = s.substring(n)\n        val s10\
    \ = s.substring(0, n - 1)\n        val s11 = s.substring(n - 1)\n        val s12\
    \ = s.substring(0, 1)\n        val s13 = s.substring(n)\n        val s14 = s.substring(0,\
    \ n - 1)\n        val s15 = s.substring(n - 1)\n        val s16 = s.substring(0,\
    \ 1)\n        val s17 = s.substring(n)\n        val s18 = s.substring(0, n - 1)\n\
    \        val s19 = s.substring(n - 1)\n        val s20 = s.substring(0, 1)\n \
    \       val s21 = s.substring(n)\n        val s22 = s.substring(0, n - 1)\n  \
    \      val s23 = s.substring(n - 1)\n        val s24 = s.substring(0, 1)\n   \
    \     val s25 = s.substring(n)\n        val s26 = s.substring(0, n - 1)\n    \
    \    val s27 = s.substring(n - 1)\n        val s28 = s.substring(0, 1)\n     \
    \   val s29 = s.substring(n)\n        val s30 = s.substring(0, n - 1)\n      \
    \  val s31 = s.substring(n - 1)\n        val s32 = s.substring(0, 1)\n       \
    \ val s", "        val result = 0L\n        for (i <- 0 until n) {\n         \
    \   val digit = i % 10\n            if (digit == 1) {\n                result\
    \ += 1L\n            } else {\n                result += (10L - digit) * (10L\
    \ - digit)\n            }\n            i /= 10\n        }\n        result", " \
    \       var result = 0L\n        for (i <- 0 until n) {\n            if (i ==\
    \ 0) {\n                result += 1L\n            } else {\n                result\
    \ += (i - 1) * 10L\n            }\n        }\n        return result", "      \
    \  val s = mutable.ListBuffer[Long]()\n        for i in 1 to n {\n           \
    \ val n = i\n            for j in 1 to n {\n                val n1 = n\n     \
    \           val n2 = n\n                val n3 = n\n                val n4 = n\n\
    \                val n5 = n\n                val n6 = n\n                val n7\
    \ = n\n                val n8 = n\n                val n9 = n\n              \
    \  val n10 = n\n                val n11 = n\n                val n12 = n\n   \
    \             val n13 = n\n                val n14 = n\n                val n15\
    \ = n\n                val n16 = n\n                val n17 = n\n            \
    \    val n18 = n\n                val n19 = n\n                val n20 = n\n \
    \               val n21 = n\n                val n22 = n\n                val\
    \ n23 = n\n                val n24 = n\n                val n25 = n\n        \
    \        val n26 = n\n                val n27 = n\n                val n28 = n\n\
    \                val n29 = n\n                val n30 = n\n                val\
    \ n31 = n\n                val n32 = n\n                val n33 = n\n        \
    \        val n34 = n\n                val n35 = n\n                val n36 = n\n\
    \                val n37 = n\n                val n38 = n\n                val\
    \ n39 = n\n                val n40 = n\n                val n41 = n\n        \
    \        val n42 = n\n                val n43 = n\n                val n44 = n\n\
    \                val n45 = n\n                val n46 = n\n                val\
    \ n47 = n\n                val n48 = n\n                val n49 = n\n        \
    \        val n50 = n\n                val n51 = n\n                val n52 = n\n\
    \                val n53 = n\n                val n54 = n\n                val\
    \ n55 = n\n                val n56 = n\n                val n57 = n\n        \
    \        val n58 = n\n                val n59 = n\n                val n60 = n\n\
    \                val n61 = n\n                val n62 = n\n                val\
    \ n63 = n\n                val n64 = n\n                val n65 = n\n        \
    \        val n66 = n\n                val n67 = n\n                val n68 =",
  "        var result = 0L\n        for (i <- 0 until n) {\n            var digit\
    \ = i % 10\n            if (digit == 1) {\n                result += 1L\n    \
    \        }\n            i /= 10\n        }\n        return result", "        var\
    \ digits = 1L\n        while (digits < n) {\n            digits = digits * 10L\n\
    \        }\n        var result = 0L\n        for (var i = 0; i < digits; i++)\
    \ {\n            var digit = i\n            while (digit < n) {\n            \
    \    digit = digit * 10L\n            }\n            result += 1L\n        }\n\
    \        return result", "        val digits = scala.collection.mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until n) {\n          digits.append(i)\n        }\n     \
    \   val result = scala.collection.mutable.ListBuffer[Long]()\n        for (i <-\
    \ 0 until digits.size()) {\n          val digit = digits.get(i)\n          if\
    \ (digit == 1) {\n            result.append(1)\n          } else {\n         \
    \   result.append(0)\n          }\n        }\n        result.append(1)\n     \
    \   result.append(0)\n        result.append(0)\n        result.append(0)\n   \
    \     result.append(0)\n        result.append(0)\n        result.append(0)\n \
    \       result.append(0)\n        result.append(0)\n        result.append(0)\n\
    \        result.append(0)\n        result.append(0)\n        result.append(0)\n\
    \        result.append(0)\n        result.append(0)\n        result.append(0)\n\
    \        result.append(0)\n        result.append(0)\n        result.append(0)\n\
    \        result.append(0)\n        result.append(0)\n        result.append(0)\n\
    \        result.append(0)\n        result.append(0)\n        result.append(0)\n\
    \        result.append(0)\n        result.append(0)\n        result.append(0)\n\
    \        result.append(0)\n        result.append(0)\n        result.append(0)\n\
    \        result.append(0)\n        result.append(0)\n        result.append(0)\n\
    \        result.append(0)\n        result.append(0)\n        result.append(0)\n\
    \        result.append(0)\n        result.append(0)\n        result.append(0)\n\
    \        result.append(0)\n        result.append(0)\n        result.append(0)\n\
    \        result.append(0)\n        result.append(0)\n        result.append(0)\n\
    \        result.append(0)\n        result.append(0)\n        result.append(0)",
  "        var i = 1L\n        while (i <= n) {\n            var j = 1L\n        \
    \    while (j <= n) {\n                if (j == 1L) {\n                    j++\n\
    \                } else {\n                    j--\n                }\n      \
    \      }\n            i++\n        }", "        var result = 0L\n        for (i\
    \ <- 1L to n) {\n            if (i % 10 == 1) {\n                result += 1L\n\
    \            }\n            if (i % 10 == 0) {\n                result += 1L\n\
    \            }\n        }\n        return result", "        var start = 1L\n \
    \       var end = start\n        while (start <= n) {\n            start = start\
    \ * 10L\n            end = start + 9L\n            if (end > n) break\n      \
    \      end = end * 10L\n            end = end + 9L\n        }\n        return\
    \ (start - 1) + (end - 1)", "        var start = 1L\n        var end = start\n\
    \        var count = 0L\n        while (start <= n) {\n            end = start\
    \ + 1L\n            while (end <= n && end % 10 == 0) {\n                end =\
    \ end + 1L\n            }\n            count = count + 1L\n            start =\
    \ start + 1L\n        }\n        return count", "        var result = 0L\n   \
    \     for (i <- 1L to n) {\n            if (i % 10 == 1) {\n                result\
    \ += 1L\n            }\n            if (i % 10 == 0) {\n                result\
    \ += 1L\n            }\n        }\n        return result", "        var s = 0L\n\
    \        for(i <- 0 until n) {\n            if(i == 0) {\n                s +=\
    \ 1L\n            } else {\n                s += 1L\n            }\n        }\n\
    \        return s", "        var result = 0L\n        for (i <- 0L to (n - 1))\
    \ {\n            if (i == 0L) {\n                result += 1L\n            } else\
    \ {\n                result += (i * 10L)\n            }\n        }\n        return\
    \ result", "        val digits = scala.math.BigInt.range(1, n)\n        val result\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 1 until digits.size)\
    \ {\n          val digit = digits.apply(i)\n          val start = digit.toString.substring(0,\
    \ 1)\n          val end = digit.toString.substring(n - 1)\n          if (start\
    \ == \"1\" || end == \"1\") {\n            result.append(1)\n          }\n   \
    \     }\n        result.toList", "        var result = 0L\n        for (i <- 0L\
    \ to n - 1) {\n            if (i == 0L) {\n                if (n == 1L) {\n  \
    \                  result += 1L\n                }\n            } else {\n   \
    \             if (n == 1L) {\n                    result += 1L\n             \
    \   } else {\n                    result += (n - i) * (n - i + 1L) / 2L\n    \
    \            }\n            }\n        }\n        return result", "        var\
    \ result = 0L\n        for (i <- 1L to n) {\n            if (i % 10 == 1) {\n\
    \                result += 1L\n            }\n        }\n        return result",
  "        var result = 0L\n        for (i <- 0L to n - 1) {\n            if (i ==\
    \ 0L) {\n                result += 1L\n            } else {\n                result\
    \ += (i * 10L)\n            }\n        }\n        return result", "        val\
    \ result = 0L\n        for (i <- 0 until n) {\n            val digit = i % 10\n\
    \            if (digit == 1) {\n                result += 1L\n            }\n\
    \            i /= 10\n        }\n        return result", "        var start =\
    \ 1L\n        var end = 1L\n        var count = 0L\n        while (start <= n)\
    \ {\n            start = start * 10L\n            end = end * 10L + 9L\n     \
    \       count = count + 1L\n            if (start > n) break\n            if (start\
    \ == end) break\n        }\n        return count", "        val s = \"\"\n   \
    \     for (i <- 0 until n) {\n            s += \"1\"\n        }\n        val s2\
    \ = s.substring(1, n)\n        val s3 = s2.substring(0, n - 1)\n        val s4\
    \ = s3.substring(0, n - 1)\n        val s5 = s4.substring(0, n - 2)\n        val\
    \ s6 = s5.substring(0, n - 3)\n        val s7 = s6.substring(0, n - 4)\n     \
    \   val s8 = s7.substring(0, n - 5)\n        val s9 = s8.substring(0, n - 6)\n\
    \        val s10 = s9.substring(0, n - 7)\n        val s11 = s10.substring(0,\
    \ n - 8)\n        val s12 = s11.substring(0, n - 9)\n        val s13 = s12.substring(0,\
    \ n - 10)\n        val s14 = s13.substring(0, n - 11)\n        val s15 = s14.substring(0,\
    \ n - 12)\n        val s16 = s15.substring(0, n - 13)\n        val s17 = s16.substring(0,\
    \ n - 14)\n        val s18 = s17.substring(0, n - 15)\n        val s19 = s18.substring(0,\
    \ n - 16)\n        val s20 = s19.substring(0, n - 17)\n        val s21 = s20.substring(0,\
    \ n - 18)\n        val s22 = s21.substring(0, n - 19)\n        val s23 = s22.substring(0,\
    \ n - 20)\n        val s24 = s23.substring(0, n - 21)\n        val s25 = s24.substring(0,\
    \ n - 22)\n        val s26 = s25.substring(0, n - 23)\n        val s27 = s26.substring(0,\
    \ n - 24)\n        val s28 = s27.substring(0, n - 25)\n        val", "       \
    \ val s = mutable.ListBuffer[Long]()\n        for i in 1 to n {\n            val\
    \ n = i.toString.padTo(n)\n            if n.startsWith(\"1\") {\n            \
    \    s.append(n.length())\n            }\n        }\n        s.toList", "    \
    \    var start = 1L\n        var end = 1L\n        var count = 0L\n        while\
    \ (start <= n) {\n            count += 1L\n            start = start * 10L\n \
    \           end = end * 10L + 1L\n        }\n        return count", "        val\
    \ digits = scala.collection.mutable.Buffer[Long]()\n        for (i <- 0 until\
    \ n) {\n            digits.append(i)\n        }\n        val result = scala.collection.mutable.Buffer[Long]()\n\
    \        for (i <- 0 until digits.length) {\n            val digit = digits.apply(i)\n\
    \            if (digit == 1) {\n                result.append(1)\n           \
    \ } else {\n                result.append(0)\n            }\n        }\n     \
    \   result.foreach(x => println(x))\n        result.foreach(x => println(x))\n\
    \        result.foreach(x => println(x))\n        result.foreach(x => println(x))\n\
    \        result.foreach(x => println(x))\n        result.foreach(x => println(x))\n\
    \        result.foreach(x => println(x))\n        result.foreach(x => println(x))\n\
    \        result.foreach(x => println(x))\n        result.foreach(x => println(x))\n\
    \        result.foreach(x => println(x))\n        result.foreach(x => println(x))\n\
    \        result.foreach(x => println(x))\n        result.foreach(x => println(x))\n\
    \        result.foreach(x => println(x))\n        result.foreach(x => println(x))\n\
    \        result.foreach(x => println(x))\n        result.foreach(x => println(x))\n\
    \        result.foreach(x => println(x))\n        result.foreach(x => println(x))\n\
    \        result.foreach(x => println(x))\n        result.foreach(x => println(x))\n\
    \        result.foreach(x => println(x))\n        result.foreach(x => println(x))\n\
    \        result.foreach(x => println(x))\n        result.foreach(x => println(x))\n\
    \        result.foreach(x => println(x))\n        result.foreach(x => println(x))\n\
    \        result.foreach(x => println(x))\n        result.foreach(x => println(x))\n\
    \        result.", "        var result = 0L\n        for (i <- 0 until n) {\n\
    \            var digit = i % 10\n            if (digit == 1) {\n             \
    \   result += 1L\n            }\n            i /= 10\n        }\n        return\
    \ result", "        var digits = scala.collection.mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until n) {\n            digits.append(i)\n        }\n   \
    \     var result = 0\n        for (i <- 0 until digits.size) {\n            if\
    \ (digits.get(i) == 1) {\n                result += 1\n            }\n       \
    \     if (digits.get(i) == n) {\n                result += 1\n            }\n\
    \        }\n        return result"]
stop_tokens:
- "\n    }\n"
