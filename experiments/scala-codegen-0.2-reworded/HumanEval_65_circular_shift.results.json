{
  "name": "HumanEval_65_circular_shift",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString().length()) {\n            return x.toString().reverse()\n        }\n        return x.toString().substring(shift, x.toString().length()) + x.toString().substring(0, shift)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpe4543zj2.scala:13:39 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mreturn\u001b[0m x.toString().reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe4543zj2.scala:15:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mreturn\u001b[0m x.toString().substring(shift, x.toString().length()) + x.toString().substring(\u001b[31m0\u001b[0m, shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe4543zj2.scala:15:96 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mreturn\u001b[0m x.toString().substring(shift, x.toString().length()) + x.toString().substring(\u001b[31m0\u001b[0m, shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits[0] + circularShift(digits[1], shift)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292538,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpsown1pvr.scala:13:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m] + circularShift(digits[\u001b[31m1\u001b[0m], shift)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val xs = x.toString\n        val shiftStr = shift.toString\n        if (shiftStr.length > xs.length) {\n            return xs.reverse\n        } else {\n            val result = xs.take(shiftStr.length)\n            result.append(xs.drop(shiftStr.length))\n            return result.reverse\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp730pvs5x.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result.append(xs.drop(shiftStr.length))\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value append is not a member of String\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1) + circularShift(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits2(x : Long) : String = {\n        return reverseDigits(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits3(x : Long) : String = {\n        return reverseDigits2(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits4(x : Long) : String = {\n        return reverseDigits3(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits5(x : Long) : String = {\n        return reverseDigits4(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits6(x : Long) : String = {\n        return reverseDigits5(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits7(x : Long) : String = {\n        return reverseDigits6(x).to\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3pz3q0m0.scala:65:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m        \u001b[33mreturn\u001b[0m reverseDigits6(x).to\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    scala.collection.Factory[Char, Any] => Any\n\u001b[31m   |\u001b[0m               Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[(i + shift) % digits.length]\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpee6gp4_9.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpee6gp4_9.scala:15:49 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[(\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[35mshift\u001b[0m) \u001b[35m%\u001b[0m digits.length]\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Not found: type %\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(123)\n    // \"321\"\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt(s : String) : Long = {\n        var result = 0l\n        for (i <- 0 until s.length) {\n            result = result * 10 + s[i]\n        }\n        return result\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt2(s : String) : Long = {\n        var result = 0l\n        for (i <- 0 until s.length) {\n            result = result * 10 + s[i]\n        }\n        return result\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt3(s : String) : Long = {\n        var result = 0l\n        for (i <- 0 until s.length) {\n            result = result * 10 + s[i]\n        }\n        return result\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt4(s : String) : Long = {\n        var result = 0l\n        for (i <- 0 until s.length) {\n            result = result * 10 + s[i]\n        }\n        return result\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpr8dx0vei.scala:89:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr8dx0vei.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr8dx0vei.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr8dx0vei.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr8dx0vei.scala:30:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr8dx0vei.scala:41:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            result = result * \u001b[31m10\u001b[0m + s[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = digits[i] + result\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv159a9qp.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv159a9qp.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv159a9qp.scala:18:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = digits[\u001b[35mi\u001b[0m] + result\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1) + circularShift(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits2(x : Long) : String = {\n        return reverseDigits(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits3(x : Long) : String = {\n        return reverseDigits2(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits4(x : Long) : String = {\n        return reverseDigits3(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits5(x : Long) : String = {\n        return reverseDigits4(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits6(x : Long) : String = {\n        return reverseDigits5(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits7(x : Long) : String = {\n        return reverseDigits6(x).to\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3pz3q0m0.scala:65:15 --------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m        \u001b[33mreturn\u001b[0m reverseDigits6(x).to\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Found:    scala.collection.Factory[Char, Any] => Any\n\u001b[31m   |\u001b[0m               Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits[0] + circularShift(digits[1], shift)\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = reverseDigits(digits[1]) + digits[0]\n        return result\n    }\n\n    // Convert the string s to a long integer.\n    // Return 0 if the string is invalid.\n    // >>> stringToLong(\"123\")\n    // 123l\n    def stringToLong(s : String) : Long = {\n        val result = s.trim().replaceAll(\"\\\\s+\", \"\")\n        if (result.length() == 0) return 0l\n        return Long.parseLong(result)\n    }\n\n    // Convert the long integer x to a string.\n    // Return \"\" if x is invalid.\n    // >>> longToString(123l)\n    // \"123\"\n    def longToString(x : Long) : String = {\n        val result = x.toString\n        if (result.length() == 0) return \"\"\n        return result\n    }\n\n    // Compute and return the circular shift of the string s.\n    // The string s is a sequence of digits 0-9 and is circularly shifted right by 1.\n    // If the string is empty, return \"0\".\n    // >>> circularShift(\"123\", 1)\n    // \"21\"\n    def circularShift(s : String, shift : Long) : String = {\n        val result = \"\"\n        for (i <- 0 until s.length) {\n            result = result + s[i]\n            if (i + shift >= s.length) break\n            result = result + s[i + shift]\n        }\n        return result\n    }\n\n    // Compute and return the reverse of the string s.\n    // The string s is a sequence of digits 0-9 and is reversed.\n    // If the string is empty, return \"0\".\n    // >>> reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpu7n5tom9.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpu7n5tom9.scala:13:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m] + circularShift(digits[\u001b[31m1\u001b[0m], shift)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpu7n5tom9.scala:22:41 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = reverseDigits(digits[\u001b[31m1\u001b[0m]) + digits[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpu7n5tom9.scala:22:54 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = reverseDigits(digits[\u001b[31m1\u001b[0m]) + digits[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu7n5tom9.scala:33:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mreturn\u001b[0m Long.parseLong(result)\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               value parseLong is not a member of object Long\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu7n5tom9.scala:54:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m            result = result + s[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString.split(\"l\")\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpco6rq6lk.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpco6rq6lk.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpco6rq6lk.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        }\n        if (shift < 0) {\n            return reverseDigits(x)\n        }\n        if (shift == 0) {\n            return x.toString()\n        }\n        var result = \"\"\n        var i = shift\n        while (i < x) {\n            result = x.toString() + result\n            i = i + 1\n        }\n        return result\n    }\n\n    // Reverse digits of the integer x.\n    // >>> reverseDigits(12l)\n    // (21)\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        while (x > 0) {\n            result = x.toString() + result\n            x = x - 1\n        }\n        return result\n    }\n\n    // Reverse digits of the integer x.\n    // >>> reverseDigits(12l)\n    // (21)\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        while (x > 0) {\n            result = x.toString() + result\n            x = x - 1\n        }\n        return result\n    }\n\n    // Reverse digits of the integer x.\n    // >>> reverseDigits(12l)\n    // (21)\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        while (x > 0) {\n            result = x.toString() + result\n            x = x - 1\n        }\n        return result\n    }\n\n    // Reverse digits of the integer x.\n    // >>> reverseDigits(12l)\n    // (21)\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        while (x > 0) {\n            result = x.toString() + result\n            x = x - 1\n        }\n        return result\n    }\n\n    // Reverse digits of the integer x.\n    // >>> reverseDigits(12l)\n    // (21)\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        while (x > 0) {\n            result = x\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwmpp11of.scala:95:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m95 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpwmpp11of.scala:37:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m            x = x - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpwmpp11of.scala:49:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            x = x - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpwmpp11of.scala:61:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m            x = x - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpwmpp11of.scala:73:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m            x = x - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwmpp11of.scala:84:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m            result = x\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (x : Long)\n\u001b[31m   |\u001b[0m                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwmpp11of.scala:94:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m94 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: String\n\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 1)\n    }\n\n    // Reverse the digits of the integer x, starting at the given index, and return\n    // the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, start : Int) : String = {\n        if (start > x) {\n            return reverseDigits(x, start - 1)\n        } else {\n            return reverseDigits(x, start)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 1)\n    }\n\n    // Reverse the digits of the integer x, starting at the given index, and return\n    // the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, start : Int) : String = {\n        if (start > x) {\n            return reverseDigits(x, start - 1)\n        } else {\n            return reverseDigits(x, start)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 1)\n    }\n\n    // Reverse the digits of the integer x, starting at the given index, and return\n    // the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, start :\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292538,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp03wcs568.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp03wcs568.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp03wcs568.scala:41:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 22 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 41\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp03wcs568.scala:49:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m, \u001b[36mstart\u001b[0m : \u001b[35mInt\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long, start: Int): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 30 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long, start: Int): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 49\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp03wcs568.scala:60:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var shiftDigits = shift.toString\n        var result = \"\"\n        var i = 0\n        while (i < shiftDigits.length) {\n            result = result + digits[i]\n            i = i + 1\n        }\n        while (i < digits.length) {\n            result = result + digits[i]\n            i = i + 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292538,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq8vkm42i.scala:17:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq8vkm42i.scala:21:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length) return x.toString.reverse()\n        return x.toString.substring(shift, x.toString.length)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpisew0953.scala:12:64 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mif\u001b[0m (shift > x.toString.length) \u001b[33mreturn\u001b[0m x.toString.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpisew0953.scala:13:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mreturn\u001b[0m x.toString.substring(shift, x.toString.length)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val xs = x.toString\n        val shift_ = shift.toString\n        val shift_len = shift_.length\n        val xs_len = xs.length\n        val shift_digits = shift_len.toInt\n        val xs_digits = xs_len.toInt\n        val shift_digits_ = shift_digits.toInt\n        val xs_digits_ = xs_digits.toInt\n        val shift_digits_ = shift_digits_.toInt\n        val xs_digits_ = xs_digits_.toInt\n        val shift_digits_ = shift_digits_.toInt\n        val xs_digits_ = xs_digits_.toInt\n        val shift_digits_ = shift_digits_.toInt\n        val xs_digits_ = xs_digits_.toInt\n        val shift_digits_ = shift_digits_.toInt\n        val xs_digits_ = xs_digits_.toInt\n        val shift_digits_ = shift_digits_.toInt\n        val xs_digits_ = xs_digits_.toInt\n        val shift_digits_ = shift_digits_.toInt\n        val xs_digits_ = xs_digits_.toInt\n        val shift_digits_ = shift_digits_.toInt\n        val xs_digits_ = xs_digits_.toInt\n        val shift_digits_ = shift_digits_.toInt\n        val xs_digits_ = xs_digits_.toInt\n        val shift_digits_ = shift_digits_.toInt\n        val xs_digits_ = xs_digits_.toInt\n        val shift_digits_ = shift_digits_.toInt\n        val xs_digits_ = xs_digits_.toInt\n        val shift_digits_ = shift_digits_.toInt\n        val xs_digits_ = xs_digits_.toInt\n        val shift_digits_ = shift_digits_.toInt\n        val xs_digits_ = xs_digits_.to\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp2b2ro_ix.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshift_digits_\u001b[0m = shift_digits_.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mshift_digits_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mshift_digits_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp2b2ro_ix.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxs_digits_\u001b[0m = xs_digits_.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxs_digits_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mxs_digits_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp2b2ro_ix.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshift_digits_\u001b[0m = shift_digits_.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mshift_digits_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mshift_digits_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp2b2ro_ix.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxs_digits_\u001b[0m = xs_digits_.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxs_digits_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mxs_digits_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp2b2ro_ix.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshift_digits_\u001b[0m = shift_digits_.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mshift_digit",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = digits[0]\n        for (i <- 1) {\n            result = result + digits[i]\n            if (i < shift) {\n                result = result + digits[i]\n            }\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"321\")\n    def reverseDigits(x : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = digits[0]\n        for (i <- 1) {\n            result = digits[i] + result\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"321\")\n    def reverseDigits2(x : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = digits[0]\n        for (i <- 1) {\n            result = digits[i] + result\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"321\")\n    def reverseDigits3(x : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = digits[0]\n        for (i <- 1) {\n            result = digits[i] + result\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"321\")\n    def reverseDigits4(x : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = digits[0]\n        for (i <- 1) {\n            result = digits[i] + result\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0w9ebp__.scala:82:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0w9ebp__.scala:13:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0w9ebp__.scala:14:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  value foreach is not a member of Int\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0w9ebp__.scala:28:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0w9ebp__.scala:29:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  value foreach is not a member of Int\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0w9ebp__.scala:40:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0w9ebp__.scala:41:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  value foreach is not a member of Int\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0w9ebp__.scala:52",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 1)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x, shift - 1)\n        } else {\n            return reverseDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x, shift - 1)\n        } else {\n            return reverseDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x, shift - 1)\n        } else {\n            return reverseDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x, shift - 1)\n        } else {\n            return reverseDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292538,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpns9wr8b3.scala:80:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpns9wr8b3.scala:40:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m, \u001b[36mshift\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long, shift: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 29 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long, shift: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 40\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpns9wr8b3.scala:51:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m, \u001b[36mshift\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long, shift: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 40 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long, shift: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 51\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpns9wr8b3.scala:62:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m, \u001b[36mshift\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long, shift: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 51 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long, shift: Long",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits[0] + circularShift(digits[1], shift)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292538,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpkxp3_3md.scala:13:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m] + circularShift(digits[\u001b[31m1\u001b[0m], shift)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length) return x.toString.reverse()\n        return circularShift(x.toString.reverse().replaceAll(\"[0-9]\", \"\"), shift)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292538,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpxf3x9fdd.scala:12:64 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mif\u001b[0m (shift > x.toString.length) \u001b[33mreturn\u001b[0m x.toString.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmpxf3x9fdd.scala:13:47 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mreturn\u001b[0m circularShift(x.toString.reverse().replaceAll(\u001b[31m\"[0-9]\"\u001b[0m, \u001b[31m\"\"\u001b[0m), shift)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits2(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits3(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits4(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits5(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits6(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits7(x : Long) : String = {\n        return circularShift(x,\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292538,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpe0w0elzn.scala:66:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpe0w0elzn.scala:65:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m        \u001b[33mreturn\u001b[0m circularShift(x,\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter shift of \u001b[33mmethod\u001b[0m \u001b[35mcircularShift\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m: (x: Long, shift: Long): String\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length) {\n            return x.toString.reverse()\n        } else {\n            return circularShift(x.toString.substring(1), shift).concat(x.toString.substring(0, 1))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp2uja9owq.scala:13:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mreturn\u001b[0m x.toString.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2uja9owq.scala:15:53 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mreturn\u001b[0m circularShift(x.toString.substring(\u001b[31m1\u001b[0m), shift).concat(x.toString.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Found:    String\n\u001b[31m   |\u001b[0m                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp__m9hcgi.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp__m9hcgi.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp__m9hcgi.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length) {\n            return x.toString.reverse()\n        } else {\n            return x.toString.substring(shift, x.toString.length) + x.toString.substring(0, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"321\")\n    def reverseDigits(x : Long) : String = {\n        return x.toString.substring(x.toString.length - 1, x.toString.length) + x.toString.substring(0, x.toString.length - 1)\n    }\n\n    // Convert the string s to a long integer and return the result.\n    // If s is empty, return 0.\n    // If s contains non-digits, return 0.\n    // If s is not a valid decimal representation of a long integer, return 0.\n    // >>> stringToLong(\"123\")\n    // 123l\n    def stringToLong(s : String) : Long = {\n        if (s.length == 0) {\n            return 0l\n        }\n        if (!s.matches(\"[0-9]+\")) {\n            return 0l\n        }\n        return Long.parseLong(s)\n    }\n\n    // Convert the string s to a long integer and return the result.\n    // If s is empty, return 0.\n    // If s contains non-digits, return 0.\n    // If s is not a valid decimal representation of a long integer, return 0.\n    // >>> stringToLong(\"123\")\n    // 123l\n    def stringToLong2(s : String) : Long = {\n        if (s.length == 0) {\n            return 0l\n        }\n        if (!s.matches(\"[0-9]+\")) {\n            return 0l\n        }\n        return Long.parseLong(s)\n    }\n\n    // Convert the string s to a long integer and return the result.\n    // If s is empty, return 0.\n    // If s contains non-digits, return 0.\n    // If s is not a valid decimal representation\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzq_1hog4.scala:71:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzq_1hog4.scala:13:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mreturn\u001b[0m x.toString.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzq_1hog4.scala:15:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mreturn\u001b[0m x.toString.substring(shift, x.toString.length) + x.toString.substring(\u001b[31m0\u001b[0m, shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzq_1hog4.scala:15:92 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mreturn\u001b[0m x.toString.substring(shift, x.toString.length) + x.toString.substring(\u001b[31m0\u001b[0m, shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzq_1hog4.scala:39:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mreturn\u001b[0m Long.parseLong(s)\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               value parseLong is not a member of object Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzq_1hog4.scala:55:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        }\n        else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        }\n        else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292537,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm23ivz8d.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpm23ivz8d.scala:46:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 39 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 46\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpm23ivz8d.scala:53:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 46 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 53\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpm23ivz8d.scala:60:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 53 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 60\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292548,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbjz96yq4.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbjz96yq4.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbjz96yq4.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292549,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc1n7auhu.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc1n7auhu.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc1n7auhu.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292545,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprp9u_46s.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmprp9u_46s.scala:44:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 37 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 44\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmprp9u_46s.scala:51:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 44 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 51\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmprp9u_46s.scala:58:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 51 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 58\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits2(x : Long) : String = {\n        return reverseDigits(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits3(x : Long) : String = {\n        return reverseDigits2(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits4(x : Long) : String = {\n        return reverseDigits3(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits5(x : Long) : String = {\n        return reverseDigits4(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits6(x : Long) : String = {\n        return reverseDigits5(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits7(x : Long) : String = {\n        return reverseDigits6(x).toString()\n    }\n\n    //\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292545,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgwks_gvw.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgwks_gvw.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(circularShift((\u001b[31m100l\u001b[0m), (\u001b[31m2l\u001b[0m)).equals((\u001b[31m\"001\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: circularShift\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgwks_gvw.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(circularShift((\u001b[31m12l\u001b[0m), (\u001b[31m2l\u001b[0m)).equals((\u001b[31m\"12\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: circularShift\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgwks_gvw.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(circularShift((\u001b[31m97l\u001b[0m), (\u001b[31m8l\u001b[0m)).equals((\u001b[31m\"79\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: circularShift\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgwks_gvw.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(circularShift((\u001b[31m12l\u001b[0m), (\u001b[31m1l\u001b[0m)).equals((\u001b[31m\"21\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: circularShift\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgwks_gvw.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(circularShift((\u001b[31m11l\u001b[0m), (\u001b[31m101l\u001b[0m)).equals((\u001b[31m\"11\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: circularShift\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when c",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1) + circularShift(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits2(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits3(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits4(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits5(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits6(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits7(x : Long) : String = {\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292550,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpurkynmhp.scala:64:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits7\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    Unit\n\u001b[31m   |\u001b[0m                                            Required: String\n\u001b[31m65 |\u001b[0m    }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits((12l))\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Convert a string of digits into an integer and return the result.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt(s : String) : Long = {\n        return Long.parseLong(s)\n    }\n\n    // Convert an integer into a string of digits and return the result.\n    // >>> intToString(123)\n    // \"123\"\n    def intToString(x : Long) : String = {\n        return x.toString\n    }\n\n    // Convert a string of digits into an integer and return the result.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt2(s : String) : Long = {\n        return Long.parseLong(s)\n    }\n\n    // Convert an integer into a string of digits and return the result.\n    // >>> intToString(123)\n    // \"123\"\n    def intToString2(x : Long) : String = {\n        return x.toString\n    }\n\n    // Convert a string of digits into an integer and return the result.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt3(s : String) : Long = {\n        return Long.parseLong(s)\n    }\n\n    // Convert an integer into a string of digits and return the result.\n    // >>> intToString(123)\n    // \"123\"\n    def intToString3(x : Long)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292551,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E019] Syntax Error: /tmp/tmpi9hyoiob.scala:73:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mintToString3\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Missing return type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi9hyoiob.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi9hyoiob.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi9hyoiob.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi9hyoiob.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi9hyoiob.scala:30:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length) {\n            return x.toString.reverse()\n        } else {\n            return circularShift(x.toString.reverse().replaceAll(\"[0-9]\", \"\"), shift)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292546,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzqft0kvr.scala:13:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mreturn\u001b[0m x.toString.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzqft0kvr.scala:15:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mreturn\u001b[0m circularShift(x.toString.reverse().replaceAll(\u001b[31m\"[0-9]\"\u001b[0m, \u001b[31m\"\"\u001b[0m), shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var y = x\n        var s = \"\"\n        while (y != 0) {\n            s = (char)(y % 10 + 48) + s\n            y /= 10\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292546,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8bar71nm.scala:26:17 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            s = (char)(y % \u001b[31m10\u001b[0m + \u001b[31m48\u001b[0m) + s\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Not found: char\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val xs = x.toString\n        val shift_str = shift.toString\n        val shift_int = shift_str.length\n        val shift_digits = shift_str.substring(shift_int - 1, shift_int)\n        val x_digits = xs.substring(shift_int - 1, xs.length)\n        val result = x_digits + x_digits.substring(0, shift_digits)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292552,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeq4kiqor.scala:17:54 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = x_digits + x_digits.substring(\u001b[31m0\u001b[0m, shift_digits)\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (shift_digits : String)\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until (digits.length - shift)) {\n            result = result + digits[i + shift]\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292551,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptykkp8ds.scala:14:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until (digits.length - shift)) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Long\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptykkp8ds.scala:15:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[35mshift\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Not found: type +\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val xs = x.toString\n        val shift_str = shift.toString\n        val shift_int = shift.toInt\n        val shift_long = shift.toLong\n        val shift_bigInt = shift.toBigInt\n        val shift_bigDec = shift.toBigDecimal\n        val shift_bigDecimal = shift.toBigDecimal\n        val shift_bigInteger = shift.toBigInteger\n        val shift_int_array = shift.toIntArray\n        val shift_long_array = shift.toLongArray\n        val shift_bigInt_array = shift.toBigIntArray\n        val shift_bigDecimal_array = shift.toBigDecimalArray\n        val shift_bigDecimal_array_array = shift.toBigDecimalArrayArray\n        val shift_bigInteger_array = shift.toBigIntegerArray\n        val shift_int_array_array = shift.toIntArrayArray\n        val shift_long_array_array = shift.toLongArrayArray\n        val shift_bigInt_array_array = shift.toBigIntArrayArray\n        val shift_bigDecimal_array_array_array = shift.toBigDecimalArrayArrayArray\n        val shift_bigInteger_array_array = shift.toBigIntegerArrayArray\n        val shift_int_array_array_array = shift.toIntArrayArrayArray\n        val shift_long_array_array_array = shift.toLongArrayArrayArray\n        val shift_bigInt_array_array_array = shift.toBigIntArrayArrayArray\n        val shift_bigDecimal_array_array_array_array = shift.toBigDecimalArrayArrayArrayArray\n        val shift_bigInteger_array_array_array = shift.toBigIntegerArrayArrayArray\n        val shift_int_array_array_array_array = shift.toIntArrayArrayArrayArray\n        val shift_long_array_array_array_array = shift.toLongArrayArrayArrayArray\n        val shift_bigInt_array_array_array_array = shift.toBigIntArrayArrayArrayArray\n        val shift_bigDecimal_array_array_array_array_array = shift.toBigDecimalArrayArrayArrayArrayArray\n        val shift_bigInteger_\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292554,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpy4xdnlhx.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy4xdnlhx.scala:16:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshift_bigInt\u001b[0m = shift.toBigInt\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toBigInt is not a member of Long, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.BigDecimal.long2bigDecimal\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy4xdnlhx.scala:17:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshift_bigDec\u001b[0m = shift.toBigDecimal\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value toBigDecimal is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy4xdnlhx.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshift_bigDecimal\u001b[0m = shift.toBigDecimal\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              value toBigDecimal is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy4xdnlhx.scala:19:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshift_bigInteger\u001b[0m = shift.toBigInteger\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              value toBigInteger is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy4xdnlhx.scala:20:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshift_int_array\u001b[0m = shift.toIntArray\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              value toIntArray is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits[0].concat(digits[1].substring(shift.toString.length()))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292549,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpeq3psppl.scala:13:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m].concat(digits[\u001b[31m1\u001b[0m].substring(shift.toString.length()))\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var shiftDigits = shift.toString\n        var result = \"\"\n        var i = 0\n        while (i < shiftDigits.length) {\n            result = result + digits[i]\n            i = i + 1\n        }\n        for (i = shiftDigits.length; i < digits.length; i = i + 1) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292553,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpu_85lh0h.scala:20:15 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mfor\u001b[0m (i = shiftDigits.length; i < digits.length; i = i + \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               ')' expected, but '=' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpu_85lh0h.scala:20:54 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mfor\u001b[0m (i = shiftDigits.length; i < digits.length; i = i + \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E020] Syntax Error: /tmp/tmpu_85lh0h.scala:20:65 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mfor\u001b[0m (i = shiftDigits.length; i < digits.length; i = i + \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    \u001b[33myield\u001b[0m or \u001b[33mdo\u001b[0m expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu_85lh0h.scala:17:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu_85lh0h.scala:20:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mfor\u001b[0m (i = shiftDigits.length; i < digits.length; i = i + \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue foreach is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        }\n        var result = \"\"\n        for (i <- 0 until (shift - 1)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        result = result + (x % 10)\n        return result\n    }\n\n    // Reverse digits of the integer x and return as a string.\n    // >>> reverseDigits(123)\n    // \"321\"\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (x % 10)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        result = result + (x % 10)\n        return result\n    }\n\n    // Reverse digits of the integer x and return as a string.\n    // >>> reverseDigits(123)\n    // \"321\"\n    def reverseDigits2(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (x % 10)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        result = result + (x % 10)\n        return result\n    }\n\n    // Reverse digits of the integer x and return as a string.\n    // >>> reverseDigits(123)\n    // \"321\"\n    def reverseDigits3(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (x % 10)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        result = result + (x % 10)\n        return result\n    }\n\n    // Reverse digits of the integer x and return as a string.\n    // >>> reverseDigits(123)\n    // \"321\"\n    def reverseDigits4(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (x % 10)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        result = result + (x % 10)\n        return result\n    }\n\n    // Reverse digits of the integer x and\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292553,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_8vwujb1.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_8vwujb1.scala:16:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until (shift - \u001b[31m1\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Long\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp_8vwujb1.scala:18:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            x = x / \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_8vwujb1.scala:29:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until (x % \u001b[31m10\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Long\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp_8vwujb1.scala:31:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            x = x / \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_8vwujb1.scala:42:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until (x % \u001b[31m10\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Long\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var result = \"\"\n        var x_int = x.toInt\n        var shift_int = shift.toInt\n        var digits = x_int.toString\n        var shift_digits = shift_int.toString\n        var len = digits.length\n        var shift_len = shift_digits.length\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < len) {\n            var digit = digits.charAt(i)\n            var shift_digit = shift_digits.charAt(j)\n            if (j < shift_len) {\n                result = result + shift_digit\n                j = j + 1\n            } else {\n                result = result + digit\n                i = i + 1\n                j = 0\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292552,
      "stdout": "",
      "stderr": "java.lang.StringIndexOutOfBoundsException: String index out of range: 1\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem$.circularShift(tmp81tmttqu.scala:24)\n\tat Problem$.main(tmp81tmttqu.scala:37)\n\tat Problem.main(tmp81tmttqu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1) + x.toString()\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 1) + x.toString()\n    }\n\n    // Reverse the digits of the integer x, starting at the given index, and return\n    // the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, start : Int) : String = {\n        if (start > x) {\n            return reverseDigits(x, start - 1) + x.toString()\n        } else {\n            return reverseDigits(x, start) + x.toString()\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 1) + x.toString()\n    }\n\n    // Reverse the digits of the integer x, starting at the given index, and return\n    // the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, start : Int) : String = {\n        if (start > x) {\n            return reverseDigits(x, start - 1) + x.toString()\n        } else {\n            return reverseDigits(x, start) + x.toString()\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 1) + x.toString()\n    }\n\n    // Reverse the digits of the integer x, starting\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292549,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2d4vh1n7.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp2d4vh1n7.scala:41:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 22 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 41\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp2d4vh1n7.scala:49:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m, \u001b[36mstart\u001b[0m : \u001b[35mInt\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long, start: Int): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 30 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long, start: Int): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 49\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp2d4vh1n7.scala:60:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 41 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 60\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits[0].concat(digits[1].substring(shift.toInt))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292549,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmps_0f3p8l.scala:13:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m].concat(digits[\u001b[31m1\u001b[0m].substring(shift.toInt))\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = digits[0].concat(digits[1].substring(shift.toString().length()))\n        return result\n    }\n\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift2(x : Long, shift : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = digits[0].concat(digits[1].substring(shift.toString().length()))\n        return result\n    }\n\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift3(x : Long, shift : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = digits[0].concat(digits[1].substring(shift.toString().length()))\n        return result\n    }\n\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift4(x : Long, shift : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = digits[0].concat(digits[1].substring(shift.toString().length()))\n        return result\n    }\n\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift5(x : Long, shift : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = digits[0].concat(digits[1].substring(shift.toString().length()))\n        return result\n    }\n\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292550,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9kikyf5u.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9kikyf5u.scala:13:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m].concat(digits[\u001b[31m1\u001b[0m].substring(shift.toString().length()))\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9kikyf5u.scala:23:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m].concat(digits[\u001b[31m1\u001b[0m].substring(shift.toString().length()))\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9kikyf5u.scala:33:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m].concat(digits[\u001b[31m1\u001b[0m].substring(shift.toString().length()))\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9kikyf5u.scala:43:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m].concat(digits[\u001b[31m1\u001b[0m].substring(shift.toString().length()))\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9kikyf5u.scala:53:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m].concat(digits[\u001b[31m1\u001b[0m].substring(shift.toString().length()))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until (digits.length - shift)) {\n            result = result + digits[i]\n        }\n        for (i <- (digits.length - shift) until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292553,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps7wg8umy.scala:14:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until (digits.length - shift)) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Long\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps7wg8umy.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps7wg8umy.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292545,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprp9u_46s.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmprp9u_46s.scala:44:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 37 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 44\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmprp9u_46s.scala:51:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 44 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 51\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmprp9u_46s.scala:58:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 51 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 58\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x < 0) {\n            return reverseDigits(-x)\n        } else {\n            return reverseDigits(x % 10l) + (x / 10l)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x < 0) {\n            return reverseDigits(-x)\n        } else {\n            return reverseDigits(x % 10l) + (x / 10l)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x < 0) {\n            return reverseDigits(-x)\n        } else {\n            return reverseDigits(x % 10l) + (x / 10l)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x < 0) {\n            return reverseDigits(-x)\n        } else {\n            return reverseDigits(x % 10l) + (x / 10l)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x < 0) {\n            return reverseDigits(-x)\n        } else {\n            return reverseDigits(\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292552,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpbz5572s6.scala:70:33 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m            \u001b[33mreturn\u001b[0m reverseDigits(\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbz5572s6.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbz5572s6.scala:80:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpbz5572s6.scala:33:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 22 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 33\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpbz5572s6.scala:44:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 33 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 44\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider addin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits[0].concat(digits[1].substring(0, shift - 1))\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits[0].concat(digits[1].substring(0, digits[1].length() - 1))\n        return result\n    }\n\n    // Convert the integer x to a string and return the result as a string.\n    // >>> convertToString(12l)\n    // (\"12\")\n    def convertToString(x : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits[0].concat(digits[1])\n        return result\n    }\n\n    // Convert the integer x to a string and return the result as a string.\n    // >>> convertToString(12l)\n    // (\"12\")\n    def convertToString(x : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits[0].concat(digits[1])\n        return result\n    }\n\n    // Convert the integer x to a string and return the result as a string.\n    // >>> convertToString(12l)\n    // (\"12\")\n    def convertToString(x : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits[0].concat(digits[1])\n        return result\n    }\n\n    // Convert the integer x to a string and return the result as a string.\n    // >>> convertToString(12l)\n    // (\"12\")\n    def convertToString(x : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits[0].concat(digits[1])\n        return result\n    }\n\n    // Convert the integer x to a string and return\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292551,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnpw7e5av.scala:72:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnpw7e5av.scala:13:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m].concat(digits[\u001b[31m1\u001b[0m].substring(\u001b[31m0\u001b[0m, shift - \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnpw7e5av.scala:22:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m].concat(digits[\u001b[31m1\u001b[0m].substring(\u001b[31m0\u001b[0m, digits[\u001b[31m1\u001b[0m].length() - \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnpw7e5av.scala:31:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m].concat(digits[\u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnpw7e5av.scala:40:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m].concat(digits[\u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnpw7e5av.scala:49:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m].concat(digits[\u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length) return x.toString.reverse()\n        return x.toString.substring(shift, x.toString.length)\n    }\n\n    // Returns the sum of the digits of the integer x.\n    // >>> sumDigits(12l)\n    // (3)\n    def sumDigits(x : Long) : Long = {\n        return x.toString.reduce(_.sum)\n    }\n\n    // Returns the product of the digits of the integer x.\n    // >>> productDigits(12l)\n    // (2)\n    def productDigits(x : Long) : Long = {\n        return x.toString.reduce(_.product)\n    }\n\n    // Returns the sum of the digits of the integer x.\n    // >>> sumDigits(12l)\n    // (3)\n    def sumDigits(x : Long) : Long = {\n        return x.toString.reduce(_.sum)\n    }\n\n    // Returns the product of the digits of the integer x.\n    // >>> productDigits(12l)\n    // (2)\n    def productDigits(x : Long) : Long = {\n        return x.toString.reduce(_.product)\n    }\n\n    // Returns the sum of the digits of the integer x.\n    // >>> sumDigits(12l)\n    // (3)\n    def sumDigits(x : Long) : Long = {\n        return x.toString.reduce(_.sum)\n    }\n\n    // Returns the product of the digits of the integer x.\n    // >>> productDigits(12l)\n    // (2)\n    def productDigits(x : Long) : Long = {\n        return x.toString.reduce(_.product)\n    }\n\n    // Returns the sum of the digits of the integer x.\n    // >>> sumDigits(12l)\n    // (3)\n    def sumDigits(x : Long) : Long = {\n        return x.toString.reduce(_.sum)\n    }\n\n    // Returns the product of the digits of the integer x.\n    // >>> productDigits(12l)\n    //\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292555,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpq48llnj5.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpq48llnj5.scala:12:64 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mif\u001b[0m (shift > x.toString.length) \u001b[33mreturn\u001b[0m x.toString.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq48llnj5.scala:13:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mreturn\u001b[0m x.toString.substring(shift, x.toString.length)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpq48llnj5.scala:20:33 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mreturn\u001b[0m x.toString.reduce(_.sum)\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 2\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpq48llnj5.scala:27:33 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mreturn\u001b[0m x.toString.reduce(_.product)\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 2\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpq48llnj5.scala:34:33 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mreturn\u001b[0m x.toString.reduce(_.sum)\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 2\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpq48l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        var i = 0\n        while (i < shift) {\n            result = result + digits[i]\n            i = i + 1\n        }\n        for (i = shift; i < digits.length; i = i + 1) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpw838ejrt.scala:19:15 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mfor\u001b[0m (i = shift; i < digits.length; i = i + \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               ')' expected, but '=' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpw838ejrt.scala:19:41 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mfor\u001b[0m (i = shift; i < digits.length; i = i + \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E020] Syntax Error: /tmp/tmpw838ejrt.scala:19:52 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mfor\u001b[0m (i = shift; i < digits.length; i = i + \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    \u001b[33myield\u001b[0m or \u001b[33mdo\u001b[0m expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw838ejrt.scala:16:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpw838ejrt.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mfor\u001b[0m (i = shift; i < digits.length; i = i + \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue foreach is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until (digits.length - shift)) {\n            result = result + digits[i]\n        }\n        for (i <- (digits.length - shift) until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292553,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps7wg8umy.scala:14:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until (digits.length - shift)) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Long\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps7wg8umy.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps7wg8umy.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length) return x.toString.reverse()\n        return x.toString.substring(shift) + x.toString.substring(0, shift)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292558,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpkj2y0p5_.scala:12:64 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mif\u001b[0m (shift > x.toString.length) \u001b[33mreturn\u001b[0m x.toString.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkj2y0p5_.scala:13:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mreturn\u001b[0m x.toString.substring(shift) + x.toString.substring(\u001b[31m0\u001b[0m, shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkj2y0p5_.scala:13:69 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mreturn\u001b[0m x.toString.substring(shift) + x.toString.substring(\u001b[31m0\u001b[0m, shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val xs = x.toString\n        val shift_str = shift.toString\n        val shift_int = shift.toInt\n        if (shift_int > xs.length()) {\n            return xs.reverse\n        } else {\n            return xs.substring(shift_int) + xs.substring(0, xs.length() - shift_int)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292558,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpywwx1sj5.scala:22)\n\tat Problem.main(tmpywwx1sj5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(123)\n    // (\"321\")\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Convert the string s to a non-negative integer and return it as a long value.\n    // If s is not a valid integer, it will be rejected and -1L will be returned.\n    // >>> stringToLong(\"123\")\n    // 123L\n    def stringToLong(s : String) : Long = {\n        var result = 0L\n        var i = 0\n        while (i < s.length && Character.isDigit(s.charAt(i))) {\n            result = result * 10 + Character.digit(s.charAt(i), 10)\n            i += 1\n        }\n        if (i == s.length) {\n            return result\n        } else {\n            return -1L\n        }\n    }\n\n    // Convert the non-negative integer x to a string and append it to the string s.\n    // If x is less than zero, the string \"ERROR\" will be appended to s.\n    // >>> longToString(123, \"\")\n    // (\"123\")\n    def longToString(x : Long, s : String) : String = {\n        if (x < 0) {\n            s += \"ERROR\"\n        } else {\n            s += x.toString\n        }\n        return s\n    }\n\n    // Convert the non-negative integer x to a string and prepend it to the string s.\n    // If x is less than zero, the string \"ERROR\" will be prepended to s.\n    // >>> longToString(123\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292558,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9uqo66zu.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9uqo66zu.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9uqo66zu.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9uqo66zu.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9uqo66zu.scala:30:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9uqo66zu.scala:59:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m            s += \u001b[31m\"ERROR\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean s.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val shifted = circularShift(digits, shift)\n        shifted.mkString(\"l\")\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : scala.math.BigInt, shift : scala.math.BigInt) : scala.collection.immutable.String = {\n        val digits = x.toString().split(\"l\")\n        val shifted = circularShift(digits, shift)\n        shifted.mkString(\"l\")\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : scala.collection.immutable.Vector[Long], shift : scala.collection.immutable.Vector[Long]) : scala.collection.immutable.Vector[Long] = {\n        val digits = x.toSeq().toList()\n        val shifted = circularShift(digits, shift)\n        shifted.toSeq().toList()\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : scala.collection.immutable.Vector[scala.math.BigInt], shift : scala.collection.immutable.Vector[scala.math.BigInt]) : scala.collection.\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292558,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo180q37z.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo180q37z.scala:60:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E067] Syntax Error: /tmp/tmpo180q37z.scala:50:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mcircularShift\u001b[0m(\u001b[36mx\u001b[0m : scala.collection.immutable.Vector[scala.math.BigInt], \u001b[36mshift\u001b[0m : scala.collection.immutable.Vector[scala.math.BigInt]) : scala.collection.\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDeclaration of \u001b[33mmethod\u001b[0m \u001b[35mcircularShift\u001b[0m not allowed here: only classes can have declared but undefined members\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo180q37z.scala:24:101 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mcircularShift\u001b[0m(\u001b[36mx\u001b[0m : scala.math.BigInt, \u001b[36mshift\u001b[0m : scala.math.BigInt) : scala.collection.immutable.String = {\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtype String is not a member of scala.collection.immutable - did you mean immutable.Stream?\n\u001b[31m\u001b[31m-- Error: /tmp/tmpo180q37z.scala:38:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = x.toSeq().toList()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mSeqOps\u001b[0m: (i: Int): Long\n\u001b[31m\u001b[31m-- Error: /tmp/tmpo180q37z.scala:40:21 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        shifted.toSeq().toList()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mSeqOps\u001b[0m: (i: Int): Long\n\u001b[31m\u001b[31m-- [E006] ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x == 0) {\n            return \"\"\n        } else {\n            return reverseDigits(x / 10) + (x % 10)\n        }\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_1q1u5cs.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp_1q1u5cs.scala:44:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 37 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 44\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp_1q1u5cs.scala:59:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mcircularShiftDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m, \u001b[36mshift\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef circularShiftDigits(x: Long, shift: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 26 and\n\u001b[31m   |\u001b[0mdef circularShiftDigits(x: Long, shift: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 59\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_1q1u5cs.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(circularShift((\u001b[31m100l\u001b[0m), (\u001b[31m2l\u001b[0m)).equals((\u001b[31m\"001\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: circularShift\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_1q1u5cs.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    asser",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp__m9hcgi.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp__m9hcgi.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp__m9hcgi.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n        val s2 = s.substring(shift, s.length)\n        val s3 = s2.substring(0, s2.length - shift)\n        val s4 = s3 + s2\n        return s4\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292561,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5anjelne.scala:13:29 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ms2\u001b[0m = s.substring(shift, s.length)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                             Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5anjelne.scala:14:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ms3\u001b[0m = s2.substring(\u001b[31m0\u001b[0m, s2.length - shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Found:    Long\n\u001b[31m   |\u001b[0m                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length) {\n            return x.toString.reverse()\n        } else {\n            return x.toString.substring(shift, x.toString.length)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292560,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmprpuzp7_i.scala:13:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mreturn\u001b[0m x.toString.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprpuzp7_i.scala:15:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mreturn\u001b[0m x.toString.substring(shift, x.toString.length)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1) + String.valueOf(x % 10)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292557,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkp4vqjzz.scala:13:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mreturn\u001b[0m reverseDigits(x)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: reverseDigits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292548,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbjz96yq4.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbjz96yq4.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbjz96yq4.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until (digits.length - shift)) {\n            result = result + digits[i]\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292560,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_vyw3cir.scala:14:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until (digits.length - shift)) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Long\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_vyw3cir.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        }\n        var digits = x.toString().split(\"\")\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString().split(\"\")\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString().split(\"\")\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString().split(\"\")\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString().split(\"\")\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292562,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpe9ag_ks1.scala:84:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe9ag_ks1.scala:17:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe9ag_ks1.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe9ag_ks1.scala:21:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe9ag_ks1.scala:33:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe9ag_ks1.scala:45:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length) {\n            return x.toString.reverse()\n        }\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + x.toString[i]\n        }\n        for (i <- shift until x.toString.length) {\n            result = result + x.toString[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292561,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmptfv5f57d.scala:13:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mreturn\u001b[0m x.toString.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptfv5f57d.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptfv5f57d.scala:17:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            result = result + x.toString[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptfv5f57d.scala:20:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            result = result + x.toString[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"321\")\n    def reverseDigits(x : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Convert the string s to a non-negative integer and return it as a long.\n    // The string may contain an optional minus sign followed by only the ten\n    // digits 0 through 9.\n    // >>> stringToLong(\"123\")\n    // 123l\n    def stringToLong(s : String) : Long = {\n        val result = 0l\n        for (i <- 0 until s.length) {\n            val digit = s.charAt(i)\n            if (digit.toString() == \"0\") {\n                result = result + 0l\n            } else if (digit.toString() == \"1\") {\n                result = result + 1l\n            } else if (digit.toString() == \"2\") {\n                result = result + 2l\n            } else if (digit.toString() == \"3\") {\n                result = result + 3l\n            } else if (digit.toString() == \"4\") {\n                result = result + 4l\n            } else if (digit.toString() == \"5\") {\n                result = result + 5l\n            } else if (digit.toString() == \"6\") {\n                result = result + 6l\n            } else if (digit.toString() == \"7\") {\n                result = result + 7l\n            } else if (digit.toString() == \"8\") {\n                result = result + 8l\n            } else if (digit.toString() == \"\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292565,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp3psu2vsp.scala:62:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (digit.toString() == \"\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           unclosed string literal\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3psu2vsp.scala:73:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3psu2vsp.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3psu2vsp.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3psu2vsp.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3psu2vsp.scala:30:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length) {\n            return x.toString.reverse()\n        }\n        return x.toString.substring(shift, x.toString.length)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292561,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp2vk5hepo.scala:13:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mreturn\u001b[0m x.toString.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2vk5hepo.scala:15:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mreturn\u001b[0m x.toString.substring(shift, x.toString.length)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until (digits.length - shift)) {\n            result = result + digits[i]\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292560,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_vyw3cir.scala:14:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until (digits.length - shift)) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Long\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_vyw3cir.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length) {\n            return x.toString.reverse()\n        } else {\n            return circularShift(x.toString.reverse().toLong, shift).reverse()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292560,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpy449kq60.scala:13:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mreturn\u001b[0m x.toString.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmpy449kq60.scala:15:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mreturn\u001b[0m circularShift(x.toString.reverse().toLong, shift).reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292563,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_xkgpfeh.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xkgpfeh.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xkgpfeh.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var shiftDigits = digits.substring(shift)\n        var shiftedDigits = digits.substring(0, shift) + shiftDigits\n        return shiftedDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292564,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4b2ht04g.scala:13:43 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mshiftDigits\u001b[0m = digits.substring(shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4b2ht04g.scala:14:48 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mshiftedDigits\u001b[0m = digits.substring(\u001b[31m0\u001b[0m, shift) + shiftDigits\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits[0].toString + circularShift(digits[1], shift)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292560,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp7y70stan.scala:13:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m].toString + circularShift(digits[\u001b[31m1\u001b[0m], shift)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val xs = x.toString\n        val shiftStr = shift.toString\n        val shiftDigits = shiftStr.split(\"l\")\n        val shiftDigitsLength = shiftDigits.length\n        val shiftDigitsInt = shiftDigits.map(Long::parseLong).toList\n        val shiftDigitsIntLength = shiftDigitsInt.length\n        val result = xs.substring(shiftDigitsIntLength)\n        if (shiftDigitsLength > shiftDigitsIntLength) {\n            val reversed = xs.substring(0, shiftDigitsIntLength)\n            return reversed\n        } else {\n            return result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292563,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprxx2z1k_.scala:16:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshiftDigitsInt\u001b[0m = shiftDigits.map(Long::parseLong).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   Not found: parseLong\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmprxx2z1k_.scala:16:61 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshiftDigitsInt\u001b[0m = shiftDigits.map(Long::parseLong).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 1)\n    }\n\n    // Reverse the digits of the integer x, starting from the given position, and\n    // return the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"32\")\n    def reverseDigits(x : Long, start : Long) : String = {\n        if (start > x) {\n            return reverseDigits(x)\n        } else {\n            return reverseDigits(x, start + 1)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 1)\n    }\n\n    // Reverse the digits of the integer x, starting from the given position, and\n    // return the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"32\")\n    def reverseDigits(x : Long, start : Long) : String = {\n        if (start > x) {\n            return reverseDigits(x)\n        } else {\n            return reverseDigits(x, start + 1)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 1)\n    }\n\n    // Reverse the digits of the integer x, starting from the given position, and\n    // return the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"32\")\n    def reverseDigits(x : Long, start : Long) : String\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292561,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpn5tot4j4.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E067] Syntax Error: /tmp/tmpn5tot4j4.scala:68:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m, \u001b[36mstart\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDeclaration of \u001b[33mmethod\u001b[0m \u001b[35mreverseDigits\u001b[0m not allowed here: only classes can have declared but undefined members\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpn5tot4j4.scala:41:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 22 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 41\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpn5tot4j4.scala:49:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m, \u001b[36mstart\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long, start: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 30 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long, start: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 49\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpn5tot4j4.scala:60:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString().split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292565,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5zmwpawf.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5zmwpawf.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5zmwpawf.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292563,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_xkgpfeh.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xkgpfeh.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xkgpfeh.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length) return x.toString.reverse()\n        return x.toString.substring(shift, x.toString.length)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpisew0953.scala:12:64 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mif\u001b[0m (shift > x.toString.length) \u001b[33mreturn\u001b[0m x.toString.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpisew0953.scala:13:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mreturn\u001b[0m x.toString.substring(shift, x.toString.length)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits[0] + circularShift(digits[1], shift)\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits((12l))\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = reverseDigits(digits[1]) + digits[0]\n        return result\n    }\n\n    // Convert the string s to a long integer and return the result as a string.\n    // >>> stringToLong(\"1234\")\n    // (\"1234\")\n    def stringToLong(s : String) : String = {\n        val result = s.replaceAll(\"[^0-9]\", \"\")\n        return result\n    }\n\n    // Convert the long integer x to a string and return the result as a string.\n    // >>> longToString(1234l)\n    // (\"1234\")\n    def longToString(x : Long) : String = {\n        val result = x.toString\n        return result\n    }\n\n    // Compute the sum of the digits of the integer x and return the result as a string.\n    // >>> sumDigits(1234l)\n    // (\"4\")\n    def sumDigits(x : Long) : String = {\n        val result = x.toString.replaceAll(\"[^0-9]\", \"\")\n        return result\n    }\n\n    // Compute the product of the digits of the integer x and return the result as a string.\n    // >>> productDigits(1234l)\n    // (\"2468\")\n    def productDigits(x : Long) : String = {\n        val result = x.toString.replaceAll(\"[^0-9]\", \"\")\n        return result\n    }\n\n    // Compute the sum of the digits of the integer x and return the result as a string.\n    // >>> sumDigits(1234l)\n    // (\"4\")\n    def sumDigits(x : Long) : String = {\n        val result = x.toString.replace\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292565,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpn3ylv__l.scala:13:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m] + circularShift(digits[\u001b[31m1\u001b[0m], shift)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpn3ylv__l.scala:22:41 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = reverseDigits(digits[\u001b[31m1\u001b[0m]) + digits[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpn3ylv__l.scala:22:54 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = reverseDigits(digits[\u001b[31m1\u001b[0m]) + digits[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- [E051] Reference Error: /tmp/tmpn3ylv__l.scala:62:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = x.toString.replace\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mAmbiguous overload. The overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mreplace\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: CharSequence, x$1: CharSequence): String\n\u001b[31m   |\u001b[0m (x$0: Char, x$1: Char): String\n\u001b[31m   |\u001b[0mboth match expected type <?>\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn3ylv__l.scala:63:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m long",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        }\n        var result = \"\"\n        for (i <- 0 until x.toString().length) {\n            result = result + x.toString().charAt(i)\n            if (i + shift < x.toString().length) {\n                result = result + x.toString().charAt(i + shift)\n            }\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until x.toString().length) {\n            result = result + x.toString().charAt(x.toString().length - 1 - i)\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits2(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until x.toString().length) {\n            result = result + x.toString().charAt(x.toString().length - 1 - i)\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits3(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until x.toString().length) {\n            result = result + x.toString().charAt(x.toString().length - 1 - i)\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits4(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until x.toString().length) {\n            result = result + x.toString().\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292568,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprdzyt4sq.scala:65:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprdzyt4sq.scala:75:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprdzyt4sq.scala:19:54 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                result = result + x.toString().charAt(i + shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      Found:    Long\n\u001b[31m   |\u001b[0m                                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprdzyt4sq.scala:74:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmprdzyt4sq.scala:66:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m66 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        var i = 0\n        while (i < shift) {\n            result = digits[i] + result\n            i = i + 1\n        }\n        result = digits[i] + result\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292563,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdrwhhr_3.scala:16:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            result = digits[\u001b[35mi\u001b[0m] + result\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdrwhhr_3.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        result = digits[\u001b[35mi\u001b[0m] + result\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = digits[i] + result\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv159a9qp.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv159a9qp.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv159a9qp.scala:18:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = digits[\u001b[35mi\u001b[0m] + result\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val xs = x.toString\n        val shift_ = shift.toString\n        val shift_len = shift_.length\n        val xs_len = xs.length\n        val result = \"\"\n        for (i <- 0 until xs_len) {\n            val digit = xs.substring(i, i + 1)\n            val shift_digit = shift_\n            if (shift_len > i) {\n                shift_digit = shift_.substring(shift_len - i)\n            }\n            result += shift_digit + digit\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292567,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpern9y46i.scala:21:28 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                shift_digit = shift_.substring(shift_len - i)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val shift_digit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpern9y46i.scala:23:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            result += shift_digit + digit\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean result.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits.map(d -> {\n            val shifted = circularShiftDigits(d, shift)\n            return shifted\n        }).mkString(\"l\")\n        return result\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits.map(d -> {\n            val shifted = circularShiftDigits(d, shift)\n            return shifted\n        }).mkString(\"l\")\n        return result\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits.map(d -> {\n            val shifted = circularShiftDigits(d, shift)\n            return shifted\n        }).mkString(\"l\")\n        return result\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"l\")\n\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292570,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp41t78eci.scala:13:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits.map(d -> {\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp41t78eci.scala:16:10 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        }).mkString(\u001b[31m\"l\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp41t78eci.scala:29:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits.map(d -> {\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp41t78eci.scala:32:10 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        }).mkString(\u001b[31m\"l\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp41t78eci.scala:45:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits.map(d -> {\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp41t78eci.scala:48:10 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        }).mkString(\u001b[31m\"l\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Erro",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val xs = x.toString\n        val shiftStr = shift.toString\n        val shiftDigits = shiftStr.split(\"l\")\n        val shiftDigitsLength = shiftDigits.length\n        val shiftDigitsInt = shiftDigits.map(Integer.parseInt)\n        val shiftDigitsIntLength = shiftDigitsInt.length\n        val shiftDigitsIntLengthInt = shiftDigitsIntLength.toInt\n        val shiftDigitsIntLengthIntPlusOne = shiftDigitsIntLengthInt + 1\n        val shiftDigitsIntLengthIntPlusOneInt = shiftDigitsIntLengthInt + 1\n        val shiftDigitsIntLengthIntPlusOneIntPlusOne = shiftDigitsIntLengthInt + 1 + 1\n        val shiftDigitsIntLengthIntPlusOneIntPlusOneInt = shiftDigitsIntLengthInt + 1 + 1 + 1\n        val shiftDigitsIntLengthIntPlusOneIntPlusOneIntPlusOne = shiftDigitsIntLengthInt + 1 + 1 + 1 + 1 + 1\n        val shiftDigitsIntLengthIntPlusOneIntPlusOneIntPlusOneIntPlusOne = shiftDigitsIntLengthInt + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        val shiftDigitsIntLengthIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne = shiftDigitsIntLengthInt + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        val shiftDigitsIntLengthIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne = shiftDigitsIntLengthInt + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        val shiftDigitsIntLengthIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne = shiftDigitsIntLengthInt + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        val shiftDigitsIntLengthIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne = shiftDigitsIntLengthInt + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        val shiftDigitsIntLengthIntPlusOne\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxzrh99m1.scala:30:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxzrh99m1.scala:30:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length) {\n            return x.toString.reverse()\n        } else {\n            return x.toString.substring(shift, x.toString.length) + x.toString.substring(0, shift)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292570,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpbq7kxg_n.scala:13:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mreturn\u001b[0m x.toString.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbq7kxg_n.scala:15:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mreturn\u001b[0m x.toString.substring(shift, x.toString.length) + x.toString.substring(\u001b[31m0\u001b[0m, shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbq7kxg_n.scala:15:92 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mreturn\u001b[0m x.toString.substring(shift, x.toString.length) + x.toString.substring(\u001b[31m0\u001b[0m, shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        }\n        var digits = x.toString().split(\"\")\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString().split(\"\")\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Return the sum of the digits of the integer x.\n    // >>> sumDigits(12l)\n    // (3)\n    def sumDigits(x : Long) : Long = {\n        var digits = x.toString().split(\"\")\n        var result = 0l\n        for (i <- 0 until digits.length) {\n            result = result + Long(digits[i])\n        }\n        return result\n    }\n\n    // Return the product of the digits of the integer x.\n    // >>> productDigits(12l)\n    // (2)\n    def productDigits(x : Long) : Long = {\n        var digits = x.toString().split(\"\")\n        var result = 1l\n        for (i <- 0 until digits.length) {\n            result = result * Long(digits[i])\n        }\n        return result\n    }\n\n    // Return the sum of the digits of the integer x,\n    // but if the sum is 10, return \"X\".\n    // >>> sumDigits10(12l)\n    // (\"X\")\n    def sumDigits10(x : Long) : String = {\n        var digits = x.toString().split(\"\")\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        if\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp8uxlkny5.scala:72:10 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m        \u001b[33mif\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8uxlkny5.scala:17:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8uxlkny5.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8uxlkny5.scala:21:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8uxlkny5.scala:33:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp8uxlkny5.scala:45:30 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m            result = result + Long(digits[\u001b[35mi\u001b[0m])\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(123l)\n    // (\"321\")\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt(s : String) : Long = {\n        var digits = s.toString\n        var result = 0l\n        for (i <- 0 until digits.length) {\n            result = result * 10 + digits[i]\n        }\n        return result\n    }\n\n    // Convert an integer into a string of digits.\n    // >>> intToString(123)\n    // \"123\"\n    def intToString(x : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Convert a string of digits into a string of words.\n    // >>> stringToWords(\"123\")\n    // \"one, two, three\"\n    def stringToWords(s : String) : String = {\n        var digits = s.toString\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + words[digits[i]]\n        }\n        return result\n    }\n\n    // Convert a string of words into a string of digits.\n    // >>> wordsToString(\"one, two, three\")\n    // \"123\"\n    def wordsToString(s : String) : String = {\n        var words = s.toString\n        \n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292570,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiuld9tvf.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiuld9tvf.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiuld9tvf.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiuld9tvf.scala:30:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiuld9tvf.scala:42:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m            result = result * \u001b[31m10\u001b[0m + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiuld9tvf.scala:54:37 ----------------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length) return x.toString.reverse()\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + x.toString[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292571,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpba2xksgl.scala:12:64 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mif\u001b[0m (shift > x.toString.length) \u001b[33mreturn\u001b[0m x.toString.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpba2xksgl.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpba2xksgl.scala:15:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + x.toString[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until (digits.length - shift)) {\n            result = result + digits[i]\n        }\n        for (i <- (digits.length - shift) until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292553,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps7wg8umy.scala:14:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until (digits.length - shift)) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Long\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps7wg8umy.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps7wg8umy.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length) {\n            return x.toString.reverse()\n        }\n        return x.toString.substring(shift, x.toString.length)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292561,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp2vk5hepo.scala:13:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mreturn\u001b[0m x.toString.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2vk5hepo.scala:15:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mreturn\u001b[0m x.toString.substring(shift, x.toString.length)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp__m9hcgi.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp__m9hcgi.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp__m9hcgi.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length) {\n            return x.toString.reverse()\n        } else {\n            return x.toString.substring(shift, x.toString.length) + x.toString.substring(0, shift)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292570,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpbq7kxg_n.scala:13:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mreturn\u001b[0m x.toString.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbq7kxg_n.scala:15:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mreturn\u001b[0m x.toString.substring(shift, x.toString.length) + x.toString.substring(\u001b[31m0\u001b[0m, shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbq7kxg_n.scala:15:92 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mreturn\u001b[0m x.toString.substring(shift, x.toString.length) + x.toString.substring(\u001b[31m0\u001b[0m, shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1) + x.toString()\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Convert the string s to a long integer.\n    // >>> stringToLong(\"1234\")\n    // 1234l\n    def stringToLong(s : String) : Long = {\n        return Long.parseLong(s)\n    }\n\n    // Convert the long integer x to a string.\n    // >>> longToString(1234l)\n    // \"1234\"\n    def longToString(x : Long) : String = {\n        return x.toString()\n    }\n\n    // Compute the circular shift of the string s.\n    // >>> circularShift(\"abc\", 1)\n    // (\"bac\")\n    def circularShift(s : String, shift : Long) : String = {\n        return circularShift(stringToLong(s), shift)\n    }\n\n    // Compute the reverse of the string s.\n    // >>> reverse(\"abc\")\n    // (\"cba\")\n    def reverse(s : String) : String = {\n        return circularShift(s, s.length())\n    }\n\n    // Compute the circular shift of the string s.\n    // >>> circularShift(\"abc\", -1)\n    // (\"cba\")\n    def circularShift(s : String, shift : Long) : String = {\n        return circularShift(stringToLong(s), shift)\n    }\n\n    // Compute the reverse of the string s.\n    // >>> reverse(\"abc\")\n    // (\"cba\")\n    def reverse(s : String) : String = {\n        return circularShift(s, s.length())\n    }\n\n    // Compute the circular shift of the string s.\n    // >>> circularShift(\"abc\", -1)\n    // (\"cba\")\n    def circularShift(s : String\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292572,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm15c1hf6.scala:72:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm15c1hf6.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm15c1hf6.scala:30:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mreturn\u001b[0m Long.parseLong(s)\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               value parseLong is not a member of object Long\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpm15c1hf6.scala:57:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mcircularShift\u001b[0m(\u001b[36ms\u001b[0m : \u001b[35mString\u001b[0m, \u001b[36mshift\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef circularShift(s: String, shift: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 43 and\n\u001b[31m   |\u001b[0mdef circularShift(s: String, shift: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 57\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpm15c1hf6.scala:64:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverse\u001b[0m(\u001b[36ms\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverse(s: String): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 50 and\n\u001b[31m   |\u001b[0mdef reverse(s: String): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 64\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm15c1hf6",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1) + reverseDigits(x)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 0)\n    }\n\n    // Reverse the digits of the integer x, starting at the given index, and return\n    // the result as a string.\n    // >>> reverseDigits(12l, 1)\n    // (\"21\")\n    def reverseDigits(x : Long, start : Int) : String = {\n        if (start > x) {\n            return reverseDigits(x, 0)\n        } else {\n            return reverseDigits(x, start + 1) + reverseDigits(x, 0)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 0)\n    }\n\n    // Reverse the digits of the integer x, starting at the given index, and return\n    // the result as a string.\n    // >>> reverseDigits(12l, 1)\n    // (\"21\")\n    def reverseDigits(x : Long, start : Int) : String = {\n        if (start > x) {\n            return reverseDigits(x, 0)\n        } else {\n            return reverseDigits(x, start + 1) + reverseDigits(x, 0)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 0)\n    }\n\n    // Reverse the digits of the integer x, starting at the given index, and return\n    // the result as a string.\n    // >>> reverseDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpca4vhglr.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpca4vhglr.scala:41:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 22 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 41\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpca4vhglr.scala:49:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m, \u001b[36mstart\u001b[0m : \u001b[35mInt\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long, start: Int): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 30 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long, start: Int): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 49\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpca4vhglr.scala:60:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 41 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 60\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        }\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        for (i <- 0 until shift) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Reverse digits of the integer x and return as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until x) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Compute the circular shift of the digits of the integer x,\n    // shift the digits right by shift and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftRight((12l), (1l))\n    // (\"12\")\n    // >>> circularShiftRight((12l), (2l))\n    // (\"21\")\n    def circularShiftRight(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        }\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        for (i <- 0 until shift) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Compute the circular shift of the digits of the integer x,\n    // shift the digits right by shift and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftLeft((12l), (1l))\n    // (\"21\")\n    // >>> circularShiftLeft((12l), (2l))\n    // (\"12\")\n    def circularShiftLeft(x : Long, shift : Long) : String = {\n        if (shift > x) {\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292573,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpga9fnbbp.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpga9fnbbp.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpga9fnbbp.scala:18:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            x = x / \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpga9fnbbp.scala:20:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpga9fnbbp.scala:22:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            x = x / \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpga9fnbbp.scala:32:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until x) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (x : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation ava",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        var i = 0\n        while (i < shift) {\n            result = digits[i] + result\n            i = i + 1\n        }\n        result = digits[i] + result\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292563,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdrwhhr_3.scala:16:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            result = digits[\u001b[35mi\u001b[0m] + result\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdrwhhr_3.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        result = digits[\u001b[35mi\u001b[0m] + result\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift2(x : Long, shift : Long) : String = {\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift3(x : Long, shift : Long) : String = {\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift4(x : Long, shift : Long) : String = {\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292573,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwk3rlfs7.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk3rlfs7.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwk3rlfs7.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwk3rlfs7.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk3rlfs7.scala:30:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwk3rlfs7.scala:31:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = digits[0].concat(digits[1].substring(shift.toString().length()))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292570,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpyupqg29_.scala:13:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m].concat(digits[\u001b[31m1\u001b[0m].substring(shift.toString().length()))\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = digits[0] + circularShift(digits[1], shift)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmph_9kd1da.scala:13:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m] + circularShift(digits[\u001b[31m1\u001b[0m], shift)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result += digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result += digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292574,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj66h6wru.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj66h6wru.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj66h6wru.scala:15:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj66h6wru.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj66h6wru.scala:18:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292563,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_xkgpfeh.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xkgpfeh.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xkgpfeh.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString().length()) {\n            return reverseDigits(x.toString())\n        } else {\n            return x.toString().substring(shift, x.toString().length()) + x.toString().substring(0, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(123)\n    // (\"321\")\n    def reverseDigits(x : Long) : String = {\n        return x.toString().replaceAll(\"(\\\\d)\", \"$1l\")\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt(s : String) : Long = {\n        return _.toLong(s)\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt2(s : String) : Long = {\n        return _.toLong(s)\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt3(s : String) : Long = {\n        return _.toLong(s)\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt4(s : String) : Long = {\n        return _.toLong(s)\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt5(s : String) : Long = {\n        return _.toLong(s)\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt6(s : String) : Long = {\n        return _.toLong(s)\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt7(s : String) : Long = {\n\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_7tr77c.scala:13:43 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mreturn\u001b[0m reverseDigits(x.toString())\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Found:    String\n\u001b[31m   |\u001b[0m                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_7tr77c.scala:15:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mreturn\u001b[0m x.toString().substring(shift, x.toString().length()) + x.toString().substring(\u001b[31m0\u001b[0m, shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_7tr77c.scala:15:100 -------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mreturn\u001b[0m x.toString().substring(shift, x.toString().length()) + x.toString().substring(\u001b[31m0\u001b[0m, shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpr_7tr77c.scala:30:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mreturn\u001b[0m _.toLong(s)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.toLong(s).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpr_7tr77c.scala:37:15 -----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits[0] + circularShift(digits[1], shift)\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = reverseDigits(digits[1]) + digits[0]\n        return result\n    }\n\n    // Convert the string s to a long value and return the result.\n    // >>> stringToLong(\"12\")\n    // (12l)\n    def stringToLong(s : String) : Long = {\n        val result = s.toLong\n        return result\n    }\n\n    // Convert the long value x to a string and return the result.\n    // >>> longToString(12l)\n    // (\"12\")\n    def longToString(x : Long) : String = {\n        val result = x.toString\n        return result\n    }\n\n    // Convert the string s to a double value and return the result.\n    // >>> stringToDouble(\"12.3\")\n    // (12.3)\n    def stringToDouble(s : String) : Double = {\n        val result = s.toDouble\n        return result\n    }\n\n    // Convert the double value x to a string and return the result.\n    // >>> doubleToString(12.3)\n    // (\"12.3\")\n    def doubleToString(x : Double) : String = {\n        val result = x.toString\n        return result\n    }\n\n    // Convert the string s to a float value and return the result.\n    // >>> stringToFloat(\"12.3\")\n    // (12.3f)\n    def stringToFloat(s : String) : Float = {\n        val result = s.toFloat\n        return result\n    }\n\n    // Convert the float value x to a string and return the result.\n    // >>> floatToString(12.3f)\n    // (\"12.3\")\n    def floatToString(x : Float) : String = {\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpvb22ngap.scala:13:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m] + circularShift(digits[\u001b[31m1\u001b[0m], shift)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvb22ngap.scala:22:41 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = reverseDigits(digits[\u001b[31m1\u001b[0m]) + digits[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvb22ngap.scala:22:54 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = reverseDigits(digits[\u001b[31m1\u001b[0m]) + digits[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvb22ngap.scala:69:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mfloatToString\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mFloat\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    Unit\n\u001b[31m   |\u001b[0m                                            Required: String\n\u001b[31m70 |\u001b[0m    }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        var i = 0\n        while (i < shift) {\n            result = digits[i] + result\n            i = i + 1\n        }\n        result = digits[i] + result\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292563,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdrwhhr_3.scala:16:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            result = digits[\u001b[35mi\u001b[0m] + result\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdrwhhr_3.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        result = digits[\u001b[35mi\u001b[0m] + result\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        var i = 0\n        while (i < shift) {\n            result = digits[i] + result\n            i = i + 1\n        }\n        while (i < digits.length) {\n            result = digits[i] + result\n            i = i + 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292571,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcr60byxi.scala:16:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            result = digits[\u001b[35mi\u001b[0m] + result\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcr60byxi.scala:20:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            result = digits[\u001b[35mi\u001b[0m] + result\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val xs = x.toString\n        val shift_str = shift.toString\n        val shift_int = shift_str.toInt\n        val shift_int_str = shift_int.toString\n        val shift_int_str_len = shift_int_str.length\n        val shift_int_str_len_minus_1 = shift_int_str_len - 1\n        val shift_int_str_len_minus_2 = shift_int_str_len - 2\n        val shift_int_str_len_minus_3 = shift_int_str_len - 3\n        val shift_int_str_len_minus_4 = shift_int_str_len - 4\n        val shift_int_str_len_minus_5 = shift_int_str_len - 5\n        val shift_int_str_len_minus_6 = shift_int_str_len - 6\n        val shift_int_str_len_minus_7 = shift_int_str_len - 7\n        val shift_int_str_len_minus_8 = shift_int_str_len - 8\n        val shift_int_str_len_minus_9 = shift_int_str_len - 9\n        val shift_int_str_len_minus_10 = shift_int_str_len - 10\n        val shift_int_str_len_minus_11 = shift_int_str_len - 11\n        val shift_int_str_len_minus_12 = shift_int_str_len - 12\n        val shift_int_str_len_minus_13 = shift_int_str_len - 13\n        val shift_int_str_len_minus_14 = shift_int_str_len - 14\n        val shift_int_str_len_minus_15 = shift_int_str_len - 15\n        val shift_int_str_len_minus_16 = shift_int_str_len - 16\n        val shift_int_str_len_minus_17 = shift_int_str_len - 17\n        val shift_int_str_len_minus_18 = shift_int_str_len - 18\n        val shift_int_str_len_minus_19\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpph9x59kz.scala:36:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpph9x59kz.scala:36:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString().length()) {\n            return x.toString().reverse()\n        } else {\n            return x.toString().substring(shift.toString().length(), x.toString().length()) + x.toString().substring(0, shift.toString().length())\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292573,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp45hpfztb.scala:13:39 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mreturn\u001b[0m x.toString().reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            var result = \"\"\n            for (i <- 0 until shift) {\n                result = result + (x % 10)\n                x = x / 10\n            }\n            return result\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until x) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until x) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until x) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until x) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <-\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292578,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp00weizv2.scala:77:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m        \u001b[33mfor\u001b[0m (i <-\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp00weizv2.scala:16:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp00weizv2.scala:18:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                x = x / \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp00weizv2.scala:29:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until x) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (x : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp00weizv2.scala:31:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            x = x / \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp00weizv2.scala:41:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until x) {\n\u001b[31m\u001b[31m   |\u001b[0m                ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length) return x.toString.reverse()\n        return circularShift(x.toString.substring(1), shift) + x.toString.charAt(0)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp2tdexv0r.scala:12:64 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mif\u001b[0m (shift > x.toString.length) \u001b[33mreturn\u001b[0m x.toString.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2tdexv0r.scala:13:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mreturn\u001b[0m circularShift(x.toString.substring(\u001b[31m1\u001b[0m), shift) + x.toString.charAt(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Found:    String\n\u001b[31m   |\u001b[0m                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        }\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 to (digits.length - shift)) {\n            result += digits[i]\n        }\n        for (i <- (digits.length - shift) to digits.length) {\n            result += digits[i]\n        }\n        return result\n    }\n\n    // Reverse digits of the integer x and return as a string.\n    // >>> reverseDigits(12l)\n    // \"21\"\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 to digits.length - 1) {\n            result += digits[i]\n        }\n        return result\n    }\n\n    // Reverse digits of the integer x and return as a string.\n    // >>> reverseDigits(12l)\n    // \"21\"\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 to digits.length - 1) {\n            result += digits[i]\n        }\n        return result\n    }\n\n    // Reverse digits of the integer x and return as a string.\n    // >>> reverseDigits(12l)\n    // \"21\"\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 to digits.length - 1) {\n            result += digits[i]\n        }\n        return result\n    }\n\n    // Reverse digits of the integer x and return as a string.\n    // >>> reverseDigits(12l)\n    // \"21\"\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 to digits.length - 1) {\n            result += digits[i]\n        }\n        return result\n    }\n\n    // Reverse digits of the integer x and return\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8ulc7iwj.scala:84:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8ulc7iwj.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to (digits.length - shift)) {\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    Long\n\u001b[31m   |\u001b[0m                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8ulc7iwj.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8ulc7iwj.scala:18:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8ulc7iwj.scala:21:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8ulc7iwj.scala:21:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8ulc7iwj.scala:33:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1) + x.toString()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzaa7lsh7.scala:13:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mreturn\u001b[0m reverseDigits(x)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: reverseDigits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length) return x.toString.reverse()\n        return x.toString.substring(shift, x.toString.length)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpisew0953.scala:12:64 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mif\u001b[0m (shift > x.toString.length) \u001b[33mreturn\u001b[0m x.toString.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpisew0953.scala:13:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mreturn\u001b[0m x.toString.substring(shift, x.toString.length)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val xs = x.toString\n        val shift_str = shift.toString\n        val shift_int = shift.toInt\n        if (shift_int > xs.length()) {\n            return xs.reverse()\n        } else {\n            val result = xs.substring(shift_int)\n            val result_str = result.reverse()\n            return result_str\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpfr238244.scala:16:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33mreturn\u001b[0m xs.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmpfr238244.scala:19:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mresult_str\u001b[0m = result.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292563,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_xkgpfeh.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xkgpfeh.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xkgpfeh.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[(i + shift) % digits.length]\n        }\n        result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[(digits.length - 1 - i)]\n        }\n        result\n    }\n\n    // Convert the integer x to a string and reverse the digits of the string.\n    // >>> reverseDigitsToString(12l)\n    // (\"21\")\n    def reverseDigitsToString(x : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[(digits.length - 1 - i)]\n        }\n        result\n    }\n\n    // Convert the integer x to a string and reverse the digits of the string.\n    // >>> reverseDigitsToString(12l)\n    // (\"21\")\n    def reverseDigitsToString2(x : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[(digits.length - 1 - i)]\n        }\n        result\n    }\n\n    // Convert the integer x to a string and reverse the digits of the string.\n    // >>> reverseDigitsToString(12l)\n    // (\"21\")\n    def reverseDigitsToString3(x : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[(digits.length - 1 - i)]\n        }\n        result\n    }\n\n    // Convert the integer\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292580,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpg66po83x.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg66po83x.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg66po83x.scala:15:49 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[(\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[35mshift\u001b[0m) \u001b[35m%\u001b[0m digits.length]\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Not found: type %\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg66po83x.scala:27:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            result = result + digits[(digits.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m \u001b[35m-\u001b[0m \u001b[35mi\u001b[0m)]\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: type -\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg66po83x.scala:39:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            result = result + digits[(digits.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m \u001b[35m-\u001b[0m \u001b[35mi\u001b[0m)]\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: type -\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg66po83x.scala:51",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292563,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_xkgpfeh.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xkgpfeh.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xkgpfeh.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits2(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits3(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits4(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits5(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits6(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits7(x : Long) : String = {\n        return circularShift(x,\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292538,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpe0w0elzn.scala:66:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpe0w0elzn.scala:65:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m        \u001b[33mreturn\u001b[0m circularShift(x,\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter shift of \u001b[33mmethod\u001b[0m \u001b[35mcircularShift\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m: (x: Long, shift: Long): String\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until (digits.length - shift)) {\n            result = result + digits[i]\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292560,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_vyw3cir.scala:14:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until (digits.length - shift)) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Long\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_vyw3cir.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits[0].concat(digits[1].substring(shift.toString.length()))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292549,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpeq3psppl.scala:13:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m].concat(digits[\u001b[31m1\u001b[0m].substring(shift.toString.length()))\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292548,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbjz96yq4.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbjz96yq4.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbjz96yq4.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val xs = x.toString\n        val shiftStr = shift.toString\n        if (shiftStr.length > xs.length()) {\n            return xs.reverse()\n        }\n        val result = xs.substring(shiftStr.length, xs.length)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp4gwq48g6.scala:15:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mreturn\u001b[0m xs.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        }\n        if (shift < 0) {\n            return reverseDigits(x)\n        }\n        if (shift == 0) {\n            return x.toString()\n        }\n        return circularShift(x, shift - 1) + x.toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, n : Int) : String = {\n        if (n == 0) {\n            return \"\"\n        }\n        if (n == 1) {\n            return x.toString()\n        }\n        return reverseDigits(x, n - 1) + x.toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, n : Int) : String = {\n        if (n == 0) {\n            return \"\"\n        }\n        if (n == 1) {\n            return x.toString()\n        }\n        return reverseDigits(x, n - 1) + x.toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, n : Int) : String = {\n        if (n == 0) {\n            return \"\"\n        }\n        if (n == 1) {\n            return x.toString()\n        }\n        return reverseDigits(x, n - 1) + x.toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgb3i_0p0.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpgb3i_0p0.scala:47:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m, \u001b[36mn\u001b[0m : \u001b[35mInt\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long, n: Int): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 34 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long, n: Int): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 47\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpgb3i_0p0.scala:60:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m, \u001b[36mn\u001b[0m : \u001b[35mInt\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long, n: Int): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 47 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long, n: Int): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 60\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgb3i_0p0.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(circularShift((\u001b[31m100l\u001b[0m), (\u001b[31m2l\u001b[0m)).equals((\u001b[31m\"001\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: circularShift\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgb3i_0p0.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Convert the integer x to a string and return the string.\n    // >>> toString(12l)\n    // (\"12\")\n    def toString(x : Long) : String = {\n        return x.toString\n    }\n\n    // Convert the string s to an integer and return the result.\n    // If s is empty, return 0.\n    // >>> toInt(\"12\")\n    // 12\n    def toInt(s : String) : Int = {\n        if (s.isEmpty) {\n            return 0\n        } else {\n            return Integer.parseInt(s)\n        }\n    }\n\n    // Convert the string s to a long and return the result.\n    // If s is empty, return 0.\n    // >>> toLong(\"12\")\n    // 12l\n    def toLong(s : String) : Long = {\n        if (s.isEmpty) {\n            return 0l\n        } else {\n            return Long.parseLong(s)\n        }\n    }\n\n    // Convert the string s to a float and return the result.\n    // If s is empty, return 0.0.\n    // >>> toFloat(\"12\")\n    // 12.0\n    def toFloat(s : String) : Float = {\n        if (s.isEmpty) {\n            return 0.0\n        } else {\n            return Float.parseFloat(s)\n        }\n    }\n\n    // Convert the string s to\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4rqtri89.scala:88:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4rqtri89.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4rqtri89.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4rqtri89.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4rqtri89.scala:30:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4rqtri89.scala:62:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m            \u001b[33mreturn\u001b[0m Long.parseLong(s)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value parseLong is not a member of object Long\n\u001b[31m\u001b[31m-- [E008",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length) return x.toString.reverse()\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + x.toString[i]\n        }\n        for (i <- shift until x.toString.length) {\n            result = result + x.toString[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(123l)\n    // (\"321\")\n    def reverseDigits(x : Long) : String = {\n        return x.toString.reverse()\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt(s : String) : Long = {\n        return s.toLong\n    }\n\n    // Convert an integer into a string of digits.\n    // >>> intToString(123)\n    // \"123\"\n    def intToString(x : Long) : String = {\n        return x.toString\n    }\n\n    // Compute the sum of the digits of the integer x.\n    // >>> sumDigits(123)\n    // 3\n    def sumDigits(x : Long) : Long = {\n        return x.toString.reduce(_.sum)\n    }\n\n    // Compute the product of the digits of the integer x.\n    // >>> productDigits(123)\n    // 2\n    def productDigits(x : Long) : Long = {\n        return x.toString.reduce(_.product)\n    }\n\n    // Compute the sum of the digits of the integer x.\n    // >>> sumDigits(123)\n    // 3\n    def sumDigits(x : Long) : Long = {\n        return x.toString.reduce(_.sum)\n    }\n\n    // Compute the product of the digits of the integer x.\n    // >>> productDigits(123)\n    // 2\n    def productDigits(x : Long) : Long = {\n        return x.toString.reduce(_.product)\n    }\n\n    // Compute the sum of the\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292581,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwcdw6fon.scala:82:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpwcdw6fon.scala:12:64 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mif\u001b[0m (shift > x.toString.length) \u001b[33mreturn\u001b[0m x.toString.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwcdw6fon.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwcdw6fon.scala:15:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + x.toString[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwcdw6fon.scala:18:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + x.toString[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpwcdw6fon.scala:27:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mreturn\u001b[0m x.toString.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument f",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = digits[0].concat(digits[1].substring(shift, digits[1].length()))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292577,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpkwcwf27i.scala:13:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m].concat(digits[\u001b[31m1\u001b[0m].substring(shift, digits[\u001b[31m1\u001b[0m].length()))\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            var result = \"\"\n            for (i <- 0 until (x - shift)) {\n                result = result + (x % 10)\n                x = x / 10\n            }\n            return result\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (x - 1)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12)\n    // (\"21\")\n    def reverseDigits2(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (x - 1)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12)\n    // (\"21\")\n    def reverseDigits3(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (x - 1)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12)\n    // (\"21\")\n    def reverseDigits4(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (x - 1)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12)\n    // (\"21\")\n    def reverseDigits5(x : Long) : String\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxxzjfmm0.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxzjfmm0.scala:16:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until (x - shift)) {\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    Long\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpxxzjfmm0.scala:18:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                x = x / \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxzjfmm0.scala:29:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until (x - \u001b[31m1\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Long\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpxxzjfmm0.scala:31:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            x = x / \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxzjfmm0.scala:41:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until (x - \u001b[31m1\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Long\n\u001b[31m   |\u001b[0m                           Required: In",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString().split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[(i + shift) % digits.length]\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptwnuzkrp.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptwnuzkrp.scala:15:49 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[(\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[35mshift\u001b[0m) \u001b[35m%\u001b[0m digits.length]\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Not found: type %\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292548,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbjz96yq4.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbjz96yq4.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbjz96yq4.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292545,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprp9u_46s.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmprp9u_46s.scala:44:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 37 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 44\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmprp9u_46s.scala:51:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 44 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 51\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmprp9u_46s.scala:58:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 51 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 58\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqa39bpmf.scala:66:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpqa39bpmf.scala:29:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 22 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 29\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpqa39bpmf.scala:36:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 29 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 36\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpqa39bpmf.scala:43:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 36 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 43\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName a",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until (digits.length - shift)) {\n            result = result + digits[i + shift]\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292551,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptykkp8ds.scala:14:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until (digits.length - shift)) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Long\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptykkp8ds.scala:15:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[35mshift\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Not found: type +\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x < 0) {\n            return reverseDigits(-x)\n        } else {\n            return reverseDigits(x)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x < 0) {\n            return reverseDigits(-x)\n        } else {\n            return reverseDigits(x)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x < 0) {\n            return reverseDigits(-x)\n        } else {\n            return reverseDigits(x)\n        }\n    \n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpoywcmaab.scala:44:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 37 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 44\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpoywcmaab.scala:55:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 44 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 55\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpoywcmaab.scala:66:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 55 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 66\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292548,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbjz96yq4.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbjz96yq4.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbjz96yq4.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString().split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292565,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5zmwpawf.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5zmwpawf.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5zmwpawf.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length) return x.toString.reverse()\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + x.toString[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292571,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpba2xksgl.scala:12:64 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mif\u001b[0m (shift > x.toString.length) \u001b[33mreturn\u001b[0m x.toString.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpba2xksgl.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpba2xksgl.scala:15:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + x.toString[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = \"\"\n        for (i <- 0 until digits.length - 1) {\n            result += digits[(i + shift) % digits.length]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpv4l3sxuu.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result += digits[(\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[35mshift\u001b[0m) \u001b[35m%\u001b[0m digits.length]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv4l3sxuu.scala:15:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result += digits[(\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[35mshift\u001b[0m) \u001b[35m%\u001b[0m digits.length]\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: type %\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            var result = \"\"\n            for (i <- 0 until (x - shift)) {\n                result = result + (x % 10)\n                x = x / 10\n            }\n            return result\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (x - 1)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (x - 1)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (x - 1)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (x - 1)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) :\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292586,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpd2y5mljk.scala:76:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpd2y5mljk.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E067] Syntax Error: /tmp/tmpd2y5mljk.scala:75:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) :\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDeclaration of \u001b[33mmethod\u001b[0m \u001b[35mreverseDigits\u001b[0m not allowed here: only classes can have declared but undefined members\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd2y5mljk.scala:16:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until (x - shift)) {\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    Long\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpd2y5mljk.scala:18:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                x = x / \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd2y5mljk.scala:29:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until (x - \u001b[31m1\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Long\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpd2y5mljk.scala:31:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[(i + shift) % digits.length]\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpee6gp4_9.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpee6gp4_9.scala:15:49 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[(\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[35mshift\u001b[0m) \u001b[35m%\u001b[0m digits.length]\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Not found: type %\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292563,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_xkgpfeh.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xkgpfeh.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xkgpfeh.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits[0] + circularShift(digits[1], shift)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292538,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpsown1pvr.scala:13:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m] + circularShift(digits[\u001b[31m1\u001b[0m], shift)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292549,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc1n7auhu.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc1n7auhu.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc1n7auhu.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[(i + shift) % digits.length]\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpee6gp4_9.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpee6gp4_9.scala:15:49 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[(\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[35mshift\u001b[0m) \u001b[35m%\u001b[0m digits.length]\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Not found: type %\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until (digits.length - shift)) {\n            result = result + digits[i]\n        }\n        result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until (digits.length - 1)) {\n            result = result + digits[i]\n        }\n        result\n    }\n\n    // Convert the string s to a long and return the result.\n    // >>> stringToLong(\"1234\")\n    // 1234l\n    def stringToLong(s : String) : Long = {\n        var result = 0l\n        for (i <- 0 until (s.length - 1)) {\n            result = result * 10 + s[i].charCodeAt(0) - 48\n        }\n        result\n    }\n\n    // Convert the long l to a string and return the result.\n    // >>> longToString(1234l)\n    // \"1234\"\n    def longToString(l : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (l.toString().length - 1)) {\n            result = result + l.toString()[i]\n        }\n        result\n    }\n\n    // Compute the sum of the digits of the integer x and return the result as a string.\n    // >>> sumDigits(1234l)\n    // \"4\"\n    def sumDigits(x : Long) : String = {\n        var result = 0l\n        for (i <- 0 until (x.toString().length - 1)) {\n            result = result + x.toString()[i]\n        }\n        result\n    }\n\n    // Compute the product of the digits of the integer x and return the result as a string.\n    // >>> productDigits(1234l)\n    // \"1234\"\n    def productDigits(x : Long) : String = {\n        var result =\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292585,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp36tra1a3.scala:69:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mresult\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp36tra1a3.scala:14:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until (digits.length - shift)) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Long\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp36tra1a3.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp36tra1a3.scala:27:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp36tra1a3.scala:38:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m            result = result * \u001b[31m10\u001b[0m + s[\u001b[35mi\u001b[0m].charCodeAt(\u001b[31m0\u001b[0m) - \u001b[31m48\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp36tra1a3.scal",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length) {\n            return x.toString.reverse()\n        }\n        var digits = x.toString.toCharArray\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result += digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result += digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292587,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpwdy0_95f.scala:13:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mreturn\u001b[0m x.toString.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwdy0_95f.scala:17:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwdy0_95f.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwdy0_95f.scala:18:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwdy0_95f.scala:21:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwdy0_95f.scala:21:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-exp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x == 0) {\n            return \"\"\n        } else {\n            return reverseDigits(x / 10) + (x % 10)\n        }\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_1q1u5cs.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp_1q1u5cs.scala:44:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 37 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 44\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp_1q1u5cs.scala:59:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mcircularShiftDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m, \u001b[36mshift\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef circularShiftDigits(x: Long, shift: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 26 and\n\u001b[31m   |\u001b[0mdef circularShiftDigits(x: Long, shift: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 59\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_1q1u5cs.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(circularShift((\u001b[31m100l\u001b[0m), (\u001b[31m2l\u001b[0m)).equals((\u001b[31m\"001\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: circularShift\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_1q1u5cs.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    asser",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        var i = 0\n        while (i < shift) {\n            result = result + digits[i]\n            i = i + 1\n        }\n        while (i < digits.length) {\n            result = result + digits[i]\n            i = i + 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp92k_psz0.scala:16:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp92k_psz0.scala:20:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7xiltgl7.scala:13:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mreturn\u001b[0m reverseDigits(x)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: reverseDigits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val xs = x.toString\n        val shift_ = shift.toString\n        val shift_len = shift_.length\n        val x_len = xs.length\n        val result = \"\"\n        for (i <- 0 until (x_len - shift_len)) {\n            result = result + xs[(i + shift_len) % x_len]\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292583,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpblj9oxcs.scala:18:49 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + xs[(\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[35mshift_len\u001b[0m) \u001b[35m%\u001b[0m \u001b[35mx_len\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Not found: type %\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            var result = \"\"\n            for (i <- 0 until (x - shift)) {\n                result = result + (x % 10)\n                x = x / 10\n            }\n            result = result + (x % 10)\n            return result\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (x - 1)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        result = result + (x % 10)\n        return result\n    }\n\n    // Return the sum of the digits of the integer x.\n    // >>> sumDigits(12l)\n    // (3)\n    def sumDigits(x : Long) : Long = {\n        var result = 0l\n        for (i <- 0 until (x - 1)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        result = result + (x % 10)\n        return result\n    }\n\n    // Return the product of the digits of the integer x.\n    // >>> productDigits(12l)\n    // (2)\n    def productDigits(x : Long) : Long = {\n        var result = 1l\n        for (i <- 0 until (x - 1)) {\n            result = result * (x % 10)\n            x = x / 10\n        }\n        result = result * (x % 10)\n        return result\n    }\n\n    // Return the sum of the digits of the integer x.\n    // >>> sumDigits(12l)\n    // (3)\n    def sumDigits(x : Long) : Long = {\n        var result = 0l\n        for (i <- 0 until (x - 1)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        result = result + (x % 10)\n        return result\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292589,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjgikrb95.scala:87:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjgikrb95.scala:16:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until (x - shift)) {\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    Long\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpjgikrb95.scala:18:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                x = x / \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjgikrb95.scala:30:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until (x - \u001b[31m1\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Long\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpjgikrb95.scala:32:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            x = x / \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjgikrb95.scala:43:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until (x - \u001b[31m1\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Long\n\u001b[31m   |\u001b[0m                           Required: In",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1) + String.valueOf(x % 10)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits2(x : Long) : String = {\n        return reverseDigits(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits3(x : Long) : String = {\n        return reverseDigits2(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits4(x : Long) : String = {\n        return reverseDigits3(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits5(x : Long) : String = {\n        return reverseDigits4(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits6(x : Long) : String = {\n        return reverseDigits5(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits7(x : Long) : String = {\n        return reverseDigits6(x\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292583,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqpeyqekw.scala:66:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292563,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_xkgpfeh.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xkgpfeh.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xkgpfeh.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        var i = 0\n        while (i < shift) {\n            result = digits[i] + result\n            i = i + 1\n        }\n        result = digits[i] + result\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292563,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdrwhhr_3.scala:16:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            result = digits[\u001b[35mi\u001b[0m] + result\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdrwhhr_3.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        result = digits[\u001b[35mi\u001b[0m] + result\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result += digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result += digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292574,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj66h6wru.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj66h6wru.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj66h6wru.scala:15:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj66h6wru.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj66h6wru.scala:18:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292563,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_xkgpfeh.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xkgpfeh.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xkgpfeh.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        var i = 0\n        while (i < shift) {\n            result = digits[i] + result\n            i = i + 1\n        }\n        for (i = shift; i < digits.length; i = i + 1) {\n            result = digits[i] + result\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292589,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1urywtyc.scala:19:15 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mfor\u001b[0m (i = shift; i < digits.length; i = i + \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               ')' expected, but '=' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1urywtyc.scala:19:41 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mfor\u001b[0m (i = shift; i < digits.length; i = i + \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E020] Syntax Error: /tmp/tmp1urywtyc.scala:19:52 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mfor\u001b[0m (i = shift; i < digits.length; i = i + \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    \u001b[33myield\u001b[0m or \u001b[33mdo\u001b[0m expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1urywtyc.scala:16:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            result = digits[\u001b[35mi\u001b[0m] + result\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1urywtyc.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mfor\u001b[0m (i = shift; i < digits.length; i = i + \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue foreach is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import c",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString().length()) {\n            return x.toString().reverse()\n        }\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + x.toString().charAt(i)\n        }\n        for (i <- shift until x.toString().length()) {\n            result = result + x.toString().charAt(i)\n        }\n        return result\n    }\n\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift2(x : Long, shift : Long) : String = {\n        if (shift > x.toString().length()) {\n            return x.toString().reverse()\n        }\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + x.toString().charAt(i)\n        }\n        for (i <- shift until x.toString().length()) {\n            result = result + x.toString().charAt(i)\n        }\n        return result\n    }\n\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift3(x : Long, shift : Long) : String = {\n        if (shift > x.toString().length()) {\n            return x.toString().reverse()\n        }\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + x.toString().charAt(i)\n        }\n        for (i <- shift until x.toString().length()) {\n            result = result + x.toString().charAt(i)\n        }\n        return result\n    }\n\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift4(x : Long, shift : Long) : String = {\n        if (shift > x.toString().length()) {\n            return x.toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292589,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8m6fte05.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp8m6fte05.scala:13:39 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mreturn\u001b[0m x.toString().reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8m6fte05.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8m6fte05.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            result = result + x.toString().charAt(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (i : Long)\n\u001b[31m   |\u001b[0m                                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp8m6fte05.scala:31:39 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            \u001b[33mreturn\u001b[0m x.toString().reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8m6fte05.scala:34:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292588,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvwqnhhun.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvwqnhhun.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvwqnhhun.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = digits[i] + result\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return as a string.\n    // >>> reverseDigits(123)\n    // \"321\"\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = digits[i] + result\n        }\n        return result\n    }\n\n    // Convert the string s to a non-negative integer and return as a string.\n    // The string may contain letters and/or digits.\n    // >>> stringToInt(\"123\")\n    // \"123\"\n    // >>> stringToInt(\"abc\")\n    // \"0\"\n    // >>> stringToInt(\"1abc\")\n    // \"0\"\n    // >>> stringToInt(\"abc1\")\n    // \"0\"\n    // >>> stringToInt(\"abc1def\")\n    // \"0\"\n    // >>> stringToInt(\"abc1def12\")\n    // \"0\"\n    def stringToInt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            var c = s[i]\n            if (c >= '0' && c <= '9') {\n                result = c + result\n            } else {\n                break\n            }\n        }\n        if (result == \"\") {\n            result = \"0\"\n        }\n        return result\n    }\n\n    // Convert the non-negative integer x to a string and return as a string.\n    // The string may contain letters and/or digits.\n    // >>> intToString(123)\n    // \"123\"\n    // >>> intToString(0)\n    // \"0\"\n    // >>> intToString(-1)\n    // \"-1\"\n    def intToString(x : Long) : String = {\n        var result = \"\"\n        for (\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292589,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmprck9852x.scala:75:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m        \u001b[33mfor\u001b[0m (\n\u001b[31m\u001b[31m   |\u001b[0m             ^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprck9852x.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprck9852x.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprck9852x.scala:18:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = digits[\u001b[35mi\u001b[0m] + result\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprck9852x.scala:30:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            result = digits[\u001b[35mi\u001b[0m] + result\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprck9852x.scala:52:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mc\u001b[0m = s[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length) return x.toString.reverse()\n        return x.toString.substring(shift) + x.toString.substring(0, shift)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292558,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpkj2y0p5_.scala:12:64 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mif\u001b[0m (shift > x.toString.length) \u001b[33mreturn\u001b[0m x.toString.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkj2y0p5_.scala:13:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mreturn\u001b[0m x.toString.substring(shift) + x.toString.substring(\u001b[31m0\u001b[0m, shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkj2y0p5_.scala:13:69 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mreturn\u001b[0m x.toString.substring(shift) + x.toString.substring(\u001b[31m0\u001b[0m, shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1) + x.toString()\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 1) + x.toString()\n    }\n\n    // Reverse the digits of the integer x, starting from the given index, and\n    // return the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, from : Long) : String = {\n        if (from > x) {\n            return reverseDigits(x)\n        } else {\n            return reverseDigits(x, from + 1) + x.toString()\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 1) + x.toString()\n    }\n\n    // Reverse the digits of the integer x, starting from the given index, and\n    // return the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, from : Long) : String = {\n        if (from > x) {\n            return reverseDigits(x)\n        } else {\n            return reverseDigits(x, from + 1) + x.toString()\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 1) + x.toString()\n    }\n\n    // Reverse the digits of the integer x, starting from the given index, and\n    // return the result as a string.\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292585,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprn1gy4nm.scala:75:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmprn1gy4nm.scala:41:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 22 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 41\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmprn1gy4nm.scala:49:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m, \u001b[36mfrom\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long, from: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 30 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long, from: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 49\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmprn1gy4nm.scala:60:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 41 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 60\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = \"\"\n        for (i <- 0 until (digits.length - shift)) {\n            result += digits[i + shift]\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi47tdx72.scala:14:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until (digits.length - shift)) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Long\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpi47tdx72.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[35mshift\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi47tdx72.scala:15:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[35mshift\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: type +\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292563,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_xkgpfeh.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xkgpfeh.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xkgpfeh.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result += digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result += digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzf9vhx2b.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzf9vhx2b.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzf9vhx2b.scala:15:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzf9vhx2b.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzf9vhx2b.scala:18:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1) + x.toString()\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Convert the string s to a long integer and return the result.\n    // >>> stringToLong(\"1234\")\n    // 1234l\n    def stringToLong(s : String) : Long = {\n        return _.toLong(s)\n    }\n\n    // Convert the long integer x to a string and return the result.\n    // >>> longToString(1234l)\n    // \"1234\"\n    def longToString(x : Long) : String = {\n        return x.toString()\n    }\n\n    // Compute and return the circular shift of the string s by the integer shift.\n    // >>> circularShift(\"1234\", 1)\n    // \"4321\"\n    def circularShiftString(s : String, shift : Long) : String = {\n        return circularShift(stringToLong(s), shift)\n    }\n\n    // Compute and return the circular shift of the string s by the integer shift.\n    // >>> circularShift(\"1234\", -1)\n    // \"4321\"\n    def circularShiftStringReverse(s : String, shift : Long) : String = {\n        return circularShift(stringToLong(s), shift)\n    }\n\n    // Compute and return the circular shift of the string s by the integer shift.\n    // >>> circularShift(\"1234\", 2)\n    // \"2341\"\n    def circularShiftString2(s : String, shift : Long) : String = {\n        return circularShift(stringToLong(s), shift)\n    }\n\n    // Compute and return the circular shift of the string s by the integer shift.\n    // >>> circularShift(\"1234\", -2)\n    // \"2341\"\n    def circularShiftString2Reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292587,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E019] Syntax Error: /tmp/tmp84pgv4zf.scala:64:35 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mcircularShiftString2Reverse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Missing return type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp84pgv4zf.scala:74:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp84pgv4zf.scala:30:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mreturn\u001b[0m _.toLong(s)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.toLong(s).\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp84pgv4zf.scala:67:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    assert(circularShift((\u001b[31m100l\u001b[0m), (\u001b[31m2l\u001b[0m)).equals((\u001b[31m\"001\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: circularShift\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp84pgv4zf.scala:68:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    assert(circularShift((\u001b[31m12l\u001b[0m), (\u001b[31m2l\u001b[0m)).equals((\u001b[31m\"12\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: circularShift\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp84pgv4zf.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(circularShift((\u001b[31m97l\u001b[0m), (\u001b[31m8l\u001b[0m)).equals((\u001b[31m\"79\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: circularShift\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x < 0) {\n            return reverseDigits(-x)\n        } else {\n            return reverseDigits(x)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x < 0) {\n            return reverseDigits(-x)\n        } else {\n            return reverseDigits(x)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x < 0) {\n            return reverseDigits(-x)\n        } else {\n            return reverseDigits(x)\n        }\n    \n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292579,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpoywcmaab.scala:44:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 37 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 44\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpoywcmaab.scala:55:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 44 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 55\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpoywcmaab.scala:66:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 55 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 66\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString().length()) {\n            return x.toString().reverse()\n        }\n        return x.toString().substring(shift.toString().length()) + x.toString().substring(0, shift.toString().length())\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292588,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpqpdpof8p.scala:13:39 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mreturn\u001b[0m x.toString().reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits2(x : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits3(x : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits4(x : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdu68uayf.scala:82:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu68uayf.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdu68uayf.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdu68uayf.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdu68uayf.scala:30:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdu68uayf.scala:42:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits[0] + circularShift(digits[1], shift)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292538,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpsown1pvr.scala:13:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m] + circularShift(digits[\u001b[31m1\u001b[0m], shift)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val xs = x.toString\n        val shiftStr = shift.toString\n        if (shiftStr.length > xs.length()) {\n            return xs.reverse.mkString(\"\")\n        } else {\n            return xs.slice(shiftStr.length, xs.length())\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292592,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvmmgr89n.scala:21)\n\tat Problem.main(tmpvmmgr89n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"12\")\n    // 12\n    def stringToInt(s : String) : Long = {\n        var result = 0l\n        for (i <- 0 until s.length) {\n            result = result * 10 + s[i]\n        }\n        return result\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"12\")\n    // 12\n    def stringToInt2(s : String) : Long = {\n        var result = 0l\n        for (i <- 0 until s.length) {\n            result = result * 10 + s[i]\n        }\n        return result\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"12\")\n    // 12\n    def stringToInt3(s : String) : Long = {\n        var result = 0l\n        for (i <- 0 until s.length) {\n            result = result * 10 + s[i]\n        }\n        return result\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"12\")\n    // 12\n    def stringToInt4(s : String) : Long = {\n        var result = 0l\n        for (i <- 0 until s.length) {\n            result = result * 10 + s[i]\n        }\n        return result\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292592,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3h_4d6c2.scala:89:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3h_4d6c2.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3h_4d6c2.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3h_4d6c2.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3h_4d6c2.scala:30:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3h_4d6c2.scala:41:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m            result = result * \u001b[31m10\u001b[0m + s[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292563,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_xkgpfeh.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xkgpfeh.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xkgpfeh.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits[0].concat(digits[1].substring(shift))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmph1c7vl2n.scala:13:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m].concat(digits[\u001b[31m1\u001b[0m].substring(shift))\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits[0].substring(0, shift) + digits[0].substring(shift)\n        val reversed = digits[0].substring(0, shift).reverse().mkString(\"l\")\n        return result + reversed\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpl7tjrc_c.scala:13:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m].substring(\u001b[31m0\u001b[0m, shift) + digits[\u001b[31m0\u001b[0m].substring(shift)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmpl7tjrc_c.scala:14:29 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = digits[\u001b[31m0\u001b[0m].substring(\u001b[31m0\u001b[0m, shift).reverse().mkString(\u001b[31m\"l\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x == 0) {\n            return \"\"\n        } else {\n            return reverseDigits(x / 10) + (x % 10)\n        }\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292590,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvf_x_dot.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpvf_x_dot.scala:44:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 37 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 44\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpvf_x_dot.scala:59:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mcircularShiftDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m, \u001b[36mshift\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef circularShiftDigits(x: Long, shift: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 26 and\n\u001b[31m   |\u001b[0mdef circularShiftDigits(x: Long, shift: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 59\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvf_x_dot.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(circularShift((\u001b[31m100l\u001b[0m), (\u001b[31m2l\u001b[0m)).equals((\u001b[31m\"001\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: circularShift\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvf_x_dot.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    asser",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until (digits.length - shift)) {\n            result = result + digits[i + shift]\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292551,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptykkp8ds.scala:14:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until (digits.length - shift)) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Long\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptykkp8ds.scala:15:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[35mshift\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Not found: type +\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = digits[0] + circularShift(digits[1], shift)\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits((12l))\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = reverseDigits(digits[1]) + digits[0]\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits((12l))\n    // (\"21\")\n    def reverseDigits2(x : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = reverseDigits2(digits[1]) + digits[0]\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits((12l))\n    // (\"21\")\n    def reverseDigits3(x : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = reverseDigits3(digits[1]) + digits[0]\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits((12l))\n    // (\"21\")\n    def reverseDigits4(x : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = reverseDigits4(digits[1]) + digits[0]\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits((12l))\n    // (\"21\")\n    def reverseDigits5(x : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = reverseDigits5(digits[1]) + digits[0]\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp38q1afw9.scala:72:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp38q1afw9.scala:13:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m] + circularShift(digits[\u001b[31m1\u001b[0m], shift)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp38q1afw9.scala:22:41 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = reverseDigits(digits[\u001b[31m1\u001b[0m]) + digits[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp38q1afw9.scala:22:54 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = reverseDigits(digits[\u001b[31m1\u001b[0m]) + digits[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp38q1afw9.scala:31:42 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = reverseDigits2(digits[\u001b[31m1\u001b[0m]) + digits[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- Error: /tmp/tmp38q1afw9.scala:31:55 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = reverseDigits2(digits[\u001b[31m1\u001b[0m]) + digits[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits[0] + circularShift(digits[1], shift)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292538,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpsown1pvr.scala:13:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m] + circularShift(digits[\u001b[31m1\u001b[0m], shift)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result += digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result += digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292574,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj66h6wru.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj66h6wru.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj66h6wru.scala:15:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj66h6wru.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj66h6wru.scala:18:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        }\n        var result = \"\"\n        for (i <- 0 until x.toString().length) {\n            result = result + x.toString().charAt(i)\n            x = x - 1\n            if (x < 0) {\n                x = x + 10\n            }\n        }\n        return result\n    }\n\n    // Reverse digits of the integer x and return as a string.\n    // >>> reverseDigits(12)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until x.toString().length) {\n            result = result + x.toString().charAt(i)\n        }\n        return result\n    }\n\n    // Convert the string s to a non-negative integer and return as a string.\n    // The string may contain an optional sign character '-' or '+'.\n    // If the string is not a valid integer, return \"0\".\n    // >>> stringToInt(\"-123\")\n    // (-123)\n    // >>> stringToInt(\"+123\")\n    // (123)\n    // >>> stringToInt(\"-123.5\")\n    // (0)\n    // >>> stringToInt(\"123.5\")\n    // (123)\n    def stringToInt(s : String) : String = {\n        if (s.startsWith(\"+\")) {\n            return s.substring(1)\n        }\n        if (s.startsWith(\"-\")) {\n            return \"-\" + s.substring(1)\n        }\n        return s\n    }\n\n    // Convert the string s to a non-negative integer and return as a string.\n    // If the string is not a valid integer, return \"0\".\n    // >>> stringToInt(\"-123\")\n    // (-123)\n    // >>> stringToInt(\"+123\")\n    // (123)\n    // >>> stringToInt(\"-123.5\")\n    // (0)\n    // >>> stringToInt(\"123.5\")\n    // (123)\n    def stringToInt2(s : String) : String = {\n        \n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292593,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp779icnrl.scala:18:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            x = x - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp779icnrl.scala:20:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                x = x + \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp779icnrl.scala:68:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mstringToInt2\u001b[0m(\u001b[36ms\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    Unit\n\u001b[31m   |\u001b[0m                                            Required: String\n\u001b[31m69 |\u001b[0m        \n\u001b[31m70 |\u001b[0m    }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = digits[0] + circularShift(digits[1], shift)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmph_9kd1da.scala:13:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m] + circularShift(digits[\u001b[31m1\u001b[0m], shift)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until (digits.length - shift)) {\n            result = result + digits[i]\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292560,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_vyw3cir.scala:14:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until (digits.length - shift)) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Long\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_vyw3cir.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val xs = x.toString\n        val shift_ = shift.toString\n        val shift_len = shift_.length\n        val xs_len = xs.length\n        val result = \"\"\n        for (i <- 0 until (xs_len - shift_len)) {\n            result = result + xs[(i + shift_len)]\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfyoo1w0j.scala:18:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + xs[(\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[35mshift_len\u001b[0m)]\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Not found: type +\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1) + x.toString()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzaa7lsh7.scala:13:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mreturn\u001b[0m reverseDigits(x)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: reverseDigits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length) return x.toString.reverse()\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + x.toString[i]\n        }\n        for (i <- shift until x.toString.length) {\n            result = result + x.toString[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpydgwu7k3.scala:12:64 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mif\u001b[0m (shift > x.toString.length) \u001b[33mreturn\u001b[0m x.toString.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpydgwu7k3.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpydgwu7k3.scala:15:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + x.toString[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpydgwu7k3.scala:18:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + x.toString[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length) {\n            return x.toString.reverse()\n        }\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + x.toString[i]\n        }\n        for (i <- shift until x.toString.length) {\n            result = result + x.toString[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292561,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmptfv5f57d.scala:13:37 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mreturn\u001b[0m x.toString.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptfv5f57d.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptfv5f57d.scala:17:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            result = result + x.toString[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptfv5f57d.scala:20:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            result = result + x.toString[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var shiftDigits = digits.substring(shift)\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + shiftDigits[i]\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpce3ei5ts.scala:13:43 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mshiftDigits\u001b[0m = digits.substring(shift)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpce3ei5ts.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpce3ei5ts.scala:16:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            result = result + shiftDigits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1) + x.toString()\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits2(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits3(x : Long) : String = {\n        return reverseDigits2(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits4(x : Long) : String = {\n        return reverseDigits3(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits5(x : Long) : String = {\n        return reverseDigits4(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits6(x : Long) : String = {\n        return reverseDigits5(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits7(x : Long) : String = {\n        return reverseDigits6(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292592,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpd17vhxeh.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd17vhxeh.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(circularShift((\u001b[31m100l\u001b[0m), (\u001b[31m2l\u001b[0m)).equals((\u001b[31m\"001\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: circularShift\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd17vhxeh.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(circularShift((\u001b[31m12l\u001b[0m), (\u001b[31m2l\u001b[0m)).equals((\u001b[31m\"12\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: circularShift\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd17vhxeh.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(circularShift((\u001b[31m97l\u001b[0m), (\u001b[31m8l\u001b[0m)).equals((\u001b[31m\"79\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: circularShift\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd17vhxeh.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(circularShift((\u001b[31m12l\u001b[0m), (\u001b[31m1l\u001b[0m)).equals((\u001b[31m\"21\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: circularShift\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd17vhxeh.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(circularShift((\u001b[31m11l\u001b[0m), (\u001b[31m101l\u001b[0m)).equals((\u001b[31m\"11\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: circularShift\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when c",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = digits[i] + result\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv159a9qp.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv159a9qp.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv159a9qp.scala:18:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = digits[\u001b[35mi\u001b[0m] + result\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val xs = x.toString\n        val shiftStr = shift.toString\n        val shiftDigits = shiftStr.split(\"l\")[0]\n        val shiftLen = shiftStr.length() - shiftDigits.length()\n        val shiftDigitsArray = shiftDigits.toCharArray\n        val shiftDigitsArrayLen = shiftDigitsArray.length\n        val shiftDigitsArrayLenMinusOne = shiftDigitsArrayLen - 1\n        val shiftDigitsArrayLenMinusTwo = shiftDigitsArrayLen - 2\n        val shiftDigitsArrayLenMinusThree = shiftDigitsArrayLen - 3\n        val shiftDigitsArrayLenMinusFour = shiftDigitsArrayLen - 4\n        val shiftDigitsArrayLenMinusFive = shiftDigitsArrayLen - 5\n        val shiftDigitsArrayLenMinusSix = shiftDigitsArrayLen - 6\n        val shiftDigitsArrayLenMinusSeven = shiftDigitsArrayLen - 7\n        val shiftDigitsArrayLenMinusEight = shiftDigitsArrayLen - 8\n        val shiftDigitsArrayLenMinusNine = shiftDigitsArrayLen - 9\n        val shiftDigitsArrayLenMinusTen = shiftDigitsArrayLen - 10\n        val shiftDigitsArrayLenMinusEleven = shiftDigitsArrayLen - 11\n        val shiftDigitsArrayLenMinusTwelve = shiftDigitsArrayLen - 12\n        val shiftDigitsArrayLenMinusThirteen = shiftDigitsArrayLen - 13\n        val shiftDigitsArrayLenMinusFourteen = shiftDigitsArrayLen - 14\n        val shiftDigitsArrayLenMinusFifteen = shiftDigitsArrayLen - 15\n        val shiftDigitsArrayLenMinusSixteen = shiftDigitsArrayLen - 16\n        val shiftDigitsArrayLenMinusSeventeen = shiftDigitsArrayLen - 17\n        val shiftDigitsArrayLenMinusEighteen = shiftDigitsArrayLen - 18\n        val shiftDigitsArrayLenMinusNineteen = shiftDigitsArrayLen - 19\n        val shiftDigitsArrayLenMinusTwenty = shiftDigitsArrayLen - 20\n        val shiftDigitsArrayLenMinusTwentyOne = shiftDigitsArrayLen - 21\n        val shiftDigitsArrayLenMinusTwentyTwo = shiftDigitsArrayLen\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp09rdite9.scala:14:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mshiftDigits\u001b[0m = shiftStr.split(\u001b[31m\"l\"\u001b[0m)[\u001b[31m0\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp09rdite9.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        }\n        var result = \"\"\n        var i = 0\n        while (i < shift) {\n            result = result + x % 10\n            x /= 10\n            i += 1\n        }\n        result = result + x\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        while (x > 0) {\n            result = result + x % 10\n            x /= 10\n        }\n        return result\n    }\n\n    // Compute the circular shift of the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftRight((12l), (1l))\n    // (\"21\")\n    // >>> circularShiftRight((12l), (2l))\n    // (\"12\")\n    def circularShiftRight(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        }\n        var result = \"\"\n        var i = 0\n        while (i < shift) {\n            result = result + x % 10\n            x /= 10\n            i += 1\n        }\n        result = result + x\n        return result\n    }\n\n    // Compute the circular shift of the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftLeft((12l), (1l))\n    // (\"21\")\n    // >>> circularShiftLeft((12l), (2l))\n    // (\"12\")\n    def circularShiftLeft(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        }\n        var result = \"\"\n        var i = 0\n        while (i < shift) {\n            result = result + x\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjxnnftbk.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjxnnftbk.scala:19:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            x /= \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value /= is not a member of Long - did you mean x.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjxnnftbk.scala:33:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m            x /= \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value /= is not a member of Long - did you mean x.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjxnnftbk.scala:53:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m            x /= \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value /= is not a member of Long - did you mean x.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjxnnftbk.scala:84:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpjxnnftbk.scala:76:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m76 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val s = scala.math.BigInt(x)\n        val m = scala.math.BigInt(shift)\n        val n = scala.math.BigInt(10)\n        val r = scala.math.BigInt.pow(n, m.subtract(1))\n        val t = scala.math.BigInt.pow(n, m)\n        val y = s.multiply(r).divide(t)\n        y.toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo73fd9b1.scala:15:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mr\u001b[0m = scala.math.BigInt.pow(n, m.subtract(\u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value pow is not a member of object scala.math.BigInt\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo73fd9b1.scala:15:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mr\u001b[0m = scala.math.BigInt.pow(n, m.subtract(\u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                value subtract is not a member of BigInt\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo73fd9b1.scala:16:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mt\u001b[0m = scala.math.BigInt.pow(n, m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value pow is not a member of object scala.math.BigInt\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo73fd9b1.scala:17:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36my\u001b[0m = s.multiply(r).divide(t)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value multiply is not a member of BigInt\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString.length) return x.toString.reverse()\n        else return circularShift(x.toString.substring(1), shift).concat(x.toString.substring(0, 1))\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp05pz3x21.scala:12:64 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mif\u001b[0m (shift > x.toString.length) \u001b[33mreturn\u001b[0m x.toString.reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp05pz3x21.scala:13:54 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33melse\u001b[0m \u001b[33mreturn\u001b[0m circularShift(x.toString.substring(\u001b[31m1\u001b[0m), shift).concat(x.toString.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    String\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result += digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result += digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292574,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj66h6wru.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj66h6wru.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj66h6wru.scala:15:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj66h6wru.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj66h6wru.scala:18:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits[0].concat(digits[1].substring(shift.toString.length()))\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292549,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpeq3psppl.scala:13:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m].concat(digits[\u001b[31m1\u001b[0m].substring(shift.toString.length()))\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val xs = x.toString\n        val shift_ = shift.toString\n        val shift_len = shift_.length\n        val x_len = xs.length\n        if (shift_len > x_len) {\n            return xs\n        }\n        val result = xs.substring(shift_len)\n        val result_len = result.length\n        if (result_len > 0) {\n            return result.substring(0, result_len)\n        } else {\n            return \"\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp41d7lv7a.scala:28)\n\tat Problem.main(tmp41d7lv7a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString().split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[(i + shift) % digits.length]\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292582,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptwnuzkrp.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptwnuzkrp.scala:15:49 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[(\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[35mshift\u001b[0m) \u001b[35m%\u001b[0m digits.length]\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Not found: type %\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, 0)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, 0)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, 0)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, 0)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, 0)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, 0)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, 0)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    \n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292594,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpg83_3huz.scala:80:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpg83_3huz.scala:29:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 22 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 29\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpg83_3huz.scala:36:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 29 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 36\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpg83_3huz.scala:43:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mreverseDigits\u001b[0m(\u001b[36mx\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 36 and\n\u001b[31m   |\u001b[0mdef reverseDigits(x: Long): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 43\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292563,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_xkgpfeh.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xkgpfeh.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xkgpfeh.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result += digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result += digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292591,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzf9vhx2b.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzf9vhx2b.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzf9vhx2b.scala:15:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzf9vhx2b.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzf9vhx2b.scala:18:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result += digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        if (shift > x.toString().length()) {\n            return x.toString().reverse()\n        } else {\n            return x.toString().substring(shift.toString().length(), x.toString().length()) + x.toString().substring(0, shift.toString().length())\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292573,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp45hpfztb.scala:13:39 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mreturn\u001b[0m x.toString().reverse()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits[0] + circularShift(digits[1], shift)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292538,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpkxp3_3md.scala:13:27 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = digits[\u001b[31m0\u001b[0m] + circularShift(digits[\u001b[31m1\u001b[0m], shift)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take type parameters\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result += digits[(i + shift) % digits.length]\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292595,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqbox3eau.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqbox3eau.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result += digits[(\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[35mshift\u001b[0m) \u001b[35m%\u001b[0m digits.length]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqbox3eau.scala:15:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result += digits[(\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[35mshift\u001b[0m) \u001b[35m%\u001b[0m digits.length]\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: type %\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
      "timestamp": 1664292563,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_xkgpfeh.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until shift) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (shift : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xkgpfeh.scala:15:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xkgpfeh.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            result = result + digits[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}