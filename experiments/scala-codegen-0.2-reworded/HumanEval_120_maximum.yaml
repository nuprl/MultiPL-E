name: HumanEval_120_maximum
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list arr of integers and a positive integer k, return a sorted list\
  \ \n    // of length k with the maximum k numbers in arr.\n    // Example 1:\n \
  \   // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l))\n    //\
  \ (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example 2:\n    // >>>\
  \ maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n    // (List[Long](4l.toLong,\
  \ 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong, 2l.toLong,\
  \ 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n    // (List[Long](2l.toLong))\n\
  \    // Note:\n    // 1. The length of the list will be in the range of [1, 1000].\n\
  \    // 2. The elements in the list will be in the range of [-1000, 1000].\n   \
  \ // 3. 0 <= k <= len(arr)\n    def maximum(arr : List[Long], k : Long) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
  \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
  \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
  \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
  \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
  \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
  \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
  \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
  \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
  \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
  \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
  \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n    assert(maximum((List[Long](-1l.toLong,\
  \ 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong, -10l.toLong)), (2l)).equals((List[Long](3l.toLong,\
  \ 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 0l.toLong, 5l.toLong,\
  \ -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
  \ -4l.toLong)), (2l)).equals((List[Long](-4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong,\
  \ 10l.toLong)), (2l)).equals((List[Long](-10l.toLong, 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        var max : Long = -1l\n        var maxIndex : Long = -1l\n \
    \       for (i <- 0 until arr.length) {\n            if (arr[i] > max) {\n   \
    \             max = arr[i]\n                maxIndex = i\n            }\n    \
    \    }\n        if (maxIndex == -1) {\n            return arr\n        }\n   \
    \     var result : List[Long] = arr.take(k)\n        for (i <- k until arr.length)\
    \ {\n            if (arr[i] > max) {\n                max = arr[i]\n         \
    \       maxIndex = i\n            }\n        }\n        result = result.append(max)\n\
    \        return result", "        var result = mutable.List[Long]()\n        var\
    \ max = arr.head\n        var maxIndex = 0\n        var maxCount = 1\n       \
    \ for (i <- 1 until arr.size) {\n            if (arr.apply(i) > max) {\n     \
    \           max = arr.apply(i)\n                maxIndex = i\n               \
    \ maxCount = 1\n            } else if (arr.apply(i) == max) {\n              \
    \  maxCount += 1\n            }\n        }\n        if (maxCount < k) {\n    \
    \        result = arr.apply(maxIndex)\n        } else {\n            for (i <-\
    \ 1 until k) {\n                result = result.append(arr.apply(maxIndex))\n\
    \            }\n        }\n        return result", "        var max = arr.head\n\
    \        var maxIndex = 0\n        for (i <- 1 until arr.length) {\n         \
    \   if (arr[i] > max) {\n                max = arr[i]\n                maxIndex\
    \ = i\n            }\n        }\n        if (maxIndex == 0) {\n            return\
    \ arr\n        } else {\n            return arr.take(maxIndex + 1)\n        }",
  "        var result = List[Long](0)\n        for (i <- 0 until k) {\n          \
    \  result = result.append(arr.head)\n            arr = arr.tail\n        }\n \
    \       return result", "        var max : Long = -1l\n        var maxIndex :\
    \ Long = -1l\n        for (i <- 0 until k) {\n            if (arr[i] > max) {\n\
    \                max = arr[i]\n                maxIndex = i\n            }\n \
    \       }\n        var result : List[Long] = List[Long](maxIndex)\n        for\
    \ (i <- 0 until k) {\n            if (arr[i] == max) {\n                result\
    \ = result.append(i)\n            }\n        }\n        return result", "    \
    \    var max = arr.head\n        var maxIndex = 0\n        for (i <- 1 until k)\
    \ {\n            max = max(arr.head, max(arr.tail.head, max(arr.tail.tail.head,\
    \ max(arr.tail.tail.tail.head, max(arr.tail.tail.tail.tail.head, max(arr.tail.tail.tail.tail.tail.head,\
    \ max(arr.tail.tail.tail.tail.tail.tail.head, max(arr.tail.tail.tail.tail.tail.tail.tail.head,\
    \ max(arr.tail.tail.tail.tail.tail.tail.tail.tail.head, max(arr.tail.tail.tail.tail.tail.tail.tail.tail.tail.head,\
    \ max(arr.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head, max(arr.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head,\
    \ max(arr.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head, max(arr.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head,\
    \ max(arr.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head,\
    \ max(arr.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head,\
    \ max(arr.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head,\
    \ max(arr.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head,\
    \ max(arr.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head,\
    \ max(arr.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail", "    \
    \    var result = List[Long](0)\n        var i = 0\n        while (i < k) {\n\
    \            var max = arr.head\n            var j = 1\n            while (j <\
    \ arr.size) {\n                if (arr.apply(j) > max) {\n                   \
    \ max = arr.apply(j)\n                }\n                j = j + 1\n         \
    \   }\n            result = result.append(max)\n            i = i + 1\n      \
    \      arr = arr.tail\n        }\n        return result", "        val result\
    \ = mutable.List[Long]()\n        val max = arr.head\n        for (i <- 1 until\
    \ k) {\n            max = max.max(arr.head)\n            result = result.append(max)\n\
    \            arr = arr.tail\n        }\n        return result", "        var max\
    \ = arr.head\n        var maxIndex = 0\n        for (i <- 1 until arr.size) {\n\
    \            if (arr.apply(i) > max) {\n                max = arr.apply(i)\n \
    \               maxIndex = i\n            }\n        }\n        if (maxIndex ==\
    \ 0) {\n            return arr\n        }\n        return arr.take(maxIndex)",
  "        val result = mutable.List[Long]()\n        for (i <- 0 until k) {\n   \
    \         result.append(arr.head)\n            arr = arr.tail\n        }\n   \
    \     result", "        val result = mutable.List[Long]()\n        val max = arr.head\n\
    \        for (i <- 1 until k) {\n            max = max.max(arr.head)\n       \
    \     result = result.append(max)\n            arr = arr.tail\n        }\n   \
    \     return result", "        if (k == 0) return List.empty()\n        var max\
    \ = arr.head\n        var maxIndex = 0\n        for (i <- 1 until arr.length)\
    \ {\n            if (arr[i] > max) {\n                max = arr[i]\n         \
    \       maxIndex = i\n            }\n        }\n        if (maxIndex == 0) return\
    \ arr\n        var result = arr.take(maxIndex)\n        var left = arr.drop(maxIndex)\n\
    \        var right = arr.drop(maxIndex + 1)\n        if (k == 1) return result\n\
    \        if (k == 2) return result.append(max).append(maxIndex)\n        var leftMax\
    \ = maximum(left, k - 2)\n        var rightMax = maximum(right, k - 2)\n     \
    \   return leftMax.append(max).append(maxIndex).append(rightMax)", "        var\
    \ result = mutable.List[Long]()\n        var max = arr.head\n        var maxIndex\
    \ = 0\n        for (i <- 1 until arr.length) {\n            if (arr.apply(i) >\
    \ max) {\n                max = arr.apply(i)\n                maxIndex = i\n \
    \           }\n        }\n        for (i <- 1 until k) {\n            result.append(arr.apply(maxIndex))\n\
    \            maxIndex = (maxIndex + 1) % arr.length\n        }\n        return\
    \ result", "        val result = mutable.List[Long]()\n        val max = arr.head\n\
    \        for (i <- 1 until k) {\n            max = max.max(arr.head)\n       \
    \     result = result.append(max)\n            arr = arr.tail\n        }\n   \
    \     return result", "        var max = arr.head\n        var maxIndex = 0\n\
    \        for (i <- 1 until arr.size) {\n            if (arr.apply(i) > max) {\n\
    \                max = arr.apply(i)\n                maxIndex = i\n          \
    \  }\n        }\n        if (maxIndex == 0) {\n            return arr\n      \
    \  } else {\n            return arr.take(maxIndex)\n        }", "        var result\
    \ = mutable.List[Long]()\n        var max = arr.head\n        var i = 1\n    \
    \    while (i < k) {\n            max = max.max(arr.apply(i))\n            result\
    \ = result.append(max)\n            i = i + 1\n        }\n        return result",
  "        var max = arr.head\n        var maxIndex = 0\n        for (i <- 1 until\
    \ k) {\n            if (arr.apply(i).toLong > max.toLong) {\n                max\
    \ = arr.apply(i)\n                maxIndex = i\n            }\n        }\n   \
    \     return maxIndex.toList", "        val result = mutable.List[Long]()\n  \
    \      val max = arr.head\n        for (i <- 1 until k) {\n            if (arr.head\
    \ > max) {\n                max = arr.head\n            }\n            result\
    \ = result.append(arr.head)\n            arr = arr.tail\n        }\n        result\
    \ = result.append(max)\n        return result", "        var max = arr.head\n\
    \        var maxIndex = 0\n        for (i <- 1 until k) {\n            if (arr.apply(i).toLong\
    \ > max.toLong) {\n                max = arr.apply(i)\n                maxIndex\
    \ = i\n            }\n        }\n        return arr.apply(maxIndex)", "      \
    \  var max = arr.head\n        var maxIndex = 0\n        for (i <- 1 until arr.size)\
    \ {\n            if (arr.apply(i) > max) {\n                max = arr.apply(i)\n\
    \                maxIndex = i\n            }\n        }\n        if (maxIndex\
    \ == 0) {\n            return arr\n        } else {\n            return arr.take(maxIndex)\n\
    \        }", "        val result = mutable.List[Long]()\n        var i = 0\n \
    \       while (i < k) {\n            if (arr.isEmpty()) break\n            result.append(arr.head())\n\
    \            arr = arr.tail()\n            i += 1\n        }\n        return result",
  "        var result = mutable.List[Long]()\n        for (i <- 0 until k) {\n   \
    \         result = result.append(arr.head)\n            arr = arr.tail\n     \
    \   }\n        result", "        var max = arr.head\n        var maxIndex = 0\n\
    \        for (i <- 1 until arr.size) {\n            if (arr.apply(i) > max) {\n\
    \                max = arr.apply(i)\n                maxIndex = i\n          \
    \  }\n        }\n        if (k == maxIndex) {\n            return arr\n      \
    \  } else {\n            return arr.take(maxIndex)\n        }", "        var result\
    \ = mutable.List[Long]()\n        var i = 0\n        while (i < k) {\n       \
    \     result = result.append(arr.apply(i))\n            i = i + 1\n        }\n\
    \        return result", "        var result = mutable.List[Long]()\n        var\
    \ i = 0\n        while (i < k) {\n            result = result.append(arr.apply(i))\n\
    \            i = i + 1\n        }\n        return result", "        var max =\
    \ arr.head\n        var maxIndex = 0\n        for (i <- 1 until arr.size) {\n\
    \            if (arr.apply(i) > max) {\n                max = arr.apply(i)\n \
    \               maxIndex = i\n            }\n        }\n        if (k == maxIndex)\
    \ {\n            return arr\n        } else {\n            var result = arr.take(maxIndex)\n\
    \            result.update(arr.drop(maxIndex))\n            return result\n  \
    \      }", "        var result = mutable.List[Long]()\n        var max = arr.head\n\
    \        for (i <- 1 until k) {\n            max = max.max(arr.apply(i))\n   \
    \         result = result.append(max)\n        }\n        return result", "  \
    \      var result = mutable.List[Long]()\n        var max = arr.head\n       \
    \ var maxIndex = 0\n        for (i <- 1 until arr.size) {\n            if (arr.apply(i)\
    \ > max) {\n                max = arr.apply(i)\n                maxIndex = i\n\
    \            }\n        }\n        for (i <- 1 until k) {\n            result.append(max)\n\
    \            max = arr.apply(maxIndex)\n            maxIndex = (maxIndex + 1)\
    \ % arr.size\n        }\n        return result", "        var result = List[Long](0)\n\
    \        var max = arr.head\n        for (i <- 1 until k) {\n            max =\
    \ max.max(arr.head)\n            result = result.append(max)\n            arr\
    \ = arr.tail\n        }\n        return result", "        var max = arr.head\n\
    \        var maxIndex = 0\n        for (i <- 1 until k) {\n            if (arr.apply(i).toLong\
    \ > max.toLong) {\n                max = arr.apply(i)\n                maxIndex\
    \ = i\n            }\n        }\n        return arr.apply(maxIndex)", "      \
    \  var max = arr.head\n        var maxIndex = 0\n        for (i <- 1 until k)\
    \ {\n            if (arr.apply(i) > max) {\n                max = arr.apply(i)\n\
    \                maxIndex = i\n            }\n        }\n        return arr.slice(maxIndex,\
    \ k)", "        var result = mutable.List[Long]()\n        var i = 0\n       \
    \ while (i < k) {\n            var max = arr.head\n            var j = 1\n   \
    \         while (j < arr.size) {\n                if (arr.apply(j) > max) {\n\
    \                    max = arr.apply(j)\n                }\n                j\
    \ = j + 1\n            }\n            result = result.append(max)\n          \
    \  i = i + 1\n            arr = arr.tail\n        }\n        return result", " \
    \       var result = mutable.List[Long]()\n        var i = 0\n        while (i\
    \ < k) {\n            result = result.append(arr.apply(i))\n            i = i\
    \ + 1\n        }\n        return result.sort().reverse()", "        val result\
    \ = mutable.List[Long]()\n        val max = arr.head\n        for (i <- 1 until\
    \ k) {\n            max = max.max(arr.head)\n            result = result.append(max)\n\
    \            arr = arr.tail\n        }\n        return result", "        var result\
    \ = List[Long](0)\n        var i = 0\n        while (i < k) {\n            result\
    \ = result.append(arr.head)\n            arr = arr.tail\n            i = i + 1\n\
    \        }\n        return result", "        var max = arr.head\n        var maxIndex\
    \ = 0\n        for (i <- 1 until arr.length) {\n            if (arr[i] > max)\
    \ {\n                max = arr[i]\n                maxIndex = i\n            }\n\
    \        }\n        if (maxIndex == 0) {\n            return arr\n        } else\
    \ {\n            var result = arr.take(maxIndex)\n            result.append(arr.drop(maxIndex))\n\
    \            return result\n        }", "        var max = arr.head\n        var\
    \ maxIndex = 0\n        for (i <- 1 until k) {\n            if (arr.apply(i) >\
    \ max) {\n                max = arr.apply(i)\n                maxIndex = i\n \
    \           }\n        }\n        return arr.take(maxIndex)", "        val result\
    \ = mutable.List[Long]()\n        for (i <- 0 until k) {\n            val max\
    \ = arr.max()\n            result.append(max)\n            arr = arr.remove(max)\n\
    \        }\n        return result", "        var max = arr.head\n        var maxIndex\
    \ = 0\n        for (i <- 1 until arr.size) {\n            if (arr.apply(i) > max)\
    \ {\n                max = arr.apply(i)\n                maxIndex = i\n      \
    \      }\n        }\n        if (maxIndex == 0) {\n            return arr\n  \
    \      } else {\n            return arr.take(maxIndex)\n        }", "        var\
    \ max = arr.head\n        var maxIndex = 0\n        for (i <- 1 until arr.size)\
    \ {\n            if (arr.apply(i).toLong > max.toLong) {\n                max\
    \ = arr.apply(i)\n                maxIndex = i\n            }\n        }\n   \
    \     if (maxIndex == 0) {\n            return arr\n        }\n        var result\
    \ = arr.take(maxIndex)\n        var left = arr.drop(maxIndex)\n        var right\
    \ = arr.dropRight(maxIndex)\n        if (k == 1) {\n            return result\n\
    \        }\n        if (k == 2) {\n            return result.concat(maximum(left,\
    \ 1).concat(maximum(right, 1)))\n        }\n        var leftMax = maximum(left,\
    \ k - 2)\n        var rightMax = maximum(right, k - 2)\n        return result.concat(leftMax).concat(rightMax)",
  "        var max = arr.head\n        var maxIndex = 0\n        for (i <- 1 until\
    \ k) {\n            if (arr.apply(i).toLong > max.toLong) {\n                max\
    \ = arr.apply(i)\n                maxIndex = i\n            }\n        }\n   \
    \     return maxIndex == 0 ? arr : maxIndex", "        var result = mutable.List[Long]()\n\
    \        var i = 0\n        while (i < k) {\n            var max = arr.head\n\
    \            var j = 0\n            while (j < arr.size) {\n                if\
    \ (arr.apply(j) > max) {\n                    max = arr.apply(j)\n           \
    \     }\n                j = j + 1\n            }\n            result = result.append(max)\n\
    \            i = i + 1\n            arr = arr.tail\n        }\n        return\
    \ result", "        var max = arr.head\n        var maxIndex = 0\n        for\
    \ (i <- 1 until k) {\n            maxIndex = i\n            max = max(arr.apply(i).max(max))\n\
    \        }\n        return arr.apply(maxIndex)", "        val result = mutable.List[Long]()\n\
    \        val max = arr.max()\n        for (i <- 0 until k) {\n            if (arr.apply(i)\
    \ > max) {\n                result.append(arr.apply(i))\n            }\n     \
    \   }\n        return result", "        var max = arr.head\n        var maxIndex\
    \ = 0\n        for (i <- 1 until arr.size) {\n            if (arr.apply(i) > max)\
    \ {\n                max = arr.apply(i)\n                maxIndex = i\n      \
    \      }\n        }\n        if (k == maxIndex) {\n            return arr\n  \
    \      } else {\n            return arr.take(k).append(arr.drop(k).head)\n   \
    \     }", "        val result = mutable.List[Long]()\n        for (i <- 0 until\
    \ k) {\n            val max = arr.max()\n            result.append(max)\n    \
    \        arr = arr.filter(x -> x < max)\n        }\n        return result", " \
    \       var result = List[Long](0)\n        var i = 0\n        while (i < k) {\n\
    \            if (arr.isEmpty()) {\n                break\n            }\n    \
    \        result = result.append(arr.head())\n            arr = arr.tail()\n  \
    \          i += 1\n        }\n        return result", "        var max = arr.head\n\
    \        var maxIndex = 0\n        for (i <- 1 until arr.size) {\n           \
    \ if (arr.apply(i) > max) {\n                max = arr.apply(i)\n            \
    \    maxIndex = i\n            }\n        }\n        if (k == maxIndex + 1) {\n\
    \            return arr\n        } else {\n            return maximum(arr.tail.init(maxIndex\
    \ - k + 1).toList(), k)\n        }", "        var max = arr.head\n        for\
    \ (i <- arr.tail.take(k - 1)) {\n            max = max.max(i)\n        }\n   \
    \     return max", "        var result = mutable.List[Long]()\n        var i =\
    \ 0\n        while (i < k) {\n            var max = arr.head\n            var\
    \ maxIndex = 0\n            for (j <- 1 until arr.size) {\n                if\
    \ (arr.apply(j) > max) {\n                    max = arr.apply(j)\n           \
    \         maxIndex = j\n                }\n            }\n            result =\
    \ result.append(max)\n            arr = arr.tail\n            i = i + 1\n    \
    \    }\n        return result", "        var max = arr.head\n        var maxIndex\
    \ = 0\n        for (i <- 1 until k) {\n            maxIndex = i\n            max\
    \ = max(arr.apply(i).max(max))\n        }\n        return arr.apply(maxIndex).toList()",
  "        var max : Long = -1l\n        var maxIndex : Long = -1l\n        for (i\
    \ <- 0 until arr.length) {\n            if (arr[i] > max) {\n                max\
    \ = arr[i]\n                maxIndex = i\n            }\n        }\n        if\
    \ (maxIndex == -1) {\n            return arr\n        }\n        var result :\
    \ List[Long] = arr.take(k)\n        for (i <- 0 until k) {\n            if (i\
    \ != maxIndex) {\n                result = result.append(arr[i])\n           \
    \ }\n        }\n        return result", "        var result = mutable.List[Long]()\n\
    \        for (i <- 0 until k) {\n            result.append(arr.head)\n       \
    \     arr = arr.tail\n        }\n        return result", "        var max = arr.head\n\
    \        var maxIndex = 0\n        for (i <- 1 until arr.size) {\n           \
    \ if (arr.apply(i) > max) {\n                max = arr.apply(i)\n            \
    \    maxIndex = i\n            }\n        }\n        if (maxIndex == 0) {\n  \
    \          return arr\n        } else {\n            return arr.take(maxIndex)\n\
    \        }", "        val result = mutable.List[Long]()\n        val max = arr.max\n\
    \        val maxIndex = arr.indexOf(max)\n        for (i <- 0 until k) {\n   \
    \         if (i < maxIndex) {\n                result.append(arr.apply(i))\n \
    \           } else {\n                result.append(max)\n            }\n    \
    \    }\n        return result", "        var max = arr.head\n        var maxIndex\
    \ = 0\n        for (i <- 1 until arr.size) {\n            if (arr.apply(i).toLong\
    \ > max.toLong) {\n                max = arr.apply(i)\n                maxIndex\
    \ = i\n            }\n        }\n        if (maxIndex == 0) {\n            return\
    \ arr\n        } else {\n            return arr.take(maxIndex)\n        }", " \
    \       val result = mutable.List[Long]()\n        for (i <- 0 until k) {\n  \
    \          if (arr.size() > i) {\n                result.append(arr.apply(i))\n\
    \            }\n        }\n        return result", "        var max : Long = arr.head\n\
    \        var maxIndex : Long = 0\n        for (i <- 1 until k) {\n           \
    \ max = max(max, arr.apply(i))\n            maxIndex = i\n        }\n        return\
    \ arr.take(maxIndex)", "        if (k <= 0) {\n            throw new RuntimeException(\"\
    k should be positive\")\n        }\n        var max = arr.head\n        var maxIndex\
    \ = 0\n        for (i <- 1 until arr.size) {\n            if (arr.apply(i) > max)\
    \ {\n                max = arr.apply(i)\n                maxIndex = i\n      \
    \      }\n        }\n        if (k == 1) {\n            return List(max)\n   \
    \     } else {\n            var result = List.empty[Long]\n            for (i\
    \ <- 1 until k) {\n                result = result.append(arr.apply(maxIndex))\n\
    \                maxIndex = (maxIndex + 1) % arr.size\n            }\n       \
    \     return result\n        }", "        var max : Long = -1l\n        var max_index\
    \ : Long = -1l\n        for (i <- 0 until arr.length) {\n            if (max <\
    \ arr[i]) {\n                max = arr[i]\n                max_index = i\n   \
    \         }\n        }\n        if (max_index == -1) {\n            return arr\n\
    \        }\n        var result : List[Long] = arr.take(k)\n        result = result.sort(Comparator.comparing(x\
    \ -> x))\n        result = result.take(k)\n        return result", "        if\
    \ (k <= 0) {\n            throw new IllegalArgumentException(\"k should be positive\"\
    )\n        }\n        if (arr.isEmpty()) {\n            throw new IllegalArgumentException(\"\
    arr should not be empty\")\n        }\n        var max = arr.head\n        var\
    \ maxIndex = 0\n        for (var i = 1; i < arr.size(); i++) {\n            if\
    \ (arr.apply(i) > max) {\n                max = arr.apply(i)\n               \
    \ maxIndex = i\n            }\n        }\n        if (k == 1) {\n            return\
    \ List(max)\n        } else {\n            var result = List.empty()\n       \
    \     for (var i = 0; i < k - 1; i++) {\n                result = result.append(max)\n\
    \            }\n            result = result.append(arr.apply(maxIndex))\n    \
    \        return result\n        }", "        var result = mutable.List[Long]()\n\
    \        var max = arr.head\n        var maxIndex = 0\n        for (i <- 0 until\
    \ arr.size) {\n            if (arr.apply(i) > max) {\n                max = arr.apply(i)\n\
    \                maxIndex = i\n            }\n        }\n        for (i <- 0 until\
    \ k) {\n            result.append(arr.apply(maxIndex))\n            maxIndex =\
    \ (maxIndex + 1) % arr.size\n        }\n        return result", "        var result\
    \ = mutable.List[Long]()\n        var i = 0\n        while (i < k) {\n       \
    \     result = result.append(arr.head)\n            arr = arr.tail\n         \
    \   i = i + 1\n        }\n        return result", "        var max = arr.head\n\
    \        var maxIndex = 0\n        for (i <- 1 until arr.size) {\n           \
    \ if (arr.apply(i) > max) {\n                max = arr.apply(i)\n            \
    \    maxIndex = i\n            }\n        }\n        if (maxIndex == 0) {\n  \
    \          return arr\n        } else {\n            return arr.slice(maxIndex,\
    \ maxIndex + k)\n        }", "        val result = mutable.List[Long]()\n    \
    \    for (i <- 0 until k) {\n            result.append(arr.head)\n           \
    \ arr = arr.tail\n        }\n        return result", "        var result = mutable.List[Long]()\n\
    \        var max = arr.head\n        var i = 0\n        while (i < k) {\n    \
    \        if (arr.head > max) {\n                max = arr.head\n            }\n\
    \            result = result.append(arr.head)\n            arr = arr.tail\n  \
    \          i = i + 1\n        }\n        return result", "        var result =\
    \ mutable.List[Long]()\n        for (i <- 0 until k) {\n            result.append(arr.head)\n\
    \            arr = arr.tail\n        }\n        return result", "        var max\
    \ = arr.head\n        var maxIndex = 0\n        for (i <- 1 until arr.length)\
    \ {\n            if (arr[i] > max) {\n                max = arr[i]\n         \
    \       maxIndex = i\n            }\n        }\n        if (maxIndex == 0) {\n\
    \            return arr\n        } else {\n            return arr.take(k).append(arr.drop(maxIndex))\n\
    \        }", "        var result = mutable.List[Long]()\n        for (i <- 0 until\
    \ k) {\n            result.append(arr.head)\n            arr = arr.tail\n    \
    \    }\n        return result", "        var result = mutable.List[Long]()\n \
    \       var i = 0\n        var j = 0\n        while (i < k && j < arr.length)\
    \ {\n            if (arr[j] > arr[i]) {\n                result = result.append(arr[j])\n\
    \                j += 1\n            } else {\n                result = result.append(arr[i])\n\
    \                i += 1\n            }\n        }\n        while (i < arr.length)\
    \ {\n            result = result.append(arr[i])\n            i += 1\n        }\n\
    \        while (j < arr.length) {\n            result = result.append(arr[j])\n\
    \            j += 1\n        }\n        return result", "        val result =\
    \ mutable.List[Long]()\n        val max = arr.head\n        for (i <- 1 until\
    \ k) {\n            max = max.max(arr.head)\n            result = result.append(max)\n\
    \            arr = arr.tail\n        }\n        return result", "        var max\
    \ = arr.head\n        var maxIndex = 0\n        for (i <- 1 until arr.size) {\n\
    \            if (arr.apply(i) > max) {\n                max = arr.apply(i)\n \
    \               maxIndex = i\n            }\n        }\n        if (k == maxIndex\
    \ + 1) {\n            return arr\n        } else {\n            return maximum(arr.tail.drop(maxIndex\
    \ + 1), k)\n        }", "        val max = arr.head\n        var maxIndex = 0\n\
    \        for (i <- 1 until arr.size) {\n            if (arr.apply(i) > max) {\n\
    \                max = arr.apply(i)\n                maxIndex = i\n          \
    \  }\n        }\n        if (k == maxIndex + 1) {\n            return arr.takeRight(k)\n\
    \        } else {\n            return arr.takeRight(maxIndex + 1)\n        }",
  "        var result = mutable.List[Long]()\n        var i = 0\n        var j = 0\n\
    \        while (i < k) {\n            if (j < arr.length && arr[j] > arr[i]) {\n\
    \                result = result.append(arr[j])\n                j += 1\n    \
    \        } else {\n                result = result.append(arr[i])\n          \
    \      i += 1\n            }\n        }\n        return result", "        var\
    \ max = arr.head\n        var maxIndex = 0\n        for (i <- 1 until arr.size)\
    \ {\n            if (arr.apply(i) > max) {\n                max = arr.apply(i)\n\
    \                maxIndex = i\n            }\n        }\n        if (maxIndex\
    \ == 0) {\n            return arr\n        }\n        var result = arr.take(maxIndex)\n\
    \        for (i <- maxIndex + 1 until arr.size) {\n            result = result.append(arr.apply(i))\n\
    \        }\n        return result", "        var result = mutable.List[Long]()\n\
    \        var max = arr.head\n        for (i <- 1 until k) {\n            max =\
    \ max.max(arr.head)\n            result = result.append(max)\n            arr\
    \ = arr.tail\n        }\n        return result", "        var result = mutable.List[Long]()\n\
    \        var max = arr.head\n        for (i <- 1 until k) {\n            max =\
    \ max.max(arr.head)\n            result = result.append(max)\n            arr\
    \ = arr.tail\n        }\n        return result", "        val result = mutable.List[Long]()\n\
    \        val max = arr.head\n        val maxIndex = 0\n        for (i <- 0 until\
    \ arr.length - 1) {\n            if (arr.apply(i) > max) {\n                max\
    \ = arr.apply(i)\n                maxIndex = i\n            }\n        }\n   \
    \     for (i <- 0 until k - 1) {\n            result.append(arr.apply(maxIndex))\n\
    \            maxIndex = (maxIndex + 1) % arr.length\n        }\n        return\
    \ result", "        var max = arr.head\n        var maxIndex = 0\n        for\
    \ (i <- 1 until arr.size) {\n            if (arr.apply(i) > max) {\n         \
    \       max = arr.apply(i)\n                maxIndex = i\n            }\n    \
    \    }\n        if (k == maxIndex + 1) {\n            return arr\n        } else\
    \ {\n            return maximum(arr.tail.init(maxIndex - k + 1), k)\n        }",
  "        var result = mutable.List[Long]()\n        var i = 0\n        while (i\
    \ < k) {\n            result = result.append(arr.apply(i))\n            i = i\
    \ + 1\n        }\n        return result", "        var max = arr.head\n      \
    \  var maxIndex = 0\n        for (i <- 1 until arr.size) {\n            if (arr.apply(i).toLong\
    \ > max.toLong) {\n                max = arr.apply(i)\n                maxIndex\
    \ = i\n            }\n        }\n        if (maxIndex == 0) {\n            return\
    \ arr\n        } else {\n            return arr.take(maxIndex)\n        }", " \
    \       var max = arr.head\n        var maxIndex = 0\n        for (i <- 1 until\
    \ k) {\n            if (arr.apply(i) > max) {\n                max = arr.apply(i)\n\
    \                maxIndex = i\n            }\n        }\n        return maxIndex\
    \ == 0 ? arr : arr.slice(maxIndex, maxIndex + 1)", "        var max : Long = -1l\n\
    \        var maxIndex : Long = -1l\n        for (i <- 0 until arr.length) {\n\
    \            if (arr[i] > max) {\n                max = arr[i]\n             \
    \   maxIndex = i\n            }\n        }\n        if (maxIndex == -1) {\n  \
    \          return arr\n        }\n        var result : List[Long] = arr.take(k)\n\
    \        result = result.append(max)\n        return result", "        var max\
    \ = arr.head\n        var maxIndex = 0\n        for (i <- 1 until arr.size) {\n\
    \            if (arr.apply(i) > max) {\n                max = arr.apply(i)\n \
    \               maxIndex = i\n            }\n        }\n        if (maxIndex ==\
    \ 0) {\n            return arr.tail.map(x -> x)\n        } else {\n          \
    \  return arr.take(maxIndex).append(arr.drop(maxIndex).map(x -> x))\n        }",
  "        var result = mutable.List[Long]()\n        var max = arr.head\n       \
    \ for (i <- 1 until k) {\n            max = max.max(arr.head)\n            result\
    \ = result.append(max)\n            arr = arr.tail\n        }\n        return\
    \ result", "        var result = mutable.List[Long]()\n        var max = arr.head\n\
    \        var maxIndex = 0\n        for (i <- 0 until arr.size) {\n           \
    \ if (arr.apply(i) > max) {\n                max = arr.apply(i)\n            \
    \    maxIndex = i\n            }\n        }\n        for (i <- 0 until k) {\n\
    \            result = result.append(arr.apply(maxIndex))\n            maxIndex\
    \ = (maxIndex + 1) % arr.size\n        }\n        return result", "        var\
    \ max = arr.head\n        var maxIndex = 0\n        for (i <- 1 until k) {\n \
    \           if (arr.apply(i).toLong > max.toLong) {\n                max = arr.apply(i)\n\
    \                maxIndex = i\n            }\n        }\n        return arr.take(maxIndex)",
  "        var max = arr.head\n        var maxIndex = 0\n        for (i <- 1 until\
    \ k) {\n            if (arr.apply(i) > max) {\n                max = arr.apply(i)\n\
    \                maxIndex = i\n            }\n        }\n        return arr.take(maxIndex)",
  "        val result = mutable.List[Long]()\n        val max = arr.head\n       \
    \ for (i <- 0 until k) {\n            if (arr.apply(i).compareTo(max) > 0) {\n\
    \                max = arr.apply(i)\n            }\n            result.append(arr.apply(i))\n\
    \        }\n        result.append(max)\n        return result", "        var max\
    \ = arr.head\n        var maxIndex = 0\n        for (i <- 1 until arr.size) {\n\
    \            if (arr.apply(i) > max) {\n                max = arr.apply(i)\n \
    \               maxIndex = i\n            }\n        }\n        if (k == maxIndex)\
    \ {\n            return arr\n        } else {\n            return arr.take(k)\n\
    \        }", "        var max : Long = -1l\n        var max_index : Long = 0\n\
    \        for (i <- 0 until arr.length) {\n            if (arr[i] > max) {\n  \
    \              max = arr[i]\n                max_index = i\n            }\n  \
    \      }\n        var result : List[Long] = arr.take(k)\n        for (i <- 0 until\
    \ k) {\n            result[i] = arr[max_index]\n            max_index = (max_index\
    \ + 1) % arr.length\n        }\n        return result", "        var max = arr.head\n\
    \        var maxIndex = 0\n        for (i <- 1 until arr.size) {\n           \
    \ if (arr.apply(i).toLong > max.toLong) {\n                max = arr.apply(i)\n\
    \                maxIndex = i\n            }\n        }\n        if (maxIndex\
    \ == 0) {\n            return arr\n        }\n        var result = arr.take(k)\n\
    \        result.update(max)\n        return result", "        var result = mutable.List[Long]()\n\
    \        var i = 0\n        while (i < k) {\n            var max = arr.head\n\
    \            for (j <- 1 until arr.size) {\n                if (arr.apply(j) >\
    \ max) {\n                    max = arr.apply(j)\n                }\n        \
    \    }\n            result.append(max)\n            arr = arr.tail\n         \
    \   i += 1\n        }\n        return result", "        val max = arr.max()\n\
    \        val maxIndex = arr.indexOf(max)\n        val maxK = maxIndex + k\n  \
    \      val result = arr.take(maxK)\n        result.sort()\n        return result",
  "        var max = arr.head\n        var maxIndex = 0\n        for (i <- 1 until\
    \ k) {\n            if (arr.apply(i) > max) {\n                max = arr.apply(i)\n\
    \                maxIndex = i\n            }\n        }\n        return arr.take(maxIndex)",
  "        val result = mutable.List[Long]()\n        val max = arr.head\n       \
    \ for (i <- 1 until k) {\n            max = max.max(arr.head)\n            result\
    \ = result.append(max)\n            arr = arr.tail\n        }\n        return\
    \ result", "        val result = mutable.List[Long]()\n        var i = 0\n   \
    \     while (i < k) {\n            result.append(arr.head)\n            arr =\
    \ arr.tail\n            i = i + 1\n        }\n        return result", "      \
    \  var result = mutable.List[Long]()\n        var max = arr.head\n        for\
    \ (i <- 1 until k) {\n            max = max.max(arr.head)\n            result\
    \ = result.append(max)\n            arr = arr.tail\n        }\n        return\
    \ result", "        var max = arr.head\n        var maxIndex = 0\n        for\
    \ (i <- 1 until arr.size) {\n            if (arr.apply(i) > max) {\n         \
    \       max = arr.apply(i)\n                maxIndex = i\n            }\n    \
    \    }\n        if (maxIndex == 0) {\n            return arr\n        } else {\n\
    \            var result = arr.take(maxIndex)\n            result.append(arr.apply(maxIndex))\n\
    \            return result\n        }", "        var result = mutable.List[Long]()\n\
    \        var i = 0\n        while (i < k) {\n            var max = arr.head\n\
    \            var j = i + 1\n            while (j < k && arr.apply(j) > max) {\n\
    \                max = arr.apply(j)\n                j += 1\n            }\n \
    \           result.append(max)\n            i += 1\n        }\n        return\
    \ result", "        var max = arr.head\n        var maxIndex = 0\n        for\
    \ (i <- 1 until k) {\n            if (arr.apply(i) > max) {\n                max\
    \ = arr.apply(i)\n                maxIndex = i\n            }\n        }\n   \
    \     return arr.take(maxIndex)", "        var max = arr.head\n        var maxIndex\
    \ = 0\n        for (i <- 1 until arr.size) {\n            if (arr.apply(i) > max)\
    \ {\n                max = arr.apply(i)\n                maxIndex = i\n      \
    \      }\n        }\n        if (k == maxIndex + 1) {\n            return arr\n\
    \        } else {\n            return maximum(arr.tail.init(maxIndex - k + 1),\
    \ k)\n        }", "        var max = arr.head\n        var maxIndex = 0\n    \
    \    for (i <- 1 until k) {\n            maxIndex = i\n            max = max(arr.apply(i).max(max))\n\
    \        }\n        return arr.apply(maxIndex).toList", "        var max : Long\
    \ = -1000000000l\n        var maxIndex : Long = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr[i] > max) {\n                max = arr[i]\n\
    \                maxIndex = i\n            }\n        }\n        if (maxIndex\
    \ == -1) {\n            return arr\n        }\n        var result : List[Long]\
    \ = arr.take(k)\n        for (i <- 0 until k) {\n            result = result.append(arr[maxIndex])\n\
    \            maxIndex = (maxIndex + 1) % arr.length\n        }\n        return\
    \ result", "        var result = List[Long](0)\n        for (i <- 0 until k) {\n\
    \            result = result.append(arr.apply(i))\n        }\n        return result",
  "        var result = mutable.List[Long]()\n        var max = arr.head\n       \
    \ var maxIndex = 0\n        for (i <- 0 until arr.size) {\n            if (arr.apply(i)\
    \ > max) {\n                max = arr.apply(i)\n                maxIndex = i\n\
    \            }\n        }\n        for (i <- 0 until k) {\n            result.append(arr.apply(maxIndex))\n\
    \            maxIndex = (maxIndex + 1) % arr.size\n        }\n        return result",
  "        var result = new ArrayList[Long]()\n        var max = arr.head\n      \
    \  for (i <- 1 until k) {\n            max = max.max(arr.head)\n            result.append(max)\n\
    \            arr = arr.tail\n        }\n        return result", "        var max\
    \ = arr.head\n        var maxIndex = 0\n        for (i <- 1 until arr.length)\
    \ {\n            if (arr[i] > max) {\n                max = arr[i]\n         \
    \       maxIndex = i\n            }\n        }\n        if (k == maxIndex + 1)\
    \ {\n            return arr\n        } else {\n            return maximum(arr.tail.init(maxIndex\
    \ - k + 1), k)\n        }", "        val result = mutable.List[Long]()\n     \
    \   val max = arr.head\n        val maxIndex = 0\n        for (i <- 1 until arr.size)\
    \ {\n            if (arr.apply(i) > max) {\n                max = arr.apply(i)\n\
    \                maxIndex = i\n            }\n        }\n        if (k <= maxIndex)\
    \ {\n            for (i <- 0 until k) {\n                result.append(arr.apply(i))\n\
    \            }\n        } else {\n            for (i <- 0 until maxIndex) {\n\
    \                result.append(arr.apply(i))\n            }\n            for (i\
    \ <- maxIndex + 1 until arr.size) {\n                result.append(arr.apply(i))\n\
    \            }\n        }\n        return result", "        var max = arr.head\n\
    \        var maxIndex = 0\n        for (i <- 1 until arr.size) {\n           \
    \ if (arr.apply(i) > max) {\n                max = arr.apply(i)\n            \
    \    maxIndex = i\n            }\n        }\n        if (k == maxIndex + 1) {\n\
    \            return arr\n        } else {\n            var result = arr.take(k\
    \ - 1)\n            result.append(max)\n            return result\n        }",
  "        var result = mutable.List[Long]()\n        for (i <- 0 until k) {\n   \
    \         result.append(arr.head)\n            arr = arr.tail\n        }\n   \
    \     return result", "        var max = arr.head\n        var maxIndex = 0\n\
    \        for (i <- 1 until arr.size) {\n            if (arr.apply(i) > max) {\n\
    \                max = arr.apply(i)\n                maxIndex = i\n          \
    \  }\n        }\n        if (maxIndex == 0) {\n            return arr\n      \
    \  }\n        var result = arr.take(maxIndex)\n        for (i <- maxIndex + 1\
    \ until k) {\n            result = result.append(arr.apply(i))\n        }\n  \
    \      return result", "        val result = mutable.List[Long]()\n        for\
    \ (i <- 0 until k) {\n            result.append(arr.head)\n            arr = arr.tail\n\
    \        }\n        return result", "        var result = mutable.List[Long]()\n\
    \        var i = 0\n        while (i < k) {\n            result = result.append(arr.apply(i))\n\
    \            i = i + 1\n        }\n        return result", "        var max :\
    \ Long = -Long.MAX_VALUE\n        var max_index : Long = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr[i] > max) {\n                max\
    \ = arr[i]\n                max_index = i\n            }\n        }\n        if\
    \ (max_index == -1) {\n            return arr\n        }\n        var result :\
    \ List[Long] = arr.take(k)\n        result = result.append(max)\n        return\
    \ result", "        var result = mutable.List[Long]()\n        var max = arr.head\n\
    \        for (i <- 0 until k) {\n            max = max.max(arr.apply(i))\n   \
    \         result = result.append(max)\n        }\n        return result", "  \
    \      val result = mutable.List[Long]()\n        for (i <- 0 until k) {\n   \
    \         result.append(arr.head)\n            arr = arr.tail\n        }\n   \
    \     return result", "        var max = arr.head\n        var maxIndex = 0\n\
    \        for (i <- 1 until k) {\n            if (arr.apply(i) > max) {\n     \
    \           max = arr.apply(i)\n                maxIndex = i\n            }\n\
    \        }\n        return arr.take(maxIndex)", "        val max = arr.head\n\
    \        val maxIndex = 0\n        for (i <- 1 until arr.size) {\n           \
    \ if (arr.apply(i) > max) {\n                max = arr.apply(i)\n            \
    \    maxIndex = i\n            }\n        }\n        val result = arr.take(maxIndex)\n\
    \        if (k == result.size) {\n            return result\n        } else {\n\
    \            return maximum(arr.drop(maxIndex + 1), k)\n        }", "        var\
    \ result = mutable.List[Long]()\n        var max = arr.head\n        var maxIndex\
    \ = 0\n        for (i <- 0 until arr.size) {\n            if (arr.apply(i) > max)\
    \ {\n                max = arr.apply(i)\n                maxIndex = i\n      \
    \      }\n        }\n        for (i <- 0 until k) {\n            result = result.append(arr.apply(maxIndex))\n\
    \            maxIndex = (maxIndex + 1) % arr.size\n        }\n        return result",
  "        var result = mutable.List[Long]()\n        var i = 0\n        while (i\
    \ < k) {\n            result = result.append(arr.apply(i))\n            i = i\
    \ + 1\n        }\n        return result.sort().reverse()", "        val result\
    \ = mutable.List[Long]()\n        for (i <- 0 until k) {\n            result.append(arr.head)\n\
    \            arr = arr.tail\n        }\n        result", "        var max = arr.head\n\
    \        var maxIndex = 0\n        for (i <- 1 until arr.length) {\n         \
    \   if (arr[i] > max) {\n                max = arr[i]\n                maxIndex\
    \ = i\n            }\n        }\n        if (maxIndex == 0) {\n            return\
    \ arr\n        } else {\n            return arr.take(maxIndex)\n        }", " \
    \       val result = mutable.List[Long]()\n        for (i <- 0 until k) {\n  \
    \          result.append(arr.head())\n            arr = arr.tail()\n        }\n\
    \        return result", "        var max = arr.head\n        var maxIndex = 0\n\
    \        for (i <- 1 until k) {\n            if (arr.apply(i) > max) {\n     \
    \           max = arr.apply(i)\n                maxIndex = i\n            }\n\
    \        }\n        return arr.take(maxIndex)", "        val result = mutable.List[Long]()\n\
    \        for (i <- 0 until k) {\n            result.append(arr.head)\n       \
    \     arr = arr.tail\n        }\n        return result", "        var max = arr.head\n\
    \        var maxIndex = 0\n        for (i <- 1 until arr.length) {\n         \
    \   if (arr[i] > max) {\n                max = arr[i]\n                maxIndex\
    \ = i\n            }\n        }\n        if (k == maxIndex + 1) {\n          \
    \  return arr\n        } else {\n            var result = arr.take(k - 1)\n  \
    \          result = result.append(max)\n            return result\n        }",
  "        var result = mutable.List[Long]()\n        var max = arr.head\n       \
    \ for (i <- 1 until k) {\n            max = max.max(arr.apply(i))\n          \
    \  result = result.append(max)\n        }\n        return result", "        var\
    \ max = arr.head\n        for (i <- arr.tail) {\n            if (max < i) max\
    \ = i\n        }\n        var result = List[Long](max)\n        for (i <- arr)\
    \ {\n            if (i == max) continue\n            result = result.append(i)\n\
    \            if (result.size == k) break\n        }\n        return result", " \
    \       var result = mutable.List[Long]()\n        var i = 0\n        while (i\
    \ < k) {\n            result = result.append(arr.apply(i))\n            i = i\
    \ + 1\n        }\n        return result.sort().toList()", "        val result\
    \ = mutable.List[Long]()\n        val max = arr.head\n        val maxIndex = 0\n\
    \        for (i <- 0 until k) {\n            if (arr.apply(i).compareTo(max) >\
    \ 0) {\n                max = arr.apply(i)\n                maxIndex = i\n   \
    \         }\n        }\n        result.append(max)\n        for (i <- maxIndex\
    \ + 1 until arr.length) {\n            result.append(arr.apply(i))\n        }\n\
    \        return result", "        var result = mutable.List[Long]()\n        var\
    \ max = arr.head\n        for (i <- 0 until k) {\n            max = max.max(arr.head)\n\
    \            result = result.append(max)\n            arr = arr.tail\n       \
    \ }\n        return result", "        val result = mutable.List[Long]()\n    \
    \    for (i <- 0 until k) {\n            val max = arr.max()\n            result.append(max)\n\
    \            arr = arr.filter(x -> x < max)\n        }\n        return result",
  "        var max = arr.head\n        var maxIndex = 0\n        for (i <- 1 until\
    \ arr.size) {\n            if (arr.apply(i) > max) {\n                max = arr.apply(i)\n\
    \                maxIndex = i\n            }\n        }\n        var result =\
    \ arr.take(k)\n        for (i <- 1 until k) {\n            result = result.append(arr.apply(maxIndex))\n\
    \            maxIndex = (maxIndex + 1) % arr.size\n        }\n        return result",
  "        var max = arr.head\n        var maxIndex = 0\n        for (i <- 1 until\
    \ arr.length) {\n            if (arr[i] > max) {\n                max = arr[i]\n\
    \                maxIndex = i\n            }\n        }\n        if (maxIndex\
    \ == 0) {\n            return arr\n        } else {\n            return arr.take(maxIndex)\n\
    \        }", "        if (k <= 0) {\n            return Nil\n        }\n     \
    \   var max = arr.head\n        var maxIndex = 0\n        for (i <- 1 until arr.size)\
    \ {\n            if (arr.apply(i) > max) {\n                max = arr.apply(i)\n\
    \                maxIndex = i\n            }\n        }\n        var result =\
    \ Nil\n        for (i <- 1 until k) {\n            result = Cons(arr.apply(maxIndex),\
    \ result)\n            maxIndex = (maxIndex + 1) % arr.size\n        }\n     \
    \   return result", "        var result = mutable.List[Long]()\n        var max\
    \ = arr.head\n        var i = 0\n        while (i < k) {\n            if (arr.head\
    \ > max) {\n                max = arr.head\n            }\n            result\
    \ = result.append(arr.head)\n            arr = arr.tail\n            i = i + 1\n\
    \        }\n        return result", "        var result = mutable.List[Long]()\n\
    \        var i = 0\n        while (i < k) {\n            result.append(arr.head)\n\
    \            arr = arr.tail\n            i = i + 1\n        }\n        return\
    \ result", "        val result = mutable.List[Long]()\n        for (i <- 0 until\
    \ k) {\n            result.append(arr.head)\n            arr = arr.tail\n    \
    \    }\n        return result", "        var max = arr.head\n        var maxIndex\
    \ = 0\n        for (i <- 1 until arr.size) {\n            if (arr.apply(i) > max)\
    \ {\n                max = arr.apply(i)\n                maxIndex = i\n      \
    \      }\n        }\n        if (maxIndex == 0) {\n            return arr\n  \
    \      } else {\n            var result = arr.take(maxIndex)\n            result.update(arr.drop(maxIndex))\n\
    \            return result\n        }", "        var result = mutable.List[Long]()\n\
    \        var max = arr.head\n        for (i <- 1 until k) {\n            max =\
    \ max.max(arr.head)\n            result = result.append(max)\n            arr\
    \ = arr.tail\n        }\n        return result", "        var max = arr.head\n\
    \        var maxIndex = 0\n        for (i <- 1 until arr.size) {\n           \
    \ if (arr.apply(i) > max) {\n                max = arr.apply(i)\n            \
    \    maxIndex = i\n            }\n        }\n        var result = arr.take(k)\n\
    \        result.update(max)\n        result.update(maxIndex)\n        return result",
  "        var result = new ArrayList[Long]()\n        var i = 0\n        while (i\
    \ < k) {\n            result.add(arr.head)\n            arr = arr.tail\n     \
    \       i += 1\n        }\n        return result", "        var max = arr.head\n\
    \        var maxIndex = 0\n        for (i <- 1 until arr.size) {\n           \
    \ if (arr.apply(i) > max) {\n                max = arr.apply(i)\n            \
    \    maxIndex = i\n            }\n        }\n        if (k == maxIndex + 1) {\n\
    \            return arr\n        } else {\n            var newArr = arr.take(maxIndex\
    \ + 1)\n            newArr.update(maxIndex + 1, max)\n            return newArr\n\
    \        }", "        var result = mutable.List[Long]()\n        var max = arr.head\n\
    \        for (i <- 1 until k) {\n            max = max.max(arr.head)\n       \
    \     result = result.append(max)\n            arr = arr.tail\n        }\n   \
    \     return result", "        var max = arr.head\n        var maxIndex = 0\n\
    \        for (i <- 1 until arr.length) {\n            if (arr[i] > max) {\n  \
    \              max = arr[i]\n                maxIndex = i\n            }\n   \
    \     }\n        if (maxIndex == 0) {\n            return arr\n        }\n   \
    \     var result = arr.take(maxIndex)\n        result.append(arr.drop(maxIndex))\n\
    \        return result", "        var result = mutable.List[Long]()\n        var\
    \ max = arr.head\n        var maxIndex = 0\n        for (i <- 0 until arr.length\
    \ - 1) {\n            if (arr.apply(i) > max) {\n                max = arr.apply(i)\n\
    \                maxIndex = i\n            }\n        }\n        for (i <- 0 until\
    \ k - 1) {\n            result = result.append(max)\n            max = max - arr.apply(maxIndex)\
    \ + arr.apply(maxIndex + 1)\n            maxIndex = maxIndex + 1\n        }\n\
    \        return result", "        var max = arr.head\n        var maxIndex = 0\n\
    \        for (i <- 1 until k) {\n            if (arr.apply(i) > max) {\n     \
    \           max = arr.apply(i)\n                maxIndex = i\n            }\n\
    \        }\n        return maxIndex == 0 ? arr : maxIndex == k ? arr.tail.init(k\
    \ - 1) : maxIndex == k - 1 ? arr.tail.init(k - 2) : maxIndex == k - 2 ? arr.tail.init(k\
    \ - 3) : maxIndex == k - 3 ? arr.tail.init(k - 4) : maxIndex == k - 4 ? arr.tail.init(k\
    \ - 5) : maxIndex == k - 5 ? arr.tail.init(k - 6) : maxIndex == k - 6 ? arr.tail.init(k\
    \ - 7) : maxIndex == k - 7 ? arr.tail.init(k - 8) : maxIndex == k - 8 ? arr.tail.init(k\
    \ - 9) : maxIndex == k - 9 ? arr.tail.init(k - 10) : maxIndex == k - 10 ? arr.tail.init(k\
    \ - 11) : maxIndex == k - 11 ? arr.tail.init(k - 12) : maxIndex == k - 12 ? arr.tail.init(k\
    \ - 13) : maxIndex == k - 13 ? arr.tail.init(k - 14) : maxIndex == k - 14 ? arr.tail.init(k\
    \ - 15) : maxIndex == k - 15 ? arr.tail.init(k - 16) : maxIndex == k - 16 ? arr.tail.init(k\
    \ - 17) : maxIndex == k - 17 ? arr.tail.init(k - 18) : maxIndex == k - 18 ? arr.tail.init(k\
    \ - 19) : maxIndex == k - 19 ? arr.tail.init(k - 20) : maxIndex == k - 20 ? arr.tail.init(k\
    \ - 21) : maxIndex == k - 21 ? arr.tail.init(k - 22) : maxIndex == k - 22 ? arr.tail.init(k\
    \ - 23) : maxIndex == k - 23 ? arr.tail.init(k - 24) : maxIndex == k - 24 ? arr.tail.",
  "        var result = mutable.List[Long]()\n        var max = arr.head\n       \
    \ var maxIndex = 0\n        for (i <- 0 until arr.size) {\n            if (arr.apply(i)\
    \ > max) {\n                max = arr.apply(i)\n                maxIndex = i\n\
    \            }\n        }\n        for (i <- 0 until k) {\n            result.append(arr.apply(maxIndex))\n\
    \            maxIndex = (maxIndex + 1) % arr.size\n        }\n        return result",
  "        val max = arr.head\n        var maxIndex = 0\n        for (i <- 1 until\
    \ k) {\n            val cur = arr.apply(i)\n            if (cur > max) {\n   \
    \             max = cur\n                maxIndex = i\n            }\n       \
    \ }\n        val result = arr.take(maxIndex)\n        result.sort()\n        return\
    \ result", "        var result = mutable.List[Long]()\n        var i = 0\n   \
    \     while (i < k) {\n            result = result.append(arr.apply(i))\n    \
    \        i = i + 1\n        }\n        return result", "        var result = mutable.List[Long]()\n\
    \        var max = arr.head\n        var maxIndex = 0\n        for (i <- 1 until\
    \ arr.size) {\n            if (arr.apply(i) > max) {\n                max = arr.apply(i)\n\
    \                maxIndex = i\n            }\n        }\n        for (i <- 1 until\
    \ k) {\n            if (i == maxIndex) {\n                result = result.append(max)\n\
    \            } else {\n                result = result.append(arr.apply(i))\n\
    \            }\n        }\n        return result", "        val max = arr.head\n\
    \        val maxIndex = 0\n        for (i <- 1 until arr.size) {\n           \
    \ if (arr.apply(i).toLong > max.toLong) {\n                max = arr.apply(i)\n\
    \                maxIndex = i\n            }\n        }\n        val result =\
    \ arr.take(maxIndex)\n        if (k.toLong > result.size) {\n            result\
    \ = result.appendAll(arr.drop(maxIndex + 1))\n        }\n        return result",
  "        var max = arr.head\n        var maxIndex = 0\n        for (i <- 1 until\
    \ k) {\n            if (arr.apply(i).toLong > max.toLong) {\n                max\
    \ = arr.apply(i)\n                maxIndex = i\n            }\n        }\n   \
    \     return arr.take(maxIndex)", "        var max : Long = -1l\n        var max_index\
    \ : Long = -1l\n        var i : Long = 0l\n        while (i < k) {\n         \
    \   if (arr[i] > max) {\n                max = arr[i]\n                max_index\
    \ = i\n            }\n            i = i + 1\n        }\n        return arr.take(max_index)",
  "        var max = arr.head\n        var maxIndex = 0\n        for (i <- 1 until\
    \ arr.size) {\n            if (arr.apply(i) > max) {\n                max = arr.apply(i)\n\
    \                maxIndex = i\n            }\n        }\n        if (maxIndex\
    \ == 0) {\n            return arr\n        } else {\n            return arr.take(maxIndex)\n\
    \        }", "        val result = mutable.List[Long]()\n        val max = arr.max()\n\
    \        val maxIndex = arr.indexOf(max)\n        for (i <- 0 until k) {\n   \
    \         if (i < maxIndex) {\n                result.append(arr.apply(i))\n \
    \           } else {\n                result.append(max)\n            }\n    \
    \    }\n        return result", "        val res = mutable.List[Long]()\n    \
    \    for (i <- 0 until k) {\n            val max = arr.max()\n            res.append(max)\n\
    \            arr = arr.remove(max)\n        }\n        return res", "        var\
    \ max = arr.head\n        var maxIndex = 0\n        for (i <- 1 until k) {\n \
    \           if (arr.apply(i).toLong > max.toLong) {\n                max = arr.apply(i)\n\
    \                maxIndex = i\n            }\n        }\n        return arr.take(maxIndex)",
  "        var max = arr.head\n        var maxIndex = 0\n        for (i <- 1 until\
    \ k) {\n            maxIndex = i\n            max = max(arr.apply(i).max(max))\n\
    \        }\n        return arr.apply(maxIndex).toList", "        var result =\
    \ mutable.List[Long]()\n        for (i <- 0 until k) {\n            result.append(arr.head)\n\
    \            arr = arr.tail\n        }\n        return result", "        var max\
    \ : Long = -1l\n        var maxIndex : Long = -1l\n        for (i <- 0 until k)\
    \ {\n            if (arr[i] > max) {\n                max = arr[i]\n         \
    \       maxIndex = i\n            }\n        }\n        return arr.take(maxIndex\
    \ + 1)", "        var result = List[Long](0)\n        var max = arr.head\n   \
    \     for (i <- 1 until k) {\n            max = max.max(arr.head)\n          \
    \  result = result.append(max)\n            arr = arr.tail\n        }\n      \
    \  return result", "        var max = arr.head\n        var maxIndex = 0\n   \
    \     for (i <- 1 until arr.size) {\n            if (arr.apply(i) > max) {\n \
    \               max = arr.apply(i)\n                maxIndex = i\n           \
    \ }\n        }\n        if (k == maxIndex + 1) {\n            return arr\n   \
    \     } else {\n            return maximum(arr.tail.init(maxIndex - k + 1), k)\n\
    \        }", "        var result = List[Long](0)\n        var max = arr.head\n\
    \        var maxIndex = 0\n        for (i <- 1 until arr.size) {\n           \
    \ if (arr.apply(i) > max) {\n                max = arr.apply(i)\n            \
    \    maxIndex = i\n            }\n        }\n        for (i <- 1 until k) {\n\
    \            if (maxIndex == i) {\n                result = result.append(max)\n\
    \            } else {\n                result = result.append(arr.apply(i))\n\
    \            }\n        }\n        return result", "        var result = mutable.List[Long]()\n\
    \        var i = 0\n        var j = 0\n        while (i < k) {\n            if\
    \ (j < arr.length && arr[j] > arr[i]) {\n                result = result.append(arr[j])\n\
    \                j += 1\n            } else {\n                result = result.append(arr[i])\n\
    \                i += 1\n            }\n        }\n        return result", " \
    \       var max : Long = arr.head\n        var maxIndex : Long = 0\n        for\
    \ (i <- 1 until k) {\n            maxIndex = i\n            max = arr.apply(i).max\n\
    \        }\n        return arr.take(maxIndex)", "        var max = arr.head\n\
    \        var maxIndex = 0\n        for (i <- 1 until arr.size) {\n           \
    \ if (arr.apply(i) > max) {\n                max = arr.apply(i)\n            \
    \    maxIndex = i\n            }\n        }\n        if (k == maxIndex + 1) {\n\
    \            return arr\n        } else {\n            return maximum(arr.tail.init(maxIndex\
    \ - k + 1), k)\n        }", "        var max = arr.head\n        var maxIndex\
    \ = 0\n        for (i <- 1 until arr.size) {\n            if (arr.apply(i) > max)\
    \ {\n                max = arr.apply(i)\n                maxIndex = i\n      \
    \      }\n        }\n        if (maxIndex == 0) {\n            return arr\n  \
    \      } else {\n            return arr.slice(maxIndex, maxIndex + k)\n      \
    \  }", "        var max = arr.head\n        var maxIndex = 0\n        for (i <-\
    \ 1 until arr.size) {\n            if (arr.apply(i) > max) {\n               \
    \ max = arr.apply(i)\n                maxIndex = i\n            }\n        }\n\
    \        if (maxIndex == 0) {\n            return arr.tail.take(k)\n        }\
    \ else {\n            return arr.take(maxIndex).appendAll(arr.tail.drop(maxIndex).take(k\
    \ - 1))\n        }", "        var result = mutable.List[Long]()\n        var max\
    \ = arr.head\n        for (i <- 1 until k) {\n            max = max.max(arr.head)\n\
    \            result = result.append(max)\n            arr = arr.tail\n       \
    \ }\n        return result", "        var max = arr.head\n        var maxIndex\
    \ = 0\n        for (i <- 1 until k) {\n            if (arr.apply(i) > max) {\n\
    \                max = arr.apply(i)\n                maxIndex = i\n          \
    \  }\n        }\n        return arr.take(maxIndex)", "        var result = mutable.List[Long]()\n\
    \        var max = arr.head\n        var maxIndex = 0\n        for (i <- 1 until\
    \ arr.size) {\n            if (arr.apply(i) > max) {\n                max = arr.apply(i)\n\
    \                maxIndex = i\n            }\n        }\n        for (i <- 1 until\
    \ k) {\n            result = result.append(arr.apply(maxIndex))\n            maxIndex\
    \ = (maxIndex + 1) % arr.size\n        }\n        return result", "        if\
    \ (k == 0) {\n            return Nil\n        }\n        var max = arr.head\n\
    \        var maxIndex = 0\n        for (i <- 1 until arr.size) {\n           \
    \ if (arr.apply(i).compareTo(max) > 0) {\n                max = arr.apply(i)\n\
    \                maxIndex = i\n            }\n        }\n        if (maxIndex\
    \ == 0) {\n            return Nil\n        }\n        var result = Nil\n     \
    \   for (i <- 1 until k) {\n            result = Cons(max, result)\n         \
    \   max = arr.apply(maxIndex - 1)\n            maxIndex = maxIndex - 1\n     \
    \   }\n        return result", "        var max = arr.head\n        var maxIndex\
    \ = 0\n        for (i <- 1 until k) {\n            if (arr.apply(i) > max) {\n\
    \                max = arr.apply(i)\n                maxIndex = i\n          \
    \  }\n        }\n        return arr.take(maxIndex)", "        var max = arr.head\n\
    \        var maxIndex = 0\n        for (i <- 1 until k) {\n            if (arr.apply(i)\
    \ > max) {\n                max = arr.apply(i)\n                maxIndex = i\n\
    \            }\n        }\n        return arr.take(maxIndex)", "        val result\
    \ = mutable.List[Long]()\n        val max = arr.head\n        for (i <- 1 until\
    \ k) {\n            max = max(arr.head, max(arr.tail))\n            result = result.append(max)\n\
    \            arr = arr.tail\n        }\n        return result", "        val max\
    \ = arr.head\n        val maxIndex = 0\n        for (i <- 1 until arr.size) {\n\
    \            if (arr.apply(i) > max) {\n                max = arr.apply(i)\n \
    \               maxIndex = i\n            }\n        }\n        val result = arr.take(k)\n\
    \        result.sort()\n        result.reverse()\n        return result", "  \
    \      var max : Long = -1l\n        var maxIndex : Long = 0\n        for (i <-\
    \ 0 until arr.length) {\n            if (max < arr[i]) {\n                max\
    \ = arr[i]\n                maxIndex = i\n            }\n        }\n        if\
    \ (k == maxIndex + 1) {\n            return arr\n        } else {\n          \
    \  var result : List[Long] = new ArrayList[Long]()\n            for (i <- 0 until\
    \ k - 1) {\n                result.add(arr[i])\n            }\n            result.add(max)\n\
    \            return result\n        }", "        val result = mutable.List[Long]()\n\
    \        for (i <- 0 until k) {\n            result.append(arr.head)\n       \
    \     arr = arr.tail\n        }\n        return result", "        val result =\
    \ mutable.List[Long]()\n        for (i <- 0 until k) {\n            val max =\
    \ arr.max()\n            result.append(max)\n            arr = arr.filter(x ->\
    \ x < max)\n        }\n        return result", "        var max = arr.head\n \
    \       var maxIndex = 0\n        for (i <- 1 until k) {\n            if (arr.apply(i)\
    \ > max) {\n                max = arr.apply(i)\n                maxIndex = i\n\
    \            }\n        }\n        return arr.take(maxIndex)", "        var result\
    \ = List[Long](0)\n        var i = 0\n        var j = 0\n        var max = 0l\n\
    \        while (i < k) {\n            if (arr[i] > max) {\n                max\
    \ = arr[i]\n                j = i\n            }\n            i = i + 1\n    \
    \    }\n        result = result.append(max)\n        i = j + 1\n        while\
    \ (i < k) {\n            if (arr[i] > max) {\n                max = arr[i]\n \
    \               j = i\n            }\n            i = i + 1\n        }\n     \
    \   result = result.append(max)\n        return result", "        val result =\
    \ mutable.List[Long]()\n        for (i <- 0 until k) {\n            if (arr.size()\
    \ > i) {\n                result.append(arr.apply(i))\n            } else {\n\
    \                result.append(arr.apply(arr.size() - 1))\n            }\n   \
    \     }\n        return result", "        var result = mutable.List[Long]()\n\
    \        var i = 0\n        while (i < k) {\n            result = result.append(arr.apply(i))\n\
    \            i = i + 1\n        }\n        result.sort()\n        return result",
  "        val res = mutable.List[Long]()\n        val max = arr.head\n        for\
    \ (i <- 0 until k) {\n            if (arr.head > max) {\n                max =\
    \ arr.head\n            }\n            arr = arr.tail\n        }\n        res.append(max)\n\
    \        for (i <- 0 until k - 1) {\n            if (arr.head > max) {\n     \
    \           max = arr.head\n            }\n            arr = arr.tail\n      \
    \  }\n        res.append(max)\n        return res", "        val result = mutable.List[Long]()\n\
    \        for (i <- 0 until k) {\n            result.append(arr.head)\n       \
    \     arr = arr.tail\n        }\n        return result", "        val result =\
    \ mutable.List[Long]()\n        for (i <- 0 until k) {\n            result.append(arr.head)\n\
    \            arr = arr.tail\n        }\n        return result", "        var max\
    \ = arr.head\n        var maxIndex = 0\n        for (i <- 1 until k) {\n     \
    \       if (arr.apply(i) > max) {\n                max = arr.apply(i)\n      \
    \          maxIndex = i\n            }\n        }\n        return arr.take(maxIndex)",
  "        var max : Long = -1l\n        var max_index : Long = -1l\n        for (i\
    \ <- 0 until arr.length) {\n            if (arr[i] > max) {\n                max\
    \ = arr[i]\n                max_index = i\n            }\n        }\n        if\
    \ (max_index == -1) {\n            return arr\n        }\n        var result :\
    \ List[Long] = arr.take(k)\n        for (i <- max_index + 1 until arr.length)\
    \ {\n            if (arr[i] > max) {\n                max = arr[i]\n         \
    \       max_index = i\n            }\n        }\n        result = result.append(max)\n\
    \        return result", "        var result = mutable.List[Long]()\n        var\
    \ max = arr.head\n        for (i <- 1 until k) {\n            max = max.max(arr.head)\n\
    \            result = result.append(max)\n            arr = arr.tail\n       \
    \ }\n        return result", "        var max = arr.head\n        var maxIndex\
    \ = 0\n        for (i <- 1 until k) {\n            if (arr.apply(i) > max) {\n\
    \                max = arr.apply(i)\n                maxIndex = i\n          \
    \  }\n        }\n        return arr.take(maxIndex)", "        var max = arr.head\n\
    \        var maxIndex = 0\n        for (i <- 1 until arr.size) {\n           \
    \ if (arr.apply(i) > max) {\n                max = arr.apply(i)\n            \
    \    maxIndex = i\n            }\n        }\n        if (maxIndex == 0) {\n  \
    \          return arr\n        } else {\n            var result = arr.take(maxIndex)\n\
    \            result.update(arr.drop(maxIndex))\n            return result\n  \
    \      }", "        var max = arr.head\n        var maxIndex = 0\n        for\
    \ (i <- 1 until arr.size) {\n            if (arr.apply(i) > max) {\n         \
    \       max = arr.apply(i)\n                maxIndex = i\n            }\n    \
    \    }\n        if (k == maxIndex + 1) {\n            return arr\n        } else\
    \ {\n            var maxArr = arr.take(maxIndex + 1)\n            var maxArrIndex\
    \ = maxIndex + 1\n            for (i <- maxIndex + 2 until arr.size) {\n     \
    \           if (arr.apply(i) > max) {\n                    max = arr.apply(i)\n\
    \                    maxIndex = i\n                }\n            }\n        \
    \    if (k == maxArrIndex + 1) {\n                return maxArr\n            }\
    \ else {\n                var maxArr2 = maxArr.take(maxArrIndex + 1)\n       \
    \         var maxArr2Index = maxArrIndex + 1\n                for (i <- maxArrIndex\
    \ + 2 until arr.size) {\n                    if (arr.apply(i) > max) {\n     \
    \                   max = arr.apply(i)\n                        maxIndex = i\n\
    \                    }\n                }\n                if (k == maxArr2Index\
    \ + 1) {\n                    return maxArr2\n                } else {\n     \
    \               var maxArr3 = maxArr2.take(maxArr2Index + 1)\n               \
    \     var maxArr3Index = maxArr2Index + 1\n                    for (i <- maxArr2Index\
    \ + 2 until arr.size) {\n                        if (arr.apply(i) > max) {\n \
    \                           max = arr.apply(i)\n                            maxIndex\
    \ = i\n                        }\n                    }\n                    if\
    \ (k == maxArr3Index + 1) {\n                        return maxArr3\n        \
    \            } else {\n                        var maxArr4 = maxArr3.take(maxArr3Index\
    \ + 1)\n                        var maxArr4Index = maxArr3Index + 1\n        \
    \                for (i <- maxArr3Index + 2 until arr.size) {\n              \
    \              if (arr.apply(i) > max) {\n                                max\
    \ = arr.apply(i)\n                                max", "        val result =\
    \ mutable.List[Long]()\n        for (i <- 0 until k) {\n            result.append(arr.head)\n\
    \            arr = arr.tail\n        }\n        result", "        var result =\
    \ mutable.List[Long]()\n        var max = arr.head\n        var i = 1\n      \
    \  while (i < k) {\n            if (arr.apply(i) > max) {\n                max\
    \ = arr.apply(i)\n            }\n            i = i + 1\n        }\n        result\
    \ = result.append(max)\n        for (i <- (k + 1)) {\n            if (arr.apply(i)\
    \ > max) {\n                max = arr.apply(i)\n            }\n            result\
    \ = result.append(max)\n        }\n        return result", "        var result\
    \ = mutable.List[Long]()\n        var i = 0\n        while (i < k) {\n       \
    \     result = result.append(arr.apply(i))\n            i = i + 1\n        }\n\
    \        return result", "        var max = arr.head\n        var maxIndex = 0\n\
    \        for (i <- 1 until arr.size) {\n            if (arr.apply(i).toLong >\
    \ max.toLong) {\n                max = arr.apply(i)\n                maxIndex\
    \ = i\n            }\n        }\n        if (k == maxIndex + 1) {\n          \
    \  return arr\n        } else {\n            return maximum(arr.tail.drop(maxIndex\
    \ + 1), k)\n        }", "        var result = mutable.List[Long]()\n        var\
    \ i = 0\n        while (i < k) {\n            result = result.append(arr.apply(i))\n\
    \            i = i + 1\n        }\n        result.sort()\n        return result",
  "        var max : Long = -1l\n        var maxIndex : Long = -1l\n        for (i\
    \ <- 0 until arr.length) {\n            if (arr[i] > max) {\n                max\
    \ = arr[i]\n                maxIndex = i\n            }\n        }\n        var\
    \ result : List[Long] = List[Long]()\n        for (i <- 0 until k) {\n       \
    \     result = result.append(arr[maxIndex])\n            maxIndex = (maxIndex\
    \ + 1) % arr.length\n        }\n        return result"]
stop_tokens:
- "\n    }\n"
