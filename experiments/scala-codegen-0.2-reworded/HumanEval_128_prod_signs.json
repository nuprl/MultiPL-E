{
  "name": "HumanEval_128_prod_signs",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list arr of integers and you need to return\n    // sum of magnitudes of integers multiplied by product of all signs\n    // of each number in the list, represented by 1, -1 or 0.\n    // Note: return None for empty arr.\n    // Example:\n    // >>> prodSigns((List[Long](1l.toLong, 2l.toLong, 2l.toLong, -4l.toLong)))\n    // 9l\n    // >>> prodSigns((List[Long](0l.toLong, 1l.toLong)))\n    // 0l\n    // >>> prodSigns((List[Long]()))\n    // None\n    def prodSigns(arr : List[Long]) : Option[Long] = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(prodSigns((List[Long](1l.toLong, 2l.toLong, 2l.toLong, -4l.toLong))).equals(-9l));\n    assert(prodSigns((List[Long](0l.toLong, 1l.toLong))).equals(0l));\n    assert(prodSigns((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, -1l.toLong, 1l.toLong))).equals(-10l));\n    assert(prodSigns((List[Long]())).equals(None));\n    assert(prodSigns((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -1l.toLong, 9l.toLong))).equals(20l));\n    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, -1l.toLong, 1l.toLong))).equals(4l));\n    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))).equals(-4l));\n    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong))).equals(0l));\n    }\n\n}\n",
  "completions": [
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            var sign = 1l\n            if (arr.get(i) < 0) sign = -1l\n            res = res * sign\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        for (i <- 0 until arr.size) {\n            sum = sum * (arr.get(i) * 1l)\n        }\n        return sum",
    "        if (arr.isEmpty()) {\n            return None\n        }\n        var sum = 0l\n        var prod = 1l\n        for (i <- 0 until arr.size) {\n            var sign = arr.get(i)\n            if (sign == 1) {\n                sum += arr.get(i) * prod\n            } else if (sign == -1) {\n                sum -= arr.get(i) * prod\n            }\n            prod *= sign\n        }\n        return sum",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        var prod = 1l\n        for (i <- arr.toIterator) {\n            sum = sum + _.magnitude(i) * prod\n            prod = prod * (_.sign(i) + 1)\n        }\n        return sum",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        for (i <- 0 until arr.size) {\n            sum = sum * (arr.get(i) * 1l)\n        }\n        return sum",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            var sign = arr.apply(i).signum()\n            if (sign == 1) res = res * 1l\n            if (sign == -1) res = res * -1l\n        }\n        return res",
    "        if (arr.isEmpty()) {\n            return None\n        }\n        var sum = 0l\n        var prod = 1l\n        for (i <- 0 until arr.size) {\n            sum += arr.apply(i).toLong * prod\n            prod *= (arr.apply(i).toLong == 1l) ? 1l : -1l\n        }\n        return sum",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) > 0 ? 1 : -1)\n        }\n        return res",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            return Some(\n                (arr.map(x -> x * (1l * x > 0l ? 1l : -1l)).reduce(0l, (x, y) -> x * y)))\n        }",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * (1l if arr.get(i) > 0 else -1l))\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        return Some(\n            arr.map(x -> x * (1 if x > 0 else -1)).foldLeft(0l, (x, y) -> x * y)\n        )",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(x -> x * (1l * x > 0l ? 1l : -1l)))",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        for (i <- 0 until arr.size) {\n            sum = sum * (arr.get(i) * (1l if arr.get(i) > 0 else -1l))\n        }\n        return sum",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(_.signum).toSeq)",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(_.signum).toSeq.map(_.magnitude).toSeq)",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        var prod = 1l\n        for (i <- arr) {\n            sum += i * (i * 1l)\n            prod *= (i * 1l)\n        }\n        return sum * prod",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        for (i <- 0 until arr.size) {\n            sum = sum * (arr.get(i) * (1l if arr.get(i) > 0 else -1l))\n        }\n        return sum",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(_.signum).toSeq.map(_.magnitude).toSeq)",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(_.signum).toSeq)",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.length) {\n            var sign = arr.get(i)\n            if (sign == 1) res = res * 1l\n            if (sign == -1) res = res * -1l\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        val res = 0l\n        for (i <- 0 until arr.size) {\n            val sign = arr.get(i).signum()\n            res = res * sign\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            var sign = arr.get(i)\n            if (sign == 1) res = res * 1l\n            if (sign == -1) res = res * -1l\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        val res = 0l\n        for (i <- 0 until arr.size) {\n            val sign = arr.get(i).signum()\n            res = res * sign\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * (1l if arr.get(i) > 0 else -1l))\n        }\n        return res",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            return Some(arr.map(x -> x * (x < 0 ? -1 : 1)).foldLeft(1l, (x, y) -> x * y))\n        }",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(_.signum).toSeq().map(_.magnitude).toSeq())",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(_.signum).toSeq().toList())",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            return (\n                (arr.head * 1l) +\n                (arr.tail.map(x -> x * 1l).reduce((x, y) -> x * y)).toLong\n            )\n        }",
    "        if (arr.isEmpty()) return None\n        return _.reduce(arr.toSeq().map(_.signum).toSeq())",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) > 0 ? 1 : -1)\n        }\n        return res",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            return Some(\n                (\n                    arr.map(x -> x * (1 if x > 0 else -1)).reduce(0l, (x, y) -> x * y)\n                )\n            )\n        }",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        var prod = 1l\n        for (i <- 0 until arr.size) {\n            sum += arr.apply(i).toLong * prod\n            prod *= (arr.apply(i).toLong * arr.apply(i).toLong)\n        }\n        return sum",
    "        if (arr.isEmpty()) return None\n        val res = 0l\n        for (i <- 0 until arr.size) {\n            val sign = arr.get(i).signum()\n            if (sign == 1) res = res * arr.get(i).toLong\n            else if (sign == -1) res = res * arr.get(i).toLong\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        var prod = 1l\n        for (i <- 0 until arr.size) {\n            sum += arr.apply(i).toLong * prod\n            prod *= (arr.apply(i).toLong * 2l)\n        }\n        return sum",
    "        if (arr.isEmpty()) return None\n        val res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        val res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * (1l if arr.get(i) > 0 else -1l))\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            var sign = arr.apply(i).signum()\n            res = res * sign\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        for (i <- 0 until arr.size) {\n            sum = sum * (arr.get(i) * 1l)\n        }\n        return sum",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            var sign = arr.get(i).signum()\n            res = res * sign\n        }\n        return res",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            return Some(arr.map(x -> x * (1 * x > 0 ? 1 : -1)).foldLeft(0l, (x, y) -> x * y))\n        }",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            var sign = arr.apply(i).signum()\n            res = res * sign\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        else return _.product(arr.map(_.signum).toSeq.map(_.magnitude).toSeq)",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            return (arr.map(x -> x * (x > 0 ? 1 : -1)).foldLeft(0l, (x, y) -> x * y))\n        }",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        for (i <- 0 until arr.size) {\n            sum = sum * (arr.get(i) * 1l)\n        }\n        return sum",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            var sum = 0l\n            for (i <- 0 until arr.size) {\n                sum = sum * (arr.get(i) * (1l if arr.get(i) > 0 else -1l))\n            }\n            return sum\n        }",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            return Some(\n                (\n                    (arr.map(x -> x * (x > 0 ? 1 : -1))\n                        .reduce(0l, (x, y) -> x * y)\n                        .toLong\n                    )\n                )\n            )\n        }",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        for (i <- 0 until arr.size) {\n            sum = sum * (arr.get(i) * 1l)\n        }\n        return sum",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            var sign = arr.apply(i).signum()\n            res = res * sign\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            var sign = 1l if arr.apply(i) > 0 else -1l\n            res = res * sign\n        }\n        return res",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            return Some(\n                scala.math.BigInt.multiply(\n                    scala.math.BigInt.multiply(\n                        scala.math.BigInt.multiply(\n                            scala.math.BigInt.multiply(\n                                arr.head.toBigInt(),\n                                arr.tail.head.toBigInt()),\n                            arr.tail.tail.head.toBigInt()),\n                        arr.tail.tail.tail.head.toBigInt()),\n                    arr.tail.tail.tail.tail.head.toBigInt())\n            )\n        }",
    "        if (arr.isEmpty()) return None\n        val res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) > 0 ? 1 : -1)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(_.signum).toSeq.map(_.magnitude).toSeq)",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            return Some(arr.map(x -> x * (1 if x > 0 else -1)).foldLeft(0l, (x, y) -> x * y))\n        }",
    "        if (arr.isEmpty()) {\n            return None\n        }\n        var sum = 0l\n        var prod = 1l\n        for (i <- 0 until arr.size) {\n            sum = sum + _.magnitude(arr.apply(i)) * prod\n            prod = prod * (_.sign(arr.apply(i)) * 1l)\n        }\n        return sum",
    "        if (arr.isEmpty()) return None\n        return _.reduce(arr.toSeq().map(x -> x * (1l * x < 0l ? -1l : 1l)))",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(x -> x * (1l * x > 0l ? 1l : -1l)))",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(x -> x * (1l * x > 0l ? 1l : -1l)))",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            var result = 0l\n            for (i <- 0 until arr.size) {\n                result = result * (arr.get(i) * (1l if arr.get(i) > 0 else -1l))\n            }\n            return result\n        }",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            return _.product(arr.map(_.signum).toSeq)\n        }",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(x -> x * (1l * x > 0l ? 1l : -1l)))",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(_.signum).toSeq)",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            return _.product(arr.map(x -> x * (1l * x < 0l ? -1l : 1l)).toSeq())\n        }",
    "        if (arr.isEmpty()) return None\n        return _.reduce(arr.toSeq().map(_.signum).toSeq().toList())",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        var prod = 1l\n        for (i <- arr) {\n            sum += i * (1l if i > 0l else -1l)\n            prod *= (1l if i > 0l else -1l)\n        }\n        return sum * prod",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(x -> x * (1 if x > 0 else -1)))",
    "        if (arr.isEmpty()) return None\n        return Some(\n            (arr.map(x -> x * (1 if x > 0 else -1)).reduce(0l, (x, y) -> x * y)).toLong\n        )",
    "        if (arr.isEmpty()) {\n            return None\n        }\n        var sum = 0l\n        var prod = 1l\n        for (i <- 0 until arr.size) {\n            sum += arr.apply(i).toLong * prod\n            prod *= (arr.apply(i).toLong * arr.apply(i).toLong)\n        }\n        return sum",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        for (i <- 0 until arr.size) {\n            sum = sum * (arr.get(i) * 1l)\n        }\n        return sum",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            return Some(\n                scala.math.BigInt.multiply(\n                    scala.math.BigInt.multiply(\n                        scala.math.BigInt.fromLong(1),\n                        scala.math.BigInt.fromLong(arr.head)),\n                    scala.math.BigInt.multiply(\n                        scala.math.BigInt.fromLong(-1),\n                        scala.math.BigInt.multiply(\n                            scala.math.BigInt.fromLong(-arr.tail.head),\n                            scala.math.BigInt.fromLong(-arr.tail.tail))))\n            )\n        }",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        val res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        var prod = 1l\n        for (i <- 0 until arr.size) {\n            sum += arr.apply(i).toLong * prod\n            prod *= arr.apply(i).toLong\n        }\n        return sum",
    "        if (arr.isEmpty()) return None\n        val res = 0l\n        for (i <- 0 until arr.size) {\n            val sign = arr.apply(i).signum()\n            res = res * sign\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(_.signum).toSeq)",
    "        if (arr.isEmpty()) {\n            return None\n        }\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * (1l if arr.get(i) > 0 else -1l))\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) > 0 ? 1 : -1)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) {\n            return None\n        }\n        var sum = 0l\n        var prod = 1l\n        for (i <- 0 until arr.size) {\n            sum = sum + _.abs(arr.get(i)) * prod\n            prod = prod * (arr.get(i) > 0 ? 1l : -1l)\n        }\n        return sum",
    "        if (arr.isEmpty()) {\n            return None\n        }\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            var sign = arr.apply(i).signum()\n            if (sign == 1) res += arr.apply(i).abs()\n            else if (sign == -1) res -= arr.apply(i).abs()\n        }\n        return res",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            return Some(\n                arr.map(x -> {\n                    if (x < 0) {\n                        return -1\n                    } else if (x > 0) {\n                        return 1\n                    } else {\n                        return 0\n                    }\n                }).foldLeft(1, (x, y) -> x * y)\n            )\n        }",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(_.signum).toSeq)",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        for (i <- 0 until arr.size) {\n            sum = sum * (arr.get(i) * 1l)\n        }\n        return sum",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            return Some(\n                arr.map(x -> x * (1l * x > 0l ? 1l : -1l)).foldLeft(0l, (x, y) -> x * y)\n            )\n        }",
    "        if (arr.isEmpty()) {\n            return None\n        }\n        var sum = 0l\n        var prod = 1l\n        for (i <- arr.toSeq().map(l => l.toLong()).toIterator()) {\n            sum += Math.abs(l) * prod\n            prod *= (l < 0 ? -1 : 1)\n        }\n        return sum",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        for (i <- 0 until arr.size) {\n            var sign = 1l\n            if (arr.get(i) < 0) sign = -1l\n            sum = sum * sign + arr.get(i)\n        }\n        return sum",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            var sum = 0l\n            var prod = 1l\n            for (i <- arr.iterator()) {\n                sum += i.magnitude * prodSign(i)\n                prod *= prodSign(i)\n            }\n            return sum\n        }\n    }\n\n    // Returns the sign of a number\n    def prodSign(i : Long) : Option[Long] = {\n        if (i < 0) {\n            return -1l\n        } else if (i > 0) {\n            return 1l\n        } else {\n            return 0l\n        }",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(_.signum).toSeq().map(_.magnitude).toSeq())",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        var prod = 1l\n        for (i <- 0 until arr.size) {\n            sum += arr.apply(i).toLong * prod\n            prod *= (arr.apply(i).toLong > 0 ? 1 : -1)\n        }\n        return sum",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            return Some(\n                (\n                    arr.map(\n                        x -> {\n                            if (x > 0) {\n                                return 1l\n                            } else if (x < 0) {\n                                return -1l\n                            } else {\n                                return 0l\n                            }\n                        }\n                    ).reduce(\n                        (acc, x) -> acc * x\n                    )\n                )\n            )\n        }",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        var prod = 1l\n        for (i <- arr.size) {\n            sum += Math.abs(arr.apply(i).toLong) * prod\n            prod *= (arr.apply(i).toLong > 0 ? 1l : -1l)\n        }\n        return sum",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            return Some(\n                (\n                    (arr.head * 1) +\n                    (arr.tail.map(x -> x * 1).reduce((x, y) -> x * y)))\n            )\n        }",
    "        if (arr.isEmpty()) {\n            return None\n        }\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * (1l if arr.get(i) >= 0 else -1l))\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        val res = 0l\n        for (i <- 0 until arr.size) {\n            val sign = arr.get(i).signum()\n            res = res * sign\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            var sign = arr.apply(i)\n            if (sign == 1) res += Math.abs(arr.apply(i))\n            else if (sign == -1) res -= Math.abs(arr.apply(i))\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        val res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) > 0 ? 1 : -1)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        var prod = 1l\n        for (i <- 0 until arr.size) {\n            sum += arr.get(i).toLong * prod\n            prod *= (arr.get(i).toLong * arr.get(i).toLong)\n        }\n        return sum",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        var prod = 1l\n        for (i <- arr) {\n            sum += i * i\n            prod *= i\n        }\n        return sum * prod",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            var sign = arr.apply(i).signum()\n            res = res * sign\n        }\n        return res",
    "        if (arr.isEmpty()) {\n            return None\n        }\n        val res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(_.signum).toSeq().map(_.magnitude).toSeq())",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        else {\n            var sum = 0l\n            for (i <- 0 until arr.size) {\n                sum = sum * (arr.get(i) * (1l if arr.get(i) > 0 else -1l))\n            }\n            return sum\n        }",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            var sign = arr.get(i)\n            if (sign == 1) res += 1l\n            if (sign == -1) res -= 1l\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        for (i <- 0 until arr.length) {\n            sum = sum * (arr.get(i) * 1l)\n        }\n        return sum",
    "        if (arr.isEmpty()) return None\n        return Some(\n            arr.map(x -> x * (1 if x > 0 else -1)).foldLeft(0l, (x, y) -> x * y)\n        )",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            var sign = arr.get(i).signum()\n            res = res * sign\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            var sign = arr.get(i)\n            if (sign == 1) res = res * 1l\n            if (sign == -1) res = res * -1l\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        var prod = 1l\n        for (i <- arr.iterator()) {\n            sum += _.magnitude(i) * prodSign(i)\n            prod *= prodSign(i)\n        }\n        return sum\n    }\n\n    def prodSign(i : Long) : Option[Long] = {\n        if (i == 0l) return 0l\n        if (i > 0l) return 1l\n        return -1l",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        val res = 0l\n        for (i <- 0 until arr.size) {\n            val sign = arr.get(i).signum()\n            res = res * sign\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            var sign = arr.apply(i).signum()\n            res = res * sign\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        for (i <- 0 until arr.size) {\n            var sign = arr.apply(i).signum()\n            if (sign == 1) {\n                sum = sum + arr.apply(i).toLong\n            } else if (sign == -1) {\n                sum = sum - arr.apply(i).toLong\n            }\n        }\n        return sum",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) {\n            return None\n        }\n        val res = 0l\n        for (i <- 0 until arr.size) {\n            val sign = arr.apply(i).signum()\n            res = res * sign\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(x -> x * (1 if x > 0 else -1)))",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            var sign = arr.get(i)\n            if (sign == 1) res += 1l\n            if (sign == -1) res -= 1l\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        for (i <- 0 until arr.size) {\n            sum = sum * (arr.get(i) * 1l)\n        }\n        return sum",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        var prod = 1l\n        for (i <- arr.toSeq) {\n            sum += i * prodSign(i)\n            prod *= prodSign(i)\n        }\n        return sum\n    }\n\n    def prodSign(i : Long) : Long = {\n        if (i < 0) return -1l\n        if (i > 0) return 1l\n        return 0l",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(x -> x * (1 if x > 0 else -1)))",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * (1l if arr.get(i) >= 0 else -1l))\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(x -> x * (1 if x > 0 else -1)))",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            return Some(\n                (\n                    arr.map(x -> x * (1l * x > 0l ? 1l : -1l))\n                        .reduce(0l, (x, y) -> x * y)\n                )\n            )\n        }",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        for (i <- 0 until arr.size) {\n            sum = sum * (arr.get(i) * 1l)\n        }\n        return sum",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            return Some(\n                (\n                    arr.map(x -> x * (1 if x > 0 else -1)).foldLeft(0l, (x, y) -> x * y)\n                )\n            )\n        }",
    "        if (arr.isEmpty()) return None\n        return Some(\n            arr.map(x -> {\n                if (x == 0) return 0l\n                if (x > 0) return 1l\n                return -1l\n            }).reduce(0l, (x, y) -> x * y)\n        )",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            var sign = arr.apply(i).signum()\n            res = res * sign\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        for (i <- 0 until arr.size) {\n            sum = sum * (arr.get(i) * (1l if arr.get(i) > 0 else -1l))\n        }\n        return sum",
    "        if (arr.isEmpty()) return None\n        val res = 0l\n        for (i <- 0 until arr.size) {\n            if (arr.get(i) > 0) res += 1l\n            if (arr.get(i) < 0) res -= 1l\n        }\n        return res",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            var sum = 0l\n            var prod = 1l\n            for (i <- arr.iterator()) {\n                sum += _.magnitude(i) * prodSign(i)\n                prod *= prodSign(i)\n            }\n            return sum\n        }\n    }\n\n    // Returns 1, -1 or 0 depending on sign of the number\n    def prodSign(num : Long) : Option[Long] = {\n        if (_.signum(num) == 1) {\n            return 1l\n        } else if (_.signum(num) == -1) {\n            return -1l\n        } else {\n            return 0l\n        }",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        val res = 0l\n        for (i <- 0 until arr.size) {\n            val sign = arr.get(i).signum()\n            if (sign == 1) res = res * sign\n            else if (sign == -1) res = res * sign\n        }\n        return res",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            var sum = 0l\n            var prod = 1l\n            for (i <- 0 until arr.size) {\n                sum = sum + _.magnitude(arr.apply(i).toLong) * prod\n                prod = prod * (_.sign(arr.apply(i).toLong) * 1l)\n            }\n            return sum\n        }",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            var sign = arr.get(i)\n            if (sign == 1) res = res * 1l\n            if (sign == -1) res = res * -1l\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            var sign = arr.get(i)\n            if (sign == 1) res = res * 1l\n            if (sign == -1) res = res * -1l\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.length) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        for (i <- 0 until arr.size) {\n            sum = sum * (arr.get(i) * 1l)\n        }\n        return sum",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(_.signum).toSeq)",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        var prod = 1l\n        for (i <- 0 until arr.size) {\n            var sign = arr.get(i)\n            if (sign == 1) {\n                sum += arr.get(i)\n                prod *= 1\n            } else if (sign == -1) {\n                sum -= arr.get(i)\n                prod *= -1\n            }\n        }\n        return sum * prod",
    "        if (arr.isEmpty()) return None\n        return Some(\n            arr.map(x -> x * (1 if x > 0 else -1)).foldLeft(0l, (x, y) -> x * y)\n        )",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(_.signum).toSeq)",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) > 0 ? 1 : -1)\n        }\n        return res",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            return _.product(arr.map(x -> x * (x < 0 ? -1 : 1)).toList())\n        }",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            var sign = arr.get(i)\n            if (sign == 1) res += 1l\n            if (sign == -1) res -= 1l\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            var sign = arr.get(i)\n            if (sign == 1) res = res * 1l\n            if (sign == -1) res = res * -1l\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(_.signum).toSeq().toList())",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            return Some(\n                (arr.map(x -> x * (x > 0 ? 1 : -1)).reduce(0L, (a, b) -> a * b)))\n        }",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        for (i <- arr) {\n            sum = sum * (1l if i > 0 else -1l)\n        }\n        return sum",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * (1l if arr.get(i) > 0 else -1l))\n        }\n        return res",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            return Some(\n                (\n                    arr.map(\n                        x ->\n                            (\n                                if (x > 0) {\n                                    1l\n                                } else if (x < 0) {\n                                    -1l\n                                } else {\n                                    0l\n                                }\n                            )\n                        )\n                        .reduce(0l, (a, b) -> a * b)\n                )\n            )\n        }",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            var sign = arr.get(i).signum()\n            if (sign == 1) res = res * sign\n            else if (sign == -1) res = res * sign\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        for (i <- arr) {\n            sum = sum * (i.signum() * 1l)\n        }\n        return sum",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            return Some(arr.map(x -> x * (1 if x > 0 else -1)).foldLeft(0l, (x, y) -> x * y))\n        }",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(_.signum).toSeq().toList())",
    "        if (arr.isEmpty()) {\n            return None\n        }\n        var sum = 0l\n        var prod = 1l\n        for (i <- arr.size()) {\n            var sign = 1l\n            if (arr.apply(i) < 0) {\n                sign = -1l\n            }\n            sum += sign * _.abs(arr.apply(i))\n            prod *= sign\n        }\n        return sum * prod",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        for (i <- 0 until arr.size) {\n            sum = sum * (arr.get(i) * 1l)\n        }\n        return sum",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(x -> x * (1 if x > 0 else -1)))",
    "        if (arr.isEmpty()) return None\n        return Some(\n            (arr.map(x -> x * (1 if x > 0 else -1)).reduce(0l, (x, y) -> x * y)))",
    "        if (arr.isEmpty()) return None\n        val res = 0l\n        for (i <- 0 until arr.size) {\n            val sign = arr.get(i).signum()\n            res = res * sign\n        }\n        return res",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            return Some(\n                (\n                    arr.map(\n                        x ->\n                            (\n                                if (x > 0) {\n                                    1l\n                                } else if (x < 0) {\n                                    -1l\n                                } else {\n                                    0l\n                                }\n                            )\n                        )\n                        .reduce(\n                            (acc, x) ->\n                                acc * x,\n                            0l\n                        )\n                )\n            )\n        }",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        for (i <- 0 until arr.size) {\n            sum = sum * (arr.get(i) * 1l)\n        }\n        return sum",
    "        if (arr.isEmpty()) return None\n        else return _.product(arr.map(_.signum).toSeq().toList())",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        for (i <- 0 until arr.size) {\n            sum = sum * (arr.get(i) * 1l)\n        }\n        return sum",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) {\n            return None\n        }\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            var sign = arr.apply(i).signum()\n            if (sign != 0) {\n                res = res * sign\n            }\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            var sign = arr.get(i)\n            if (sign == 1) res = res * 1l\n            if (sign == -1) res = res * -1l\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            var sign = arr.get(i)\n            if (sign == 1) res = res * 1l\n            if (sign == -1) res = res * -1l\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(_.signum).toSeq().map(_.toLong))",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(_.signum).toSeq().toList())",
    "        if (arr.isEmpty()) {\n            return None\n        } else {\n            return Some(\n                arr.map(x -> {\n                    if (x > 0) {\n                        return 1l\n                    } else if (x < 0) {\n                        return -1l\n                    } else {\n                        return 0l\n                    }\n                }).reduce(_.times))\n        }",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        for (i <- 0 until arr.size) {\n            sum = sum * arr.apply(i)\n        }\n        return sum",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        var prod = 1l\n        for (i <- arr) {\n            sum += i * i\n            prod *= i\n        }\n        return sum * prod",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) > 0 ? 1 : -1)\n        }\n        return res",
    "        if (arr.isEmpty()) {\n            return None\n        }\n        val sum = 0l\n        val prod = 1l\n        for (i <- 0 until arr.size) {\n            sum += arr.apply(i).toLong * prod\n            prod *= (arr.apply(i).toLong * arr.apply(i).toLong)\n        }\n        return sum",
    "        if (arr.isEmpty()) return None\n        var res = 0l\n        for (i <- 0 until arr.size) {\n            res = res * (arr.get(i) * 1l)\n        }\n        return res",
    "        if (arr.isEmpty()) return None\n        return Some(\n            arr.map(x -> x * (1 if x > 0 else -1)).foldLeft(0l, (x, y) -> x * y)\n        )",
    "        if (arr.isEmpty()) return None\n        var sum = 0l\n        var prod = 1l\n        for (i <- arr) {\n            sum += i * (1l if i > 0 else -1l)\n            prod *= (1l if i > 0 else -1l)\n        }\n        return sum * prod",
    "        if (arr.isEmpty()) return None\n        return _.product(arr.map(_.signum).toSeq().map(_.magnitude))"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}