{
  "name": "HumanEval_153_Strongest_Extension",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given the name of a class (a string) and a list of extensions.\n    // The extensions are to be used to load additional classes to the class. The\n    // strength of the extension is as follows: Let CAP be the number of the uppercase\n    // letters in the extension's name, and let SM be the number of lowercase letters \n    // in the extension's name, the strength is given by the fraction CAP - SM. \n    // You should find the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n    // If there are two or more extensions with the same strength, you should\n    // choose the one that comes first in the list.\n    // For example, if you are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name : String, extensions : List[String]) : String = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n",
  "completions": [
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(extension => extension.toUpperCase)\n        val extensions_lower = extensions.map(extension => extension.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val class_name_upper_strength = class_name_upper_count - class_name_lower_count\n        val class_name_lower_strength = class_name_lower_count - class_name_upper_count\n        val extensions_upper_strength = extensions_upper_count - extensions_lower_count\n        val extensions_lower_strength = extensions_lower_count - extensions_upper_count\n        val class_name_strength = class_name_upper_strength - class_name_lower_strength\n        val extensions_strength = extensions_upper_strength - extensions_lower_strength\n        val class_name_strength_fraction = class_name_strength / extensions_strength\n        val class_name_extension = class_name_strength_fraction < 1 ? \".\" + class_name_strength_fraction.toString() : \"\"\n        val extensions_extension = extensions_strength < 1 ? \".\" + extensions_strength.toString() : \"\"\n        val class_name_extension_fraction = class_name_extension + extensions_extension\n        class_name_extension_fraction",
    "        val class_name_array = class_name.split(\"\\\\.\")\n        val class_name_length = class_name_array.length\n        val class_name_string = class_name_array[class_name_length - 1]\n        val class_name_string_length = class_name_string.length\n        val class_name_string_upper = class_name_string.toUpperCase()\n        val class_name_string_lower = class_name_string.toLowerCase()\n        val class_name_string_upper_length = class_name_string_upper.length\n        val class_name_string_lower_length = class_name_string_lower.length\n        val class_name_string_upper_count = class_name_string_upper.count\n        val class_name_string_lower_count = class_name_string_lower.count\n        val class_name_string_upper_count_minus_lower_count = class_name_string_upper_count - class_name_string_lower_count\n        val class_name_string_upper_count_minus_lower_count_divided_by_string_length = class_name_string_upper_count_minus_lower_count / class_name_string_length\n        val class_name_string_upper_count_minus_lower_count_divided_by_string_length_minus_1 = class_name_string_upper_count_minus_lower_count_divided_by_string_length - 1\n        val class_name_string_upper_count_minus_lower_count_divided_by_string_length_minus_1_divided_by_2 = class_name_string_upper_count_minus_lower_count_divided_by_string_length_minus_1 / 2\n        val class_name_string_upper_count_minus_lower_count_divided_by_string_length_minus_1_divided_by_2_divided_by_2 = class_name_string_upper_count_minus_lower_count_divided_by_string_length_minus_1_divided_by_2 / 2 / 2\n        val class_name_",
    "        var class_name_upper = class_name.toUpperCase\n        var class_name_lower = class_name.toLowerCase\n        var class_name_length = class_name.length\n        var extensions_upper = extensions.map(x => x.toUpperCase).toList\n        var extensions_lower = extensions.map(x => x.toLowerCase).toList\n        var extensions_length = extensions.length\n        var strength = (extensions_upper.length - extensions_lower.length) / (extensions_length - 1)\n        var extension = extensions.sort(Comparator.comparingInt(x => x.length()).reversed()).head\n        return class_name + \".\" + extension + \".\" + strength",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val class_name_upper_len = class_name_upper.length\n        val class_name_lower_len = class_name_lower.length\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val class_name_upper_count_minus_lower = class_name_upper_count - class_name_lower_count\n        val class_name_upper_count_minus_lower_div_class_name_len = class_name_upper_count_minus_lower / class_name_len\n        val class_name_lower_count_div_class_name_len = class_name_lower_count / class_name_len\n        val class_name_upper_count_div_class_name_len_minus_class_name_lower_count_div_class_name_len = class_name_upper_count_div_class_name_len - class_name_lower_count_div_class_name_len\n        val class_name_upper_count_div_class_name_len_minus_class_name_lower_count_div_class_name_len_div_class_name_len = class_name_upper_count_div_class_name_len_minus_class_name_lower_count_div_class_name_len / class_name_len\n        val class_name_lower_count_div_class_name_len_div_class_name_len = class_name_lower_count_div_class_name_len / class_name_len\n        val class_name_upper_count_div_class_name_len_div_class_name_len_minus_class_name_lower_count_div_class_name_len_div_class_name_len = class_name_upper_count_div_class_name_len_div_class_name_len - class_name_lower_count_div_class_name",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extensions_sorted = sort(extensions_strength, (x, y) => x - y)\n        val strongest_extension = extensions_sorted.head\n        val extension_name = strongest_extension.toString\n        val class_name_with_extension = class_name + \".\" + extension_name\n        class_name_with_extension",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val c = scala.collection.JavaConversions.asScalaBuffer(extension).toList\n            val c_upper = c.map(c => c.charAt(0)).filter(c => c.isUpperCase()).toList\n            val c_lower = c.map(c => c.charAt(0)).filter(c => c.isLowerCase()).toList\n            cap += c_upper.length() - c_lower.length()\n            sm += c_lower.length()\n        }\n        val strength = cap - sm\n        val result = class_name + \".\" + extensions.sort().head()\n        return result",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val class_name_upper_len = class_name_upper.length\n        val class_name_lower_len = class_name_lower.length\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val class_name_upper_count_minus_lower_count = class_name_upper_count - class_name_lower_count\n        val class_name_upper_count_minus_lower_count_div_class_name_len = class_name_upper_count_minus_lower_count / class_name_len\n        val class_name_upper_count_minus_lower_count_div_class_name_len_minus_1 = class_name_upper_count_minus_lower_count_div_class_name_len - 1\n        val class_name_upper_count_minus_lower_count_div_class_name_len_minus_1_div_2 = class_name_upper_count_minus_lower_count_div_class_name_len_minus_1 / 2\n        val class_name_upper_count_minus_lower_count_div_class_name_len_minus_1_div_2_div_2 = class_name_upper_count_minus_lower_count_div_class_name_len_minus_1_div_2 / 2\n        val class_name_lower_count_div_class_name_len = class_name_lower_count / class_name_len\n        val class_name_lower_count_div_class_name_len_minus_1 = class_name_lower_count_div_class_name_len - 1\n        val class_name_lower_count_div_class_name_len_minus_1_div_2 = class_name_lower_count_div_class_name_len_minus_1 / 2\n        val class_name_lower_count_div_class_name",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val class_name_upper_len = class_name_upper.length\n        val class_name_lower_len = class_name_lower.length\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val class_name_upper_count_minus_lower_count = class_name_upper_count - class_name_lower_count\n        val class_name_upper_count_minus_lower_count_div_class_name_len = class_name_upper_count_minus_lower_count / class_name_len\n        val class_name_upper_count_minus_lower_count_div_class_name_len_minus_1 = class_name_upper_count_minus_lower_count_div_class_name_len - 1\n        val class_name_upper_count_minus_lower_count_div_class_name_len_minus_1_div_class_name_len = class_name_upper_count_minus_lower_count_div_class_name_len - 1 / class_name_len\n        val class_name_upper_count_minus_lower_count_div_class_name_len_minus_1_div_class_name_len_minus_1 = class_name_upper_count_minus_lower_count_div_class_name_len_minus_1 - 1 / class_name_len - 1\n        val class_name_upper_count_minus_lower_count_div_class_name_len_minus_1_div_class_name_len_minus_1_div_class_name_len = class_name_upper_count_minus_lower_count_div_class_name_len_minus_1_div_class_name_len - 1 / class_name_len - 1 / class_name_len - 1\n        val class_name_upper_count_minus_lower_count_div_class_name",
    "        val ext_list = extensions.toSeq\n        val ext_map = ext_list.toMap(String.toUpper)\n        val ext_keys = ext_map.keys\n        val ext_vals = ext_map.values\n        val ext_counts = ext_map.count\n        val ext_max = ext_counts.max\n        val ext_max_key = ext_keys.max\n        val ext_max_val = ext_vals.max\n        val ext_max_count = ext_counts.max\n        val ext_max_key_count = ext_keys.max\n        val ext_max_val_count = ext_vals.max\n        val ext_max_count_count = ext_counts.max\n        val ext_max_key_count_count = ext_keys.max\n        val ext_max_val_count_count = ext_vals.max\n        val ext_max_count_count_count = ext_counts.max\n        val ext_max_key_count_count_count = ext_keys.max\n        val ext_max_val_count_count_count = ext_vals.max\n        val ext_max_count_count_count_count = ext_counts.max\n        val ext_max_key_count_count_count_count = ext_keys.max\n        val ext_max_val_count_count_count_count = ext_vals.max\n        val ext_max_count_count_count_count_count = ext_counts.max\n        val ext_max_key_count_count_count_count_count = ext_keys.max\n        val ext_max_val_count_count_count_count_count = ext_vals.max\n        val ext_max_count_count_count_count_count_count = ext_counts.max\n        val ext_max_key_count_count_count_count_count_count = ext_keys.max\n        val ext_max_val_count_count_count_count_count_count = ext_vals.max\n        val ext_max_count_count_count_count_count_count_count = ext_counts.max\n        val ext",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val class_name_upper_len = class_name_upper.length\n        val class_name_lower_len = class_name_lower.length\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val class_name_len_count = count(class_name_len)\n        val class_name_upper_count_minus_lower_count = class_name_upper_count - class_name_lower_count\n        val class_name_len_count_minus_lower_count = class_name_len_count - class_name_lower_count\n        val class_name_upper_count_minus_lower_count_minus_len_count = class_name_upper_count_minus_lower_count - class_name_len_count_minus_lower_count\n        val class_name_upper_count_minus_lower_count_minus_len_count_div_len_count = class_name_upper_count_minus_lower_count_minus_len_count / class_name_len_count\n        val class_name_upper_count_minus_lower_count_minus_len_count_div_len_count_minus_1 = class_name_upper_count_minus_lower_count_minus_len_count_div_len_count - 1\n        val class_name_upper_count_minus_lower_count_minus_len_count_div_len_count_minus_1_div_len_count = class_name_upper_count_minus_lower_count_minus_len_count_div_len_count - 1 / class_name_len_count\n        val class_name_upper_count_minus_lower_count_minus_len_count_div_len_count_minus_1_div_len_count_minus_1 = class_name_upper_count_minus_lower_count_minus_len_count_div_len_count_",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val extensions_len = extensions.length\n        val extensions_upper = extensions.map(String.toUpperCase)\n        val extensions_lower = extensions.map(String.toLowerCase)\n        val extensions_cap = extensions.map(extension => {\n            val cap = extension.length - extension.count(Character.valueOf('_'))\n            return cap\n        })\n        val extensions_sm = extensions.map(extension => {\n            val sm = extension.length - extension.count(Character.valueOf('_'))\n            return sm\n        })\n        val extensions_strength = (extensions_cap - extensions_sm).toSeq\n        val extensions_strength_max = max(extensions_strength)\n        val extensions_strength_max_index = extensions_strength.indexOf(extensions_strength_max)\n        val extensions_strength_max_extension = extensions[extensions_strength_max_index]\n        val extensions_strength_max_extension_upper = extensions_strength_max_extension.toUpperCase\n        val extensions_strength_max_extension_lower = extensions_strength_max_extension.toLowerCase\n        val extensions_strength_max_extension_len = extensions_strength_max_extension.length\n        val extensions_strength_max_extension_cap = extensions_strength_max_extension.count(Character.valueOf('_'))\n        val extensions_strength_max_extension_sm = extensions_strength_max_extension.count(Character.valueOf('_'))\n        val extensions_strength_max_extension_strength = (extensions_strength_max_extension_cap - extensions_strength_max_extension_sm).toSeq\n        val extensions_strength_max_extension_strength_max = max(extensions_strength_max_extension_strength)\n        val extensions_strength_max_extension_strength_max_index = extensions_strength_max_extension_strength.indexOf(extensions_strength_",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val cap_c = scala.collection.JavaConversions.asScalaBuffer(extension.toUpperCase()).length()\n            val sm_c = scala.collection.JavaConversions.asScalaBuffer(extension.toLowerCase()).length()\n            cap += cap_c - sm_c\n            sm += sm_c\n        }\n        val strength = cap - sm\n        val extension = extensions.sort(Comparator.comparingInt(extension -> strength)).head()\n        return class_name + \".\" + extension",
    "        val cap = extensions.map(extension -> {\n            val cap_count = scala.collection.JavaConversions.asScalaBuffer(extension).toList().map(c -> c.toUpperCase()).count()\n            return cap_count\n        }).max()\n        val sm = extensions.map(extension -> {\n            val sm_count = scala.collection.JavaConversions.asScalaBuffer(extension).toList().map(c -> c.toLowerCase()).count()\n            return sm_count\n        }).max()\n        val strength = cap - sm\n        val extension = extensions.filter(extension1 -> strength == strength).head()\n        return class_name + \".\" + extension",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(s => s.toUpperCase)\n        val extensions_lower = extensions.map(s => s.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strength_extension = if (strength > extensions_strength) {\n            class_name + \".\" + extensions.sort(Comparator.comparingInt(s => s.length())).head\n        } else {\n            extensions.sort(Comparator.comparingInt(s => s.length())).head + \".\" + class_name\n        }",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val class_name_upper_len = class_name_upper.length\n        val class_name_lower_len = class_name_lower.length\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val class_name_upper_count_minus_lower_count = class_name_upper_count - class_name_lower_count\n        val class_name_upper_count_minus_lower_count_div_class_name_len = class_name_upper_count_minus_lower_count / class_name_len\n        val class_name_upper_count_minus_lower_count_div_class_name_len_minus_1 = class_name_upper_count_minus_lower_count_div_class_name_len - 1\n        val class_name_upper_count_minus_lower_count_div_class_name_len_minus_1_div_class_name_len = class_name_upper_count_minus_lower_count_div_class_name_len - 1 / class_name_len\n        val class_name_lower_count_div_class_name_len = class_name_lower_count / class_name_len\n        val class_name_lower_count_div_class_name_len_minus_1 = class_name_lower_count_div_class_name_len - 1\n        val class_name_lower_count_div_class_name_len_minus_1_div_class_name_len = class_name_lower_count_div_class_name_len - 1 / class_name_len\n        val class_name_upper_count_div_class_name_len = class_name_upper_count / class_name_len\n        val class_name_upper_count_div_class_name_len_minus_1 = class_name_upper_count_div_class_name_len - 1",
    "        var strength = 0.0\n        var best_extension = \"\"\n        for(extension in extensions) {\n            var cap = 0\n            var sm = 0\n            for(c in extension) {\n                if(c.isUpperCase()) {\n                    cap += 1\n                } else {\n                    sm += 1\n                }\n            }\n            strength = cap - sm\n            if(strength > best_extension.length()) {\n                best_extension = extension\n            }\n        }\n        return class_name + \".\" + best_extension",
    "        var class_name_upper = class_name.toUpperCase\n        var class_name_lower = class_name.toLowerCase\n        var class_name_upper_count = 0\n        var class_name_lower_count = 0\n        var strongest_extension = \"\"\n        var strongest_extension_strength = 0\n        for (extension in extensions) {\n            var extension_upper = extension.toUpperCase\n            var extension_lower = extension.toLowerCase\n            var extension_upper_count = 0\n            var extension_lower_count = 0\n            var extension_strength = 0\n            for (i in 0 to extension.length) {\n                if (extension[i].isUpper) {\n                    extension_upper_count += 1\n                } else {\n                    extension_lower_count += 1\n                }\n            }\n            extension_strength = (extension_upper_count - extension_lower_count)\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension\n                strongest_extension_strength = extension_strength\n            }\n        }\n        return class_name + \".\" + strongest_extension",
    "        val cap = 0\n        val sm = 0\n        for(extension <- extensions) {\n            val ext_cap = scala.collection.JavaConversions.asScalaBuffer(extension).toList().map(x => x.charAt(0)).sum()\n            val ext_sm = scala.collection.JavaConversions.asScalaBuffer(extension).toList().map(x => x.charAt(1)).sum()\n            cap = cap + ext_cap\n            sm = sm + ext_sm\n        }\n        val strength = (cap - sm) / cap\n        val extension = extensions.sort(Comparator.comparingInt(x => strength - x.charAt(1)))\n        val result = class_name + \".\" + extension.head\n        return result",
    "        var strength = 0.0\n        var best_extension = \"\"\n        for(extension in extensions) {\n            var cap = 0\n            var sm = 0\n            for(i in 1 to extension.length) {\n                if(extension[i] == 'A' || extension[i] == 'a') {\n                    cap += 1\n                } else {\n                    sm += 1\n                }\n            }\n            strength = cap - sm\n            if(strength > strength) {\n                strength = cap - sm\n                best_extension = extension\n            }\n        }\n        return class_name + \".\" + best_extension",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(x => x.toUpperCase).toList\n        val extensions_lower = extensions.map(x => x.toLowerCase).toList\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (extensions_upper_count - extensions_lower_count)\n        val extension_name = extensions.find(x => strength == x.toLowerCase)\n        val class_name_extension = class_name + \".\" + extension_name\n        class_name_extension",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_length = class_name.length\n        val extensions_upper = extensions.map(s => s.toUpperCase)\n        val extensions_lower = extensions.map(s => s.toLowerCase)\n        val extensions_length = extensions.length\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val class_name_length_count = count(class_name_length)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val extensions_length_count = count(extensions_length)\n        val class_name_upper_strength = class_name_upper_count - class_name_lower_count\n        val class_name_lower_strength = class_name_lower_count - class_name_upper_count\n        val class_name_length_strength = class_name_length_count - class_name_upper_count - class_name_lower_count\n        val extensions_upper_strength = extensions_upper_count - extensions_lower_count\n        val extensions_lower_strength = extensions_lower_count - extensions_upper_count\n        val extensions_length_strength = extensions_length_count - extensions_upper_count - extensions_lower_count\n        val class_name_strength = class_name_upper_strength - class_name_lower_strength\n        val extensions_strength = extensions_upper_strength - extensions_lower_strength\n        val extensions_length_strength = extensions_length_strength - extensions_upper_strength - extensions_lower_strength\n        val class_name_strength_index = class_name_strength.index\n        val extensions_strength_index = extensions_strength.index\n        val extensions_length_strength_index = extensions_length_strength.index\n        val class_name_strength_index_value = class_name_strength_index.value\n        val extensions_strength_index_value = extensions_strength_index.value\n        ",
    "        val ext_list = extensions.toList\n        val ext_map = ext_list.zip(ext_list).toMap(tuple -> tuple._1, tuple -> tuple._2)\n        val ext_list_sorted = ext_map.entrySet.sortBy(tuple -> tuple._2.strength)\n        val ext_list_sorted_map = ext_list_sorted.map(tuple -> tuple._1)\n        val ext_list_sorted_map_sorted = ext_list_sorted_map.sortBy(tuple -> tuple)\n        val ext_list_sorted_map_sorted_sorted = ext_list_sorted_map_sorted.map(tuple -> tuple._0)\n        val ext_list_sorted_map_sorted_sorted_sorted = ext_list_sorted_map_sorted_sorted.sortBy(tuple -> tuple)\n        val ext_list_sorted_map_sorted_sorted_sorted_sorted_sorted = ext_list_sorted_map_sorted_sorted_sorted_sorted.map(tuple -> tuple._0)\n        val ext_list_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted = ext_list_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(tuple -> tuple)\n        val ext_list_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = ext_list_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted.map(tuple -> tuple._0)\n        val ext_list_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = ext_list_sorted_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(tuple -> tuple)\n        val ext_list_sorted_map_sorted_sorted_sorted",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strongest_extension = if (extensions_strength > strength) {\n            extensions.sort\n            extensions.head\n        } else {\n            class_name\n        }",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val cap_c = count(extension, 'A')\n            val sm_c = count(extension, 'a')\n            cap = cap + cap_c - sm_c\n            sm = sm + sm_c\n        }\n        val strength = cap - sm\n        val extension = extensions.sort().head()\n        val class_name_extension = class_name + \".\" + extension\n        if strength == 0 {\n            class_name_extension\n        } else {\n            class_name_extension + \".\" + strength\n        }",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strongest_extension = (class_name_upper + \".\" + extensions_upper.sort(comparing(String::length)).head)\n        if (strength > extensions_strength) {\n            strongest_extension\n        } else if (strength == extensions_strength) {\n            extensions_upper.sort(comparing(String::length)).head\n        } else {\n            extensions_lower.sort(comparing(String::length)).head\n        }",
    "        val ext_names = extensions.map(extension => extension.toLowerCase())\n        val ext_names_set = new HashSet(ext_names)\n        val ext_names_set_sorted = ext_names_set.toSortedSet(Comparator.comparingInt(extension => extension.length()))\n        val ext_names_sorted = ext_names_set_sorted.toList()\n        val ext_names_sorted_str = ext_names_sorted.map(extension => class_name + \".\" + extension)\n        ext_names_sorted_str.foreach(extension => {\n            val ext_name = extension.substring(extension.lastIndexOf(\".\") + 1)\n            val ext_name_upper = ext_name.substring(0, ext_name.length() - 1).toUpperCase()\n            val ext_name_lower = ext_name.substring(0, ext_name.length() - 1).toLowerCase()\n            val ext_name_caps = ext_name.length() - ext_name.replace(\".\", \"\").length()\n            val ext_name_sm = ext_name.length() - ext_name.replace(\".\", \"\").length()\n            val strength = ext_name_caps - ext_name_sm\n            val strength_str = strength.toString()\n            val strength_str_upper = strength_str.substring(0, strength_str.length() - 1).toUpperCase()\n            val strength_str_lower = strength_str.substring(0, strength_str.length() - 1).toLowerCase()\n            val strength_str_caps = strength_str.length() - strength_str.replace(\".\", \"\").length()\n            val strength_str_sm = strength_str.length() - strength_str.replace(\".\", \"\").length()\n            val strength_str_caps_sm = strength_str_caps - strength_str_sm\n            val strength_str_caps_sm_str = strength_str_caps_sm.toString()\n            val strength_str_caps_sm_str_upper = strength_str_caps_sm_str.substring(0, strength_str_",
    "        val ext_names = extensions.map(extension => extension.toLowerCase()).toSeq\n        val ext_caps = ext_names.map(extension => extension.count('A')).toSeq\n        val ext_sm = ext_names.map(extension => extension.count('a')).toSeq\n        val strength = ext_caps.zip(ext_sm).map(tuple => tuple._1 - tuple._2).toSeq\n        val ext_strength = strength.minBy(tuple => tuple)\n        val ext_name = ext_names.filter(extension => ext_strength == tuple._1).head\n        val class_name_ext = class_name + \".\" + ext_name\n        class_name_ext",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(e => e.toUpperCase)\n        val extensions_lower = extensions.map(e => e.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strongest_extension = if (extensions_strength > strength) {\n            extensions.sortBy[String]()._[0]\n        } else {\n            class_name\n        }",
    "        var class_name_upper = class_name.toUpperCase\n        var class_name_lower = class_name.toLowerCase\n        var extensions_upper = extensions.map(x => x.toUpperCase)\n        var extensions_lower = extensions.map(x => x.toLowerCase)\n        var class_name_upper_count = class_name_upper.count\n        var class_name_lower_count = class_name_lower.count\n        var extensions_upper_count = extensions_upper.count\n        var extensions_lower_count = extensions_lower.count\n        var strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        var extension_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        if (extension_strength > strength) {\n            return class_name + \".\" + extensions.sort().head\n        } else {\n            return class_name + \".\" + extensions.sort().head\n        }",
    "        val class_name_lower = class_name.toLowerCase\n        val extensions_lower = extensions.map(_.toLowerCase)\n        val class_name_upper = class_name.toUpperCase\n        val extensions_upper = extensions.map(_.toUpperCase)\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val extensions_upper_count = extensions_upper.count\n        val extensions_lower_count = extensions_lower.count\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strongest_extension = (class_name_upper + \".\" + extensions_upper.sort(Comparator.comparingInt(i -> i.length())).head)\n        if (extensions_strength > strength) {\n            strongest_extension\n        } else if (extensions_strength == strength) {\n            extensions_upper.sort(Comparator.comparingInt(i -> i.length())).head\n        } else {\n            extensions_lower.sort(Comparator.comparingInt(i -> i.length())).head\n        }",
    "        var class_name_upper = class_name.toUpperCase\n        var class_name_lower = class_name.toLowerCase\n        var class_name_length = class_name.length\n        var extensions_length = extensions.length\n        var extensions_upper = extensions.map(x => x.toUpperCase)\n        var extensions_lower = extensions.map(x => x.toLowerCase)\n        var extensions_cap = extensions.map(x => x.count(c => c.isUpperCase))\n        var extensions_sm = extensions.map(x => x.count(c => c.isLowerCase))\n        var extensions_strength = extensions_cap.map(x => x - extensions_sm.map(x => x).sum())\n        var extensions_strength_sum = extensions_strength.sum()\n        var extensions_strength_max = extensions_strength.max()\n        var extensions_strength_max_index = extensions_strength.indexOf(extensions_strength_max)\n        var extensions_strength_max_extension = extensions[extensions_strength_max_index]\n        var extensions_strength_max_extension_length = extensions_strength_max_extension.length\n        var extensions_strength_max_extension_upper = extensions_strength_max_extension.toUpperCase\n        var extensions_strength_max_extension_lower = extensions_strength_max_extension.toLowerCase\n        var extensions_strength_max_extension_cap = extensions_strength_max_extension.count(c => c.isUpperCase)\n        var extensions_strength_max_extension_sm = extensions_strength_max_extension.count(c => c.isLowerCase)\n        var extensions_strength_max_extension_strength = extensions_strength_max_extension_cap - extensions_strength_max_extension_sm\n        var extensions_strength_max_extension_strength_sum = extensions_strength_max_extension_strength.sum()\n        var extensions_strength_max_extension_strength_max = extensions_strength_max_extension_strength.max()\n        var extensions_strength_max_extension_strength_max_index = extensions_strength_",
    "        var class_name_lower = class_name.toLowerCase\n        var extensions_lower = extensions.map(x => x.toLowerCase)\n        var class_name_upper = class_name.toUpperCase\n        var extensions_upper = extensions.map(x => x.toUpperCase)\n        var class_name_cap = class_name_lower.count\n        var class_name_sm = class_name_lower.count\n        var extensions_cap = extensions_lower.count\n        var extensions_sm = extensions_lower.count\n        var strength = (class_name_cap - class_name_sm) / (class_name_cap - class_name_sm)\n        var extension = extensions_cap - extensions_sm\n        var extension_name = extensions_upper.takeWhile(x => x != extension).last()\n        return class_name + \".\" + extension_name + \".\" + strength",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(extension => extension.toUpperCase)\n        val extensions_lower = extensions.map(extension => extension.toLowerCase)\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val extensions_upper_count = extensions_upper.count\n        val extensions_lower_count = extensions_lower.count\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extension_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extension_strength_diff = extension_strength - strength\n        val extension_strength_diff_abs = Math.abs(extension_strength_diff)\n        val extension_strength_diff_sign = extension_strength_diff / Math.abs(extension_strength_diff)\n        val extension_strength_diff_sign_abs = Math.abs(extension_strength_diff_sign)\n        val extension_strength_diff_sign_sign = extension_strength_diff_sign / Math.abs(extension_strength_diff_sign)\n        val extension_strength_diff_sign_sign_abs = Math.abs(extension_strength_diff_sign_sign)\n        val extension_strength_diff_sign_sign_sign = extension_strength_diff_sign_sign / Math.abs(extension_strength_diff_sign_sign)\n        val extension_strength_diff_sign_sign_sign_abs = Math.abs(extension_strength_diff_sign_sign_sign)\n        val extension_strength_diff_sign_sign_sign_sign = extension_strength_diff_sign_sign_sign / Math.abs(extension_strength_diff_sign_sign_sign)\n        val extension_strength_diff_sign_sign_sign_sign_abs = Math.abs(extension",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val ext_cap = Scala.math.Char.toUpper(extension.charAt(0))\n            val ext_sm = Scala.math.Char.toLower(extension.charAt(0))\n            cap += ext_cap\n            sm += ext_sm\n        }\n        val strength = (cap - sm) / Scala.math.Char.toUpper(class_name.charAt(0))\n        val best_extension = extensions.sort().head()\n        val best_extension_name = best_extension.substring(1)\n        val result = class_name + \".\" + best_extension_name + \".\" + best_extension\n        return result",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(s => s.toUpperCase)\n        val extensions_lower = extensions.map(s => s.toLowerCase)\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val extensions_upper_count = extensions_upper.count\n        val extensions_lower_count = extensions_lower.count\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extension_strength = strength - extensions_strength\n        val extension_name = extensions.sort(Comparator.comparingInt(s => extension_strength.indexOf(s)))[0]\n        val class_name_extension = class_name + \".\" + extension_name\n        class_name_extension",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val c = extension.charAt(0)\n            if (c >= 'A' && c <= 'Z') cap += 1\n            else if (c >= 'a' && c <= 'z') sm += 1\n        }\n        val strength = cap - sm\n        if (strength == 0) {\n            val max = extensions.maxBy(Comparator.comparingInt(extension -> extension.length()))\n            return class_name + \".\" + max\n        } else {\n            val max = extensions.maxBy(Comparator.comparingInt(extension -> strength))\n            return class_name + \".\" + max\n        }",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val extensions_len = extensions.length\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val extensions_cap = extensions.map(x => x.length).max\n        val extensions_sm = extensions.map(x => x.length).min\n        val strength = (extensions_cap - extensions_sm) / (extensions_len - extensions_len)\n        val class_name_upper_extensions = class_name_upper + extensions.map(x => x.substring(0, 1)).toSeq.map(x => x.toUpperCase).mkString(\"\")\n        val class_name_lower_extensions = class_name_lower + extensions.map(x => x.substring(0, 1)).toSeq.map(x => x.toLowerCase).mkString(\"\")\n        val class_name_extensions = class_name + extensions.map(x => x.substring(0, 1)).mkString(\"\")\n        val class_name_extensions_upper = class_name_extensions.toUpperCase\n        val class_name_extensions_lower = class_name_extensions.toLowerCase\n        val class_name_extensions_len = class_name_extensions.length\n        val class_name_extensions_cap = class_name_extensions.length\n        val class_name_extensions_sm = class_name_extensions.length\n        val class_name_extensions_strength = (class_name_extensions_cap - class_name_extensions_sm) / (class_name_extensions_len - class_name_extensions_len)\n        val class_name_extensions_strength_upper = (class_name_extensions_cap - class_name_extensions_sm) / (class_name_extensions_len - class_name_extensions_len)\n        val class_name_extensions_",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val cap_c = scala.collection.JavaConversions.asScalaBuffer(extension).toList().map(x => x.charAt(0)).filter(x => x >= 'A' && x <= 'Z').length()\n            val sm_c = scala.collection.JavaConversions.asScalaBuffer(extension).toList().map(x => x.charAt(0)).filter(x => x >= 'a' && x <= 'z').length()\n            cap += cap_c\n            sm += sm_c\n        }\n        val strength = (cap - sm) / (cap + sm)\n        val extension = extensions.sort((x, y) => x.compareTo(y)).head()\n        val class_name_extension = class_name + \".\" + extension\n        return class_name_extension",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val c = extension.count('A')\n            val s = extension.count('a')\n            cap += c\n            sm += s\n        }\n        val strength = cap - sm\n        val best = extensions.sort(Comparator.comparingInt(extension -> strength)).head\n        val class_name_extension = class_name + \".\" + best\n        return class_name_extension",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val extensions_upper_count = extensions_upper.count\n        val extensions_lower_count = extensions_lower.count\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extension_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extension_name = extensions.sort(Comparator.comparing(x => x.toLowerCase)).head\n        val extension_name_upper = extension_name.toUpperCase\n        val extension_name_lower = extension_name.toLowerCase\n        val extension_name_count = extension_name.count\n        val extension_name_upper_count = extension_name_upper.count\n        val extension_name_lower_count = extension_name_lower.count\n        val extension_name_strength = (extension_name_upper_count - extension_name_lower_count) / (extension_name_upper_count + extension_name_lower_count)\n        val extension_name_strength_fraction = extension_name_strength / strength\n        val extension_name_strength_fraction_fraction = extension_name_strength_fraction / extension_strength\n        val extension_name_strength_fraction_fraction_fraction = extension_name_strength_fraction_fraction / extension_strength_fraction\n        val extension_name_strength_fraction_fraction_fraction_fraction = extension_name_strength_fraction_fraction_fraction / extension_strength_fraction_fraction\n        val extension_name_strength_fraction_fraction_fraction_f",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(s => s.toUpperCase)\n        val extensions_lower = extensions.map(s => s.toLowerCase)\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val extensions_upper_count = extensions_upper.count\n        val extensions_lower_count = extensions_lower.count\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strongest_extension = (class_name_upper + \".\" + extensions_upper.sort(Comparator.comparingInt(s => s.length())).head)\n        if (extensions_strength > strength) {\n            strongest_extension\n        } else {\n            (class_name + \".\" + extensions.sort(Comparator.comparingInt(s => s.length())).head)\n        }",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val cap_c = scala.collection.JavaConversions.asScalaBuffer(extension).toList().map(String::toUpperCase).toList().length()\n            val sm_c = scala.collection.JavaConversions.asScalaBuffer(extension).toList().map(String::toLowerCase).toList().length()\n            cap += cap_c - sm_c\n            sm += sm_c\n        }\n        val strength = cap - sm\n        val extension = extensions.sort(Comparator.comparingInt(extension -> strength)).head()\n        val class_name_extension = class_name + \".\" + extension\n        return class_name_extension",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val class_name_upper_len = class_name_upper.length\n        val class_name_lower_len = class_name_lower.length\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val class_name_upper_count_minus_lower_count = class_name_upper_count - class_name_lower_count\n        val class_name_upper_count_minus_lower_count_div_class_name_len = class_name_upper_count_minus_lower_count / class_name_len\n        val class_name_lower_count_div_class_name_len = class_name_lower_count / class_name_len\n        val class_name_upper_count_div_class_name_len = class_name_upper_count / class_name_len\n        val class_name_lower_count_div_class_name_len_minus_class_name_len = class_name_lower_count_div_class_name_len - class_name_len\n        val class_name_lower_count_div_class_name_len_minus_class_name_len_div_class_name_len = class_name_lower_count_div_class_name_len_minus_class_name_len / class_name_len\n        val class_name_lower_count_div_class_name_len_minus_class_name_len_div_class_name_len_minus_class_name_len = class_name_lower_count_div_class_name_len_minus_class_name_len_div_class_name_len - class_name_len\n        val class_name_lower_count_div_class_name_len_minus_class_name_len_div_class_name_len_minus_class_name_len_div_class_name_len = class_name_lower_count_div",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val c = extension.toUpperCase.replaceAll(\"[^A-Z]\", \"\")\n            val s = extension.toLowerCase.replaceAll(\"[^a-z]\", \"\")\n            cap += c.length()\n            sm += s.length()\n        }\n        val strength = (cap - sm) / cap\n        if (strength == 0) {\n            return class_name + \".\" + extensions.sort.toString.replaceAll(\"[^A-Za-z0-9]\", \"\")\n        } else {\n            return class_name + \".\" + extensions.sort.toString.replaceAll(\"[^A-Za-z0-9]\", \"\") + \".\" + strength.toString\n        }",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(s => s.toUpperCase)\n        val extensions_lower = extensions.map(s => s.toLowerCase)\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val extensions_upper_count = extensions_upper.count\n        val extensions_lower_count = extensions_lower.count\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strongest_extension = (class_name_upper + \".\" + extensions_upper.sort(Comparator.comparingInt(s => s.length()))[0])\n        if (strength > extensions_strength) {\n            return strongest_extension\n        } else {\n            return (class_name + \".\" + extensions.sort(Comparator.comparingInt(s => s.length()))[0])\n        }",
    "        val ext_names = extensions.map(extension => extension.toLowerCase())\n        val ext_names_set = new HashSet[String](ext_names)\n        val ext_names_set_sorted = ext_names_set.sorted(Comparator.comparing(extension => extension.length()))\n        val ext_names_sorted = ext_names_set_sorted.toList()\n        val ext_names_sorted_sorted = ext_names_sorted.sorted(Comparator.comparing(extension => extension))\n        val ext_names_sorted_sorted_sorted = ext_names_sorted_sorted.toList()\n        val ext_names_sorted_sorted_sorted_sorted = ext_names_sorted_sorted_sorted.sorted(Comparator.comparing(extension => extension))\n        val ext_names_sorted_sorted_sorted_sorted_sorted = ext_names_sorted_sorted_sorted_sorted.toList()\n        val ext_names_sorted_sorted_sorted_sorted_sorted_sorted = ext_names_sorted_sorted_sorted_sorted_sorted.sorted(Comparator.comparing(extension => extension))\n        val ext_names_sorted_sorted_sorted_sorted_sorted_sorted_sorted = ext_names_sorted_sorted_sorted_sorted_sorted_sorted.toList()\n        val ext_names_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = ext_names_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sorted(Comparator.comparing(extension => extension))\n        val ext_names_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = ext_names_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sorted(Comparator.comparing(extension => extension))\n        val ext_names_sorted_",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val extensions_len = extensions.length\n        val extensions_upper = map(extensions, _.toUpperCase)\n        val extensions_lower = map(extensions, _.toLowerCase)\n        val extensions_cap = map(extensions, _.count)\n        val extensions_sm = map(extensions, _.count)\n        val extensions_str = map(extensions, _.mkString(\".\"))\n        val class_name_str = class_name.mkString(\".\")\n        val class_name_cap = class_name_upper.mkString(\".\")\n        val class_name_sm = class_name_lower.mkString(\".\")\n        val class_name_len_cap = class_name_len + class_name_cap.length\n        val class_name_len_sm = class_name_len + class_name_sm.length\n        val class_name_len_cap_sm = class_name_len_cap + class_name_sm.length\n        val class_name_len_sm_cap = class_name_len_sm + class_name_cap.length\n        val class_name_len_sm_cap_str = class_name_len_sm_cap + class_name_str.length\n        val class_name_len_sm_cap_str_cap = class_name_len_sm_cap_str + class_name_cap.length\n        val class_name_len_sm_cap_str_cap_sm = class_name_len_sm_cap_str_cap + class_name_sm.length\n        val class_name_len_sm_cap_str_cap_sm_cap = class_name_len_sm_cap_str_cap_sm + class_name_cap.length\n        val class_name_len_sm_cap_str_cap_sm_cap_str = class_name_len_sm_cap_str_cap_sm_cap + class_name_str.length\n        val class_name_len_",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(s => s.toUpperCase)\n        val extensions_lower = extensions.map(s => s.toLowerCase)\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val extensions_upper_count = extensions_upper.count\n        val extensions_lower_count = extensions_lower.count\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extension_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extension_name = extensions.sort((a, b) => {\n            if (a.compareTo(b) == 0) {\n                return 0\n            } else if (a.compareTo(b) < 0) {\n                return -1\n            } else {\n                return 1\n            }\n        }).head\n        val extension_name_upper = extension_name.toUpperCase\n        val extension_name_lower = extension_name.toLowerCase\n        val extension_name_upper_count = extension_name_upper.count\n        val extension_name_lower_count = extension_name_lower.count\n        val strength_extension = (extension_name_upper_count - extension_name_lower_count) / (extension_name_upper_count + extension_name_lower_count)\n        val strength_class = strength\n        val strength_extension_name = strength_extension\n        val strength_extension_name_count = strength_extension_name.count\n        val strength_extension_name_upper = strength_extension_name.toUpperCase\n        val strength_extension_name_lower = strength_extension_name.toLowerCase\n        val strength_extension_name_upper_count = strength_extension_name_upper.",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(e => e.toUpperCase)\n        val extensions_lower = extensions.map(e => e.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extension_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extension_name = (extensions_upper_count > extensions_lower_count) ? extensions_upper_count - extensions_lower_count : extensions_lower_count - extensions_upper_count\n        val extension_name_upper = extension_name.map(e => e.toUpperCase)\n        val extension_name_lower = extension_name.map(e => e.toLowerCase)\n        val extension_name_upper_count = count(extension_name_upper)\n        val extension_name_lower_count = count(extension_name_lower)\n        val extension_name_strength = (extension_name_upper_count - extension_name_lower_count) / (extension_name_upper_count + extension_name_lower_count)\n        val extension_name_strength_count = (extension_name_upper_count > extension_name_lower_count) ? extension_name_upper_count - extension_name_lower_count : extension_name_lower_count - extension_name_upper_count\n        val extension_name_strength_strength = (extension_name_strength_count > strength_count) ? extension_name_strength_count - strength_count : strength_count - extension_name_strength_count\n        val extension_name_",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val extensions_upper_count = extensions_upper.count\n        val extensions_lower_count = extensions_lower.count\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extension_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extension_name = extensions.sortBy[(x => x.length).max()].head\n        val extension_name_upper = extension_name.toUpperCase\n        val extension_name_lower = extension_name.toLowerCase\n        val extension_name_upper_count = extension_name_upper.count\n        val extension_name_lower_count = extension_name_lower.count\n        val extension_name_strength = (extension_name_upper_count - extension_name_lower_count) / (extension_name_upper_count + extension_name_lower_count)\n        val extension_name_strength_fraction = extension_name_strength / strength\n        val extension_name_strength_fraction_fraction = extension_name_strength_fraction / extension_strength\n        val extension_name_strength_fraction_fraction_fraction = extension_name_strength_fraction_fraction / extension_strength_fraction\n        val extension_name_strength_fraction_fraction_fraction_fraction = extension_name_strength_fraction_fraction_fraction / extension_strength_fraction\n        val extension_name_strength_fraction_fraction_fraction_fraction_fraction = extension_name_strength_fraction_fraction_fraction_",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(extension => extension.toUpperCase)\n        val extensions_lower = extensions.map(extension => extension.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val class_name_strength = class_name_upper_count - class_name_lower_count\n        val extensions_strength = extensions_upper_count - extensions_lower_count\n        val class_name_extension_strength = class_name_strength - extensions_strength\n        val extensions_sorted = sort(extensions)\n        val extension = extensions_sorted.head\n        val extension_strength = count(extension)\n        val extension_name = extension.toUpperCase\n        val class_name_extension_strength_fraction = class_name_extension_strength / extension_strength\n        val class_name_extension_name = class_name_extension_strength_fraction.toString + \".\" + extension_name\n        class_name_extension_name",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val ext_cap = scala.collection.JavaConversions.asScalaBuffer(extension.toUpperCase()).length()\n            val ext_sm = scala.collection.JavaConversions.asScalaBuffer(extension.toLowerCase()).length()\n            cap += ext_cap\n            sm += ext_sm\n        }\n        val strength = (cap - sm) / (cap + sm)\n        val extension = extensions.sort().head()\n        val class_name_extension = class_name + \".\" + extension\n        if (strength == 1) {\n            return class_name_extension\n        } else {\n            return class_name_extension + \".\" + strength.toString()\n        }",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val class_name_count = class_name_upper_count + class_name_lower_count\n        val extensions_count = count(extensions)\n        val extensions_strength = (class_name_count - extensions_count) / class_name_count\n        val extensions_strength_count = count(extensions_strength)\n        val extensions_strength_count_sum = sum(extensions_strength_count)\n        val extensions_strength_count_sum_div = (extensions_strength_count_sum + 1) / 2\n        val extensions_strength_count_sum_div_sum = sum(extensions_strength_count_sum_div)\n        val extensions_strength_count_sum_div_sum_div = (extensions_strength_count_sum_div_sum + 1) / 2\n        val extensions_strength_count_sum_div_sum_div_sum = sum(extensions_strength_count_sum_div_sum_div)\n        val extensions_strength_count_sum_div_sum_div_sum_div = (extensions_strength_count_sum_div_sum_div_sum + 1) / 2\n        val extensions_strength_count_sum_div_sum_div_sum_div_sum = sum(extensions_strength_count_sum_div_sum_div_sum_div)\n        val extensions_strength_count_sum_div_sum_div_sum_div_sum_div = (extensions_strength_count_sum_div_sum_div_sum_div_sum + 1) / 2\n        val extensions_strength_count_sum_div_sum_div_sum_div_sum_div_sum = sum(extensions_strength_count_sum_div_sum_div_sum_div_sum_div)\n        val extensions_strength_count_sum_div_sum_div_sum_div_sum_div_sum_div = (",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val class_name_upper_len = class_name_upper.length\n        val class_name_lower_len = class_name_lower.length\n        val class_name_extensions = extensions.toList\n        val class_name_extensions_len = class_name_extensions.length\n        val class_name_extensions_upper = class_name_extensions.map(s => s.toUpperCase)\n        val class_name_extensions_lower = class_name_extensions.map(s => s.toLowerCase)\n        val class_name_extensions_len = class_name_extensions.length\n        val class_name_extensions_upper_len = class_name_extensions_upper.length\n        val class_name_extensions_lower_len = class_name_extensions_lower.length\n        val class_name_extensions_upper_len_minus_class_name_lower_len = class_name_extensions_upper_len - class_name_lower_len\n        val class_name_extensions_lower_len_minus_class_name_upper_len = class_name_extensions_lower_len - class_name_upper_len\n        val class_name_extensions_upper_len_minus_class_name_len = class_name_extensions_upper_len - class_name_len\n        val class_name_extensions_lower_len_minus_class_name_len = class_name_extensions_lower_len - class_name_len\n        val class_name_extensions_len_minus_class_name_len = class_name_extensions_len - class_name_len\n        val class_name_extensions_upper_len_minus_class_name_lower_len_minus_class_name_len = class_name_extensions_upper_len - class_name_lower_len - class_name_len\n        val class_name_extensions_lower_len_minus_class_name",
    "        val strength = extensions.map(extension => {\n            val cap = extension.count('A')\n            val sm = extension.count('a')\n            val strength = cap - sm\n            return strength\n        }).max()\n        val extension = extensions.filter(extension => strength == extension.strength).head()\n        val class_name_extension = class_name + \".\" + extension\n        return class_name_extension",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val extensions_upper_count = extensions_upper.count\n        val extensions_lower_count = extensions_lower.count\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strongest_extension = (\n            if (strength > extensions_strength) {\n                class_name + \".\" + extensions.sort(Comparator.comparing(x => x.toLowerCase)).head\n            } else {\n                extensions.sort(Comparator.comparing(x => x.toLowerCase)).head + \".\" + class_name\n            }\n        )\n        return strongest_extension",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(e => e.toUpperCase)\n        val extensions_lower = extensions.map(e => e.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strongest_extension = if (extensions_strength > strength) {\n            extensions.sortBy[String]().head\n        } else {\n            class_name\n        }",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(s => s.toUpperCase)\n        val extensions_lower = extensions.map(s => s.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strongest_extension = if (extensions_strength > strength) {\n            extensions.filter(s => s.startsWith(class_name)).sort().head()\n        } else {\n            extensions.filter(s => s.startsWith(class_name)).sort().head()\n        }\n        class_name + \".\" + strongest_extension",
    "        val ext_list = extensions.toSeq\n        val ext_map = ext_list.zipWithIndex.toMap\n        val ext_strength = ext_map.map {\n            (ext, i) => ext.toUpperCase.replaceAll(\"[^A-Z]\", \"\").length - ext.toLowerCase.replaceAll(\"[^a-z]\", \"\").length\n        }\n        val ext_max = ext_strength.max\n        val ext_max_ext = ext_max.get\n        val ext_max_ext_name = ext_max_ext.get\n        val ext_max_ext_name_str = ext_max_ext_name.toString\n        val ext_max_ext_name_str_split = ext_max_ext_name_str.split(\".\")\n        val ext_max_ext_name_str_split_length = ext_max_ext_name_str_split.length\n        val ext_max_ext_name_str_split_length_minus_1 = ext_max_ext_name_str_split_length - 1\n        val ext_max_ext_name_str_split_length_minus_2 = ext_max_ext_name_str_split_length - 2\n        val ext_max_ext_name_str_split_length_minus_3 = ext_max_ext_name_str_split_length - 3\n        val ext_max_ext_name_str_split_length_minus_4 = ext_max_ext_name_str_split_length - 4\n        val ext_max_ext_name_str_split_length_minus_5 = ext_max_ext_name_str_split_length - 5\n        val ext_max_ext_name_str_split_length_minus_6 = ext_max_ext_name_str_split_length - 6\n        val ext_max_ext_name_str_split_length_minus_7 = ext_max_ext_name_str_split_length - 7\n        val ext_max_ext_name_str_split_length_minus_8 = ext_max_ext_name_str_split_length - 8\n        val ext_max_",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extensions_strength_order = extensions_strength.order\n        val strongest_extension = extensions_strength_order.head\n        val extension_name = extensions_strength_order.head\n        val extension_name_upper = extension_name.toUpperCase\n        val extension_name_lower = extension_name.toLowerCase\n        val extension_name_count = count(extension_name_upper)\n        val extension_name_count_order = extension_name_count.order\n        val extension_name_count_order_head = extension_name_count_order.head\n        val extension_name_count_order_head_upper = extension_name_count_order_head.toUpperCase\n        val extension_name_count_order_head_lower = extension_name_count_order_head.toLowerCase\n        val extension_name_count_order_head_count = count(extension_name_count_order_head_upper)\n        val extension_name_count_order_head_count_order = extension_name_count_order_head_count.order\n        val extension_name_count_order_head_count_order_head = extension_name_count_order_head_count_order.head\n        val extension_name_count_order",
    "        var class_name_upper = class_name.toUpperCase\n        var class_name_lower = class_name.toLowerCase\n        var class_name_upper_count = 0\n        var class_name_lower_count = 0\n        var strongest_extension = \"\"\n        var strongest_extension_strength = 0\n        for (extension in extensions) {\n            var extension_upper = extension.toUpperCase\n            var extension_lower = extension.toLowerCase\n            var extension_upper_count = 0\n            var extension_lower_count = 0\n            for (c in extension_upper) {\n                if (c.isUpper()) {\n                    extension_upper_count += 1\n                }\n            }\n            for (c in extension_lower) {\n                if (c.isLower()) {\n                    extension_lower_count += 1\n                }\n            }\n            var strength = (extension_upper_count - extension_lower_count) / (extension_upper_count + extension_lower_count)\n            if (strength > strongest_extension_strength) {\n                strongest_extension = extension\n                strongest_extension_strength = strength\n            }\n        }\n        return class_name_upper + \".\" + strongest_extension",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(s => s.toUpperCase)\n        val extensions_lower = extensions.map(s => s.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extensions_sorted = sort(extensions)\n        val strongest_extension = extensions_sorted.head\n        val extension_name = strongest_extension.toLowerCase\n        val class_name_extension = class_name + \".\" + extension_name\n        val strength_extension = strength * extensions_strength\n        val strength_class = strength * (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val strength_extension_class = strength_extension * (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val strength_class_extension = strength_class * extensions_strength\n        val strength_extension_class_extension = strength_extension_class * extensions_strength\n        val strength_class_extension_extension = strength_class_extension * extensions_strength\n        val strength_extension_class_extension_extension = strength_extension_class_extension * extensions_strength\n        val strength_class_extension_extension_extension = strength_class_extension_extension * extensions_strength\n        val strength_",
    "        val class_name_lower = class_name.toLowerCase\n        val extensions_lower = extensions.map(_.toLowerCase)\n        val class_name_upper = class_name.toUpperCase\n        val extensions_upper = extensions.map(_.toUpperCase)\n        val class_name_caps = class_name_lower.replaceAll(\"\\\\W+\", \"\")\n        val class_name_sm = class_name_lower.replaceAll(\"\\\\W+\", \"\")\n        val extensions_caps = extensions_lower.map(s => s.replaceAll(\"\\\\W+\", \"\"))\n        val extensions_sm = extensions_lower.map(s => s.replaceAll(\"\\\\W+\", \"\"))\n        val class_name_caps_sm = class_name_caps + class_name_sm\n        val class_name_sm_caps = class_name_sm + class_name_caps\n        val class_name_sm_caps_sm = class_name_sm_caps + class_name_sm\n        val class_name_sm_caps_sm_caps = class_name_sm_caps_sm + class_name_sm_caps\n        val class_name_sm_caps_sm_caps_sm = class_name_sm_caps_sm_caps + class_name_sm_caps_sm\n        val class_name_sm_caps_sm_caps_sm_caps = class_name_sm_caps_sm_caps_sm + class_name_sm_caps_sm_caps\n        val class_name_sm_caps_sm_caps_sm_caps_sm = class_name_sm_caps_sm_caps_sm_caps + class_name_sm_caps_sm_caps_sm\n        val class_name_sm_caps_sm_caps_sm_caps_sm_caps = class_name_sm_caps_sm_caps_sm_caps_sm + class_name_sm_caps_sm_caps_sm_caps\n        val class_name_sm_caps_sm_caps_sm_caps_sm_caps_sm = class_name_sm_caps_sm_caps_sm_caps_sm_caps + class_name_sm_caps_sm_caps_",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val cap_c = count(extension, 'A')\n            val sm_c = count(extension, 'a')\n            cap = cap + cap_c - sm_c\n            sm = sm + sm_c\n        }\n        val strength = cap - sm\n        if (strength == 0) {\n            return class_name + \".\" + extensions.sort().head()\n        } else {\n            return class_name + \".\" + extensions.sort().head() + \".\" + strength.toString()\n        }",
    "        val strength = extensions.map(extension => {\n            val cap = extension.count('A')\n            val sm = extension.count('a')\n            val strength = cap - sm\n            return strength\n        }).max()\n        val extension = extensions.filter(extension => strength == extension.strength).head()\n        val class_name_extension = class_name + \".\" + extension\n        return class_name_extension",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val ext_cap = count(extension, 'A') + count(extension, 'E') + count(extension, 'I') + count(extension, 'O') + count(extension, 'U')\n            val ext_sm = count(extension, 'a') + count(extension, 'e') + count(extension, 'i') + count(extension, 'o') + count(extension, 'u')\n            if (ext_cap - ext_sm > cap - sm) {\n                cap = ext_cap - ext_sm\n                sm = ext_sm\n            }\n        }\n        val ext_name = extensions.filter(extension => count(extension, '.') == 1).head()\n        val ext_class = ext_name.split('.')[0]\n        val ext_strength = cap - sm\n        if (ext_class.equals(class_name)) {\n            return class_name + \".\" + ext_name\n        } else if (ext_class.equals(class_name + \"$\")) {\n            return class_name + \".\" + ext_name\n        } else if (ext_class.equals(class_name + \"$$\")) {\n            return class_name + \".\" + ext_name\n        } else if (ext_class.equals(class_name + \"$$$\")) {\n            return class_name + \".\" + ext_name\n        } else {\n            return class_name + \".\" + ext_name\n        }",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val extensions_len = extensions.length\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val extensions_cap = extensions.map(x => x.length).map(x => x - x.count(\"_\")).sum()\n        val extensions_sm = extensions.map(x => x.length).map(x => x - x.count(\"_\")).sum()\n        val class_name_cap = class_name_len - class_name_lower.count(\"_\")\n        val class_name_sm = class_name_len - class_name_lower.count(\"_\")\n        val strength = (class_name_cap - class_name_sm) / class_name_len\n        val extensions_strength = extensions_len.map(x => (x - x.count(\"_\")) / x.length).sum()\n        val extensions_strength_sort = extensions_strength.sort\n        val extensions_strength_sort_rev = extensions_strength_sort.reverse\n        val extensions_strength_sort_rev_map = extensions_strength_sort_rev.map(x => x.index)\n        val extensions_strength_sort_rev_map_rev = extensions_strength_sort_rev_map.reverse\n        val extensions_strength_sort_rev_map_rev_map = extensions_strength_sort_rev_map_rev.map(x => x.index)\n        val extensions_strength_sort_rev_map_rev_map_rev = extensions_strength_sort_rev_map_rev_map.reverse\n        val extensions_strength_sort_rev_map_rev_map_rev_map = extensions_strength_sort_rev_map_rev_map_rev.map(x => x.index)\n        val extensions_strength_sort_rev_map_rev_map_rev_map_rev = extensions_strength_sort_rev_map_rev_map_rev_map_rev.reverse\n",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(s => s.toUpperCase).toList\n        val extensions_lower = extensions.map(s => s.toLowerCase).toList\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strongest_extension = (class_name_upper + \".\" + extensions_upper.sort(Comparator.comparingInt(s => strength(s))).head)\n        return strongest_extension",
    "        var class_name_upper = class_name.toUpperCase\n        var class_name_lower = class_name.toLowerCase\n        var extensions_upper = extensions.map(x => x.toUpperCase)\n        var extensions_lower = extensions.map(x => x.toLowerCase)\n        var class_name_upper_count = class_name_upper.count\n        var class_name_lower_count = class_name_lower.count\n        var extensions_upper_count = extensions_upper.count\n        var extensions_lower_count = extensions_lower.count\n        var strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        var extension_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        var extension_strength_diff = extension_strength - strength\n        var extension_strength_diff_sign = extension_strength_diff < 0 ? -1 : 1\n        var extension_strength_diff_abs = Math.abs(extension_strength_diff)\n        var extension_strength_diff_sign_abs = Math.abs(extension_strength_diff_sign)\n        var extension_strength_diff_sign_abs_max = extension_strength_diff_sign_abs > extension_strength_diff_abs ? extension_strength_diff_sign_abs : extension_strength_diff_abs\n        var extension_strength_diff_sign_abs_max_index = extension_strength_diff_sign_abs_max.index\n        var extension_name = extensions.get(extension_strength_diff_sign_abs_max_index)\n        return class_name + \".\" + extension_name",
    "        val cap = extensions.map(_.toUpper).reduce(0, (a, b) => a + b)\n        val sm = extensions.map(_.toLower).reduce(0, (a, b) => a + b)\n        val strength = (cap - sm) / cap\n        val sorted = extensions.sortBy(e => strength(e)).toList\n        sorted.head",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val class_name_count = class_name_upper_count + class_name_lower_count\n        val extensions_count = count(extensions)\n        val strength = (class_name_count - extensions_count) / class_name_count\n        val extensions_upper = filter(extensions, (e -> e.toUpperCase == e))\n        val extensions_lower = filter(extensions, (e -> e.toLowerCase == e))\n        val extensions_first = sort(extensions_upper).head\n        val extensions_second = sort(extensions_lower).head\n        val extensions_first_strength = StrongestExtension(class_name, extensions_first)\n        val extensions_second_strength = StrongestExtension(class_name, extensions_second)\n        val extensions_first_strength_strength = strength(extensions_first_strength)\n        val extensions_second_strength_strength = strength(extensions_second_strength)\n        val extensions_first_strength_strength_strength = (extensions_first_strength_strength - extensions_second_strength_strength) / extensions_first_strength_strength\n        val extensions_first_strength_strength_strength_strength = extensions_first_strength_strength_strength / extensions_first_strength_strength\n        val extensions_first_strength_strength_strength_strength_strength = extensions_first_strength_strength_strength_strength / extensions_first_strength_strength_strength\n        val extensions_first_strength_strength_strength_strength_strength_strength = extensions_first_strength_strength_strength_strength_strength / extensions_first_strength_strength_strength_strength\n        val extensions_first_strength_strength_strength_strength_strength_strength_strength = extensions_first_strength_strength_strength_strength_strength_strength / extensions_first_strength_strength_strength_strength_strength\n        val extensions_first_strength_strength_strength_strength_strength_strength_strength",
    "        val ext_list = extensions.toSeq\n        val ext_map = ext_list.zip(ext_list).toMap\n        val ext_strength = ext_map.values.map { _.strength }\n        ext_strength.max",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(s => s.toUpperCase)\n        val extensions_lower = extensions.map(s => s.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extension_name = (extensions_strength > strength) ? extensions_upper : extensions_lower\n        val class_name_extension = class_name + \".\" + extension_name\n        class_name_extension",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strongest_extension = (class_name_upper + \".\" + extensions_upper.sort(Comparator.comparingInt(x => x.length())).head)\n        if (strength == extensions_strength) {\n            strongest_extension\n        } else if (strength > extensions_strength) {\n            strongest_extension\n        } else {\n            extensions_lower.sort(Comparator.comparingInt(x => x.length())).head\n        }",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val class_name_upper_len = class_name_upper.length\n        val class_name_lower_len = class_name_lower.length\n        val class_name_extensions = extensions.toList\n        val class_name_extensions_len = class_name_extensions.length\n        val class_name_extensions_upper = class_name_extensions.map(extension -> extension.toUpperCase)\n        val class_name_extensions_lower = class_name_extensions.map(extension -> extension.toLowerCase)\n        val class_name_extensions_len = class_name_extensions.length\n        val class_name_extensions_upper_len = class_name_extensions_upper.length\n        val class_name_extensions_lower_len = class_name_extensions_lower.length\n        val class_name_extensions_upper_len_minus_lower_len = class_name_extensions_upper_len - class_name_extensions_lower_len\n        val class_name_extensions_upper_len_minus_lower_len_minus_1 = class_name_extensions_upper_len_minus_lower_len - 1\n        val class_name_extensions_upper_len_minus_lower_len_minus_1_div_class_name_len = class_name_extensions_upper_len_minus_lower_len_minus_1 / class_name_len\n        val class_name_extensions_upper_len_minus_lower_len_minus_1_div_class_name_len_minus_1 = class_name_extensions_upper_len_minus_lower_len_minus_1 / (class_name_len - 1)\n        val class_name_extensions_upper_len_minus_lower_len_minus_1_div_class_name_len_minus_1_minus_1 = class_name_extensions_upper_len_minus_lower_len_minus_1",
    "        var strength = 0.0\n        var best_extension = \"\"\n        for (extension in extensions) {\n            var cap = 0\n            var sm = 0\n            for (i in 1 to extension.length) {\n                if (extension[i].isUpper()) {\n                    cap += 1\n                } else {\n                    sm += 1\n                }\n            }\n            strength = (cap - sm) / cap\n            if (strength > best_extension.length()) {\n                best_extension = extension\n            }\n        }\n        return class_name + \".\" + best_extension",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(e => e.toUpperCase)\n        val extensions_lower = extensions.map(e => e.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extension_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extension_name = (extensions_upper_count > extensions_lower_count) ? extensions_upper_count - extensions_lower_count : extensions_lower_count - extensions_upper_count\n        val extension_name_upper = extension_name.map(e => e.toUpperCase)\n        val extension_name_lower = extension_name.map(e => e.toLowerCase)\n        val extension_name_count = count(extension_name_upper) + count(extension_name_lower)\n        val extension_name_strength = (extension_name_count - class_name_lower_count) / (extension_name_count + class_name_lower_count)\n        val extension_name_strength_count = count(extension_name_strength)\n        val extension_name_strength_strength = (extension_name_strength_count - class_name_lower_count) / (extension_name_strength_count + class_name_lower_count)\n        val extension_name_strength_strength_count = count(extension_name_strength_strength)\n        val extension_name_strength_strength_strength = (extension_name_strength_strength_count - class_name_lower_count) / (extension_name_strength",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(s => s.toUpperCase)\n        val extensions_lower = extensions.map(s => s.toLowerCase)\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val extensions_upper_count = extensions_upper.count\n        val extensions_lower_count = extensions_lower.count\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extension_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extension_name = extensions.sortBy[(a, b) => a.compareTo(b)]\n        if (extension_strength > strength) {\n            return class_name + \".\" + extension_name.head\n        } else {\n            return class_name + \".\" + extension_name.head\n        }",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val extensions_upper_count = extensions_upper.count\n        val extensions_lower_count = extensions_lower.count\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extension_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extension_name = extensions.sort(Comparator.comparing(x => x.toLowerCase)).head\n        val extension_name_upper = extension_name.toUpperCase\n        val extension_name_lower = extension_name.toLowerCase\n        val extension_name_upper_count = extension_name_upper.count\n        val extension_name_lower_count = extension_name_lower.count\n        val extension_name_strength = (extension_name_upper_count - extension_name_lower_count) / (extension_name_upper_count + extension_name_lower_count)\n        val extension_name_strength_fraction = extension_name_strength / strength\n        val extension_name_strength_fraction_rounded = round(extension_name_strength_fraction)\n        val extension_name_strength_fraction_rounded_str = extension_name_strength_fraction_rounded.toString\n        val extension_name_strength_fraction_rounded_str_str = extension_name_strength_fraction_rounded_str.toString\n        val extension_name_strength_fraction_rounded_str_str_str = extension_name_strength_fraction_rounded_str_str.toString\n        val extension_name_strength_fraction_rounded_str_",
    "        val ext_list = extensions.toList\n        val class_name_upper = class_name.toUpper\n        val class_name_lower = class_name.toLower\n        val ext_list_upper = ext_list.map(extension => extension.toUpper)\n        val ext_list_lower = ext_list.map(extension => extension.toLower)\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val ext_list_upper_count = ext_list_upper.count\n        val ext_list_lower_count = ext_list_lower.count\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val ext_list_strength = ext_list_upper_count - ext_list_lower_count\n        val ext_list_strength_f = ext_list_strength.toFloat\n        val ext_list_strength_i = ext_list_strength.toInt\n        val ext_list_strength_d = ext_list_strength.toDouble\n        val ext_list_strength_l = ext_list_strength.toLong\n        val ext_list_strength_b = ext_list_strength.toByte\n        val ext_list_strength_c = ext_list_strength.toChar\n        val ext_list_strength_s = ext_list_strength.toShort\n        val ext_list_strength_m = ext_list_strength.toInt\n        val ext_list_strength_f = ext_list_strength.toFloat\n        val ext_list_strength_d = ext_list_strength.toDouble\n        val ext_list_strength_l = ext_list_strength.toLong\n        val ext_list_strength_b = ext_list_strength.toByte\n        val ext_list_strength_c = ext_list_strength.toChar\n        val ext_list_strength_s = ext_list_strength.toShort\n        val ext_list_strength_m = ext_list_strength.toInt\n        val",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val class_name_count = class_name_upper_count + class_name_lower_count\n        val extensions_count = count(extensions)\n        val extensions_upper = filter(extensions, (e -> e.toUpperCase == e))\n        val extensions_lower = filter(extensions, (e -> e.toLowerCase == e))\n        val extensions_count_upper = count(extensions_upper)\n        val extensions_count_lower = count(extensions_lower)\n        val extensions_count_total = extensions_count_upper + extensions_count_lower\n        val extensions_strength = (extensions_count_upper - extensions_count_lower) / extensions_count_total\n        val class_name_strength = (class_name_count - class_name_lower_count) / class_name_count\n        val extensions_strength_total = extensions_strength + class_name_strength\n        val extensions_strength_max = max(extensions_strength_total)\n        val extensions_strength_max_index = indexOf(extensions_strength_total, extensions_strength_max)\n        val extensions_strength_max_extension = extensions[extensions_strength_max_index]\n        val class_name_extension = class_name + \".\" + extensions_strength_max_extension\n        class_name_extension",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val c = extension.charAt(0)\n            if (c >= 'A' && c <= 'Z') {\n                cap += 1\n            } else {\n                sm += 1\n            }\n        }\n        val strength = cap - sm\n        if (strength == 0) {\n            return class_name + \".\" + extensions.head\n        } else {\n            return class_name + \".\" + extensions.sort(Comparator.comparingInt(String::length).reversed()).head\n        }",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val extensions_upper_count = extensions_upper.count\n        val extensions_lower_count = extensions_lower.count\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strength_extension = (strength, extensions_strength, extensions)\n        val sorted_extensions = extensions.sortBy[(a, b) => a - b]\n        val strongest_extension = sorted_extensions.head\n        val extension_name = strongest_extension._1\n        val extension_strength = strongest_extension._2\n        val extension_class_name = class_name + \".\" + extension_name\n        if (extension_strength > strength) {\n            extension_class_name\n        } else if (extension_strength == strength) {\n            if (sorted_extensions.head._3 < sorted_extensions.last._3) {\n                extension_class_name\n            } else {\n                sorted_extensions.head._1\n            }\n        } else {\n            sorted_extensions.head._1\n        }",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(s => s.toUpperCase)\n        val extensions_lower = extensions.map(s => s.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extension_name = (\n            extensions_strength > strength ?\n                extensions_strength > strength ?\n                    extensions.sort(Comparator.comparingInt(s => s.length())).head :\n                    extensions.sort(Comparator.comparingInt(s => s.length())).head :\n                extensions.sort(Comparator.comparingInt(s => s.length())).head\n        )\n        val class_name_extension = class_name + \".\" + extension_name\n        class_name_extension",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(s => s.toUpperCase)\n        val extensions_lower = extensions.map(s => s.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strength_extension = strength < extensions_strength ? extensions_strength : strength\n        val extension_name = extensions.filter(s => s.contains(strength_extension)).head\n        val extension_name_upper = extension_name.toUpperCase\n        val extension_name_lower = extension_name.toLowerCase\n        val extension_name_count = count(extension_name_upper) + count(extension_name_lower)\n        val class_name_count = count(class_name_upper) + count(class_name_lower)\n        val class_name_extension = class_name_count < extension_name_count ? extension_name : class_name\n        return class_name_extension + \".\" + extension_name",
    "        val class_name_lower = class_name.toLowerCase\n        val extensions_lower = extensions.map(e => e.toLowerCase)\n        val class_name_upper = class_name.toUpperCase\n        val extensions_upper = extensions.map(e => e.toUpperCase)\n        val class_name_caps = class_name.replaceAll(\"\\\\.\", \"\").replaceAll(\"\\\\s+\", \"\")\n        val class_name_sm = class_name.replaceAll(\"\\\\.\", \"\").replaceAll(\"\\\\s+\", \"\").replaceAll(\"[A-Z]\", \"\").replaceAll(\"[a-z]\", \"\")\n        val class_name_sm_caps = class_name_sm.replaceAll(\"\\\\.\", \"\").replaceAll(\"\\\\s+\", \"\").replaceAll(\"[A-Z]\", \"\").replaceAll(\"[a-z]\", \"\")\n        val class_name_sm_caps_len = class_name_sm_caps.length()\n        val class_name_sm_len = class_name_sm.length()\n        val class_name_caps_len = class_name_caps.length()\n        val class_name_len = class_name.length()\n        val extensions_len = extensions.length\n        val extensions_caps_len = extensions.map(e => e.replaceAll(\"\\\\.\", \"\").replaceAll(\"\\\\s+\", \"\").replaceAll(\"[A-Z]\", \"\").replaceAll(\"[a-z]\", \"\")).length()\n        val extensions_sm_len = extensions.map(e => e.replaceAll(\"\\\\.\", \"\").replaceAll(\"\\\\s+\", \"\").replaceAll(\"[A-Z]\", \"\").replaceAll(\"[a-z]\", \"\")).length()\n        val extensions_sm_caps_len = extensions.map(e => e.replaceAll(\"\\\\.\", \"\").replaceAll(\"\\\\s+\", \"\").replaceAll(\"[A-Z]\", \"\").replaceAll(\"[a-z]\", \"\")).map(e => e.replaceAll(\"\\\\.\", \"\").replaceAll(\"\\\\s+\", \"\").replaceAll(\"[A-Z]\", \"\").replaceAll(\"[a-z]\", \"\")).length",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(e => e.toUpperCase)\n        val extensions_lower = extensions.map(e => e.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extensions_strength_index = extensions_strength.indexOf(max(extensions_strength))\n        val extensions_strength_value = extensions_strength[extensions_strength_index]\n        val extensions_strength_index_value = extensions_strength_index\n        val extensions_strength_value_value = extensions_strength_value\n        val extensions_strength_value_index_value = extensions_strength_value_value\n        val extensions_strength_value_index_value_value = extensions_strength_value_index_value\n        val extensions_strength_value_index_value_value_value = extensions_strength_value_index_value_value\n        val extensions_strength_value_index_value_value_value_value = extensions_strength_value_index_value_value_value\n        val extensions_strength_value_index_value_value_value_value_value = extensions_strength_value_index_value_value_value_value\n        val extensions_strength_value_index_value_value_value_value_value_value = extensions_strength_value_index_value_value_value_value_value_value\n        val extensions_strength_value_index_value_value_value_value_value_value_value = extensions_strength_value_index_value_value_value",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val cap_c = scala.collection.JavaConversions.asScalaBuffer(extension).toList().map(String::toUpperCase).map(c -> (c.charAt(0) - 'A' + 1)).sum()\n            val sm_c = scala.collection.JavaConversions.asScalaBuffer(extension).toList().map(String::toLowerCase).map(c -> (c.charAt(0) - 'a' + 1)).sum()\n            cap = cap + cap_c\n            sm = sm + sm_c\n        }\n        val strength = (cap - sm) / (cap + sm)\n        val extension = extensions.sort(Comparator.comparing(extension -> strength)).head()\n        val class_name_extension = class_name + \".\" + extension\n        return class_name_extension",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val class_name_count = class_name_upper_count + class_name_lower_count\n        val extensions_count = count(extensions)\n        val extensions_strength = (class_name_upper_count - class_name_lower_count) / class_name_count\n        val extensions_strength_count = count(extensions_strength)\n        val extensions_strength_count_sum = sum(extensions_strength_count)\n        val extensions_strength_count_sum_count = count(extensions_strength_count_sum)\n        val extensions_strength_count_sum_count_sum = sum(extensions_strength_count_sum_count)\n        val extensions_strength_count_sum_count_sum_count = count(extensions_strength_count_sum_count_sum)\n        val extensions_strength_count_sum_count_sum_count_sum = sum(extensions_strength_count_sum_count_sum_count)\n        val extensions_strength_count_sum_count_sum_count_sum_count = count(extensions_strength_count_sum_count_sum_count_sum)\n        val extensions_strength_count_sum_count_sum_count_sum_count_sum = sum(extensions_strength_count_sum_count_sum_count_sum_count)\n        val extensions_strength_count_sum_count_sum_count_sum_count_sum_count = count(extensions_strength_count_sum_count_sum_count_sum_count_sum)\n        val extensions_strength_count_sum_count_sum_count_sum_count_sum_count_sum = sum(extensions_strength_count_sum_count_sum_count_sum_count_sum_count)\n        val extensions_strength_count_sum_count_sum_count_sum_count_sum_count_sum_count = count(extensions_strength_",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(s => s.toUpperCase)\n        val extensions_lower = extensions.map(s => s.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extension_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extension_name = (extensions_upper.filter(s => s.startsWith(class_name_upper)).sortBy(s => s).head)\n        val extension_name_upper = extension_name.toUpperCase\n        val extension_name_lower = extension_name.toLowerCase\n        val extension_name_upper_count = count(extension_name_upper)\n        val extension_name_lower_count = count(extension_name_lower)\n        val strength_extension = (extension_name_upper_count - extension_name_lower_count) / (extension_name_upper_count + extension_name_lower_count)\n        val extension_name_strength = (extension_strength - strength_extension) / (extension_strength + strength_extension)\n        val extension_name_strength_extension = (extension_name_strength - strength) / (extension_name_strength + strength)\n        val extension_name_strength_extension_strength = (extension_name_strength_extension - strength) / (extension_name_strength_extension + strength)\n        val extension_name_strength_extension_strength_extension = (extension_name_strength_extension_strength - strength) /",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val extensions_upper_count = extensions_upper.count\n        val extensions_lower_count = extensions_lower.count\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extensions_strength_sort = extensions.sortBy[String](extensions_strength)\n        val strongest_extension = extensions_strength_sort.head\n        val extension_name = extensions_strength_sort.tail.head\n        val extension_name_upper = extension_name.toUpperCase\n        val extension_name_lower = extension_name.toLowerCase\n        val extension_name_count = extension_name_upper.count\n        val extension_name_sort = extension_name.sortBy[String](extension_name_count)\n        val extension_name_sort_head = extension_name_sort.head\n        val extension_name_sort_tail = extension_name_sort.tail\n        val extension_name_sort_head_count = extension_name_sort_head.count\n        val extension_name_sort_tail_count = extension_name_sort_tail.count\n        val extension_name_sort_head_strength = (extension_name_sort_head_count - extension_name_sort_tail_count) / (extension_name_sort_head_count + extension_name_sort_tail_count)\n        val extension_name_sort_head_strength_sort = extension_name_sort.sortBy[String](extension_name_sort_head_strength)",
    "        val class_name_lower = class_name.toLowerCase\n        val extensions_lower = extensions.map(s => s.toLowerCase)\n        val class_name_upper = class_name.toUpperCase\n        val extensions_upper = extensions.map(s => s.toUpperCase)\n        val class_name_cap = class_name.replaceAll(\"\\\\.\", \"\").replaceAll(\"\\\\s+\", \"\")\n        val extensions_cap = extensions.map(s => s.replaceAll(\"\\\\.\", \"\").replaceAll(\"\\\\s+\", \"\"))\n        val class_name_sm = class_name.replaceAll(\"\\\\.\", \"\").replaceAll(\"\\\\s+\", \"\").length()\n        val extensions_sm = extensions.map(s => s.replaceAll(\"\\\\.\", \"\").replaceAll(\"\\\\s+\", \"\").length())\n        val class_name_sm_cap = class_name_sm + class_name_cap\n        val extensions_sm_cap = extensions_sm + extensions_cap\n        val class_name_sm_cap_diff = class_name_sm_cap - class_name_sm\n        val extensions_sm_cap_diff = extensions_sm_cap - extensions_sm\n        val class_name_sm_cap_diff_ratio = class_name_sm_cap_diff / class_name_sm\n        val extensions_sm_cap_diff_ratio = extensions_sm_cap_diff / extensions_sm\n        val class_name_sm_cap_diff_ratio_diff = class_name_sm_cap_diff_ratio - 1\n        val extensions_sm_cap_diff_ratio_diff = extensions_sm_cap_diff_ratio - 1\n        val class_name_sm_cap_diff_ratio_diff_diff = class_name_sm_cap_diff_ratio_diff / class_name_sm_cap_diff\n        val extensions_sm_cap_diff_ratio_diff_diff = extensions_sm_cap_diff_ratio_diff / extensions_sm_cap_diff\n        val class_name_sm_cap_diff_ratio_diff_diff_diff = class_name_sm_cap_diff_ratio_",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val class_name_upper_len = class_name_upper.length\n        val class_name_lower_len = class_name_lower.length\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val class_name_upper_count_minus_lower_count = class_name_upper_count - class_name_lower_count\n        val class_name_upper_count_minus_lower_count_div_class_name_len = class_name_upper_count_minus_lower_count / class_name_len\n        val class_name_upper_count_minus_lower_count_div_class_name_len_minus_1 = class_name_upper_count_minus_lower_count_div_class_name_len - 1\n        val class_name_upper_count_minus_lower_count_div_class_name_len_minus_1_div_2 = class_name_upper_count_minus_lower_count_div_class_name_len_minus_1 / 2\n        val class_name_upper_count_minus_lower_count_div_class_name_len_minus_1_div_2_div_2 = class_name_upper_count_minus_lower_count_div_class_name_len_minus_1_div_2 / 2\n        val class_name_upper_count_minus_lower_count_div_class_name_len_minus_1_div_2_div_2_div_2 = class_name_upper_count_minus_lower_count_div_class_name_len_minus_1_div_2_div_2 / 2\n        val class_name_upper_count_minus_lower_count_div_class_name_len_minus_1_div_2_div_2_div_2_div_2 = class_name_upper_count_minus_lower_count_div_class",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val c = extension.toUpperCase()\n            val s = extension.toLowerCase()\n            cap += c.length()\n            sm += s.length()\n        }\n        val strength = (cap - sm) / cap\n        val best = extensions.sort().head()\n        val best_extension = best.toUpperCase()\n        val best_extension_name = best_extension.substring(0, best_extension.length() - 1)\n        return class_name + \".\" + best_extension_name + \".\" + strength.toString()",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val class_name_count = class_name_upper_count + class_name_lower_count\n        val extensions_upper = map(extensions, String.toUpperCase)\n        val extensions_lower = map(extensions, String.toLowerCase)\n        val extensions_count = map(extensions, count)\n        val extensions_upper_count = map(extensions_upper, count)\n        val extensions_lower_count = map(extensions_lower, count)\n        val extensions_count_sum = sum(extensions_count)\n        val extensions_count_sum_upper = sum(extensions_upper_count)\n        val extensions_count_sum_lower = sum(extensions_lower_count)\n        val extensions_count_sum_upper_minus_lower = extensions_count_sum_upper - extensions_count_sum_lower\n        val extensions_count_sum_upper_minus_lower_div_class_name_count = extensions_count_sum_upper_minus_lower / class_name_count\n        val extensions_count_sum_upper_minus_lower_div_class_name_count_minus_1 = extensions_count_sum_upper_minus_lower_div_class_name_count - 1\n        val extensions_count_sum_upper_minus_lower_div_class_name_count_minus_1_div_class_name_count = extensions_count_sum_upper_minus_lower_div_class_name_count_minus_1 / class_name_count\n        val extensions_count_sum_upper_minus_lower_div_class_name_count_minus_1_div_class_name_count_minus_1 = extensions_count_sum_upper_minus_lower_div_class_name_count_minus_1_div_class_name_count - 1\n        val extensions_count_sum_upper_minus_lower_div_class_name_",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strongest_extension = if (extensions_strength > strength) {\n            extensions.sortBy(x => x)\n            extensions.head\n        } else {\n            class_name\n        }",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_length = class_name.length\n        val extensions_length = extensions.length\n        val extensions_upper = extensions.map(s => s.toUpperCase)\n        val extensions_lower = extensions.map(s => s.toLowerCase)\n        val extensions_count = extensions.map(s => s.length).sum()\n        val class_name_count = class_name.count\n        val class_name_count_upper = class_name_count.filter(c => c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U').count\n        val class_name_count_lower = class_name_count.filter(c => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u').count\n        val class_name_count_length = class_name_count.length\n        val class_name_count_length_upper = class_name_count_length.filter(c => c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U').length\n        val class_name_count_length_lower = class_name_count_length.filter(c => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u').length\n        val class_name_count_length_sum = class_name_count_length.sum()\n        val class_name_count_length_sum_upper = class_name_count_length_sum.filter(c => c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U').sum\n        val class_name_count_length_sum_lower = class_name_count_length_sum.filter(c => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u').sum\n        val class_name_count_length_sum_",
    "        val class_name_lower = class_name.toLowerCase\n        val extensions_lower = extensions.map(e => e.toLowerCase)\n        val class_name_upper = class_name.toUpperCase\n        val extensions_upper = extensions.map(e => e.toUpperCase)\n        val class_name_cap = class_name_lower.replaceAll(\"\\\\W+\", \"\").length\n        val class_name_sm = class_name_lower.replaceAll(\"\\\\W+\", \"\").length\n        val extensions_cap = extensions_lower.map(e => e.replaceAll(\"\\\\W+\", \"\").length).max\n        val extensions_sm = extensions_lower.map(e => e.replaceAll(\"\\\\W+\", \"\").length).max\n        val strength = (class_name_cap - class_name_sm) / (class_name_cap - class_name_sm)\n        val extensions_sorted = extensions_lower.sorted\n        val extension = extensions_sorted.head\n        val strength_sorted = extensions_sorted.map(e => (e.replaceAll(\"\\\\W+\", \"\").length - e.replaceAll(\"\\\\W+\", \"\").length) / (e.replaceAll(\"\\\\W+\", \"\").length - e.replaceAll(\"\\\\W+\", \"\").length))\n        val strength_sorted_sorted = strength_sorted.sorted\n        val strength_sorted_sorted_sorted = strength_sorted_sorted.sorted\n        val strength_sorted_sorted_sorted_sorted = strength_sorted_sorted_sorted.sorted\n        val strength_sorted_sorted_sorted_sorted_sorted = strength_sorted_sorted_sorted_sorted.sorted\n        val strength_sorted_sorted_sorted_sorted_sorted_sorted = strength_sorted_sorted_sorted_sorted_sorted.sorted\n        val strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted = strength_sorted_sorted_sorted_sorted_sorted_sorted.sorted\n        val strength_s",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val c = extension.toUpperCase()\n            val l = extension.toLowerCase()\n            val c_cap = c.length()\n            val l_sm = l.length()\n            cap += c_cap\n            sm += l_sm\n        }\n        val strength = cap - sm\n        val result = class_name + \".\" + extensions.sort().head()\n        return result",
    "        var class_name_upper = class_name.toUpperCase\n        var class_name_lower = class_name.toLowerCase\n        var extensions_upper = extensions.map(x => x.toUpperCase)\n        var extensions_lower = extensions.map(x => x.toLowerCase)\n        var class_name_upper_count = class_name_upper.count\n        var class_name_lower_count = class_name_lower.count\n        var extensions_upper_count = extensions_upper.count\n        var extensions_lower_count = extensions_lower.count\n        var strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        var extension_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        var extension_name = extensions.find(x => x.startsWith(class_name_upper))\n        if (extension_name != None) {\n            return class_name + \".\" + extension_name\n        } else if (extensions.find(x => x.startsWith(class_name_lower)) != None) {\n            return class_name + \".\" + extensions.find(x => x.startsWith(class_name_lower))\n        } else if (extensions.find(x => x.startsWith(class_name_upper)) != None) {\n            return class_name + \".\" + extensions.find(x => x.startsWith(class_name_upper))\n        } else if (extensions.find(x => x.startsWith(class_name_lower)) != None) {\n            return class_name + \".\" + extensions.find(x => x.startsWith(class_name_lower))\n        } else if (extensions.find(x => x.startsWith(class_name_upper)) != None) {\n            return class_name + \".\" + extensions.find(x => x.startsWith(class_name_upper))\n        } else if (extensions.find(x => x.startsWith(class_name_",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(s => s.toUpperCase)\n        val extensions_lower = extensions.map(s => s.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strength_extension = (strength, extensions_strength)\n        val strength_extension_sorted = sort(strength_extension)\n        val strength_extension_sorted_first = strength_extension_sorted[0]\n        val strength_extension_sorted_second = strength_extension_sorted[1]\n        val strength_extension_sorted_first_strength = strength_extension_sorted_first[0]\n        val strength_extension_sorted_first_extension = strength_extension_sorted_first[1]\n        val strength_extension_sorted_second_strength = strength_extension_sorted_second[0]\n        val strength_extension_sorted_second_extension = strength_extension_sorted_second[1]\n        val class_name_extension = class_name + \".\" + strength_extension_sorted_first_extension\n        return class_name_extension",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(s => s.toUpperCase)\n        val extensions_lower = extensions.map(s => s.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extension_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extension_name = (extensions_upper.indexOf(class_name_upper) + 1)\n        val extension_name_lower = (extensions_lower.indexOf(class_name_lower) + 1)\n        val extension_name_strength = (extension_strength - strength) / (extension_strength + strength)\n        val extension_name_strength_index = (extension_name_strength + 1)\n        val extension_name_strength_index_lower = (extension_name_strength_index + 1)\n        val extension_name_strength_index_upper = (extension_name_strength_index_lower + 1)\n        val extension_name_strength_index_upper_lower = (extension_name_strength_index_upper + 1)\n        val extension_name_strength_index_upper_lower_lower = (extension_name_strength_index_upper_lower + 1)\n        val extension_name_strength_index_upper_lower_lower_upper = (extension_name_strength_index_upper_lower_lower + 1)\n        val extension_name_strength_index_upper_lower_lower_upper_lower = (extension_name_strength_index_upper_lower_lower_upper + 1)\n        val extension",
    "        val ext_map = extensions.map(extension -> {\n            val cap = extension.length() - extension.replaceAll(\"[A-Z]\", \"\").length()\n            val sm = extension.length() - extension.replaceAll(\"[a-z]\", \"\").length()\n            return (cap - sm)\n        }).toMap(extension -> extension)\n        val ext_keys = ext_map.keys()\n        val ext_keys_sorted = ext_keys.sort(Comparator.comparingInt(extension -> ext_map(extension)))\n        val ext_key = ext_keys_sorted[0]\n        val ext_val = ext_map(ext_key)\n        val class_name_ext = class_name + \".\" + ext_key\n        return class_name_ext",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(s => s.toUpperCase)\n        val extensions_lower = extensions.map(s => s.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strongest_extension = if (extensions_strength > strength) {\n            extensions.sortBy(s => s)\n            extensions.head\n        } else {\n            class_name\n        }",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val class_name_upper_len = class_name_upper.length\n        val class_name_lower_len = class_name_lower.length\n        val class_name_extensions = extensions.toList\n        val class_name_extensions_len = class_name_extensions.length\n        val class_name_extensions_upper = class_name_extensions.map(extension => extension.toUpperCase)\n        val class_name_extensions_lower = class_name_extensions.map(extension => extension.toLowerCase)\n        val class_name_extensions_len = class_name_extensions.length\n        val class_name_extensions_upper_len = class_name_extensions_upper.length\n        val class_name_extensions_lower_len = class_name_extensions_lower.length\n        val class_name_extensions_upper_len_minus_lower = class_name_extensions_upper_len - class_name_extensions_lower_len\n        val class_name_extensions_upper_len_minus_lower_len = class_name_extensions_upper_len_minus_lower.length\n        val class_name_extensions_upper_len_minus_lower_len_div_class_name_len = class_name_extensions_upper_len_minus_lower_len / class_name_len\n        val class_name_extensions_upper_len_minus_lower_len_div_class_name_len_minus_1 = class_name_extensions_upper_len_minus_lower_len_div_class_name_len - 1\n        val class_name_extensions_upper_len_minus_lower_len_div_class_name_len_minus_1_div_class_name_len = class_name_extensions_upper_len_minus_lower_len_div_class_name_len - 1 / class_name_len\n        val class_name_extensions_upper_",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val extensions_upper_count = extensions_upper.count\n        val extensions_lower_count = extensions_lower.count\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strongest_extension = (\n            extensions.filter(x => x.startsWith(class_name)).sorted(Comparator.comparing(x => x.length()).reversed()).first()\n        )\n        val extension_strength = (\n            extensions.filter(x => x.startsWith(strongest_extension)).sorted(Comparator.comparing(x => x.length()).reversed()).first()\n        )\n        val extension_name = extension_strength.substring(strongest_extension.length())\n        val class_name_plus_extension = class_name + \".\" + extension_name\n        return class_name_plus_extension",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val class_name_upper_len = class_name_upper.length\n        val class_name_lower_len = class_name_lower.length\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val class_name_upper_count_minus_lower_count = class_name_upper_count - class_name_lower_count\n        val class_name_upper_count_minus_lower_count_div_class_name_len = class_name_upper_count_minus_lower_count / class_name_len\n        val class_name_lower_count_div_class_name_len = class_name_lower_count / class_name_len\n        val class_name_upper_count_div_class_name_len = class_name_upper_count / class_name_len\n        val class_name_lower_count_div_class_name_len_minus_1 = class_name_lower_count / class_name_len - 1\n        val class_name_upper_count_div_class_name_len_minus_1 = class_name_upper_count / class_name_len - 1\n        val class_name_lower_count_div_class_name_len_minus_2 = class_name_lower_count / class_name_len - 2\n        val class_name_upper_count_div_class_name_len_minus_2 = class_name_upper_count / class_name_len - 2\n        val class_name_lower_count_div_class_name_len_minus_3 = class_name_lower_count / class_name_len - 3\n        val class_name_upper_count_div_class_name_len_minus_3 = class_name_upper_count / class_name_len - 3\n        val class_name_lower_count_div_class_name_len_minus_4 = class_name",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val class_name_upper_len = class_name_upper.length\n        val class_name_lower_len = class_name_lower.length\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val class_name_len_count = count(class_name_len)\n        val class_name_upper_count_minus_lower_count = class_name_upper_count - class_name_lower_count\n        val class_name_upper_count_minus_lower_count_div_class_name_len = class_name_upper_count_minus_lower_count / class_name_len\n        val class_name_upper_count_minus_lower_count_div_class_name_len_div_2 = class_name_upper_count_minus_lower_count_div_class_name_len / 2\n        val class_name_upper_count_minus_lower_count_div_class_name_len_div_2_minus_1 = class_name_upper_count_minus_lower_count_div_class_name_len_div_2 - 1\n        val class_name_upper_count_minus_lower_count_div_class_name_len_div_2_minus_1_div_2 = class_name_upper_count_minus_lower_count_div_class_name_len_div_2_minus_1 / 2\n        val class_name_upper_count_minus_lower_count_div_class_name_len_div_2_minus_1_div_2_minus_1 = class_name_upper_count_minus_lower_count_div_class_name_len_div_2_minus_1_div_2 - 1\n        val class_name_upper_count_minus_lower_count_div_class_name_len_div_2_minus_1_div_2_minus_1_",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(e => e.toUpperCase)\n        val extensions_lower = extensions.map(e => e.toLowerCase)\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val extensions_upper_count = extensions_upper.count\n        val extensions_lower_count = extensions_lower.count\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strongest_extension = (\n            if (extensions_strength > strength) {\n                class_name + \".\" + extensions_upper.min\n            } else {\n                class_name + \".\" + extensions_lower.min\n            }\n        )\n        return strongest_extension",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strength_extension = (strength, extensions_strength, extensions)\n        val max_strength_extension = max(strength_extension)\n        val max_strength_extension_index = strength_extension.indexOf(max_strength_extension)\n        val max_strength_extension_extension = strength_extension[max_strength_extension_index]\n        val max_strength_extension_extension_name = max_strength_extension_extension._1\n        val max_strength_extension_extension_name_upper = max_strength_extension_extension_name.toUpperCase\n        val max_strength_extension_extension_name_lower = max_strength_extension_extension_name.toLowerCase\n        val max_strength_extension_extension_name_upper_count = count(max_strength_extension_extension_name_upper)\n        val max_strength_extension_extension_name_lower_count = count(max_strength_extension_extension_name_lower)\n        val max_strength_extension_extension_name_upper_count_minus_max_strength_extension_extension_name_lower_count = max_strength_extension_extension",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val extensions_upper_count = extensions_upper.count\n        val extensions_lower_count = extensions_lower.count\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extension_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extension_name = extensions.find(x => x.contains(class_name_upper))\n        val extension_name_upper = extension_name.toUpperCase\n        val extension_name_lower = extension_name.toLowerCase\n        val extension_name_count = extension_name_upper.count\n        val extension_name_strength = (extension_name_count - extension_name_lower.count) / (extension_name_count + extension_name_lower.count)\n        val extension_name_strength_fraction = extension_name_strength / strength\n        val extension_name_strength_fraction_fraction = extension_name_strength_fraction / extension_strength\n        val extension_name_strength_fraction_fraction_fraction = extension_name_strength_fraction_fraction / extension_strength\n        val extension_name_strength_fraction_fraction_fraction_fraction = extension_name_strength_fraction_fraction_fraction / extension_strength\n        val extension_name_strength_fraction_fraction_fraction_fraction_fraction = extension_name_strength_fraction_fraction_fraction_fraction / extension_strength\n        val extension_name_strength_fraction_fraction_fraction_fraction_fraction",
    "        var class_name_upper = class_name.toUpperCase\n        var class_name_lower = class_name.toLowerCase\n        var class_name_upper_count = 0\n        var class_name_lower_count = 0\n        var strongest_extension = \"\"\n        var strongest_extension_strength = 0\n        var extensions_count = 0\n        var extensions_strength = 0\n        var extensions_index = 0\n        var extensions_index_count = 0\n        var extensions_index_strength = 0\n        for (i <- 0 until extensions.size) {\n            extensions_count = 0\n            extensions_strength = 0\n            extensions_index = 0\n            extensions_index_count = 0\n            extensions_index_strength = 0\n            for (j <- 0 until extensions.size) {\n                if (extensions_index == i) {\n                    extensions_index_count = j\n                    extensions_index_strength = extensions_strength\n                }\n                if (extensions[j].toUpperCase == class_name_upper) {\n                    extensions_count += 1\n                    extensions_strength += 1 - (extensions[j].toLowerCase == class_name_lower)\n                }\n            }\n            if (extensions_count > 0) {\n                if (extensions_strength > strongest_extension_strength) {\n                    strongest_extension = class_name + \".\" + extensions[extensions_index]\n                    strongest_extension_strength = extensions_strength\n                }\n            }\n        }\n        if (strongest_extension == \"\") {\n            if (extensions_index_count > 0) {\n                strongest_extension = class_name + \".\" + extensions[extensions_index]\n                strongest_extension_strength = extensions_index_strength\n            }\n        }\n        return strongest_extension",
    "        val ext_names = extensions.map(extension => extension.toLowerCase())\n        val ext_names_set = new HashSet(ext_names)\n        val ext_names_set_sorted = ext_names_set.toSortedSet(Ordering.natural())\n        val ext_names_sorted = ext_names_set_sorted.toList()\n        val ext_names_sorted_sorted = ext_names_sorted.toSortedSet(Ordering.natural())\n        val ext_names_sorted_sorted_sorted = ext_names_sorted_sorted.toList()\n        val ext_names_sorted_sorted_sorted_sorted = ext_names_sorted_sorted_sorted.toSortedSet(Ordering.natural())\n        val ext_names_sorted_sorted_sorted_sorted_sorted = ext_names_sorted_sorted_sorted_sorted.toList()\n        val ext_names_sorted_sorted_sorted_sorted_sorted_sorted = ext_names_sorted_sorted_sorted_sorted_sorted.toSortedSet(Ordering.natural())\n        val ext_names_sorted_sorted_sorted_sorted_sorted_sorted_sorted = ext_names_sorted_sorted_sorted_sorted_sorted_sorted.toList()\n        val ext_names_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = ext_names_sorted_sorted_sorted_sorted_sorted_sorted_sorted.toSortedSet(Ordering.natural())\n        val ext_names_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = ext_names_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.toList()\n        val ext_names_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = ext_names_sorted_sorted",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val class_name_upper_len = class_name_upper.length\n        val class_name_lower_len = class_name_lower.length\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val class_name_upper_count_minus_lower_count = class_name_upper_count - class_name_lower_count\n        val class_name_upper_count_minus_lower_count_div_class_name_len = class_name_upper_count_minus_lower_count / class_name_len\n        val class_name_upper_count_minus_lower_count_div_class_name_len_minus_1 = class_name_upper_count_minus_lower_count_div_class_name_len - 1\n        val class_name_upper_count_minus_lower_count_div_class_name_len_minus_1_div_2 = class_name_upper_count_minus_lower_count_div_class_name_len_minus_1 / 2\n        val class_name_lower_count_div_2 = class_name_lower_count / 2\n        val class_name_lower_count_div_2_minus_1 = class_name_lower_count_div_2 - 1\n        val class_name_lower_count_div_2_minus_1_div_2 = class_name_lower_count_div_2_minus_1 / 2\n        val class_name_lower_count_div_2_minus_1_div_2_minus_1 = class_name_lower_count_div_2_minus_1_div_2 - 1\n        val class_name_lower_count_div_2_minus_1_div_2_minus_1_div_2 = class_name_lower_count_div_2_minus_1_div_2_minus_1 / 2\n        val class",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val cap_c = scala.collection.JavaConversions.asScalaBuffer(extension.toUpperCase()).length()\n            val sm_c = scala.collection.JavaConversions.asScalaBuffer(extension.toLowerCase()).length()\n            cap = cap + cap_c - sm_c\n            sm = sm + sm_c\n        }\n        val strength = (cap - sm) / (cap + sm)\n        if (strength == 0) {\n            return class_name + \".\" + extensions.sort().head()\n        } else {\n            return class_name + \".\" + extensions.sort().head() + \".\" + strength.toString()\n        }",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(e => e.toUpperCase)\n        val extensions_lower = extensions.map(e => e.toLowerCase)\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val extensions_upper_count = extensions_upper.count\n        val extensions_lower_count = extensions_lower.count\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strongest_extension = (extensions_strength > strength) ? extensions_upper_count : extensions_lower_count\n        val extension_name = extensions.find(e => e.equals(strongest_extension))\n        val class_name_extension = class_name + \".\" + extension_name\n        class_name_extension",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(e => e.toUpperCase)\n        val extensions_lower = extensions.map(e => e.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extension_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extension_name = (extensions_upper_count > extensions_lower_count) ? extensions_upper_count - extensions_lower_count : extensions_lower_count - extensions_upper_count\n        val extension_name_upper = extension_name.map(e => e.toUpperCase)\n        val extension_name_lower = extension_name.map(e => e.toLowerCase)\n        val extension_name_count = count(extension_name_upper) + count(extension_name_lower)\n        val extension_name_strength = (extension_name_count - class_name_lower_count) / (extension_name_count + class_name_lower_count)\n        val extension_name_strength_count = count(extension_name_strength)\n        val extension_name_strength_name = (extension_name_strength_count > 0) ? extension_name_strength : \"NONE\"\n        val extension_name_strength_name_upper = extension_name_strength_name.map(e => e.toUpperCase)\n        val extension_name_strength_name_lower = extension_name_strength_name.map(e => e.toLowerCase)\n        val extension_name_strength_name_count = count(ext",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val class_name_upper_len = class_name_upper.length\n        val class_name_lower_len = class_name_lower.length\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val class_name_len_count = class_name_len.count\n        val class_name_upper_count_minus_lower_count = class_name_upper_count - class_name_lower_count\n        val class_name_upper_count_minus_lower_count_div_class_name_len = class_name_upper_count_minus_lower_count / class_name_len\n        val class_name_lower_count_div_class_name_len = class_name_lower_count / class_name_len\n        val class_name_upper_count_div_class_name_len = class_name_upper_count / class_name_len\n        val class_name_lower_count_div_class_name_len_div_2 = class_name_lower_count_div_class_name_len / 2\n        val class_name_upper_count_div_class_name_len_div_2 = class_name_upper_count_div_class_name_len / 2\n        val class_name_lower_count_div_class_name_len_div_2_minus_1 = class_name_lower_count_div_class_name_len_div_2 - 1\n        val class_name_upper_count_div_class_name_len_div_2_minus_1 = class_name_upper_count_div_class_name_len_div_2 - 1\n        val class_name_lower_count_div_class_name_len_div_2_minus_1_div_2 = class_name_lower_count_div_class_name_len_div_2_minus_1 / 2\n        val class",
    "        var strength = 0.0\n        var best_extension = \"\"\n        var best_strength = 0.0\n        for (extension in extensions) {\n            var cap = 0\n            var sm = 0\n            for (c in extension) {\n                if (c.isUpperCase()) {\n                    cap += 1\n                } else {\n                    sm += 1\n                }\n            }\n            strength = (cap - sm) / cap\n            if (strength > best_strength) {\n                best_strength = strength\n                best_extension = extension\n            }\n        }\n        return class_name + \".\" + best_extension",
    "        val ext_names = extensions.map(ext -> ext.toLowerCase())\n        val ext_caps = ext_names.map(ext -> ext.length() - ext.count(\"a\"))\n        val ext_sm = ext_names.map(ext -> ext.length())\n        val ext_strengths = ext_caps.zip(ext_sm).map(tuple -> tuple._1 - tuple._2)\n        ext_strengths.sort(Comparator.comparing(tuple -> tuple._1))\n        ext_strengths.map(tuple -> tuple._1 + \".\" + tuple._2).mkString(\"\")",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val extensions_len = extensions.length\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val extensions_cap = extensions.map(x => x.length - x.count(\"_\"))\n        val extensions_sm = extensions.map(x => x.length - x.count(\"_\"))\n        val class_name_cap = class_name_upper.count\n        val class_name_sm = class_name_lower.count\n        val class_name_cap_sm = class_name_cap - class_name_sm\n        val class_name_cap_sm_f = class_name_cap_sm / class_name_len\n        val class_name_sm_f = class_name_sm / class_name_len\n        val class_name_cap_sm_f_ext = class_name_cap_sm_f / extensions_len\n        val class_name_sm_f_ext = class_name_sm_f / extensions_len\n        val class_name_cap_sm_f_ext_s = class_name_cap_sm_f_ext.toInt\n        val class_name_sm_f_ext_s = class_name_sm_f_ext.toInt\n        val class_name_cap_sm_f_ext_s_ext = class_name_cap_sm_f_ext_s - extensions_sm.toInt\n        val class_name_sm_f_ext_s_ext = class_name_sm_f_ext_s - extensions_sm.toInt\n        val class_name_cap_sm_f_ext_s_ext_ext = class_name_cap_sm_f_ext_s_ext / extensions_len\n        val class_name_sm_f_ext_s_ext_ext = class_name_sm_f_ext_s_ext / extensions_len\n        val class_name_cap_",
    "        val ext_list = extensions.toSeq\n        val ext_map = ext_list.zip(ext_list).toMap\n        val ext_count = ext_map.values.map(x => x.length()).max\n        val ext_count_str = ext_count.toString\n        val ext_count_int = ext_count.toInt\n        val ext_count_float = ext_count.toFloat\n        val ext_count_double = ext_count.toDouble\n        val ext_count_big_int = ext_count.toBigInt\n        val ext_count_big_dec = ext_count.toBigDecimal\n        val ext_count_big_float = ext_count.toBigFloat\n        val ext_count_big_double = ext_count.toBigDouble\n        val ext_count_big_big_int = ext_count.toBigInteger\n        val ext_count_big_big_dec = ext_count.toBigDecimal\n        val ext_count_big_big_float = ext_count.toBigFloat\n        val ext_count_big_big_double = ext_count.toBigDouble\n        val ext_count_big_big_big_int = ext_count.toBigInteger\n        val ext_count_big_big_big_dec = ext_count.toBigDecimal\n        val ext_count_big_big_big_float = ext_count.toBigFloat\n        val ext_count_big_big_big_double = ext_count.toBigDouble\n        val ext_count_big_big_big_big_int = ext_count.toBigInteger\n        val ext_count_big_big_big_big_dec = ext_count.toBigDecimal\n        val ext_count_big_big_big_big_float = ext_count.toBigFloat\n        val ext_count_big_big_big_big_double = ext_count.toBigDouble\n        val ext_count_big_big_big_big_big_int = ext_count.toBigInteger\n        val ext_count_big_big_big_big_big_dec = ext_count.toBigDecimal\n        val ext_count",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val class_name_count = class_name_upper_count + class_name_lower_count\n        val extensions_count = count(extensions)\n        val extensions_strength = (class_name_count - extensions_count) / class_name_count\n        val extensions_strength_count = count(extensions_strength)\n        val extensions_strength_count_1 = extensions_strength_count + 1\n        val extensions_strength_count_2 = extensions_strength_count_1 + 1\n        val extensions_strength_count_3 = extensions_strength_count_2 + 1\n        val extensions_strength_count_4 = extensions_strength_count_3 + 1\n        val extensions_strength_count_5 = extensions_strength_count_4 + 1\n        val extensions_strength_count_6 = extensions_strength_count_5 + 1\n        val extensions_strength_count_7 = extensions_strength_count_6 + 1\n        val extensions_strength_count_8 = extensions_strength_count_7 + 1\n        val extensions_strength_count_9 = extensions_strength_count_8 + 1\n        val extensions_strength_count_10 = extensions_strength_count_9 + 1\n        val extensions_strength_count_11 = extensions_strength_count_10 + 1\n        val extensions_strength_count_12 = extensions_strength_count_11 + 1\n        val extensions_strength_count_13 = extensions_strength_count_12 + 1\n        val extensions_strength_count_14 = extensions_strength_count_13 + 1\n        val extensions_strength_count_15 = extensions_strength_count_14 + 1\n        val extensions_strength_count_16 = extensions_strength_count_15 + 1\n        val extensions_strength_count_17 = extensions_strength_count_16 + 1\n        val extensions_strength_count_18 = extensions_strength_count_17 + 1\n        val extensions_strength_count",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = map(extensions).map(e => e.toUpperCase).toSeq\n        val extensions_lower = map(extensions).map(e => e.toLowerCase).toSeq\n        val class_name_upper_extensions = class_name_upper + extensions_upper\n        val class_name_lower_extensions = class_name_lower + extensions_lower\n        val class_name_extensions = class_name_upper_extensions + class_name_lower_extensions\n        val class_name_extensions_map = class_name_extensions.toMap(e => e)\n        val class_name_extensions_keys = class_name_extensions_map.keys()\n        val class_name_extensions_values = class_name_extensions_map.values()\n        val class_name_extensions_max = class_name_extensions_values.max()\n        val class_name_extensions_max_key = class_name_extensions_keys.max()\n        val class_name_extensions_max_value = class_name_extensions_max_key.get()\n        val class_name_extensions_max_key_string = class_name_extensions_max_key.toString\n        val class_name_extensions_max_value_string = class_name_extensions_max_value.toString\n        val class_name_extensions_max_key_string_length = class_name_extensions_max_key_string.length\n        val class_name_extensions_max_value_string_length = class_name_extensions_max_value_string.length\n        val class_name_extensions_max_key_string_length_minus_value_string_length = class_name_extensions_max_key_string_length - class_name_extensions_max_value_string_length\n        val class_name_extensions_max_key_string_length_minus_value_string_length_div_2 = class_name_extensions",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val class_name_upper_len = class_name_upper.length\n        val class_name_lower_len = class_name_lower.length\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val class_name_len_count = count(class_name_len)\n        val class_name_upper_count_minus_lower_count = class_name_upper_count - class_name_lower_count\n        val class_name_upper_count_minus_lower_count_div_class_name_len = class_name_upper_count_minus_lower_count / class_name_len\n        val class_name_upper_count_minus_lower_count_div_class_name_len_minus_1 = class_name_upper_count_minus_lower_count_div_class_name_len - 1\n        val class_name_upper_count_minus_lower_count_div_class_name_len_minus_1_div_class_name_len = class_name_upper_count_minus_lower_count_div_class_name_len_minus_1 / class_name_len\n        val class_name_upper_count_minus_lower_count_div_class_name_len_minus_1_div_class_name_len_minus_1 = class_name_upper_count_minus_lower_count_div_class_name_len_minus_1 / class_name_len\n        val class_name_upper_count_minus_lower_count_div_class_name_len_minus_1_div_class_name_len_minus_1_div_class_name_len = class_name_upper_count_minus_lower_count_div_class_name_len_minus_1_div_class_name_len_minus_1 / class_name_len\n        val class_name_upper_count_minus_",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val cap_c = scala.collection.JavaConversions.asScalaBuffer(extension).toList().map(s => s.toUpperCase()).toList().length\n            val sm_c = scala.collection.JavaConversions.asScalaBuffer(extension).toList().map(s => s.toLowerCase()).toList().length\n            cap += cap_c - sm_c\n            sm += sm_c\n        }\n        val strength = cap - sm\n        if (strength == 0) {\n            return class_name + \".\" + extensions.sort().head()\n        } else {\n            return class_name + \".\" + extensions.sort().head() + \".\" + strength\n        }",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val class_name_count = class_name_upper_count + class_name_lower_count\n        val extensions_count = count(extensions)\n        val strength = (class_name_count - extensions_count) / class_name_count\n        val extension_name = extensions.sort(Comparator.comparingInt(String::length).reversed()).head\n        val extension_name_upper = extension_name.toUpperCase\n        val extension_name_lower = extension_name.toLowerCase\n        val extension_name_upper_count = count(extension_name_upper)\n        val extension_name_lower_count = count(extension_name_lower)\n        val extension_name_count = extension_name_upper_count + extension_name_lower_count\n        val extension_name_strength = (extension_name_count - class_name_count) / extension_name_count\n        val extension_name_strength_fraction = extension_name_strength / strength\n        val extension_name_strength_fraction_rounded = round(extension_name_strength_fraction)\n        val extension_name_strength_fraction_rounded_str = extension_name_strength_fraction_rounded.toString\n        val extension_name_strength_fraction_rounded_str_str = extension_name_strength_fraction_rounded_str.toString\n        val extension_name_strength_fraction_rounded_str_str_str = extension_name_strength_fraction_rounded_str_str.toString\n        val extension_name_strength_fraction_rounded_str_str_str_str = extension_name_strength_fraction_rounded_str_str_str.toString\n        val extension_name_strength_fraction_rounded_str_str_str_str_str = extension_name_strength_fraction_rounded_str_str_str_str.toString",
    "        val class_name_lower = class_name.toLowerCase\n        val extensions_lower = extensions.map(s => s.toLowerCase)\n        val class_name_upper = class_name.toUpperCase\n        val extensions_upper = extensions.map(s => s.toUpperCase)\n        val class_name_caps = class_name.replaceAll(\"\\\\.\", \"\").replaceAll(\"\\\\s+\", \"\").replaceAll(\"\\\\W\", \"\")\n        val class_name_caps_lower = class_name_caps.toLowerCase\n        val class_name_caps_upper = class_name_caps.toUpperCase\n        val class_name_caps_num = class_name_caps.replaceAll(\"[^A-Z]\", \"\").length\n        val class_name_caps_num_lower = class_name_caps_num.toLowerCase\n        val class_name_caps_num_upper = class_name_caps_num.toUpperCase\n        val class_name_caps_num_lower_num = class_name_caps_num_lower.replaceAll(\"[^0-9]\", \"\").length\n        val class_name_caps_num_upper_num = class_name_caps_num_upper.replaceAll(\"[^0-9]\", \"\").length\n        val class_name_caps_num_lower_num_lower = class_name_caps_num_lower.replaceAll(\"[^a-z]\", \"\").length\n        val class_name_caps_num_upper_num_lower = class_name_caps_num_upper.replaceAll(\"[^a-z]\", \"\").length\n        val class_name_caps_num_lower_num_upper = class_name_caps_num_lower.replaceAll(\"[^A-Z]\", \"\").length\n        val class_name_caps_num_upper_num_upper = class_name_caps_num_upper.replaceAll(\"[^A-Z]\", \"\").length\n        val class_name_caps_num_lower_num_upper_num_lower = class_name_caps_num_lower.replaceAll(\"[^a-zA-Z]\", \"\").length\n",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val extensions_len = extensions.length\n        val extensions_upper = map(extensions).map(extension -> extension.toUpperCase).toList\n        val extensions_lower = map(extensions).map(extension -> extension.toLowerCase).toList\n        val extensions_cap = map(extensions).map(extension -> extension.length).map(extension -> {\n            val cap = 0\n            val sm = 0\n            for (i <- 0 until extension.length) {\n                if (extension[i].isUpperCase()) {\n                    cap += 1\n                } else {\n                    sm += 1\n                }\n            }\n            return cap - sm\n        }).toList\n        val extensions_sm = map(extensions).map(extension -> extension.length).map(extension -> {\n            val sm = 0\n            for (i <- 0 until extension.length) {\n                if (extension[i].isLowerCase()) {\n                    sm += 1\n                }\n            }\n            return sm\n        }).toList\n        val extensions_strength = map(extensions).map(extension -> {\n            val cap = 0\n            val sm = 0\n            for (i <- 0 until extension.length) {\n                if (extension[i].isUpperCase()) {\n                    cap += 1\n                } else {\n                    sm += 1\n                }\n            }\n            return cap - sm\n        }).toList\n        val extensions_strength_max = max(extensions_strength)\n        val extensions_strength_max_index = extensions_strength.indexOf(extensions_strength_max)\n        val extensions_strength_max_extension = extensions[extensions_strength_max_index]\n        val extensions_strength_max_extension_cap = extensions_strength[extensions_strength_max_index]\n        val extensions_strength_max_extension_sm = extensions_strength[extensions_strength_max_index]\n        val extensions_strength_max_extension_cap_minus",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val ext_cap = scala.collection.JavaConversions.asScalaBuffer(extension.toUpperCase()).length()\n            val ext_sm = scala.collection.JavaConversions.asScalaBuffer(extension.toLowerCase()).length()\n            cap = cap + ext_cap\n            sm = sm + ext_sm\n        }\n        val strength = (cap - sm) / (cap + sm)\n        val result = class_name + \".\" + extensions.sort().head()\n        if (strength == 1) {\n            return result\n        } else {\n            return result + \".\" + strength\n        }",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(e => e.toUpperCase)\n        val extensions_lower = extensions.map(e => e.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val class_name_strength = class_name_upper_count - class_name_lower_count\n        val extensions_strength = extensions_upper_count - extensions_lower_count\n        val strength = class_name_strength / extensions_strength\n        val class_name_extension = class_name.substring(class_name.lastIndexOf(\".\") + 1)\n        val extension_name = extensions.find(e => e.startsWith(class_name_extension))\n        val extension_name_strength = count(extension_name.toUpperCase) - count(extension_name.toLowerCase)\n        val extension_name_strength_fraction = extension_name_strength / class_name_strength\n        val extension_name_strength_fraction_rounded = round(extension_name_strength_fraction)\n        val extension_name_strength_fraction_rounded_str = extension_name_strength_fraction_rounded.toString\n        val extension_name_strength_fraction_rounded_str_str = extension_name_strength_fraction_rounded_str.substring(0, extension_name_strength_fraction_rounded_str.length() - 2)\n        val extension_name_strength_fraction_rounded_str_str_str = extension_name_strength_fraction_rounded_str_str + \".\" + extension_name.substring(extension_name.lastIndexOf(\".\") + 1)\n        val extension_name_strength_fraction_rounded_str_str_str_str = extension_name_strength_fraction_rounded_str_str_",
    "        val ext_list = List[String]()\n        for (ext in extensions) {\n            ext_list = ext_list.append(ext)\n        }\n        val ext_list_sorted = ext_list.sort(Comparator.comparingInt(ext -> {\n            val cap = ext.count('A')\n            val sm = ext.count('a')\n            return cap - sm\n        }))\n        val ext_str = ext_list_sorted.head()\n        val class_name_ext = class_name + \".\" + ext_str\n        return class_name_ext",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val class_name_upper_len = class_name_upper.length\n        val class_name_lower_len = class_name_lower.length\n        val class_name_extensions = class_name.split(\"\\\\.\")\n        val class_name_extensions_len = class_name_extensions.length\n        val class_name_extensions_upper = class_name_extensions.map(x => x.toUpperCase)\n        val class_name_extensions_lower = class_name_extensions.map(x => x.toLowerCase)\n        val class_name_extensions_len = class_name_extensions.length\n        val class_name_extensions_upper_len = class_name_extensions_upper.length\n        val class_name_extensions_lower_len = class_name_extensions_lower.length\n        val class_name_extensions_upper_len_minus_class_name_len = class_name_extensions_upper_len - class_name_len\n        val class_name_extensions_lower_len_minus_class_name_len = class_name_extensions_lower_len - class_name_len\n        val class_name_extensions_upper_len_minus_class_name_len_minus_class_name_extensions_len = class_name_extensions_upper_len - class_name_len - class_name_extensions_len\n        val class_name_extensions_lower_len_minus_class_name_len_minus_class_name_extensions_len = class_name_extensions_lower_len - class_name_len - class_name_extensions_len\n        val class_name_extensions_upper_len_minus_class_name_len_minus_class_name_extensions_len_minus_class_name_extensions_len = class_name_extensions_upper_len - class_name_len - class_name_extensions_len - class_name",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(e => e.toUpperCase)\n        val extensions_lower = extensions.map(e => e.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val class_name_strength = class_name_upper_count - class_name_lower_count\n        val extensions_strength = extensions_upper_count - extensions_lower_count\n        val class_name_extension = class_name_strength > 0 ?\n            extensions_strength > 0 ?\n                class_name_upper + \".\" + extensions_upper[0] :\n                extensions_lower[0] :\n            extensions_strength > 0 ?\n                extensions_lower[0] :\n                class_name_lower\n        val class_name_extension_strength = class_name_extension.toUpperCase.count - class_name_extension.toLowerCase.count\n        val class_name_extension_strength_fraction = class_name_extension_strength / class_name_strength\n        val class_name_extension_strength_fraction_rounded = round(class_name_extension_strength_fraction)\n        val class_name_extension_strength_fraction_rounded_str = class_name_extension_strength_fraction_rounded.toString\n        val class_name_extension_strength_fraction_rounded_str_str = class_name_extension_strength_fraction_rounded_str.toString\n        val class_name_extension_strength_fraction_rounded_str_str_str = class_name_extension_strength_fraction_rounded_str_str.toString\n        val class_name_extension_strength_fraction_rounded_str_str_str_str = class_name_extension_strength",
    "        var class_name_upper = class_name.toUpperCase\n        var class_name_lower = class_name.toLowerCase\n        var extensions_upper = extensions.map(x => x.toUpperCase)\n        var extensions_lower = extensions.map(x => x.toLowerCase)\n        var class_name_upper_count = class_name_upper.count\n        var class_name_lower_count = class_name_lower.count\n        var extensions_upper_count = extensions_upper.count\n        var extensions_lower_count = extensions_lower.count\n        var strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        var extension_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        if (extension_strength > strength) {\n            return class_name + \".\" + extensions.sort().head\n        } else {\n            return class_name + \".\" + extensions.sort().head\n        }",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val c = extension.toUpperCase\n            val s = extension.toLowerCase\n            cap += c.length\n            sm += s.length\n        }\n        val strength = cap - sm\n        val best = extensions.sort(Comparator.comparingInt(extension -> strength))\n        val bestExtension = best.head\n        val className = class_name + \".\" + bestExtension\n        return className",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val class_name_count = class_name_upper_count + class_name_lower_count\n        val extension_count = count(extensions)\n        val strength = (class_name_count - extension_count) / class_name_count\n        val extensions_sorted = sort(extensions)\n        val extension = extensions_sorted[extensions_sorted.length - 1]\n        val extension_upper = extension.toUpperCase\n        val extension_lower = extension.toLowerCase\n        val extension_upper_count = count(extension_upper)\n        val extension_lower_count = count(extension_lower)\n        val extension_count = extension_upper_count + extension_lower_count\n        val extension_strength = (extension_count - extension_count) / extension_count\n        val extension_strength_sorted = sort(extension_strength)\n        val extension_strength_sorted_index = extension_strength_sorted.length - 1\n        val extension_strength_sorted_value = extension_strength_sorted[extension_strength_sorted_index]\n        val extension_strength_sorted_value_upper = extension_strength_sorted_value.toUpperCase\n        val extension_strength_sorted_value_lower = extension_strength_sorted_value.toLowerCase\n        val extension_strength_sorted_value_count = count(extension_strength_sorted_value)\n        val extension_strength_sorted_value_count_upper = count(extension_strength_sorted_value_upper)\n        val extension_strength_sorted_value_count_lower = count(extension_strength_sorted_value_lower)\n        val extension_strength_sorted_value_count_total = extension_strength_sorted_value_count_upper + extension_strength_sorted_value_count_lower\n        val extension_strength_",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extension_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extension_name = (extensions_upper.filter(x => x.startsWith(class_name_upper)).head + \".\" +\n            extensions_lower.filter(x => x.startsWith(class_name_lower)).head)\n        if (extension_strength > strength) {\n            extension_name\n        } else if (extension_strength == strength) {\n            extensions_lower.filter(x => x.startsWith(class_name_lower)).head\n        } else {\n            extensions_upper.filter(x => x.startsWith(class_name_upper)).head\n        }",
    "        val class_name_lower = class_name.toLowerCase\n        val extensions_lower = extensions.map(e => e.toLowerCase)\n        val class_name_upper = class_name.toUpperCase\n        val extensions_upper = extensions.map(e => e.toUpperCase)\n        val class_name_caps = class_name_upper.replaceAll(\"[^A-Z]\", \"\")\n        val class_name_sm = class_name_lower.replaceAll(\"[^a-z]\", \"\")\n        val extensions_caps = extensions_upper.map(e => e.replaceAll(\"[^A-Z]\", \"\"))\n        val extensions_sm = extensions_lower.map(e => e.replaceAll(\"[^a-z]\", \"\"))\n        val class_name_caps_sm = class_name_caps + class_name_sm\n        val class_name_sm_caps = class_name_sm + class_name_caps\n        val class_name_sm_caps_sm = class_name_sm_caps + class_name_sm\n        val class_name_sm_caps_sm_caps = class_name_sm_caps_sm + class_name_sm_caps\n        val class_name_sm_caps_sm_caps_sm = class_name_sm_caps_sm_caps + class_name_sm_caps_sm\n        val class_name_sm_caps_sm_caps_sm_caps_sm = class_name_sm_caps_sm_caps_sm + class_name_sm_caps_sm_caps_sm\n        val class_name_sm_caps_sm_caps_sm_caps_sm_caps_sm = class_name_sm_caps_sm_caps_sm_caps_sm + class_name_sm_caps_sm_caps_sm_caps_sm\n        val class_name_sm_caps_sm_caps_sm_caps_sm_caps_sm_caps_sm = class_name_sm_caps_sm_caps_sm_caps_sm_caps_sm + class_name_sm_caps_sm_caps_sm_caps_sm_caps_sm\n        val class_name_sm_",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val class_name_count = class_name_upper_count + class_name_lower_count\n        val class_name_extensions = extensions.map(extension => extension.toUpperCase).toList\n        val class_name_extensions_count = class_name_extensions.count\n        val class_name_extensions_strength = class_name_extensions_count - class_name_extensions.map(extension => extension.count).toList.max\n        val class_name_extensions_strength_count = class_name_extensions_strength.count\n        val class_name_extensions_strength_max = class_name_extensions_strength.max\n        val class_name_extensions_strength_max_count = class_name_extensions_strength_max.count\n        val class_name_extensions_strength_max_max = class_name_extensions_strength_max.max\n        val class_name_extensions_strength_max_max_count = class_name_extensions_strength_max_max.count\n        val class_name_extensions_strength_max_max_max = class_name_extensions_strength_max_max_count.max\n        val class_name_extensions_strength_max_max_max_count = class_name_extensions_strength_max_max_max.count\n        val class_name_extensions_strength_max_max_max_max = class_name_extensions_strength_max_max_max_count.max\n        val class_name_extensions_strength_max_max_max_max_count = class_name_extensions_strength_max_max_max_max.count\n        val class_name_extensions_strength_max_max_max_max_max = class_name_extensions_strength_max_max_max_max_count.max\n        val class_name_",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val ext_cap = scala.collection.JavaConversions.asScalaBuffer(extension).toList().map(s => s.toUpperCase()).toList().length()\n            val ext_sm = scala.collection.JavaConversions.asScalaBuffer(extension).toList().map(s => s.toLowerCase()).toList().length()\n            cap += ext_cap\n            sm += ext_sm\n        }\n        val strength = (cap - sm) / (cap + sm)\n        if (strength == 0) {\n            return class_name + \".\" + extensions.sort().head()\n        } else {\n            return class_name + \".\" + extensions.sort().head() + \".\" + strength.toString()\n        }",
    "        var strength = 0.0\n        var best_extension = \"\"\n        for(extension in extensions) {\n            var cap = 0\n            var sm = 0\n            for(i in 1 to extension.length) {\n                if(extension[i] == '_') {\n                    continue\n                }\n                if(extension[i] == '.') {\n                    break\n                }\n                if(extension[i] == ' ') {\n                    continue\n                }\n                if(extension[i] == '-') {\n                    continue\n                }\n                if(extension[i] == '_') {\n                    continue\n                }\n                if(extension[i] == ' ') {\n                    continue\n                }\n                if(extension[i] == '.') {\n                    continue\n                }\n                if(extension[i] == ' ') {\n                    continue\n                }\n                if(extension[i] == '-') {\n                    continue\n                }\n                if(extension[i] == '_') {\n                    continue\n                }\n                if(extension[i] == ' ') {\n                    continue\n                }\n                if(extension[i] == '.') {\n                    continue\n                }\n                if(extension[i] == ' ') {\n                    continue\n                }\n                if(extension[i] == '-') {\n                    continue\n                }\n                if(extension[i] == '_') {\n                    continue\n                }\n                if(extension[i] == ' ') {\n                    continue\n                }\n                if(extension[i] == '.') {\n                    continue\n                }\n                if(extension[i] == ' ') {\n                    continue\n                }\n                if(extension[i] == '-') {\n                    continue\n                }\n                if(extension[i] == '_') {\n                    continue\n                }\n                if(extension[i] == ' ') {\n                    continue\n                }\n                if(extension[i] == '.') {\n                    continue\n                }\n                if(extension[i] == ' ') {\n                    continue\n                }\n",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val class_name_count = class_name_upper_count + class_name_lower_count\n        val class_name_extensions = extensions.map(extension => extension.toUpperCase).toList\n        val class_name_extensions_count = count(class_name_extensions)\n        val class_name_extensions_strength = class_name_extensions_count - class_name_lower_count\n        val class_name_extensions_strength_fraction = class_name_extensions_strength / class_name_count\n        val class_name_extensions_strength_fraction_rounded = round(class_name_extensions_strength_fraction)\n        val class_name_extensions_strength_fraction_rounded_str = class_name_extensions_strength_fraction_rounded.toString\n        val class_name_extensions_strength_fraction_rounded_str_split = class_name_extensions_strength_fraction_rounded_str.split(\".\")\n        val class_name_extensions_strength_fraction_rounded_str_split_length = class_name_extensions_strength_fraction_rounded_str_split.length\n        val class_name_extensions_strength_fraction_rounded_str_split_length_minus_one = class_name_extensions_strength_fraction_rounded_str_split_length - 1\n        val class_name_extensions_strength_fraction_rounded_str_split_length_minus_two = class_name_extensions_strength_fraction_rounded_str_split_length - 2\n        val class_name_extensions_strength_fraction_rounded_str_split_length_minus_three = class_name_extensions_strength_fraction_rounded_str_split_length - 3\n        val class_name_extensions_strength_fraction_rounded_str_split_length",
    "        val cap = 0\n        val sm = 0\n        for (extension in extensions) {\n            val ext_cap = count(extension, 'A') + count(extension, 'E') + count(extension, 'I') + count(extension, 'O') + count(extension, 'U')\n            val ext_sm = count(extension, 'a') + count(extension, 'e') + count(extension, 'i') + count(extension, 'o') + count(extension, 'u')\n            if (ext_cap - ext_sm > cap - sm) {\n                cap = ext_cap\n                sm = ext_sm\n            }\n        }\n        val ext_name = extensions.sort(Comparator.comparingInt(extension -> count(extension, 'a') + count(extension, 'e') + count(extension, 'i') + count(extension, 'o') + count(extension, 'u'))).head()\n        return class_name + \".\" + ext_name",
    "        val cap = extensions.map(extension => {\n            val cap_count = scala.collection.JavaConversions.asScalaBuffer(extension).toList().map(c => c.toUpperCase()).length()\n            val sm_count = scala.collection.JavaConversions.asScalaBuffer(extension).toList().map(c => c.toLowerCase()).length()\n            return cap_count - sm_count\n        }).max()\n        val ext_name = extensions.filter(extension => {\n            val cap_count = scala.collection.JavaConversions.asScalaBuffer(extension).toList().map(c => c.toUpperCase()).length()\n            val sm_count = scala.collection.JavaConversions.asScalaBuffer(extension).toList().map(c => c.toLowerCase()).length()\n            return cap_count - sm_count == cap\n        }).map(extension => {\n            val cap_count = scala.collection.JavaConversions.asScalaBuffer(extension).toList().map(c => c.toUpperCase()).length()\n            val sm_count = scala.collection.JavaConversions.asScalaBuffer(extension).toList().map(c => c.toLowerCase()).length()\n            return class_name + \".\" + extension + \".\" + (cap_count - sm_count)\n        }).find(extension => extension != \"\")\n        return ext_name",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(s => s.toUpperCase)\n        val extensions_lower = extensions.map(s => s.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extensions_sorted = sort(extensions)\n        val extension_name = extensions_sorted.head\n        val extension_strength = extensions_strength(extension_name)\n        val class_name_sorted = sort(class_name)\n        val class_name_extension = class_name_sorted.head\n        val class_name_extension_strength = extensions_strength(class_name_extension)\n        val class_name_extension_sorted = sort(class_name_extension)\n        val class_name_extension_sorted_head = class_name_extension_sorted.head\n        val class_name_extension_sorted_head_strength = extensions_strength(class_name_extension_sorted_head)\n        val class_name_extension_sorted_head_sorted = sort(class_name_extension_sorted_head)\n        val class_name_extension_sorted_head_sorted_head = class_name_extension_sorted_head_sorted.head\n        val class_name_extension_sorted_head_sorted_head_strength = extensions_strength(class_name_extension_sorted_head_sorted_head)\n        val class",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val extensions_upper_count = extensions_upper.count\n        val extensions_lower_count = extensions_lower.count\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strength_extension = (strength, extensions_strength, extensions)\n        val sorted_extensions = extensions.sortBy[(a, b) => a - b]\n        val strongest_extension = sorted_extensions.head\n        val extension_name = strongest_extension.toString\n        val class_name_extension = class_name + \".\" + extension_name\n        class_name_extension",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val class_name_upper_len = class_name_upper.length\n        val class_name_lower_len = class_name_lower.length\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val class_name_upper_count_minus_lower_count = class_name_upper_count - class_name_lower_count\n        val class_name_upper_count_minus_lower_count_div_class_name_len = class_name_upper_count_minus_lower_count / class_name_len\n        val class_name_lower_count_div_class_name_len = class_name_lower_count / class_name_len\n        val class_name_upper_count_div_class_name_len = class_name_upper_count / class_name_len\n        val class_name_lower_count_div_class_name_len_minus_1 = class_name_lower_count / class_name_len - 1\n        val class_name_lower_count_div_class_name_len_minus_2 = class_name_lower_count / class_name_len - 2\n        val class_name_lower_count_div_class_name_len_minus_3 = class_name_lower_count / class_name_len - 3\n        val class_name_lower_count_div_class_name_len_minus_4 = class_name_lower_count / class_name_len - 4\n        val class_name_lower_count_div_class_name_len_minus_5 = class_name_lower_count / class_name_len - 5\n        val class_name_lower_count_div_class_name_len_minus_6 = class_name_lower_count / class_name_len - 6\n        val class_name_lower_count_div_class_name_len_minus_7 = class_name",
    "        val class_name_array = class_name.split(\"\\\\.\")\n        val class_name_string = class_name_array[0]\n        val class_name_string_array = class_name_string.split(\"_\")\n        val class_name_string_array_length = class_name_string_array.length\n        val class_name_string_array_without_extension = class_name_string_array.slice(0, class_name_string_array_length - 1)\n        val class_name_string_array_without_extension_string = class_name_string_array_without_extension.mkString(\"_\")\n        val class_name_string_array_without_extension_string_array = class_name_string_array_without_extension_string.split(\"_\")\n        val class_name_string_array_without_extension_string_array_length = class_name_string_array_without_extension_string_array.length\n        val class_name_string_array_without_extension_string_array_without_extension = class_name_string_array_without_extension_string_array.slice(0, class_name_string_array_without_extension_string_array_length - 1)\n        val class_name_string_array_without_extension_string_array_without_extension_string = class_name_string_array_without_extension_string_array_without_extension.mkString(\"_\")\n        val class_name_string_array_without_extension_string_array_without_extension_string_array_length = class_name_string_array_without_extension_string_array_without_extension_string.length\n        val class_name_string_array_without_extension_string_array_without_extension_string_array_without_extension = class_name_string_array_without_extension_string_array_without_extension_string.slice(0, class_name_string_array_without_extension_string_array_without_extension_string_array_length - 1)\n        val class_name_string_array_without",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val c = extension.toUpperCase.toCharArray\n            for (c : c) {\n                if (c == 'A') cap += 1\n                if (c == 'a') cap += 1\n                if (c == 'B') sm += 1\n                if (c == 'b') sm += 1\n            }\n        }\n        val strength = (cap - sm) / (cap + sm)\n        if (strength == 0) {\n            val extension = extensions.head\n            return class_name + \".\" + extension\n        } else {\n            val extension = extensions.sort(Comparator.comparingInt(String::length).reversed()).head\n            return class_name + \".\" + extension\n        }",
    "        val ext_list = extensions.toSeq\n        val ext_list_sorted = ext_list.sortBy[String](_.toUpper)\n        val ext_list_sorted_sorted = ext_list_sorted.sortBy[String](_.toLower)\n        val ext_list_sorted_sorted_sorted = ext_list_sorted_sorted.sortBy[String](_.toLower)\n        val ext_list_sorted_sorted_sorted_sorted = ext_list_sorted_sorted_sorted.sortBy[String](_.toLower)\n        val ext_list_sorted_sorted_sorted_sorted_sorted = ext_list_sorted_sorted_sorted_sorted.sortBy[String](_.toLower)\n        val ext_list_sorted_sorted_sorted_sorted_sorted_sorted = ext_list_sorted_sorted_sorted_sorted_sorted.sortBy[String](_.toLower)\n        val ext_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted = ext_list_sorted_sorted_sorted_sorted_sorted_sorted.sortBy[String](_.toLower)\n        val ext_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = ext_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy[String](_.toLower)\n        val ext_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = ext_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy[String](_.toLower)\n        val ext_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = ext_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val class_name_upper_len = class_name_upper.length\n        val class_name_lower_len = class_name_lower.length\n        val class_name_upper_count = 0\n        val class_name_lower_count = 0\n        val class_name_count = 0\n        val extensions_len = extensions.length\n        val extensions_upper = List[String]()\n        val extensions_lower = List[String]()\n        val extensions_count = 0\n        for (extension in extensions) {\n            extensions_count += 1\n            extensions_upper.append(extension.toUpperCase)\n            extensions_lower.append(extension.toLowerCase)\n        }\n        for (i in 0 until class_name_len) {\n            if (class_name_upper[i] == 'A') {\n                class_name_upper_count += 1\n            }\n            if (class_name_lower[i] == 'a') {\n                class_name_lower_count += 1\n            }\n            class_name_count += 1\n        }\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_len - class_name_lower_len)\n        val extension_strength = (extensions_len - extensions_count) / extensions_len\n        val strength_extension = strength - extension_strength\n        val extension_name = \"\"\n        for (i in 0 until extensions_len) {\n            if (extensions_upper[i] == class_name_upper) {\n                extension_name = extensions[i]\n                break\n            }\n        }\n        val result = class_name + \".\" + extension_name\n        if (strength_extension > 0) {\n            result += \".\" + class_name_upper\n        }\n        return result",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strongest_extension = (strength > extensions_strength) ? class_name + \".\" + extensions.sort().head : class_name + \".\" + extensions.sort().tail.head\n        return strongest_extension",
    "        val cap = extensions.map(extension => {\n            val cap_count = scala.collection.JavaConversions.asScalaBuffer(extension.toUpperCase()).length()\n            val sm_count = scala.collection.JavaConversions.asScalaBuffer(extension.toLowerCase()).length()\n            return cap_count - sm_count\n        }).max()\n        val max_extension = extensions.filter(extension => {\n            val strength = scala.collection.JavaConversions.asScalaBuffer(extension.toUpperCase()).length() - scala.collection.JavaConversions.asScalaBuffer(extension.toLowerCase()).length()\n            return strength == cap\n        }).head()\n        return class_name + \".\" + max_extension",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val extensions_len = extensions.length\n        val extensions_upper = map(extensions, _.toUpperCase)\n        val extensions_lower = map(extensions, _.toLowerCase)\n        val extensions_cap = map(extensions, _.count)\n        val extensions_sm = map(extensions, _.count)\n        val extensions_strength = map(extensions, _.toString)\n        val class_name_strength = map(extensions, _.toString)\n        val class_name_strength_len = class_name_strength.length\n        val class_name_strength_cap = map(class_name_strength, _.count)\n        val class_name_strength_sm = map(class_name_strength, _.count)\n        val class_name_strength_strength = map(class_name_strength, _.toString)\n        val class_name_strength_strength_len = class_name_strength_strength.length\n        val class_name_strength_strength_cap = map(class_name_strength_strength, _.count)\n        val class_name_strength_strength_sm = map(class_name_strength_strength, _.count)\n        val class_name_strength_strength_strength = map(class_name_strength_strength, _.toString)\n        val class_name_strength_strength_strength_len = class_name_strength_strength_strength.length\n        val class_name_strength_strength_strength_cap = map(class_name_strength_strength_strength, _.count)\n        val class_name_strength_strength_strength_sm = map(class_name_strength_strength_strength, _.count)\n        val class_name_strength_strength_strength_strength = map(class_name_strength_strength_strength, _.toString)\n        val class_name_strength_strength_strength_strength_len = class_name_strength_strength_strength_strength.length\n        val class_name_strength_",
    "        val class_name_array = class_name.split(\"\\\\.\")\n        val class_name_lower = class_name_array[0]\n        val class_name_upper = class_name_array[1]\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val class_name_strength = class_name_upper_count - class_name_lower_count\n        val extensions_array = extensions.toArray\n        val extensions_lower = extensions_array.map(_.toLower)\n        val extensions_upper = extensions_array.map(_.toUpper)\n        val extensions_lower_count = count(extensions_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_strength = extensions_lower_count - extensions_upper_count\n        val extensions_strength_count = count(extensions_strength)\n        val extensions_strength_array = extensions_strength.toArray\n        val extensions_strength_array_count = count(extensions_strength_array)\n        val extensions_strength_array_max = max(extensions_strength_array)\n        val extensions_strength_count_max = max(extensions_strength_count)\n        val extensions_strength_max = extensions_strength_array_max - extensions_strength_count_max\n        val extensions_strength_max_count = count(extensions_strength_max)\n        val extensions_strength_max_array = extensions_strength_max.toArray\n        val extensions_strength_max_array_count = count(extensions_strength_max_array)\n        val extensions_strength_max_array_max = max(extensions_strength_max_array)\n        val extensions_strength_max_count_max = max(extensions_strength_max_count)\n        val extensions_strength_max_array_max_count = count(extensions_strength_max_array_max)\n        val extensions_strength_max_array_max_count_max = max(extensions_strength_max_array_max_count)\n        val extensions_strength_max_array_max_count_max_count",
    "        var class_name_upper = class_name.toUpperCase\n        var class_name_lower = class_name.toLowerCase\n        var extensions_upper = extensions.map(x => x.toUpperCase)\n        var extensions_lower = extensions.map(x => x.toLowerCase)\n        var class_name_upper_count = class_name_upper.count\n        var class_name_lower_count = class_name_lower.count\n        var extensions_upper_count = extensions_upper.count\n        var extensions_lower_count = extensions_lower.count\n        var strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        var extension_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        var extension_name = extensions.sort(Comparator.comparing(x => x.toLowerCase()))[0]\n        return class_name + \".\" + extension_name + \".\" + extension_strength.toString()",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extension_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extension_name = extensions.find(x => x.startsWith(class_name_upper) && strength > extension_strength)\n        if (extension_name == None) {\n            extension_name = extensions.find(x => x.startsWith(class_name_lower) && strength > extension_strength)\n        }\n        if (extension_name == None) {\n            extension_name = extensions.find(x => x.startsWith(class_name_upper) && strength == extension_strength)\n        }\n        if (extension_name == None) {\n            extension_name = extensions.find(x => x.startsWith(class_name_lower) && strength == extension_strength)\n        }\n        if (extension_name == None) {\n            extension_name = extensions.find(x => x.startsWith(class_name_upper) && strength == extension_strength)\n        }\n        if (extension_name == None) {\n            extension_name = extensions.find(x => x.startsWith(class_name_lower) && strength == extension_strength)\n        }\n        if (extension_name == None) {\n            extension_name = extensions.find(x => x.st",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(e => e.toUpperCase)\n        val extensions_lower = extensions.map(e => e.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extension_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extension_name = extensions.sortBy[String](extension_strength).head\n        val extension_name_upper = extension_name.toUpperCase\n        val extension_name_lower = extension_name.toLowerCase\n        val extension_name_upper_count = count(extension_name_upper)\n        val extension_name_lower_count = count(extension_name_lower)\n        val class_name_upper_extension_count = class_name_upper_count + extension_name_upper_count\n        val class_name_lower_extension_count = class_name_lower_count + extension_name_lower_count\n        val strength_extension = (class_name_upper_extension_count - class_name_lower_extension_count) / (class_name_upper_extension_count + class_name_lower_extension_count)\n        val extension_strength_extension = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extension_name_extension = extensions.sortBy[String](extension_strength_extension).head\n        val extension_name_extension_upper = extension_name_extension.toUpperCase\n",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(e => e.toUpperCase)\n        val extensions_lower = extensions.map(e => e.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strongest_extension = (\n            if (extensions_strength > strength) {\n                extensions.sort()\n                extensions.reverse()\n                extensions.head\n            } else {\n                class_name\n            }\n        )\n        return class_name + \".\" + strongest_extension",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val class_name_upper_len = class_name_upper.length\n        val class_name_lower_len = class_name_lower.length\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val class_name_len_count = class_name_len.count\n        val class_name_upper_count_minus_lower_count = class_name_upper_count - class_name_lower_count\n        val class_name_upper_count_minus_lower_count_div_class_name_len = class_name_upper_count_minus_lower_count / class_name_len_count\n        val class_name_lower_count_div_class_name_len = class_name_lower_count / class_name_len_count\n        val class_name_upper_count_div_class_name_len = class_name_upper_count / class_name_len_count\n        val class_name_lower_count_div_class_name_len_div_2 = class_name_lower_count_div_class_name_len / 2\n        val class_name_upper_count_div_class_name_len_div_2 = class_name_upper_count_div_class_name_len / 2\n        val class_name_lower_count_div_class_name_len_div_2_minus_1 = class_name_lower_count_div_class_name_len_div_2 - 1\n        val class_name_upper_count_div_class_name_len_div_2_minus_1 = class_name_upper_count_div_class_name_len_div_2 - 1\n        val class_name_lower_count_div_class_name_len_div_2_minus_1_div_2 = class_name_lower_count_div_class_name_len_div_2_minus_1",
    "        var class_name_upper = class_name.toUpperCase\n        var class_name_lower = class_name.toLowerCase\n        var class_name_len = class_name.length\n        var class_name_cap = 0\n        var class_name_sm = 0\n        var class_name_extensions = List[String]()\n        for (extension in extensions) {\n            var extension_upper = extension.toUpperCase\n            var extension_lower = extension.toLowerCase\n            var extension_len = extension.length\n            var extension_cap = 0\n            var extension_sm = 0\n            for (i in 1 to extension_len) {\n                if (extension_lower[i] == '_') {\n                    extension_sm = extension_sm + 1\n                } else {\n                    extension_cap = extension_cap + 1\n                }\n            }\n            class_name_extensions = class_name_extensions + extension\n            var strength = (extension_cap - extension_sm) / extension_len\n            if (strength > class_name_extensions.max) {\n                class_name_extensions.max = strength\n                class_name_extensions.min = strength\n                class_name_extensions.max_index = i\n            }\n        }\n        var class_name_extension = class_name_extensions.min_index\n        var class_name_extension_upper = class_name_extension.toUpperCase\n        var class_name_extension_lower = class_name_extension.toLowerCase\n        var class_name_extension_len = class_name_extension.length\n        var class_name_extension_cap = 0\n        var class_name_extension_sm = 0\n        for (i in 1 to class_name_extension_len) {\n            if (class_name_extension_lower[i] == '_') {\n                class_name_extension_sm = class_name_extension_sm + 1\n            } else {\n                class_name_extension_cap = class_name_extension_cap + 1\n            }\n        }\n        var strength = (class_",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(e => e.toUpperCase)\n        val extensions_lower = extensions.map(e => e.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extension_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extension_name = extensions.sortBy[(e => e.length)].head\n        val extension_name_upper = extension_name.toUpperCase\n        val extension_name_lower = extension_name.toLowerCase\n        val extension_name_count = count(extension_name_upper)\n        val extension_name_length = extension_name.length\n        val extension_name_strength = (extension_name_count - extension_name_length) / (extension_name_count + extension_name_length)\n        val extension_name_strength_fraction = extension_name_strength / strength\n        val extension_name_strength_fraction_fraction = extension_name_strength_fraction / extension_strength\n        val extension_name_strength_fraction_fraction_fraction = extension_name_strength_fraction_fraction / extension_strength\n        val extension_name_strength_fraction_fraction_fraction_fraction = extension_name_strength_fraction_fraction_fraction / extension_strength\n        val extension_name_strength_fraction_fraction_fraction_fraction_fraction = extension_name_strength_fraction_fraction_fraction_fraction / extension_strength\n        val extension_name_strength_",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val class_name_upper_len = class_name_upper.length\n        val class_name_lower_len = class_name_lower.length\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val class_name_upper_count_minus_lower_count = class_name_upper_count - class_name_lower_count\n        val class_name_upper_count_minus_lower_count_div_class_name_len = class_name_upper_count_minus_lower_count / class_name_len\n        val class_name_upper_count_minus_lower_count_div_class_name_len_div_2 = class_name_upper_count_minus_lower_count_div_class_name_len / 2\n        val class_name_upper_count_minus_lower_count_div_class_name_len_div_2_minus_1 = class_name_upper_count_minus_lower_count_div_class_name_len_div_2 - 1\n        val class_name_upper_count_minus_lower_count_div_class_name_len_div_2_minus_1_times_class_name_len = class_name_upper_count_minus_lower_count_div_class_name_len_div_2_minus_1 * class_name_len\n        val class_name_upper_count_minus_lower_count_div_class_name_len_div_2_minus_1_times_class_name_len_div_2 = class_name_upper_count_minus_lower_count_div_class_name_len_div_2_minus_1 * class_name_len_div_2\n        val class_name_lower_count_div_class_name_len = class_name_lower_count / class_name_len\n        val class_name_lower_count_div",
    "        var result = \"\"\n        var strength = 0\n        var max_strength = 0\n        var max_extension = \"\"\n        for(extension in extensions) {\n            var cap = 0\n            var sm = 0\n            for(i in 1 to extension.length) {\n                if(extension[i] == '_') {\n                    continue\n                }\n                if(extension[i] == ' ') {\n                    continue\n                }\n                if(extension[i] == '.') {\n                    continue\n                }\n                if(extension[i] == '-') {\n                    continue\n                }\n                if(extension[i] == '*') {\n                    continue\n                }\n                if(extension[i] == ':') {\n                    continue\n                }\n                if(extension[i] == '(') {\n                    continue\n                }\n                if(extension[i] == ')') {\n                    continue\n                }\n                if(extension[i] == '\\'') {\n                    continue\n                }\n                if(extension[i] == '!') {\n                    continue\n                }\n                if(extension[i] == '@') {\n                    continue\n                }\n                if(extension[i] == '#') {\n                    continue\n                }\n                if(extension[i] == '$') {\n                    continue\n                }\n                if(extension[i] == '%') {\n                    continue\n                }\n                if(extension[i] == '^') {\n                    continue\n                }\n                if(extension[i] == '&') {\n                    continue\n                }\n                if(extension[i] == '*') {\n                    continue\n                }\n                if(extension[i] == '+') {\n                    continue\n                }\n                if(extension[i] == '=') {\n                    continue\n                }\n                if(extension[i] == '|') {\n                    continue\n                }\n                if(extension[i] == '<') {\n                    continue\n                }\n                if(extension[i] == '>') {\n                    continue\n                }\n                if(extension[i",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(extension -> extension.toUpperCase)\n        val extensions_lower = extensions.map(extension -> extension.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (extensions_upper_count - extensions_lower_count)\n        val extension_name = extensions.find(extension -> strength == extension.length())\n        val class_name_extension = class_name + \".\" + extension_name\n        class_name_extension",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val c = scala.collection.JavaConversions.asScalaBuffer(extension).toList.toString\n            val c_upper = c.replaceAll(\"[a-z]\", \"A\").replaceAll(\"[A-Z]\", \"\")\n            val c_lower = c.replaceAll(\"[A-Z]\", \"a\").replaceAll(\"[a-z]\", \"\")\n            val cap_upper = c_upper.length()\n            val cap_lower = c_lower.length()\n            val sm_upper = c.length() - c_upper.length()\n            val sm_lower = c.length() - c_lower.length()\n            cap = cap + cap_upper - cap_lower\n            sm = sm + sm_upper - sm_lower\n        }\n        val strength = cap - sm\n        if (strength == 0) {\n            return class_name\n        } else {\n            return class_name + \".\" + extensions.sort().takeWhile(extension -> strength == strength).toString\n        }",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val cap_c = scala.collection.JavaConversions.asScalaBuffer(extension).toList().map(s => s.toUpperCase()).toList().length\n            val sm_c = scala.collection.JavaConversions.asScalaBuffer(extension).toList().map(s => s.toLowerCase()).toList().length\n            cap += cap_c - sm_c\n            sm += sm_c\n        }\n        val strength = cap - sm\n        val extension = extensions.sort((a, b) => {\n            val a_strength = scala.collection.JavaConversions.asScalaBuffer(a).toList().map(s => s.toUpperCase()).toList().length\n            val b_strength = scala.collection.JavaConversions.asScalaBuffer(b).toList().map(s => s.toUpperCase()).toList().length\n            return a_strength - b_strength\n        }).head()\n        val class_name_extension = class_name + \".\" + extension\n        return class_name_extension",
    "        val class_name_array = class_name.split(\"\\\\.\")\n        val class_name_length = class_name_array.length\n        val class_name_string = class_name_array[class_name_length - 1]\n        val class_name_string_length = class_name_string.length\n        val class_name_string_upper = class_name_string.toUpperCase()\n        val class_name_string_lower = class_name_string.toLowerCase()\n        val class_name_string_upper_length = class_name_string_upper.length\n        val class_name_string_lower_length = class_name_string_lower.length\n        val class_name_string_upper_count = class_name_string_upper.count\n        val class_name_string_lower_count = class_name_string_lower.count\n        val class_name_string_upper_count_minus_lower_count = class_name_string_upper_count - class_name_string_lower_count\n        val class_name_string_upper_count_minus_lower_count_divided_by_string_length = class_name_string_upper_count_minus_lower_count / class_name_string_length\n        val class_name_string_upper_count_minus_lower_count_divided_by_string_length_minus_1 = class_name_string_upper_count_minus_lower_count_divided_by_string_length - 1\n        val class_name_string_upper_count_minus_lower_count_divided_by_string_length_minus_1_divided_by_string_length = class_name_string_upper_count_minus_lower_count_divided_by_string_length_minus_1 / class_name_string_length\n        val class_name_string_upper_count_minus_lower_count_divided_by_string_length_minus_1_divided_by_string_length_minus_1 = class_name_string_upper_count_minus_lower_count_divided_by_string_length_minus_1_divided_by_string_length - 1",
    "        val class_name_lower = class_name.toLowerCase\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val class_name_upper = class_name.toUpperCase\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val class_name_cap = class_name_lower.replaceAll(\"\\\\W+\", \"\")\n        val extensions_cap = extensions_lower.replaceAll(\"\\\\W+\", \"\")\n        val class_name_sm = class_name_lower.replaceAll(\"\\\\W+\", \"\")\n        val extensions_sm = extensions_lower.replaceAll(\"\\\\W+\", \"\")\n        val class_name_sm_cap = class_name_sm.replaceAll(\"\\\\W+\", \"\")\n        val extensions_sm_cap = extensions_sm.replaceAll(\"\\\\W+\", \"\")\n        val class_name_sm_cap_num = class_name_sm_cap.replaceAll(\"\\\\W+\", \"\")\n        val extensions_sm_cap_num = extensions_sm_cap.replaceAll(\"\\\\W+\", \"\")\n        val class_name_sm_cap_num_num = class_name_sm_cap_num.replaceAll(\"\\\\W+\", \"\")\n        val extensions_sm_cap_num_num = extensions_sm_cap_num.replaceAll(\"\\\\W+\", \"\")\n        val class_name_sm_cap_num_num_num = class_name_sm_cap_num_num.replaceAll(\"\\\\W+\", \"\")\n        val extensions_sm_cap_num_num_num = extensions_sm_cap_num_num.replaceAll(\"\\\\W+\", \"\")\n        val class_name_sm_cap_num_num_num_num = class_name_sm_cap_num_num_num.replaceAll(\"\\\\W+\", \"\")\n        val extensions_sm_cap_num_num_num_num = extensions_sm_cap_num_num_num.replaceAll(\"\\\\W+\", \"\")\n        val class_name_sm_cap_num_num_num_num_num = class_name_sm_cap_num_num_",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val extensions_upper_count = extensions_upper.count\n        val extensions_lower_count = extensions_lower.count\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extension_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extension_name = extensions.sort(Comparator.comparingInt(x => x.length()))[0]\n        val extension_name_upper = extension_name.toUpperCase\n        val extension_name_lower = extension_name.toLowerCase\n        val extension_name_upper_count = extension_name_upper.count\n        val extension_name_lower_count = extension_name_lower.count\n        val extension_name_strength = (extension_name_upper_count - extension_name_lower_count) / (extension_name_upper_count + extension_name_lower_count)\n        val extension_name_strength_fraction = extension_name_strength / strength\n        val extension_name_strength_fraction_rounded = round(extension_name_strength_fraction)\n        val extension_name_strength_fraction_rounded_str = extension_name_strength_fraction_rounded.toString\n        val extension_name_strength_fraction_rounded_str_str = extension_name_strength_fraction_rounded_str.toString\n        val extension_name_strength_fraction_rounded_str_str_str = extension_name_strength_fraction_rounded_str_str.toString\n        val extension_name_strength_fraction_rounded_",
    "        var strength = 0.0\n        var best_extension = \"\"\n        for(extension in extensions) {\n            var cap = 0\n            var sm = 0\n            for(c in extension) {\n                if(c.isUpper()) {\n                    cap += 1\n                } else {\n                    sm += 1\n                }\n            }\n            strength += (cap - sm)\n            if(strength > best_extension.length()) {\n                best_extension = extension\n            }\n        }\n        return class_name + \".\" + best_extension",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val class_name_upper_len = class_name_upper.length\n        val class_name_lower_len = class_name_lower.length\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val class_name_len_count = count(class_name_len)\n        val class_name_upper_count_minus_lower_count = class_name_upper_count - class_name_lower_count\n        val class_name_upper_count_minus_lower_count_div_class_name_len = class_name_upper_count_minus_lower_count / class_name_len\n        val class_name_lower_count_div_class_name_len = class_name_lower_count / class_name_len\n        val class_name_upper_count_div_class_name_len = class_name_upper_count / class_name_len\n        val class_name_lower_count_div_class_name_len_div_2 = class_name_lower_count_div_class_name_len / 2\n        val class_name_upper_count_div_class_name_len_div_2 = class_name_upper_count_div_class_name_len / 2\n        val class_name_lower_count_div_class_name_len_div_2_minus_1 = class_name_lower_count_div_class_name_len_div_2 - 1\n        val class_name_upper_count_div_class_name_len_div_2_minus_1 = class_name_upper_count_div_class_name_len_div_2 - 1\n        val class_name_lower_count_div_class_name_len_div_2_minus_1_div_2 = class_name_lower_count_div_class_name_len_div_2_minus_1 / 2\n",
    "        val ext_list = extensions.toList\n        val ext_set = ext_list.toSet\n        val ext_map = ext_list.toMap(String.toUpper)\n        val ext_count = ext_set.size\n        val class_count = class_name.length\n        val strength = (ext_count - ext_map.size) / (double)(class_count)\n        val ext_name = ext_list.head\n        val ext_name_upper = ext_name.toUpper\n        val ext_name_lower = ext_name.toLower\n        val ext_name_count = ext_name.length\n        val ext_name_upper_count = ext_name_upper.length\n        val ext_name_lower_count = ext_name_lower.length\n        val ext_name_count_diff = ext_name_count - ext_name_upper_count - ext_name_lower_count\n        val ext_name_diff = ext_name_count_diff / (double)(ext_name_count)\n        val ext_name_diff_abs = Math.abs(ext_name_diff)\n        val ext_name_diff_abs_max = ext_name_diff_abs.max\n        val ext_name_diff_abs_min = ext_name_diff_abs.min\n        val ext_name_diff_abs_avg = ext_name_diff_abs.avg\n        val ext_name_diff_abs_sum = ext_name_diff_abs.sum\n        val ext_name_diff_abs_count = ext_name_diff_abs.count\n        val ext_name_diff_abs_count_max = ext_name_diff_abs.count.max\n        val ext_name_diff_abs_count_min = ext_name_diff_abs.count.min\n        val ext_name_diff_abs_count_avg = ext_name_diff_abs.count.avg\n        val ext_name_diff_abs_count_sum = ext_name_diff_abs.count.sum\n        val ext_name_diff_abs_count_count = ext_name_diff_abs.count.count\n        val ext_",
    "        var strength = 0.0\n        var best_extension = \"\"\n        for (extension in extensions) {\n            var cap = 0\n            var sm = 0\n            for (c in extension) {\n                if (c.isUpper()) {\n                    cap += 1\n                } else {\n                    sm += 1\n                }\n            }\n            strength = (cap - sm) / cap\n            if (strength > best_extension_strength) {\n                best_extension = extension\n                best_extension_strength = strength\n            }\n        }\n        return class_name + \".\" + best_extension",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val cap_c = scala.collection.JavaConversions.asScalaBuffer(extension).toList().map(s => s.charAt(0)).max()\n            val sm_c = scala.collection.JavaConversions.asScalaBuffer(extension).toList().map(s => s.charAt(1)).max()\n            cap = cap + (cap_c - sm_c)\n            sm = sm + (sm_c - cap_c)\n        }\n        val strength = cap - sm\n        val extension = extensions.sort(Comparator.comparingInt(s => strength)).head()\n        val class_name_extension = class_name + \".\" + extension\n        return class_name_extension",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(s => s.toUpperCase).toList\n        val extensions_lower = extensions.map(s => s.toLowerCase).toList\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val extensions_upper_count = extensions_upper.count\n        val extensions_lower_count = extensions_lower.count\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strongest_extension = (class_name_upper + \".\" + extensions_upper.sort(Comparator.comparingInt(i => i.length())).head)\n        if (extensions_strength > strength) {\n            strongest_extension\n        } else if (extensions_strength == strength) {\n            if (extensions_upper.sort(Comparator.comparingInt(i => i.length())).head < extensions_lower.sort(Comparator.comparingInt(i => i.length())).head) {\n                strongest_extension\n            } else {\n                strongest_extension\n            }\n        } else {\n            strongest_extension\n        }",
    "        var strength = 0.0\n        var best_extension = \"\"\n        for (extension in extensions) {\n            var cap = 0\n            var sm = 0\n            for (c in extension) {\n                if (c.isUpperCase()) {\n                    cap += 1\n                } else {\n                    sm += 1\n                }\n            }\n            strength += (cap - sm)\n            if (strength > best_extension.length()) {\n                best_extension = extension\n            }\n        }\n        return class_name + \".\" + best_extension",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(e => e.toUpperCase)\n        val extensions_lower = extensions.map(e => e.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strongest_extension = if (extensions_strength > strength) {\n            extensions.sort\n            extensions.head\n        } else {\n            class_name\n        }\n        StrongestExtension(class_name, extensions)",
    "        val cap = 0\n        val sm = 0\n        for(extension : extensions) {\n            val cap_c = scala.collection.JavaConversions.asScalaBuffer(extension).toList().map(s => s.charAt(0)).max()\n            val sm_c = scala.collection.JavaConversions.asScalaBuffer(extension).toList().map(s => s.charAt(1)).max()\n            cap = cap + (cap_c - sm_c)\n            sm = sm + (sm_c - cap_c)\n        }\n        val cap_c = scala.collection.JavaConversions.asScalaBuffer(class_name).toList().map(s => s.charAt(0)).max()\n        val sm_c = scala.collection.JavaConversions.asScalaBuffer(class_name).toList().map(s => s.charAt(1)).max()\n        cap = cap + (cap_c - sm_c)\n        sm = sm + (sm_c - cap_c)\n        val cap_s = cap.toString()\n        val sm_s = sm.toString()\n        val cap_c_s = cap_s.replaceAll(\"\\\\d\", \"\")\n        val sm_c_s = sm_s.replaceAll(\"\\\\d\", \"\")\n        val cap_c_s_s = cap_c_s.replaceAll(\"\\\\D\", \"\")\n        val sm_c_s_s = sm_c_s.replaceAll(\"\\\\D\", \"\")\n        val cap_c_s_s_s = cap_c_s_s.replaceAll(\"\\\\D\", \"\")\n        val sm_c_s_s_s = sm_c_s_s.replaceAll(\"\\\\D\", \"\")\n        val cap_c_s_s_s_s = cap_c_s_s_s.replaceAll(\"\\\\D\", \"\")\n        val sm_c_s_s_s_s = sm_c_s_s_s.replaceAll(\"\\\\D\", \"\")\n        val cap_c_s_s_s_s_s = cap_c_s_s_s",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val extensions_len = extensions.length\n        val extensions_upper = map(extensions).map(extension => extension.toUpperCase)\n        val extensions_lower = map(extensions).map(extension => extension.toLowerCase)\n        val extensions_cap = map(extensions).map(extension => count(extension, 'A') + count(extension, 'E') + count(extension, 'I') + count(extension, 'O') + count(extension, 'U'))\n        val extensions_sm = map(extensions).map(extension => count(extension, 'a') + count(extension, 'e') + count(extension, 'i') + count(extension, 'o') + count(extension, 'u'))\n        val extensions_strength = (extensions_cap - extensions_sm) / (extensions_len - 1)\n        val extensions_strength_sort = sort(extensions_strength)\n        val extensions_strength_sort_index = indexOf(extensions_strength_sort, extensions_strength)\n        val extensions_sort = sort(extensions)\n        val extensions_sort_index = indexOf(extensions_sort, extensions)\n        val extensions_strongest = extensions_strength_sort_index + 1\n        val extensions_strongest_sort_index = indexOf(extensions_strength_sort, extensions_strength_sort_index)\n        val extensions_strongest_sort = extensions_strength_sort[extensions_strongest_sort_index]\n        val extensions_strongest_sort_extension = extensions_strongest_sort.substring(extensions_strongest_sort.indexOf('.') + 1)\n        val class_name_extension = class_name + \".\" + extensions_strongest_sort_extension\n        class_name_extension",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val extensions_upper_count = extensions_upper.count\n        val extensions_lower_count = extensions_lower.count\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strength_extension = (strength, extensions_strength)\n        val strength_extension_tuple = strength_extension.toTuple\n        val strength_extension_tuple_array = strength_extension_tuple.toArray\n        val strength_extension_tuple_array_0 = strength_extension_tuple_array[0]\n        val strength_extension_tuple_array_1 = strength_extension_tuple_array[1]\n        val strength_extension_tuple_array_0_0 = strength_extension_tuple_array_0[0]\n        val strength_extension_tuple_array_0_1 = strength_extension_tuple_array_0[1]\n        val strength_extension_tuple_array_1_0 = strength_extension_tuple_array_1[0]\n        val strength_extension_tuple_array_1_1 = strength_extension_tuple_array_1[1]\n        val strength_extension_tuple_array_0_0_0 = strength_extension_tuple_array_0_0[0]\n        val strength_extension_tuple_array_0_0_1 = strength_extension_tuple_array_0_",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strongest_extension = (\n            if (extensions_strength > strength) {\n                extensions_strength\n            } else {\n                strength\n            }\n        )\n        val extension_name = extensions.filter(x => x.contains(strongest_extension)).head\n        val class_name_with_extension = class_name + \".\" + extension_name\n        class_name_with_extension",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val class_name_upper_count = class_name_upper.count\n        val class_name_lower_count = class_name_lower.count\n        val extensions_upper_count = extensions_upper.count\n        val extensions_lower_count = extensions_lower.count\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extension_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extension_name = extensions.sortBy[(x => x.length).max()].head\n        val extension_name_upper = extension_name.toUpperCase\n        val extension_name_lower = extension_name.toLowerCase\n        val extension_name_count = extension_name.count\n        val extension_name_upper_count = extension_name_upper.count\n        val extension_name_lower_count = extension_name_lower.count\n        val extension_name_strength = (extension_name_upper_count - extension_name_lower_count) / (extension_name_upper_count + extension_name_lower_count)\n        val extension_name_strength_fraction = extension_name_strength / strength\n        val extension_name_strength_fraction_rounded = round(extension_name_strength_fraction)\n        val extension_name_strength_fraction_rounded_str = extension_name_strength_fraction_rounded.toString\n        val extension_name_strength_fraction_rounded_str_str = extension_name_strength_fraction_rounded_str.toString\n        val extension_name_strength_fraction_rounded_str_str_str = extension_name_strength_fraction_rounded_str_str.toString\n        val extension_",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(s => s.toUpperCase)\n        val extensions_lower = extensions.map(s => s.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strongest_extension = (class_name_upper + \".\" + extensions_upper.sort(Comparator.comparingInt(s => strength(s))).head)\n        return strongest_extension",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val cap_c = scala.collection.JavaConversions.asScalaBuffer(extension.toUpperCase()).length()\n            val sm_c = scala.collection.JavaConversions.asScalaBuffer(extension.toLowerCase()).length()\n            cap += cap_c - sm_c\n            sm += sm_c\n        }\n        val strength = cap - sm\n        val extension = extensions.sort(Comparator.comparingInt(extension -> strength)).head()\n        val class_name_extension = class_name + \".\" + extension\n        return class_name_extension",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val ext_cap = scala.collection.JavaConversions.asScalaBuffer(extension.toUpperCase()).length()\n            val ext_sm = scala.collection.JavaConversions.asScalaBuffer(extension.toLowerCase()).length()\n            cap += ext_cap\n            sm += ext_sm\n        }\n        val strength = (cap - sm) / cap\n        val extension = extensions.sort(Comparator.comparing(extension -> strength)).head()\n        return class_name + \".\" + extension",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val ext_cap = count(extension, 'A') + count(extension, 'E') + count(extension, 'I') + count(extension, 'O') + count(extension, 'U')\n            val ext_sm = count(extension, 'a') + count(extension, 'e') + count(extension, 'i') + count(extension, 'o') + count(extension, 'u')\n            val strength = (ext_cap - ext_sm) / ext_cap\n            if (strength > cap) {\n                cap = strength\n                sm = ext_sm\n            }\n        }\n        val ext = extensions.filter(extension -> strength == cap).head()\n        return class_name + \".\" + ext",
    "        val ext_names = extensions.toSeq\n        val ext_strength = ext_names.map(ext_name => {\n            val cap = ext_name.length\n            val sm = ext_name.toLowerCase.length\n            val strength = (cap - sm) / cap\n            return strength\n        }).max\n        val ext_name = ext_names.max\n        val strength = ext_strength.get\n        val ext_name_str = ext_name.toString\n        val class_name_str = class_name.toString\n        val result = class_name_str + \".\" + ext_name_str\n        return result",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val class_name_upper_len = class_name_upper.length\n        val class_name_lower_len = class_name_lower.length\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val class_name_upper_count_minus_lower_count = class_name_upper_count - class_name_lower_count\n        val class_name_upper_count_minus_lower_count_div_class_name_len = class_name_upper_count_minus_lower_count / class_name_len\n        val class_name_upper_count_minus_lower_count_div_class_name_len_minus_1 = class_name_upper_count_minus_lower_count_div_class_name_len - 1\n        val class_name_upper_count_minus_lower_count_div_class_name_len_minus_1_div_class_name_len = class_name_upper_count_minus_lower_count_div_class_name_len - 1 / class_name_len\n        val class_name_upper_count_minus_lower_count_div_class_name_len_minus_1_div_class_name_len_minus_1 = class_name_upper_count_minus_lower_count_div_class_name_len_minus_1 - 1 / class_name_len - 1\n        val class_name_upper_count_minus_lower_count_div_class_name_len_minus_1_div_class_name_len_minus_1_div_class_name_len = class_name_upper_count_minus_lower_count_div_class_name_len_minus_1_div_class_name_len - 1 / class_name_len - 1 / class_name_len - 1\n        val class_name_upper_count_minus_lower_count_div_class_name",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strongest_extension =\n            extensions.filter(x => x.startsWith(class_name)).sorted(Comparator.comparing(x => x.length()))[0]\n        val extension_name = strongest_extension.substring(class_name.length() + 1)\n        val extension_name_upper = extension_name.toUpperCase\n        val extension_name_lower = extension_name.toLowerCase\n        val extension_name_upper_count = count(extension_name_upper)\n        val extension_name_lower_count = count(extension_name_lower)\n        val strength_of_extension = (extension_name_upper_count - extension_name_lower_count) / (extension_name_upper_count + extension_name_lower_count)\n        val extension_name_strength = strength_of_extension\n        val result = class_name + \".\" + extension_name + \".\" + extension_name_strength + \".\" + extension_name_strength\n        return result",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val class_name_count = class_name_upper_count + class_name_lower_count\n        val extensions_count = count(extensions)\n        val strength = (class_name_count - extensions_count) / class_name_count\n        val extensions_upper = filter(extensions, lambda extension : extension.toUpperCase != \"\")\n        val extensions_lower = filter(extensions, lambda extension : extension.toLowerCase != \"\")\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val extensions_count = extensions_upper_count + extensions_lower_count\n        val extensions_strength = (extensions_count - extensions_count) / extensions_count\n        val strongest_extension = (\n            if (extensions_strength > strength) {\n                extensions_upper_count > extensions_lower_count ?\n                    extensions_upper :\n                    extensions_lower\n            } else {\n                strength > extensions_strength ?\n                    extensions_upper :\n                    extensions_lower\n            }\n        )\n        val extension_name = strongest_extension.toUpperCase\n        val class_name_extension = class_name + \".\" + extension_name\n        class_name_extension",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(s => s.toUpperCase)\n        val extensions_lower = extensions.map(s => s.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strongest_extension = (\n            if (extensions_strength > strength) {\n                extensions_strength\n            } else {\n                strength\n            }\n        )\n        val extension_name = extensions.filter(s => s.contains(strongest_extension)).head\n        val class_name_extension = class_name + \".\" + extension_name\n        class_name_extension",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val class_name_len = class_name.length\n        val class_name_upper_len = class_name_upper.length\n        val class_name_lower_len = class_name_lower.length\n        val class_name_extensions = extensions.toList\n        val class_name_extensions_len = class_name_extensions.length\n        val class_name_extensions_upper = class_name_extensions.map(s => s.toUpperCase)\n        val class_name_extensions_lower = class_name_extensions.map(s => s.toLowerCase)\n        val class_name_extensions_len = class_name_extensions.length\n        val class_name_extensions_upper_len = class_name_extensions_upper.length\n        val class_name_extensions_lower_len = class_name_extensions_lower.length\n        val class_name_extensions_upper_len_minus_lower_len = class_name_extensions_upper_len - class_name_extensions_lower_len\n        val class_name_extensions_upper_len_minus_lower_len_minus_1 = class_name_extensions_upper_len_minus_lower_len - 1\n        val class_name_extensions_upper_len_minus_lower_len_minus_1_div_class_name_len = class_name_extensions_upper_len_minus_lower_len_minus_1 / class_name_len\n        val class_name_extensions_upper_len_minus_lower_len_minus_1_div_class_name_len_minus_1 = class_name_extensions_upper_len_minus_lower_len_minus_1 / (class_name_len - 1)\n        val class_name_extensions_upper_len_minus_lower_len_minus_1_div_class_name_len_minus_1_times_class_name_len = class_name_extensions_upper_len_minus_lower_len_minus",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val cap_c = count(extension, 'A')\n            val sm_c = count(extension, 'a')\n            cap = cap + cap_c - sm_c\n            sm = sm + sm_c\n        }\n        val strength = cap - sm\n        val best_extension = extensions.sort().head()\n        val best_extension_name = best_extension.split(\".\")\n        val class_name_extension = class_name + \".\" + best_extension_name[1]\n        if (strength == 0) {\n            return class_name_extension\n        } else {\n            return class_name_extension + \".\" + best_extension\n        }",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(s => s.toUpperCase)\n        val extensions_lower = extensions.map(s => s.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strongest_extension = (class_name_upper + \".\" + extensions_upper.sort(comparing(String::length)).head)\n        if (extensions_strength > strength) {\n            strongest_extension\n        } else if (extensions_strength == strength) {\n            if (extensions_lower.sort(comparing(String::length)).head < strongest_extension) {\n                strongest_extension\n            }\n        }",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(s => s.toUpperCase)\n        val extensions_lower = extensions.map(s => s.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extension_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extension_name = (extensions_upper.sortBy(s => s.length()).head).toString\n        val class_name_extension = class_name + \".\" + extension_name\n        if (strength > extension_strength) {\n            class_name_extension\n        } else if (strength == extension_strength) {\n            extensions_upper.sortBy(s => s.length()).head\n        } else {\n            extensions_lower.sortBy(s => s.length()).head\n        }",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val strongest_extension = (class_name_upper + \".\" + extensions_upper.sort[0])\n        if (strength > extensions_strength) {\n            strongest_extension\n        } else if (strength == extensions_strength) {\n            extensions_upper.sort[0]\n        } else {\n            extensions_lower.sort[0]\n        }",
    "        val class_name_upper = class_name.toUpperCase\n        val class_name_lower = class_name.toLowerCase\n        val extensions_upper = extensions.map(x => x.toUpperCase)\n        val extensions_lower = extensions.map(x => x.toLowerCase)\n        val class_name_upper_count = count(class_name_upper)\n        val class_name_lower_count = count(class_name_lower)\n        val extensions_upper_count = count(extensions_upper)\n        val extensions_lower_count = count(extensions_lower)\n        val strength = (class_name_upper_count - class_name_lower_count) / (class_name_upper_count + class_name_lower_count)\n        val extensions_strength = (extensions_upper_count - extensions_lower_count) / (extensions_upper_count + extensions_lower_count)\n        val extensions_strength_diff = extensions_strength - strength\n        val extensions_strength_diff_abs = abs(extensions_strength_diff)\n        val extensions_strength_diff_sign = signum(extensions_strength_diff)\n        val extensions_strength_diff_abs_sign = signum(extensions_strength_diff_abs)\n        val extensions_strength_diff_abs_sign_diff = signum(extensions_strength_diff_abs - extensions_strength_diff_abs_sign)\n        val extensions_strength_diff_abs_sign_diff_abs = abs(extensions_strength_diff_abs - extensions_strength_diff_abs_sign)\n        val extensions_strength_diff_abs_sign_diff_abs_sign = signum(extensions_strength_diff_abs_sign_diff)\n        val extensions_strength_diff_abs_sign_diff_abs_sign_diff = signum(extensions_strength_diff_abs_sign_diff_abs)\n        val extensions_strength_diff_abs_sign_diff_abs_sign_diff_abs = abs(extensions_strength_diff_abs_sign_diff_abs_sign)\n        val extensions_strength_diff_abs_sign_diff_abs_sign_diff_abs_sign",
    "        val cap = 0\n        val sm = 0\n        for (extension : extensions) {\n            val c = extension.charAt(0)\n            if (c >= 'A' && c <= 'Z') {\n                cap += 1\n            } else {\n                sm += 1\n            }\n        }\n        val strength = cap - sm\n        if (strength == 0) {\n            return class_name + \".\" + extensions.sort().head()\n        } else {\n            return class_name + \".\" + extensions.sort().head() + \".\" + strength.toString()\n        }"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}