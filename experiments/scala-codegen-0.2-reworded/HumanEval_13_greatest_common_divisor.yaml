name: HumanEval_13_greatest_common_divisor
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l),\
  \ (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n\
  \    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l),\
  \ (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n  \
  \  assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l),\
  \ (60l)) == (12l));\n    }\n\n}\n"
completions: ["        if (a == 0) {\n            return b\n        } else if (b ==\
    \ 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Int) : Seq[Long] = {\n        if (n <\
    \ 2) {\n            return Nil\n        } else {\n            val result = Nil\n\
    \            val m = scala.math.max(n, 2)\n            for (i <- 2 to m) {\n \
    \               if (n % i == 0) {\n                    result = result.updated(i)\n\
    \                }\n            }\n            return result\n        }\n    }\n\
    \n    // Return a list of all the prime numbers less than or equal to n\n    //\
    \ >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Int) : Seq[Long] =\
    \ {\n        if (n < 2) {\n            return Nil\n        } else {\n        \
    \    val result = Nil\n            val m = scala.math.max(n, 2)\n            for\
    \ (i <- 2 to m) {\n                if (n % i == 0) {\n                    result\
    \ = result.updated(i)\n                }\n            }\n            return result\n\
    \        }\n    }\n\n    // Return a list of all the prime numbers less than or\
    \ equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n", "        if (a ==\
    \ 0) {\n            return b\n        } else if (b == 0) {\n            return\
    \ a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n  \
    \      }\n    }\n\n    // Return a least common multiple of two integers a and\
    \ b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a,\
    \ b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than\
    \ or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n\
    \ : Long) : List[Long] = {\n        if (n < 2) {\n            return Nil\n   \
    \     } else {\n            val result = Nil\n            val m = scala.math.max(n,\
    \ 2)\n            for (i <- 2L) {\n                if (i <= m) {\n           \
    \         val p = i\n                    while (p * p <= n) {\n              \
    \          p = p + 1\n                    }\n                    result = result.updated(p)\n\
    \                }\n            }\n            return result\n        }\n    }\n\
    \n    // Return a list of all the prime numbers less than or equal to n\n    //\
    \ >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : List[Long]\
    \ = {\n        if (n < 2) {\n            return Nil\n        } else {\n      \
    \      val result = Nil\n            val m = scala.math.max(n, 2)\n          \
    \  for (i <- 2L) {\n                if (i <= m) {\n                    val p =\
    \ i\n                    while (p * p <= n) {\n                        p = p +\
    \ 1\n                    }\n                    result = result.updated(p)\n \
    \               }\n            }", "        if (a == 0) {\n            return\
    \ b\n        } else if (b == 0) {\n            return a\n        } else {\n  \
    \          return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    //\
    \ Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else if (b == 0) {\n            return\
    \ 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n\
    \        }\n    }\n\n    // Return a list of all the integers from 1 to n\n  \
    \  // >>> list(range(5))\n    // [0, 1, 2, 3, 4]\n    def list(n : Int) : Seq[Long]\
    \ = {\n        for (i <- 0 until n) yield (i + 1)\n    }\n\n    // Return a list\
    \ of the even integers from 1 to n\n    // >>> evens(5)\n    // [2, 4]\n    def\
    \ evens(n : Int) : Seq[Long] = {\n        for (i <- 0 until n) if (i % 2 == 0)\
    \ yield (i + 1)\n    }\n\n    // Return a list of the odd integers from 1 to n\n\
    \    // >>> odds(5)\n    // [1, 3, 5]\n    def odds(n : Int) : Seq[Long] = {\n\
    \        for (i <- 0 until n) if (i % 2 != 0) yield (i + 1)\n    }\n\n    // Return\
    \ a list of the multiples of 3 from 1 to n\n    // >>> multiples(5)\n    // [3,\
    \ 6, 9, 12, 15]\n    def multiples(n : Int) : Seq[Long] = {\n        for (i <-\
    \ 0 until n) if (i % 3 == 0) yield (i + 1)\n    }\n\n    // Return a list of the\
    \ multiples of 5 from 1 to n", "        if (a == 0) {\n            return b\n\
    \        } else if (b == 0) {\n            return a\n        } else {\n      \
    \      return greatestCommonDivisor(b, a % b)\n        }", "        if (a == 0)\
    \ {\n            return b\n        } else if (b == 0) {\n            return a\n\
    \        } else {\n            return greatestCommonDivisor(b, a % b)\n      \
    \  }\n    }\n\n    // Return a least common multiple of two integers a and b\n\
    \    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b,\
    \ a % b)\n        }\n    }\n\n    // Return a list of all the integers from 1\
    \ to n\n    // >>> range(5)\n    // [1, 2, 3, 4, 5]\n    def range(n : Int) :\
    \ Seq[Long] = {\n        if (n <= 0) {\n            return Nil\n        } else\
    \ {\n            return (1 to n).toSeq.map(x => x)\n        }\n    }\n\n    //\
    \ Return a list of all the even integers from 2 to n\n    // >>> evens(5)\n  \
    \  // [2, 4]\n    def evens(n : Int) : Seq[Long] = {\n        if (n <= 0) {\n\
    \            return Nil\n        } else {\n            return (2 to n).filter(x\
    \ => x % 2 == 0).toSeq\n        }\n    }\n\n    // Return a list of all the primes\
    \ less than n\n    // >>> primes(100)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    def primes(n\
    \ : Int) : Seq[Long] = {\n        if (n <= 0) {\n            return Nil\n    \
    \    } else {\n            return (2 to n).filter(x => x > 1 && all(y => x % y\
    \ != 0", "        if (a == 0) {\n            return b\n        } else if (b ==\
    \ 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            val result = Nil\n\
    \            val m = scala.math.max(n, 2)\n            for (i <- 2L) {\n     \
    \           if (i <= m) {\n                    val p = i\n                   \
    \ while (p * p <= n) {\n                        p = p + 1L\n                 \
    \   }\n                    result = result.updated(p)\n                }\n   \
    \         }\n            return result\n        }\n    }\n\n    // Return a list\
    \ of all the prime numbers less than or equal to n\n    // >>> primes(10)\n  \
    \  // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n <\
    \ 2) {\n            return Nil\n        } else {\n            val result = Nil\n\
    \            val m = scala.math.max(n, 2)\n            for (i <- 2L) {\n     \
    \           if (i <= m) {\n                    val p = i\n                   \
    \ while (p * p <= n) {\n                        p = p + 1L\n                 \
    \   }\n                    result = result.updated(p)\n                }\n   \
    \         ", "        if (a == 0) {\n            return b\n        } else if (b\
    \ == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n\
    \ == 0) {\n            return Nil\n        } else {\n            val result =\
    \ new Vector[Long](n)\n            val m = n >> 1\n            for (i <- 0 until\
    \ m) {\n                val p = 2 * i + 3\n                if (p <= n) {\n   \
    \                 result(p - 1) = p\n                }\n                for (j\
    \ <- i + 1 until m) {\n                    val q = p * j\n                   \
    \ if (q <= n && result(q - 1) == 0) {\n                        result(q - 1) =\
    \ p\n                    }\n                }\n            }\n            return\
    \ result.toSeq\n        }\n    }\n\n    // Return a list of all the prime numbers\
    \ less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def\
    \ primes2(n : Long) : Seq[Long] = {\n        if (n == 0) {\n            return\
    \ Nil\n        } else {\n            val result = new Vector[Long](n)\n      \
    \      val m = n >> 1\n            for (i <- 0 until m) {\n                val\
    \ p = 2 * i + 3\n", "        if (a == 0) {\n            return b\n        } else\
    \ if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }", "        if (a == 0) return b\n        if (b == 0) return\
    \ a\n        if (a < b) return greatestCommonDivisor(b, a % b)\n        return\
    \ greatestCommonDivisor(a, b % a)\n    }\n\n    // Return a least common multiple\
    \ of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    //\
    \ (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) return 0\n        if (b ==\
    \ 0) return 0\n        if (a < b) return leastCommonMultiple(b, a % b)\n     \
    \   return leastCommonMultiple(a, b % a)\n    }\n\n    // Return a list of all\
    \ the integers from 1 to n\n    // >>> range(5)\n    // [1, 2, 3, 4, 5]\n    def\
    \ range(n : Int) : Seq[Long] = {\n        if (n < 1) return Nil\n        return\
    \ (1l << n) - 1l\n    }\n\n    // Return a list of all the even integers from\
    \ 2 to n\n    // >>> evenRange(5)\n    // [2, 4]\n    def evenRange(n : Int) :\
    \ Seq[Long] = {\n        if (n < 2) return Nil\n        return filter(range(n),\
    \ (_ % 2 == 0))\n    }\n\n    // Return a list of all the primes less than n\n\
    \    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : Seq[Long]\
    \ = {\n        if (n < 2) return Nil\n        if (n == 2) return [2]\n       \
    \ if (n == 3) return [2, 3]\n        sieve := [true] * (n / 2)\n        i := 3\n\
    \        while (i < n) {\n            if (sieve[i / 2] == true) {\n          \
    \      // we found a prime\n                for (j := i * i; j < n; j += 2 * i)\
    \ {\n                    sieve[j", "        if (a == 0) {\n            return\
    \ b\n        } else {\n            return greatestCommonDivisor(b % a, a)\n  \
    \      }\n    }\n\n    // Return a least common multiple of two integers a and\
    \ b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else {\n       \
    \     return a * leastCommonMultiple(b, a) / greatestCommonDivisor(a, b)\n   \
    \     }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l),\
    \ (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a\
    \ : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a\
    \ product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n\
    \    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b\
    \ : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference\
    \ of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n  \
    \  // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long,\
    \ b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient\
    \ of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    //\
    \ >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long)\
    \ : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two\
    \ integers a and b\n    // >>> remainder((3l), (5l))\n    // (2l)\n", "      \
    \  if (a == 0) {\n            return b\n        } else if (b == 0) {\n       \
    \     return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the integers from 1 to n\n    // >>> listRange(5)\n   \
    \ // [1, 2, 3, 4, 5]\n    def listRange(n : Int) : List[Long] = {\n        var\
    \ result = List[Long]()\n        for (i <- 1 until n) {\n            result =\
    \ result.append(i)\n        }\n        return result\n    }\n\n    // Return a\
    \ list of all the even integers from 2 to n\n    // >>> listRange(10, even=True)\n\
    \    // [2, 4, 6, 8, 10]\n    def listRange(n : Int, even : Boolean = False) :\
    \ List[Long] = {\n        var result = List[Long]()\n        for (i <- 2 until\
    \ n) {\n            if (even and i % 2 == 0) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result\n    }\n\n    // Return a list\
    \ of all the primes from 2 to n\n    // >>> listRange(1000, prime=True)\n    //\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,\
    \ 163, 167", "        if (a == 0) {\n            return b\n        } else if (b\
    \ == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Int) : List[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n\
    \            val m = (n - 1) / 2\n            for (i <- 2 to m) {\n          \
    \      if (n % i == 0) {\n                    return Nil\n                }\n\
    \            }\n            for (i <- 2 to m) {\n                if (n % i ==\
    \ 0) {\n                    return Nil\n                } else {\n           \
    \         result.append(i)\n                }\n            }\n            return\
    \ result.toList\n        }\n    }\n\n    // Return the sum of all the primes less\
    \ than or equal to n\n    // >>> sumPrimes(10)\n    // 29\n    def sumPrimes(n\
    \ : Int) : Long = {\n        if (n < 2) {\n            return 0\n        } else\
    \ {\n            val result = 0\n            val m = (n - 1) / 2\n           \
    \ for (i <- 2 to m) {\n                if (n % i == 0) {\n                   \
    \ return 0\n                }\n            }\n            for (i <- 2 to m) {\n\
    \                if (n % i == 0) {\n                    return 0\n           \
    \     ", "        if (a == 0) {\n            return b\n        } else if (b ==\
    \ 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }", "        if (a == 0) {\n            return b\n        }\
    \ else if (b == 0) {\n            return a\n        } else {\n            return\
    \ greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common\
    \ multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n\
    \    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n  \
    \  def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0)\
    \ {\n            return 0\n        } else if (b == 0) {\n            return 0\n\
    \        } else {\n            return a * leastCommonMultiple(b, a % b)\n    \
    \    }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l),\
    \ (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a\
    \ : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a\
    \ difference of two integers a and b\n    // >>> difference((3l), (5l))\n    //\
    \ (2l)\n    // >>> difference((25l), (15l))\n    // (10l)\n    def difference(a\
    \ : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a\
    \ product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n\
    \    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b\
    \ : Long) : Long = {\n        return a * b\n    }\n\n    // Return a quotient\
    \ of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (0.6l)\n  \
    \  // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b :\
    \ Long) : Long = {\n        return a / b\n    }\n\n    // Return a modulo of two\
    \ integers", "        if (a == 0) {\n            return b\n        } else if (b\
    \ == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a greatest common divisor of a list of integers\n    // >>> greatestCommonDivisor([3l,\
    \ 5l, 25l])\n    // (1l)\n    // >>> greatestCommonDivisor([25l, 15l])\n    //\
    \ (5l)\n    def greatestCommonDivisor(list : Array[Long]) : Long = {\n       \
    \ if (list.length == 0) {\n            return 0\n        } else {\n          \
    \  return greatestCommonDivisor(list[0], list[1])\n        }\n    }\n\n    //\
    \ Return a least common multiple of a list of integers\n    // >>> leastCommonMultiple([3l,\
    \ 5l, 25l])\n    // (15l)\n    // >>> leastCommonMultiple([25l, 15l])\n    //\
    \ (75l)\n    def leastCommonMultiple(list : Array[Long]) : Long = {\n        if\
    \ (list.length == 0) {\n            return 0\n        } else {\n            return\
    \ leastCommonMultiple(list[0], list[1])\n        }\n    }\n\n    // Return a list\
    \ of all the integers that are multiples of a given integer\n    // >>> multiples(5l)\n\
    \    // [0l, 5l, 10l, 15l, 20l, 25l, 30l, 35l, 40l, 45l, 50l]\n    def multiples(n\
    \ : Long) : Array[Long] = {\n        var result", "        if (a == 0) {\n   \
    \         return b\n        } else if (b == 0) {\n            return a\n     \
    \   } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n\
    \    }\n\n    // Return a least common multiple of two integers a and b\n    //\
    \ >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (375l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a,\
    \ b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    //\
    \ >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (100l)\n\
    \    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n \
    \   // Return a difference of two integers a and b\n    // >>> difference((3l),\
    \ (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (50l)\n    def\
    \ difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n \
    \   // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n\
    \    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a\
    \ : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a\
    \ quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (0.6l)\n\
    \    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b\
    \ : Long) : Long = {\n        return a / b\n    }\n\n    // Return a modulo of",
  "        if (a == 0) {\n            return b\n        } else if (b == 0) {\n   \
    \         return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (375l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n   \
    \ // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long\
    \ = {\n        return a + b\n    }\n\n    // Return a product of two integers\
    \ a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l),\
    \ (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n    \
    \    return a * b\n    }\n\n    // Return a difference of two integers a and b\n\
    \    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l),\
    \ (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n  \
    \      return a - b\n    }\n\n    // Return a quotient of two integers a and b\n\
    \    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n\
    \    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return\
    \ a / b\n    }\n\n    // Return a remainder of two integers a and b", "      \
    \  if (a == 0) {\n            return b\n        } else if (b == 0) {\n       \
    \     return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : List[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n\
    \            val i = 2L\n            while (i <= n) {\n                if (isPrime(i))\
    \ {\n                    result.append(i)\n                }\n               \
    \ i = i + 1L\n            }\n            return result.toList\n        }\n   \
    \ }\n\n    // Return the sum of the squares of the first n natural numbers\n \
    \   // >>> sumOfSquares(10)\n    // 385\n    def sumOfSquares(n : Long) : Long\
    \ = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        } else {\n            return (n * (n + 1) *\
    \ (2 * n + 1)) / 6\n        }\n    }\n\n    // Return the sum of the cubes of\
    \ the first n natural numbers\n    // >>> sumOfCubes(10)\n    // 12586\n    def\
    \ sumOfCubes(n : Long) : Long = {\n        if (n < 0) {\n            throw new\
    \ IllegalArgumentException(\"n must be non-negative\")\n        } else {\n   \
    \         return", "        if (a == 0) {\n            return b\n        } else\
    \ if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n\
    \ == 0) {\n            return Nil\n        } else {\n            return (\n  \
    \              Seq.range(2, n).filter(\n                    x => {\n         \
    \               if (x == 2) {\n                            return true\n     \
    \                   } else if (x % 2 == 0) {\n                            return\
    \ false\n                        } else {\n                            return\
    \ true\n                        }\n                    }\n                ).toList\n\
    \            )\n        }\n    }\n\n    // Return a list of all the prime numbers\
    \ less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def\
    \ primes2(n : Long) : Seq[Long] = {\n        if (n == 0) {\n            return\
    \ Nil\n        } else {\n            return (\n                Seq.range(2, n).filter(\n\
    \                    x => {\n                        if (x == 2) {\n         \
    \                   return true\n                        } else if (x % 2 == 0)\
    \ {\n                            return false\n                        } else\
    \ {\n                            return true\n                        }\n    \
    \                }\n                ).toList\n            )\n        }\n    }\n\
    \n    // Return a list of all the prime numbers less than or equal to n", "  \
    \      if (a == 0) {\n            return b\n        } else if (b == 0) {\n   \
    \         return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Int) : Seq[Long] = {\n        if (n <\
    \ 2) {\n            return Nil\n        } else {\n            val result = Nil\n\
    \            val m = scala.math.max(n, 2)\n            for (i <- 2L to m) {\n\
    \                if (n % i == 0) {\n                    break\n              \
    \  } else {\n                    result = result.updated(i)\n                }\n\
    \            }\n            return result\n        }\n    }\n\n    // Return a\
    \ list of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n\
    \    // [2, 3, 5, 7]\n    def primes2(n : Int) : Seq[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            val result = Nil\n\
    \            val m = scala.math.max(n, 2)\n            for (i <- 2L to m) {\n\
    \                if (n % i == 0) {\n                    break\n              \
    \  } else {\n                    result = result.updated(i)\n                }\n\
    \            }\n            return result\n        }\n    }\n\n    // Return a\
    \ list of all the prime numbers less than or equal to n\n", "        if (a ==\
    \ 0) {\n            return b\n        } else if (b == 0) {\n            return\
    \ a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n  \
    \      }\n    }\n\n    // Return a least common multiple of two integers a and\
    \ b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (375l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a,\
    \ b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than\
    \ or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n\
    \ : Int) : List[Long] = {\n        if (n < 2) {\n            return List[Long](0)\n\
    \        } else {\n            val result = List[Long](0)\n            val i =\
    \ 2L\n            while (i <= n) {\n                if (Problem.isPrime(i)) {\n\
    \                    result = result.append(i)\n                }\n          \
    \      i = i + 1L\n            }\n            return result\n        }\n    }\n\
    \n    // Return true if n is a prime number\n    // >>> isPrime(2)\n    // true\n\
    \    def isPrime(n : Long) : Boolean = {\n        if (n == 2) {\n            return\
    \ true\n        } else if (n == 1) {\n            return false\n        } else\
    \ if (n % 2 == 0) {\n            return false\n        } else {\n            return\
    \ Problem.isPrime(n - 1)\n        }\n    }\n\n    // Return a list of the prime\
    \ factors of a number\n    // >>> primeFactors(12)\n    // [2, 2, 3]\n    def\
    \ primeFactors(n : Long) : List[Long] = {\n        if (n == 0) {\n           \
    \ return List[Long](0)", "        if (a == 0) {\n            return b\n      \
    \  } else if (b == 0) {\n            return a\n        } else {\n            return\
    \ greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common\
    \ multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n\
    \    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n  \
    \  def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0)\
    \ {\n            return 0\n        } else if (b == 0) {\n            return 0\n\
    \        } else {\n            return a * leastCommonMultiple(b, a % b)\n    \
    \    }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l),\
    \ (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a\
    \ : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a\
    \ product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n\
    \    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b\
    \ : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference\
    \ of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n  \
    \  // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long,\
    \ b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient\
    \ of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    //\
    \ >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long)\
    \ : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two\
    \ integers a and b", "        if (a == 0) {\n            return b\n        } else\
    \ if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the integers from 1 to n\n    // >>> listRange(5)\n   \
    \ // [1, 2, 3, 4, 5]\n    def listRange(n : Int) : Seq[Long] = {\n        if (n\
    \ < 1) {\n            return Nil\n        } else {\n            return (1 to n).toSeq\n\
    \        }\n    }\n\n    // Return a list of all the even integers from 2 to n\n\
    \    // >>> listRange(10)\n    // [2, 4, 6, 8, 10]\n    def listRange2(n : Int)\
    \ : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else\
    \ {\n            return (2 to n).filter(x => x % 2 == 0).toSeq\n        }\n  \
    \  }\n\n    // Return a list of all the primes from 2 to n\n    // >>> listRange(100)\n\
    \    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97]\n    def listRange3(n : Int) : Seq[Long] = {\n     \
    \   if (n < 2) {\n            return Nil\n        } else {\n            return\
    \ (2 to n).filter(x => !(x % 2 == 0", "        if (a == 0) {\n            return\
    \ b\n        } else if (b == 0) {\n            return a\n        } else {\n  \
    \          return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    //\
    \ Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (375l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else if (b == 0) {\n            return\
    \ 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n\
    \        }\n    }\n\n    // Return a list of all the prime numbers less than or\
    \ equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long)\
    \ : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else\
    \ {\n            val result = Nil\n            val m = scala.math.max(n, 2)\n\
    \            for (i <- 2L) {\n                if (i <= m) {\n                \
    \    val p = i\n                    while (p * p <= n) {\n                   \
    \     val q = p\n                        while (q * q <= n) {\n              \
    \              if (n % q == 0) {\n                                break\n    \
    \                        }\n                            q = q + 1\n          \
    \              }\n                        if (q * q > n) {\n                 \
    \           result = result.append(p)\n                            break\n   \
    \                     }\n                        p = p + 1\n                 \
    \   }\n                }\n            }\n            return result\n        }\n\
    \    }\n\n    // Return a list of all the prime numbers less than or equal to\
    \ n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) :\
    \ Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else\
    \ {\n            val result = Nil\n            val m = scala.math.max(n, 2", " \
    \       if (a == 0) {\n            return b\n        } else if (b == 0) {\n  \
    \          return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : List[Long] = {\n        if (n\
    \ == 0) {\n            return Nil\n        } else {\n            val result =\
    \ Nil\n            val i = 2l\n            while (i <= n) {\n                if\
    \ (n % i == 0) {\n                    // skip\n                } else {\n    \
    \                result = result.prepend(i)\n                }\n             \
    \   i = i + 1l\n            }\n            return result\n        }\n    }\n\n\
    \    // Return a list of all the prime numbers less than or equal to n\n    //\
    \ >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : List[Long]\
    \ = {\n        if (n == 0) {\n            return Nil\n        } else {\n     \
    \       val result = Nil\n            val i = 2l\n            while (i <= n) {\n\
    \                if (n % i == 0) {\n                    // skip\n            \
    \    } else {\n                    result = result.prepend(i)\n              \
    \  }\n                i = i + 1l\n            }\n            return result\n \
    \       }\n    }\n\n    // Return a list of all the prime numbers less than or\
    \ equal to n\n    // >>> primes(10)\n", "        if (a == 0) {\n            return\
    \ b\n        } else if (b == 0) {\n            return a\n        } else {\n  \
    \          return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    //\
    \ Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else if (b == 0) {\n            return\
    \ 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n\
    \        }\n    }\n\n    // Return a list of all the prime numbers less than or\
    \ equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int)\
    \ : Seq[Int] = {\n        if (n < 2) {\n            return Nil\n        } else\
    \ {\n            return filter(isPrime, range(2, n + 1))\n        }\n    }\n\n\
    \    // Return the sum of all the primes less than or equal to n\n    // >>> sum(primes(10))\n\
    \    // 23\n    def sum(n : Int) : Int = {\n        return foldLeft(0, (x, y)\
    \ => x + y, primes(n))\n    }\n\n    // Return the product of all the primes less\
    \ than or equal to n\n    // >>> product(primes(10))\n    // 120\n    def product(n\
    \ : Int) : Int = {\n        return foldLeft(1, (x, y) => x * y, primes(n))\n \
    \   }\n\n    // Return the sum of the squares of all the primes less than or equal\
    \ to n\n    // >>> sumSq(primes(10))\n    // 466\n    def sumSq(n : Int) : Int\
    \ = {\n        return foldLeft(0, (x, y) => x + y * y, primes(n))\n    }\n\n \
    \   // Return the product of the squares", "        if (a == 0) {\n          \
    \  return b\n        } else if (b == 0) {\n            return a\n        } else\
    \ {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n\
    \    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else if (b == 0) {\n            return\
    \ 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n\
    \        }\n    }\n\n    // Return a list of all the prime numbers less than or\
    \ equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int)\
    \ : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else\
    \ {\n            return (\n                Seq.range(2, n)\n                 \
    \   .filter(x -> x % 2 == 0)\n                    .filter(x -> x < n)\n      \
    \              .filter(x -> {\n                        for (i <- Seq.range(2,\
    \ x / 2 + 1)) {\n                            if (x % i == 0) {\n             \
    \                   return false\n                            }\n            \
    \            }\n                        return true\n                    })\n\
    \            )\n        }\n    }\n\n    // Return a list of all the prime numbers\
    \ less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def\
    \ primes2(n : Int) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n\
    \        } else {\n            return (\n                Seq.range(2, n)\n   \
    \                 .filter(x -> x % 2 == 0)\n                    .filter(x -> x\
    \ < n)\n                    .filter(x -> {\n                        for (i <-\
    \ Seq.range(2, x / 2 + 1)) {\n                            if (x %", "        if\
    \ (a == 0) {\n            return b\n        } else if (b == 0) {\n           \
    \ return a\n        } else {\n            return greatestCommonDivisor(b, a %\
    \ b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the integers from 1 to n\n    // >>> listRange(0, 10)\n\
    \    // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    def listRange(n : Int) : Seq[Long]\
    \ = {\n        if (n == 0) {\n            return Nil\n        } else {\n     \
    \       return (1 to n).toSeq\n        }\n    }\n\n    // Return a list of all\
    \ the even integers from 2 to n\n    // >>> listRangeEven(10)\n    // [2, 4, 6,\
    \ 8, 10]\n    def listRangeEven(n : Int) : Seq[Long] = {\n        if (n == 0)\
    \ {\n            return Nil\n        } else {\n            return (2 to n).filter(x\
    \ -> x % 2 == 0).toSeq\n        }\n    }\n\n    // Return a list of all the odd\
    \ integers from 1 to n\n    // >>> listRangeOdd(10)\n    // [1, 3, 5, 7, 9]\n\
    \    def listRangeOdd(n : Int) : Seq[Long] = {\n        if (n == 0) {\n      \
    \      return Nil\n        } else {\n            return (1 to n).filter(x -> x\
    \ % 2 != 0).toSeq\n        }\n    }\n\n    // Return a list of all the multiples\
    \ of 3 from 1 to", "        if (a == 0) {\n            return b\n        } else\
    \ if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n\
    \    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) :\
    \ Long = {\n        return a + b\n    }\n\n    // Return a product of two integers\
    \ a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l),\
    \ (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n    \
    \    return a * b\n    }\n\n    // Return a difference of two integers a and b\n\
    \    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l),\
    \ (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n  \
    \      return a - b\n    }\n\n    // Return a quotient of two integers a and b\n\
    \    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n\
    \    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return\
    \ a / b\n    }\n\n    // Return a remainder of two integers a", "        if (a\
    \ == 0) {\n            return b\n        } else if (b == 0) {\n            return\
    \ a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n  \
    \      }\n    }\n\n    // Return a least common multiple of two integers a and\
    \ b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a,\
    \ b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than\
    \ or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n\
    \ : Int) : List[Long] = {\n        if (n < 2) {\n            return Nil\n    \
    \    } else {\n            val result = ListBuffer[Long]()\n            val i\
    \ = 2L\n            while (i <= n) {\n                if (isPrime(i)) {\n    \
    \                result.append(i)\n                }\n                i = i +\
    \ 1L\n            }\n            return result.toList\n        }\n    }\n\n  \
    \  // Return the sum of all the primes less than or equal to n\n    // >>> sumPrimes(10)\n\
    \    // 29\n    def sumPrimes(n : Int) : Long = {\n        if (n < 2) {\n    \
    \        return 0L\n        } else {\n            val result = 0L\n          \
    \  val i = 2L\n            while (i <= n) {\n                if (isPrime(i)) {\n\
    \                    result = result + i\n                }\n                i\
    \ = i + 1L\n            }\n            return result\n        }\n    }\n\n   \
    \ // Return the product of all the primes less than or equal to n\n    // >>>\
    \ productPrimes(10)\n    // 729\n    def productPrimes(n : Int) : Long = {\n \
    \       if (n", "        if (a == 0) return b\n        if (b == 0) return a\n\
    \        if (a < b) return greatestCommonDivisor(b, a % b)\n        return greatestCommonDivisor(a,\
    \ b % a)\n    }\n\n    // Return a least common multiple of two integers a and\
    \ b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) return 0\n        if (b == 0) return 0\n        if\
    \ (a < b) return leastCommonMultiple(b, a % b)\n        return leastCommonMultiple(a,\
    \ b % a)\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l),\
    \ (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a\
    \ : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a\
    \ product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n\
    \    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b\
    \ : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference\
    \ of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n  \
    \  // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long,\
    \ b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient\
    \ of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    //\
    \ >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long)\
    \ : Long = {\n        return a / b\n    }\n\n    // Return a remainder", "   \
    \     if (a == 0) {\n            return b\n        } else if (b == 0) {\n    \
    \        return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n   \
    \ // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long\
    \ = {\n        return a + b\n    }\n\n    // Return a product of two integers\
    \ a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l),\
    \ (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n    \
    \    return a * b\n    }\n\n    // Return a difference between two integers a\
    \ and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l),\
    \ (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n  \
    \      return a - b\n    }\n\n    // Return a quotient of two integers a and b\n\
    \    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n\
    \    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return\
    \ a / b\n    }\n\n    // Return a modulo of two integers a and", "        if (a\
    \ == 0) {\n            return b\n        } else if (b == 0) {\n            return\
    \ a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n  \
    \      }", "        if (a == 0) {\n            return b\n        } else if (b\
    \ == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }", "        if (a == 0) return b\n        if (b == 0) return\
    \ a\n        if (a == 1) return 1\n        if (b == 1) return 1\n        if (a\
    \ == b) return a\n        if (a % b == 0) return b\n        if (b % a == 0) return\
    \ a\n        return greatestCommonDivisor(b, a % b)\n    }\n\n    // Return a\
    \ least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) return 0\n        if (b == 0) return 0\n        if (a == 1) return 1\n  \
    \      if (b == 1) return 1\n        if (a == b) return a\n        if (a % b ==\
    \ 0) return b\n        if (b % a == 0) return a\n        return leastCommonMultiple(b,\
    \ a % b)\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l),\
    \ (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) return b\n        if (b ==\
    \ 0) return a\n        if (a == 1) return b\n        if (b == 1) return a\n  \
    \      if (a == b) return a\n        return a + b\n    }\n\n    // Return a product\
    \ of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    //\
    \ >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long)\
    \ : Long = {\n        if (a == 0) return 0\n        if (b == 0) return 0\n   \
    \     if (a == 1) return b\n        if (b == 1) return a\n        if (a == b)\
    \ return a\n        return a * b\n", "        if (a == 0) {\n            return\
    \ b\n        } else if (b == 0) {\n            return a\n        } else {\n  \
    \          return greatestCommonDivisor(b, a % b)\n        }", "        if (a\
    \ == 0) {\n            return b\n        } else if (b == 0) {\n            return\
    \ a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n  \
    \      }\n    }\n\n    // Return a least common multiple of two integers a and\
    \ b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b,\
    \ a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n  \
    \  // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n\
    \    def sum(a : Long, b : Long) : Long = {\n        if (a == 0) {\n         \
    \   return b\n        } else if (b == 0) {\n            return a\n        } else\
    \ {\n            return a + b\n        }\n    }\n\n    // Return a product of\
    \ two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>>\
    \ product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) :\
    \ Long = {\n        if (a == 0) {\n            return 0\n        } else if (b\
    \ == 0) {\n            return 0\n        } else {\n            return a * b\n\
    \        }\n    }\n\n    // Return a difference of two integers a and b\n    //\
    \ >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n\
    \    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        if (a\
    \ == 0) {\n            return b\n        } else if (b == 0) {\n            return\
    \ a\n        }", "        if (a == 0) {\n            return b\n        } else\
    \ if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : List[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            val result = Nil\n\
    \            val i = 2L\n            while (i <= n) {\n                if (n %\
    \ i == 0) {\n                    // skip\n                } else {\n         \
    \           result = result.prepend(i)\n                }\n                i =\
    \ i + 1L\n            }\n            return result\n        }\n    }\n\n    //\
    \ Return a list of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n\
    \    // [2, 3, 5, 7]\n    def primes2(n : Long) : List[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            val result = Nil\n\
    \            val i = 2L\n            while (i <= n) {\n                if (n %\
    \ i == 0) {\n                    // skip\n                } else {\n         \
    \           result = result.prepend(i)\n                }\n                i =\
    \ i + 1L\n            }\n            return result\n        }\n    }\n\n    //\
    \ Return a list of all the prime numbers less than or equal to n\n    // >>> primes3",
  "        if (a == 0) {\n            return b\n        } else if (b == 0) {\n   \
    \         return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n   \
    \ // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return b\n        } else if (b == 0)\
    \ {\n            return a\n        } else {\n            return a + b\n      \
    \  }\n    }\n\n    // Return a product of two integers a and b\n    // >>> product((3l),\
    \ (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def\
    \ product(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            return\
    \ 0\n        } else if (b == 0) {\n            return 0\n        } else {\n  \
    \          return a * b\n        }\n    }\n\n    // Return a difference of two\
    \ integers a and b\n    // >>> difference((3l), (5l))\n    // (-2l)\n    // >>>\
    \ difference((25l), (15l))\n    // (25l)\n    def difference(a : Long, b : Long)\
    \ : Long = {\n        if (a == 0) {\n            return b\n        } else if (b\
    \ == 0) {\n            return a\n        }", "        if (a == 0) {\n        \
    \    return b\n        } else if (b == 0) {\n            return a\n        } else\
    \ {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n\
    \    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (375l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else if (b == 0) {\n            return\
    \ 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n\
    \        }\n    }\n\n    // Return a list of all the prime numbers less than or\
    \ equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long)\
    \ : List[Long] = {\n        if (n == 0) {\n            return Nil\n        } else\
    \ if (n == 1) {\n            return List(1)\n        } else {\n            val\
    \ p = 2L\n            val result = List.empty[Long]\n            while (p <= n)\
    \ {\n                if (n % p == 0) {\n                    result = result.append(p)\n\
    \                    n = n / p\n                } else {\n                   \
    \ p = p + 1\n                }\n            }\n            return result.reverse()\n\
    \        }\n    }\n\n    // Return a list of all the prime numbers less than or\
    \ equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n :\
    \ Long) : List[Long] = {\n        if (n == 0) {\n            return Nil\n    \
    \    } else if (n == 1) {\n            return List(1)\n        } else {\n    \
    \        val p = 2L\n            val result = List.empty[Long]\n            while\
    \ (p <= n) {\n                if (n % p == 0) {\n                    result =\
    \ result.append(p)\n                    n = n / p\n                ", "      \
    \  if (a == 0) {\n            return b\n        } else if (b == 0) {\n       \
    \     return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n\
    \ == 0) {\n            return Nil\n        } else {\n            return (primes(n\
    \ - 2) ++ (1 until (n - 1) % 2 == 0)).takeWhile(x => x < n)\n        }\n    }\n\
    \n    // Return a list of all the prime numbers less than or equal to n\n    //\
    \ >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] =\
    \ {\n        if (n == 0) {\n            return Nil\n        } else {\n       \
    \     return (Seq(2, (n - 1) / 2 + 1) ++ (1 until (n - 1) % 2 == 0)).takeWhile(x\
    \ => x < n)\n        }\n    }\n\n    // Return a list of all the prime numbers\
    \ less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def\
    \ primes3(n : Long) : Seq[Long] = {\n        if (n == 0) {\n            return\
    \ Nil\n        } else {\n            return (Seq(2, (n - 1) / 2", "        if\
    \ (a == 0) {\n            return b\n        } else if (b == 0) {\n           \
    \ return a\n        } else {\n            return greatestCommonDivisor(b, a %\
    \ b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n\
    \ == 0) {\n            return Nil\n        } else {\n            val result =\
    \ new Vector[Long]()\n            val p = 2l\n            while (p <= n) {\n \
    \               if (n % p == 0) {\n                    result.add(p)\n       \
    \         }\n                p = p + 1l\n            }\n            return result.toSeq\n\
    \        }\n    }\n\n    // Return a list of all the prime numbers less than or\
    \ equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n :\
    \ Long) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n     \
    \   } else {\n            val result = new Vector[Long]()\n            val p =\
    \ 2l\n            while (p <= n) {\n                if (n % p == 0) {\n      \
    \              result.add(p)\n                }\n                p = p + 1l\n\
    \            }\n            return result.toSeq\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2", "        if (a == 0) return b\n        if (b == 0) return a\n   \
    \     if (a < b) return greatestCommonDivisor(b, a)\n        if (b < a) return\
    \ greatestCommonDivisor(a, b)\n        if (a % b == 0) return b\n        return\
    \ greatestCommonDivisor(b, a % b)", "        if (a == 0) {\n            return\
    \ b\n        } else if (b == 0) {\n            return a\n        } else {\n  \
    \          return greatestCommonDivisor(b, a % b)\n        }", "        if (a\
    \ == 0) return b\n        if (b == 0) return a\n        if (a < b) return greatestCommonDivisor(b,\
    \ a % b)\n        else return greatestCommonDivisor(a, b % a)", "        if (a\
    \ == 0) {\n            return b\n        } else if (b == 0) {\n            return\
    \ a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n  \
    \      }\n    }\n\n    // Return a least common multiple of two integers a and\
    \ b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b,\
    \ a % b)\n        }\n    }\n\n    // Return a number of the form 2^k * 5^j * 3^i\n\
    \    // >>> numberOfTheForm(2, 2, 2)\n    // (120l)\n    // >>> numberOfTheForm(2,\
    \ 2, 3)\n    // (120l)\n    // >>> numberOfTheForm(2, 2, 4)\n    // (120l)\n \
    \   // >>> numberOfTheForm(2, 2, 5)\n    // (120l)\n    // >>> numberOfTheForm(2,\
    \ 2, 6)\n    // (120l)\n    // >>> numberOfTheForm(2, 2, 7)\n    // (120l)\n \
    \   // >>> numberOfTheForm(2, 2, 8)\n    // (120l)\n    // >>> numberOfTheForm(2,\
    \ 2, 9)\n    // (120l)\n    // >>> numberOfTheForm(2, 2, 10)\n    // (120l)\n\
    \    // >>> numberOfTheForm(2, 2, 11)\n    // (120l)\n    // >>> numberOfTheForm(2,\
    \ 2, 12)\n    // (120l)\n    // >>> numberOfTheForm(2, 2, 13)\n    // (120l)\n\
    \    // >>> numberOfTheForm(2, 2, 14)\n    // (120l)\n    // >>> numberOfTheForm(2,\
    \ 2, 15)\n    // (120l)", "        if (a == 0) {\n            return b\n     \
    \   } else if (b == 0) {\n            return a\n        } else {\n           \
    \ return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a\
    \ least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else if (b == 0) {\n            return\
    \ 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n\
    \        }\n    }\n\n    // Return a number of permutations of a given number\n\
    \    // >>> permutations(5)\n    // 120\n    def permutations(n : Long) : Long\
    \ = {\n        if (n == 0) {\n            return 1\n        } else {\n       \
    \     return n * permutations(n - 1)\n        }\n    }\n\n    // Return a number\
    \ of combinations of a given number\n    // >>> combinations(5)\n    // 10\n \
    \   def combinations(n : Long) : Long = {\n        if (n == 0) {\n           \
    \ return 1\n        } else {\n            return n * combinations(n - 1)\n   \
    \     }\n    }\n\n    // Return a number of combinations of a given number\n \
    \   // >>> combinations(5, 2)\n    // 10\n    def combinations(n : Long, k : Long)\
    \ : Long = {\n        if (n == 0) {\n            return 0\n        } else {\n\
    \            return n * combinations(n - 1, k)\n        }\n    }\n\n    // Return\
    \ a number of combinations of a given number\n    // >>> combinations(5, 2)\n\
    \    // 10\n    def combinations(n : Long, k : Long) : Long = {\n        if (n\
    \ == 0) {\n            return 0\n        } else {\n            return n * combinations(n\
    \ - 1, k)\n        }\n    }\n\n    // Return a number of combinations of a given\
    \ number\n    // >>> combinations(5,", "        if (a == 0) {\n            return\
    \ b\n        } else if (b == 0) {\n            return a\n        } else {\n  \
    \          return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    //\
    \ Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else if (b == 0) {\n            return\
    \ 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n\
    \        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l),\
    \ (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a\
    \ : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a\
    \ product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n\
    \    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b\
    \ : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference\
    \ of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n  \
    \  // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long,\
    \ b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient\
    \ of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    //\
    \ >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long)\
    \ : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two\
    \ integers a and b", "        if (a == 0) {\n            return b\n        } else\
    \ if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (375l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Int) : List[Long] = {\n        if (n\
    \ == 0) {\n            return Nil\n        } else {\n            val result =\
    \ ListBuffer[Long]()\n            val m = scala.math.max(0, n - 2)\n         \
    \   for (i <- 0 until m) {\n                val p = scala.math.min(n, i + 1)\n\
    \                if (Problem.isPrime(p)) {\n                    result.append(p)\n\
    \                }\n            }\n            return result.toList\n        }\n\
    \    }\n\n    // Return true if n is prime, false otherwise\n    // >>> isPrime(2)\n\
    \    // true\n    // >>> isPrime(3)\n    // true\n    // >>> isPrime(4)\n    //\
    \ false\n    def isPrime(n : Long) : Boolean = {\n        if (n == 2) {\n    \
    \        return true\n        } else if (n == 3) {\n            return true\n\
    \        } else if (n == 5) {\n            return true\n        } else if (n ==\
    \ 7) {\n            return true\n        } else if (n == 11) {\n            return\
    \ true\n        } else if (n == 13) {\n            return true\n        }", " \
    \       if (a == 0) {\n            return b\n        } else if (b == 0) {\n  \
    \          return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            val result = Nil\n\
    \            val m = scala.math.max(n, 2)\n            for (i <- 2L) {\n     \
    \           if (i <= m) {\n                    if (n % i == 0) {\n           \
    \             result = result.updated(i)\n                    }\n            \
    \    }\n            }\n            return result\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n\
    \    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            val result = Nil\n\
    \            val m = scala.math.max(n, 2)\n            for (i <- 2L) {\n     \
    \           if (i <= m) {\n                    if (n % i == 0) {\n           \
    \             result = result.updated(i)\n                    }\n            \
    \    }\n            }\n            return result\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or", "        if (a == 0) {\n    \
    \        return b\n        } else if (b == 0) {\n            return a\n      \
    \  } else {\n            return greatestCommonDivisor(b, a % b)\n        }", " \
    \       if (a == 0) {\n            return b\n        } else if (b == 0) {\n  \
    \          return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a number of the form 2^k * 5^j * 3^i\n    // >>> numberOfTheForm(2, 3, 5)\n\
    \    // (120)\n    // >>> numberOfTheForm(2, 3, 5, 7)\n    // (5040)\n    def\
    \ numberOfTheForm(a : Long, b : Long, c : Long, d : Long) : Long = {\n       \
    \ return (a * b * c * d)\n    }\n\n    // Return a number of the form 2^k * 5^j\
    \ * 3^i * 7^l\n    // >>> numberOfTheForm(2, 3, 5, 7)\n    // (5040)\n    // >>>\
    \ numberOfTheForm(2, 3, 5, 7, 11)\n    // (40320)\n    def numberOfTheForm(a :\
    \ Long, b : Long, c : Long, d : Long, e : Long) : Long = {\n        return (a\
    \ * b * c * d * e)\n    }\n\n    // Return a number of the form 2^k * 5^j * 3^i\
    \ * 7^l * 11^m\n    // >>> numberOfTheForm(2, 3, 5, 7, 11)\n    // (40320)\n \
    \   // >>> numberOfTheForm(2, 3, 5, 7, 11, 13)\n    // (362880)\n    def numberOfTheForm(a\
    \ : Long, b :", "        if (a == 0) {\n            return b\n        } else if\
    \ (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a greatest common divisor of a list of integers\n    // >>> greatestCommonDivisor([3l,\
    \ 5l, 25l])\n    // (1l)\n    def greatestCommonDivisor(xs : Iterable[Long]) :\
    \ Long = {\n        if (xs.isEmpty()) {\n            return 0\n        } else\
    \ {\n            return greatestCommonDivisor(xs.head, xs.tail.head)\n       \
    \ }\n    }\n\n    // Return a least common multiple of a list of integers\n  \
    \  // >>> leastCommonMultiple([3l, 5l, 25l])\n    // (75l)\n    def leastCommonMultiple(xs\
    \ : Iterable[Long]) : Long = {\n        if (xs.isEmpty()) {\n            return\
    \ 0\n        } else {\n            return leastCommonMultiple(xs.head, xs.tail.head)\n\
    \        }\n    }\n\n    // Return a list of all the integers that are multiples\
    \ of a given integer\n    // >>> multiples(5l)\n    // [0l, 5l, 10l, 15l, 20l,\
    \ 25l, 30l, 35l, 40l, 45l, 50l]\n    def multiples(n : Long) : Iterable[Long]\
    \ = {\n        for (i <- 0 until n) {\n            yield (i * n)\n        }\n\
    \    }\n\n    // Return a list of all the integers that are multiples of", " \
    \       if (a == 0) {\n            return b\n        } else if (b == 0) {\n  \
    \          return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }", "        if (a == 0) {\n            return b\n        }\
    \ else if (b == 0) {\n            return a\n        } else {\n            return\
    \ greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common\
    \ multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n\
    \    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n  \
    \  def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0)\
    \ {\n            return 0\n        } else if (b == 0) {\n            return 0\n\
    \        } else {\n            return a * leastCommonMultiple(b, a % b)\n    \
    \    }\n    }\n\n    // Return a list of all the integers from 1 to n\n    //\
    \ >>> listRange(10)\n    // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    def listRange(n\
    \ : Int) : Seq[Long] = {\n        for (i <- 0 until n) yield i\n    }\n\n    //\
    \ Return a list of all the even integers from 1 to n\n    // >>> listRangeEven(10)\n\
    \    // [2, 4, 6, 8, 10]\n    def listRangeEven(n : Int) : Seq[Long] = {\n   \
    \     for (i <- 0 until n) yield i if (i % 2 == 0)\n    }\n\n    // Return a list\
    \ of all the odd integers from 1 to n\n    // >>> listRangeOdd(10)\n    // [1,\
    \ 3, 5, 7, 9]\n    def listRangeOdd(n : Int) : Seq[Long] = {\n        for (i <-\
    \ 0 until n) yield i if (i % 2 == 1)\n    }\n\n    // Return a list of all the\
    \ multiples of 3 from 1 to n\n    // >>> listMultiplesOf3(10)\n    // [3, 6, 9,\
    \ 12, 15, 18, 21, 24, 27, 30]\n    def listMultiplesOf3(n : Int) : Seq[Long] =\
    \ {\n        for (i <- 0 until n)", "        if (a == 0) {\n            return\
    \ b\n        } else if (b == 0) {\n            return a\n        } else {\n  \
    \          return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    //\
    \ Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else if (b == 0) {\n            return\
    \ 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n\
    \        }\n    }\n\n    // Return a list of all the integers from 1 to n\n  \
    \  // >>> range(10)\n    // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    def range(n :\
    \ Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n < 0\")\n        } else {\n            return seq(1, n)\n        }\n    }\n\n\
    \    // Return a list of the first n positive integers\n    // >>> range(5)\n\
    \    // [1, 2, 3, 4, 5]\n    def rangePositive(n : Int) : Seq[Long] = {\n    \
    \    if (n < 0) {\n            throw new IllegalArgumentException(\"n < 0\")\n\
    \        } else {\n            return seq(1, n)\n        }\n    }\n\n    // Return\
    \ a list of the first n negative integers\n    // >>> range(5, 10)\n    // [-5,\
    \ -4, -3, -2, -1]\n    def rangeNegative(n : Int) : Seq[Long] = {\n        if\
    \ (n < 0) {\n            throw new IllegalArgumentException(\"n < 0\")\n     \
    \   } else {\n            return seq(-n, -1)\n        }\n    }\n\n    // Return\
    \ a list of the first n even integers\n    // >>> range(4, 10)\n    // [", " \
    \       if (a == 0) {\n            return b\n        } else if (b == 0) {\n  \
    \          return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }", "        if (a == 0) {\n            return b\n        }\
    \ else if (b == 0) {\n            return a\n        } else {\n            return\
    \ greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common\
    \ multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n\
    \    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n  \
    \  def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0)\
    \ {\n            return 0\n        } else if (b == 0) {\n            return 0\n\
    \        } else {\n            return a * b / greatestCommonDivisor(a, b)\n  \
    \      }\n    }\n\n    // Return a list of all the prime numbers less than or\
    \ equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long)\
    \ : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else\
    \ {\n            val result = ListBuffer[Long]()\n            val m = (n - 1)\
    \ / 2\n            for (i <- 2 to m) {\n                if (n % i == 0) {\n  \
    \                  return Nil\n                }\n            }\n            for\
    \ (i <- 2 to m) {\n                if (n % i == 0) {\n                    result.append(i)\n\
    \                }\n            }\n            return result.toList\n        }\n\
    \    }\n\n    // Return a list of all the prime numbers less than or equal to\
    \ n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long]\
    \ = {\n        if (n == 0) {\n            return Nil\n        } else {\n     \
    \       val result = ListBuffer[Long]()\n            val m = (n - 1) / 2\n   \
    \         for (i <- 2 to m) {\n                if (n % i == 0) {\n           \
    \         return Nil\n                }\n            }\n            for (i <-\
    \ 2 to m) {\n                if (n % i", "        if (a == 0) {\n            return\
    \ b\n        } else if (b == 0) {\n            return a\n        } else {\n  \
    \          return greatestCommonDivisor(b, a % b)\n        }", "        if (a\
    \ == 0) {\n            return b\n        } else if (b == 0) {\n            return\
    \ a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n  \
    \      }", "        if (a == 0) {\n            return b\n        } else {\n  \
    \          return greatestCommonDivisor(b % a, a)\n        }\n    }\n\n    //\
    \ Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b,\
    \ a) / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of\
    \ all the integers from 1 to n\n    // >>> range(5)\n    // [1, 2, 3, 4, 5]\n\
    \    def range(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw\
    \ new IllegalArgumentException(\"n < 0\")\n        } else {\n            return\
    \ (1 until n).toSeq\n        }\n    }\n\n    // Return a list of all the even\
    \ integers from 2 to n\n    // >>> evens(5)\n    // [2, 4]\n    def evens(n :\
    \ Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n < 0\")\n        } else {\n            return (2 until n).filter(x -> x % 2 ==\
    \ 0).toSeq\n        }\n    }\n\n    // Return a list of all the primes less than\
    \ n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : Seq[Long]\
    \ = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n < 0\")\n        } else {\n            return (2 until n).filter(x -> x < n).filter(x\
    \ -> {\n                for (i <- (x - 1) / 2) {\n                    if (x %\
    \ i == 0) {\n                        return false\n                    }\n   \
    \             }\n                return true\n            }).toSeq", "       \
    \ if (a == 0) {\n            return b\n        } else if (b == 0) {\n        \
    \    return a\n        } else {\n            return greatestCommonDivisor(b, a\
    \ % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n   \
    \ // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long\
    \ = {\n        return a + b\n    }\n\n    // Return a product of two integers\
    \ a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l),\
    \ (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n    \
    \    return a * b\n    }\n\n    // Return a difference of two integers a and b\n\
    \    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l),\
    \ (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n  \
    \      return a - b\n    }\n\n    // Return a quotient of two integers a and b\n\
    \    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n\
    \    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return\
    \ a / b\n    }\n\n    // Return a modulo of two integers a and", "        if (a\
    \ == 0) {\n            return b\n        } else if (b == 0) {\n            return\
    \ a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n  \
    \      }\n    }\n\n    // Return a least common multiple of two integers a and\
    \ b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b,\
    \ a % b)\n        }\n    }\n\n    // Return a list of all the integers from 1\
    \ to n\n    // >>> listRange(5)\n    // [1, 2, 3, 4, 5]\n    def listRange(n :\
    \ Int) : List[Long] = {\n        var result = List[Long]()\n        for (i <-\
    \ 1 to n) {\n            result = result + List(i)\n        }\n        return\
    \ result\n    }\n\n    // Return a list of all the even integers from 1 to n\n\
    \    // >>> listRangeEven(5)\n    // [2, 4]\n    def listRangeEven(n : Int) :\
    \ List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to n)\
    \ {\n            if (i % 2 == 0) {\n                result = result + List(i)\n\
    \            }\n        }\n        return result\n    }\n\n    // Return a list\
    \ of all the odd integers from 1 to n\n    // >>> listRangeOdd(5)\n    // [1,\
    \ 3, 5]\n    def listRangeOdd(n : Int) : List[Long] = {\n        var result =\
    \ List[Long]()\n        for (i <- 1 to n) {\n            if (i % 2 == 1) {\n \
    \               result = result + List(i)\n            }\n        }\n        return\
    \ result\n    }\n\n    // Return a list of all the multiples of 3 from 1 to n",
  "        if (a == 0) {\n            return b\n        } else if (b == 0) {\n   \
    \         return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n\
    \ == 0) {\n            return Nil\n        } else {\n            return filter(isPrime,\
    \ range(2, n + 1))\n        }\n    }\n\n    // Return the sum of the primes less\
    \ than or equal to n\n    // >>> sum(primes(10))\n    // 23\n    def sum(n : Long)\
    \ : Long = {\n        return foldLeft(0, (x, y) => x + y, primes(n))\n    }\n\n\
    \    // Return the product of the primes less than or equal to n\n    // >>> product(primes(10))\n\
    \    // 120\n    def product(n : Long) : Long = {\n        return foldLeft(1,\
    \ (x, y) => x * y, primes(n))\n    }\n\n    // Return the sum of the squares of\
    \ the primes less than or equal to n\n    // >>> sumSq(primes(10))\n    // 529\n\
    \    def sumSq(n : Long) : Long = {\n        return foldLeft(0, (x, y) => x +\
    \ y * y, primes(n))\n    }\n\n    // Return the product of the squares of the\
    \ primes", "        if (a == 0) {\n            return b\n        } else if (b\
    \ == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            val result = Nil\n\
    \            val m = n - 1\n            for (i <- 2 to m) {\n                if\
    \ (m % i == 0) {\n                    return result\n                } else {\n\
    \                    result = (result + i).toSeq\n                }\n        \
    \    }\n            return result\n        }\n    }\n\n    // Return a list of\
    \ all the prime numbers less than or equal to n\n    // >>> primes(10)\n    //\
    \ [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n < 2)\
    \ {\n            return Nil\n        } else {\n            val result = Nil\n\
    \            val m = n - 1\n            for (i <- 2 to m) {\n                if\
    \ (m % i == 0) {\n                    return result\n                } else {\n\
    \                    result = (result + i).toSeq\n                }\n        \
    \    }\n            return result\n        }\n    }\n\n    // Return a list of\
    \ all the prime numbers less than or equal to n\n    // >>> primes(10)\n    //\
    \ [2, 3", "        if (a == 0) {\n            return b\n        } else if (b ==\
    \ 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }", "        if (a == 0) {\n            return b\n        }\
    \ else if (b == 0) {\n            return a\n        } else {\n            return\
    \ greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common\
    \ multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n\
    \    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n  \
    \  def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0)\
    \ {\n            return 0\n        } else if (b == 0) {\n            return 0\n\
    \        } else {\n            return a * leastCommonMultiple(b, a % b)\n    \
    \    }\n    }\n\n    // Return a list of all the prime numbers less than or equal\
    \ to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) :\
    \ List[Long] = {\n        if (n == 0) {\n            return Nil\n        } else\
    \ if (n == 1) {\n            return List(1)\n        } else {\n            val\
    \ result = List.empty()\n            val i = 2L\n            while (i <= n) {\n\
    \                if (n % i == 0) {\n                    // skip\n            \
    \    } else {\n                    result = result.append(i)\n               \
    \     val j = i + 1L\n                    while (j <= n) {\n                 \
    \       if (n % j == 0) {\n                            // skip\n             \
    \           } else {\n                            result = result.append(j)\n\
    \                            j = j + 1L\n                        }\n         \
    \           }\n                }\n                i = i + 1L\n            }\n\
    \            return result\n        }\n    }\n\n    // Return a list of all the\
    \ prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3,\
    \ 5, 7]\n    def primes2(n : Long) : List[Long] = {\n        if (n == 0) {\n \
    \           return Nil\n        } else if (n == 1) {\n            return List(1)\n\
    \        } else {\n            val result", "        if (a == 0) {\n         \
    \   return b\n        } else if (b == 0) {\n            return a\n        } else\
    \ {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n\
    \    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else if (b == 0) {\n            return\
    \ 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n\
    \        }\n    }\n\n    // Return a greatest common divisor of two integers a\
    \ and b\n    // >>> gcd((3l), (5l))\n    // (1l)\n    // >>> gcd((25l), (15l))\n\
    \    // (5l)\n    def gcd(a : Long, b : Long) : Long = {\n        if (a == 0)\
    \ {\n            return b\n        } else if (b == 0) {\n            return a\n\
    \        } else {\n            return gcd(b, a % b)\n        }\n    }\n\n    //\
    \ Return a least common multiple of two integers a and b\n    // >>> lcm((3l),\
    \ (5l))\n    // (15l)\n    // >>> lcm((25l), (15l))\n    // (75l)\n    def lcm(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * lcm(b, a % b)\n        }\n    }\n\n    // Return a greatest\
    \ common divisor of two integers a and b\n    // >>> gcd((3l), (5l))\n    // (1l)\n\
    \    // >>> gcd((25l), (15l))\n    // (5l)\n    def gcd(a : Long, b : Long) :\
    \ Long", "        if (a == 0) {\n            return b\n        } else if (b ==\
    \ 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            val result = Nil\n\
    \            val m = n >> 1\n            for (i <- 2L to m) {\n              \
    \  if (n % i == 0) {\n                    return result\n                } else\
    \ {\n                    result = result.prepend(i)\n                }\n     \
    \       }\n            return result.prepend(n)\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            val result = Nil\n\
    \            val m = n >> 1\n            for (i <- 2L to m) {\n              \
    \  if (n % i == 0) {\n                    return result\n                } else\
    \ {\n                    result = result.prepend(i)\n                }\n     \
    \       }\n            return result.prepend(n)\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>>", "    \
    \    if (a == 0) {\n            return b\n        } else if (b == 0) {\n     \
    \       return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            return (\n   \
    \             Seq.range(2, n).filter(x => {\n                    return !Problem.isPrime(x)\n\
    \                }).toList\n            )\n        }\n    }\n\n    // Return true\
    \ if n is prime, false otherwise\n    // >>> isPrime(2)\n    // true\n    // >>>\
    \ isPrime(3)\n    // true\n    // >>> isPrime(4)\n    // false\n    def isPrime(n\
    \ : Long) : Boolean = {\n        if (n < 2) {\n            return false\n    \
    \    } else if (n == 2) {\n            return true\n        } else if (n % 2 ==\
    \ 0) {\n            return false\n        } else {\n            return (\n   \
    \             Seq.range(3, Math.sqrt(n), 2).exists(x => {\n                  \
    \  return (n % x == 0)\n                })\n            )\n        }\n    }\n\n\
    \    // Return a list of all the prime numbers less than or equal to n\n    //\
    \ >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes", "        if (a == 0) {\n\
    \            return b\n        } else if (b == 0) {\n            return a\n  \
    \      } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n\
    \    }\n\n    // Return a least common multiple of two integers a and b\n    //\
    \ >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b,\
    \ a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less\
    \ than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n\
    \ : Long) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n   \
    \     } else {\n            val result = new Vector[Long](n)\n            result.set(0,\
    \ 2l)\n            result.set(1, 3l)\n            for (i <- 2l) until (n - 1)\
    \ {\n                val p = result.get(i)\n                if (p * p > n) break\n\
    \                for (j <- (i + 1) until (n - 1)) {\n                    val q\
    \ = result.get(j)\n                    if (q * q > n) break\n                \
    \    if (q % p == 0) {\n                        break\n                    } else\
    \ {\n                        result.set(j, result.get(j) + 1)\n              \
    \      }\n                }\n            }\n            return result.toSeq\n\
    \        }\n    }\n\n    // Return a list of all the prime numbers less than or\
    \ equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n :\
    \ Long) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n     \
    \   } else {\n            val result = new Vector", "        if (a == 0) {\n \
    \           return b\n        } else if (b == 0) {\n            return a\n   \
    \     } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n\
    \    }\n\n    // Return a least common multiple of two integers a and b\n    //\
    \ >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a,\
    \ b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than\
    \ or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n\
    \ : Int) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n     \
    \   } else {\n            val result = Nil\n            val m = scala.math.max(n,\
    \ 2)\n            for (i <- 2L to m) {\n                if (n % i == 0) {\n  \
    \                  break\n                } else {\n                    result\
    \ = result.prepend(i)\n                }\n            }\n            return result\n\
    \        }\n    }\n\n    // Return a list of all the prime numbers less than or\
    \ equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n :\
    \ Int) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n       \
    \ } else {\n            val result = Nil\n            val m = scala.math.max(n,\
    \ 2)\n            for (i <- 2L to m) {\n                if (n % i == 0) {\n  \
    \                  break\n                } else {\n                    result\
    \ = result.prepend(i)\n                }\n            }\n            return result\n\
    \        }\n    }\n\n    // Return a list of all the prime numbers less than or\
    \ equal to", "        if (a == 0) {\n            return b\n        } else if (b\
    \ == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            return filter(primes(n\
    \ - 1), (x -> x < n))\n        }\n    }\n\n    // Return the sum of all the primes\
    \ less than or equal to n\n    // >>> sum(primes(10))\n    // 23\n    def sum(n\
    \ : Long) : Long = {\n        if (n < 2) {\n            return 0\n        } else\
    \ {\n            return foldLeft(0, primes(n), (x, y) -> x + y)\n        }\n \
    \   }\n\n    // Return the product of all the primes less than or equal to n\n\
    \    // >>> product(primes(10))\n    // 23\n    def product(n : Long) : Long =\
    \ {\n        if (n < 2) {\n            return 1\n        } else {\n          \
    \  return foldLeft(1, primes(n), (x, y) -> x * y)\n        }\n    }\n\n    //\
    \ Return the sum of the squares of all the primes less than or equal to n\n  \
    \  // >>> sumSq(primes(10))\n    // 466\n    def sumS", "        if (a == 0) {\n\
    \            return b\n        } else if (b == 0) {\n            return a\n  \
    \      } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n\
    \    }\n\n    // Return a least common multiple of two integers a and b\n    //\
    \ >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (375l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a,\
    \ b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n\
    \    // >>> range(5)\n    // [1, 2, 3, 4, 5]\n    def range(n : Int) : Seq[Long]\
    \ = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n < 0\")\n        } else {\n            return (1 until n).toSeq\n        }\n\
    \    }\n\n    // Return a list of the first n primes\n    // >>> primes(5)\n \
    \   // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97]\n    def primes(n : Int) : Seq[Long] = {\n        if\
    \ (n < 0) {\n            throw new IllegalArgumentException(\"n < 0\")\n     \
    \   } else {\n            return (2 until n).filter(Problem.isPrime).toSeq\n \
    \       }\n    }\n\n    // Return true if an integer is prime\n    // >>> isPrime(2)\n\
    \    // true\n    // >>> isPrime(4)\n    // false\n    def isPrime(n : Long) :\
    \ Boolean = {\n        if (n < 2) {\n            return false\n        } else\
    \ if (n == 2) {\n            return true\n        } else if (n", "        if (a\
    \ == 0) {\n            return b\n        } else if (b == 0) {\n            return\
    \ a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n  \
    \      }\n    }\n\n    // Return a least common multiple of two integers a and\
    \ b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b,\
    \ a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n  \
    \  // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n\
    \    def sum(a : Long, b : Long) : Long = {\n        if (a == 0) {\n         \
    \   return b\n        } else if (b == 0) {\n            return a\n        } else\
    \ {\n            return a + b\n        }\n    }\n\n    // Return a product of\
    \ two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>>\
    \ product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) :\
    \ Long = {\n        if (a == 0) {\n            return 0\n        } else if (b\
    \ == 0) {\n            return 0\n        } else {\n            return a * b\n\
    \        }\n    }\n\n    // Return a difference of two integers a and b\n    //\
    \ >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n\
    \    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        if (a\
    \ == 0) {\n            return b\n        } else if (b == 0) {\n            return\
    \ a\n        }", "        if (a == 0) {\n            return b\n        } else\
    \ if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            val result = Nil\n\
    \            val m = (n - 1) / 2\n            for (i <- 2L to m) {\n         \
    \       if (n % i == 0) {\n                    return Nil\n                }\n\
    \            }\n            for (i <- 2L to m) {\n                if (n % i ==\
    \ 0) {\n                    result = Cons(i, result)\n                }\n    \
    \        }\n            return result\n        }\n    }\n\n    // Return a list\
    \ of all the prime numbers less than or equal to n\n    // >>> primes(10)\n  \
    \  // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n <\
    \ 2) {\n            return Nil\n        } else {\n            val result = Nil\n\
    \            val m = (n - 1) / 2\n            for (i <- 2L to m) {\n         \
    \       if (n % i == 0) {\n                    return Nil\n                }\n\
    \            }\n            for (i <- 2L to m) {\n                if (n % i ==\
    \ 0) {\n                    result = Cons", "        if (a == 0) {\n         \
    \   return b\n        } else if (b == 0) {\n            return a\n        } else\
    \ {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n\
    \    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else if (b == 0) {\n            return\
    \ 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n\
    \        }\n    }\n\n    // Return a list of all the integers from 1 to n\n  \
    \  // >>> listRange(5)\n    // [1, 2, 3, 4, 5]\n    def listRange(n : Int) : Seq[Long]\
    \ = {\n        for (i <- 1 until n) yield i\n    }\n\n    // Return a list of\
    \ all the even integers from 2 to n\n    // >>> listRange(10, even=True)\n   \
    \ // [2, 4, 6, 8, 10]\n    def listRange(n : Int, even : Boolean = false) : Seq[Long]\
    \ = {\n        for (i <- 2 until n) {\n            if (even) {\n             \
    \   if (i % 2 == 0) yield i\n            } else {\n                yield i\n \
    \           }\n        }\n    }\n\n    // Return a list of all the primes from\
    \ 2 to n\n    // >>> listRange(10, primes=True)\n    // [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29]\n    def listRange(n : Int, primes : Boolean = false) : Seq[Long]\
    \ = {\n        for (i <- 2 until n) {\n            if (primes) {\n           \
    \     if (isPrime(i)) yield i\n            } else {\n                yield i\n\
    \            }\n        }\n    }\n\n    // Return a list of all the prime factors\
    \ of n\n", "        if (a == 0) {\n            return b\n        } else if (b\
    \ == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the integers from 1 to n\n    // >>> listRange(5)\n   \
    \ // [1, 2, 3, 4, 5]\n    def listRange(n : Int) : Seq[Long] = {\n        for\
    \ (i <- 0 until n) yield (i + 1)\n    }\n\n    // Return a list of the first n\
    \ positive integers\n    // >>> listRange(5, True)\n    // [1, 2, 3, 4, 5]\n \
    \   def listRange(n : Int, positiveOnly : Boolean) : Seq[Long] = {\n        for\
    \ (i <- 0 until n) {\n            if (positiveOnly) {\n                yield (i\
    \ + 1)\n            } else {\n                yield (i + 1)\n            }\n \
    \       }\n    }\n\n    // Return a list of the first n positive integers\n  \
    \  // >>> listRange(5, True)\n    // [1, 2, 3, 4, 5]\n    def listRange(n : Int,\
    \ positiveOnly : Boolean, skip : Int) : Seq[Long] = {\n        for (i <- 0 until\
    \ n) {\n            if (i >= skip) {\n                if (positiveOnly) {\n  \
    \                  yield (i + 1)\n                } else {\n                 \
    \   yield (i + 1)\n                }\n            }\n        }\n    }\n\n    //\
    \ Return a list of the first n positive integers\n    ", "        if (a == 0)\
    \ {\n            return b\n        } else if (b == 0) {\n            return a\n\
    \        } else {\n            return greatestCommonDivisor(b, a % b)\n      \
    \  }\n    }\n\n    // Return a least common multiple of two integers a and b\n\
    \    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b,\
    \ a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less\
    \ than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n\
    \ : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n    \
    \    } else {\n            val result = Nil\n            val m = n - 1\n     \
    \       for (i <- 2 to m) {\n                if (m % i == 0) {\n             \
    \       return result\n                } else {\n                    result =\
    \ (result + i).toSeq\n                }\n            }\n            return result\n\
    \        }\n    }\n\n    // Return a list of all the prime numbers less than or\
    \ equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n :\
    \ Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n      \
    \  } else {\n            val result = Nil\n            val m = n - 1\n       \
    \     for (i <- 2 to m) {\n                if (m % i == 0) {\n               \
    \     return result\n                } else {\n                    result = (result\
    \ + i).toSeq\n                }\n            }\n            return result\n  \
    \      }\n    }\n\n    // Return a list of all the prime numbers less than or\
    \ equal to n\n    // >>> primes3(10)\n    // [2", "        if (a == 0) {\n   \
    \         return b\n        } else if (b == 0) {\n            return a\n     \
    \   } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n\
    \    }\n\n    // Return a least common multiple of two integers a and b\n    //\
    \ >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a,\
    \ b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than\
    \ or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n\
    \ : Long) : List[Long] = {\n        if (n < 2) {\n            return Nil\n   \
    \     } else {\n            val result = ListBuffer[Long]()\n            val m\
    \ = (n - 1) / 2\n            for (i <- 2 to m) {\n                if (n % i ==\
    \ 0) {\n                    return result.toList\n                }\n        \
    \    }\n            result.add(2)\n            for (i <- 3 to m) {\n         \
    \       if (n % i == 0) {\n                    return result.toList\n        \
    \        }\n            }\n            result.add(n)\n            return result.toList\n\
    \        }\n    }\n\n    // Return a list of the first n primes\n    // >>> firstPrimes(10)\n\
    \    // [2, 3, 5, 7]\n    def firstPrimes(n : Long) : List[Long] = {\n       \
    \ if (n < 2) {\n            return Nil\n        } else {\n            val result\
    \ = ListBuffer[Long]()\n            val m = (n - 1) / 2\n            for (i <-\
    \ 2 to m) {\n                if (n % i == 0) {\n                    return result.toList\n\
    \                }\n            }\n            result", "        if (a == 0) {\n\
    \            return b\n        } else if (b == 0) {\n            return a\n  \
    \      } else {\n            return greatestCommonDivisor(b, a % b)\n        }",
  "        if (a == 0) {\n            return b\n        } else if (b == 0) {\n   \
    \         return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n   \
    \ // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long\
    \ = {\n        return a + b\n    }\n\n    // Return a product of two integers\
    \ a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l),\
    \ (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n    \
    \    return a * b\n    }\n\n    // Return a difference of two integers a and b\n\
    \    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l),\
    \ (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n  \
    \      return a - b\n    }\n\n    // Return a quotient of two integers a and b\n\
    \    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n\
    \    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return\
    \ a / b\n    }\n\n    // Return a remainder of two integers a and b", "      \
    \  if (a == 0) {\n            return b\n        } else if (b == 0) {\n       \
    \     return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Int) : Seq[Long] = {\n        if (n ==\
    \ 0) {\n            return Nil\n        } else {\n            return (primes(n\
    \ - 1).tail.map(x => x + 2)).prepend(2)\n        }\n    }\n\n    // Return a list\
    \ of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n \
    \   // [2, 3, 5, 7]\n    def primes2(n : Int) : Seq[Long] = {\n        if (n ==\
    \ 0) {\n            return Nil\n        } else {\n            return (Seq(2, n).filter(x\
    \ => x % 2 == 0)).map(x => x + 2).prepend(2)\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes3(10)\n\
    \    // [2, 3, 5, 7]\n    def primes3(n : Int) : Seq[Long] = {\n        if (n\
    \ == 0) {\n            return Nil\n        } else {\n            return (Seq(2,\
    \ n).filter(x => x % 2 == 0)).map(x => x + 2", "        if (a == 0) {\n      \
    \      return b\n        } else if (b == 0) {\n            return a\n        }\
    \ else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\
    \n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else if (b == 0) {\n            return\
    \ 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n\
    \        }\n    }\n\n    // Return a list of all the prime numbers less than or\
    \ equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long)\
    \ : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else\
    \ {\n            val result = Nil\n            val m = (n - 1) / 2\n         \
    \   for (i <- 2 to m) {\n                if (n % i == 0) {\n                 \
    \   return result\n                } else {\n                    result = (result\
    \ + i).updated(result.updated(i))\n                }\n            }\n        \
    \    return result\n        }\n    }\n\n    // Return a list of all the prime\
    \ numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n\
    \    def primes2(n : Long) : Seq[Long] = {\n        if (n < 2) {\n           \
    \ return Nil\n        } else {\n            val result = Nil\n            val\
    \ m = (n - 1) / 2\n            for (i <- 2 to m) {\n                if (n % i\
    \ == 0) {\n                    return result\n                } else {\n     \
    \               result = (result + i).updated(result.updated(i))\n           \
    \     }\n            }\n            return result\n        }\n    }\n\n    //\
    \ Return a list of all the prime numbers less than", "        if (a == 0) {\n\
    \            return b\n        } else {\n            return greatestCommonDivisor(b\
    \ % a, a)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else {\n            return a * leastCommonMultiple(b, a)\n        }\n\
    \    }\n\n    // Return a list of all the prime numbers less than or equal to\
    \ n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long]\
    \ = {\n        if (n < 2) {\n            return Nil\n        } else {\n      \
    \      return (primes(n - 2) ++ (2 toSeq(2 to i while (i lt n)))).toList\n   \
    \     }\n    }\n\n    // Return a list of all the prime numbers less than or equal\
    \ to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long)\
    \ : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else\
    \ {\n            return (2 toSeq(2 to i while (i lt n)) ++ (primes2(n - 2) ++\
    \ (2 toSeq(2 to i while (i lt n))))).toList\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes3(n : Long) : Seq[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            return (2 toSeq(2\
    \ to i while (i lt n)) ++ (primes3(n - 2) ++ (2 toSeq(2 to i while (i lt", " \
    \       if (a == 0) {\n            return b\n        } else if (b == 0) {\n  \
    \          return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Int) : List[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            val result = Nil\n\
    \            val m = (n - 1) / 2\n            for (i <- 2 to m) {\n          \
    \      if (n % i == 0) {\n                    return result\n                }\
    \ else {\n                    result = (result + i).updated(result.updated(i))\n\
    \                }\n            }\n            return result\n        }\n    }\n\
    \n    // Return the sum of all the primes less than or equal to n\n    // >>>\
    \ sumPrimes(10)\n    // 23\n    def sumPrimes(n : Int) : Long = {\n        if\
    \ (n < 2) {\n            return 0\n        } else {\n            val result =\
    \ 0\n            val m = (n - 1) / 2\n            for (i <- 2 to m) {\n      \
    \          if (n % i == 0) {\n                    result = result + i\n      \
    \          }\n            }\n            return result\n        }\n    }\n\n \
    \   // Return the product of all the primes less than or equal to n\n    // >>>\
    \ productPrimes(10)\n    // 23\n    def productPrimes(n : Int) : Long", "    \
    \    if (a == 0) {\n            return b\n        } else if (b == 0) {\n     \
    \       return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }", "        if (a == 0) {\n            return b\n        }\
    \ else if (b == 0) {\n            return a\n        } else {\n            return\
    \ greatestCommonDivisor(b, a % b)\n        }", "        if (a == 0) {\n      \
    \      return b\n        } else if (b == 0) {\n            return a\n        }\
    \ else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\
    \n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else if (b == 0) {\n            return\
    \ 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n\
    \        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l),\
    \ (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a\
    \ : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a\
    \ product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n\
    \    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b\
    \ : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference\
    \ of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n  \
    \  // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long,\
    \ b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient\
    \ of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    //\
    \ >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long)\
    \ : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two\
    \ integers a and b", "        if (a == 0) {\n            return b\n        } else\
    \ if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Int) : List[Long] = {\n        if (n\
    \ <= 2) {\n            return List(2)\n        } else {\n            val result\
    \ = List.empty[Long]\n            val isPrime = scala.math.isPrime[Long](n)\n\
    \            for (i <- 1 until n) {\n                if (isPrime(i)) {\n     \
    \               result = result.append(i)\n                }\n            }\n\
    \            return result\n        }\n    }\n\n    // Return a list of all the\
    \ prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3,\
    \ 5, 7]\n    def primes(n : Int) : List[Long] = {\n        if (n <= 2) {\n   \
    \         return List(2)\n        } else {\n            val result = List.empty[Long]\n\
    \            val isPrime = scala.math.isPrime[Long](n)\n            for (i <-\
    \ 1 until n) {\n                if (isPrime(i)) {\n                    result\
    \ = result.append(i)\n                }\n            }\n            return result\n\
    \        }\n    }\n\n    // Return a list of all the prime numbers less than or\
    \ equal to n\n    // >>> pr", "        if (a == 0) {\n            return b\n \
    \       } else if (b == 0) {\n            return a\n        } else {\n       \
    \     return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return\
    \ a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else if (b == 0) {\n            return\
    \ 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n\
    \        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l),\
    \ (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a\
    \ : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a\
    \ product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n\
    \    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b\
    \ : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference\
    \ of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n  \
    \  // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long,\
    \ b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient\
    \ of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    //\
    \ >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long)\
    \ : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two\
    \ integers a and b", "        if (a == 0) {\n            return b\n        } else\
    \ if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Int) : List[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n\
    \            val m = scala.math.max(n, 2)\n            for (i <- 2 to m) {\n \
    \               if (n % i == 0) {\n                    break\n               \
    \ } else {\n                    result.append(i)\n                }\n        \
    \    }\n            return result.toList\n        }\n    }\n\n    // Return a\
    \ list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Int) : List[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n\
    \            val m = scala.math.max(n, 2)\n            for (i <- 2 to m) {\n \
    \               if (n % i == 0) {\n                    break\n               \
    \ } else {\n                    result.append(i)\n                }\n        \
    \    }\n            return result.toList\n        }\n    }\n\n    // Return a\
    \ list of all the prime numbers less", "        if (a == 0) {\n            return\
    \ b\n        } else if (b == 0) {\n            return a\n        } else {\n  \
    \          return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    //\
    \ Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else if (b == 0) {\n            return\
    \ 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n\
    \        }\n    }\n\n    // Return a list of all the integers from 1 to n\n  \
    \  // >>> listRange(0, 10)\n    // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    def listRange(n\
    \ : Int) : List[Long] = {\n        var result = List[Long]()\n        for (i <-\
    \ 0 until n) {\n            result = result + List(i)\n        }\n        return\
    \ result\n    }\n\n    // Return a list of all the even integers from 2 to n\n\
    \    // >>> listRange(0, 10, even=True)\n    // [0, 2, 4, 6, 8]\n    def listRange(n\
    \ : Int, even : Boolean) : List[Long] = {\n        var result = List[Long]()\n\
    \        for (i <- 0 until n) {\n            if (even) {\n                result\
    \ = result + List(i * 2)\n            } else {\n                result = result\
    \ + List(i)\n            }\n        }\n        return result\n    }\n\n    //\
    \ Return a list of all the primes from 2 to n\n    // >>> listRange(0, 100, prime=True)\n\
    \    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97]\n    ", "        if (a == 0) return b\n        if (b\
    \ == 0) return a\n        if (a < b) return greatestCommonDivisor(b, a % b)\n\
    \        return greatestCommonDivisor(a, b % a)\n    }\n\n    // Return a least\
    \ common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) return 0\n        if (b == 0) return 0\n        if (a < b) return leastCommonMultiple(b,\
    \ a % b)\n        return leastCommonMultiple(a, b % a)\n    }\n\n    // Return\
    \ a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n   \
    \ // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long\
    \ = {\n        return a + b\n    }\n\n    // Return a product of two integers\
    \ a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l),\
    \ (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n    \
    \    return a * b\n    }\n\n    // Return a difference of two integers a and b\n\
    \    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l),\
    \ (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n  \
    \      return a - b\n    }\n\n    // Return a quotient of two integers a and b\n\
    \    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n\
    \    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return\
    \ a / b\n    }\n\n    // Return a remainder", "        if (a == 0) {\n       \
    \     return b\n        } else if (b == 0) {\n            return a\n        }\
    \ else {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\
    \n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else if (b == 0) {\n            return\
    \ 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n\
    \        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l),\
    \ (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n\
    \        } else if (b == 0) {\n            return a\n        } else {\n      \
    \      return a + b\n        }\n    }\n\n    // Return a product of two integers\
    \ a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l),\
    \ (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n    \
    \    if (a == 0) {\n            return 0\n        } else if (b == 0) {\n     \
    \       return 0\n        } else {\n            return a * b\n        }\n    }\n\
    \n    // Return a difference of two integers a and b\n    // >>> difference((3l),\
    \ (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def\
    \ difference(a : Long, b : Long) : Long = {\n        if (a == 0) {\n         \
    \   return b\n        } else if (b == 0) {\n            return a\n        }",
  "        if (a == 0) {\n            return b\n        } else if (b == 0) {\n   \
    \         return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n\
    \ == 0) {\n            return Nil\n        } else {\n            return filter(Long.class,\
    \ x -> {\n                if (x <= n) {\n                    return true\n   \
    \             } else {\n                    return false\n                }\n\
    \            }, range(2, n + 1))\n        }\n    }\n\n    // Return the sum of\
    \ all the primes less than or equal to n\n    // >>> sum(primes(10))\n    // 23\n\
    \    def sum(n : Long) : Long = {\n        if (n == 0) {\n            return 0\n\
    \        } else {\n            return foldLeft(0l, (x, y) -> x + y, primes(n))\n\
    \        }\n    }\n\n    // Return the product of all the primes less than or\
    \ equal to n\n    // >>> product(primes(10))\n    // 23\n    def product(n : Long)\
    \ : Long = {\n        if (n == 0) {\n            return 1\n        } else {\n\
    \            return foldLeft(1l, (x, y) -> x * y, primes(n))\n        }\n    }\n\
    \n    // Return the sum of the squares of all the", "        if (a == 0) {\n \
    \           return b\n        } else if (b == 0) {\n            return a\n   \
    \     } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n\
    \    }\n\n    // Return a least common multiple of two integers a and b\n    //\
    \ >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a,\
    \ b)\n        }\n    }\n\n    // Return a number of the form 2^k * 5^j * 3^i\n\
    \    // >>> powerOfThree(3)\n    // (3l)\n    // >>> powerOfThree(5)\n    // (15l)\n\
    \    // >>> powerOfThree(15)\n    // (511l)\n    def powerOfThree(n : Long) :\
    \ Long = {\n        if (n == 0) {\n            return 1\n        } else if (n\
    \ == 1) {\n            return 3\n        } else if (n % 3 == 0) {\n          \
    \  return powerOfThree(n / 3)\n        } else {\n            return powerOfThree(n\
    \ / 3) * 3\n        }\n    }\n\n    // Return a number of the form 2^k * 5^j *\
    \ 3^i * 7^l\n    // >>> powerOfSeven(3)\n    // (3l)\n    // >>> powerOfSeven(5)\n\
    \    // (15l)\n    // >>> powerOfSeven(15)\n    // (511l)\n    // >>> powerOfSeven(25)\n\
    \    // (2047l)\n    def powerOfSeven(n : Long) : Long = {\n        if (n == 0)\
    \ {\n            return 1\n        } else if (n == 1) {\n            return 7\n\
    \        } else if (n % 7 == 0) {\n            return powerOfSeven(n / 7)\n  \
    \      } else", "        if (a == 0) {\n            return b\n        } else if\
    \ (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }", "        if (a == 0) {\n            return b\n        }\
    \ else {\n            return greatestCommonDivisor(b % a, a)\n        }\n    }\n\
    \n    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b,\
    \ a)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    //\
    \ >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n\
    \    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n \
    \   // Return a difference of two integers a and b\n    // >>> difference((3l),\
    \ (5l))\n    // (-2l)\n    // >>> difference((25l), (15l))\n    // (10l)\n   \
    \ def difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\
    \n    // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n\
    \    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a\
    \ : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a\
    \ quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (0.6l)\n\
    \    // >>> quotient((25l), (15l))\n    // (2.0l)\n    def quotient(a : Long,\
    \ b : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder\
    \ of two integers a and b\n    // >>> remainder((3l), (5l))\n    // (2l)\n   \
    \ // >>> remainder((25l", "        if (a == 0) {\n            return b\n     \
    \   } else if (b == 0) {\n            return a\n        } else {\n           \
    \ return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a\
    \ least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else if (b == 0) {\n            return\
    \ 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n\
    \        }\n    }\n\n    // Return a number of the form 2^k * 5^j * 3^i\n    //\
    \ >>> numberOfTheForm(2, 2, 2)\n    // (30)\n    // >>> numberOfTheForm(2, 2,\
    \ 3)\n    // (120)\n    // >>> numberOfTheForm(2, 3, 2)\n    // (210)\n    //\
    \ >>> numberOfTheForm(2, 3, 3)\n    // (210)\n    def numberOfTheForm(k : Int,\
    \ j : Int, i : Int) : Int = {\n        if (k == 0 && j == 0 && i == 0) {\n   \
    \         return 0\n        } else if (k == 0 && j == 0 && i != 0) {\n       \
    \     return i\n        } else if (k == 0 && j != 0 && i == 0) {\n           \
    \ return j\n        } else if (k == 0 && j != 0 && i != 0) {\n            return\
    \ j * i\n        } else if (k != 0 && j == 0 && i == 0) {\n            return\
    \ k\n        } else if (k != 0 && j == 0 && i != 0) {\n            return k *\
    \ i\n        } else if (k != 0 && j != 0 && i == 0) {\n            return k *\
    \ j\n        } else {\n            return k * j * i\n        }\n    }\n\n    //\
    \ Return a number of the form 2^k * 5^j", "        if (a == 0) {\n           \
    \ return b\n        } else if (b == 0) {\n            return a\n        } else\
    \ {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n\
    \    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else if (b == 0) {\n            return\
    \ 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n\
    \        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l),\
    \ (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a\
    \ : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a\
    \ product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n\
    \    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b\
    \ : Long) : Long = {\n        return a * b\n    }\n\n    // Return a quotient\
    \ of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (1.5l)\n  \
    \  // >>> quotient((25l), (15l))\n    // (12l)\n    def quotient(a : Long, b :\
    \ Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder of\
    \ two integers a and b\n    // >>> remainder((3l), (5l))\n    // (3l)\n    //\
    \ >>> remainder((25l), (15l))\n    // (5l)\n    def remainder(a : Long, b : Long)\
    \ : Long = {\n        return a % b\n    }\n\n    // Return a modulo of two integers",
  "        if (a == 0) {\n            return b\n        } else if (b == 0) {\n   \
    \         return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a number of factors of a number n\n    // >>> numberOfFactors(2l)\n \
    \   // (2l)\n    // >>> numberOfFactors(6l)\n    // (1l, 2l, 3l)\n    def numberOfFactors(n\
    \ : Long) : scala.collection.immutable.List[Long] = {\n        if (n == 0) {\n\
    \            return List(0)\n        } else {\n            return numberOfFactors(n\
    \ - 1).append(n)\n        }\n    }\n\n    // Return a sum of all numbers that\
    \ are factors of a number n\n    // >>> sumOfFactors(2l)\n    // (2l)\n    //\
    \ >>> sumOfFactors(6l)\n    // (2l, 3l)\n    def sumOfFactors(n : Long) : scala.collection.immutable.List[Long]\
    \ = {\n        if (n == 0) {\n            return List(0)\n        } else {\n \
    \           return sumOfFactors(n - 1).append(n)\n        }\n    }\n\n    // Return\
    \ a product of all numbers that are factors of a number n\n    // >>> productOfFactors(2l)\n\
    \    // (2l)\n    // >>> productOfFactors(6l)\n    // (2l, 3l)\n    def productOfFactors(n\
    \ : Long) : scala.", "        if (a == 0) {\n            return b\n        } else\
    \ if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the integers from 1 to n\n    // >>> range(5)\n    // [1,\
    \ 2, 3, 4, 5]\n    def range(n : Int) : Seq[Long] = {\n        if (n < 0) {\n\
    \            throw new IllegalArgumentException(\"n must be non-negative\")\n\
    \        } else if (n == 0) {\n            return Nil$()\n        } else {\n \
    \           return (1 to n).toSeq.map(i => i + 1)\n        }\n    }\n\n    //\
    \ Return a list of the first n primes\n    // >>> primes(5)\n    // [2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]\n    def primes(n : Int) : Seq[Long] = {\n        if (n < 0) {\n   \
    \         throw new IllegalArgumentException(\"n must be non-negative\")\n   \
    \     } else if (n == 0) {\n            return Nil$()\n        } else {\n    \
    \        return (2 to n).toSeq.filter(i => {\n                if (i == 2) {\n\
    \                    return true\n                } else if (i % 2 == 0) {\n \
    \                   return false\n                } else {\n                 \
    \   return true\n                }\n", "        if (a == 0) {\n            return\
    \ b\n        } else if (b == 0) {\n            return a\n        } else {\n  \
    \          return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    //\
    \ Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else if (b == 0) {\n            return\
    \ 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n\
    \        }\n    }\n\n    // Return a list of all the prime numbers less than or\
    \ equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int)\
    \ : List[Long] = {\n        if (n == 0) {\n            return Nil\n        } else\
    \ {\n            val result = ListBuffer[Long]()\n            val m = scala.math.max(1,\
    \ n / 2)\n            for (i <- 0 until m) {\n                if (n % i == 0)\
    \ {\n                    break\n                } else {\n                   \
    \ result.append(i)\n                }\n            }\n            return result.toList\n\
    \        }\n    }\n\n    // Return a list of all the prime numbers less than or\
    \ equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int)\
    \ : List[Long] = {\n        if (n == 0) {\n            return Nil\n        } else\
    \ {\n            val result = ListBuffer[Long]()\n            val m = scala.math.max(1,\
    \ n / 2)\n            for (i <- 0 until m) {\n                if (n % i == 0)\
    \ {\n                    break\n                } else {\n                   \
    \ result.append(i)\n                }\n            }\n            return result.toList\n\
    \        }\n    }\n\n    // Return a list of all", "        if (a == 0) {\n  \
    \          return b\n        } else if (b == 0) {\n            return a\n    \
    \    } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n\
    \    }\n\n    // Return a least common multiple of two integers a and b\n    //\
    \ >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a,\
    \ b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n\
    \    // >>> listRange(10)\n    // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    def listRange(n\
    \ : Int) : List[Long] = {\n        var result = List[Long]()\n        for (i <-\
    \ 0 until n) {\n            result = result + List(i + 1)\n        }\n       \
    \ return result\n    }\n\n    // Return a list of all the even integers from 1\
    \ to n\n    // >>> listRangeEven(10)\n    // [2, 4, 6, 8, 10]\n    def listRangeEven(n\
    \ : Int) : List[Long] = {\n        var result = List[Long]()\n        for (i <-\
    \ 0 until n) {\n            if (i % 2 == 0) {\n                result = result\
    \ + List(i)\n            }\n        }\n        return result\n    }\n\n    //\
    \ Return a list of all the odd integers from 1 to n\n    // >>> listRangeOdd(10)\n\
    \    // [1, 3, 5, 7, 9]\n    def listRangeOdd(n : Int) : List[Long] = {\n    \
    \    var result = List[Long]()\n        for (i <- 0 until n) {\n            if\
    \ (i % 2 == 1) {\n                result = result + List(i)\n            }\n \
    \       }", "        if (a == 0) {\n            return b\n        } else if (b\
    \ == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the integers from 1 to n\n    // >>> range(5)\n    // [1,\
    \ 2, 3, 4, 5]\n    def range(n : Int) : Seq[Long] = {\n        if (n < 0) {\n\
    \            throw new IllegalArgumentException(\"n must be non-negative\")\n\
    \        } else {\n            return (1 until n).toSeq\n        }\n    }\n\n\
    \    // Return a list of all the even integers from 2 to n\n    // >>> evens(5)\n\
    \    // [2, 4]\n    def evens(n : Int) : Seq[Long] = {\n        if (n < 0) {\n\
    \            throw new IllegalArgumentException(\"n must be non-negative\")\n\
    \        } else {\n            return (2 until n).filter(x -> x % 2 == 0).toSeq\n\
    \        }\n    }\n\n    // Return a list of all the odd integers from 1 to n\n\
    \    // >>> odds(5)\n    // [1, 3, 5]\n    def odds(n : Int) : Seq[Long] = {\n\
    \        if (n < 0) {\n            throw new IllegalArgumentException(\"n must\
    \ be non-negative\")\n        } else {\n            return (1 until n).filter(x\
    \ -> x % 2 != 0).toSeq\n        }\n    }\n\n    // Return a list of all the multiples\
    \ of", "        if (a == 0) {\n            return b\n        } else if (b == 0)\
    \ {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            val result = Nil\n\
    \            val m = n >> 1\n            val i = 2\n            while (i <= m)\
    \ {\n                if (n % i == 0) {\n                    return Nil\n     \
    \           } else {\n                    result = (result + i).updated(result)\n\
    \                }\n                i = i + 1\n            }\n            return\
    \ result\n        }\n    }\n\n    // Return a list of all the prime numbers less\
    \ than or equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n\
    \ : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n    \
    \    } else {\n            val result = Nil\n            val m = n >> 1\n    \
    \        val i = 2\n            while (i <= m) {\n                if (n % i ==\
    \ 0) {\n                    return Nil\n                } else {\n           \
    \         result = (result + i).updated(result)\n                }\n         \
    \       i = i + 1\n            }\n            return result\n        }\n    }\n\
    \n    // Return a list of all", "        if (a == 0) {\n            return b\n\
    \        } else if (b == 0) {\n            return a\n        } else {\n      \
    \      return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return\
    \ a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else if (b == 0) {\n            return\
    \ 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n\
    \        }\n    }\n\n    // Return a list of all the prime numbers less than or\
    \ equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int)\
    \ : List[Long] = {\n        if (n == 0) {\n            return Nil\n        } else\
    \ {\n            val result = ListBuffer[Long]()\n            val i = 2L\n   \
    \         while (i <= n) {\n                if (isPrime(i)) {\n              \
    \      result.append(i)\n                }\n                i = i + 1L\n     \
    \       }\n            return result.toList\n        }\n    }\n\n    // Return\
    \ a list of the prime factors of a positive integer n\n    // >>> primeFactors(12)\n\
    \    // [2, 2, 3]\n    def primeFactors(n : Long) : List[Long] = {\n        if\
    \ (n == 0) {\n            return Nil\n        } else {\n            val result\
    \ = ListBuffer[Long]()\n            val i = 2L\n            while (i <= n) {\n\
    \                if (n % i == 0) {\n                    result.append(i)\n   \
    \                 n = n / i\n                } else {\n                    i =\
    \ i + 1L\n                }\n            }\n            return result.toList\n\
    \        }\n    }\n\n    // Return a list of the prime factors of a positive integer\
    \ n\n    // >>> primeFactors(12)\n    ", "        if (a == 0) return b\n     \
    \   if (b == 0) return a\n        if (a < b) return greatestCommonDivisor(b, a\
    \ % b)\n        if (b < a) return greatestCommonDivisor(a, b % a)\n        return\
    \ a", "        if (a == 0) {\n            return b\n        } else if (b == 0)\
    \ {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            return filter(isPrime,\
    \ range(2, n + 1))\n        }\n    }\n\n    // Return a list of the prime factors\
    \ of a positive integer n\n    // >>> primeFactors(16)\n    // [2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n    def primeFactors(n : Long) : Seq[Long]\
    \ = {\n        if (n < 2) {\n            return Nil\n        } else {\n      \
    \      return filter(isPrimeFactor, range(2, n + 1))\n        }\n    }\n\n   \
    \ // Return a list of the divisors of a positive integer n\n    // >>> divisors(16)\n\
    \    // [1, 2, 4, 8, 16, 2, 4, 8, 16, 2, 4, 8, 16, 2, 4, 8, 16]\n    def divisors(n\
    \ : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n    \
    \    } else {\n            return filter(isDivisor,", "        if (a == 0) {\n\
    \            return b\n        } else if (b == 0) {\n            return a\n  \
    \      } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n\
    \    }\n\n    // Return a least common multiple of two integers a and b\n    //\
    \ >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b,\
    \ a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n  \
    \  // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n\
    \    def sum(a : Long, b : Long) : Long = {\n        if (a == 0) {\n         \
    \   return b\n        } else if (b == 0) {\n            return a\n        } else\
    \ {\n            return a + b\n        }\n    }\n\n    // Return a product of\
    \ two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>>\
    \ product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long) :\
    \ Long = {\n        if (a == 0) {\n            return 0\n        } else if (b\
    \ == 0) {\n            return 0\n        } else {\n            return a * b\n\
    \        }\n    }\n\n    // Return a difference of two integers a and b\n    //\
    \ >>> difference((3l), (5l))\n    // (-2l)\n    // >>> difference((25l), (15l))\n\
    \    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n        if (a\
    \ == 0) {\n            return b\n        } else if (b == 0) {\n            return\
    \ a\n        }", "        if (a == 0) return b\n        if (b == 0) return a\n\
    \        if (a < b) return greatestCommonDivisor(b, a % b)\n        else return\
    \ greatestCommonDivisor(a, b % a)", "        if (a == 0) {\n            return\
    \ b\n        } else if (b == 0) {\n            return a\n        } else {\n  \
    \          return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    //\
    \ Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (375l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else if (b == 0) {\n            return\
    \ 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n\
    \        }\n    }\n\n    // Return a list of all the prime numbers less than or\
    \ equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int)\
    \ : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else\
    \ {\n            val result = Nil\n            val m = (n - 1) / 2\n         \
    \   for (i <- 2L to m) {\n                if (n % i == 0) {\n                \
    \    return result\n                } else {\n                    result = (result\
    \ + i).updated(result.updated(i))\n                }\n            }\n        \
    \    return result\n        }\n    }\n\n    // Return a list of the prime factors\
    \ of a positive integer n\n    // >>> primeFactors(12)\n    // [2, 2, 3]\n   \
    \ def primeFactors(n : Long) : Seq[Long] = {\n        if (n < 2) {\n         \
    \   return Nil\n        } else {\n            val result = Nil\n            val\
    \ m = (n - 1) / 2\n            for (i <- 2L to m) {\n                if (n % i\
    \ == 0) {\n                    result = (result + i).updated(result.updated(i))\n\
    \                }\n            }\n            return result\n        }\n    }\n\
    \n    // Return the sum of all the positive integers less than or equal to n\n\
    \    // >>> sum(", "        if (a == 0) {\n            return b\n        } else\
    \ if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a list of all the integers from 1 to n\n    // >>> listRange(10)\n    // [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    def listRange(n : Int) : Seq[Long] = {\n  \
    \      if (n < 1) {\n            return Nil\n        } else {\n            return\
    \ (1 to n).toSeq\n        }\n    }\n\n    // Return a list of all the even integers\
    \ from 2 to n\n    // >>> listRangeEven(10)\n    // [2, 4, 6, 8, 10]\n    def\
    \ listRangeEven(n : Int) : Seq[Long] = {\n        if (n < 2) {\n            return\
    \ Nil\n        } else {\n            return (2 to n).filter(x -> x % 2 == 0).toSeq\n\
    \        }\n    }\n\n    // Return a list of all the odd integers from 1 to n\n\
    \    // >>> listRangeOdd(10)\n    // [1, 3, 5, 7, 9]\n    def listRangeOdd(n :\
    \ Int) : Seq[Long] = {\n        if (n < 1) {\n            return Nil\n       \
    \ } else {\n            return (1 to n).filter(x -> x % 2 != 0).toSeq\n      \
    \  }\n    }\n\n    // Return a list of all the prime numbers from 2 to n\n   \
    \ // >>> list", "        if (a == 0) return b\n        if (b == 0) return a\n\
    \        if (a < b) return greatestCommonDivisor(b, a % b)\n        return greatestCommonDivisor(a,\
    \ b % a)\n    }\n\n    // Return a least common multiple of two integers a and\
    \ b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) return 0\n        if (b == 0) return 0\n        if\
    \ (a < b) return leastCommonMultiple(b, a % b)\n        return leastCommonMultiple(a,\
    \ b % a)\n    }\n\n    // Return a greatest common divisor of a list of integers\n\
    \    // >>> greatestCommonDivisor([3l, 5l, 25l])\n    // (1l)\n    // >>> greatestCommonDivisor([3l,\
    \ 5l, 15l])\n    // (5l)\n    def greatestCommonDivisor(xs : List[Long]) : Long\
    \ = {\n        if (xs.isEmpty()) return 0\n        return greatestCommonDivisor(xs.head,\
    \ xs.tail.head)\n    }\n\n    // Return a least common multiple of a list of integers\n\
    \    // >>> leastCommonMultiple([3l, 5l, 25l])\n    // (75l)\n    // >>> leastCommonMultiple([3l,\
    \ 5l, 15l])\n    // (15l)\n    def leastCommonMultiple(xs : List[Long]) : Long\
    \ = {\n        if (xs.isEmpty()) return 0\n        return leastCommonMultiple(xs.head,\
    \ xs.tail.head)\n    }\n\n    // Return a list of integers that are multiples\
    \ of a given integer\n    // >>> multiples(3l)\n    // [3l, 6l, 9l, 12l, 15l,\
    \ 18l, 21l, 24l, 27l, 30l, 33l, 36l, 39l, 42l, 45l,\n    // 48l, 51l, 54l, 57l,\
    \ 60l", "        if (a == 0) {\n            return b\n        } else if (b ==\
    \ 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (375l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the integers from 1 to n\n    // >>> range(5)\n    // [1,\
    \ 2, 3, 4, 5]\n    def range(n : Int) : Seq[Long] = {\n        if (n < 0) {\n\
    \            throw new IllegalArgumentException(\"n should be non-negative\")\n\
    \        } else {\n            var result = mutable.List[Long]()\n           \
    \ for (i <- 0 until n) {\n                result.append(i + 1)\n            }\n\
    \            return result.toSeq\n        }\n    }\n\n    // Return a list of\
    \ the first n positive integers\n    // >>> rangeUpTo(5)\n    // [1, 2, 3, 4,\
    \ 5]\n    def rangeUpTo(n : Int) : Seq[Long] = {\n        if (n < 0) {\n     \
    \       throw new IllegalArgumentException(\"n should be non-negative\")\n   \
    \     } else {\n            var result = mutable.List[Long]()\n            for\
    \ (i <- 0 until n) {\n                result.append(i + 1)\n            }\n  \
    \          return result.toSeq\n        }\n    }\n\n    // Return a list of the\
    \ first n positive integers\n    // >>> rangeDownTo(5)\n    // [1, 2, 3, 4, 5]\n\
    \    def rangeDownTo(n : Int) : Seq[Long] = {\n", "        if (a == 0) {\n   \
    \         return b\n        } else if (b == 0) {\n            return a\n     \
    \   } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n\
    \    }\n\n    // Return a least common multiple of two integers a and b\n    //\
    \ >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b,\
    \ a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less\
    \ than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n\
    \ : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n    \
    \    } else {\n            return (\n                Seq.unfold(2, x -> x < n,\
    \ (x, acc) -> {\n                    if (x % 2 == 0) {\n                     \
    \   return acc\n                    } else {\n                        return Seq.append(acc,\
    \ x)\n                    }\n                })\n            ).toList\n      \
    \  }\n    }\n\n    // Return a list of all the prime numbers less than or equal\
    \ to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long)\
    \ : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else\
    \ {\n            return (\n                Seq.unfold(2, x -> x < n, (x, acc)\
    \ -> {\n                    if (x % 2 == 0) {\n                        return\
    \ acc\n                    } else {\n                        return Seq.append(acc,\
    \ x)\n                    }\n                })\n            ).toList\n      \
    \  }\n    }\n\n    // Return a list of all the prime numbers less than or equal\
    \ to n\n    // >>> primes3(10", "        if (a == 0) {\n            return b\n\
    \        } else if (b == 0) {\n            return a\n        } else {\n      \
    \      return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return\
    \ a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else if (b == 0) {\n            return\
    \ 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n\
    \        }\n    }\n\n    // Return a number of the form 2^n + 1\n    // >>> powerOfTwoPlusOne((3l))\n\
    \    // (4l)\n    // >>> powerOfTwoPlusOne((5l))\n    // (8l)\n    def powerOfTwoPlusOne(n\
    \ : Long) : Long = {\n        if (n == 0) {\n            return 1\n        } else\
    \ {\n            return 2 * powerOfTwoPlusOne(n - 1)\n        }\n    }\n\n   \
    \ // Return a number of the form 2^n - 1\n    // >>> powerOfTwoMinusOne((3l))\n\
    \    // (2l)\n    // >>> powerOfTwoMinusOne((5l))\n    // (4l)\n    def powerOfTwoMinusOne(n\
    \ : Long) : Long = {\n        if (n == 0) {\n            return 1\n        } else\
    \ {\n            return 2 * powerOfTwoMinusOne(n - 1)\n        }\n    }\n\n  \
    \  // Return a number of the form 2^n\n    // >>> powerOfTwo((3l))\n    // (8l)\n\
    \    // >>> powerOfTwo((5l))\n    // (32l)\n    def powerOfTwo(n : Long) : Long\
    \ = {\n        if (n == 0) {\n            return 1\n        } else {\n       \
    \     return 2 * powerOfTwo(n - 1)\n        }\n    }\n\n    // Return", "    \
    \    if (a == 0) {\n            return b\n        } else if (b == 0) {\n     \
    \       return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a list of all the integers from 1 to n\n    // >>> range(10)\n    // [1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]\n    def range(n : Int) : Seq[Long] = {\n        if\
    \ (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    )\n        } else {\n            return (1 until n).toSeq\n        }\n    }\n\n\
    \    // Return a list of all the even integers from 2 to n\n    // >>> evens(10)\n\
    \    // [2, 4, 6, 8, 10]\n    def evens(n : Int) : Seq[Long] = {\n        if (n\
    \ < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    )\n        } else {\n            return (2 until n).filter(x -> x % 2 == 0).toSeq\n\
    \        }\n    }\n\n    // Return a list of all the odd integers from 1 to n\n\
    \    // >>> odds(10)\n    // [1, 3, 5, 7, 9]\n    def odds(n : Int) : Seq[Long]\
    \ = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        } else {\n            return (1 until n).filter(x\
    \ -> x % 2 != 0).toSeq", "        if (a == 0) {\n            return b\n      \
    \  } else if (b == 0) {\n            return a\n        } else {\n            return\
    \ greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common\
    \ multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n\
    \    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n  \
    \  def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0)\
    \ {\n            return 0\n        } else if (b == 0) {\n            return 0\n\
    \        } else {\n            return a * b / greatestCommonDivisor(a, b)\n  \
    \      }\n    }\n\n    // Return a list of all the integers from 1 to n\n    //\
    \ >>> range(1, 5)\n    // [1, 2, 3, 4]\n    def range(n : Int) : Seq[Long] = {\n\
    \        if (n < 0) {\n            throw new IllegalArgumentException(\"n must\
    \ be non-negative\")\n        } else {\n            var result = mutable.List[Long]()\n\
    \            for (i <- 0 until n) {\n                result.append(i + 1)\n  \
    \          }\n            return result.toSeq\n        }\n    }\n\n    // Return\
    \ a list of the first n primes\n    // >>> primes(10)\n    // [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29]\n    def primes(n : Int) : Seq[Long] = {\n        if (n\
    \ < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    )\n        } else {\n            var result = mutable.List[Long]()\n         \
    \   var i = 2\n            while (i < n) {\n                if (isPrime(i)) {\n\
    \                    result.append(i)\n                }\n                i =\
    \ i + 1\n            }\n            return result.toSeq\n        }\n    }\n\n\
    \    // Return the sum of the squares of the first n primes\n    // >>> primesToThePowerOf2",
  "        if (a == 0) {\n            return b\n        } else {\n            return\
    \ greatestCommonDivisor(b % a, a)\n        }\n    }\n\n    // Return a least common\
    \ multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n\
    \    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n  \
    \  def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0)\
    \ {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b,\
    \ a)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    //\
    \ >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n\
    \    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n \
    \   // Return a difference of two integers a and b\n    // >>> difference((3l),\
    \ (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def\
    \ difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n \
    \   // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n\
    \    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a\
    \ : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a\
    \ quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n\
    \    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b\
    \ : Long) : Long = {\n        return a / b\n    }\n\n    // Return a modulo of\
    \ two integers a and b\n    // >>> modulo((3l), (5l))\n    // (3l)\n    // >>>\
    \ modulo((25l),", "        if (a == 0) {\n            return b\n        } else\
    \ {\n            return greatestCommonDivisor(b % a, a)\n        }\n    }\n\n\
    \    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b,\
    \ a) / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of\
    \ all the prime numbers less than or equal to n\n    // >>> primes(10)\n    //\
    \ [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n < 2) {\n\
    \            return Nil\n        } else {\n            return (\n            \
    \    Seq.range(2, n)\n                    .filter(x => x % 2 == 0)\n         \
    \           .filter(x => x < n)\n                    .filter(x => {\n        \
    \                if (x == 2) {\n                            return true\n    \
    \                    } else {\n                            return (x - 1) % x\
    \ == 0\n                        }\n                    })\n            )\n   \
    \     }\n    }\n\n    // Return a list of all the prime numbers less than or equal\
    \ to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long)\
    \ : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else\
    \ {\n            return (\n                Seq.range(2, n)\n                 \
    \   .filter(x => x % 2 == 0)\n                    .filter(x => x < n)\n      \
    \              .filter(x => {\n                        if (x == 2) {\n       \
    \                     return true\n                        } else {\n        \
    \                    return (x - 1) % x == 0\n                        }\n    \
    \                })\n            )\n        }\n    }\n\n    // Return a list of\
    \ all the prime numbers less than or equal to", "        if (a == 0) {\n     \
    \       return b\n        } else if (b == 0) {\n            return a\n       \
    \ } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n  \
    \  }\n\n    // Return a least common multiple of two integers a and b\n    //\
    \ >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b,\
    \ a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less\
    \ than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n\
    \ : Long) : List[Long] = {\n        if (n < 2) {\n            return Nil\n   \
    \     } else {\n            val result = Nil\n            val i = 2L\n       \
    \     while (i <= n) {\n                if (n % i == 0) {\n                  \
    \  result = result.append(i)\n                    i = i + 1\n                }\
    \ else {\n                    i = i + 1\n                }\n            }\n  \
    \          return result\n        }\n    }\n\n    // Return a list of all the\
    \ prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3,\
    \ 5, 7]\n    def primes2(n : Long) : List[Long] = {\n        if (n < 2) {\n  \
    \          return Nil\n        } else {\n            val result = Nil\n      \
    \      val i = 2L\n            while (i <= n) {\n                if (n % i ==\
    \ 0) {\n                    result = result.append(i)\n                    i =\
    \ i + 1\n                } else {\n                    i = i + 1\n           \
    \     }\n            }\n            return result\n        }\n    }\n\n    //\
    \ Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10",
  "        if (a == 0) {\n            return b\n        } else if (b == 0) {\n   \
    \         return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Int) : Seq[Long] = {\n        if (n <\
    \ 2) {\n            return Nil\n        } else {\n            val result = Nil\n\
    \            val m = scala.math.max(1, n / 2)\n            for (i <- 1 until m)\
    \ {\n                if (n % i == 0) {\n                    return result\n  \
    \              } else {\n                    result = result.prepend(i)\n    \
    \            }\n            }\n            return result\n        }\n    }\n\n\
    \    // Return a list of all the prime numbers less than or equal to n\n    //\
    \ >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : Seq[Long] = {\n\
    \        if (n < 2) {\n            return Nil\n        } else {\n            val\
    \ result = Nil\n            val m = scala.math.max(1, n / 2)\n            for\
    \ (i <- 1 until m) {\n                if (n % i == 0) {\n                    return\
    \ result\n                } else {\n                    result = result.prepend(i)\n\
    \                }\n            }\n            return result\n        }\n    }\n\
    \n    // Return a list of all the prime numbers less than or", "        if (a\
    \ == 0) {\n            return b\n        } else if (b == 0) {\n            return\
    \ a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n  \
    \      }\n    }\n\n    // Return a least common multiple of two integers a and\
    \ b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b,\
    \ a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less\
    \ than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n\
    \ : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n    \
    \    } else {\n            val result = Nil\n            val isPrime = scala.math.Numeric$.MODULE$.isPrime(n)\n\
    \            for (i <- 2 to n) {\n                if (isPrime(i)) {\n        \
    \            result = result.updated(i)\n                }\n            }\n  \
    \          return result\n        }\n    }\n\n    // Return a list of all the\
    \ prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3,\
    \ 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n < 2) {\n   \
    \         return Nil\n        } else {\n            val result = Nil\n       \
    \     val isPrime = scala.math.Numeric$.MODULE$.isPrime(n)\n            for (i\
    \ <- 2 to n) {\n                if (isPrime(i)) {\n                    result\
    \ = result.updated(i)\n                }\n            }\n            return result\n\
    \        }\n    }\n\n    // Return a list of all the prime numbers less than or\
    \ equal to n\n    // >>> primes(10)\n    //", "        if (a == 0) {\n       \
    \     return b\n        } else if (b == 0) {\n            return a\n        }\
    \ else {\n            return greatestCommonDivisor(b, a % b)\n        }", "  \
    \      if (a == 0) {\n            return b\n        } else if (b == 0) {\n   \
    \         return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            return filter(Long.class,\
    \ range(2, n + 1).toSeq(), (x) => {\n                if (x == 2) {\n         \
    \           return true\n                } else if (x % 2 == 0) {\n          \
    \          return false\n                } else {\n                    return\
    \ true\n                }\n            })\n        }\n    }\n\n    // Return a\
    \ list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            return filter(Long.class,\
    \ range(2, n + 1).toSeq(), (x) => {\n                if (x == 2) {\n         \
    \           return true\n                } else if (x % 2 == 0) {\n          \
    \          return false\n                } else {\n                    return\
    \ true\n                }\n            })\n        }\n    }\n\n    // Return a\
    \ list of all the prime numbers less than or equal to n\n    // >>> primes", " \
    \       if (a == 0) {\n            return b\n        } else if (b == 0) {\n  \
    \          return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a list of all the integers from 1 to n\n    // >>> listRange(5)\n    // [1,\
    \ 2, 3, 4, 5]\n    def listRange(n : Int) : List[Long] = {\n        var result\
    \ = List[Long]()\n        for (i <- 1 to n) {\n            result = result.append(i)\n\
    \        }\n        return result\n    }\n\n    // Return a list of all the primes\
    \ from 2 to n\n    // >>> listPrimes(10)\n    // [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29]\n    def listPrimes(n : Int) : List[Long] = {\n        var result =\
    \ List[Long]()\n        for (i <- 2 to n) {\n            if (isPrime(i)) {\n \
    \               result = result.append(i)\n            }\n        }\n        return\
    \ result\n    }\n\n    // Return a list of all the prime factors of a number\n\
    \    // >>> primeFactors(25)\n    // [5, 5]\n    def primeFactors(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var i = 2\n     \
    \   while (n > 1) {\n            if (n % i == 0) {\n                result = result.append(i)\n\
    \                n = n / i\n            } else {\n                i =", "    \
    \    if (a == 0) {\n            return b\n        } else {\n            return\
    \ greatestCommonDivisor(b % a, a)\n        }\n    }\n\n    // Return a least common\
    \ multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n\
    \    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n  \
    \  def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0)\
    \ {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b,\
    \ a)\n        }\n    }\n\n    // Return a list of all the prime numbers less than\
    \ or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n\
    \ : Long) : List[Long] = {\n        if (n < 2) {\n            return Nil\n   \
    \     } else {\n            val result = ListBuffer[Long]()\n            val m\
    \ = n >> 1\n            val i = 2\n            while (i <= m) {\n            \
    \    if (n % i == 0) {\n                    return Nil\n                } else\
    \ {\n                    result.append(i)\n                    i = i + 1\n   \
    \             }\n            }\n            result.append(n)\n            return\
    \ result.toList\n        }\n    }\n\n    // Return a list of all the prime numbers\
    \ less than or equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def\
    \ primes2(n : Long) : List[Long] = {\n        if (n < 2) {\n            return\
    \ Nil\n        } else {\n            val result = ListBuffer[Long]()\n       \
    \     val m = n >> 1\n            val i = 2\n            while (i <= m) {\n  \
    \              if (n % i == 0) {\n                    return Nil\n           \
    \     } else {\n                    result.append(i)\n                    i =\
    \ i + 1\n                }\n            }\n            result.append(n)\n    \
    \        return result.toList\n        }\n    }\n\n    // Return a list of all\
    \ the prime numbers less than or equal to n\n    //", "        if (a == 0) {\n\
    \            return b\n        } else {\n            return greatestCommonDivisor(b\
    \ % a, a)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else {\n            return a * leastCommonMultiple(b, a)\n        }\n\
    \    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n\
    \    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long,\
    \ b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a difference\
    \ of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n  \
    \  // >>> difference((25l), (15l))\n    // (10l)\n    def difference(a : Long,\
    \ b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a product\
    \ of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    //\
    \ >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b : Long)\
    \ : Long = {\n        return a * b\n    }\n\n    // Return a quotient of two integers\
    \ a and b\n    // >>> quotient((3l), (5l))\n    // (0.6l)\n    // >>> quotient((25l),\
    \ (15l))\n    // (2.0l)\n    def quotient(a : Long, b : Long) : Long = {\n   \
    \     return a / b\n    }\n\n    // Return a modulo of two integers a and b\n\
    \    // >>> modulo((3l), (5l))\n    // (2l)\n    // >>> modulo", "        if (a\
    \ == 0) {\n            return b\n        } else if (b == 0) {\n            return\
    \ a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n  \
    \      }\n    }\n\n    // Return a least common multiple of two integers a and\
    \ b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b,\
    \ a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less\
    \ than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n\
    \ : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n    \
    \    } else {\n            val result = Nil\n            val m = (n - 1) / 2l\n\
    \            for (i <- 2l to m) {\n                if (n % i == 0) {\n       \
    \             return Nil\n                } else {\n                    result\
    \ = (result + i).updated(result)\n                }\n            }\n         \
    \   return result\n        }\n    }\n\n    // Return a list of all the prime numbers\
    \ less than or equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def\
    \ primes2(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return\
    \ Nil\n        } else {\n            val result = Nil\n            val m = (n\
    \ - 1) / 2l\n            for (i <- 2l to m) {\n                if (n % i == 0)\
    \ {\n                    return Nil\n                } else {\n              \
    \      result = (result + i).updated(result)\n                }\n            }\n\
    \            return result\n        }\n    }\n\n    // Return a list of all the\
    \ prime numbers less than or equal to n\n", "        if (a == 0) {\n         \
    \   return b\n        } else if (b == 0) {\n            return a\n        } else\
    \ {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n\
    \    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else if (b == 0) {\n            return\
    \ 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n\
    \        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l),\
    \ (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a\
    \ : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a\
    \ product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n\
    \    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b\
    \ : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference\
    \ of two integers a and b\n    // >>> difference((3l), (5l))\n    // (-2l)\n \
    \   // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long,\
    \ b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient\
    \ of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (0.6l)\n  \
    \  // >>> quotient((25l), (15l))\n    // (2.5l)\n    def quotient(a : Long, b\
    \ : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder\
    \ of two", "        if (a == 0) {\n            return b\n        } else if (b\
    \ == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : List[Long] = {\n        if (n\
    \ == 0) {\n            return Nil\n        } else {\n            val result =\
    \ ListBuffer[Long]()\n            val i = 2L\n            while (i <= n) {\n \
    \               if (isPrime(i)) {\n                    result.append(i)\n    \
    \            }\n                i = i + 1L\n            }\n            return\
    \ result.toList\n        }\n    }\n\n    // Return the sum of all the primes less\
    \ than or equal to n\n    // >>> sumPrimes(10)\n    // 29\n    def sumPrimes(n\
    \ : Long) : Long = {\n        if (n == 0) {\n            return 0\n        } else\
    \ {\n            return foldLeft(0L, primes(n))\n        }\n    }\n\n    // Return\
    \ the product of all the primes less than or equal to n\n    // >>> productPrimes(10)\n\
    \    // 629\n    def productPrimes(n : Long) : Long = {\n        if (n == 0) {\n\
    \            return 1\n        } else {\n            return foldLeft(1L, primes(n))\n\
    \        }\n    }\n\n    // Return the sum of all the even-valued primes", " \
    \       if (a == 0) {\n            return b\n        } else if (b == 0) {\n  \
    \          return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : List[Long] = {\n        if (n\
    \ == 0) {\n            return Nil\n        } else {\n            val result =\
    \ ListBuffer[Long]()\n            val m = (n - 1) / 2l\n            for (i <-\
    \ 2l to m) {\n                if (n % i == 0) {\n                    return Nil\n\
    \                }\n            }\n            for (i <- 2l to m) {\n        \
    \        result.append(i)\n            }\n            return result.toList\n \
    \       }\n    }\n\n    // Return a list of all the prime numbers less than or\
    \ equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n :\
    \ Long) : List[Long] = {\n        if (n == 0) {\n            return Nil\n    \
    \    } else {\n            val result = ListBuffer[Long]()\n            val m\
    \ = (n - 1) / 2l\n            for (i <- 2l to m) {\n                if (n % i\
    \ == 0) {\n                    return Nil\n                }\n            }\n\
    \            for (i <- 2l to m) {\n                result.append(i)\n        \
    \    }\n            return result.", "        if (a == 0) {\n            return\
    \ b\n        } else if (b == 0) {\n            return a\n        } else {\n  \
    \          return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    //\
    \ Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else if (b == 0) {\n            return\
    \ 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n\
    \        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l),\
    \ (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a\
    \ : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a\
    \ product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n\
    \    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b\
    \ : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference\
    \ of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n  \
    \  // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long,\
    \ b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient\
    \ of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    //\
    \ >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long)\
    \ : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two\
    \ integers a and b", "        if (a == 0) {\n            return b\n        } else\
    \ if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : List[Long] = {\n        if (n\
    \ < 2) {\n            return List.empty()\n        } else {\n            val result\
    \ = List.empty()\n            val i = 2L\n            while (i <= n) {\n     \
    \           if (isPrime(i)) {\n                    result = result.append(i)\n\
    \                }\n                i = i + 1L\n            }\n            return\
    \ result\n        }\n    }\n\n    // Return a list of all the prime numbers less\
    \ than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n\
    \ : Long) : List[Long] = {\n        if (n < 2) {\n            return List.empty()\n\
    \        } else {\n            val result = List.empty()\n            val i =\
    \ 2L\n            while (i <= n) {\n                if (isPrime(i)) {\n      \
    \              result = result.append(i)\n                }\n                i\
    \ = i + 1L\n            }\n            return result\n        }\n    }\n\n   \
    \ // Return a list of all the prime numbers less than or equal to n\n    // >>>\
    \ primes(10)\n    // [2, 3, 5", "        if (a == 0) return b\n        if (b ==\
    \ 0) return a\n        if (a < b) return greatestCommonDivisor(b, a % b)\n   \
    \     return greatestCommonDivisor(a, b % a)\n    }\n\n    // Return a least common\
    \ multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n\
    \    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n  \
    \  def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0)\
    \ return 0\n        if (b == 0) return 0\n        if (a < b) return leastCommonMultiple(b,\
    \ a % b)\n        return leastCommonMultiple(a, b % a)\n    }\n\n    // Return\
    \ a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n   \
    \ // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long\
    \ = {\n        return a + b\n    }\n\n    // Return a product of two integers\
    \ a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l),\
    \ (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n    \
    \    return a * b\n    }\n\n    // Return a difference between two integers a\
    \ and b\n    // >>> difference((3l), (5l))\n    // (-2l)\n    // >>> difference((25l),\
    \ (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n  \
    \      return a - b\n    }\n\n    // Return a quotient of two integers a and b\n\
    \    // >>> quotient((3l), (5l))\n    // (0.6l)\n    // >>> quotient((25l), (15l))\n\
    \    // (2.5l)\n    def quotient(a : Long, b : Long) : Long = {\n        return\
    \ a / b\n    }\n\n    ", "        if (a == 0) {\n            return b\n      \
    \  } else {\n            return greatestCommonDivisor(b % a, a)\n        }\n \
    \   }\n\n    // Return a least common multiple of two integers a and b\n    //\
    \ >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (375l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else {\n       \
    \     return a * leastCommonMultiple(b, a) / greatestCommonDivisor(a, b)\n   \
    \     }\n    }\n\n    // Return a sum of integers from 1 to n\n    // >>> sum(10)\n\
    \    // 45\n    def sum(n : Int) : Int = {\n        return (1 + n) * (n + 1) /\
    \ 2\n    }\n\n    // Return a product of integers from 1 to n\n    // >>> product(10)\n\
    \    // 3628800\n    def product(n : Int) : Int = {\n        return n * (n + 1)\
    \ / 2\n    }\n\n    // Return a list of all prime numbers from 2 to n\n    //\
    \ >>> primes(20)\n    // [2, 3, 5, 7, 11, 13, 17, 19]\n    def primes(n : Int)\
    \ : Seq[Int] = {\n        if (n < 2) {\n            return Nil\n        } else\
    \ {\n            return filter(isPrime, range(2, n + 1))\n        }\n    }\n\n\
    \    // Return a list of all prime numbers from 2 to n\n    // >>> primes2(20)\n\
    \    // [2, 3, 5, 7, 11, 13, 17, 19]\n    def primes2(n : Int) : Seq[Int] = {\n\
    \        if (n < 2) {\n            return Nil\n        } else {\n            return\
    \ filter(isPrime2, range(2, n + 1))\n        }\n    }\n\n    // Return a list\
    \ of all prime numbers from 2 to n\n    // >>> primes3(20)\n    // [2, 3, 5,",
  "        if (a == 0) {\n            return b\n        } else if (b == 0) {\n   \
    \         return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n   \
    \ // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long\
    \ = {\n        return a + b\n    }\n\n    // Return a difference of two integers\
    \ a and b\n    // >>> difference((3l), (5l))\n    // (-2l)\n    // >>> difference((25l),\
    \ (15l))\n    // (10l)\n    def difference(a : Long, b : Long) : Long = {\n  \
    \      return a - b\n    }\n\n    // Return a product of two integers a and b\n\
    \    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l), (15l))\n\
    \    // (375l)\n    def product(a : Long, b : Long) : Long = {\n        return\
    \ a * b\n    }\n\n    // Return a quotient of two integers a and b\n    // >>>\
    \ quotient((3l), (5l))\n    // (0.6l)\n    // >>> quotient((25l), (15l))\n   \
    \ // (2.0l)\n    def quotient(a : Long, b : Long) : Long = {\n        return a\
    \ / b\n    }\n\n    // Return a modulo of", "        if (a == 0) {\n         \
    \   return b\n        } else if (b == 0) {\n            return a\n        } else\
    \ {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n\
    \    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else if (b == 0) {\n            return\
    \ 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n\
    \        }\n    }\n\n    // Return a list of all the integers from 1 to n\n  \
    \  // >>> range(5)\n    // [1, 2, 3, 4, 5]\n    def range(n : Int) : Seq[Long]\
    \ = {\n        if (n <= 0) {\n            return Nil\n        } else {\n     \
    \       return (1 to n).toSeq\n        }\n    }\n\n    // Return a list of all\
    \ the even integers from 2 to n\n    // >>> evens(5)\n    // [2, 4]\n    def evens(n\
    \ : Int) : Seq[Long] = {\n        if (n <= 0) {\n            return Nil\n    \
    \    } else {\n            return (2 to n).filter(x => x % 2 == 0).toSeq\n   \
    \     }\n    }\n\n    // Return a list of all the odd integers from 1 to n\n \
    \   // >>> odds(5)\n    // [1, 3, 5]\n    def odds(n : Int) : Seq[Long] = {\n\
    \        if (n <= 0) {\n            return Nil\n        } else {\n           \
    \ return (1 to n).filter(x => x % 2 != 0).toSeq\n        }\n    }\n\n    // Return\
    \ a list of all the multiples of 3 from 1 to n\n    // >>> multiples(5)\n    //\
    \ [3, 6, 9, 12, 15]\n    def multiples(n :", "        if (a == 0) return b\n \
    \       if (b == 0) return a\n        if (a < b) return greatestCommonDivisor(b,\
    \ a % b)\n        return greatestCommonDivisor(a, b % a)", "        if (a == 0)\
    \ {\n            return b\n        } else if (b == 0) {\n            return a\n\
    \        } else {\n            return greatestCommonDivisor(b, a % b)\n      \
    \  }\n    }\n\n    // Return a least common multiple of two integers a and b\n\
    \    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (375l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a,\
    \ b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n    //\
    \ >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n\
    \    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n \
    \   // Return a difference of two integers a and b\n    // >>> difference((3l),\
    \ (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (10l)\n    def\
    \ difference(a : Long, b : Long) : Long = {\n        return a - b\n    }\n\n \
    \   // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n\
    \    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a\
    \ : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a\
    \ quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (0.6l)\n\
    \    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b\
    \ : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder\
    \ of two", "        if (a == 0) {\n            return b\n        } else if (b\
    \ == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }", "        if (a == 0) {\n            return b\n        }\
    \ else if (b == 0) {\n            return a\n        } else {\n            return\
    \ greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common\
    \ multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n\
    \    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n  \
    \  def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0)\
    \ {\n            return 0\n        } else if (b == 0) {\n            return 0\n\
    \        } else {\n            return a * leastCommonMultiple(b, a % b)\n    \
    \    }\n    }\n\n    // Return a list of all the integers from 1 to n\n    //\
    \ >>> range(5)\n    // [1, 2, 3, 4, 5]\n    def range(n : Int) : Seq[Long] = {\n\
    \        if (n < 0) {\n            throw new IllegalArgumentException(\"n must\
    \ be non-negative\")\n        } else if (n == 0) {\n            return Nil$()\n\
    \        } else {\n            return (1 to n).toSeq.map(_.toLong)\n        }\n\
    \    }\n\n    // Return a list of the first n positive integers\n    // >>> range(5,\
    \ 10)\n    // [5, 6, 7, 8, 9]\n    def range(n : Int, start : Long) : Seq[Long]\
    \ = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        } else if (n == 0) {\n            return Nil$()\n\
    \        } else {\n            return (start to (start + n - 1)).toSeq.map(_.toLong)\n\
    \        }\n    }\n\n    // Return a list of the first n positive integers\n \
    \   // >>> range(5, 10, 2)\n    // [5, 7, 9]\n    def range(n : Int, start : Long,\
    \ step : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw", "   \
    \     if (a == 0) {\n            return b\n        } else if (b == 0) {\n    \
    \        return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (375l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n\
    \ == 0) {\n            return Nil\n        } else {\n            val result =\
    \ new Vector[Long](n)\n            val m = scala.math.max(1, n - 1)\n        \
    \    for (i <- 1 until m) {\n                val p = scala.math.min(n, i)\n  \
    \              if (p % 2 == 0) {\n                    p = p / 2\n            \
    \    }\n                if (p == i) {\n                    result(i) = i\n   \
    \             } else {\n                    for (j <- 1 until p) {\n         \
    \               result(i * j) = p\n                    }\n                }\n\
    \            }\n            return result.toSeq\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n\
    \    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n\
    \ == 0) {\n            return Nil\n        } else {\n            val result =\
    \ new Vector[Long](n)\n            val m = scala.math.max(1, n - 1)\n        \
    \    ", "        if (a == 0) {\n            return b\n        } else if (b ==\
    \ 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : List[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n\
    \            val m = n >> 1\n            val i = 2\n            while (i <= m)\
    \ {\n                if (n % i == 0) {\n                    return Nil\n     \
    \           } else {\n                    result.append(i)\n                 \
    \   i = i + 1\n                }\n            }\n            result.append(n)\n\
    \            return result.toList\n        }\n    }\n\n    // Return a list of\
    \ all the prime numbers less than or equal to n\n    // >>> primes2(10)\n    //\
    \ [2, 3, 5, 7]\n    def primes2(n : Long) : List[Long] = {\n        if (n < 2)\
    \ {\n            return Nil\n        } else {\n            val result = ListBuffer[Long]()\n\
    \            val m = n >> 1\n            val i = 2\n            while (i <= m)\
    \ {\n                if (n % i == 0) {\n                    return Nil\n     \
    \           } else {\n                    result.append(i)\n                 \
    \   i = i + 1\n                }\n            }\n            result.append(n)\n",
  "        if (a == 0) {\n            return b\n        } else if (b == 0) {\n   \
    \         return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a number of the form 2^n + k, where k is an integer\n    // >>> numberOfForm(2,\
    \ (3l))\n    // (7l)\n    // >>> numberOfForm(2, (5l))\n    // (11l)\n    def\
    \ numberOfForm(n : Int, k : Long) : Long = {\n        if (n == 0) {\n        \
    \    return k\n        } else {\n            return numberOfForm(n - 1, k * 2\
    \ + 1)\n        }\n    }\n\n    // Return a number of the form 2^n - k, where\
    \ k is an integer\n    // >>> numberOfForm(2, (7l))\n    // (3l)\n    // >>> numberOfForm(2,\
    \ (11l))\n    // (5l)\n    def numberOfForm2(n : Int, k : Long) : Long = {\n \
    \       if (n == 0) {\n            return k\n        } else {\n            return\
    \ numberOfForm2(n - 1, k * 2 - 1)\n        }\n    }\n\n    // Return a number\
    \ of the form 2^n + k, where k is an integer\n    // >>> numberOfForm2(2, (3l))\n\
    \    // (5l)\n    // >>> numberOfForm2(2, (5l))\n    // (11l)\n    def numberOfForm3(n\
    \ : Int, k : Long)", "        if (a == 0) {\n            return b\n        } else\
    \ if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a list of all the integers from 1 to n\n    // >>> listRange(10)\n    // [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    def listRange(n : Int) : List[Long] = {\n \
    \       val result = mutable.List[Long]()\n        for (i <- 1 until n) {\n  \
    \          result.append(i)\n        }\n        return result\n    }\n\n    //\
    \ Return a list of all the even integers from 2 to n\n    // >>> listRange(10,\
    \ even=True)\n    // [2, 4, 6, 8, 10]\n    def listRange(n : Int, even : Boolean\
    \ = false) : List[Long] = {\n        val result = mutable.List[Long]()\n     \
    \   for (i <- 2 until n) {\n            if (even && (i % 2 == 0)) {\n        \
    \        result.append(i)\n            } else if (!even && (i % 2 != 0)) {\n \
    \               result.append(i)\n            }\n        }\n        return result\n\
    \    }\n\n    // Return a list of all the primes from 2 to n\n    // >>> listRange(10,\
    \ primes=True)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    def listRange(n\
    \ : Int, primes : Boolean = false) : List[Long", "        if (a == 0) {\n    \
    \        return b\n        } else if (b == 0) {\n            return a\n      \
    \  } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n \
    \   }\n\n    // Return a least common multiple of two integers a and b\n    //\
    \ >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b,\
    \ a % b)\n        }\n    }\n\n    // Return a list of all the integers from 1\
    \ to n\n    // >>> range(5)\n    // [1, 2, 3, 4, 5]\n    def range(n : Int) :\
    \ List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to n)\
    \ {\n            result = result.append(i)\n        }\n        return result\n\
    \    }\n\n    // Return a list of all the even integers from 2 to n\n    // >>>\
    \ evenRange(5)\n    // [2, 4]\n    def evenRange(n : Int) : List[Long] = {\n \
    \       var result = List[Long]()\n        for (i <- 2 to n) {\n            if\
    \ (i % 2 == 0) {\n                result = result.append(i)\n            }\n \
    \       }\n        return result\n    }\n\n    // Return a list of all the primes\
    \ less than n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n :\
    \ Int) : List[Long] = {\n        var result = List[Long]()\n        for (i <-\
    \ 2 to n) {\n            if (isPrime(i)) {\n                result = result.append(i)\n\
    \            }\n        }\n        return result\n    }\n\n    // Return the sum\
    \ of all the primes less than n\n    // >>> sumPrimes(10)\n", "        if (a ==\
    \ 0) {\n            return b\n        } else if (b == 0) {\n            return\
    \ a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n  \
    \      }\n    }\n\n    // Return a least common multiple of two integers a and\
    \ b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b,\
    \ a % b)\n        }\n    }\n\n    // Return a list of all the integers from 1\
    \ to n\n    // >>> listRange(5)\n    // [1, 2, 3, 4, 5]\n    def listRange(n :\
    \ Int) : Seq[Long] = {\n        if (n < 1) {\n            return Nil\n       \
    \ } else {\n            return (1 to n).toSeq\n        }\n    }\n\n    // Return\
    \ a list of all the even integers from 2 to n\n    // >>> listRangeEven(5)\n \
    \   // [2, 4]\n    def listRangeEven(n : Int) : Seq[Long] = {\n        if (n <\
    \ 2) {\n            return Nil\n        } else {\n            return (2 to n).filter(x\
    \ -> x % 2 == 0).toSeq\n        }\n    }\n\n    // Return a list of all the odd\
    \ integers from 1 to n\n    // >>> listRangeOdd(5)\n    // [1, 3]\n    def listRangeOdd(n\
    \ : Int) : Seq[Long] = {\n        if (n < 1) {\n            return Nil\n     \
    \   } else {\n            return (1 to n).filter(x -> x % 2 != 0).toSeq\n    \
    \    }\n    }\n\n    // Return a list of all the multiples of 3 from 1 to n\n\
    \    // >>> listRangeMultiplesOf3(5)\n    // [3, 3, 3, 6,", "        if (a ==\
    \ 0) {\n            return b\n        } else if (b == 0) {\n            return\
    \ a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n  \
    \      }", "        if (a == 0) return b\n        if (b == 0) return a\n     \
    \   if (a < b) return greatestCommonDivisor(b, a % b)\n        else return greatestCommonDivisor(a,\
    \ b % a)", "        if (a == 0) {\n            return b\n        } else {\n  \
    \          return greatestCommonDivisor(b % a, a)\n        }\n    }\n\n    //\
    \ Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b,\
    \ a)\n        }\n    }\n\n    // Return a list of all the prime numbers less than\
    \ or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n\
    \ : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n    \
    \    } else {\n            val result = new Vector[Long]()\n            val m\
    \ = scala.math.max(n, 2)\n            for (i <- 2 to m) {\n                if\
    \ (n % i == 0) {\n                    break\n                } else {\n      \
    \              result.add(i)\n                }\n            }\n            return\
    \ result.toSeq\n        }\n    }\n\n    // Return a list of all the prime numbers\
    \ less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def\
    \ primes2(n : Long) : Seq[Long] = {\n        if (n < 2) {\n            return\
    \ Nil\n        } else {\n            val result = new Vector[Long]()\n       \
    \     val m = scala.math.max(n, 2)\n            for (i <- 2 to m) {\n        \
    \        if (n % i == 0) {\n                    break\n                } else\
    \ {\n                    result.add(i)\n                }\n            }\n   \
    \         return result.toSeq\n        }\n    }\n\n    // Return a list of all\
    \ the prime numbers less than or equal to n\n    // >>> primes(10)\n    // [2,\
    \ 3, 5, 7]\n    def", "        if (a == 0) {\n            return b\n        }\
    \ else if (b == 0) {\n            return a\n        } else {\n            return\
    \ greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common\
    \ multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n\
    \    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n  \
    \  def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0)\
    \ {\n            return 0\n        } else if (b == 0) {\n            return 0\n\
    \        } else {\n            return a * leastCommonMultiple(b, a % b)\n    \
    \    }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l),\
    \ (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a\
    \ : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a\
    \ difference of two integers a and b\n    // >>> difference((3l), (5l))\n    //\
    \ (2l)\n    // >>> difference((25l), (15l))\n    // (10l)\n    def difference(a\
    \ : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a\
    \ product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n\
    \    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b\
    \ : Long) : Long = {\n        return a * b\n    }\n\n    // Return a quotient\
    \ of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (0.6l)\n  \
    \  // >>> quotient((25l), (15l))\n    // (2.0l)\n    def quotient(a : Long, b\
    \ : Long) : Long = {\n        return a / b\n    }\n\n    // Return a modulo of",
  "        if (a == 0) {\n            return b\n        } else if (b == 0) {\n   \
    \         return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n\
    \    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) :\
    \ Long = {\n        return a + b\n    }\n\n    // Return a product of two integers\
    \ a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l),\
    \ (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n    \
    \    return a * b\n    }\n\n    // Return a difference between two integers a\
    \ and b\n    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l),\
    \ (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n  \
    \      return a - b\n    }\n\n    // Return a quotient of two integers a and b\n\
    \    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n\
    \    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return\
    \ a / b\n    }\n\n    // Return a remainder of two integers a", "        if (a\
    \ == 0) {\n            return b\n        } else if (b == 0) {\n            return\
    \ a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n  \
    \      }\n    }\n\n    // Return a least common multiple of two integers a and\
    \ b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a,\
    \ b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n\
    \    // >>> range(5)\n    // [1, 2, 3, 4, 5]\n    def range(n : Int) : Seq[Long]\
    \ = {\n        if (n <= 0) {\n            return Nil\n        } else {\n     \
    \       return (1 to n).toSeq.map(x => x)\n        }\n    }\n\n    // Return a\
    \ list of the first n positive integers\n    // >>> range(5, 10)\n    // [5, 6,\
    \ 7, 8, 9]\n    def range(n : Int, start : Long) : Seq[Long] = {\n        if (n\
    \ <= 0) {\n            return Nil\n        } else {\n            return (start\
    \ to (start + n - 1)).toSeq.map(x => x)\n        }\n    }\n\n    // Return a list\
    \ of the first n positive integers\n    // >>> range(5, 10, 2)\n    // [5, 7,\
    \ 9]\n    def range(n : Int, start : Long, step : Int) : Seq[Long] = {\n     \
    \   if (n <= 0) {\n            return Nil\n        } else {\n            return\
    \ (start to (start + n - 1)).toSeq.map(x => x)\n        }\n    }\n\n    // Return\
    \ a list of the first n positive integers\n    // >>> range(5, 10", "        if\
    \ (a == 0) {\n            return b\n        } else if (b == 0) {\n           \
    \ return a\n        } else {\n            return greatestCommonDivisor(b, a %\
    \ b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a list of all the integers from 1 to n\n    // >>> range(5)\n    // [1, 2, 3,\
    \ 4, 5]\n    def range(n : Int) : Seq[Long] = {\n        if (n < 0) {\n      \
    \      throw new IllegalArgumentException(\"n should be non-negative\")\n    \
    \    } else if (n == 0) {\n            return Nil$()\n        } else {\n     \
    \       return (1 to n).toSeq.map(x => x + 1)\n        }\n    }\n\n    // Return\
    \ a list of all the even integers from 2 to n\n    // >>> evens(5)\n    // [2,\
    \ 4]\n    def evens(n : Int) : Seq[Long] = {\n        if (n < 0) {\n         \
    \   throw new IllegalArgumentException(\"n should be non-negative\")\n       \
    \ } else if (n == 0) {\n            return Nil$()\n        } else {\n        \
    \    return (2 to n).filter(x => x % 2 == 0).toSeq\n        }\n    }\n\n    //\
    \ Return a list of all the odd integers from 1 to n\n    // >>> odds(5)\n    //\
    \ [1, 3, 5]\n    def odds(n : Int) : Seq[Long] = {\n        if (n < 0) {\n   \
    \         throw new IllegalArgumentException(\"n should be non-negative\")\n \
    \       }", "        if (a == 0) {\n            return b\n        } else if (b\
    \ == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the integers from 1 to n\n    // >>> range(5)\n    // [1,\
    \ 2, 3, 4, 5]\n    def range(n : Int) : Seq[Long] = {\n        if (n < 0) {\n\
    \            throw new IllegalArgumentException(\"n should be non-negative\")\n\
    \        } else if (n == 0) {\n            return Nil$()\n        } else {\n \
    \           return (1 to n).toSeq.map(i => i + 1)\n        }\n    }\n\n    //\
    \ Return a list of the first n positive integers\n    // >>> range(5, 10)\n  \
    \  // [5, 6, 7, 8, 9]\n    def range(n : Int, start : Long) : Seq[Long] = {\n\
    \        if (n < 0) {\n            throw new IllegalArgumentException(\"n should\
    \ be non-negative\")\n        } else if (n == 0) {\n            return Nil$()\n\
    \        } else {\n            return (start to (start + n - 1)).toSeq.map(i =>\
    \ i + 1)\n        }\n    }\n\n    // Return a list of the first n positive integers\n\
    \    // >>> range(5, 10, 2)\n    // [5, 7, 9]\n    def range(n : Int, start :\
    \ Long, step : Int) : Seq[Long] = {\n        if (n <", "        if (a == 0) {\n\
    \            return b\n        } else if (b == 0) {\n            return a\n  \
    \      } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n\
    \    }\n\n    // Return a least common multiple of two integers a and b\n    //\
    \ >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b,\
    \ a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n  \
    \  // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n\
    \    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n \
    \   // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n\
    \    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a\
    \ : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a\
    \ difference of two integers a and b\n    // >>> difference((3l), (5l))\n    //\
    \ (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a\
    \ : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a\
    \ quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (0l)\n\
    \    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b\
    \ : Long) : Long = {\n        return a / b\n    }\n\n    // Return a modulo of\
    \ two integers a and", "        if (a == 0) {\n            return b\n        }\
    \ else if (b == 0) {\n            return a\n        } else {\n            return\
    \ greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common\
    \ multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n\
    \    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (375l)\n \
    \   def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0)\
    \ {\n            return 0\n        } else if (b == 0) {\n            return 0\n\
    \        } else {\n            return a * b / greatestCommonDivisor(a, b)\n  \
    \      }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l),\
    \ (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a\
    \ : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a\
    \ product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n\
    \    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b\
    \ : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference\
    \ of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n  \
    \  // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long,\
    \ b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient\
    \ of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    //\
    \ >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long)\
    \ : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two\
    \ integers a", "        if (a == 0) return b\n        if (b == 0) return a\n \
    \       if (a < b) return greatestCommonDivisor(b, a)\n        if (b < a) return\
    \ greatestCommonDivisor(a, b)\n        if (a % b == 0) return b\n        return\
    \ greatestCommonDivisor(b, a % b)\n    }\n\n    // Return a least common multiple\
    \ of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    //\
    \ (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) return 0\n        if (b ==\
    \ 0) return 0\n        if (a < b) return leastCommonMultiple(b, a)\n        if\
    \ (b < a) return leastCommonMultiple(a, b)\n        return a * b / greatestCommonDivisor(a,\
    \ b)\n    }\n\n    // Return a list of all the integers from a to b (inclusive)\n\
    \    // >>> listRange(1, 10)\n    // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    def\
    \ listRange(a : Int, b : Int) : Seq[Int] = {\n        if (a > b) {\n         \
    \   throw new IllegalArgumentException(\"a must be <= b\")\n        }\n      \
    \  return seq(a, b + 1)\n    }\n\n    // Return a list of all the even integers\
    \ from a to b (inclusive)\n    // >>> listRangeEven(1, 10)\n    // [2, 4, 6, 8,\
    \ 10]\n    def listRangeEven(a : Int, b : Int) : Seq[Int] = {\n        if (a >\
    \ b) {\n            throw new IllegalArgumentException(\"a must be <= b\")\n \
    \       }\n        return seq(a, b + 1).filter(i -> i % 2 == 0)\n    }\n\n   \
    \ // Return a list of all the odd integers from a to b (inclusive)\n    // >>>\
    \ listRangeOdd(1, 10)\n    // [1, 3", "        if (a == 0) return b\n        if\
    \ (b == 0) return a\n        if (a < b) return greatestCommonDivisor(b, a % b)\n\
    \        return greatestCommonDivisor(a, b % a)\n    }\n\n    // Return a least\
    \ common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) return 0\n        if (b == 0) return 0\n        if (a < b) return leastCommonMultiple(b,\
    \ a % b)\n        return leastCommonMultiple(a, b % a)\n    }\n\n    // Return\
    \ a greatest common divisor of a list of integers\n    // >>> greatestCommonDivisor([3l,\
    \ 5l, 25l])\n    // (1l)\n    def greatestCommonDivisor(a : List[Long]) : Long\
    \ = {\n        if (a.length == 0) return 0\n        if (a.length == 1) return\
    \ a.head\n        return greatestCommonDivisor(a.tail.map(_.head).toSeq())\n \
    \   }\n\n    // Return a least common multiple of a list of integers\n    // >>>\
    \ leastCommonMultiple([3l, 5l, 25l])\n    // (75l)\n    def leastCommonMultiple(a\
    \ : List[Long]) : Long = {\n        if (a.length == 0) return 0\n        if (a.length\
    \ == 1) return a.head\n        return leastCommonMultiple(a.tail.map(_.head).toSeq())\n\
    \    }\n\n    // Return a list of integers that are multiples of a given integer\n\
    \    // >>> multiples(5l)\n    // [0l, 5l, 10l, 15l, 20l, 25l, 30l, 35l, 40l,\
    \ 45l, 50l]\n    def multiples(n : Long) : List[Long] = {\n        if (n == 0)\
    \ return Nil\n        return Cons(0l, multiples(n + 1).map(x", "        if (a\
    \ == 0) {\n            return b\n        } else if (b == 0) {\n            return\
    \ a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n  \
    \      }", "        if (a == 0) {\n            return b\n        } else if (b\
    \ == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the integers from 1 to n\n    // >>> range(5)\n    // [1,\
    \ 2, 3, 4, 5]\n    def range(n : Int) : Seq[Long] = {\n        if (n < 0) {\n\
    \            throw new IllegalArgumentException(\"n < 0\")\n        } else if\
    \ (n == 0) {\n            return Nil$()\n        } else {\n            return\
    \ (1 to n).toSeq.map(i => i + 1)\n        }\n    }\n\n    // Return a list of\
    \ the first n positive integers\n    // >>> range(5, 10)\n    // [5, 6, 7, 8,\
    \ 9]\n    def range(n : Int, start : Long) : Seq[Long] = {\n        if (n < 0)\
    \ {\n            throw new IllegalArgumentException(\"n < 0\")\n        } else\
    \ if (n == 0) {\n            return Nil$()\n        } else {\n            return\
    \ (start to (start + n - 1)).toSeq.map(i => i + 1)\n        }\n    }\n\n    //\
    \ Return a list of the first n positive integers\n    // >>> range(5, 10, 2)\n\
    \    // [5, 7, 9]\n    def range(n : Int, start : Long, step : Int) : Seq[Long]\
    \ = {\n        if (n < 0) {\n            throw", "        if (a == 0) {\n    \
    \        return b\n        } else if (b == 0) {\n            return a\n      \
    \  } else {\n            return greatestCommonDivisor(b, a % b)\n        }", " \
    \       if (a == 0) {\n            return b\n        } else if (b == 0) {\n  \
    \          return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a list of all the integers from 1 to n\n    // >>> listRange(10)\n    // [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    def listRange(n : Int) : Seq[Long] = {\n  \
    \      if (n < 0) {\n            throw new IllegalArgumentException(\"n must be\
    \ non-negative\")\n        } else {\n            return (Seq[Long]((0..n).toIterator.map(_.toLong)))\n\
    \        }\n    }\n\n    // Return a list of all the even integers from 2 to n\n\
    \    // >>> listRange(10, even=True)\n    // [2, 4, 6, 8, 10]\n    def listRange(n\
    \ : Int, even : Boolean = false) : Seq[Long] = {\n        if (n < 0) {\n     \
    \       throw new IllegalArgumentException(\"n must be non-negative\")\n     \
    \   } else {\n            return (Seq[Long]((0..n).toIterator.filter(_.isEven).toIterator.map(_.toLong)))\n\
    \        }\n    }\n\n    // Return a list of all the primes from 2 to n\n    //\
    \ >>> listRange(10, prime=True)\n    // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\
    \    def listRange(n : Int, prime : Boolean = false) : Se", "        if (a ==\
    \ 0) {\n            return b\n        } else if (b == 0) {\n            return\
    \ a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n  \
    \      }\n    }\n\n    // Return a least common multiple of two integers a and\
    \ b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (375l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a,\
    \ b)\n        }\n    }\n\n    // Return a list of all the integers from 1 to n\n\
    \    // >>> listRange(5)\n    // [1, 2, 3, 4, 5]\n    def listRange(n : Int) :\
    \ Seq[Long] = {\n        for (i <- 1 until n) yield i\n    }\n\n    // Return\
    \ a list of all the integers from 1 to n\n    // >>> listRange(5)\n    // [1,\
    \ 2, 3, 4, 5]\n    def listRange(n : Int) : Seq[Long] = {\n        for (i <- 1\
    \ until n) yield i\n    }\n\n    // Return a list of all the integers from 1 to\
    \ n\n    // >>> listRange(5)\n    // [1, 2, 3, 4, 5]\n    def listRange(n : Int)\
    \ : Seq[Long] = {\n        for (i <- 1 until n) yield i\n    }\n\n    // Return\
    \ a list of all the integers from 1 to n\n    // >>> listRange(5)\n    // [1,\
    \ 2, 3, 4, 5]\n    def listRange(n : Int) : Seq[Long] = {\n        for (i <- 1\
    \ until n) yield i\n    }\n\n    // Return a list of all the integers from 1 to\
    \ n\n    // >>> listRange(5)\n    // [1, 2, 3, 4, 5]\n    def listRange(n : Int",
  "        if (a == 0) {\n            return b\n        } else if (b == 0) {\n   \
    \         return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n   \
    \ // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long\
    \ = {\n        return a + b\n    }\n\n    // Return a product of two integers\
    \ a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l),\
    \ (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n    \
    \    return a * b\n    }\n\n    // Return a difference of two integers a and b\n\
    \    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l),\
    \ (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n  \
    \      return a - b\n    }\n\n    // Return a quotient of two integers a and b\n\
    \    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n\
    \    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return\
    \ a / b\n    }\n\n    // Return a remainder of two integers a and b", "      \
    \  if (a == 0) {\n            return b\n        } else if (b == 0) {\n       \
    \     return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n   \
    \ // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long\
    \ = {\n        return a + b\n    }\n\n    // Return a product of two integers\
    \ a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l),\
    \ (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n    \
    \    return a * b\n    }\n\n    // Return a difference of two integers a and b\n\
    \    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l),\
    \ (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n  \
    \      return a - b\n    }\n\n    // Return a quotient of two integers a and b\n\
    \    // >>> quotient((3l), (5l))\n    // (0l)\n    // >>> quotient((25l), (15l))\n\
    \    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return\
    \ a / b\n    }\n\n    // Return a remainder of two integers a and b", "      \
    \  if (a == 0) {\n            return b\n        } else if (b == 0) {\n       \
    \     return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            val result = Nil\n\
    \            val m = (n - 1) / 2\n            for (i <- 2L to m) {\n         \
    \       if (n % i == 0) {\n                    return result\n               \
    \ } else {\n                    result = (result + i).updated(result.updated(i))\n\
    \                }\n            }\n            return result\n        }\n    }\n\
    \n    // Return a list of all the prime numbers less than or equal to n\n    //\
    \ >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] =\
    \ {\n        if (n < 2) {\n            return Nil\n        } else {\n        \
    \    val result = Nil\n            val m = (n - 1) / 2\n            for (i <-\
    \ 2L to m) {\n                if (n % i == 0) {\n                    return result\n\
    \                } else {\n                    result = (result + i).updated(result.updated(i))\n\
    \                }\n            }\n            return result\n        }\n    }\n\
    \n    // Return the sum of the squares of the first n", "        if (a == 0) {\n\
    \            return b\n        } else if (b == 0) {\n            return a\n  \
    \      } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n\
    \    }\n\n    // Return a least common multiple of two integers a and b\n    //\
    \ >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b,\
    \ a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n  \
    \  // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n\
    \    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n \
    \   // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n\
    \    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a\
    \ : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a\
    \ difference of two integers a and b\n    // >>> difference((3l), (5l))\n    //\
    \ (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a\
    \ : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a\
    \ quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n\
    \    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b\
    \ : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder\
    \ of two integers a and b", "        if (a == 0) {\n            return b\n   \
    \     } else {\n            return greatestCommonDivisor(b % a, a)\n        }\n\
    \    }\n\n    // Return a least common multiple of two integers a and b\n    //\
    \ >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else {\n       \
    \     return a * leastCommonMultiple(b, a) / greatestCommonDivisor(a, b)\n   \
    \     }\n    }\n\n    // Return a list of all the prime numbers less than or equal\
    \ to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) :\
    \ Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else\
    \ {\n            return (primes(n - 1).tail.map(_.next).append(n)).toSeq\n   \
    \     }\n    }\n\n    // Return a list of all the prime numbers less than or equal\
    \ to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Int)\
    \ : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else\
    \ {\n            return (Seq(2, n).filter(_.isPrime)).toSeq\n        }\n    }\n\
    \n    // Return a list of all the prime numbers less than or equal to n\n    //\
    \ >>> primes3(10)\n    // [2, 3, 5, 7]\n    def primes3(n : Int) : Seq[Long] =\
    \ {\n        if (n < 2) {\n            return Nil\n        } else {\n        \
    \    return (Seq(2, n).filter(_.isPrime)).toSeq\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes4(10)\n\
    \    // [2, 3, 5, 7]\n", "        if (a == 0) {\n            return b\n      \
    \  } else if (b == 0) {\n            return a\n        } else {\n            return\
    \ greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common\
    \ multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n\
    \    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n  \
    \  def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0)\
    \ {\n            return 0\n        } else if (b == 0) {\n            return 0\n\
    \        } else {\n            return a * leastCommonMultiple(b, a % b)\n    \
    \    }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l),\
    \ (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n\
    \        } else if (b == 0) {\n            return a\n        } else {\n      \
    \      return a + b\n        }\n    }\n\n    // Return a product of two integers\
    \ a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l),\
    \ (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n    \
    \    if (a == 0) {\n            return 0\n        } else if (b == 0) {\n     \
    \       return 0\n        } else {\n            return a * b\n        }\n    }\n\
    \n    // Return a difference of two integers a and b\n    // >>> difference((3l),\
    \ (5l))\n    // (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def\
    \ difference(a : Long, b : Long) : Long = {\n        if (a == 0) {\n         \
    \   return b\n        } else if (b == 0) {\n            return a\n        }",
  "        if (a == 0) {\n            return b\n        } else if (b == 0) {\n   \
    \         return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n   \
    \ // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long\
    \ = {\n        return a + b\n    }\n\n    // Return a product of two integers\
    \ a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l),\
    \ (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n    \
    \    return a * b\n    }\n\n    // Return a difference of two integers a and b\n\
    \    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l),\
    \ (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n  \
    \      return a - b\n    }\n\n    // Return a quotient of two integers a and b\n\
    \    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n\
    \    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return\
    \ a / b\n    }\n\n    // Return a modulo of two integers a and", "        if (a\
    \ == 0) {\n            return b\n        } else if (b == 0) {\n            return\
    \ a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n  \
    \      }\n    }\n\n    // Return a least common multiple of two integers a and\
    \ b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b,\
    \ a % b)\n        }\n    }\n\n    // Return a list of all the prime numbers less\
    \ than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n\
    \ : Long) : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n   \
    \     } else {\n            val result = ListBuffer[Long]()\n            val m\
    \ = scala.math.max(1, n / 2)\n            for (i <- 1 until m) {\n           \
    \     val p = 2 * i + 1\n                if (p <= n) {\n                    result.append(p)\n\
    \                }\n                for (j <- 1 until m) {\n                 \
    \   val q = p * j\n                    if (q <= n && greatestCommonDivisor(q,\
    \ p) == 1) {\n                        result.append(q)\n                    }\n\
    \                }\n            }\n            return result.toSeq\n        }\n\
    \    }\n\n    // Return a list of all the prime numbers less than or equal to\
    \ n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long]\
    \ = {\n        if (n == 0) {\n            return Nil\n        } else {\n     \
    \       val result = ListBuffer[Long]()\n            val m = scala.math.max(1,\
    \ n / 2)\n            for (i <- 1 until", "        if (a == 0) {\n           \
    \ return b\n        } else if (b == 0) {\n            return a\n        } else\
    \ {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n\
    \    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else if (b == 0) {\n            return\
    \ 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n\
    \        }\n    }\n\n    // Return a list of all the prime numbers less than or\
    \ equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long)\
    \ : List[Long] = {\n        if (n == 0) {\n            return Nil\n        } else\
    \ {\n            val result = Nil\n            val m = scala.math.max(n, 2)\n\
    \            for (i <- 0 until m) {\n                if (n % i == 0) {\n     \
    \               continue\n                }\n                val p = i\n     \
    \           result = result.updated(p)\n            }\n            return result\n\
    \        }\n    }\n\n    // Return a list of all the prime numbers less than or\
    \ equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n :\
    \ Long) : List[Long] = {\n        if (n == 0) {\n            return Nil\n    \
    \    } else {\n            val result = Nil\n            val m = scala.math.max(n,\
    \ 2)\n            for (i <- 0 until m) {\n                if (n % i == 0) {\n\
    \                    continue\n                }\n                val p = i\n\
    \                result = result.updated(p)\n            }\n            return\
    \ result\n        }\n    }\n\n    // Return a list of all the prime numbers less\
    \ than or equal to n\n    // >>> primes", "        if (a == 0) {\n           \
    \ return b\n        } else if (b == 0) {\n            return a\n        } else\
    \ {\n            return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n\
    \    // Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else if (b == 0) {\n            return\
    \ 0\n        } else {\n            return a * leastCommonMultiple(b, a % b)\n\
    \        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l),\
    \ (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a\
    \ : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a\
    \ difference of two integers a and b\n    // >>> difference((3l), (5l))\n    //\
    \ (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a\
    \ : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a\
    \ product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n\
    \    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b\
    \ : Long) : Long = {\n        return a * b\n    }\n\n    // Return a quotient\
    \ of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (0.6l)\n  \
    \  // >>> quotient((25l), (15l))\n    // (2.5l)\n    def quotient(a : Long, b\
    \ : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder\
    \ of two", "        if (a == 0) {\n            return b\n        } else if (b\
    \ == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n   \
    \ // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) : Long\
    \ = {\n        return a + b\n    }\n\n    // Return a product of two integers\
    \ a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l),\
    \ (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n    \
    \    return a * b\n    }\n\n    // Return a difference of two integers a and b\n\
    \    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l),\
    \ (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n  \
    \      return a - b\n    }\n\n    // Return a quotient of two integers a and b\n\
    \    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n\
    \    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return\
    \ a / b\n    }\n\n    // Return a remainder of two integers a and b", "      \
    \  if (a == 0) {\n            return b\n        } else if (b == 0) {\n       \
    \     return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Int) : Seq[Int] = {\n        if (n <\
    \ 2) {\n            return Nil\n        } else {\n            val result = new\
    \ Vector[Int]()\n            val m = scala.math.max(1, n / 2 - 1)\n          \
    \  for (i <- 1 until m) {\n                val p = 2 * i + 1\n               \
    \ if (p <= n) {\n                    result.add(p)\n                }\n      \
    \          for (j <- 1 until m) {\n                    val q = p * j\n       \
    \             if (q <= n && greatestCommonDivisor(q, p) == 1) {\n            \
    \            result.add(q)\n                    }\n                }\n       \
    \     }\n            return result.toSeq\n        }\n    }\n\n    // Return a\
    \ list of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n\
    \    // [2, 3, 5, 7]\n    def primes2(n : Int) : Seq[Int] = {\n        if (n <\
    \ 2) {\n            return Nil\n        } else {\n            val result = new\
    \ Vector[Int]()\n            val m = scala.math.max(1, n / 2 - 1)\n          \
    \  for", "        if (a == 0) {\n            return b\n        } else if (b ==\
    \ 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a list of all the integers from 1 to n\n    // >>> listRange(5)\n    // [1,\
    \ 2, 3, 4, 5]\n    def listRange(n : Int) : Seq[Long] = {\n        for (i <- 1\
    \ until n) yield i\n    }\n\n    // Return a list of all the even integers from\
    \ 1 to n\n    // >>> listRangeEven(5)\n    // [2, 4]\n    def listRangeEven(n\
    \ : Int) : Seq[Long] = {\n        for (i <- 1 until n) {\n            if (i %\
    \ 2 == 0) yield i\n        }\n    }\n\n    // Return a list of all the odd integers\
    \ from 1 to n\n    // >>> listRangeOdd(5)\n    // [1, 3, 5]\n    def listRangeOdd(n\
    \ : Int) : Seq[Long] = {\n        for (i <- 1 until n) {\n            if (i %\
    \ 2 == 1) yield i\n        }\n    }\n\n    // Return a list of all the multiples\
    \ of 3 from 1 to n\n    // >>> listMultiplesOf3(5)\n    // [3, 6, 9, 12, 15]\n\
    \    def listMultiplesOf3(n : Int) : Seq[Long] = {\n        for (i <- 1 until\
    \ n) {\n            if (i % 3 == 0) yield i\n        }\n    ", "        if (a\
    \ == 0) {\n            return b\n        } else if (b == 0) {\n            return\
    \ a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n  \
    \      }\n    }\n\n    // Return a least common multiple of two integers a and\
    \ b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b,\
    \ a % b)\n        }\n    }\n\n    // Return a greatest common divisor of a list\
    \ of integers\n    // >>> greatestCommonDivisor([3l, 5l, 25l])\n    // (5l)\n\
    \    def greatestCommonDivisor(a : List[Long]) : Long = {\n        if (a.isEmpty())\
    \ {\n            return 0\n        } else {\n            return greatestCommonDivisor(a.head(),\
    \ a.tail().head())\n        }\n    }\n\n    // Return a least common multiple\
    \ of a list of integers\n    // >>> leastCommonMultiple([3l, 5l, 25l])\n    //\
    \ (75l)\n    def leastCommonMultiple(a : List[Long]) : Long = {\n        if (a.isEmpty())\
    \ {\n            return 0\n        } else {\n            return leastCommonMultiple(a.head(),\
    \ a.tail().head())\n        }\n    }\n\n    // Return a list of all the integers\
    \ that are multiples of the input integer\n    // >>> multiples(5l)\n    // [0l,\
    \ 5l, 10l, 15l, 20l, 25l, 30l, 35l, 40l, 45l, 50l, 55l, 60l, 65l, 70l, 75l, 80l,\
    \ 85l, 90l, 95l, 100l]\n    def multiples(a : Long) : List[Long] = {\n       \
    \ if (a == 0) {\n            return List[Long](", "        if (a == 0) {\n   \
    \         return b\n        } else if (b == 0) {\n            return a\n     \
    \   } else {\n            return greatestCommonDivisor(b, a % b)\n        }\n\
    \    }\n\n    // Return a least common multiple of two integers a and b\n    //\
    \ >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * b / greatestCommonDivisor(a,\
    \ b)\n        }\n    }\n\n    // Return a list of all the prime numbers less than\
    \ or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n\
    \ : Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n    \
    \    } else {\n            val result = Nil\n            val m = (n - 1) / 2\n\
    \            for (i <- 2L to m) {\n                if (n % i == 0) {\n       \
    \             return Nil\n                }\n            }\n            for (i\
    \ <- 2L to m) {\n                if (n % i == 0) {\n                    result\
    \ = Cons(i, result)\n                }\n            }\n            return result\n\
    \        }\n    }\n\n    // Return a list of all the prime numbers less than or\
    \ equal to n\n    // >>> primes2(10)\n    // [2, 3, 5, 7]\n    def primes2(n :\
    \ Long) : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n      \
    \  } else {\n            val result = Nil\n            val m = (n - 1) / 2\n \
    \           for (i <- 2L to m) {\n                if (n % i == 0) {\n        \
    \            return Nil\n                }\n            }\n            for (i\
    \ <- 2L to m) {\n                if (n % i == 0) {\n                    ", " \
    \       if (a == 0) {\n            return b\n        } else if (b == 0) {\n  \
    \          return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            val result = Nil\n\
    \            val m = scala.math.max(n, 2)\n            for (i <- 2L) {\n     \
    \           if (i <= m) {\n                    val p = i\n                   \
    \ while (p * p <= n) {\n                        p = p + 1\n                  \
    \  }\n                    result = result.updated(p)\n                }\n    \
    \        }\n            return result\n        }\n    }\n\n    // Return a list\
    \ of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n \
    \   // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            val result = Nil\n\
    \            val m = scala.math.max(n, 2)\n            for (i <- 2L) {\n     \
    \           if (i <= m) {\n                    val p = i\n                   \
    \ while (p * p <= n) {\n                        p = p + 1\n                  \
    \  }\n                    result = result.updated(p)\n                }\n", " \
    \       if (a == 0) {\n            return b\n        } else {\n            return\
    \ greatestCommonDivisor(b % a, a)\n        }\n    }\n\n    // Return a least common\
    \ multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n\
    \    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n  \
    \  def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0)\
    \ {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b,\
    \ a) / greatestCommonDivisor(a, b)\n        }\n    }\n\n    // Return a list of\
    \ all the integers from 1 to n\n    // >>> range(5)\n    // [1, 2, 3, 4, 5]\n\
    \    def range(n : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw\
    \ new IllegalArgumentException(\"n should be non-negative\")\n        } else {\n\
    \            return (1 to n)\n        }\n    }\n\n    // Return a list of all\
    \ the even integers from 2 to n\n    // >>> evens(5)\n    // [2, 4]\n    def evens(n\
    \ : Int) : Seq[Long] = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n should be non-negative\")\n        } else {\n            return (2 to n).filter(_.mod(2)\
    \ == 0)\n        }\n    }\n\n    // Return a list of all the primes from 2 to\
    \ n\n    // >>> primes(5)\n    // [2, 3, 5]\n    def primes(n : Int) : Seq[Long]\
    \ = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n should be non-negative\")\n        } else {\n            return (2 to n).filter(_.isPrime())\n\
    \        }\n    }\n\n    // Return a list of all the permutations of the elements\
    \ of the list\n    // >>> permutations([1, 2, 3])\n    // [[1, 2, 3], [1, 3, 2",
  "        if (a == 0) {\n            return b\n        } else if (b == 0) {\n   \
    \         return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the integers from 1 to n\n    // >>> range(5)\n    // [1,\
    \ 2, 3, 4, 5]\n    def range(n : Int) : Seq[Long] = {\n        if (n < 0) {\n\
    \            throw new IllegalArgumentException(\"n should be non-negative\")\n\
    \        } else if (n == 0) {\n            return Nil$()\n        } else {\n \
    \           return (1 to n).toSeq.map(i => i)\n        }\n    }\n\n    // Return\
    \ a list of all the even integers from 2 to n\n    // >>> evens(5)\n    // [2,\
    \ 4]\n    def evens(n : Int) : Seq[Long] = {\n        if (n < 0) {\n         \
    \   throw new IllegalArgumentException(\"n should be non-negative\")\n       \
    \ } else if (n == 0) {\n            return Nil$()\n        } else {\n        \
    \    return (2 to n).filter(i => i % 2 == 0).toSeq\n        }\n    }\n\n    //\
    \ Return a list of all the odd integers from 1 to n\n    // >>> odds(5)\n    //\
    \ [1, 3, 5]\n    def odds(n : Int) : Seq[Long] = {\n        if (n < 0) {\n   \
    \         throw new IllegalArgumentException(\"n should be non-negative\")\n \
    \       }", "        if (a == 0) {\n            return b\n        } else if (b\
    \ == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }", "        if (a == 0) {\n            return b\n        }\
    \ else if (b == 0) {\n            return a\n        } else {\n            return\
    \ greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common\
    \ multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n\
    \    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n  \
    \  def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0)\
    \ {\n            return 0\n        } else if (b == 0) {\n            return 0\n\
    \        } else {\n            return a * b / greatestCommonDivisor(a, b)\n  \
    \      }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l),\
    \ (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a\
    \ : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a\
    \ product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n\
    \    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b\
    \ : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference\
    \ of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n  \
    \  // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long,\
    \ b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient\
    \ of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    //\
    \ >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long)\
    \ : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two\
    \ integers a", "        if (a == 0) {\n            return b\n        } else if\
    \ (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            val result = Nil\n\
    \            val m = n - 1\n            for (i <- 2 to m) {\n                if\
    \ (m % i == 0) {\n                    return result\n                } else {\n\
    \                    result = result.prepend(i)\n                }\n         \
    \   }\n            result = result.prepend(n)\n            return result\n   \
    \     }\n    }\n\n    // Return a list of all the prime numbers less than or equal\
    \ to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long)\
    \ : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else\
    \ {\n            val result = Nil\n            val m = n - 1\n            for\
    \ (i <- 2 to m) {\n                if (m % i == 0) {\n                    return\
    \ result\n                } else {\n                    result = result.prepend(i)\n\
    \                }\n            }\n            result = result.prepend(n)\n  \
    \          return result\n        }\n    }\n\n    // Return a list of all the\
    \ prime numbers", "        if (a == 0) {\n            return b\n        } else\
    \ if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * leastCommonMultiple(b, a % b)\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            val result = Nil\n\
    \            val i = 2L\n            while (i <= n) {\n                if (n %\
    \ i == 0) {\n                    // skip\n                } else {\n         \
    \           result = result.prepend(i)\n                }\n                i =\
    \ i + 1\n            }\n            return result\n        }\n    }\n\n    //\
    \ Return a list of all the prime numbers less than or equal to n\n    // >>> primes2(10)\n\
    \    // [2, 3, 5, 7]\n    def primes2(n : Long) : Seq[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            val result = Nil\n\
    \            val i = 2L\n            while (i <= n) {\n                if (n %\
    \ i == 0) {\n                    // skip\n                } else {\n         \
    \           result = result.prepend(i)\n                }\n                i =\
    \ i + 1\n            }\n            return result\n        }\n    }\n\n    //\
    \ Return a list of all the prime numbers less than or equal to n\n    // >>> primes3(10",
  "        if (a == 0) {\n            return b\n        } else if (b == 0) {\n   \
    \         return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes(n : Int) : Seq[Long] = {\n        if (n ==\
    \ 0) {\n            return Nil\n        } else {\n            return (Seq.range(2,\
    \ n).filter(x => {\n                return x % 2 == 0 && x != 2 && x != 3\n  \
    \          })).toSeq\n        }\n    }\n\n    // Return a list of all the prime\
    \ numbers less than or equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n\
    \    def primes(n : Int) : Seq[Long] = {\n        if (n == 0) {\n            return\
    \ Nil\n        } else {\n            return (Seq.range(2, n).filter(x => {\n \
    \               return x % 2 == 0 && x != 2 && x != 3\n            })).toSeq\n\
    \        }\n    }\n\n    // Return a list of all the prime numbers less than or\
    \ equal to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int)\
    \ : Seq[Long] = {\n        if (n == 0) {\n            return Nil\n        } else\
    \ {\n            return (Seq.range(2", "        if (a == 0) {\n            return\
    \ b\n        } else if (b == 0) {\n            return a\n        } else {\n  \
    \          return greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    //\
    \ Return a least common multiple of two integers a and b\n    // >>> leastCommonMultiple((3l),\
    \ (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n\
    \    def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a ==\
    \ 0) {\n            return 0\n        } else if (b == 0) {\n            return\
    \ 0\n        } else {\n            return a * b / greatestCommonDivisor(a, b)\n\
    \        }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l),\
    \ (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a\
    \ : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a\
    \ difference of two integers a and b\n    // >>> difference((3l), (5l))\n    //\
    \ (2l)\n    // >>> difference((25l), (15l))\n    // (10l)\n    def difference(a\
    \ : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a\
    \ product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n\
    \    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b\
    \ : Long) : Long = {\n        return a * b\n    }\n\n    // Return a quotient\
    \ of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (0.6l)\n  \
    \  // >>> quotient((25l), (15l))\n    // (2.0l)\n    def quotient(a : Long, b\
    \ : Long) : Long = {\n        return a / b\n    }\n\n    // Return a mod", " \
    \       if (a == 0) {\n            return b\n        } else if (b == 0) {\n  \
    \          return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a list of all the integers from 1 to n\n    // >>> listRange(5)\n   \
    \ // [1, 2, 3, 4, 5]\n    def listRange(n : Int) : Seq[Long] = {\n        for\
    \ (i <- 0 until n) yield (i + 1)\n    }\n\n    // Return a list of all the even\
    \ integers from 2 to n\n    // >>> listRangeEven(5)\n    // [2, 4, 6, 8, 10]\n\
    \    def listRangeEven(n : Int) : Seq[Long] = {\n        for (i <- 0 until n)\
    \ {\n            if (i % 2 == 0) yield (i + 1)\n        }\n    }\n\n    // Return\
    \ a list of all the primes from 2 to n\n    // >>> listRangePrime(5)\n    // [2,\
    \ 3, 5, 7]\n    def listRangePrime(n : Int) : Seq[Long] = {\n        for (i <-\
    \ 0 until n) {\n            if (isPrime(i)) yield (i + 1)\n        }\n    }\n\n\
    \    // Return a list of all the primes from 2 to n\n    // >>> listRangePrime(5)\n\
    \    // [2, 3, 5, 7]\n    def listRangePrime2(n : Int) : Seq[Long] = {\n     \
    \   for (i <- 0 until n) {\n            if (is", "        if (a == 0) {\n    \
    \        return b\n        } else {\n            return greatestCommonDivisor(b\
    \ % a, a)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else {\n            return a * leastCommonMultiple(b, a)\n        }\n\
    \    }\n\n    // Return a list of all the prime numbers less than or equal to\
    \ n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Long) : Seq[Long]\
    \ = {\n        if (n < 2) {\n            return Nil\n        } else {\n      \
    \      return (primes(n - 2) ++ (2 toSeq(2 to i while (i lt n)))).toList\n   \
    \     }\n    }\n\n    // Return a list of all the prime numbers less than or equal\
    \ to n\n    // >>> primes(10)\n    // [2, 3, 5, 7]\n    def primes2(n : Long)\
    \ : Seq[Long] = {\n        if (n < 2) {\n            return Nil\n        } else\
    \ {\n            return (2 toSeq(2 to i while (i lt n)) ++ (primes2(n - 2) ++\
    \ (2 toSeq(2 to i while (i lt n))))).toList\n        }\n    }\n\n    // Return\
    \ a list of all the prime numbers less than or equal to n\n    // >>> primes(10)\n\
    \    // [2, 3, 5, 7]\n    def primes3(n : Long) : Seq[Long] = {\n        if (n\
    \ < 2) {\n            return Nil\n        } else {\n            return (2 toSeq(2\
    \ to i while (i lt n)) ++ (primes3(n - 2) ++ (2 toSeq(2 to i while (i lt", " \
    \       if (a == 0) {\n            return b\n        } else if (b == 0) {\n  \
    \          return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }", "        if (a == 0) {\n            return b\n        }\
    \ else if (b == 0) {\n            return a\n        } else {\n            return\
    \ greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common\
    \ multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n\
    \    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n  \
    \  def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0)\
    \ {\n            return 0\n        } else if (b == 0) {\n            return 0\n\
    \        } else {\n            return a * leastCommonMultiple(b, a % b)\n    \
    \    }\n    }\n\n    // Return a sum of two integers a and b\n    // >>> sum((3l),\
    \ (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a\
    \ : Long, b : Long) : Long = {\n        return a + b\n    }\n\n    // Return a\
    \ product of two integers a and b\n    // >>> product((3l), (5l))\n    // (15l)\n\
    \    // >>> product((25l), (15l))\n    // (375l)\n    def product(a : Long, b\
    \ : Long) : Long = {\n        return a * b\n    }\n\n    // Return a difference\
    \ of two integers a and b\n    // >>> difference((3l), (5l))\n    // (2l)\n  \
    \  // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a : Long,\
    \ b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a quotient\
    \ of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n    //\
    \ >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b : Long)\
    \ : Long = {\n        return a / b\n    }\n\n    // Return a remainder of two\
    \ integers a and b", "        if (a == 0) {\n            return b\n        } else\
    \ if (b == 0) {\n            return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }", "        if (a == 0) {\n            return b\n        }\
    \ else if (b == 0) {\n            return a\n        } else {\n            return\
    \ greatestCommonDivisor(b, a % b)\n        }\n    }\n\n    // Return a least common\
    \ multiple of two integers a and b\n    // >>> leastCommonMultiple((3l), (5l))\n\
    \    // (15l)\n    // >>> leastCommonMultiple((25l), (15l))\n    // (75l)\n  \
    \  def leastCommonMultiple(a : Long, b : Long) : Long = {\n        if (a == 0)\
    \ {\n            return 0\n        } else if (b == 0) {\n            return 0\n\
    \        } else {\n            return a * b / greatestCommonDivisor(a, b)\n  \
    \      }\n    }\n\n    // Return a list of all the integers from 1 to n\n    //\
    \ >>> range(5)\n    // [1, 2, 3, 4, 5]\n    def range(n : Int) : Seq[Long] = {\n\
    \        if (n < 0) {\n            throw new IllegalArgumentException(\"n < 0\"\
    )\n        } else {\n            return (1 until n).toSeq\n        }\n    }\n\n\
    \    // Return a list of all the even integers from 2 to n\n    // >>> evens(10)\n\
    \    // [2, 4, 6, 8, 10]\n    def evens(n : Int) : Seq[Long] = {\n        if (n\
    \ < 0) {\n            throw new IllegalArgumentException(\"n < 0\")\n        }\
    \ else {\n            return (2 until n).filter(x -> x % 2 == 0).toSeq\n     \
    \   }\n    }\n\n    // Return a list of all the primes less than n\n    // >>>\
    \ primes(10)\n    // [2, 3, 5, 7]\n    def primes(n : Int) : Seq[Long] = {\n \
    \       if (n < 0) {\n            throw new IllegalArgumentException(\"n < 0\"\
    )\n        } else {\n            return (2 until n).filter(x -> x < n).filter(x\
    \ -> {\n                for (i <- (x - 2) / 2) {\n                    if", " \
    \       if (a == 0) {\n            return b\n        } else if (b == 0) {\n  \
    \          return a\n        } else {\n            return greatestCommonDivisor(b,\
    \ a % b)\n        }\n    }\n\n    // Return a least common multiple of two integers\
    \ a and b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>>\
    \ leastCommonMultiple((25l), (15l))\n    // (75l)\n    def leastCommonMultiple(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return 0\n\
    \        } else if (b == 0) {\n            return 0\n        } else {\n      \
    \      return a * b / greatestCommonDivisor(a, b)\n        }\n    }\n\n    //\
    \ Return a sum of two integers a and b\n    // >>> sum((3l), (5l))\n    // (8l)\n\
    \    // >>> sum((25l), (15l))\n    // (50l)\n    def sum(a : Long, b : Long) :\
    \ Long = {\n        return a + b\n    }\n\n    // Return a product of two integers\
    \ a and b\n    // >>> product((3l), (5l))\n    // (15l)\n    // >>> product((25l),\
    \ (15l))\n    // (375l)\n    def product(a : Long, b : Long) : Long = {\n    \
    \    return a * b\n    }\n\n    // Return a difference of two integers a and b\n\
    \    // >>> difference((3l), (5l))\n    // (2l)\n    // >>> difference((25l),\
    \ (15l))\n    // (25l)\n    def difference(a : Long, b : Long) : Long = {\n  \
    \      return a - b\n    }\n\n    // Return a quotient of two integers a and b\n\
    \    // >>> quotient((3l), (5l))\n    // (3l)\n    // >>> quotient((25l), (15l))\n\
    \    // (2l)\n    def quotient(a : Long, b : Long) : Long = {\n        return\
    \ a / b\n    }\n\n    // Return a remainder of two integers a", "        if (a\
    \ == 0) {\n            return b\n        } else if (b == 0) {\n            return\
    \ a\n        } else {\n            return greatestCommonDivisor(b, a % b)\n  \
    \      }\n    }\n\n    // Return a least common multiple of two integers a and\
    \ b\n    // >>> leastCommonMultiple((3l), (5l))\n    // (15l)\n    // >>> leastCommonMultiple((25l),\
    \ (15l))\n    // (75l)\n    def leastCommonMultiple(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0) {\n            return 0\n        } else if (b == 0)\
    \ {\n            return 0\n        } else {\n            return a * leastCommonMultiple(b,\
    \ a % b)\n        }\n    }\n\n    // Return a sum of two integers a and b\n  \
    \  // >>> sum((3l), (5l))\n    // (8l)\n    // >>> sum((25l), (15l))\n    // (50l)\n\
    \    def sum(a : Long, b : Long) : Long = {\n        return a + b\n    }\n\n \
    \   // Return a product of two integers a and b\n    // >>> product((3l), (5l))\n\
    \    // (15l)\n    // >>> product((25l), (15l))\n    // (375l)\n    def product(a\
    \ : Long, b : Long) : Long = {\n        return a * b\n    }\n\n    // Return a\
    \ difference of two integers a and b\n    // >>> difference((3l), (5l))\n    //\
    \ (2l)\n    // >>> difference((25l), (15l))\n    // (25l)\n    def difference(a\
    \ : Long, b : Long) : Long = {\n        return a - b\n    }\n\n    // Return a\
    \ quotient of two integers a and b\n    // >>> quotient((3l), (5l))\n    // (3l)\n\
    \    // >>> quotient((25l), (15l))\n    // (2l)\n    def quotient(a : Long, b\
    \ : Long) : Long = {\n        return a / b\n    }\n\n    // Return a remainder\
    \ of two integers a and b", "        if (a == 0) {\n            return b\n   \
    \     } else if (b == 0) {\n            return a\n        } else {\n         \
    \   return greatestCommonDivisor(b, a % b)\n        }"]
stop_tokens:
- "\n    }\n"
