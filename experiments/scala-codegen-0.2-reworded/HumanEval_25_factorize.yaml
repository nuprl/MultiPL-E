name: HumanEval_25_factorize
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return list of prime factors of given integer in the order from smallest\
  \ to largest.\n    // Each of the factors should be listed number of times corresponding\
  \ to how many times it appeares in factorization.\n    // Input number should be\
  \ equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
  \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
  \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
  \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
  \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong,\
  \ 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong,\
  \ 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong,\
  \ 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
  \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
  \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
  \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
completions: ["        var factors = List[Long]()\n        var i = 2l\n        while\
    \ (i <= n) {\n            while (n % i == 0) {\n                factors = append(factors,\
    \ i)\n                n /= i\n            }\n            i = i + 1l\n        }\n\
    \        if (n > 1l) {\n            factors = append(factors, n)\n        }\n\
    \        return factors", "        val factors = new ArrayList[Long]()\n     \
    \   val divisor = 2l\n        while (n > 1l) {\n            while (n % divisor\
    \ == 0) {\n                factors.add(divisor)\n                n /= divisor\n\
    \            }\n            divisor += 1\n        }\n        factors.add(n)\n\
    \        return factors\n    }\n\n    // Return the sum of all prime factors of\
    \ given integer\n    // >>> primeFactorization(8l)\n    // 2l\n    // >>> primeFactorization(25l)\n\
    \    // 5l\n    // >>> primeFactorization(70l)\n    // 7l\n    // >>> primeFactorization(100l)\n\
    \    // 11l\n    def primeFactorization(n : Long) : Long = {\n        val factors\
    \ = factorize(n)\n        var sum = 1l\n        for (i <- 0 until factors.size)\
    \ {\n            sum *= factors.apply(i)\n        }\n        return sum\n    }\n\
    \n    // Return the sum of all divisors of given integer\n    // >>> divisorSum(8l)\n\
    \    // 2l\n    // >>> divisorSum(25l)\n    // 5l\n    // >>> divisorSum(70l)\n\
    \    // 7l\n    // >>> divisorSum(100l)\n    // 11l\n    def divisorSum(n : Long)\
    \ : Long = {\n        val factors = factorize(n)\n        var sum = 1l\n     \
    \   for (i <- 0 until factors.size) {\n            sum *= factors.apply(i)\n \
    \       }\n        return sum - n\n    }\n\n    // Return the sum of all divisors\
    \ of given integer\n    // >>> divisorSum(8l)\n    // 2l\n    // >>> divisorSum(25l)\n\
    \    // 5l\n    // >>> divisorSum(70l)\n    // 7l\n    // >>> divisorSum(100l)\n\
    \    // 11l\n    def divisorSum2(n : Long) : Long = {\n        val factors = factorize(n)\n\
    \        var sum = 1l\n        for (i <- 0 until factors.size", "        val factors\
    \ = List[Long]()\n        val divisors = scala.math.factorial(n)\n        for\
    \ (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n\
    \            val divisorFactors = divisor.toLong.toList\n            for (j <-\
    \ 0 until divisorFactors.size) {\n                val divisorFactor = divisorFactors.apply(j)\n\
    \                if (divisorFactor.toLong == n) {\n                    factors\
    \ = factors.append(divisorFactor)\n                }\n            }\n        }\n\
    \        return factors", "        var factors = List[Long]()\n        var i =\
    \ 2l\n        while (i <= n) {\n            while (n % i == 0) {\n           \
    \     factors = append(factors, i)\n                n /= i\n            }\n  \
    \          i = i + 1l\n        }\n        factors", "        val factors = List[Long]()\n\
    \        val primeFactors = List[Long]()\n        val factorsList = List[Long]()\n\
    \        val primeFactorsList = List[Long]()\n        val factorsCount = 0\n \
    \       val primeFactorsCount = 0\n        val factorsMax = 0\n        val primeFactorsMax\
    \ = 0\n        val i = 0\n        val j = 0\n        val k = 0\n        val l\
    \ = 0\n        val m = 0\n        val n = 0\n        val p = 0\n        val q\
    \ = 0\n        val r = 0\n        val s = 0\n        val t = 0\n        val u\
    \ = 0\n        val v = 0\n        val w = 0\n        val x = 0\n        val y\
    \ = 0\n        val z = 0\n        val factorsListSize = 0\n        val primeFactorsListSize\
    \ = 0\n        val factorsListMax = 0\n        val primeFactorsListMax = 0\n \
    \       val factorsCountMax = 0\n        val primeFactorsCountMax = 0\n      \
    \  val factorsMaxSize = 0\n        val primeFactorsMaxSize = 0\n        val factorsMaxSizeMax\
    \ = 0\n        val primeFactorsMaxSizeMax = 0\n        val factorsCountMaxSize\
    \ = 0\n        val primeFactorsCountMaxSize = 0\n        val factorsCountMaxSizeMax\
    \ = 0\n        val primeFactorsCountMaxSizeMax = 0\n        val factorsMaxSizeMaxSize\
    \ = 0\n        val primeFactorsMaxSizeMaxSize = 0\n        val factorsMaxSizeMaxSizeMax\
    \ = 0\n        val primeFactorsMaxSizeMaxSizeMax = 0\n        val factorsCountMaxSizeMaxSize\
    \ = 0\n        val primeFactorsCountMaxSizeMaxSize = 0\n        val factorsCountMaxSizeMaxSizeMax\
    \ = 0\n        val primeFactorsCountMaxSizeMaxSizeMax = 0\n        val factorsMaxSizeMaxSizeMaxSize\
    \ = 0\n        val primeFactorsMaxSizeMaxSizeMaxSize = 0\n        val factorsMaxSizeMaxSizeMaxSizeMax\
    \ = 0\n        val primeFactorsMaxSizeMaxSizeMaxSizeMax = 0\n        val factorsCountMaxSizeMaxSizeMaxSize\
    \ = 0\n        val primeFactorsCountMaxSizeMaxSizeMaxSize = 0\n        val factorsCountMaxSizeMaxSizeMaxSizeMax\
    \ = 0\n        val primeFactorsCount", "        val factors = new ArrayList[Long]()\n\
    \        val divisor = 2l\n        while (n > 1l) {\n            while (n % divisor\
    \ == 0l) {\n                n /= divisor\n                factors.add(divisor)\n\
    \            }\n            divisor++\n        }\n        return factors\n   \
    \ }\n\n    // Return list of prime factors of given integer in the order from\
    \ largest to smallest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n :\
    \ Long) : List[Long] = {\n        val factors = new ArrayList[Long]()\n      \
    \  val divisor = 2l\n        while (n > 1l) {\n            while (n % divisor\
    \ == 0l) {\n                n /= divisor\n                factors.add(divisor)\n\
    \            }\n            divisor++\n        }\n        return factors\n   \
    \ }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def", "        val factors\
    \ = mutable.List[Long]()\n        val i = 2l\n        while (i <= n) {\n     \
    \       if (n % i == 0) {\n                factors.append(i)\n               \
    \ factors.append(n / i)\n                n = n / i\n            } else {\n   \
    \             i = i + 1\n            }\n        }\n        factors", "       \
    \ val factors = List[Long]()\n        val i = 2l\n        while (i <= n) {\n \
    \           if (n % i == 0) {\n                val factor = i\n              \
    \  val count = 1l\n                while (n % i == 0) {\n                    count\
    \ += 1l\n                    n /= i\n                }\n                factors\
    \ = factors.append(factor).append(count)\n            }\n            i += 1\n\
    \        }\n        if (n > 1l) {\n            factors = factors.append(n)\n \
    \       }\n        return factors", "        var factors = List[Long]()\n    \
    \    var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n\
    \                factors = append(factors, i)\n                n /= i\n      \
    \      }\n            i = i + 1l\n        }\n        if (n > 1l) {\n         \
    \   factors = append(factors, n)\n        }\n        return factors", "      \
    \  val factors = List[Long]()\n        val factorization = n.toLong\n        while\
    \ (factorization > 1l) {\n            val factor = factorization % 2l\n      \
    \      if (factor == 0l) {\n                factors = factors.append(2l)\n   \
    \         } else {\n                factors = factors.append(factorization)\n\
    \            }\n            factorization = factorization / 2l\n        }\n  \
    \      return factors\n    }\n\n    // Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    // Each of the factors should be\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n\
    \        val factorization = n.toLong\n        while (factorization > 1l) {\n\
    \            val factor = factorization % 2l\n            if (factor == 0l) {\n\
    \                factors = factors.append(2l)\n            } else {\n        \
    \        factors = factors.append(factorization)\n            }\n            factorization\
    \ = factorization / 2l\n        }\n        return factors\n    }\n\n    // Return\
    \ list of prime factors of given integer in the order from smallest to largest.\n\
    \    // Each of the factors should be listed number of times corresponding to\
    \ how many times it appeares in factorization.\n    // Input number should be\
    \ equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))", "        val factors = mutable.List[Long]()\n        val nFactors\
    \ = mutable.List[Long]()\n        val nFactors2 = mutable.List[Long]()\n     \
    \   val nFactors3 = mutable.List[Long]()\n        val nFactors4 = mutable.List[Long]()\n\
    \        val nFactors5 = mutable.List[Long]()\n        val nFactors6 = mutable.List[Long]()\n\
    \        val nFactors7 = mutable.List[Long]()\n        val nFactors8 = mutable.List[Long]()\n\
    \        val nFactors9 = mutable.List[Long]()\n        val nFactors10 = mutable.List[Long]()\n\
    \        val nFactors11 = mutable.List[Long]()\n        val nFactors12 = mutable.List[Long]()\n\
    \        val nFactors13 = mutable.List[Long]()\n        val nFactors14 = mutable.List[Long]()\n\
    \        val nFactors15 = mutable.List[Long]()\n        val nFactors16 = mutable.List[Long]()\n\
    \        val nFactors17 = mutable.List[Long]()\n        val nFactors18 = mutable.List[Long]()\n\
    \        val nFactors19 = mutable.List[Long]()\n        val nFactors20 = mutable.List[Long]()\n\
    \        val nFactors21 = mutable.List[Long]()\n        val nFactors22 = mutable.List[Long]()\n\
    \        val nFactors23 = mutable.List[Long]()\n        val nFactors24 = mutable.List[Long]()\n\
    \        val nFactors25 = mutable.List[Long]()\n        val nFactors26 = mutable.List[Long]()\n\
    \        val nFactors27 = mutable.List[Long]()\n        val nFactors28 = mutable.List[Long]()\n\
    \        val nFactors29 = mutable.List[Long]()\n        val nFactors30 = mutable.List[Long]()\n\
    \        val nFactors31 = mutable.List[Long]()\n        val nFact", "        var\
    \ factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n     \
    \       while (n % i == 0) {\n                factors = factors.append(i)\n  \
    \              n /= i\n            }\n            i = i + 1l\n        }\n    \
    \    factors\n    }\n\n    // Return list of prime factors of given integer in\
    \ the order from largest to smallest.\n    // Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = factors.append(i)\n                n /= i\n   \
    \         }\n            i = i + 1l\n        }\n        factors\n    }\n\n   \
    \ // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> primeFactors((8l))\n    //\
    \ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactorsWithRemainder(n\
    \ : Long) : List[T", "        var factors = List[Long]()\n        var i = 2l\n\
    \        while (i <= n) {\n            while (n % i == 0) {\n                factors\
    \ = append(factors, i)\n                n /= i\n            }\n            i =\
    \ i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors,\
    \ n)\n        }\n        return factors", "        val factors = new ArrayList[Long]\n\
    \        val factorization = factor(n)\n        for (i <- 0 until factorization.size)\
    \ {\n            factors.add(factorization.get(i))\n        }\n        return\
    \ factors\n    }\n\n    // Return list of prime factors of given integer in the\
    \ order from smallest to largest.\n    // Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factor(8)\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>>\
    \ factor(25)\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factor(70)\n\
    \    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factor(n : Long)\
    \ : List[Long] = {\n        val factors = new ArrayList[Long]\n        val factorization\
    \ = factor(n)\n        for (i <- 0 until factorization.size) {\n            factors.add(factorization.get(i))\n\
    \        }\n        return factors\n    }\n\n    // Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    // Each of the\
    \ factors should be listed number of times corresponding to how many times it\
    \ appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> factor(8)\n    // (List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))\n    // >>> factor(25)\n    // (List[Long](5l.toLong, 5l.toLong))\n\
    \    // >>> factor(70)\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def factor(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n\
    \        val factorization = factor(n)\n        for (i <- 0 until factorization.size)\
    \ {\n            factors.add(factorization.get(i))\n        }\n        return",
  "        val factors = new ArrayList[Long]\n        val d = 2l\n        while (n\
    \ > 1l) {\n            while (n % d == 0l) {\n                factors.add(d)\n\
    \                n /= d\n            }\n            d = d + 1l\n        }\n  \
    \      factors", "        val factors = new ArrayList[Long]\n        val divisor\
    \ = 2l\n        while divisor * divisor <= n {\n            if n % divisor ==\
    \ 0 {\n                factors.add(divisor)\n                n /= divisor\n  \
    \          } else {\n                divisor += 1\n            }\n        }\n\
    \        if n > 1 {\n            factors.add(n)\n        }\n        return factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n :\
    \ Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val\
    \ divisor = 2l\n        while divisor * divisor <= n {\n            if n % divisor\
    \ == 0 {\n                factors.add(divisor)\n                n /= divisor\n\
    \            } else {\n                divisor += 1\n            }\n        }\n\
    \        if n > 1 {\n            factors.add(n)\n        }\n        return factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.to", "        val factors = List[Long]()\n        val divisors\
    \ = scala.math.factorial(n)\n        for (i <- 0 until divisors) {\n         \
    \   if (n % i == 0) {\n                val factor = i\n                val count\
    \ = divisors.div(i)\n                factors = factors.append(factor).append(count)\n\
    \            }\n        }\n        return factors\n    }\n\n    // Return list\
    \ of prime factors of given integer in the order from smallest to largest.\n \
    \   // Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    // Input number should be equal\
    \ to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors\
    \ = List[Long]()\n        val divisors = scala.math.factorial(n)\n        for\
    \ (i <- 0 until divisors) {\n            if (n % i == 0) {\n                val\
    \ factor = i\n                val count = divisors.div(i)\n                factors\
    \ = factors.append(factor).append(count)\n            }\n        }\n        return\
    \ factors\n    }\n\n    // Return list of prime factors of given integer in the\
    \ order from smallest to largest.\n    // Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l", "        val factors = mutable.List[Long]()\n  \
    \      val nFactors = mutable.List[Long]()\n        val nFactors2 = mutable.List[Long]()\n\
    \        val nFactors3 = mutable.List[Long]()\n        val nFactors4 = mutable.List[Long]()\n\
    \        val nFactors5 = mutable.List[Long]()\n        val nFactors6 = mutable.List[Long]()\n\
    \        val nFactors7 = mutable.List[Long]()\n        val nFactors8 = mutable.List[Long]()\n\
    \        val nFactors9 = mutable.List[Long]()\n        val nFactors10 = mutable.List[Long]()\n\
    \        val nFactors11 = mutable.List[Long]()\n        val nFactors12 = mutable.List[Long]()\n\
    \        val nFactors13 = mutable.List[Long]()\n        val nFactors14 = mutable.List[Long]()\n\
    \        val nFactors15 = mutable.List[Long]()\n        val nFactors16 = mutable.List[Long]()\n\
    \        val nFactors17 = mutable.List[Long]()\n        val nFactors18 = mutable.List[Long]()\n\
    \        val nFactors19 = mutable.List[Long]()\n        val nFactors20 = mutable.List[Long]()\n\
    \        val nFactors21 = mutable.List[Long]()\n        val nFactors22 = mutable.List[Long]()\n\
    \        val nFactors23 = mutable.List[Long]()\n        val nFactors24 = mutable.List[Long]()\n\
    \        val nFactors25 = mutable.List[Long]()\n        val nFactors26 = mutable.List[Long]()\n\
    \        val nFactors27 = mutable.List[Long]()\n        val nFactors28 = mutable.List[Long]()\n\
    \        val nFactors29 = mutable.List[Long]()\n        val nFactors30 = mutable.List[Long]()\n\
    \        val nFactors31 = mutable.List[Long]()\n        val nFact", "        val\
    \ factors = List[Long]()\n        val nfactors = n.toLong\n        for (i <- 0\
    \ until nfactors) {\n            val factor = nfactors.divide(i + 1)\n       \
    \     if (factor.isZero) break\n            factors = factors.append(factor)\n\
    \        }\n        return factors\n    }\n\n    // Return list of prime factors\
    \ of given integer in the order from largest to smallest.\n    // Each of the\
    \ factors should be listed number of times corresponding to how many times it\
    \ appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> factorize2((8l))\n    // (List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))\n    // >>> factorize2((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n\
    \    // >>> factorize2((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def factorize2(n : Long) : List[Long] = {\n        val factors = List[Long]()\n\
    \        val nfactors = n.toLong\n        for (i <- nfactors.toLong.max to nfactors.toLong.min)\
    \ {\n            val factor = nfactors.divide(i)\n            if (factor.isZero)\
    \ break\n            factors = factors.append(factor)\n        }\n        return\
    \ factors\n    }\n\n    // Return list of prime factors of given integer in the\
    \ order from smallest to largest.\n    // Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize3((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n   \
    \ // >>> factorize3((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    //\
    \ >>> factorize3((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.", "    \
    \    var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n\
    \            while (n % i == 0) {\n                factors = factors.append(i)\n\
    \                n /= i\n            }\n            i = i + 1l\n        }\n  \
    \      if (n > 1l) {\n            factors = factors.append(n)\n        }\n   \
    \     return factors\n    }\n\n    // Return the number of divisors of given integer.\n\
    \    // >>> divisors(8l)\n    // 2\n    // >>> divisors(25l)\n    // 5\n    //\
    \ >>> divisors(70l)\n    // 7\n    def divisors(n : Long) : Long = {\n       \
    \ var i = 2l\n        var count = 1l\n        while (i <= n) {\n            if\
    \ (n % i == 0) {\n                count = count + 1l\n            }\n        \
    \    i = i + 1l\n        }\n        return count\n    }\n\n    // Return the number\
    \ of divisors of given integer.\n    // >>> divisors2(8l)\n    // 2\n    // >>>\
    \ divisors2(25l)\n    // 5\n    // >>> divisors2(70l)\n    // 7\n    def divisors2(n\
    \ : Long) : Long = {\n        var i = 2l\n        var count = 1l\n        while\
    \ (i <= n) {\n            if (n % i == 0) {\n                count = count + 1l\n\
    \            }\n            i = i + 1l\n        }\n        return count\n    }\n\
    \n    // Return the number of divisors of given integer.\n    // >>> divisors3(8l)\n\
    \    // 2\n    // >>> divisors3(25l)\n    // 5\n    // >>> divisors3(70l)\n  \
    \  // 7\n    def divisors3(n : Long) : Long = {\n        var i = 2l\n        var\
    \ count = 1l\n        while (i <= n) {\n            if (n % i == 0) {\n      \
    \          count = count + 1l\n            }\n            i = i + 1l\n       \
    \ }\n        ", "        var factors = List[Long]()\n        var i = 2l\n    \
    \    while (i <= n) {\n            while (n % i == 0) {\n                factors\
    \ = append(factors, i)\n                n /= i\n            }\n            i =\
    \ i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors,\
    \ n)\n        }\n        return factors\n    }\n\n    // Return list of prime\
    \ factors of given integer in the order from smallest to largest.\n    // Each\
    \ of the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors\
    \ = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while\
    \ (n % i == 0) {\n                factors = append(factors, i)\n             \
    \   n /= i\n            }\n            i = i + 1l\n        }\n        if (n >\
    \ 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>>", "        val factors\
    \ = new ArrayList[Long]\n        val divisors = scala.math.factorial.divisors(n)\n\
    \        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n\
    \            val factor = n / divisor\n            factors.append(factor)\n  \
    \      }\n        factors", "        val factors = new ArrayList[Long]\n     \
    \   val nfactors = scala.math.factorial(n)\n        for (i <- 0 until nfactors)\
    \ {\n            val factor = scala.math.factorial(i)\n            if (factor\
    \ * factor == n) {\n                factors.add(factor)\n            }\n     \
    \   }\n        factors\n    }\n\n    // Return list of prime factors of given\
    \ integer in the order from smallest to largest.\n    // Each of the factors should\
    \ be listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n\
    \        val nfactors = scala.math.factorial(n)\n        for (i <- 0 until nfactors)\
    \ {\n            val factor = scala.math.factorial(i)\n            if (factor\
    \ * factor == n) {\n                factors.add(factor)\n            }\n     \
    \   }\n        factors\n    }\n\n    // Return list of prime factors of given\
    \ integer in the order from smallest to largest.\n    // Each of the factors should\
    \ be listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.", "        if\
    \ (n == 0) return Nil\n        if (n == 1) return List(1l)\n        if (n == 2)\
    \ return List(2l)\n        if (n == 3) return List(3l)\n        if (n == 4) return\
    \ List(2l, 2l)\n        if (n == 5) return List(5l)\n        if (n == 6) return\
    \ List(2l, 3l)\n        if (n == 7) return List(7l)\n        if (n == 8) return\
    \ List(2l, 2l, 2l)\n        if (n == 9) return List(3l, 3l)\n        if (n ==\
    \ 10) return List(5l, 2l)\n        if (n == 11) return List(11l)\n        if (n\
    \ == 12) return List(2l, 2l, 2l, 2l)\n        if (n == 13) return List(13l)\n\
    \        if (n == 14) return List(7l, 2l)\n        if (n == 15) return List(15l)\n\
    \        if (n == 16) return List(2l, 2l, 2l, 2l, 2l)\n        if (n == 17) return\
    \ List(17l)\n        if (n == 18) return List(3l, 3l, 2l)\n        if (n == 19)\
    \ return List(19l)\n        if (n == 20) return List(2l, 2l, 2l, 2l, 2l)\n   \
    \     if (n == 21) return List(3l, 7l)\n        if (n == 22) return List(11l,\
    \ 2l)\n        if (n == 23) return List(23l)\n        if (n == 24) return List(2l,\
    \ 2l, 2l, 2l, 2l, 2l)\n        if (n == 25) return List(5l, 5l)\n        if (n\
    \ == 26) return List(2l, 2l, 2l, 2l, 2l, 2l)\n        if (n == 27) return List(3l,\
    \ 3l, 3l)\n        if (n == 28) return List(2l, 2l, 2l,", "        val factors\
    \ = List[Long]()\n        val i = 2l\n        while (i <= n) {\n            while\
    \ (n % i == 0) {\n                factors = append(factors, i)\n             \
    \   n /= i\n            }\n            i = i + 1l\n        }\n        factors",
  "        var factors = List[Long]()\n        var i = 2l\n        while (i <= n)\
    \ {\n            while (n % i == 0) {\n                factors = factors.append(i)\n\
    \                n /= i\n            }\n            i += 1\n        }\n      \
    \  if (n > 1) factors = factors.append(n)\n        return factors", "        var\
    \ factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n     \
    \       while (n % i == 0) {\n                factors = append(factors, i)\n \
    \               n /= i\n            }\n            i = i + 1l\n        }\n   \
    \     if (n > 1l) {\n            factors = append(factors, n)\n        }\n   \
    \     return factors\n    }\n\n    // Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    // Each of the factors should be\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = append(factors, i)\n                n /= i\n  \
    \          }\n            i = i + 1l\n        }\n        if (n > 1l) {\n     \
    \       factors = append(factors, n)\n        }\n        return factors\n    }\n\
    \n    // Return list of prime factors of given integer in the order from largest\
    \ to smallest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> primeFactorsLarger((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactorsLarger((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))", "        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = append(factors, i)\n                n /= i\n  \
    \          }\n            i = i + 1l\n        }\n        if (n > 1l) {\n     \
    \       factors = append(factors, n)\n        }\n        return factors\n    }\n\
    \n    // Return the sum of all prime factors of given integer.\n    // Input number\
    \ should be equal to the product of all factors\n    // >>> sumOfPrimeFactors(8l)\n\
    \    // 2l\n    // >>> sumOfPrimeFactors(25l)\n    // 5l\n    // >>> sumOfPrimeFactors(70l)\n\
    \    // 23l\n    def sumOfPrimeFactors(n : Long) : Long = {\n        var factors\
    \ = factorize(n)\n        var sum = 1l\n        for (i <- 0 until factors.length)\
    \ {\n            sum *= factors(i)\n        }\n        return sum\n    }\n\n \
    \   // Return the sum of all prime factors of given integer.\n    // Input number\
    \ should be equal to the product of all factors\n    // >>> sumOfPrimeFactors(8l)\n\
    \    // 2l\n    // >>> sumOfPrimeFactors(25l)\n    // 5l\n    // >>> sumOfPrimeFactors(70l)\n\
    \    // 23l\n    def sumOfPrimeFactors2(n : Long) : Long = {\n        var factors\
    \ = factorize(n)\n        var sum = 1l\n        for (i <- 0 until factors.length)\
    \ {\n            sum *= factors(i)\n        }\n        return sum\n    }\n\n \
    \   // Return the sum of all prime factors of given integer.\n    // Input number\
    \ should be equal to the product of all factors\n    // >>> sumOfPrimeFactors(8l)\n\
    \    // 2l\n    // >>> sumOfPrimeFactors(25l)\n    // 5l\n    // >>> sumOfPrimeFactors(70l)\n\
    \    // 23l\n    def sumOfPrimeFactors3(n : Long) : Long = {\n        var factors\
    \ = factorize(n)\n        var sum =", "        val factors = new ArrayList[Long]\n\
    \        val m = n\n        while (m > 1) {\n            val d = m.div(2)\n  \
    \          if (d.isDefined()) {\n                factors.add(d.get())\n      \
    \          m = m.sub(d.get() * 2)\n            } else {\n                break\n\
    \            }\n        }\n        factors.add(m)\n        return factors\n  \
    \  }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n :\
    \ Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val\
    \ m = n\n        while (m > 1) {\n            val d = m.div(2)\n            if\
    \ (d.isDefined()) {\n                factors.add(d.get())\n                m =\
    \ m.sub(d.get() * 2)\n            } else {\n                break\n          \
    \  }\n        }\n        factors.add(m)\n        return factors\n    }\n\n   \
    \ // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> primeFactors((8l))\n    //\
    \ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.to", "        var factors = List[Long]()\n \
    \       var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n\
    \                factors = factors.append(i)\n                n /= i\n       \
    \     }\n            i = i + 1l\n        }\n        if (n > 1l) {\n          \
    \  factors = factors.append(n)\n        }\n        return factors", "        var\
    \ factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n     \
    \       while (n % i == 0) {\n                factors = append(factors, i)\n \
    \               n /= i\n            }\n            i = i + 1l\n        }\n   \
    \     if (n > 1l) {\n            factors = append(factors, n)\n        }\n   \
    \     return factors", "        val factors = new ArrayList[Long]\n        val\
    \ primeFactors = primeFactors(n)\n        for (i <- 0 until primeFactors.size)\
    \ {\n            val primeFactor = primeFactors.apply(i)\n            val factorCount\
    \ = n.divide(primeFactor).toLong\n            factors.add(factorCount)\n     \
    \   }\n        return factors\n    }\n\n    // Return list of prime factors of\
    \ given integer in the order from smallest to largest.\n    // Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n    // Input number should be equal to the product of all\
    \ factors\n    // >>> primeFactors(8l)\n    // (List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))\n    // >>> primeFactors(25l)\n    // (List[Long](5l.toLong, 5l.toLong))\n\
    \    // >>> primeFactors(70l)\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n\
    \        val primeFactors = new ArrayList[Long]\n        val i = 2l\n        while\
    \ (i <= n) {\n            if (n.mod(i).equals(0l)) {\n                primeFactors.add(i)\n\
    \                n = n.divide(i)\n            } else {\n                i = i\
    \ + 1\n            }\n        }\n        for (i <- 0 until primeFactors.size)\
    \ {\n            val primeFactor = primeFactors.apply(i)\n            val factorCount\
    \ = n.divide(primeFactor).toLong\n            factors.add(factorCount)\n     \
    \   }\n        return factors\n    }\n\n    // Return list of prime factors of\
    \ given integer in the order from smallest to largest.\n    // Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n    // Input number should be equal to the product of all\
    \ factors\n    // >>> primeFactors(8l)\n    // (List[Long](2l.toLong", "     \
    \   var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n\
    \            while (n % i == 0) {\n                factors = factors.append(i)\n\
    \                n /= i\n            }\n            i = i + 1l\n        }\n  \
    \      if (n > 1l) {\n            factors = factors.append(n)\n        }\n   \
    \     return factors\n    }\n\n    // Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    // Each of the factors should be\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = factors.append(i)\n                n /= i\n   \
    \         }\n            i = i + 1l\n        }\n        if (n > 1l) {\n      \
    \      factors = factors.append(n)\n        }\n        return factors\n    }\n\
    \n    // Return list of prime factors of given integer in the order from largest\
    \ to smallest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> primeFactorsLarger((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactorsLarger((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>>", "        var factors\
    \ = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while\
    \ (n % i == 0) {\n                factors = factors.append(i)\n              \
    \  n /= i\n            }\n            i = i + 1l\n        }\n        return factors",
  "        val factors = new ArrayList[Long]()\n        val nfactors = scala.math.factorial(n)\n\
    \        for (i <- 0 until nfactors) {\n            val factor = scala.math.factorial(i)\n\
    \            if (factor * nfactors % n == 0) {\n                factors.add(factor)\n\
    \                factors.add(nfactors / factor)\n            }\n        }\n  \
    \      factors", "        var factors = List[Long]()\n        var i = 2l\n   \
    \     while (i <= n) {\n            while (n % i == 0) {\n                factors\
    \ = factors.append(i)\n                n /= i\n            }\n            i =\
    \ i + 1l\n        }\n        factors\n    }\n\n    // Return list of prime factors\
    \ of given integer in the order from largest to smallest.\n    // Each of the\
    \ factors should be listed number of times corresponding to how many times it\
    \ appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors\
    \ = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while\
    \ (n % i == 0) {\n                factors = factors.append(i)\n              \
    \  n /= i\n            }\n            i = i + 1l\n        }\n        factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors2(n\
    \ : Long) : List[Long] = {", "        val factors = new ArrayList[Long]\n    \
    \    val num = n\n        while (num > 1) {\n            val divisor = num.div(2)\n\
    \            if (divisor.isDefined) {\n                factors.add(divisor.get())\n\
    \                num = num.sub(divisor.get()).div(2)\n            } else {\n \
    \               break\n            }\n        }\n        return factors\n    }\n\
    \n    // Return list of prime factors of given integer in the order from largest\
    \ to smallest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> primeFactors((8l))\n    //\
    \ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n :\
    \ Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val\
    \ num = n\n        while (num > 1) {\n            val divisor = num.div(2)\n \
    \           if (divisor.isDefined) {\n                factors.add(divisor.get())\n\
    \                num = num.sub(divisor.get()).div(2)\n            } else {\n \
    \               break\n            }\n        }\n        return factors\n    }\n\
    \n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> primeFactors((8l))\n    //\
    \ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l", "        var factors = List[Long]()\n    \
    \    var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n\
    \                factors = append(factors, i)\n                n /= i\n      \
    \      }\n            i += 1\n        }\n        if (n > 1) {\n            factors\
    \ = append(factors, n)\n        }\n        return factors\n    }\n\n    // Return\
    \ the sum of all prime factors of given integer\n    // >>> primeFactors(8l)\n\
    \    // 2l.toLong\n    // >>> primeFactors(25l)\n    // 5l.toLong\n    // >>>\
    \ primeFactors(70l)\n    // 2l.toLong + 5l.toLong + 7l.toLong\n    def primeFactors(n\
    \ : Long) : Long = {\n        var factors = List[Long]()\n        var i = 2l\n\
    \        while (i <= n) {\n            while (n % i == 0) {\n                factors\
    \ = append(factors, i)\n                n /= i\n            }\n            i +=\
    \ 1\n        }\n        if (n > 1) {\n            factors = append(factors, n)\n\
    \        }\n        var sum = 0l\n        for (i <- factors) {\n            sum\
    \ += i\n        }\n        return sum\n    }\n\n    // Return the sum of all prime\
    \ factors of given integer\n    // >>> primeFactors(8l)\n    // 2l.toLong\n  \
    \  // >>> primeFactors(25l)\n    // 5l.toLong\n    // >>> primeFactors(70l)\n\
    \    // 2l.toLong + 5l.toLong + 7l.toLong\n    def primeFactors2(n : Long) : Long\
    \ = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i\
    \ <= n) {\n            while (n % i == 0) {\n                factors = append(factors,\
    \ i)\n                n /= i\n            }\n            i += 1\n        }\n \
    \       if (n > 1) {\n            factors = append(factors, n)\n        }\n  \
    \      var sum = 0l\n        for", "        val factors = List[Long]()\n     \
    \   val i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n    \
    \            factors = factors.append(i)\n                factors = factors.append(n\
    \ / i)\n                i = i + 1\n            } else {\n                i = i\
    \ + 1\n            }\n        }\n        return factors\n    }\n\n    // Return\
    \ list of prime factors of given integer in the order from smallest to largest.\n\
    \    // Each of the factors should be listed number of times corresponding to\
    \ how many times it appeares in factorization.\n    // Input number should be\
    \ equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors\
    \ = List[Long]()\n        val i = 2l\n        while (i <= n) {\n            if\
    \ (n % i == 0) {\n                factors = factors.append(i)\n              \
    \  factors = factors.append(n / i)\n                i = i + 1\n            } else\
    \ {\n                i = i + 1\n            }\n        }\n        return factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2", "        var factors = List[Long]()\n        var i = 2l\n\
    \        while (i <= n) {\n            while (n % i == 0) {\n                factors\
    \ = append(factors, i)\n                n /= i\n            }\n            i =\
    \ i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors,\
    \ n)\n        }\n        return factors", "        val factors = new ArrayList[Long]\n\
    \        val primeFactors = primeFactors(n)\n        for (i <- 0 until primeFactors.size)\
    \ {\n            val primeFactor = primeFactors(i)\n            val factorCount\
    \ = n / primeFactor\n            factors.append(primeFactor)\n            factors.append(factorCount)\n\
    \        }\n        return factors\n    }\n\n    // Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    // Each of the\
    \ factors should be listed number of times corresponding to how many times it\
    \ appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> primeFactors(8l)\n    // (List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))\n    // >>> primeFactors(25l)\n    // (List[Long](5l.toLong, 5l.toLong))\n\
    \    // >>> primeFactors(70l)\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n\
    \        val primeFactors = new ArrayList[Long]\n        val i = 2\n        while\
    \ (i <= n) {\n            if (n % i == 0) {\n                primeFactors.append(i)\n\
    \                n /= i\n            } else {\n                i += 1\n      \
    \      }\n        }\n        if (n > 1) {\n            primeFactors.append(n)\n\
    \        }\n        factors.appendAll(primeFactors)\n        return factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors(8l)\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors(25l)\n\
    \    // (List[Long](5l.to", "        val factors = List[Long]()\n        val divisors\
    \ = scala.math.factorial(n.toLong)\n        for (i <- 0 until divisors) {\n  \
    \          if (n % i == 0) {\n                factors = factors.append(i)\n  \
    \              n /= i\n            }\n        }\n        factors = factors.reverse()\n\
    \        return factors\n    }\n\n    // Return list of prime factors of given\
    \ integer in the order from largest to smallest.\n    // Each of the factors should\
    \ be listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](7l.toLong, 2l.toLong, 5l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n\
    \        val divisors = scala.math.factorial(n.toLong)\n        for (i <- 0 until\
    \ divisors) {\n            if (n % i == 0) {\n                factors = factors.append(i)\n\
    \                n /= i\n            }\n        }\n        factors = factors.reverse()\n\
    \        return factors\n    }\n\n    // Return list of prime factors of given\
    \ integer in the order from smallest to largest.\n    // Each of the factors should\
    \ be listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2", "        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = append(factors, i)\n                n /= i\n  \
    \          }\n            i += 1\n        }\n        if (n > 1) {\n          \
    \  factors = append(factors, n)\n        }\n        return factors", "       \
    \ var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n \
    \           if (n % i == 0) {\n                factors = factors.append(i)\n \
    \               factors = factors.append(n / i)\n            }\n            i\
    \ = i + 1l\n        }\n        return factors\n    }\n\n    // Return list of\
    \ prime factors of given integer in the order from largest to smallest.\n    //\
    \ Each of the factors should be listed number of times corresponding to how many\
    \ times it appeares in factorization.\n    // Input number should be equal to\
    \ the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](7l.toLong, 2l.toLong,\
    \ 5l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors\
    \ = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            if\
    \ (n % i == 0) {\n                factors = factors.append(i)\n              \
    \  factors = factors.append(n / i)\n            }\n            i = i + 1l\n  \
    \      }\n        return factors\n    }\n\n    // Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    // Each of the\
    \ factors should be listed number of times corresponding to how many times it\
    \ appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFact", "        val factors = new ArrayList[Long]\n\
    \        val nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors)\
    \ {\n            val factor = scala.math.factorial(i)\n            if (factor\
    \ * factor == n) {\n                factors.append(factor)\n            }\n  \
    \      }\n        return factors", "        var factors = List[Long]()\n     \
    \   var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n    \
    \            factors = factors.append(i)\n                factors = factors.append(n\
    \ / i)\n            }\n            i = i + 1l\n        }\n        return factors\n\
    \    }\n\n    // Return the sum of all prime factors of given integer.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // 2l.toLong\n    // >>> primeFactors((25l))\n    // 5l.toLong\n    // >>>\
    \ primeFactors((70l))\n    // 2l.toLong + 5l.toLong + 7l.toLong\n    def primeFactors(n\
    \ : Long) : Long = {\n        var factors = List[Long]()\n        var i = 2l\n\
    \        while (i <= n) {\n            if (n % i == 0) {\n                factors\
    \ = factors.append(i)\n                factors = factors.append(n / i)\n     \
    \       }\n            i = i + 1l\n        }\n        return factors.reduce(_.sum)\n\
    \    }\n\n    // Return the sum of all prime factors of given integer.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors2((8l))\n\
    \    // 2l.toLong\n    // >>> primeFactors2((25l))\n    // 5l.toLong\n    // >>>\
    \ primeFactors2((70l))\n    // 2l.toLong + 5l.toLong + 7l.toLong\n    def primeFactors2(n\
    \ : Long) : Long = {\n        var factors = List[Long]()\n        var i = 2l\n\
    \        while (i <= n) {\n            if (n % i == 0) {\n                factors\
    \ = factors.append(i)\n                factors = factors.append(n / i)\n     \
    \       }\n            i = i + 1l\n        }\n        return factors.reduce(_.sum)\n\
    \    }\n\n    // Return the sum of all prime factors of given integer.\n    //\
    \ Input number should be equal to the product", "        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = factors.append(i)\n                n /= i\n   \
    \         }\n            i = i + 1l\n        }\n        factors", "        var\
    \ factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n     \
    \       while (n % i == 0) {\n                factors = append(factors, i)\n \
    \               n /= i\n            }\n            i = i + 1l\n        }\n   \
    \     if (n > 1l) {\n            factors = append(factors, n)\n        }\n   \
    \     return factors\n    }\n\n    // Return the sum of all prime factors of given\
    \ integer\n    // >>> primeFactorsSum(2l)\n    // 2l\n    // >>> primeFactorsSum(6l)\n\
    \    // 6l\n    // >>> primeFactorsSum(8l)\n    // 2l\n    // >>> primeFactorsSum(25l)\n\
    \    // 5l\n    // >>> primeFactorsSum(70l)\n    // 7l\n    def primeFactorsSum(n\
    \ : Long) : Long = {\n        var factors = factorize(n)\n        var sum = 0l\n\
    \        for (i <- 0 until factors.length) {\n            sum = sum + factors[i]\n\
    \        }\n        return sum\n    }\n\n    // Return the product of all prime\
    \ factors of given integer\n    // >>> primeFactorsProduct(2l)\n    // 2l\n  \
    \  // >>> primeFactorsProduct(6l)\n    // 6l\n    // >>> primeFactorsProduct(8l)\n\
    \    // 2l\n    // >>> primeFactorsProduct(25l)\n    // 5l\n    // >>> primeFactorsProduct(70l)\n\
    \    // 7l\n    def primeFactorsProduct(n : Long) : Long = {\n        var factors\
    \ = factorize(n)\n        var product = 1l\n        for (i <- 0 until factors.length)\
    \ {\n            product = product * factors[i]\n        }\n        return product\n\
    \    }\n\n    // Return the sum of all divisors of given integer\n    // >>> divisorsSum(2l)\n\
    \    // 2l\n    // >>> divisorsSum(6l)\n    // 6l\n    // >>> divisorsSum(8l)\n\
    \    // 2l\n    // >>> divisorsSum(25l)\n    // 5l\n    ", "        val factors\
    \ = List[Long]()\n        val divisors = scala.math.factorial(n)\n        for\
    \ (divisor <- divisors) {\n            if (divisor == 1) continue\n          \
    \  val divisorFactor = n / divisor\n            if (divisorFactor == 1) continue\n\
    \            factors = factors.append(divisorFactor)\n        }\n        factors",
  "        val factors = mutable.List[Long]()\n        val nFactors = n.toLong\n \
    \       for (i <- 0 until nFactors) {\n            val factor = nFactors.div(i\
    \ + 1)\n            if (factor.toLong == 1) {\n                break\n       \
    \     }\n            factors.append(factor)\n        }\n        return factors",
  "        var factors = List[Long]()\n        var i = 2l\n        while (i <= n)\
    \ {\n            while (n % i == 0) {\n                factors = factors.append(i)\n\
    \                n /= i\n            }\n            i = i + 1l\n        }\n  \
    \      if (n > 1l) factors = factors.append(n)\n        return factors", "   \
    \     var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n\
    \            while (n % i == 0) {\n                factors = factors.append(i)\n\
    \                n /= i\n            }\n            i = i + 1l\n        }\n  \
    \      if (n > 1l) {\n            factors = factors.append(n)\n        }\n   \
    \     return factors\n    }\n\n    // Return the sum of all prime factors of given\
    \ integer.\n    // >>> prime_factors((8l))\n    // 2l\n    // >>> prime_factors((25l))\n\
    \    // 5l\n    // >>> prime_factors((70l))\n    // 2l + 5l + 7l\n    def prime_factors(n\
    \ : Long) : Long = {\n        var factors = List[Long]()\n        var i = 2l\n\
    \        while (i <= n) {\n            while (n % i == 0) {\n                factors\
    \ = factors.append(i)\n                n /= i\n            }\n            i =\
    \ i + 1l\n        }\n        if (n > 1l) {\n            factors = factors.append(n)\n\
    \        }\n        return factors.foldLeft(0l)((x, y) => x + y)\n    }\n\n  \
    \  // Return the sum of all prime factors of given integer.\n    // >>> prime_factors_scala((8l))\n\
    \    // 2l\n    // >>> prime_factors_scala((25l))\n    // 5l\n    // >>> prime_factors_scala((70l))\n\
    \    // 2l + 5l + 7l\n    def prime_factors_scala(n : Long) : Long = {\n     \
    \   var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n\
    \            while (n % i == 0) {\n                factors = factors.append(i)\n\
    \                n /= i\n            }\n            i = i + 1l\n        }\n  \
    \      if (n > 1l) {\n            factors = factors.append(n)\n        }\n   \
    \     return factors.foldLeft(0l)((x, y) => x + y", "        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = factors.append(i)\n                n /= i\n   \
    \         }\n            i = i + 1l\n        }\n        factors", "        var\
    \ factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n     \
    \       while (n % i == 0) {\n                factors = factors.append(i)\n  \
    \              n /= i\n            }\n            i = i + 1l\n        }\n    \
    \    factors", "        var factors = List[Long]()\n        var i = 2l\n     \
    \   while (i <= n) {\n            while (n % i == 0) {\n                factors\
    \ = factors.append(i)\n                n /= i\n            }\n            i =\
    \ i + 1l\n        }\n        if (n > 1l) {\n            factors = factors.append(n)\n\
    \        }\n        return factors\n    }\n\n    // Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    // Each of the\
    \ factors should be listed number of times corresponding to how many times it\
    \ appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors\
    \ = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while\
    \ (n % i == 0) {\n                factors = factors.append(i)\n              \
    \  n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l)\
    \ {\n            factors = factors.append(n)\n        }\n        return factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((", "    \
    \    val factors = new ArrayList[Long]()\n        val nFactors = n.toLong\n  \
    \      for (i <- 0 until nFactors) {\n            val factor = n.div(i.toLong)\n\
    \            if (factor.toLong == 1l) {\n                factors.add(factor)\n\
    \            }\n        }\n        factors\n    }\n\n    // Return list of prime\
    \ factors of given integer in the order from smallest to largest.\n    // Each\
    \ of the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors\
    \ = new ArrayList[Long]()\n        val nFactors = n.toLong\n        for (i <-\
    \ 0 until nFactors) {\n            val factor = n.div(i.toLong)\n            if\
    \ (factor.toLong == 1l) {\n                factors.add(factor)\n            }\n\
    \        }\n        factors\n    }\n\n    // Return list of prime factors of given\
    \ integer in the order from smallest to largest.\n    // Each of the factors should\
    \ be listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong",
  "        val factors = List[Long]()\n        val i = 2l\n        while (i <= n)\
    \ {\n            while (n % i == 0) {\n                factors = append(factors,\
    \ i)\n                n /= i\n            }\n            i += 1\n        }\n \
    \       if (n > 1) {\n            factors = append(factors, n)\n        }\n  \
    \      return factors", "        var factors = List[Long]()\n        var i = 2l\n\
    \        while (i <= n) {\n            while (n % i == 0) {\n                factors\
    \ = append(factors, i)\n                n /= i\n            }\n            i =\
    \ i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors,\
    \ n)\n        }\n        return factors\n    }\n\n    // Return list of prime\
    \ factors of given integer in the order from smallest to largest.\n    // Each\
    \ of the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors\
    \ = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while\
    \ (n % i == 0) {\n                factors = append(factors, i)\n             \
    \   n /= i\n            }\n            i = i + 1l\n        }\n        if (n >\
    \ 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>>", "        val factors\
    \ = new ArrayList[Long]\n        val i = 2l\n        while (i <= n) {\n      \
    \      while (n % i == 0) {\n                factors.add(i)\n                n\
    \ /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n \
    \           factors.add(n)\n        }\n        return factors\n    }\n\n    //\
    \ Return the sum of all prime factors of given integer.\n    // >>> primeFactorizationSum(2l)\n\
    \    // 2l\n    // >>> primeFactorizationSum(6l)\n    // 6l\n    // >>> primeFactorizationSum(8l)\n\
    \    // 2l\n    // >>> primeFactorizationSum(12l)\n    // 2l\n    // >>> primeFactorizationSum(18l)\n\
    \    // 6l\n    // >>> primeFactorizationSum(20l)\n    // 2l\n    // >>> primeFactorizationSum(24l)\n\
    \    // 2l\n    // >>> primeFactorizationSum(30l)\n    // 2l\n    // >>> primeFactorizationSum(36l)\n\
    \    // 6l\n    // >>> primeFactorizationSum(40l)\n    // 2l\n    // >>> primeFactorizationSum(48l)\n\
    \    // 6l\n    // >>> primeFactorizationSum(60l)\n    // 2l\n    // >>> primeFactorizationSum(120l)\n\
    \    // 2l\n    // >>> primeFactorizationSum(180l)\n    // 6l\n    // >>> primeFactorizationSum(240l)\n\
    \    // 2l\n    // >>> primeFactorizationSum(300l)\n    // 2l\n    // >>> primeFactorizationSum(360l)\n\
    \    // 6l\n    // >>> primeFactorizationSum(480l)\n    // 2l\n    // >>> primeFactorizationSum(600l)\n\
    \    // 2l\n    // >>> primeFactorizationSum(720l)\n    // 6l\n    // >>> primeFactorizationSum(900l)\n\
    \    // 2l\n    // >>> primeFactorizationSum(1200l)\n    // 2l\n    // >>> primeFactorizationSum(1800l)\n\
    \    // 6l\n    // >>> primeFactorizationSum(2400l)\n    //", "        val factors\
    \ = List[Long]()\n        val nFactors = scala.math.factorial(n)\n        for\
    \ (i <- 0 until nFactors) {\n            val factor = scala.math.factorial(i)\n\
    \            if (factor * n / factor == n) {\n                factors = factors.append(factor)\n\
    \            }\n        }\n        return factors", "        val factors = ListBuffer[Long]()\n\
    \        val nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors)\
    \ {\n            val factor = scala.math.factorial(i)\n            if (factor\
    \ * n == n) {\n                factors.append(factor)\n            }\n       \
    \ }\n        factors.sort(Long.compare)\n        return factors.toList\n    }\n\
    \n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> primeFactors((8l))\n    //\
    \ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n :\
    \ Long) : List[Long] = {\n        val factors = ListBuffer[Long]()\n        val\
    \ nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors) {\n\
    \            val factor = scala.math.factorial(i)\n            if (factor * n\
    \ == n) {\n                factors.append(factor)\n            }\n        }\n\
    \        factors.sort(Long.compare)\n        return factors.toList\n    }\n\n\
    \    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> primeFactors((8l))\n    //\
    \ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.to", "        val factors = List[Long]()\n \
    \       val divisors = scala.math.factorial(n)\n        for (divisor <- divisors)\
    \ {\n            if (divisor == 1) continue\n            val divisorFactor = n\
    \ / divisor\n            if (divisorFactor == 1) continue\n            factors\
    \ = factors.append(divisorFactor)\n        }\n        return factors", "     \
    \   val factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n\
    \            while (n % i == 0) {\n                factors = append(factors, i)\n\
    \                n /= i\n            }\n            i = i + 1l\n        }\n  \
    \      factors\n    }\n\n    // Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    // Each of the factors should be\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize2((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n   \
    \ // >>> factorize2((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    //\
    \ >>> factorize2((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def factorize2(n : Long) : List[Long] = {\n        val factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = append(factors, i)\n                n /= i\n  \
    \          }\n            i = i + 1l\n        }\n        factors\n    }\n\n  \
    \  // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize3((8l))\n    //\
    \ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize3((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize3((70l))\n   \
    \ // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize3(n : Long)\
    \ : List[Long] =", "        var factors = List[Long]()\n        var i = 2l\n \
    \       while (i <= n) {\n            while (n % i == 0) {\n                factors\
    \ = factors.append(i)\n                n /= i\n            }\n            i =\
    \ i + 1l\n        }\n        factors", "        val factors = new ArrayList[Long]\n\
    \        val divisors = new ArrayList[Long]\n        val divisor = 2l\n      \
    \  while (n > 1) {\n            while (n % divisor == 0) {\n                divisors.add(divisor)\n\
    \                n /= divisor\n            }\n            divisor++\n        }\n\
    \        factors.addAll(divisors)\n        factors.sort(Comparator.naturalOrder())\n\
    \        return factors\n    }\n\n    // Return list of prime factors of given\
    \ integer in the order from largest to smallest.\n    // Each of the factors should\
    \ be listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](7l.toLong, 2l.toLong, 5l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n\
    \        val divisors = new ArrayList[Long]\n        val divisor = 2l\n      \
    \  while (n > 1) {\n            while (n % divisor == 0) {\n                divisors.add(divisor)\n\
    \                n /= divisor\n            }\n            divisor++\n        }\n\
    \        factors.addAll(divisors)\n        factors.sort(Comparator.reverseOrder())\n\
    \        return factors\n    }\n\n    // Return list of prime factors of given\
    \ integer in the order from smallest to largest.\n    // Each of the factors should\
    \ be listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong", " \
    \       val factors = new ArrayList[Long]\n        val divisors = scala.math.factorial.divisors(n)\n\
    \        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n\
    \            val factor = n / divisor\n            factors.append(factor)\n  \
    \      }\n        factors.sort(Comparator.comparing(Long::toString))\n       \
    \ return factors\n    }\n\n    // Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    // Each of the factors should be\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n\
    \        val divisors = scala.math.factorial.divisors(n)\n        for (i <- 0\
    \ until divisors.size) {\n            val divisor = divisors.apply(i)\n      \
    \      val factor = n / divisor\n            if (factor.toLong % 2 == 0) {\n \
    \               factors.append(factor)\n            }\n        }\n        factors.sort(Comparator.comparing(Long::toString))\n\
    \        return factors\n    }\n\n    // Return list of prime factors of given\
    \ integer in the order from smallest to largest.\n    // Each of the factors should\
    \ be listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   ", "        val factors = List[Long]()\n        val divisors = scala.math.factorial(n)\n\
    \        for (divisor <- divisors) {\n            val divisorInt = divisor.toInt\n\
    \            if (divisorInt > 1 && divisorInt < n) {\n                val divisorFactor\
    \ = divisorInt\n                val divisorCount = scala.math.factorial(divisorInt\
    \ - 1)\n                factors = factors.append(divisorFactor)\n            \
    \    factors = factors.append(divisorCount)\n            }\n        }\n      \
    \  return factors\n    }\n\n    // Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    // Each of the factors should be\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n\
    \        val divisors = scala.math.factorial(n)\n        for (divisor <- divisors)\
    \ {\n            val divisorInt = divisor.toInt\n            if (divisorInt >\
    \ 1 && divisorInt < n) {\n                val divisorFactor = divisorInt\n   \
    \             val divisorCount = scala.math.factorial(divisorInt - 1)\n      \
    \          factors = factors.append(divisorFactor)\n                factors =\
    \ factors.append(divisorCount)\n            }\n        }\n        return factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to", "        val factors = new ArrayList[Long]()\n    \
    \    val factorization = factor(n)\n        for (i <- 0 until factorization.size)\
    \ {\n            factors.add(factorization.apply(i))\n        }\n        return\
    \ factors\n    }\n\n    // Return list of prime factors of given integer in the\
    \ order from smallest to largest.\n    // Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factor(8l)\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>>\
    \ factor(25l)\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factor(70l)\n\
    \    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factor(n : Long)\
    \ : List[Long] = {\n        val factors = new ArrayList[Long]()\n        val factorization\
    \ = factor(n)\n        for (i <- 0 until factorization.size) {\n            factors.add(factorization.apply(i))\n\
    \        }\n        return factors\n    }\n\n    // Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    // Each of the\
    \ factors should be listed number of times corresponding to how many times it\
    \ appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> factor(8l)\n    // (List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))\n    // >>> factor(25l)\n    // (List[Long](5l.toLong, 5l.toLong))\n\
    \    // >>> factor(70l)\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def factor(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]()\n\
    \        val factorization = factor(n)\n        for (i <- 0 until factorization.size)\
    \ {\n            factors.add(factorization.apply", "        val factors = List[Long]()\n\
    \        val divisors = scala.math.factorial(n)\n        for (i <- 0 until divisors.size)\
    \ {\n            val divisor = divisors.apply(i)\n            val factor = n /\
    \ divisor\n            if (factor == 1) {\n                factors = factors.append(divisor)\n\
    \            } else {\n                factors = factors.append(factor)\n    \
    \        }\n        }\n        return factors\n    }\n\n    // Return list of\
    \ prime factors of given integer in the order from smallest to largest.\n    //\
    \ Each of the factors should be listed number of times corresponding to how many\
    \ times it appeares in factorization.\n    // Input number should be equal to\
    \ the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors\
    \ = List[Long]()\n        val divisors = scala.math.factorial(n)\n        for\
    \ (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n\
    \            val factor = n / divisor\n            if (factor == 1) {\n      \
    \          factors = factors.append(divisor)\n            } else {\n         \
    \       factors = factors.append(factor)\n            }\n        }\n        return\
    \ factors\n    }\n\n    // Return list of prime factors of given integer in the\
    \ order from smallest to largest.\n    // Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n",
  "        val factors = new ArrayList[Long]\n        val divisors = new ArrayList[Long]\n\
    \        val divisor = 2l\n        while (n > 1l) {\n            while (n % divisor\
    \ == 0l) {\n                divisors.add(divisor)\n                n /= divisor\n\
    \            }\n            divisor++\n        }\n        for (i <- 0 until divisors.size)\
    \ {\n            factors.add(divisors.get(i))\n        }\n        return factors\n\
    \    }\n\n    // Return the sum of all prime factors of given integer.\n    //\
    \ >>> prime_factors(8l)\n    // 2l\n    // >>> prime_factors(25l)\n    // 5l\n\
    \    // >>> prime_factors(70l)\n    // 2l + 5l + 7l\n    def prime_factors(n :\
    \ Long) : Long = {\n        val factors = factorize(n)\n        val result = 0l\n\
    \        for (i <- 0 until factors.size) {\n            result += factors.get(i)\n\
    \        }\n        return result\n    }\n\n    // Return the sum of all divisors\
    \ of given integer.\n    // >>> divisors(8l)\n    // 2l\n    // >>> divisors(25l)\n\
    \    // 5l\n    // >>> divisors(70l)\n    // 2l + 5l + 7l\n    def divisors(n\
    \ : Long) : Long = {\n        val factors = factorize(n)\n        val result =\
    \ 1l\n        for (i <- 0 until factors.size) {\n            result *= factors.get(i)\n\
    \        }\n        return result\n    }\n\n    // Return the sum of all divisors\
    \ of given integer.\n    // >>> divisors_sum(8l)\n    // 2l\n    // >>> divisors_sum(25l)\n\
    \    // 5l\n    // >>> divisors_sum(70l)\n    // 2l + 5l + 7l\n    def divisors_sum(n\
    \ : Long) : Long = {\n        val factors = factorize(n)\n        val result =\
    \ 1l\n        for", "        val factors = new ArrayList[Long]\n        val primeFactors\
    \ = primeFactors(n)\n        for (i <- 0 until primeFactors.size) {\n        \
    \    val primeFactor = primeFactors.get(i)\n            val factorCount = 1\n\
    \            for (j <- i + 1 until primeFactors.size) {\n                if (primeFactors.get(j)\
    \ == primeFactor) {\n                    factorCount = factorCount + 1\n     \
    \           }\n            }\n            factors.add(primeFactor * factorCount)\n\
    \        }\n        return factors\n    }\n\n    // Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    // Each of the\
    \ factors should be listed number of times corresponding to how many times it\
    \ appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> primeFactors(8l)\n    // (List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))\n    // >>> primeFactors(25l)\n    // (List[Long](5l.toLong, 5l.toLong))\n\
    \    // >>> primeFactors(70l)\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n\
    \        val primeFactors = new ArrayList[Long]\n        val primeNumbers = new\
    \ ArrayList[Long]\n        val i = 2\n        while (i <= n) {\n            if\
    \ (n % i == 0) {\n                primeFactors.add(i)\n                n = n /\
    \ i\n            } else {\n                i = i + 1\n            }\n        }\n\
    \        for (i <- 0 until primeFactors.size) {\n            val primeFactor =\
    \ primeFactors.get(i)\n            val primeNumber = primeNumbers.get(i)\n   \
    \         val factorCount = 1\n            for (j <- i + 1 until primeFactors.size)\
    \ {\n                if (primeFactors.get(j) == primeFactor) {\n             \
    \       factorCount = factorCount + 1\n                }\n            }\n    \
    \        primeNumbers.", "        var factors = List[Long]()\n        var i =\
    \ 2l\n        while (i <= n) {\n            if (n % i == 0) {\n              \
    \  factors = factors.append(i)\n                n /= i\n            } else {\n\
    \                i += 1\n            }\n        }\n        factors = factors.reverse()\n\
    \        return factors\n    }\n\n    // Return list of prime factors of given\
    \ integer in the order from largest to smallest.\n    // Each of the factors should\
    \ be listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                factors = factors.append(i)\n                n /= i\n       \
    \     } else {\n                i += 1\n            }\n        }\n        factors\
    \ = factors.reverse()\n        return factors\n    }\n\n    // Return list of\
    \ prime factors of given integer in the order from smallest to largest.\n    //\
    \ Each of the factors should be listed number of times corresponding to how many\
    \ times it appeares in factorization.\n    // Input number should be equal to\
    \ the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.", "        if (n == 0) return Nil\n        if (n == 1) return List(1l)\n\
    \        if (n == 2) return List(2l)\n        if (n == 3) return List(3l)\n  \
    \      if (n == 4) return List(2l, 2l)\n        if (n == 5) return List(5l)\n\
    \        if (n == 6) return List(2l, 3l)\n        if (n == 7) return List(7l)\n\
    \        if (n == 8) return List(2l, 2l, 2l)\n        if (n == 9) return List(3l,\
    \ 3l)\n        if (n == 10) return List(5l, 2l)\n        if (n == 11) return List(11l)\n\
    \        if (n == 12) return List(2l, 2l, 2l, 2l)\n        if (n == 13) return\
    \ List(13l)\n        if (n == 14) return List(7l, 2l)\n        if (n == 15) return\
    \ List(15l)\n        if (n == 16) return List(2l, 2l, 2l, 2l, 2l)\n        if\
    \ (n == 17) return List(17l)\n        if (n == 18) return List(3l, 3l, 2l)\n \
    \       if (n == 19) return List(19l)\n        if (n == 20) return List(2l, 2l,\
    \ 2l, 2l, 2l, 2l)\n        if (n == 21) return List(21l)\n        if (n == 22)\
    \ return List(2l, 2l, 2l, 2l, 2l, 2l, 2l)\n        if (n == 23) return List(23l)\n\
    \        if (n == 24) return List(2l, 2l, 2l, 2l, 2l, 2l, 2l, 2l)\n        if\
    \ (n == 25) return List(5l, 5l)\n        if (n == 26) return List(2l, 2l, 2l,\
    \ 2l, 2l, 2l, 2l, 2l)\n        if (n == 27) return List(3l", "        var factors\
    \ = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while\
    \ (n % i == 0) {\n                factors = factors.append(i)\n              \
    \  n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l)\
    \ factors = factors.append(n)\n        return factors\n    }\n\n    // Return\
    \ list of prime factors of given integer in the order from largest to smallest.\n\
    \    // Each of the factors should be listed number of times corresponding to\
    \ how many times it appeares in factorization.\n    // Input number should be\
    \ equal to the product of all factors\n    // >>> factorize_reverse((8l))\n  \
    \  // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize_reverse((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize_reverse((70l))\n\
    \    // (List[Long](7l.toLong, 5l.toLong, 2l.toLong))\n    def factorize_reverse(n\
    \ : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i\
    \ = n\n        while (i > 1l) {\n            while (n % i == 0) {\n          \
    \      factors = factors.append(i)\n                n /= i\n            }\n  \
    \          i = i - 1l\n        }\n        if (n > 1l) factors = factors.append(n)\n\
    \        return factors\n    }\n\n    // Return list of prime factors of given\
    \ integer in the order from smallest to largest.\n    // Each of the factors should\
    \ be listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factorize_all((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n\
    \    // >>> factorize_all((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n\
    \    // >>> factorize_all((70l))\n    // (", "        if (n == 0) return Nil\n\
    \        if (n == 1) return Nil\n        if (n == 2) return Nil\n        if (n\
    \ == 3) return Nil\n        if (n == 4) return Nil\n        if (n == 5) return\
    \ Nil\n        if (n == 6) return Nil\n        if (n == 7) return Nil\n      \
    \  if (n == 8) return Nil\n        if (n == 9) return Nil\n        if (n == 10)\
    \ return Nil\n        if (n == 11) return Nil\n        if (n == 12) return Nil\n\
    \        if (n == 13) return Nil\n        if (n == 14) return Nil\n        if\
    \ (n == 15) return Nil\n        if (n == 16) return Nil\n        if (n == 17)\
    \ return Nil\n        if (n == 18) return Nil\n        if (n == 19) return Nil\n\
    \        if (n == 20) return Nil\n        if (n == 21) return Nil\n        if\
    \ (n == 22) return Nil\n        if (n == 23) return Nil\n        if (n == 24)\
    \ return Nil\n        if (n == 25) return Nil\n        if (n == 26) return Nil\n\
    \        if (n == 27) return Nil\n        if (n == 28) return Nil\n        if\
    \ (n == 29) return Nil\n        if (n == 30) return Nil\n        if (n == 31)\
    \ return Nil\n        if (n == 32) return Nil\n        if (n == 33) return Nil\n\
    \        if (n == 34) return Nil\n        if (n == 35) return Nil\n        if\
    \ (n == 36) return Nil\n        if (n == 37) return Nil\n        if (n == 38)\
    \ return Nil\n        if (n == 39) return Nil\n        if (n == 40) return Nil\n\
    \        if (n == 41) return Nil\n        if (n == 42) return Nil\n        if\
    \ (n == 43) return Nil\n        if (n == 44) return Nil\n        if (n == 45)\
    \ return Nil\n        if (n == 46) return Nil\n        if (n == 47) return Nil\n\
    \        if (n == 48) return Nil\n        if (n == 49) return Nil\n        if\
    \ (n == 50) return Nil\n        if", "        val factors = mutable.List[Long]()\n\
    \        val divisor = 2l\n        while (true) {\n            while (n % divisor\
    \ == 0) {\n                factors = factors.append(divisor)\n               \
    \ n /= divisor\n            }\n            divisor = divisor + 1\n           \
    \ if (divisor > n) break\n        }\n        factors", "        if (n == 0) return\
    \ Nil\n        if (n == 1) return List(1l)\n        if (n == 2) return List(2l)\n\
    \        if (n == 3) return List(3l)\n        if (n == 4) return List(2l, 2l)\n\
    \        if (n == 5) return List(5l)\n        if (n == 6) return List(2l, 3l)\n\
    \        if (n == 7) return List(7l)\n        if (n == 8) return List(2l, 2l,\
    \ 2l)\n        if (n == 9) return List(3l, 3l)\n        if (n == 10) return List(5l,\
    \ 2l)\n        if (n == 11) return List(11l)\n        if (n == 12) return List(2l,\
    \ 2l, 2l, 2l)\n        if (n == 13) return List(13l)\n        if (n == 14) return\
    \ List(7l, 2l)\n        if (n == 15) return List(15l)\n        if (n == 16) return\
    \ List(2l, 2l, 2l, 2l, 2l)\n        if (n == 17) return List(17l)\n        if\
    \ (n == 18) return List(3l, 3l, 2l)\n        if (n == 19) return List(19l)\n \
    \       if (n == 20) return List(2l, 2l, 2l, 2l, 2l, 2l)\n        if (n == 21)\
    \ return List(21l)\n        if (n == 22) return List(11l, 2l)\n        if (n ==\
    \ 23) return List(23l)\n        if (n == 24) return List(2l, 2l, 2l, 2l, 2l, 2l)\n\
    \        if (n == 25) return List(5l, 5l)\n        if (n == 26) return List(2l,\
    \ 2l, 2l, 2l, 2l, 2l, 2l)\n        if (n == 27) return List(3l, 3l, 3l)\n    \
    \    if (n == 28) return List(2l, 2l,", "        val factors = new ArrayList[Long]\n\
    \        val divisors = scala.math.factorial(n)\n        for (i <- 0 until divisors.size)\
    \ {\n            val divisor = divisors.apply(i)\n            val factor = n /\
    \ divisor\n            if (factor == divisor) {\n                factors.append(divisor)\n\
    \            } else {\n                factors.append(factor)\n            }\n\
    \        }\n        return factors\n    }\n\n    // Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    // Each of the\
    \ factors should be listed number of times corresponding to how many times it\
    \ appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors\
    \ = new ArrayList[Long]\n        val divisors = scala.math.factorial(n)\n    \
    \    for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n\
    \            val factor = n / divisor\n            if (factor == divisor) {\n\
    \                factors.append(divisor)\n            } else {\n             \
    \   factors.append(factor)\n            }\n        }\n        return factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    //", "        val factors\
    \ = List[Long]()\n        val i = 2l\n        while (i <= n) {\n            if\
    \ (n % i == 0) {\n                factors = factors.append(i)\n              \
    \  n /= i\n            } else {\n                i += 1\n            }\n     \
    \   }\n        factors", "        val factors = List[Long]()\n        val divisors\
    \ = scala.math.factorial(n)\n        for (i <- 0 until divisors.size) {\n    \
    \        val divisor = divisors.apply(i)\n            val factor = n / divisor\n\
    \            if (factor == divisor) {\n                factors = factors.append(divisor)\n\
    \            } else {\n                factors = factors.append(factor)\n    \
    \        }\n        }\n        return factors\n    }\n\n    // Return list of\
    \ prime factors of given integer in the order from smallest to largest.\n    //\
    \ Each of the factors should be listed number of times corresponding to how many\
    \ times it appeares in factorization.\n    // Input number should be equal to\
    \ the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors\
    \ = List[Long]()\n        val divisors = scala.math.factorial(n)\n        for\
    \ (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n\
    \            val factor = n / divisor\n            if (factor == divisor) {\n\
    \                factors = factors.append(divisor)\n            }\n        }\n\
    \        return factors\n    }\n\n    // Return list of prime factors of given\
    \ integer in the order from smallest to largest.\n    // Each of the factors should\
    \ be listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    ", "        val factors = List[Long]()\n \
    \       val divisors = scala.math.factorial(n)\n        for (i <- 0 until divisors.size)\
    \ {\n            val divisor = divisors.apply(i)\n            if (divisor > 1\
    \ && divisor <= n) {\n                val divisorFactors = factorize(n / divisor)\n\
    \                for (j <- 0 until divisorFactors.size) {\n                  \
    \  val divisorFactor = divisorFactors.apply(j)\n                    factors =\
    \ factors.append(divisorFactor * divisor)\n                }\n            }\n\
    \        }\n        factors\n    }\n\n    // Return list of prime factors of given\
    \ integer in the order from smallest to largest.\n    // Each of the factors should\
    \ be listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n\
    \        val divisors = scala.math.factorial(n)\n        for (i <- 0 until divisors.size)\
    \ {\n            val divisor = divisors.apply(i)\n            if (divisor > 1\
    \ && divisor <= n) {\n                factors = factors.append(divisor)\n    \
    \        }\n        }\n        factors\n    }\n\n    // Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    // Each of the\
    \ factors should be listed number of times corresponding to how many times it\
    \ appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> primeFactors((8l))\n    ", "        var factors =\
    \ List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while\
    \ (n % i == 0) {\n                factors = append(factors, i)\n             \
    \   n /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n\
    \            factors = append(factors, n)\n        }\n        return factors",
  "        val factors = List[Long]()\n        val nFactors = scala.math.factorial(n)\n\
    \        for (i <- 0 until nFactors) {\n            val factor = scala.math.factorial(i)\n\
    \            if (factor * factor == n) {\n                factors = factors.append(factor)\n\
    \            }\n        }\n        return factors", "        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                factors = factors.append(i)\n                n = n / i\n    \
    \        } else {\n                i = i + 1\n            }\n        }\n     \
    \   factors\n    }\n\n    // Return list of prime factors of given integer in\
    \ the order from largest to smallest.\n    // Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](7l.toLong, 2l.toLong, 5l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                factors = factors.append(i)\n                n = n / i\n    \
    \        } else {\n                i = i + 1\n            }\n        }\n     \
    \   factors\n    }\n\n    // Return list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors2(n", "        var factors = List[Long]()\n        var i\
    \ = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n         \
    \       factors = factors.append(i)\n                n /= i\n            }\n \
    \           i = i + 1l\n        }\n        factors", "        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = factors.append(i)\n                n /= i\n   \
    \         }\n            i = i + 1l\n        }\n        if (n > 1l) {\n      \
    \      factors = factors.append(n)\n        }\n        return factors\n    }\n\
    \n    // Return the sum of all prime factors of given integer\n    // >>> primeFactorsSum(8l)\n\
    \    // 2l\n    // >>> primeFactorsSum(25l)\n    // 5l\n    // >>> primeFactorsSum(70l)\n\
    \    // 23l\n    def primeFactorsSum(n : Long) : Long = {\n        var factors\
    \ = factorize(n)\n        var sum = 0l\n        for (i <- 0 until factors.length)\
    \ {\n            sum = sum + factors(i)\n        }\n        return sum\n    }\n\
    \n    // Return the product of all prime factors of given integer\n    // >>>\
    \ primeFactorsProduct(8l)\n    // 2l\n    // >>> primeFactorsProduct(25l)\n  \
    \  // 5l\n    // >>> primeFactorsProduct(70l)\n    // 7l\n    def primeFactorsProduct(n\
    \ : Long) : Long = {\n        var factors = factorize(n)\n        var product\
    \ = 1l\n        for (i <- 0 until factors.length) {\n            product *= factors(i)\n\
    \        }\n        return product\n    }\n\n    // Return the sum of all prime\
    \ factors of given integer\n    // >>> primeFactorsSum(8l)\n    // 2l\n    //\
    \ >>> primeFactorsSum(25l)\n    // 5l\n    // >>> primeFactorsSum(70l)\n    //\
    \ 23l\n    def primeFactorsSum2(n : Long) : Long = {\n        var factors = factorize(n)\n\
    \        var sum = 0l\n        for (i <- 0 until factors.length) {\n         \
    \   sum = sum + factors(i)\n        }\n        return sum\n    }\n\n    // Return\
    \ the product of all prime factors of given integer\n    // >>> primeFactorsProduct(8l",
  "        var factors = List[Long]()\n        var i = 2l\n        while (i <= n)\
    \ {\n            while (n % i == 0) {\n                factors = append(factors,\
    \ i)\n                n /= i\n            }\n            i += 1\n        }\n \
    \       if (n > 1) {\n            factors = append(factors, n)\n        }\n  \
    \      return factors\n    }\n\n    // Return the sum of all prime factors of\
    \ given integer.\n    // >>> prime_factors((8l))\n    // 2\n    // >>> prime_factors((25l))\n\
    \    // 5\n    // >>> prime_factors((70l))\n    // 2 + 5 + 7\n    def prime_factors(n\
    \ : Long) : Long = {\n        var factors = List[Long]()\n        var i = 2l\n\
    \        while (i <= n) {\n            while (n % i == 0) {\n                factors\
    \ = append(factors, i)\n                n /= i\n            }\n            i +=\
    \ 1\n        }\n        if (n > 1) {\n            factors = append(factors, n)\n\
    \        }\n        return sum(factors)\n    }\n\n    // Return the product of\
    \ all prime factors of given integer.\n    // >>> prime_factors_product((8l))\n\
    \    // 2\n    // >>> prime_factors_product((25l))\n    // 5\n    // >>> prime_factors_product((70l))\n\
    \    // 2 * 5 * 7\n    def prime_factors_product(n : Long) : Long = {\n      \
    \  var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n\
    \            while (n % i == 0) {\n                factors = append(factors, i)\n\
    \                n /= i\n            }\n            i += 1\n        }\n      \
    \  if (n > 1) {\n            factors = append(factors, n)\n        }\n       \
    \ return product(factors)\n    }\n\n    // Return the sum of all prime factors\
    \ of given integer.\n    // >>> prime_factors_sum((8l))\n    // 2\n    // >>>\
    \ prime_factors_sum", "        val factors = List[Long]()\n        val divisors\
    \ = scala.math.factorial(n)\n        for (i <- 0 until divisors.size) {\n    \
    \        val divisor = divisors.apply(i)\n            if (divisor == n) {\n  \
    \              factors.append(divisor)\n            } else if (divisor < n) {\n\
    \                factors.append(divisor)\n                factors.append(n / divisor)\n\
    \            }\n        }\n        factors\n    }\n\n    // Return list of prime\
    \ factors of given integer in the order from smallest to largest.\n    // Each\
    \ of the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors\
    \ = List[Long]()\n        val divisors = scala.math.factorial(n)\n        for\
    \ (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n\
    \            if (divisor == n) {\n                factors.append(divisor)\n  \
    \          } else if (divisor < n) {\n                factors.append(divisor)\n\
    \                factors.append(n / divisor)\n            }\n        }\n     \
    \   factors\n    }\n\n    // Return list of prime factors of given integer in\
    \ the order from smallest to largest.\n    // Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List", "        var factors = List[Long]()\n   \
    \     var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n  \
    \              factors = factors.append(i)\n                factors = factors.append(n\
    \ / i)\n                i = i + 1\n            } else {\n                i = i\
    \ + 1\n            }\n        }\n        return factors\n    }\n\n    // Return\
    \ list of prime factors of given integer in the order from largest to smallest.\n\
    \    // Each of the factors should be listed number of times corresponding to\
    \ how many times it appeares in factorization.\n    // Input number should be\
    \ equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors\
    \ = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            if\
    \ (n % i == 0) {\n                factors = factors.append(i)\n              \
    \  factors = factors.append(n / i)\n                i = i + 1\n            } else\
    \ {\n                i = i + 1\n            }\n        }\n        return factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2", "        val factors = List[Long]()\n        val divisors\
    \ = scala.math.factorial(n.toLong)\n        for (i <- 0 until divisors.size) {\n\
    \            val divisor = divisors.apply(i)\n            val divisorFactors =\
    \ divisor.toLong / divisor\n            val divisorFactorCount = divisorFactors.toLong\n\
    \            val divisorFactorCountFactors = divisorFactorCount.toLong / divisorFactorCount\n\
    \            val divisorFactorCountFactorsFactors = divisorFactorCountFactors.toLong\
    \ / divisorFactorCountFactors\n            val divisorFactorCountFactorsFactorsFactors\
    \ = divisorFactorCountFactorsFactors.toLong / divisorFactorCountFactorsFactors\n\
    \            val divisorFactorCountFactorsFactorsFactorsFactors = divisorFactorCountFactorsFactorsFactors.toLong\
    \ / divisorFactorCountFactorsFactorsFactors\n            val divisorFactorCountFactorsFactorsFactorsFactorsFactors\
    \ = divisorFactorCountFactorsFactorsFactorsFactors.toLong / divisorFactorCountFactorsFactorsFactorsFactors\n\
    \            val divisorFactorCountFactorsFactorsFactorsFactorsFactorsFactors\
    \ = divisorFactorCountFactorsFactorsFactorsFactorsFactors.toLong / divisorFactorCountFactorsFactorsFactorsFactorsFactors\n\
    \            val divisorFactorCountFactorsFactorsFactorsFactorsFactorsFactorsFactors\
    \ = divisorFactorCountFactorsFactorsFactorsFactorsFactorsFactors.toLong / divisorFactorCountFactorsFactorsFactorsFactorsFactorsFactors\n\
    \            val divisorFactorCountFactorsFactorsFactorsFactorsFactorsFactorsFactorsFactors\
    \ = divisorFactorCountFactorsFactorsFactorsFactorsFactorsFactorsFactors.toLong\
    \ / divisorFactorCountFactorsFactorsFactorsFactorsFactorsFactors\n           \
    \ val divisorFactorCountFactorsFactorsFactorsFactorsFactorsFactorsFactorsFactorsFactors\
    \ = divisorFactorCountFactorsFactorsFactorsFactorsFactorsFactorsFactorsFactors.toLong",
  "        var factors = List[Long]()\n        var i = 2l\n        while (i <= n)\
    \ {\n            while (n % i == 0) {\n                factors = factors.append(i)\n\
    \                n /= i\n            }\n            i = i + 1l\n        }\n  \
    \      factors", "        var factors = List[Long]()\n        var i = 2l\n   \
    \     while (i <= n) {\n            while (n % i == 0) {\n                factors\
    \ = factors.append(i)\n                n /= i\n            }\n            i =\
    \ i + 1l\n        }\n        return factors", "        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = factors.append(i)\n                n /= i\n   \
    \         }\n            i = i + 1l\n        }\n        factors\n    }\n\n   \
    \ // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> primeFactors((8l))\n    //\
    \ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n :\
    \ Long) : List[Long] = {\n        var factors = List[Long]()\n        var i =\
    \ 2l\n        while (i <= n) {\n            while (n % i == 0) {\n           \
    \     factors = factors.append(i)\n                n /= i\n            }\n   \
    \         i = i + 1l\n        }\n        factors\n    }\n\n    // Return list\
    \ of prime factors of given integer in the order from smallest to largest.\n \
    \   // Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    // Input number should be equal\
    \ to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n", "        var\
    \ factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n     \
    \       while (n % i == 0) {\n                factors = append(factors, i)\n \
    \               n /= i\n            }\n            i = i + 1l\n        }\n   \
    \     if (n > 1l) {\n            factors = append(factors, n)\n        }\n   \
    \     return factors\n    }\n\n    // Return the sum of all the prime factors\
    \ of given integer\n    // >>> prime_factors((8l))\n    // 2l.toLong\n    // >>>\
    \ prime_factors((25l))\n    // 5l.toLong\n    // >>> prime_factors((70l))\n  \
    \  // 2l.toLong + 5l.toLong + 7l.toLong\n    def prime_factors(n : Long) : Long\
    \ = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i\
    \ <= n) {\n            while (n % i == 0) {\n                factors = append(factors,\
    \ i)\n                n /= i\n            }\n            i = i + 1l\n        }\n\
    \        if (n > 1l) {\n            factors = append(factors, n)\n        }\n\
    \        return sum(factors)\n    }\n\n    // Return the sum of all the prime\
    \ factors of given integer\n    // >>> prime_factors_recursive((8l))\n    // 2l.toLong\n\
    \    // >>> prime_factors_recursive((25l))\n    // 5l.toLong\n    // >>> prime_factors_recursive((70l))\n\
    \    // 2l.toLong + 5l.toLong + 7l.toLong\n    def prime_factors_recursive(n :\
    \ Long) : Long = {\n        var factors = List[Long]()\n        if (n == 2l) {\n\
    \            return 2l\n        } else if (n == 3l) {\n            return 3l\n\
    \        } else if (n % 2l == 0) {\n            factors = append(factors, 2l)\n\
    \            n /= 2l\n        } else if (n % 3l == 0) {\n", "        var factors\
    \ = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while\
    \ (n % i == 0) {\n                factors = factors.append(i)\n              \
    \  n /= i\n            }\n            i = i + 1l\n        }\n        factors",
  "        val factors = new ArrayList[Long]\n        val i = 2l\n        while (i\
    \ <= n) {\n            if (n % i == 0) {\n                factors.add(i)\n   \
    \             factors.add(n / i)\n                n /= i\n            } else {\n\
    \                i += 1\n            }\n        }\n        if (n > 1) {\n    \
    \        factors.add(n)\n        }\n        return factors\n    }\n\n    // Return\
    \ list of prime factors of given integer in the order from smallest to largest.\n\
    \    // Each of the factors should be listed number of times corresponding to\
    \ how many times it appeares in factorization.\n    // Input number should be\
    \ equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors\
    \ = new ArrayList[Long]\n        val i = 2l\n        while (i <= n) {\n      \
    \      if (n % i == 0) {\n                factors.add(i)\n                factors.add(n\
    \ / i)\n                n /= i\n            } else {\n                i += 1\n\
    \            }\n        }\n        if (n > 1) {\n            factors.add(n)\n\
    \        }\n        return factors\n    }\n\n    // Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    // Each of the\
    \ factors should be listed number of times corresponding to how many times it\
    \ appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l",
  "        val factors = List[Long]()\n        val divisors = scala.math.factorial(n)\n\
    \        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n\
    \            if (divisor == 1) continue\n            val divisorInt = divisor.toLong\n\
    \            val divisorFactor = n / divisor\n            val divisorFactorInt\
    \ = divisorFactor.toLong\n            if (divisorFactorInt == 1) {\n         \
    \       factors.append(divisor)\n            } else {\n                factors.append(divisor)\n\
    \                factors.append(divisorFactor)\n            }\n        }\n   \
    \     return factors\n    }\n\n    // Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    // Each of the factors should be\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n\
    \        val divisors = scala.math.factorial(n)\n        for (i <- 0 until divisors.size)\
    \ {\n            val divisor = divisors.apply(i)\n            if (divisor == 1)\
    \ continue\n            val divisorInt = divisor.toLong\n            if (divisorInt\
    \ == 1) {\n                factors.append(divisor)\n            } else {\n   \
    \             factors.append(divisor)\n                factors.append(divisorInt)\n\
    \            }\n        }\n        return factors\n    }\n\n    // Return list\
    \ of prime factors of given", "        val factors = new ArrayList[Long]\n   \
    \     val divisor = 2l\n        while (n > 1l) {\n            while (n % divisor\
    \ == 0l) {\n                factors.add(divisor)\n                n /= divisor\n\
    \            }\n            divisor += 1l\n        }\n        return factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ largest to smallest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> factorize2((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize2((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize2((70l))\n   \
    \ // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize2(n : Long)\
    \ : List[Long] = {\n        val factors = new ArrayList[Long]\n        val divisor\
    \ = 2l\n        while (n > 1l) {\n            while (n % divisor == 0l) {\n  \
    \              factors.add(divisor)\n                n /= divisor\n          \
    \  }\n            divisor -= 1l\n        }\n        return factors\n    }\n\n\
    \    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize3((8l))\n    //\
    \ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize3((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize3((70l))\n   \
    \ // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n", "        var factors =\
    \ List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while\
    \ (n % i == 0) {\n                factors = factors.append(i)\n              \
    \  n /= i\n            }\n            i = i + 1l\n        }\n        factors",
  "        val factors = List[Long]()\n        val factorization = factor(n)\n   \
    \     for (i <- 0 until factorization.size) {\n            factors = factors.append(factorization.apply(i))\n\
    \        }\n        return factors\n    }\n\n    // Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    // Each of the\
    \ factors should be listed number of times corresponding to how many times it\
    \ appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> factor(8l)\n    // List(2l.toLong, 2l.toLong, 2l.toLong)\n\
    \    // >>> factor(25l)\n    // List(5l.toLong, 5l.toLong)\n    // >>> factor(70l)\n\
    \    // List(2l.toLong, 5l.toLong, 7l.toLong)\n    def factor(n : Long) : List[Long]\
    \ = {\n        val factors = List[Long]()\n        val factorization = factor(n)\n\
    \        for (i <- 0 until factorization.size) {\n            factors = factors.append(factorization.apply(i))\n\
    \        }\n        return factors\n    }\n\n    // Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    // Each of the\
    \ factors should be listed number of times corresponding to how many times it\
    \ appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> factor(8l)\n    // List(2l.toLong, 2l.toLong, 2l.toLong)\n\
    \    // >>> factor(25l)\n    // List(5l.toLong, 5l.toLong)\n    // >>> factor(70l)\n\
    \    // List(2l.toLong, 5l.toLong, 7l.toLong)\n    def factor(n : Long) : List[Long]\
    \ = {\n        val factors = List[Long]()\n        val factorization = factor(n)\n\
    \        for (i <- 0 until factorization.size) {\n            factors = factors.append(factorization.apply(i))\n\
    \        }\n        return factors\n    }\n\n    // Return list", "        var\
    \ factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n     \
    \       if (n % i == 0) {\n                factors = factors.append(i)\n     \
    \           n /= i\n            } else {\n                i += 1\n           \
    \ }\n        }\n        factors = factors.reverse()\n        return factors\n\
    \    }\n\n    // Return the sum of all the prime factors of given integer.\n \
    \   // >>> prime_factors(8l)\n    // 2l\n    // >>> prime_factors(25l)\n    //\
    \ 5l\n    // >>> prime_factors(70l)\n    // 2l + 5l + 7l\n    def prime_factors(n\
    \ : Long) : Long = {\n        var factors = List[Long]()\n        var i = 2l\n\
    \        while (i <= n) {\n            if (n % i == 0) {\n                factors\
    \ = factors.append(i)\n                n /= i\n            } else {\n        \
    \        i += 1\n            }\n        }\n        factors = factors.reverse()\n\
    \        return factors.foldLeft(0l)((x, y) => x + y)\n    }\n\n    // Return\
    \ the sum of all the prime factors of given integer.\n    // >>> prime_factors_recursive(8l)\n\
    \    // 2l\n    // >>> prime_factors_recursive(25l)\n    // 5l\n    // >>> prime_factors_recursive(70l)\n\
    \    // 2l + 5l + 7l\n    def prime_factors_recursive(n : Long) : Long = {\n \
    \       if (n == 2l) {\n            return 2l\n        } else if (n % 2l == 0)\
    \ {\n            return prime_factors_recursive(n / 2l)\n        } else {\n  \
    \          return prime_factors_recursive(n)\n        }\n    }\n\n    // Return\
    \ the sum of all the prime factors of given integer.\n    // >>> prime_factors_iterative(8l)\n\
    \    // 2l\n    // >>> prime_factors_iterative(25l)\n    // 5l\n    // >>> prime_factors_iterative(",
  "        val factors = mutable.List[Long]()\n        val nFactors = mutable.List[Long]()\n\
    \        val nFactors2 = mutable.List[Long]()\n        val nFactors3 = mutable.List[Long]()\n\
    \        val nFactors4 = mutable.List[Long]()\n        val nFactors5 = mutable.List[Long]()\n\
    \        val nFactors6 = mutable.List[Long]()\n        val nFactors7 = mutable.List[Long]()\n\
    \        val nFactors8 = mutable.List[Long]()\n        val nFactors9 = mutable.List[Long]()\n\
    \        val nFactors10 = mutable.List[Long]()\n        val nFactors11 = mutable.List[Long]()\n\
    \        val nFactors12 = mutable.List[Long]()\n        val nFactors13 = mutable.List[Long]()\n\
    \        val nFactors14 = mutable.List[Long]()\n        val nFactors15 = mutable.List[Long]()\n\
    \        val nFactors16 = mutable.List[Long]()\n        val nFactors17 = mutable.List[Long]()\n\
    \        val nFactors18 = mutable.List[Long]()\n        val nFactors19 = mutable.List[Long]()\n\
    \        val nFactors20 = mutable.List[Long]()\n        val nFactors21 = mutable.List[Long]()\n\
    \        val nFactors22 = mutable.List[Long]()\n        val nFactors23 = mutable.List[Long]()\n\
    \        val nFactors24 = mutable.List[Long]()\n        val nFactors25 = mutable.List[Long]()\n\
    \        val nFactors26 = mutable.List[Long]()\n        val nFactors27 = mutable.List[Long]()\n\
    \        val nFactors28 = mutable.List[Long]()\n        val nFactors29 = mutable.List[Long]()\n\
    \        val nFactors30 = mutable.List[Long]()\n        val nFactors31 = mutable.List[Long]()\n\
    \        val nFact", "        var factors = List[Long]()\n        var i = 2l\n\
    \        while (i <= n) {\n            while (n % i == 0) {\n                factors\
    \ = append(factors, i)\n                n /= i\n            }\n            i =\
    \ i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors,\
    \ n)\n        }\n        return factors\n    }\n\n    // Return list of prime\
    \ factors of given integer in the order from smallest to largest.\n    // Each\
    \ of the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors\
    \ = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while\
    \ (n % i == 0) {\n                factors = append(factors, i)\n             \
    \   n /= i\n            }\n            i = i + 1l\n        }\n        if (n >\
    \ 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>>", "        val factors\
    \ = List[Long]()\n        val divisors = List[Long]()\n        val divisor = 2l\n\
    \        while (n > 1l) {\n            while (n % divisor == 0l) {\n         \
    \       divisors.append(divisor)\n                n /= divisor\n            }\n\
    \            divisor = divisor + 1l\n        }\n        factors.append(n)\n  \
    \      factors.appendAll(divisors)\n        return factors\n    }\n\n    // Return\
    \ list of prime factors of given integer in the order from largest to smallest.\n\
    \    // Each of the factors should be listed number of times corresponding to\
    \ how many times it appeares in factorization.\n    // Input number should be\
    \ equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors\
    \ = List[Long]()\n        val divisors = List[Long]()\n        val divisor = 2l\n\
    \        while (n > 1l) {\n            while (n % divisor == 0l) {\n         \
    \       divisors.append(divisor)\n                n /= divisor\n            }\n\
    \            divisor = divisor + 1l\n        }\n        factors.append(n)\n  \
    \      factors.appendAll(divisors)\n        return factors\n    }\n\n    // Return\
    \ list of prime factors of given integer in the order from smallest to largest.\n\
    \    // Each of the factors should be listed number of times corresponding to\
    \ how many times it appeares in factorization.\n    // Input number should be\
    \ equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2", "        if (n == 0) return List.empty()\n        if (n == 1)\
    \ return List.singleton(1l)\n        if (n == 2) return List.singleton(2l)\n \
    \       if (n == 3) return List.singleton(3l)\n        if (n == 4) return List.singleton(2l).append(2l)\n\
    \        if (n == 5) return List.singleton(5l)\n        if (n == 6) return List.singleton(2l).append(3l)\n\
    \        if (n == 7) return List.singleton(7l)\n        if (n == 8) return List.singleton(2l).append(2l).append(2l)\n\
    \        if (n == 9) return List.singleton(3l).append(3l)\n        if (n == 10)\
    \ return List.singleton(5l).append(5l)\n        if (n == 11) return List.singleton(11l)\n\
    \        if (n == 12) return List.singleton(2l).append(2l).append(3l)\n      \
    \  if (n == 13) return List.singleton(13l)\n        if (n == 14) return List.singleton(2l).append(2l).append(7l)\n\
    \        if (n == 15) return List.singleton(3l).append(5l)\n        if (n == 16)\
    \ return List.singleton(2l).append(2l).append(2l).append(2l)\n        if (n ==\
    \ 17) return List.singleton(17l)\n        if (n == 18) return List.singleton(2l).append(2l).append(3l).append(3l)\n\
    \        if (n == 19) return List.singleton(19l)\n        if (n == 20) return\
    \ List.singleton(2l).append(2l).append(5l).append(5l)\n        if (n == 21) return\
    \ List.singleton(3l).append(3l).append(7l)\n        if (n == 22) return List.singleton(2l).append(2l).append(11l)\n\
    \        if (n ==", "        val factors = new ArrayList[Long]\n        val factorization\
    \ = factorize(n, factors)\n        return factors\n    }\n\n    // Return list\
    \ of prime factors of given integer in the order from smallest to largest.\n \
    \   // Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    // Input number should be equal\
    \ to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def factorize(n : Long, factors : ArrayList[Long]) : List[Long]\
    \ = {\n        val i = 0\n        while (n > 1) {\n            val d = n.div(n.toLong)\n\
    \            val factor = n.div(d.toLong)\n            factors.add(factor)\n \
    \           n = d\n            i += 1\n        }\n        return factors\n   \
    \ }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    //\
    \ (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) :\
    \ List[Long] = {\n        val factors = new ArrayList[Long]\n        val factorization\
    \ = factorize(n, factors)\n        return factors\n    }\n\n    // Return list\
    \ of prime factors of given integer in the order from smallest to largest", " \
    \       var factors = List[Long]()\n        var i = 2l\n        while (i <= n)\
    \ {\n            while (n % i == 0) {\n                factors = append(factors,\
    \ i)\n                n /= i\n            }\n            i = i + 1l\n        }\n\
    \        if (n > 1l) {\n            factors = append(factors, n)\n        }\n\
    \        return factors\n    }\n\n    // Return the sum of all the prime factors\
    \ of given integer.\n    // >>> prime_factors(2l)\n    // 2l\n    // >>> prime_factors(6l)\n\
    \    // 6l\n    // >>> prime_factors(12l)\n    // 12l\n    // >>> prime_factors(30l)\n\
    \    // 30l\n    def prime_factors(n : Long) : Long = {\n        var factors =\
    \ List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while\
    \ (n % i == 0) {\n                factors = append(factors, i)\n             \
    \   n /= i\n            }\n            i = i + 1l\n        }\n        if (n >\
    \ 1l) {\n            factors = append(factors, n)\n        }\n        return sum(factors)\n\
    \    }\n\n    // Return the sum of all the prime factors of given integer.\n \
    \   // >>> prime_factors_recursive(2l)\n    // 2l\n    // >>> prime_factors_recursive(6l)\n\
    \    // 6l\n    // >>> prime_factors_recursive(12l)\n    // 12l\n    // >>> prime_factors_recursive(30l)\n\
    \    // 30l\n    def prime_factors_recursive(n : Long) : Long = {\n        var\
    \ factors = List[Long]()\n        if (n == 2l) {\n            return 2l\n    \
    \    } else if (n == 3l) {\n            return 3l\n        } else if (n % 2 ==\
    \ 0) {\n            factors = append(factors, 2l)\n            n /= 2l\n     \
    \   } else if (n % 3 == 0) {\n            factors = append", "        var factors\
    \ = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while\
    \ (n % i == 0) {\n                factors = append(factors, i)\n             \
    \   n /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n\
    \            factors = append(factors, n)\n        }\n        return factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n :\
    \ Long) : List[Long] = {\n        var factors = List[Long]()\n        var i =\
    \ 2l\n        while (i <= n) {\n            if (n % i == 0) {\n              \
    \  factors = append(factors, i)\n                n /= i\n            } else {\n\
    \                i += 1\n            }\n        }\n        if (n > 1) {\n    \
    \        factors = append(factors, n)\n        }\n        return factors\n   \
    \ }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors", "      \
    \  var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n\
    \            while (n % i == 0) {\n                factors = append(factors, i)\n\
    \                n /= i\n            }\n            i = i + 1l\n        }\n  \
    \      if (n > 1l) {\n            factors = append(factors, n)\n        }\n  \
    \      return factors\n    }\n\n    // Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    // Each of the factors should be\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = append(factors, i)\n                n /= i\n  \
    \          }\n            i = i + 1l\n        }\n        if (n > 1l) {\n     \
    \       factors = append(factors, n)\n        }\n        return factors\n    }\n\
    \n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> primeFactors((8l))\n    //\
    \ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>>", "        val factors\
    \ = List[Long]()\n        val nFactors = n.toLong\n        for (i <- 0 until nFactors)\
    \ {\n            val factor = n.div(i + 1)\n            if (factor.toLong % 2\
    \ == 0) {\n                factors = factors.append(factor.div(2).toLong)\n  \
    \          } else {\n                factors = factors.append(factor.toLong)\n\
    \            }\n        }\n        return factors\n    }\n\n    // Return list\
    \ of prime factors of given integer in the order from smallest to largest.\n \
    \   // Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    // Input number should be equal\
    \ to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors\
    \ = List[Long]()\n        val nFactors = n.toLong\n        for (i <- 0 until nFactors)\
    \ {\n            val factor = n.div(i + 1)\n            if (factor.toLong % 2\
    \ == 0) {\n                factors = factors.append(factor.div(2).toLong)\n  \
    \          } else {\n                factors = factors.append(factor.toLong)\n\
    \            }\n        }\n        return factors\n    }\n\n    // Return list\
    \ of prime factors of given integer in the order from smallest to largest.\n \
    \   // Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    // Input number should be equal\
    \ to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (", "       \
    \ val factors = List[Long]()\n        val nFactors = n.toLong\n        for (i\
    \ <- 0 until nFactors) {\n            val factor = nFactors.divide(i + 1)\n  \
    \          if (factor.isZero()) break\n            factors = factors.append(factor)\n\
    \        }\n        return factors", "        val factors = new ArrayList[Long]\n\
    \        val divisors = scala.math.factorial(n.toLong)\n        for (i <- 0 until\
    \ divisors.size) {\n            val divisor = divisors.apply(i)\n            val\
    \ factor = n / divisor\n            if (factor.toLong == divisor.toLong) {\n \
    \               factors.append(divisor)\n            }\n        }\n        factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n :\
    \ Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val\
    \ divisors = scala.math.factorial(n.toLong)\n        for (i <- 0 until divisors.size)\
    \ {\n            val divisor = divisors.apply(i)\n            val factor = n /\
    \ divisor\n            if (factor.toLong == divisor.toLong) {\n              \
    \  factors.append(divisor)\n            }\n        }\n        factors\n    }\n\
    \n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> primeFactors((8l))\n    //\
    \ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    ", "        val factors = List[Long]()\n        val divisor = 2l\n      \
    \  while (n > 1l) {\n            while (n % divisor == 0l) {\n               \
    \ factors = append(factors, divisor)\n                n /= divisor\n         \
    \   }\n            divisor = divisor + 1l\n        }\n        factors\n    }\n\
    \n    // Return list of prime factors of given integer in the order from largest\
    \ to smallest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> primeFactors((8l))\n    //\
    \ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n :\
    \ Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisor\
    \ = 2l\n        while (n > 1l) {\n            while (n % divisor == 0l) {\n  \
    \              factors = append(factors, divisor)\n                n /= divisor\n\
    \            }\n            divisor = divisor + 1l\n        }\n        factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5", "        var factors = List[Long]()\n      \
    \  var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n  \
    \              factors = append(factors, i)\n                n /= i\n        \
    \    }\n            i = i + 1l\n        }\n        if (n > 1l) {\n           \
    \ factors = append(factors, n)\n        }\n        return factors\n    }\n\n \
    \   // Return list of prime factors of given integer in the order from largest\
    \ to smallest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> primeFactors((8l))\n    //\
    \ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n :\
    \ Long) : List[Long] = {\n        var factors = List[Long]()\n        var i =\
    \ 2l\n        while (i <= n) {\n            while (n % i == 0) {\n           \
    \     factors = append(factors, i)\n                n /= i\n            }\n  \
    \          i = i + 1l\n        }\n        if (n > 1l) {\n            factors =\
    \ append(factors, n)\n        }\n        return factors\n    }\n\n    // Return\
    \ list of prime factors of given integer in the order from smallest to largest.\n\
    \    // Each of the factors should be listed number of times corresponding to\
    \ how many times it appeares in factorization.\n    // Input number should be\
    \ equal to the product of all factors\n    // >>> primeFactors2((8l))\n    //\
    \ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors2((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    ", "        val factors = mutable.List[Long]()\n\
    \        val nFactors = n.toLong\n        for (i <- 0 until nFactors) {\n    \
    \        val factor = n.div(i + 1).toLong\n            if (factor > 1) {\n   \
    \             factors.append(factor)\n            }\n        }\n        return\
    \ factors\n    }\n\n    // Return list of prime factors of given integer in the\
    \ order from largest to smallest.\n    // Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](7l.toLong, 2l.toLong, 5l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        val factors = mutable.List[Long]()\n\
    \        val nFactors = n.toLong\n        for (i <- 0 until nFactors) {\n    \
    \        val factor = n.div(i + 1).toLong\n            if (factor > 1 && factor.isPrime())\
    \ {\n                factors.append(factor)\n            }\n        }\n      \
    \  return factors\n    }\n\n    // Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    // Each of the factors should be\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.to",
  "        val factors = new ArrayList[Long]\n        val primeFactors = primeFactors(n)\n\
    \        for (i <- 0 until primeFactors.size) {\n            val factor = primeFactors.get(i)\n\
    \            val count = 1\n            for (j <- i + 1 until primeFactors.size)\
    \ {\n                if (primeFactors.get(j) == factor) {\n                  \
    \  count += 1\n                }\n            }\n            factors.add(factor\
    \ * count)\n        }\n        return factors\n    }\n\n    // Return list of\
    \ prime factors of given integer in the order from smallest to largest.\n    //\
    \ Each of the factors should be listed number of times corresponding to how many\
    \ times it appeares in factorization.\n    // Input number should be equal to\
    \ the product of all factors\n    // >>> primeFactors(8l)\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors(25l)\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors(70l)\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors\
    \ = new ArrayList[Long]\n        val primeFactors = new ArrayList[Long]\n    \
    \    val i = 2\n        while (i <= n) {\n            if (n % i == 0) {\n    \
    \            primeFactors.add(i)\n                n /= i\n            } else {\n\
    \                i += 1\n            }\n        }\n        if (n > 1) {\n    \
    \        primeFactors.add(n)\n        }\n        for (i <- 0 until primeFactors.size)\
    \ {\n            val factor = primeFactors.get(i)\n            val count = 1\n\
    \            for (j <- i + 1 until primeFactors.size) {\n                if (primeFactors.get(j)\
    \ == factor) {\n                    count += 1\n                }\n          \
    \  }\n            factors.add(factor * count)\n        }\n        return factors",
  "        val factors = List[Long]()\n        val nFactors = scala.math.factorial(n)\n\
    \        for (i <- 0 until nFactors) {\n            val factor = scala.math.factorial(i)\n\
    \            if (factor * factor == n) {\n                factors = factors.append(factor)\n\
    \            }\n        }\n        return factors", "        val factors = mutable.List[Long]()\n\
    \        val primeFactors = mutable.List[Long]()\n        val primeFactorization\
    \ = mutable.List[Long]()\n        val primeFactorizationSize = mutable.Long()\n\
    \        val i = mutable.Long()\n        val j = mutable.Long()\n        val k\
    \ = mutable.Long()\n        val l = mutable.Long()\n        val m = mutable.Long()\n\
    \        val nn = mutable.Long()\n        val p = mutable.Long()\n        val\
    \ q = mutable.Long()\n        val r = mutable.Long()\n        val s = mutable.Long()\n\
    \        val t = mutable.Long()\n        val u = mutable.Long()\n        val v\
    \ = mutable.Long()\n        val w = mutable.Long()\n        val x = mutable.Long()\n\
    \        val y = mutable.Long()\n        val z = mutable.Long()\n        val factor\
    \ = mutable.Long()\n        val factorization = mutable.List[Long]()\n       \
    \ val factorizationSize = mutable.Long()\n        val primeFactorizationSize =\
    \ mutable.Long()\n        val primeFactorization = mutable.List[Long]()\n    \
    \    val primeFactor = mutable.Long()\n        val prime = mutable.Long()\n  \
    \      val primeFactorizationSize = mutable.Long()\n        val primeFactorization\
    \ = mutable.List[Long]()\n        val primeFactor = mutable.Long()\n        val\
    \ prime = mutable.Long()\n        val primeFactorizationSize = mutable.Long()\n\
    \        val primeFactorization = mutable.List[Long]()\n        val primeFactor\
    \ = mutable.Long()\n        val prime = mutable.Long()\n        val primeFactorizationSize\
    \ = mutable.Long()\n        val primeFactorization = mutable.List[Long]()\n  \
    \      val primeFactor = mutable.Long()\n        val prime = mutable.Long()\n\
    \        val primeFactorizationSize = mutable.Long()\n        val primeFactorization\
    \ = mutable.List[Long]()\n        val primeFactor = mutable.Long()\n        val\
    \ prime = mutable.Long()\n        val primeFactor", "        val factors = new\
    \ ArrayList[Long]()\n        val divisor = 2l\n        while (n > 1l) {\n    \
    \        while (n % divisor == 0l) {\n                factors.add(divisor)\n \
    \               n /= divisor\n            }\n            divisor += 1l\n     \
    \   }\n        factors.add(n)\n        return factors\n    }\n\n    // Return\
    \ the sum of all prime factors of given integer\n    // >>> primeFactorSum(8l)\n\
    \    // 2l.toLong\n    // >>> primeFactorSum(25l)\n    // 5l.toLong\n    // >>>\
    \ primeFactorSum(70l)\n    // 2l.toLong + 5l.toLong + 7l.toLong\n    def primeFactorSum(n\
    \ : Long) : Long = {\n        val factors = factorize(n)\n        return factors.foldLeft(0l,\
    \ (a, b) -> a + b)\n    }\n\n    // Return the product of all prime factors of\
    \ given integer\n    // >>> primeFactorProduct(8l)\n    // 2l.toLong\n    // >>>\
    \ primeFactorProduct(25l)\n    // 5l.toLong\n    // >>> primeFactorProduct(70l)\n\
    \    // 2l.toLong * 5l.toLong * 7l.toLong\n    def primeFactorProduct(n : Long)\
    \ : Long = {\n        val factors = factorize(n)\n        return factors.foldLeft(1l,\
    \ (a, b) -> a * b)\n    }\n\n    // Return the sum of all divisors of given integer\n\
    \    // >>> divisorSum(8l)\n    // 2l.toLong\n    // >>> divisorSum(25l)\n   \
    \ // 5l.toLong\n    // >>> divisorSum(70l)\n    // 2l.toLong + 5l.toLong + 7l.toLong\n\
    \    def divisorSum(n : Long) : Long = {\n        val factors = factorize(n)\n\
    \        return factors.foldLeft(1l, (a, b) -> a * b)\n    }\n\n    // Return\
    \ the product of all divisors of given integer\n    // >>> divisor", "       \
    \ var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n \
    \           while (n % i == 0) {\n                factors = append(factors, i)\n\
    \                n /= i\n            }\n            i = i + 1l\n        }\n  \
    \      if (n > 1l) {\n            factors = append(factors, n)\n        }\n  \
    \      return factors\n    }\n\n    // Return the sum of all the prime factors\
    \ of given integer.\n    // >>> prime_factors(2l)\n    // 2l\n    // >>> prime_factors(6l)\n\
    \    // 3l\n    // >>> prime_factors(8l)\n    // 2l\n    // >>> prime_factors(25l)\n\
    \    // 5l\n    // >>> prime_factors(70l)\n    // 7l\n    // >>> prime_factors(1000l)\n\
    \    // 11l\n    def prime_factors(n : Long) : Long = {\n        var factors =\
    \ List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while\
    \ (n % i == 0) {\n                factors = append(factors, i)\n             \
    \   n /= i\n            }\n            i = i + 1l\n        }\n        if (n >\
    \ 1l) {\n            factors = append(factors, n)\n        }\n        return sum(factors)\n\
    \    }\n\n    // Return the sum of all the prime factors of given integer.\n \
    \   // >>> prime_factors_recursive(2l)\n    // 2l\n    // >>> prime_factors_recursive(6l)\n\
    \    // 3l\n    // >>> prime_factors_recursive(8l)\n    // 2l\n    // >>> prime_factors_recursive(25l)\n\
    \    // 5l\n    // >>> prime_factors_recursive(70l)\n    // 7l\n    // >>> prime_factors_recursive(1000l)\n\
    \    // 11l\n    def prime_factors_recursive(n : Long) : Long = {\n        if\
    \ (n == 2l) {\n            return 2l\n        } else if", "        var factors\
    \ = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while\
    \ (n % i == 0) {\n                factors = append(factors, i)\n             \
    \   n /= i\n            }\n            i = i + 1l\n        }\n        if (n >\
    \ 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n :\
    \ Long) : List[Long] = {\n        var factors = List[Long]()\n        var i =\
    \ 2l\n        while (i <= n) {\n            while (n % i == 0) {\n           \
    \     factors = append(factors, i)\n                n /= i\n            }\n  \
    \          i = i + 1l\n        }\n        if (n > 1l) {\n            factors =\
    \ append(factors, n)\n        }\n        return factors\n    }\n\n    // Return\
    \ list of prime factors of given integer in the order from largest to smallest.\n\
    \    // Each of the factors should be listed number of times corresponding to\
    \ how many times it appeares in factorization.\n    // Input number should be\
    \ equal to the product of all factors\n    // >>> primeFactorsInReverse((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactorsInReverse((25l))\n\
    \    // (List[Long](5l.toLong, 5l", "        val factors = List[Long]()\n    \
    \    val primeFactors = List[Long]()\n        val primeFactorCount = 0\n     \
    \   val n = n.toLong\n        while (n > 1) {\n            val p = scala.math.factorial(n)\n\
    \            val q = n / p\n            primeFactorCount += 1\n            primeFactors\
    \ = primeFactors.append(p)\n            factors = factors.append(q)\n        \
    \    n = q\n        }\n        val factorsCount = factors.length\n        val\
    \ primeFactorCounts = List[Long](0)\n        for (i <- 0 until primeFactorCounts.length)\
    \ {\n            primeFactorCounts[i] = primeFactors.length\n        }\n     \
    \   val factorsCounts = List[Long](0)\n        for (i <- 0 until factorsCounts.length)\
    \ {\n            factorsCounts[i] = factorsCount\n        }\n        val factorsCountsList\
    \ = List[List[Long]](factorsCounts)\n        val factorsList = List[List[Long]](factorsCountsList)\n\
    \        for (i <- 0 until factorsList.length) {\n            factorsList[i] =\
    \ factorsList[i].map(x => x.toLong)\n        }\n        return factorsList", " \
    \       val factors = new ArrayList[Long]\n        val i = 2l\n        while (i\
    \ <= n) {\n            while (n % i == 0) {\n                factors.add(i)\n\
    \                n /= i\n            }\n            i = i + 1l\n        }\n  \
    \      factors.add(n)\n        return factors\n    }\n\n    // Return the sum\
    \ of all prime factors of given integer.\n    // >>> prime_factors((8l))\n   \
    \ // 2l.toLong\n    // >>> prime_factors((25l))\n    // 5l.toLong\n    // >>>\
    \ prime_factors((70l))\n    // 2l.toLong + 5l.toLong + 7l.toLong\n    def prime_factors(n\
    \ : Long) : Long = {\n        val factors = new ArrayList[Long]\n        val i\
    \ = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n         \
    \       factors.add(i)\n                n /= i\n            }\n            i =\
    \ i + 1l\n        }\n        if (n > 1l) {\n            factors.add(n)\n     \
    \   }\n        return sum(factors)\n    }\n\n    // Return the sum of all divisors\
    \ of given integer.\n    // >>> divisors((8l))\n    // 2l.toLong\n    // >>> divisors((25l))\n\
    \    // 5l.toLong\n    // >>> divisors((70l))\n    // 2l.toLong + 5l.toLong +\
    \ 7l.toLong\n    def divisors(n : Long) : Long = {\n        val factors = new\
    \ ArrayList[Long]\n        val i = 2l\n        while (i <= n) {\n            while\
    \ (n % i == 0) {\n                factors.add(i)\n                n /= i\n   \
    \         }\n            i = i + 1l\n        }\n        if (n > 1l) {\n      \
    \      factors.add(n)\n        }\n        return sum(factors)\n    }\n\n    //\
    \ Return the sum of all divisors of given integer.\n    // >>> divisors_recursive((8l))",
  "        if (n == 0) return List[Long]()\n        var factors = List[Long]()\n \
    \       var i = 2L\n        while (i <= n) {\n            while (n % i == 0) {\n\
    \                factors = factors.append(i)\n                n /= i\n       \
    \     }\n            i = i + 1\n        }\n        if (n > 1) factors = factors.append(n)\n\
    \        return factors\n    }\n\n    // Return the number of divisors of given\
    \ integer.\n    // >>> divisors(8l)\n    // 2\n    // >>> divisors(25l)\n    //\
    \ 5\n    // >>> divisors(70l)\n    // 7\n    def divisors(n : Long) : Long = {\n\
    \        if (n == 0) return 1L\n        var i = 2L\n        var sum = 1L\n   \
    \     while (i <= n) {\n            if (n % i == 0) {\n                sum = sum\
    \ + i\n                n /= i\n            } else {\n                i = i + 1\n\
    \            }\n        }\n        if (n > 1) sum = sum + n\n        return sum\n\
    \    }\n\n    // Return the number of divisors of given integer.\n    // >>> divisors(8l)\n\
    \    // 2\n    // >>> divisors(25l)\n    // 5\n    // >>> divisors(70l)\n    //\
    \ 7\n    def divisors2(n : Long) : Long = {\n        if (n == 0) return 1L\n \
    \       var i = 2L\n        var sum = 1L\n        while (i <= n) {\n         \
    \   if (n % i == 0) {\n                sum = sum + i\n                n /= i\n\
    \            }\n            i = i + 1\n        }\n        if (n > 1) sum = sum\
    \ + n\n        return sum\n    }\n\n    // Return the number of divisors of given\
    \ integer.\n    // >>> divisors(8l)\n    // 2\n    // >>> divisors(25l)\n    //\
    \ 5\n    // >>> divisors(70l)\n    // 7\n    def divisors3(n : Long) : Long",
  "        val factors = new ArrayList[Long]\n        val divisors = scala.math.factorial(n)\n\
    \        for (i <- 0 until divisors.size) {\n            val divisor = divisors.apply(i)\n\
    \            val factor = n / divisor\n            if (factor == divisor) {\n\
    \                factors.append(divisor)\n            } else {\n             \
    \   factors.append(factor)\n            }\n        }\n        return factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n :\
    \ Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val\
    \ divisors = scala.math.factorial(n)\n        for (i <- 0 until divisors.size)\
    \ {\n            val divisor = divisors.apply(i)\n            val factor = n /\
    \ divisor\n            if (factor == divisor) {\n                factors.append(divisor)\n\
    \            }\n        }\n        return factors\n    }\n\n    // Return list\
    \ of prime factors of given integer in the order from smallest to largest.\n \
    \   // Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    // Input number should be equal\
    \ to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[", "  \
    \      if (n == 0) return Nil\n        if (n == 1) return Nil\n        if (n ==\
    \ 2) return Nil\n        if (n == 3) return Nil\n        if (n == 5) return Nil\n\
    \        if (n == 7) return Nil\n        if (n == 11) return Nil\n        if (n\
    \ == 13) return Nil\n        if (n == 17) return Nil\n        if (n == 19) return\
    \ Nil\n        if (n == 23) return Nil\n        if (n == 29) return Nil\n    \
    \    if (n == 31) return Nil\n        if (n == 37) return Nil\n        if (n ==\
    \ 41) return Nil\n        if (n == 43) return Nil\n        if (n == 47) return\
    \ Nil\n        if (n == 53) return Nil\n        if (n == 59) return Nil\n    \
    \    if (n == 61) return Nil\n        if (n == 67) return Nil\n        if (n ==\
    \ 71) return Nil\n        if (n == 73) return Nil\n        if (n == 79) return\
    \ Nil\n        if (n == 83) return Nil\n        if (n == 89) return Nil\n    \
    \    if (n == 97) return Nil\n        if (n == 101) return Nil\n        if (n\
    \ == 103) return Nil\n        if (n == 107) return Nil\n        if (n == 109)\
    \ return Nil\n        if (n == 113) return Nil\n        if (n == 127) return Nil\n\
    \        if (n == 131) return Nil\n        if (n == 137) return Nil\n        if\
    \ (n == 139) return Nil\n        if (n == 149) return Nil\n        if (n == 151)\
    \ return Nil\n        if (n == 157) return Nil\n        if (n == 163) return Nil\n\
    \        if (n == 167) return Nil\n        if (n == 173) return Nil\n        if\
    \ (n == 179) return Nil\n        if (n == 181) return Nil\n        if (n == 191)\
    \ return Nil\n        if (n == 193) return Nil\n        if (n == 197) return Nil\n\
    \        if (n == 199) return Nil\n        if (n == 211) return Nil\n        if\
    \ (n == 223) return Nil\n        if (n == 227) return Nil\n        if", "    \
    \    val factors = List[Long]()\n        val nFactors = scala.math.factorial(n)\n\
    \        for (i <- 0 until nFactors) {\n            val factor = scala.math.factorial(i)\n\
    \            if (factor * n % scala.math.factorial(factor) == 0) {\n         \
    \       factors = factors.append(factor)\n            }\n        }\n        return\
    \ factors\n    }\n\n    // Return list of prime factors of given integer in the\
    \ order from smallest to largest.\n    // Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n\
    \        val nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors)\
    \ {\n            val factor = scala.math.factorial(i)\n            if (factor\
    \ * n % scala.math.factorial(factor) == 0) {\n                factors = factors.append(factor)\n\
    \            }\n        }\n        return factors\n    }\n\n    // Return list\
    \ of prime factors of given integer in the order from smallest to largest.\n \
    \   // Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    // Input number should be equal\
    \ to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>>", "        var factors = List[Long]()\n        var i\
    \ = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n         \
    \       factors = factors.append(i)\n                n /= i\n            }\n \
    \           i = i + 1l\n        }\n        factors\n    }\n\n    // Return list\
    \ of prime factors of given integer in the order from smallest to largest.\n \
    \   // Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    // Input number should be equal\
    \ to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors\
    \ = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while\
    \ (n % i == 0) {\n                factors = factors.append(i)\n              \
    \  n /= i\n            }\n            i = i + 1l\n        }\n        factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors2(n\
    \ : Long) : List[Long] = {", "        val factors = List[Long]()\n        val\
    \ num = n\n        while (num > 1) {\n            val factor = num.div(num.toLong)\n\
    \            factors = factors.append(factor)\n            num = num.div(factor)\n\
    \        }\n        return factors\n    }\n\n    // Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    // Each of the\
    \ factors should be listed number of times corresponding to how many times it\
    \ appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> factorize2((8l))\n    // (List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))\n    // >>> factorize2((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n\
    \    // >>> factorize2((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def factorize2(n : Long) : List[Long] = {\n        val factors = List[Long]()\n\
    \        val num = n\n        while (num > 1) {\n            val factor = num.div(num.toLong)\n\
    \            factors = factors.append(factor)\n            num = num.div(factor)\n\
    \        }\n        return factors\n    }\n\n    // Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    // Each of the\
    \ factors should be listed number of times corresponding to how many times it\
    \ appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> factorize3((8l))\n    // (List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))\n    // >>> factorize3((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n\
    \    // >>> factorize3((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def factorize3(n : Long) : List[Long] = {\n        val factors = List[Long]()\n",
  "        var factors = List[Long]()\n        var i = 2l\n        while (i <= n)\
    \ {\n            while (n % i == 0) {\n                factors = factors.append(i)\n\
    \                n /= i\n            }\n            i += 1\n        }\n      \
    \  if (n > 1) {\n            factors = factors.append(n)\n        }\n        return\
    \ factors\n    }\n\n    // Return list of prime factors of given integer in the\
    \ order from largest to smallest.\n    // Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](7l.toLong, 2l.toLong, 5l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = factors.append(i)\n                n /= i\n   \
    \         }\n            i += 1\n        }\n        if (n > 1) {\n           \
    \ factors = factors.append(n)\n        }\n        return factors\n    }\n\n  \
    \  // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> primeFactors((8l))\n    //\
    \ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List", "        val factors = List[Long]()\n        val factorization\
    \ = factor(n)\n        for (i <- 0 until factorization.size) {\n            factors\
    \ = factors.append(factorization.apply(i))\n        }\n        return factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> factor(8)\n\
    \    // 2\n    // >>> factor(25)\n    // 5\n    // >>> factor(70)\n    // 2\n\
    \    // 5\n    // 7\n    // >>> factor(120)\n    // 2\n    // 5\n    // 7\n  \
    \  // 11\n    // >>> factor(300)\n    // 5\n    // 11\n    // 13\n    // 17\n\
    \    // 19\n    // 23\n    // 29\n    // 31\n    // 37\n    // 41\n    // 43\n\
    \    // 47\n    // 53\n    // 59\n    // 61\n    // 67\n    // 71\n    // 73\n\
    \    // 79\n    // 83\n    // 89\n    // 97\n    // 101\n    // 103\n    // 107\n\
    \    // 109\n    // 113\n    // 127\n    // 131\n    // 137\n    // 139\n    //\
    \ 149\n    // 151\n    // 157\n    // 163\n    // 167\n    // 169\n    // 173\n\
    \    // 179\n    // 181\n    // 191\n    // 193\n    // 197\n    // 199\n    //\
    \ 211\n    // 223\n    // 227\n    // 229\n    // 233\n    // 239\n    // 241\n\
    \    // 251\n    // 257\n    // 263\n    // 269\n    // 271\n    // 277\n    //\
    \ 281\n    // 283\n    // 293\n    // 307\n    // 311\n    // 313\n    // 317\n\
    \    // 331\n    // 337\n    // 347\n    // 349\n    // 353\n    // 359\n    //\
    \ 367\n    // 373\n    // 379\n    // 383\n    // 389\n    // 397\n    // 401\n\
    \    // 409\n    // 419\n    ", "        val factors = new ArrayList[Long]\n \
    \       val nFactors = n.toLong\n        for (i <- 0 until nFactors) {\n     \
    \       val factor = nFactors.div(i + 1).toLong\n            if (factor > 1) {\n\
    \                factors.append(factor)\n            }\n        }\n        return\
    \ factors\n    }\n\n    // Return list of prime factors of given integer in the\
    \ order from smallest to largest.\n    // Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n\
    \        val nFactors = n.toLong\n        for (i <- 0 until nFactors) {\n    \
    \        val factor = nFactors.div(i + 1).toLong\n            if (factor > 1 &&\
    \ factor.mod(2l).toLong == 0) {\n                factors.append(factor)\n    \
    \        }\n        }\n        return factors\n    }\n\n    // Return list of\
    \ prime factors of given integer in the order from smallest to largest.\n    //\
    \ Each of the factors should be listed number of times corresponding to how many\
    \ times it appeares in factorization.\n    // Input number should be equal to\
    \ the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.",
  "        val factors = mutable.List[Long]()\n        val nFactors = mutable.List[Long]()\n\
    \        val nFactors2 = mutable.List[Long]()\n        val nFactors3 = mutable.List[Long]()\n\
    \        val nFactors4 = mutable.List[Long]()\n        val nFactors5 = mutable.List[Long]()\n\
    \        val nFactors6 = mutable.List[Long]()\n        val nFactors7 = mutable.List[Long]()\n\
    \        val nFactors8 = mutable.List[Long]()\n        val nFactors9 = mutable.List[Long]()\n\
    \        val nFactors10 = mutable.List[Long]()\n        val nFactors11 = mutable.List[Long]()\n\
    \        val nFactors12 = mutable.List[Long]()\n        val nFactors13 = mutable.List[Long]()\n\
    \        val nFactors14 = mutable.List[Long]()\n        val nFactors15 = mutable.List[Long]()\n\
    \        val nFactors16 = mutable.List[Long]()\n        val nFactors17 = mutable.List[Long]()\n\
    \        val nFactors18 = mutable.List[Long]()\n        val nFactors19 = mutable.List[Long]()\n\
    \        val nFactors20 = mutable.List[Long]()\n        val nFactors21 = mutable.List[Long]()\n\
    \        val nFactors22 = mutable.List[Long]()\n        val nFactors23 = mutable.List[Long]()\n\
    \        val nFactors24 = mutable.List[Long]()\n        val nFactors25 = mutable.List[Long]()\n\
    \        val nFactors26 = mutable.List[Long]()\n        val nFactors27 = mutable.List[Long]()\n\
    \        val nFactors28 = mutable.List[Long]()\n        val nFactors29 = mutable.List[Long]()\n\
    \        val nFactors30 = mutable.List[Long]()\n        val nFactors31 = mutable.List[Long]()\n\
    \        val nFact", "        var factors = List[Long]()\n        var i = 2l\n\
    \        while (i <= n) {\n            while (n % i == 0) {\n                factors\
    \ = factors.append(i)\n                n /= i\n            }\n            i =\
    \ i + 1l\n        }\n        if (n > 1l) factors = factors.append(n)\n       \
    \ return factors\n    }\n\n    // Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    // Each of the factors should be\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = factors.append(i)\n                n /= i\n   \
    \         }\n            i = i + 1l\n        }\n        if (n > 1l) factors =\
    \ factors.append(n)\n        return factors\n    }\n\n    // Return list of prime\
    \ factors of given integer in the order from smallest to largest.\n    // Each\
    \ of the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.", "    \
    \    var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n\
    \            while (n % i == 0) {\n                factors = append(factors, i)\n\
    \                n /= i\n            }\n            i += 1\n        }\n      \
    \  if (n > 1) {\n            factors = append(factors, n)\n        }\n       \
    \ return factors\n    }\n\n    // Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    // Each of the factors should be\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = append(factors, i)\n                n /= i\n  \
    \          }\n            i += 1\n        }\n        if (n > 1) {\n          \
    \  factors = append(factors, n)\n        }\n        return factors\n    }\n\n\
    \    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> primeFactors((8l))\n    //\
    \ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n",
  "        var factors = List[Long]()\n        var i = 2l\n        while (i <= n)\
    \ {\n            while (n % i == 0) {\n                factors = append(factors,\
    \ i)\n                n /= i\n            }\n            i += 1\n        }\n \
    \       if (n > 1) {\n            factors = append(factors, n)\n        }\n  \
    \      return factors\n    }\n\n    // Return the sum of all the prime factors\
    \ of given integer.\n    // Input number should be equal to the product of all\
    \ factors\n    // >>> primeFactors((8l))\n    // 2l.toLong\n    // >>> primeFactors((25l))\n\
    \    // 5l.toLong\n    // >>> primeFactors((70l))\n    // 2l.toLong + 5l.toLong\
    \ + 7l.toLong\n    def primeFactors(n : Long) : Long = {\n        var factors\
    \ = factorize(n)\n        var sum = 1l\n        for (i <- 0 until factors.size)\
    \ {\n            sum *= factors[i]\n        }\n        return sum\n    }\n\n \
    \   // Return the sum of all the prime factors of given integer.\n    // Input\
    \ number should be equal to the product of all factors\n    // >>> primeFactors2((8l))\n\
    \    // 2l.toLong\n    // >>> primeFactors2((25l))\n    // 5l.toLong\n    // >>>\
    \ primeFactors2((70l))\n    // 2l.toLong + 5l.toLong + 7l.toLong\n    def primeFactors2(n\
    \ : Long) : Long = {\n        var factors = factorize(n)\n        var sum = 1l\n\
    \        for (i <- 0 until factors.size) {\n            sum *= factors[i]\n  \
    \      }\n        return sum\n    }\n\n    // Return the sum of all the prime\
    \ factors of given integer.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> primeFactors3((8l))\n    // 2l.toLong\n    // >>>\
    \ primeFactors3((25l))\n    // 5l.toLong\n    // >>> primeFactors3((70l))\n  \
    \  // 2l.to", "        var factors = List[Long]()\n        var i = 2l\n      \
    \  while (i <= n) {\n            while (n % i == 0) {\n                factors\
    \ = append(factors, i)\n                n /= i\n            }\n            i =\
    \ i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors,\
    \ n)\n        }\n        return factors", "        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = factors.append(i)\n                n /= i\n   \
    \         }\n            i = i + 1l\n        }\n        factors\n    }\n\n   \
    \ // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> primeFactors((8l))\n    //\
    \ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n :\
    \ Long) : List[Long] = {\n        var factors = List[Long]()\n        var i =\
    \ 2l\n        while (i <= n) {\n            while (n % i == 0) {\n           \
    \     factors = factors.append(i)\n                n /= i\n            }\n   \
    \         i = i + 1l\n        }\n        factors\n    }\n\n    // Return list\
    \ of prime factors of given integer in the order from smallest to largest.\n \
    \   // Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    // Input number should be equal\
    \ to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n", "        val\
    \ factors = List[Long]()\n        val primeFactors = primeFactors(n)\n       \
    \ for (i <- 0 until primeFactors.size) {\n            val primeFactor = primeFactors(i)\n\
    \            val count = count(primeFactor, n)\n            factors = factors.append(primeFactor.toLong\
    \ * count)\n        }\n        factors\n    }\n\n    // Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    // Each of the\
    \ factors should be listed number of times corresponding to how many times it\
    \ appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> primeFactors(8)\n    // List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)\n    // >>> primeFactors(25)\n    // List[Long](5l.toLong, 5l.toLong)\n\
    \    // >>> primeFactors(70)\n    // List[Long](2l.toLong, 5l.toLong, 7l.toLong)\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n\
    \        for (i <- 0 until n.toLong.div(2).toLong) {\n            if (n.toLong.mod(2).toLong\
    \ == 0) {\n                factors = factors.append(2l.toLong)\n            }\
    \ else {\n                val primeFactor = 2l.toLong\n                factors\
    \ = factors.append(primeFactor)\n            }\n            n = n.toLong.div(primeFactor)\n\
    \        }\n        factors\n    }\n\n    // Return number of times given prime\
    \ factor appears in given number.\n    // >>> count(2l, 25)\n    // 2\n    //\
    \ >>> count(5l, 25)\n    // 1\n    // >>> count(7l, 25)\n    // 2\n    def count(primeFactor\
    \ : Long, n : Long) : Long = {\n        val count = 0l\n        for (i <- 0 until\
    \ n.toLong.div(primeFactor).toLong) {\n            if (n.toLong.mod(primeFactor).toLong\
    \ == 0) {\n                ", "        val factors = List[Long]()\n        val\
    \ i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n       \
    \         factors = append(factors, i)\n                n /= i\n            }\n\
    \            i += 1\n        }\n        if (n > 1) {\n            factors = append(factors,\
    \ n)\n        }\n        return factors\n    }\n\n    // Return the sum of all\
    \ the prime factors of given integer.\n    // >>> prime_factors((8l))\n    //\
    \ 2l.toLong\n    // >>> prime_factors((25l))\n    // 5l.toLong\n    // >>> prime_factors((70l))\n\
    \    // 2l.toLong + 5l.toLong + 7l.toLong\n    def prime_factors(n : Long) : Long\
    \ = {\n        val factors = List[Long]()\n        val i = 2l\n        while (i\
    \ <= n) {\n            while (n % i == 0) {\n                factors = append(factors,\
    \ i)\n                n /= i\n            }\n            i += 1\n        }\n \
    \       if (n > 1) {\n            factors = append(factors, n)\n        }\n  \
    \      return sum(factors)\n    }\n\n    // Return the sum of all the prime factors\
    \ of given integer.\n    // >>> prime_factors_recursive((8l))\n    // 2l.toLong\n\
    \    // >>> prime_factors_recursive((25l))\n    // 5l.toLong\n    // >>> prime_factors_recursive((70l))\n\
    \    // 2l.toLong + 5l.toLong + 7l.toLong\n    def prime_factors_recursive(n :\
    \ Long) : Long = {\n        val factors = List[Long]()\n        val i = 2l\n \
    \       while (i <= n) {\n            while (n % i == 0) {\n                factors\
    \ = append(factors, i)\n                n /= i\n            }\n            i +=\
    \ 1\n        }\n        if (n > 1) {\n            factors = append(factors, n)\n\
    \        }\n        return sum(factors", "        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = append(factors, i)\n                n /= i\n  \
    \          }\n            i += 1\n        }\n        if (n > 1) {\n          \
    \  factors = append(factors, n)\n        }\n        return factors\n    }\n\n\
    \    // Return the sum of all prime factors of given integer in the order from\
    \ smallest to largest.\n    // Input number should be equal to the product of\
    \ all factors\n    // >>> primeFactorization((8l))\n    // 2l.toLong\n    // >>>\
    \ primeFactorization((25l))\n    // 5l.toLong\n    // >>> primeFactorization((70l))\n\
    \    // 2l.toLong + 5l.toLong + 7l.toLong\n    def primeFactorization(n : Long)\
    \ : Long = {\n        var factors = factorize(n)\n        var result = 0l\n  \
    \      for (i <- 0 until factors.length) {\n            result += factors(i)\n\
    \        }\n        return result\n    }\n\n    // Return the sum of all prime\
    \ factors of given integer in the order from smallest to largest.\n    // Input\
    \ number should be equal to the product of all factors\n    // >>> primeFactorization((8l))\n\
    \    // 2l.toLong\n    // >>> primeFactorization((25l))\n    // 5l.toLong\n  \
    \  // >>> primeFactorization((70l))\n    // 2l.toLong + 5l.toLong + 7l.toLong\n\
    \    def primeFactorization2(n : Long) : Long = {\n        var factors = factorize(n)\n\
    \        var result = 0l\n        for (i <- 0 until factors.length) {\n      \
    \      result += factors(i) * i\n        }\n        return result\n    }\n\n \
    \   // Return the sum of all prime factors of given integer in the order from\
    \ smallest to largest.\n    // Input number should be equal to the product of\
    \ all factors\n    // >>> primeFactorization((8l))\n    // 2l.toLong\n    // >>>\
    \ primeFactorization((25l))\n    // 5l.toLong\n    // >>> primeFactor", "    \
    \    var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n\
    \            while (n % i == 0) {\n                factors = factors.append(i)\n\
    \                n /= i\n            }\n            i = i + 1l\n        }\n  \
    \      factors", "        val factors = new ArrayList[Long]\n        val primeFactors\
    \ = primeFactors(n)\n        for (i <- 0 until primeFactors.size) {\n        \
    \    val factor = primeFactors.apply(i)\n            factors.append(factor)\n\
    \        }\n        return factors\n    }\n\n    // Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    // Each of the\
    \ factors should be listed number of times corresponding to how many times it\
    \ appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> primeFactors(8l)\n    // (List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))\n    // >>> primeFactors(25l)\n    // (List[Long](5l.toLong, 5l.toLong))\n\
    \    // >>> primeFactors(70l)\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n\
    \        val primeFactors = new ArrayList[Long]\n        val i = 2\n        while\
    \ (i <= n) {\n            if (n % i == 0) {\n                primeFactors.append(i)\n\
    \                n /= i\n            } else {\n                i = i + 1\n   \
    \         }\n        }\n        for (i <- 0 until primeFactors.size) {\n     \
    \       val factor = primeFactors.apply(i)\n            factors.append(factor)\n\
    \        }\n        return factors", "        val factors = new ArrayList[Long]\n\
    \        val divisors = new ArrayList[Long]\n        val divisor = 2l\n      \
    \  while (n > 1l) {\n            while (n % divisor == 0l) {\n               \
    \ n /= divisor\n                divisors.add(divisor)\n            }\n       \
    \     divisor++\n        }\n        factors.addAll(divisors)\n        factors.sort(Comparator.comparingLong(Long::toLong))\n\
    \        return factors", "        val factors = ListBuffer[Long]()\n        val\
    \ nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors) {\n\
    \            val factor = scala.math.factorial(i)\n            if (factor * n)\
    \ == n {\n                factors.append(factor)\n            }\n        }\n \
    \       factors.sort(Comparator.comparing(Long::toString))\n        return factors.toList\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n :\
    \ Long) : List[Long] = {\n        val factors = ListBuffer[Long]()\n        val\
    \ nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors) {\n\
    \            val factor = scala.math.factorial(i)\n            if (factor * n)\
    \ == n {\n                factors.append(factor)\n            }\n        }\n \
    \       factors.sort(Comparator.comparing(Long::toString))\n        return factors.toList\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[", "        val factors = new ArrayList[Long]()\n        val factorization\
    \ = factor(n)\n        for (i <- 0 until factorization.size) {\n            factors.add(factorization.get(i))\n\
    \        }\n        return factors\n    }\n\n    // Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    // Each of the\
    \ factors should be listed number of times corresponding to how many times it\
    \ appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> factor(8l)\n    // (List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))\n    // >>> factor(25l)\n    // (List[Long](5l.toLong, 5l.toLong))\n\
    \    // >>> factor(70l)\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def factor(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]()\n\
    \        val factorization = factor(n)\n        for (i <- 0 until factorization.size)\
    \ {\n            factors.add(factorization.get(i))\n        }\n        return\
    \ factors\n    }\n\n    // Return list of prime factors of given integer in the\
    \ order from smallest to largest.\n    // Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ factor(8l)\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>>\
    \ factor(25l)\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factor(70l)\n\
    \    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factor(n : Long)\
    \ : List[Long] = {\n        val factors = new ArrayList[Long]()\n        val factorization\
    \ = factor(n)\n        for (i <- 0 until factorization.size) {\n            factors.add(factorization.get",
  "        val factors = new ArrayList[Long]\n        val d = 2l\n        while (n\
    \ % d == 0) {\n            factors.add(d)\n            n /= d\n        }\n   \
    \     if (n > 1) {\n            factors.add(n)\n        }\n        return factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ largest to smallest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n :\
    \ Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val\
    \ d = 2l\n        while (n % d == 0) {\n            factors.add(d)\n         \
    \   n /= d\n        }\n        if (n > 1) {\n            factors.add(n)\n    \
    \    }\n        return factors\n    }\n\n    // Return list of prime factors of\
    \ given integer in the order from smallest to largest.\n    // Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n    // Input number should be equal to the product of all\
    \ factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n\
    \    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors2(n : Long) : List[Long] = {", "        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = append(factors, i)\n                n /= i\n  \
    \          }\n            i = i + 1l\n        }\n        if (n > 1l) {\n     \
    \       factors = append(factors, n)\n        }\n        return factors", "  \
    \      var factors = List[Long]()\n        var i = 2l\n        while (i <= n)\
    \ {\n            while (n % i == 0) {\n                factors = factors.append(i)\n\
    \                n /= i\n            }\n            i = i + 1l\n        }\n  \
    \      factors\n    }\n\n    // Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    // Each of the factors should be\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = factors.append(i)\n                n /= i\n   \
    \         }\n            i = i + 1l\n        }\n        factors\n    }\n\n   \
    \ // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> primeFactors((8l))\n    //\
    \ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactorsWithRemainder(n\
    \ : Long) : List[T", "        var factors = List[Long]()\n        var i = 2l\n\
    \        while (i <= n) {\n            while (n % i == 0) {\n                factors\
    \ = append(factors, i)\n                n /= i\n            }\n            i =\
    \ i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors,\
    \ n)\n        }\n        return factors", "        val factors = new ArrayList[Long]\n\
    \        val nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors)\
    \ {\n            val factor = scala.math.factorial(i)\n            if (factor\
    \ * factor == n) {\n                factors.append(factor)\n            }\n  \
    \      }\n        return factors\n    }\n\n    // Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    // Each of the\
    \ factors should be listed number of times corresponding to how many times it\
    \ appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors\
    \ = new ArrayList[Long]\n        val nFactors = scala.math.factorial(n)\n    \
    \    for (i <- 0 until nFactors) {\n            val factor = scala.math.factorial(i)\n\
    \            if (factor * factor == n) {\n                factors.append(factor)\n\
    \            }\n        }\n        return factors\n    }\n\n    // Return list\
    \ of prime factors of given integer in the order from smallest to largest.\n \
    \   // Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    // Input number should be equal\
    \ to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.",
  "        val factors = mutable.List[Long]()\n        val nFactors = scala.math.factorial(n)\n\
    \        for (i <- 0 until nFactors) {\n            val factor = scala.math.factorial(i)\n\
    \            if (factor * n == n) {\n                factors:= factors + List(factor)\n\
    \            }\n        }\n        factors", "        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = append(factors, i)\n                n /= i\n  \
    \          }\n            i += 1\n        }\n        if (n > 1) {\n          \
    \  factors = append(factors, n)\n        }\n        return factors\n    }\n\n\
    \    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> primeFactors((8l))\n    //\
    \ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n :\
    \ Long) : List[Long] = {\n        var factors = List[Long]()\n        var i =\
    \ 2l\n        while (i <= n) {\n            while (n % i == 0) {\n           \
    \     factors = append(factors, i)\n                n /= i\n            }\n  \
    \          i += 1\n        }\n        if (n > 1) {\n            factors = append(factors,\
    \ n)\n        }\n        return factors\n    }\n\n    // Return list of prime\
    \ factors of given integer in the order from largest to smallest.\n    // Each\
    \ of the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> primeFactorsInReverse((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactorsInReverse((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>>", "        val factors = List[Long]()\n        val divisors\
    \ = scala.math.factorial(n.toLong)\n        for (i <- 0 until divisors.size -\
    \ 1) {\n            val divisor = divisors.apply(i)\n            val count = n.div(divisor).toLong\n\
    \            if (count > 0) {\n                factors = factors.append(divisor.toLong)\n\
    \                factors = factors.append(count)\n            }\n        }\n \
    \       return factors\n    }\n\n    // Return list of prime factors of given\
    \ integer in the order from largest to smallest.\n    // Each of the factors should\
    \ be listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](7l.toLong, 7l.toLong))\n   \
    \ def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n\
    \        val divisors = scala.math.factorial(n.toLong)\n        for (i <- 0 until\
    \ divisors.size - 1) {\n            val divisor = divisors.apply(i)\n        \
    \    val count = n.div(divisor).toLong\n            if (count > 0) {\n       \
    \         factors = factors.append(divisor.toLong)\n                factors =\
    \ factors.append(count)\n            }\n        }\n        return factors\n  \
    \  }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.", "        val factors = new ArrayList[Long]\n\
    \        val factor = 2l\n        while (n > 1) {\n            if (n % factor\
    \ == 0) {\n                factors.append(factor)\n                n /= factor\n\
    \            } else {\n                factor = 3l\n            }\n        }\n\
    \        factors.append(n)\n        return factors\n    }\n\n    // Return list\
    \ of prime factors of given integer in the order from largest to smallest.\n \
    \   // Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    // Input number should be equal\
    \ to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors\
    \ = new ArrayList[Long]\n        val factor = 2l\n        while (n > 1) {\n  \
    \          if (n % factor == 0) {\n                factors.append(factor)\n  \
    \              n /= factor\n            } else {\n                factor = 3l\n\
    \            }\n        }\n        factors.append(n)\n        return factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors2((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors2((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors2((70l))\n\
    \    // (List[Long](2l.toLong, 5l.toLong,", "        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = append(factors, i)\n                n /= i\n  \
    \          }\n            i += 1\n        }\n        if (n > 1) {\n          \
    \  factors = append(factors, n)\n        }\n        return factors", "       \
    \ val factors = new ArrayList[Long]\n        val primeFactors = primeFactorization(n)\n\
    \        for (i <- 0 until primeFactors.size) {\n            val primeFactor =\
    \ primeFactors.get(i)\n            val factorCount = primeFactor.toLong\n    \
    \        for (j <- 0 until factorCount) {\n                factors.add(primeFactor)\n\
    \            }\n        }\n        return factors\n    }\n\n    // Return prime\
    \ factors of given integer.\n    // >>> primeFactorization(2l)\n    // (List[Long](2l.toLong))\n\
    \    // >>> primeFactorization(4l)\n    // (List[Long](2l.toLong, 2l.toLong))\n\
    \    // >>> primeFactorization(8l)\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n\
    \    // >>> primeFactorization(25l)\n    // (List[Long](5l.toLong, 5l.toLong))\n\
    \    // >>> primeFactorization(70l)\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactorization(n : Long) : List[Long] = {\n       \
    \ val factors = new ArrayList[Long]\n        val primeFactors = new ArrayList[Long]\n\
    \        val nFactors = n.toLong\n        for (i <- 0 until nFactors) {\n    \
    \        val primeFactor = scala.math.factorial(i)\n            if (primeFactor.toLong\
    \ % n == 0) {\n                primeFactors.add(primeFactor)\n               \
    \ nFactors -= 1\n            }\n        }\n        factors.addAll(primeFactors)\n\
    \        return factors", "        val factors = List[Long]()\n        val factorization\
    \ = factor(n)\n        for (i <- 0 until factorization.size) {\n            val\
    \ factor = factorization.apply(i)\n            factors = factors.append(factor)\n\
    \        }\n        return factors\n    }\n\n    // Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    // Each of the\
    \ factors should be listed number of times corresponding to how many times it\
    \ appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> factor(8l)\n    // List(2l.toLong, 2l.toLong, 2l.toLong)\n\
    \    // >>> factor(25l)\n    // List(5l.toLong, 5l.toLong)\n    // >>> factor(70l)\n\
    \    // List(2l.toLong, 5l.toLong, 7l.toLong)\n    def factor(n : Long) : List[Long]\
    \ = {\n        val factors = List[Long]()\n        val factorization = factor(n)\n\
    \        for (i <- 0 until factorization.size) {\n            val factor = factorization.apply(i)\n\
    \            factors = factors.append(factor)\n        }\n        return factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> factor(8l)\n\
    \    // List(2l.toLong, 2l.toLong, 2l.toLong)\n    // >>> factor(25l)\n    //\
    \ List(5l.toLong, 5l.toLong)\n    // >>> factor(70l)\n    // List(2l.toLong, 5l.toLong,\
    \ 7l.toLong)\n    def factor(n : Long) : List[Long] = {\n        val factors =\
    \ List[Long]()\n        val factorization = factor(n)\n        for (i <- 0 until\
    \ factorization.size) {\n            val factor = factorization.apply(i)\n   \
    \         factors =", "        val factors = new ArrayList[Long]\n        val\
    \ i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n       \
    \         factors.add(i)\n                n /= i\n            }\n            i\
    \ += 1\n        }\n        if (n > 1) factors.add(n)\n        return factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ largest to smallest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> factorizeReverse((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorizeReverse((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorizeReverse((70l))\n\
    \    // (List[Long](7l.toLong, 5l.toLong, 2l.toLong))\n    def factorizeReverse(n\
    \ : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n      \
    \  val i = n\n        while (i > 1) {\n            while (i % 2 == 0) {\n    \
    \            factors.add(2l)\n                i /= 2\n            }\n        \
    \    while (i % 3 == 0) {\n                factors.add(3l)\n                i\
    \ /= 3\n            }\n            while (i % 5 == 0) {\n                factors.add(5l)\n\
    \                i /= 5\n            }\n            while (i % 7 == 0) {\n   \
    \             factors.add(7l)\n                i /= 7\n            }\n       \
    \ }\n        if (i == 1) factors.add(i)\n        return factors\n    }\n\n   \
    \ // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> factorize2((8l))", "    \
    \    var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n\
    \            while (n % i == 0) {\n                factors = factors.append(i)\n\
    \                n /= i\n            }\n            i = i + 1l\n        }\n  \
    \      factors\n    }\n\n    // Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    // Each of the factors should be\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = factors.append(i)\n                n /= i\n   \
    \         }\n            i = i + 1l\n        }\n        factors\n    }\n\n   \
    \ // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> primeFactors((8l))\n    //\
    \ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors2(n\
    \ : Long) : List[Long] = {", "        var factors = List[Long]()\n        var\
    \ i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n       \
    \         factors = factors.append(i)\n                n /= i\n            }\n\
    \            i = i + 1l\n        }\n        if (n > 1l) {\n            factors\
    \ = factors.append(n)\n        }\n        return factors\n    }\n\n    // Return\
    \ list of prime factors of given integer in the order from smallest to largest.\n\
    \    // Each of the factors should be listed number of times corresponding to\
    \ how many times it appeares in factorization.\n    // Input number should be\
    \ equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors\
    \ = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while\
    \ (n % i == 0) {\n                factors = factors.append(i)\n              \
    \  n /= i\n            }\n            i = i + 1l\n        }\n        if (n > 1l)\
    \ {\n            factors = factors.append(n)\n        }\n        return factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((", "    \
    \    var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n\
    \            while (n % i == 0) {\n                factors = factors.append(i)\n\
    \                n /= i\n            }\n            i = i + 1l\n        }\n  \
    \      if (n > 1l) {\n            factors = factors.append(n)\n        }\n   \
    \     return factors\n    }\n\n    // Return the sum of all prime factors of given\
    \ integer\n    // >>> primeFactorsSum(8l)\n    // 2l\n    // >>> primeFactorsSum(25l)\n\
    \    // 5l\n    // >>> primeFactorsSum(70l)\n    // 2l + 5l + 7l\n    def primeFactorsSum(n\
    \ : Long) : Long = {\n        var factors = factorize(n)\n        var sum = 0l\n\
    \        for (i <- 0 until factors.length) {\n            sum = sum + factors(i)\n\
    \        }\n        return sum\n    }\n\n    // Return the product of all prime\
    \ factors of given integer\n    // >>> primeFactorsProduct(8l)\n    // 2l\n  \
    \  // >>> primeFactorsProduct(25l)\n    // 5l\n    // >>> primeFactorsProduct(70l)\n\
    \    // 2l * 5l * 7l\n    def primeFactorsProduct(n : Long) : Long = {\n     \
    \   var factors = factorize(n)\n        var product = 1l\n        for (i <- 0\
    \ until factors.length) {\n            product = product * factors(i)\n      \
    \  }\n        return product\n    }\n\n    // Return the sum of all divisors of\
    \ given integer\n    // >>> divisorsSum(8l)\n    // 2l + 4l + 8l\n    // >>> divisorsSum(25l)\n\
    \    // 5l + 25l\n    // >>> divisorsSum(70l)\n    // 2l + 5l + 7l + 14l + 28l\n\
    \    def divisorsSum(n : Long) : Long = {\n        var factors = factorize(n)\n\
    \        var sum = 0l\n        for (i <- 0 until factors.length) {\n         \
    \   sum = sum + factors(i)", "        val factors = mutable.List[Long]()\n   \
    \     val primeFactors = mutable.List[Long]()\n        val i = 2l\n        while\
    \ (i <= n) {\n            while (n % i == 0) {\n                factors.append(i)\n\
    \                n /= i\n            }\n            i = i + 1l\n        }\n  \
    \      if (n > 1l) {\n            factors.append(n)\n        }\n        factors.foreach(f\
    \ -> primeFactors.append(f))\n        return factors.toList", "        var factors\
    \ = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while\
    \ (n % i == 0) {\n                factors = append(factors, i)\n             \
    \   n /= i\n            }\n            i = i + 1l\n        }\n        if (n >\
    \ 1l) {\n            factors = append(factors, n)\n        }\n        return factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ largest to smallest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](7l.toLong, 2l.toLong, 5l.toLong))\n    def primeFactors(n :\
    \ Long) : List[Long] = {\n        var factors = List[Long]()\n        var i =\
    \ 2l\n        while (i <= n) {\n            while (n % i == 0) {\n           \
    \     factors = append(factors, i)\n                n /= i\n            }\n  \
    \          i = i + 1l\n        }\n        if (n > 1l) {\n            factors =\
    \ append(factors, n)\n        }\n        return factors\n    }\n\n    // Return\
    \ list of prime factors of given integer in the order from smallest to largest.\n\
    \    // Each of the factors should be listed number of times corresponding to\
    \ how many times it appeares in factorization.\n    // Input number should be\
    \ equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>>", "        val factors = new ArrayList[Long]\n     \
    \   val primeFactors = primeFactors(n)\n        for (i <- 0 until primeFactors.size)\
    \ {\n            val primeFactor = primeFactors(i)\n            val count = count(primeFactor,\
    \ n)\n            factors.add(primeFactor)\n            factors.addAll(count.toList)\n\
    \        }\n        return factors\n    }\n\n    // Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    // Each of the\
    \ factors should be listed number of times corresponding to how many times it\
    \ appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> primeFactors(8)\n    // (List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))\n    // >>> primeFactors(25)\n    // (List[Long](5l.toLong, 5l.toLong))\n\
    \    // >>> primeFactors(70)\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n\
    \        if (n == 0) {\n            return factors\n        }\n        if (n ==\
    \ 1) {\n            return factors\n        }\n        if (n == 2) {\n       \
    \     return factors\n        }\n        if (n == 3) {\n            return factors\n\
    \        }\n        if (n % 2 == 0) {\n            factors.add(2l)\n         \
    \   factors.add(n / 2l)\n            return factors\n        }\n        if (n\
    \ % 3 == 0) {\n            factors.add(3l)\n            factors.add(n / 3l)\n\
    \            return factors\n        }\n        val divisor = 5l\n        while\
    \ (divisor * divisor <= n) {\n            if (n % divisor == 0) {\n          \
    \      factors.add(divisor)\n                factors.add(n / divisor)\n      \
    \          return factors\n            }\n            divisor += 2\n        }\n\
    \        factors.add", "        val factors = List[Long]()\n        val divisors\
    \ = scala.math.factorial(n.toLong)\n        for (i <- 0 until divisors.size) {\n\
    \            val divisor = divisors.apply(i)\n            val divisorFactors =\
    \ divisor.toLong / 2\n            val divisorFactorsCopy = divisorFactors.copy\n\
    \            while (divisorFactorsCopy.size > 0) {\n                val divisorFactor\
    \ = divisorFactorsCopy.apply(0)\n                divisorFactorsCopy = divisorFactorsCopy.slice(1)\n\
    \                factors = factors.append(divisorFactor)\n            }\n    \
    \    }\n        return factors\n    }\n\n    // Return list of prime factors of\
    \ given integer in the order from smallest to largest.\n    // Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n    // Input number should be equal to the product of all\
    \ factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n\
    \    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n\
    \        val divisors = scala.math.factorial(n.toLong)\n        for (i <- 0 until\
    \ divisors.size) {\n            val divisor = divisors.apply(i)\n            val\
    \ divisorFactors = divisor.toLong / 2\n            val divisorFactorsCopy = divisorFactors.copy\n\
    \            while (divisorFactorsCopy.size > 0) {\n                val divisorFactor\
    \ = divisorFactorsCopy.apply(0)\n                divisorFactorsCopy = divisorFactorsCopy.slice(1)\n\
    \                factors = factors.", "        val factors = List[Long]()\n  \
    \      val i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n \
    \               factors = factors.append(i)\n                val j = 2l\n    \
    \            while (n % i == 0) {\n                    n /= i\n              \
    \      j += 1\n                }\n                factors = factors.append(j)\n\
    \            }\n            i += 1\n        }\n        if (n > 1) {\n        \
    \    factors = factors.append(n)\n        }\n        return factors", "      \
    \  var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n\
    \            while (n % i == 0) {\n                factors = append(factors, i)\n\
    \                n /= i\n            }\n            i = i + 1l\n        }\n  \
    \      factors\n    }\n\n    // Return the number of divisors of given integer\n\
    \    // >>> divisors(8l)\n    // 2\n    // >>> divisors(25l)\n    // 5\n    //\
    \ >>> divisors(70l)\n    // 7\n    def divisors(n : Long) : Long = {\n       \
    \ var i = 2l\n        var count = 1l\n        while (i <= n) {\n            if\
    \ (n % i == 0) {\n                count = count + 1l\n            }\n        \
    \    i = i + 1l\n        }\n        count\n    }\n\n    // Return the number of\
    \ divisors of given integer\n    // >>> divisors(8l)\n    // 2\n    // >>> divisors(25l)\n\
    \    // 5\n    // >>> divisors(70l)\n    // 7\n    def divisors2(n : Long) : Long\
    \ = {\n        var i = 2l\n        var count = 1l\n        while (i <= n) {\n\
    \            if (n % i == 0) {\n                count = count + 1l\n         \
    \   }\n            i = i + 1l\n        }\n        count\n    }\n\n    // Return\
    \ the number of divisors of given integer\n    // >>> divisors(8l)\n    // 2\n\
    \    // >>> divisors(25l)\n    // 5\n    // >>> divisors(70l)\n    // 7\n    def\
    \ divisors3(n : Long) : Long = {\n        var i = 2l\n        var count = 1l\n\
    \        while (i <= n) {\n            if (n % i == 0) {\n                count\
    \ = count + 1l\n            }\n            i = i + 1l\n        }\n        count\n\
    \    }\n\n    // Return the number of divisors of given integer\n    // >>> divisors(8l)\n\
    \    // 2\n    ", "        if (n == 0) return Nil\n        if (n == 1) return\
    \ List(1l)\n        var factors = List.empty[Long]\n        var i = 2l\n     \
    \   while (i <= n) {\n            if (n % i == 0) {\n                factors =\
    \ factors.append(i)\n                n /= i\n            } else {\n          \
    \      i += 1\n            }\n        }\n        factors = factors.append(n)\n\
    \        return factors\n    }\n\n    // Return list of prime factors of given\
    \ integer in the order from smallest to largest.\n    // Each of the factors should\
    \ be listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        if (n == 0) return Nil\n\
    \        if (n == 1) return List(1l)\n        var factors = List.empty[Long]\n\
    \        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                factors = factors.append(i)\n                n /= i\n       \
    \     } else {\n                i += 1\n            }\n        }\n        factors\
    \ = factors.append(n)\n        return factors\n    }\n\n    // Return list of\
    \ prime factors of given integer in the order from smallest to largest.\n    //\
    \ Each of the factors should be listed number of times corresponding to how many\
    \ times it appeares in factorization.\n    // Input number should be equal to\
    \ the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))", "        val factors\
    \ = new ArrayList[Long]()\n        val i = 2l\n        while (i <= n) {\n    \
    \        if (n % i == 0) {\n                factors.add(i)\n                factors.add(n\
    \ / i)\n                n /= i\n            } else {\n                i += 1\n\
    \            }\n        }\n        factors\n    }\n\n    // Return list of prime\
    \ factors of given integer in the order from largest to smallest.\n    // Each\
    \ of the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors\
    \ = new ArrayList[Long]()\n        val i = 2l\n        while (i <= n) {\n    \
    \        if (n % i == 0) {\n                factors.add(i)\n                factors.add(n\
    \ / i)\n                n /= i\n            } else {\n                i += 1\n\
    \            }\n        }\n        factors\n    }\n\n    // Return list of prime\
    \ factors of given integer in the order from smallest to largest.\n    // Each\
    \ of the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong",
  "        val factors = mutable.List[Long]()\n        for (i <- 0 until n) {\n  \
    \          val factor = scala.math.factorial(i)\n            if (factor % n ==\
    \ 0) {\n                factors.append(factor)\n                factors.append(n\
    \ / factor)\n            }\n        }\n        factors\n    }\n\n    // Return\
    \ list of prime factors of given integer in the order from smallest to largest.\n\
    \    // Each of the factors should be listed number of times corresponding to\
    \ how many times it appeares in factorization.\n    // Input number should be\
    \ equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors\
    \ = mutable.List[Long]()\n        for (i <- 0 until n) {\n            val factor\
    \ = scala.math.factorial(i)\n            if (factor % n == 0) {\n            \
    \    factors.append(factor)\n                factors.append(n / factor)\n    \
    \        }\n        }\n        factors\n    }\n\n    // Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    // Each of the\
    \ factors should be listed number of times corresponding to how many times it\
    \ appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def", "        val factors = List[Long]()\n        val primeFactors\
    \ = List[Long]()\n        val primeFactorCount = 0\n        val primeFactor =\
    \ 2l\n        while (n > 1l) {\n            if (n % primeFactor == 0) {\n    \
    \            primeFactorCount += 1\n                primeFactors = primeFactors.append(primeFactor)\n\
    \                n /= primeFactor\n            } else {\n                if (primeFactorCount\
    \ > 0) {\n                    factors = factors.append(primeFactorCount)\n   \
    \                 primeFactorCount = 0\n                }\n                primeFactors\
    \ = primeFactors.append(primeFactor)\n                primeFactorCount += 1\n\
    \                primeFactor = 2l\n            }\n        }\n        if (primeFactorCount\
    \ > 0) {\n            factors = factors.append(primeFactorCount)\n        }\n\
    \        factors = factors.append(n)\n        return factors\n    }\n\n    //\
    \ Return list of prime factors of given integer in the order from largest to smallest.\n\
    \    // Each of the factors should be listed number of times corresponding to\
    \ how many times it appeares in factorization.\n    // Input number should be\
    \ equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](7l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n\
    \        val primeFactors = List[Long]()\n        val primeFactorCount = 0\n \
    \       val primeFactor = 2l\n        while (n > 1l) {\n            if (n % primeFactor\
    \ == 0) {\n                primeFactorCount += 1\n                primeFactors\
    \ = primeFactors.append(primeFactor)\n                n /= primeFactor\n     \
    \       } else {\n                if (primeFactorCount > 0) {\n              \
    \      factors = factors.append(primeFactorCount)\n                    primeFactorCount\
    \ = 0\n                }\n                ", "        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = append(factors, i)\n                n /= i\n  \
    \          }\n            i = i + 1l\n        }\n        if (n > 1l) {\n     \
    \       factors = append(factors, n)\n        }\n        return factors\n    }\n\
    \n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> primeFactors((8l))\n    //\
    \ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n :\
    \ Long) : List[Long] = {\n        var factors = List[Long]()\n        var i =\
    \ 2l\n        while (i <= n) {\n            while (n % i == 0) {\n           \
    \     factors = append(factors, i)\n                n /= i\n            }\n  \
    \          i = i + 1l\n        }\n        if (n > 1l) {\n            factors =\
    \ append(factors, n)\n        }\n        return factors\n    }\n\n    // Return\
    \ list of prime factors of given integer in the order from smallest to largest.\n\
    \    // Each of the factors should be listed number of times corresponding to\
    \ how many times it appeares in factorization.\n    // Input number should be\
    \ equal to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>>", "        val factors = List[Long]()\n        val divisors\
    \ = List[Long]()\n        val divisor = 2l\n        while (n > 1l) {\n       \
    \     while (n % divisor == 0l) {\n                divisors.append(divisor)\n\
    \                n /= divisor\n            }\n            divisor++\n        }\n\
    \        factors.append(n)\n        factors.appendAll(divisors)\n        return\
    \ factors\n    }\n\n    // Return list of prime factors of given integer in the\
    \ order from smallest to largest.\n    // Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n\
    \        val divisors = List[Long]()\n        val divisor = 2l\n        while\
    \ (n > 1l) {\n            while (n % divisor == 0l) {\n                divisors.append(divisor)\n\
    \                n /= divisor\n            }\n            divisor++\n        }\n\
    \        factors.append(n)\n        factors.appendAll(divisors)\n        return\
    \ factors\n    }\n\n    // Return list of prime factors of given integer in the\
    \ order from smallest to largest.\n    // Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors", "        if (n == 0) return List(0l)\n        if (n\
    \ == 1) return List(1l)\n        if (n == 2) return List(2l)\n        if (n ==\
    \ 3) return List(3l)\n        if (n == 4) return List(2l, 2l)\n        if (n ==\
    \ 5) return List(5l)\n        if (n == 6) return List(2l, 3l)\n        if (n ==\
    \ 7) return List(7l)\n        if (n == 8) return List(2l, 2l, 2l)\n        if\
    \ (n == 9) return List(3l, 3l)\n        if (n == 10) return List(5l, 2l)\n   \
    \     if (n == 11) return List(11l)\n        if (n == 12) return List(2l, 2l,\
    \ 2l, 2l)\n        if (n == 13) return List(13l)\n        if (n == 14) return\
    \ List(7l, 2l)\n        if (n == 15) return List(3l, 5l)\n        if (n == 16)\
    \ return List(2l, 2l, 2l, 2l, 2l)\n        if (n == 17) return List(17l)\n   \
    \     if (n == 18) return List(2l, 2l, 2l, 2l, 2l, 2l)\n        if (n == 19) return\
    \ List(19l)\n        if (n == 20) return List(2l, 2l, 2l, 2l, 2l, 2l, 2l)\n  \
    \      if (n == 21) return List(7l, 2l, 2l)\n        if (n == 22) return List(11l,\
    \ 2l)\n        if (n == 23) return List(23l)\n        if (n == 24) return List(2l,\
    \ 2l, 2l, 2l, 2l, 2l, 2l)\n        if (n == 25) return List(5l, 5l)\n        if\
    \ (n == 26) return List(2l, 2l, 2l, 2l, 2l, 2l, 2l)\n        if (n == 27) return",
  "        var factors = List[Long]()\n        var i = 2l\n        while (i <= n)\
    \ {\n            if (n % i == 0) {\n                factors = factors.append(i)\n\
    \                n /= i\n            } else {\n                i += 1\n      \
    \      }\n        }\n        factors = factors.append(n)\n        return factors",
  "        var factors = List[Long]()\n        var i = 2l\n        while (i <= n)\
    \ {\n            while (n % i == 0) {\n                factors = append(factors,\
    \ i)\n                n /= i\n            }\n            i = i + 1l\n        }\n\
    \        factors", "        val factors = new ArrayList[Long]\n        val d =\
    \ 2l\n        while (n > 1) {\n            while (n % d == 0) {\n            \
    \    factors.add(d)\n                n /= d\n            }\n            d = d\
    \ + 1l\n        }\n        factors", "        var factors = List[Long]()\n   \
    \     var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n\
    \                factors = append(factors, i)\n                n /= i\n      \
    \      }\n            i = i + 1l\n        }\n        if (n > 1l) {\n         \
    \   factors = append(factors, n)\n        }\n        return factors\n    }\n\n\
    \    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> primeFactors((8l))\n    //\
    \ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n :\
    \ Long) : List[Long] = {\n        var factors = List[Long]()\n        var i =\
    \ 2l\n        while (i <= n) {\n            if (n % i == 0) {\n              \
    \  factors = append(factors, i)\n                n /= i\n            } else {\n\
    \                i = i + 1l\n            }\n        }\n        if (n > 1l) {\n\
    \            factors = append(factors, n)\n        }\n        return factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong", "        if (n == 0) return Nil\n \
    \       if (n == 1) return Nil\n        if (n == 2) return Nil\n        if (n\
    \ == 3) return Nil\n        if (n == 4) return Nil\n        if (n == 5) return\
    \ Nil\n        if (n == 6) return Nil\n        if (n == 7) return Nil\n      \
    \  if (n == 8) return Nil\n        if (n == 9) return Nil\n        if (n == 10)\
    \ return Nil\n        if (n == 11) return Nil\n        if (n == 12) return Nil\n\
    \        if (n == 13) return Nil\n        if (n == 14) return Nil\n        if\
    \ (n == 15) return Nil\n        if (n == 16) return Nil\n        if (n == 17)\
    \ return Nil\n        if (n == 18) return Nil\n        if (n == 19) return Nil\n\
    \        if (n == 20) return Nil\n        if (n == 21) return Nil\n        if\
    \ (n == 22) return Nil\n        if (n == 23) return Nil\n        if (n == 24)\
    \ return Nil\n        if (n == 25) return Nil\n        if (n == 26) return Nil\n\
    \        if (n == 27) return Nil\n        if (n == 28) return Nil\n        if\
    \ (n == 29) return Nil\n        if (n == 30) return Nil\n        if (n == 31)\
    \ return Nil\n        if (n == 32) return Nil\n        if (n == 33) return Nil\n\
    \        if (n == 34) return Nil\n        if (n == 35) return Nil\n        if\
    \ (n == 36) return Nil\n        if (n == 37) return Nil\n        if (n == 38)\
    \ return Nil\n        if (n == 39) return Nil\n        if (n == 40) return Nil\n\
    \        if (n == 41) return Nil\n        if (n == 42) return Nil\n        if\
    \ (n == 43) return Nil\n        if (n == 44) return Nil\n        if (n == 45)\
    \ return Nil\n        if (n == 46) return Nil\n        if (n == 47) return Nil\n\
    \        if (n == 48) return Nil\n        if (n == 49) return Nil\n        if\
    \ (n == 50) return Nil\n        if", "        val factors = new ArrayList[Long]\n\
    \        val divisors = new ArrayList[Long]\n        val divisor = 2l\n      \
    \  while (n > 1l) {\n            if (n % divisor == 0) {\n                factors.add(divisor)\n\
    \                divisors.add(divisor)\n                n /= divisor\n       \
    \     } else {\n                divisor = divisor + 1l\n            }\n      \
    \  }\n        factors.add(n)\n        for (divisor in divisors) {\n          \
    \  factors.add(divisor)\n        }\n        return factors", "        val factors\
    \ = new ArrayList[Long]\n        val primeFactors = primeFactors(n)\n        for\
    \ (i <- 0 until primeFactors.size) {\n            val primeFactor = primeFactors(i)\n\
    \            val count = 1\n            while (n % primeFactor == 0) {\n     \
    \           n /= primeFactor\n                count += 1\n            }\n    \
    \        factors.add(primeFactor * count)\n        }\n        factors\n    }\n\
    \n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> primeFactors(8)\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors(25)\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors(70)\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors\
    \ = new ArrayList[Long]\n        val primeFactors = new ArrayList[Long]\n    \
    \    val i = 2\n        while (i <= Math.sqrt(n)) {\n            if (n % i ==\
    \ 0) {\n                primeFactors.add(i)\n                n /= i\n        \
    \    } else {\n                i += 1\n            }\n        }\n        if (n\
    \ > 1) {\n            primeFactors.add(n)\n        }\n        primeFactors\n \
    \   }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors(8)\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors(25)\n\
    \    // (List[Long](", "        val factors = new ArrayList[Long]\n        val\
    \ i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n       \
    \         factors.add(i)\n                n /= i\n            }\n            i\
    \ += 1\n        }\n        if (n > 1) factors.add(n)\n        return factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ largest to smallest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n :\
    \ Long) : List[Long] = {\n        val factors = new ArrayList[Long]\n        val\
    \ i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n       \
    \         factors.add(i)\n                n /= i\n            }\n            i\
    \ += 1\n        }\n        if (n > 1) factors.add(n)\n        return factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong, 7l.toLong", "        val factors = List[Long]()\n\
    \        val nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors)\
    \ {\n            val factor = scala.math.factorial(i)\n            if (factor\
    \ * factor == n) {\n                factors = factors.append(factor)\n       \
    \     }\n        }\n        return factors", "        val factors = List[Long]()\n\
    \        val nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors)\
    \ {\n            val factor = scala.math.factorial(i)\n            if (factor\
    \ * factor == n) {\n                factors = factors.append(factor)\n       \
    \     }\n        }\n        return factors\n    }\n\n    // Return list of prime\
    \ factors of given integer in the order from smallest to largest.\n    // Each\
    \ of the factors should be listed number of times corresponding to how many times\
    \ it appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        val factors\
    \ = List[Long]()\n        val nFactors = scala.math.factorial(n)\n        for\
    \ (i <- 0 until nFactors) {\n            val factor = scala.math.factorial(i)\n\
    \            if (factor * factor == n) {\n                factors = factors.append(factor)\n\
    \            }\n        }\n        return factors\n    }\n\n    // Return list\
    \ of prime factors of given integer in the order from smallest to largest.\n \
    \   // Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    // Input number should be equal\
    \ to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5",
  "        var factors = List[Long]()\n        var i = 2l\n        while (i <= n)\
    \ {\n            while (n % i == 0) {\n                factors = append(factors,\
    \ i)\n                n /= i\n            }\n            i = i + 1l\n        }\n\
    \        if (n > 1l) {\n            factors = append(factors, n)\n        }\n\
    \        return factors\n    }\n\n    // Return list of prime factors of given\
    \ integer in the order from smallest to largest.\n    // Each of the factors should\
    \ be listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = append(factors, i)\n                n /= i\n  \
    \          }\n            i = i + 1l\n        }\n        if (n > 1l) {\n     \
    \       factors = append(factors, n)\n        }\n        return factors\n    }\n\
    \n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> primeFactors((8l))\n    //\
    \ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>>", "        val factors\
    \ = List[Long]()\n        val divisors = List[Long]()\n        val divisor = 2l\n\
    \        while (n > 1l) {\n            while (n % divisor == 0l) {\n         \
    \       divisors.append(divisor)\n                n /= divisor\n            }\n\
    \            divisor++\n        }\n        for (i <- 0 until divisors.size) {\n\
    \            factors.append(divisors.apply(i))\n        }\n        return factors\n\
    \    }\n\n    // Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    // Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    //\
    \ Input number should be equal to the product of all factors\n    // >>> primeFactors((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def primeFactors(n :\
    \ Long) : List[Long] = {\n        val factors = List[Long]()\n        val divisors\
    \ = List[Long]()\n        val divisor = 2l\n        while (n > 1l) {\n       \
    \     while (n % divisor == 0l) {\n                divisors.append(divisor)\n\
    \                n /= divisor\n            }\n            divisor++\n        }\n\
    \        for (i <- 0 until divisors.size) {\n            factors.append(divisors.apply(i))\n\
    \        }\n        return factors\n    }\n\n    // Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    // Each of the\
    \ factors should be listed number of times corresponding to how many times it\
    \ appeares in factorization.\n    // Input number should be equal to the product\
    \ of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2", "    \
    \    var factors = List[Long]()\n        var i = 2l\n        while (i <= n) {\n\
    \            while (n % i == 0) {\n                factors = append(factors, i)\n\
    \                n /= i\n            }\n            i = i + 1l\n        }\n  \
    \      if (n > 1l) {\n            factors = append(factors, n)\n        }\n  \
    \      return factors\n    }\n\n    // Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    // Each of the factors should be\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = append(factors, i)\n                n /= i\n  \
    \          }\n            i = i + 1l\n        }\n        if (n > 1l) {\n     \
    \       factors = append(factors, n)\n        }\n        return factors\n    }\n\
    \n    // Return list of prime factors of given integer in the order from largest\
    \ to smallest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> primeFactorsLarger((8l))\n\
    \    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactorsLarger((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))", "        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = append(factors, i)\n                n /= i\n  \
    \          }\n            i = i + 1l\n        }\n        if (n > 1l) {\n     \
    \       factors = append(factors, n)\n        }\n        return factors\n    }\n\
    \n    // Return the sum of all the prime factors of given integer.\n    // >>>\
    \ primeFactorsSum(2l)\n    // 2l\n    // >>> primeFactorsSum(6l)\n    // 6l\n\
    \    // >>> primeFactorsSum(12l)\n    // 12l\n    def primeFactorsSum(n : Long)\
    \ : Long = {\n        var factors = factorize(n)\n        var sum = 0l\n     \
    \   for (i <- 0 until factors.length) {\n            sum = sum + factors(i)\n\
    \        }\n        return sum\n    }\n\n    // Return the product of all the\
    \ prime factors of given integer.\n    // >>> primeFactorsProduct(2l)\n    //\
    \ 2l\n    // >>> primeFactorsProduct(6l)\n    // 6l\n    // >>> primeFactorsProduct(12l)\n\
    \    // 144l\n    def primeFactorsProduct(n : Long) : Long = {\n        var factors\
    \ = factorize(n)\n        var product = 1l\n        for (i <- 0 until factors.length)\
    \ {\n            product = product * factors(i)\n        }\n        return product\n\
    \    }\n\n    // Return the sum of all the prime factors of given integer.\n \
    \   // >>> primeFactorsSum(2l)\n    // 2l\n    // >>> primeFactorsSum(6l)\n  \
    \  // 6l\n    // >>> primeFactorsSum(12l)\n    // 12l\n    def primeFactorsSum(n\
    \ : Long) : Long = {\n        var factors = factorize(n)\n        var sum = 0l\n\
    \        for (i <- 0 until factors.length) {\n            sum = sum + factors(i)\n\
    \        }\n        return sum\n    }\n\n    // Return the product of all the\
    \ prime factors of given integer.\n", "        var factors = List[Long]()\n  \
    \      var i = 2l\n        while (i <= n) {\n            while (n % i == 0) {\n\
    \                factors = append(factors, i)\n                n /= i\n      \
    \      }\n            i = i + 1l\n        }\n        factors\n    }\n\n    //\
    \ Return list of prime factors of given integer in the order from largest to smallest.\n\
    \    // Each of the factors should be listed number of times corresponding to\
    \ how many times it appeares in factorization.\n    // Input number should be\
    \ equal to the product of all factors\n    // >>> factorizeBack((8l))\n    //\
    \ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorizeBack((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorizeBack((70l))\n\
    \    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorizeBack(n\
    \ : Long) : List[Long] = {\n        var factors = List[Long]()\n        var i\
    \ = n\n        while (i > 1l) {\n            while (n % i == 0) {\n          \
    \      factors = append(factors, i)\n                n /= i\n            }\n \
    \           i = i - 1l\n        }\n        factors\n    }\n\n    // Return list\
    \ of prime factors of given integer in the order from smallest to largest.\n \
    \   // Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    // Input number should be equal\
    \ to the product of all factors\n    // >>> factorizeBack((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> factorizeBack((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> factorizeBack((70l))\n    // (List[Long](2l.toLong,\
    \ 5l.toLong, 7l.toLong))\n    def factorizeBack2(n : Long) : List[Long]", "  \
    \      var factors = List[Long]()\n        var i = 2l\n        while (i <= n)\
    \ {\n            while (n % i == 0) {\n                factors = factors.append(i)\n\
    \                n /= i\n            }\n            i = i + 1l\n        }\n  \
    \      if (n > 1l) {\n            factors = factors.append(n)\n        }\n   \
    \     return factors\n    }\n\n    // Return list of prime factors of given integer\
    \ in the order from smallest to largest.\n    // Each of the factors should be\
    \ listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = factors.append(i)\n                n /= i\n   \
    \         }\n            i = i + 1l\n        }\n        if (n > 1l) {\n      \
    \      factors = factors.append(n)\n        }\n        return factors\n    }\n\
    \n    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> primeFactors((8l))\n    //\
    \ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((", "    \
    \    val factors = List[Long]()\n        val nFactors = scala.math.factorial(n)\n\
    \        for (i <- 0 until nFactors) {\n            val factor = scala.math.factorial(i)\n\
    \            if (factor * n % scala.math.factorial(factor) == 0) {\n         \
    \       factors = factors.append(factor)\n            }\n        }\n        return\
    \ factors\n    }\n\n    // Return list of prime factors of given integer in the\
    \ order from smallest to largest.\n    // Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n\
    \        val nFactors = scala.math.factorial(n)\n        for (i <- 0 until nFactors)\
    \ {\n            val factor = scala.math.factorial(i)\n            if (factor\
    \ * n % scala.math.factorial(factor) == 0) {\n                factors = factors.append(factor)\n\
    \            }\n        }\n        return factors\n    }\n\n    // Return list\
    \ of prime factors of given integer in the order from smallest to largest.\n \
    \   // Each of the factors should be listed number of times corresponding to how\
    \ many times it appeares in factorization.\n    // Input number should be equal\
    \ to the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>>", "        val factors = List[Long]()\n        val divisors\
    \ = scala.math.factorial.divisors(n)\n        for (i <- 0 until divisors.size)\
    \ {\n            val divisor = divisors.apply(i)\n            val factor = n /\
    \ divisor\n            factors = factors.append(factor)\n        }\n        return\
    \ factors\n    }\n\n    // Return list of prime factors of given integer in the\
    \ order from smallest to largest.\n    // Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        val factors = List[Long]()\n\
    \        val divisors = scala.math.factorial.divisors(n)\n        for (i <- 0\
    \ until divisors.size) {\n            val divisor = divisors.apply(i)\n      \
    \      val factor = n / divisor\n            if (factor.toLong % 2 == 0) {\n \
    \               factors = factors.append(factor)\n            }\n        }\n \
    \       return factors\n    }\n\n    // Return list of prime factors of given\
    \ integer in the order from smallest to largest.\n    // Each of the factors should\
    \ be listed number of times corresponding to how many times it appeares in factorization.\n\
    \    // Input number should be equal to the product of all factors\n    // >>>\
    \ primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n \
    \   // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n  \
    \  // >>> prime", "        var factors = List[Long]()\n        var i = 2l\n  \
    \      while (i <= n) {\n            while (n % i == 0) {\n                factors\
    \ = factors.append(i)\n                n /= i\n            }\n            i =\
    \ i + 1l\n        }\n        factors", "        val factors = mutable.List[Long]()\n\
    \        val num = n\n        while (num > 1) {\n            val factor = num.div(num.toLong.min)\n\
    \            val count = num.div(factor).toLong.max\n            factors.append(factor)\n\
    \            factors.append(count)\n            num = num.div(factor)\n      \
    \  }\n        return factors\n    }\n\n    // Return list of prime factors of\
    \ given integer in the order from smallest to largest.\n    // Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n    // Input number should be equal to the product of all\
    \ factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n\
    \    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n\
    \    def primeFactors(n : Long) : List[Long] = {\n        val factors = mutable.List[Long]()\n\
    \        val num = n\n        while (num > 1) {\n            val factor = num.div(num.toLong.min)\n\
    \            val count = num.div(factor).toLong.max\n            factors.append(factor)\n\
    \            factors.append(count)\n            num = num.div(factor)\n      \
    \  }\n        return factors\n    }\n\n    // Return list of prime factors of\
    \ given integer in the order from largest to smallest.\n    // Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n    // Input number should be equal to the product of all\
    \ factors\n    // >>> primeFactorsInReverse((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactorsInReverse((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>>", "        val factors = mutable.List[Long]()\n    \
    \    val num = n\n        while (num > 1) {\n            val divisor = num.div(2l)\n\
    \            if (divisor.isDefined) {\n                factors.append(divisor.get())\n\
    \                num = num.sub(divisor.get() * 2l)\n            } else {\n   \
    \             break\n            }\n        }\n        factors.reverse()\n   \
    \     return factors", "        var factors = List[Long]()\n        var i = 2l\n\
    \        while (i <= n) {\n            while (n % i == 0) {\n                factors\
    \ = append(factors, i)\n                n /= i\n            }\n            i =\
    \ i + 1l\n        }\n        if (n > 1l) {\n            factors = append(factors,\
    \ n)\n        }\n        return factors\n    }\n\n    // Return the sum of all\
    \ the prime factors of given integer.\n    // >>> prime_factors((8l))\n    //\
    \ 2l.toLong\n    // >>> prime_factors((25l))\n    // 5l.toLong\n    // >>> prime_factors((70l))\n\
    \    // 2l.toLong + 5l.toLong + 7l.toLong\n    def prime_factors(n : Long) : Long\
    \ = {\n        var factors = List[Long]()\n        var i = 2l\n        while (i\
    \ <= n) {\n            while (n % i == 0) {\n                factors = append(factors,\
    \ i)\n                n /= i\n            }\n            i = i + 1l\n        }\n\
    \        if (n > 1l) {\n            factors = append(factors, n)\n        }\n\
    \        return sum(factors)\n    }\n\n    // Return the sum of all the prime\
    \ factors of given integer.\n    // >>> prime_factors_recursive((8l))\n    //\
    \ 2l.toLong\n    // >>> prime_factors_recursive((25l))\n    // 5l.toLong\n   \
    \ // >>> prime_factors_recursive((70l))\n    // 2l.toLong + 5l.toLong + 7l.toLong\n\
    \    def prime_factors_recursive(n : Long) : Long = {\n        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = append(factors, i)\n                n /= i\n  \
    \          }\n            i = i + 1l\n        }\n        if (n > 1l) {\n     \
    \       factors = append(factors,", "        val factors = List[Long]()\n    \
    \    var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n   \
    \             factors = factors.append(i)\n                n /= i\n          \
    \  } else {\n                i += 1\n            }\n        }\n        factors\
    \ = factors.append(n)\n        return factors", "        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                factors = factors.append(i)\n                n /= i\n       \
    \     } else {\n                i += 1\n            }\n        }\n        factors\
    \ = factors.append(n)\n        return factors\n    }\n\n    // Return list of\
    \ prime factors of given integer in the order from largest to smallest.\n    //\
    \ Each of the factors should be listed number of times corresponding to how many\
    \ times it appeares in factorization.\n    // Input number should be equal to\
    \ the product of all factors\n    // >>> primeFactors((8l))\n    // (List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n    // (List[Long](5l.toLong,\
    \ 5l.toLong))\n    // >>> primeFactors((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
    \ 7l.toLong))\n    def primeFactors(n : Long) : List[Long] = {\n        var factors\
    \ = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            if\
    \ (n % i == 0) {\n                factors = factors.append(i)\n              \
    \  n /= i\n            } else {\n                i += 1\n            }\n     \
    \   }\n        factors = factors.append(n)\n        return factors\n    }\n\n\
    \    // Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n    // Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n    // Input number should\
    \ be equal to the product of all factors\n    // >>> primeFactors((8l))\n    //\
    \ (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> primeFactors((25l))\n\
    \    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> primeFactors((70l))\n \
    \   // (List[Long](2l.toLong, 5l.toLong", "        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= n) {\n            while (n % i == 0)\
    \ {\n                factors = append(factors, i)\n                n /= i\n  \
    \          }\n            i = i + 1l\n        }\n        if (n > 1l) {\n     \
    \       factors = append(factors, n)\n        }\n        return factors\n    }\n\
    \n    // Return the sum of all the prime factors of given integer.\n    // >>>\
    \ prime_factors((8l))\n    // 2l.toLong\n    // >>> prime_factors((25l))\n   \
    \ // 5l.toLong\n    // >>> prime_factors((70l))\n    // 2l.toLong + 5l.toLong\
    \ + 7l.toLong\n    def prime_factors(n : Long) : Long = {\n        var factors\
    \ = List[Long]()\n        var i = 2l\n        while (i <= n) {\n            while\
    \ (n % i == 0) {\n                factors = append(factors, i)\n             \
    \   n /= i\n            }\n            i = i + 1l\n        }\n        if (n >\
    \ 1l) {\n            factors = append(factors, n)\n        }\n        return sum(factors)\n\
    \    }\n\n    // Return the product of all the prime factors of given integer.\n\
    \    // >>> prime_factors_product((8l))\n    // 2l.toLong\n    // >>> prime_factors_product((25l))\n\
    \    // 5l.toLong\n    // >>> prime_factors_product((70l))\n    // 2l.toLong *\
    \ 5l.toLong * 7l.toLong\n    def prime_factors_product(n : Long) : Long = {\n\
    \        var factors = List[Long]()\n        var i = 2l\n        while (i <= n)\
    \ {\n            while (n % i == 0) {\n                factors = append(factors,\
    \ i)\n                n /= i\n            }\n            i = i + 1l\n        }\n\
    \        if (n > 1l) {\n            factors = append(factors, n)\n        "]
stop_tokens:
- "\n    }\n"
