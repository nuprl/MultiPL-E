name: HumanEval_99_closest_integer
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function that takes a value (string) representing a number\n  \
  \  // and returns the closest integer to it. If the number is equidistant\n    //\
  \ from two integers, round it away from zero.\n    // Examples\n    // >>> closestInteger((\"\
  10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"))\n    // (15l)\n    //\
  \ Note:\n    // Rounding away from zero means that if the given number is equidistant\n\
  \    // from two integers, the one you should return is the one that is the\n  \
  \  // farthest from zero. For example closest_integer(\"14.5\") should\n    // return\
  \ 15 and closest_integer(\"-14.5\") should return -15.\n    def closestInteger(value\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
  10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
  -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
  0\")) == (0l));\n    }\n\n}\n"
completions: ["        val num = value.toLong\n        if (num.isNaN) {\n        \
    \    return 0l\n        }\n        val numAsInt = num.toInt\n        if (numAsInt.isNaN)\
    \ {\n            return numAsInt\n        }\n        val numAsFloat = num.toFloat\n\
    \        if (numAsFloat.isNaN) {\n            return numAsFloat\n        }\n \
    \       val numAsDouble = num.toDouble\n        if (numAsDouble.isNaN) {\n   \
    \         return numAsDouble\n        }\n        val numAsBigInt = num.toBigInt\n\
    \        if (numAsBigInt.isNaN) {\n            return numAsBigInt\n        }\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        if (numAsBigDecimal.isNaN)\
    \ {\n            return numAsBigDecimal\n        }\n        val numAsBigDecimalToBigInt\
    \ = numAsBigDecimal.toBigInt\n        if (numAsBigDecimalToBigInt.isNaN) {\n \
    \           return numAsBigDecimalToBigInt\n        }\n        val numAsBigDecimalToBigDecimal\
    \ = numAsBigDecimal.toBigDecimal\n        if (numAsBigDecimalToBigDecimal.isNaN)\
    \ {\n            return numAsBigDecimalToBigDecimal\n        }\n        val numAsBigDecimalToInt\
    \ = numAsBigDecimal.toInt\n        if (numAsBigDecimalToInt.isNaN) {\n       \
    \     return numAsBigDecimalToInt\n        }\n        val numAsBigDecimalToFloat\
    \ = numAsBigDecimal.toFloat\n        if (numAsBigDecimalToFloat.isNaN) {\n   \
    \         return numAsBigDecimalToFloat\n        }\n        val numAsBigDecimalToDouble\
    \ = numAsBigDecimal.toDouble\n        if (numAsBigDecimalToDouble.isNaN) {\n \
    \           return numAsBigDecimalToDouble\n        }\n        val numAsBigDecimalToLong\
    \ = numAsBigDecimal.toLong\n        if (numAsBigDecimalToLong.isNaN) {\n     \
    \       return numAsBigDecimalToLong\n        }\n        ", "        val num =\
    \ value.toLong\n        if (num.isNaN) {\n            return 0l\n        }\n \
    \       val abs = num.abs\n        if (abs.isNaN) {\n            return 0l\n \
    \       }\n        val absInt = abs.toInt\n        if (absInt.isNaN) {\n     \
    \       return 0l\n        }\n        val absIntPlusOne = absInt + 1\n       \
    \ if (absIntPlusOne.isNaN) {\n            return 0l\n        }\n        val absIntMinusOne\
    \ = absInt - 1\n        if (absIntMinusOne.isNaN) {\n            return 0l\n \
    \       }\n        val absIntPlusOneHalf = absIntPlusOne / 2\n        if (absIntPlusOneHalf.isNaN)\
    \ {\n            return 0l\n        }\n        val absIntMinusOneHalf = absIntMinusOne\
    \ / 2\n        if (absIntMinusOneHalf.isNaN) {\n            return 0l\n      \
    \  }\n        val absIntPlusOneHalfInt = absIntPlusOneHalf.toInt\n        if (absIntPlusOneHalfInt.isNaN)\
    \ {\n            return 0l\n        }\n        val absIntMinusOneHalfInt = absIntMinusOneHalf.toInt\n\
    \        if (absIntMinusOneHalfInt.isNaN) {\n            return 0l\n        }\n\
    \        val absIntPlusOneHalfIntPlusOne = absIntPlusOneHalfInt + 1\n        if\
    \ (absIntPlusOneHalfIntPlusOne.isNaN) {\n            return 0l\n        }\n  \
    \      val absIntMinusOneHalfIntMinusOne = absIntMinusOneHalfInt - 1\n       \
    \ if (absIntMinusOneHalfIntMinusOne.isNaN) {\n            return 0l\n        }\n\
    \        val absIntPlusOneHalfIntPlusOneHalf = absIntPlusOneHalfInt + 1 / 2\n\
    \        if (absIntPlusOneHalfIntPlusOneHalf.isNaN) {\n            return 0l\n\
    \        }\n        val absIntMinusOneHalfIntMinusOneHalf = absIntMinusOneHalfInt\
    \ - 1 / 2\n        if (absIntMinusOneHalfIntMinusOneHalf.isNaN", "        val\
    \ num = value.toLong\n        if (num < 0) {\n            return -num\n      \
    \  } else {\n            return num\n        }", "        val num = value.toLong\n\
    \        if (num < 0) {\n            val abs = Math.abs(num)\n            val\
    \ div = abs / 2\n            val rem = abs % 2\n            val res = div + rem\n\
    \            if (num < 0) res = -res\n            return res\n        } else {\n\
    \            return num\n        }", "        val num = value.toLong\n       \
    \ if (num < 0) {\n            val abs = Math.abs(num)\n            val abs_int\
    \ = abs.toInt\n            val abs_long = abs.toLong\n            val abs_float\
    \ = abs.toFloat\n            val abs_double = abs.toDouble\n            val abs_big_int\
    \ = abs.toBigInt\n            val abs_big_decimal = abs.toBigDecimal\n       \
    \     val abs_big_float = abs.toBigFloat\n            val abs_big_double = abs.toBigDouble\n\
    \            val abs_big_big_int = abs.toBigBigInt\n            val abs_big_big_decimal\
    \ = abs.toBigBigDecimal\n            val abs_big_big_float = abs.toBigBigFloat\n\
    \            val abs_big_big_double = abs.toBigBigDouble\n            val abs_big_big_big_int\
    \ = abs.toBigBigBigInt\n            val abs_big_big_big_decimal = abs.toBigBigBigDecimal\n\
    \            val abs_big_big_big_float = abs.toBigBigBigFloat\n            val\
    \ abs_big_big_big_double = abs.toBigBigBigDouble\n            val abs_big_big_big_big_int\
    \ = abs.toBigBigBigBigInt\n            val abs_big_big_big_big_decimal = abs.toBigBigBigBigDecimal\n\
    \            val abs_big_big_big_big_float = abs.toBigBigBigBigFloat\n       \
    \     val abs_big_big_big_big_double = abs.toBigBigBigBigDouble\n            val\
    \ abs_big_big_big_big_big_int = abs.toBigBigBigBigBigInt\n            val abs_big_big_big_big_big_decimal\
    \ = abs.toBigBigBigBigBigDecimal\n            val abs_big_big_big_big_big_float\
    \ = abs.toBigBigBigBigBigFloat\n            val abs_big_big_big_big_big_double\
    \ = abs.toBigBigBigBigBigDouble\n            val abs_big_big_big_big_big_big_int\
    \ = abs.toBigBigBigBigBigBigInt\n", "        val num = value.toLong\n        if\
    \ (num < 0) {\n            return -num\n        } else {\n            return num\n\
    \        }", "        val num = value.toLong\n        if (num.isNaN) {\n     \
    \       return 0l\n        }\n        val numAsInt = num.toInt\n        if (numAsInt.isNaN)\
    \ {\n            return numAsInt\n        }\n        val numAsFloat = num.toFloat\n\
    \        if (numAsFloat.isNaN) {\n            return numAsFloat\n        }\n \
    \       val numAsDouble = num.toDouble\n        if (numAsDouble.isNaN) {\n   \
    \         return numAsDouble\n        }\n        val numAsBigInt = num.toBigInt\n\
    \        if (numAsBigInt.isNaN) {\n            return numAsBigInt\n        }\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        if (numAsBigDecimal.isNaN)\
    \ {\n            return numAsBigDecimal\n        }\n        val numAsBigDecimalWithScale\
    \ = num.toBigDecimalWithScale\n        if (numAsBigDecimalWithScale.isNaN) {\n\
    \            return numAsBigDecimalWithScale\n        }\n        val numAsBigDecimalWithScaleAndPrecision\
    \ = num.toBigDecimalWithScaleAndPrecision\n        if (numAsBigDecimalWithScaleAndPrecision.isNaN)\
    \ {\n            return numAsBigDecimalWithScaleAndPrecision\n        }\n    \
    \    val numAsBigDecimalWithPrecision = num.toBigDecimalWithPrecision\n      \
    \  if (numAsBigDecimalWithPrecision.isNaN) {\n            return numAsBigDecimalWithPrecision\n\
    \        }\n        val numAsBigDecimalWithPrecisionAndScale = num.toBigDecimalWithPrecisionAndScale\n\
    \        if (numAsBigDecimalWithPrecisionAndScale.isNaN) {\n            return\
    \ numAsBigDecimalWithPrecisionAndScale\n        }\n        val numAsBigDecimalWithPrecisionAndScaleAndRoundingMode\
    \ = num.toBigDecimalWithPrecisionAndScaleAndRoundingMode\n        if (numAsBigDecimalWithPrecisionAndScaleAndRoundingMode.isNaN)\
    \ {\n            return numAsBigDecimalWithPrecisionAndScaleAndRoundingMode\n\
    \        }\n        val numAsBigDec", "        val num = value.toLong\n      \
    \  if (num < 0) {\n            val abs = Math.abs(num)\n            val max =\
    \ (abs / 2) + 1\n            val min = max - 1\n            val res = max if (num\
    \ > 0) else min\n            return res\n        } else {\n            val abs\
    \ = Math.abs(num)\n            val max = (abs / 2)\n            val min = max\
    \ - 1\n            val res = min if (num < 0) else max\n            return res\n\
    \        }", "        val num = value.toLong\n        if (num.isNaN) {\n     \
    \       throw new NumberFormatException(\"Invalid input\")\n        }\n      \
    \  val numAsInt = num.toInt\n        val numAsFloat = num.toFloat\n        val\
    \ numAsDouble = num.toDouble\n        val numAsBigInt = num.toBigInt\n       \
    \ val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimalWithScale\
    \ = num.withScale(0)\n        val numAsBigDecimalWithScaleAndPrecision = num.withScale(0).precision()\n\
    \        val numAsBigDecimalWithPrecision = num.precision()\n        val numAsBigDecimalWithPrecisionAndScale\
    \ = num.precision().withScale(0)\n        val numAsBigDecimalWithPrecisionAndScaleAndRoundingMode\
    \ = num.precision().withScale(0).withRoundingMode(RoundingMode.HALF_UP)\n    \
    \    val numAsBigDecimalWithPrecisionAndScaleAndRoundingMode = num.precision().withScale(0).withRoundingMode(RoundingMode.HALF_UP)\n\
    \        val numAsBigDecimalWithPrecisionAndScaleAndRoundingMode = num.precision().withScale(0).withRoundingMode(RoundingMode.HALF_UP)\n\
    \        val numAsBigDecimalWithPrecisionAndScaleAndRoundingMode = num.precision().withScale(0).withRoundingMode(RoundingMode.HALF_UP)\n\
    \        val numAsBigDecimalWithPrecisionAndScaleAndRoundingMode = num.precision().withScale(0).withRoundingMode(RoundingMode.HALF_UP)\n\
    \        val numAsBigDecimalWithPrecisionAndScaleAndRoundingMode = num.precision().withScale(0).withRoundingMode(RoundingMode.HALF_UP)\n\
    \        val numAsBigDecimalWithPrecisionAndScaleAndRoundingMode = num.precision().withScale(0).withRoundingMode(RoundingMode.HALF_UP)\n\
    \        val numAsBigDecimalWithPrecisionAndScaleAndRoundingMode = num.precision().withScale(0).withRoundingMode(R",
  "        val num = value.toLong\n        if (num.isNaN) {\n            return 0l\n\
    \        }\n        val numAsInt = num.toInt\n        if (numAsInt.isNaN) {\n\
    \            return num\n        }\n        val numAsFloat = num.toFloat\n   \
    \     if (numAsFloat.isNaN) {\n            return num\n        }\n        val\
    \ numAsDouble = num.toDouble\n        if (numAsDouble.isNaN) {\n            return\
    \ num\n        }\n        val numAsBigDecimal = num.toBigDecimal\n        if (numAsBigDecimal.isNaN)\
    \ {\n            return num\n        }\n        val numAsBigInteger = num.toBigInteger\n\
    \        if (numAsBigInteger.isNaN) {\n            return num\n        }\n   \
    \     val numAsShort = num.toShort\n        if (numAsShort.isNaN) {\n        \
    \    return num\n        }\n        val numAsByte = num.toByte\n        if (numAsByte.isNaN)\
    \ {\n            return num\n        }\n        val numAsLong = num.toLong\n \
    \       if (numAsLong.isNaN) {\n            return num\n        }\n        val\
    \ numAsInteger = num.toInt\n        if (numAsInteger.isNaN) {\n            return\
    \ num\n        }\n        val numAsFloatAsDouble = num.toFloat\n        if (numAsFloatAsDouble.isNaN)\
    \ {\n            return num\n        }\n        val numAsDoubleAsFloat = num.toDouble\n\
    \        if (numAsDoubleAsFloat.isNaN) {\n            return num\n        }\n\
    \        val numAsBigDecimalAsDouble = num.toBigDecimal\n        if (numAsBigDecimalAsDouble.isNaN)\
    \ {\n            return num\n        }\n        val numAsBigIntegerAsDouble =\
    \ num.toBigInteger\n        if (numAsBigIntegerAsDouble.isNaN) {\n           \
    \ return num\n        }\n        val numAsShortAsDouble = num.toShort\n      \
    \  if (numAsShortAsDouble.isNaN) {\n            return num\n        }\n      \
    \  val numAsByteAsDouble = num.toByte", "        val num = value.toLong\n    \
    \    if (num.isNaN) {\n            return num\n        }\n        val numAsInt\
    \ = num.toInt\n        if (numAsInt.isNaN) {\n            return num\n       \
    \ }\n        val numAsFloat = num.toFloat\n        if (numAsFloat.isNaN) {\n \
    \           return num\n        }\n        val numAsDouble = num.toDouble\n  \
    \      if (numAsDouble.isNaN) {\n            return num\n        }\n        val\
    \ numAsBigInt = num.toBigInt\n        if (numAsBigInt.isNaN) {\n            return\
    \ num\n        }\n        val numAsBigDecimal = num.toBigDecimal\n        if (numAsBigDecimal.isNaN)\
    \ {\n            return num\n        }\n        val numAsBigDecimalInt = numAsBigDecimal.toBigInteger\n\
    \        if (numAsBigDecimalInt.isNaN) {\n            return num\n        }\n\
    \        val numAsBigDecimalLong = numAsBigDecimal.toBigInteger\n        if (numAsBigDecimalLong.isNaN)\
    \ {\n            return num\n        }\n        val numAsBigDecimalIntAsLong =\
    \ numAsBigDecimalInt.toLong\n        if (numAsBigDecimalIntAsLong.isNaN) {\n \
    \           return num\n        }\n        val numAsBigDecimalLongAsLong = numAsBigDecimalLong.toLong\n\
    \        if (numAsBigDecimalLongAsLong.isNaN) {\n            return num\n    \
    \    }\n        val numAsBigDecimalIntAsInt = numAsBigDecimalInt.toInt\n     \
    \   if (numAsBigDecimalIntAsInt.isNaN) {\n            return num\n        }\n\
    \        val numAsBigDecimalLongAsInt = numAsBigDecimalLong.toInt\n        if\
    \ (numAsBigDecimalLongAsInt.isNaN) {\n            return num\n        }\n    \
    \    val numAsBigDecimalIntAsFloat = numAsBigDecimalInt.toFloat\n        if (numAsBigDecimalIntAsFloat.isNaN)\
    \ {\n            return num\n        }\n        val numAsBigDecimal", "      \
    \  val num = value.toLong\n        if (num.isNaN) {\n            return 0l\n \
    \       }\n        val abs = num.abs\n        if (abs.isNaN) {\n            return\
    \ 0l\n        }\n        val absInt = abs.toInt\n        if (absInt.isNaN) {\n\
    \            return 0l\n        }\n        val absIntPlusOne = absInt + 1\n  \
    \      if (absIntPlusOne.isNaN) {\n            return 0l\n        }\n        val\
    \ absIntMinusOne = absInt - 1\n        if (absIntMinusOne.isNaN) {\n         \
    \   return 0l\n        }\n        val absIntPlusOneHalf = absIntPlusOne / 2\n\
    \        if (absIntPlusOneHalf.isNaN) {\n            return 0l\n        }\n  \
    \      val absIntMinusOneHalf = absIntMinusOne / 2\n        if (absIntMinusOneHalf.isNaN)\
    \ {\n            return 0l\n        }\n        val absIntPlusOneHalfInt = absIntPlusOneHalf.toInt\n\
    \        if (absIntPlusOneHalfInt.isNaN) {\n            return 0l\n        }\n\
    \        val absIntMinusOneHalfInt = absIntMinusOneHalf.toInt\n        if (absIntMinusOneHalfInt.isNaN)\
    \ {\n            return 0l\n        }\n        val absIntPlusOneHalfIntPlusOne\
    \ = absIntPlusOneHalfInt + 1\n        if (absIntPlusOneHalfIntPlusOne.isNaN) {\n\
    \            return 0l\n        }\n        val absIntMinusOneHalfIntMinusOne =\
    \ absIntMinusOneHalfInt - 1\n        if (absIntMinusOneHalfIntMinusOne.isNaN)\
    \ {\n            return 0l\n        }\n        val absIntPlusOneHalfIntPlusOneHalf\
    \ = absIntPlusOneHalfInt + 1 / 2\n        if (absIntPlusOneHalfIntPlusOneHalf.isNaN)\
    \ {\n            return 0l\n        }\n        val absIntMinusOneHalfIntMinusOneHalf\
    \ = absIntMinusOneHalfInt - 1 / 2\n        if (absIntMinusOneHalfIntMinusOneHalf.isNaN",
  "        val num = value.toLong\n        if (num < 0) {\n            return -num\n\
    \        } else {\n            return num\n        }", "        val num = value.toLong\n\
    \        if (num.isNaN) {\n            return 0l\n        }\n        val abs =\
    \ num.abs\n        if (abs.isNaN) {\n            return 0l\n        }\n      \
    \  val abs_int = abs.toInt\n        if (abs_int.isNaN) {\n            return 0l\n\
    \        }\n        val abs_long = abs_int.toLong\n        if (abs_long.isNaN)\
    \ {\n            return 0l\n        }\n        val abs_long_int = abs_long.toInt\n\
    \        if (abs_long_int.isNaN) {\n            return 0l\n        }\n       \
    \ val abs_long_long = abs_long_int.toLong\n        if (abs_long_long.isNaN) {\n\
    \            return 0l\n        }\n        val abs_long_long_int = abs_long_long.toInt\n\
    \        if (abs_long_long_int.isNaN) {\n            return 0l\n        }\n  \
    \      val abs_long_long_long = abs_long_long_int.toLong\n        if (abs_long_long_long.isNaN)\
    \ {\n            return 0l\n        }\n        val abs_long_long_long_int = abs_long_long_long.toInt\n\
    \        if (abs_long_long_long_int.isNaN) {\n            return 0l\n        }\n\
    \        val abs_long_long_long_long = abs_long_long_long_int.toLong\n       \
    \ if (abs_long_long_long_long.isNaN) {\n            return 0l\n        }\n   \
    \     val abs_long_long_long_long_int = abs_long_long_long_long.toInt\n      \
    \  if (abs_long_long_long_long_int.isNaN) {\n            return 0l\n        }\n\
    \        val abs_long_long_long_long_long = abs_long_long_long_long_int.toLong\n\
    \        if (abs_long_long_long_long_long.isNaN) {\n            return 0l\n  \
    \      }\n        val abs_long_long", "        val num = value.toLong\n      \
    \  if (num < 0) num = -num\n        val numAsInt = num.toInt\n        if (numAsInt\
    \ == num) {\n            val numAsLong = num.toLong\n            if (numAsLong\
    \ == num) {\n                val numAsDouble = num.toDouble\n                if\
    \ (numAsDouble == num) {\n                    val numAsFloat = num.toFloat\n \
    \                   if (numAsFloat == num) {\n                        val numAsShort\
    \ = num.toShort\n                        if (numAsShort == num) {\n          \
    \                  val numAsByte = num.toByte\n                            if\
    \ (numAsByte == num) {\n                                val numAsChar = num.toChar\n\
    \                                if (numAsChar == num) {\n                   \
    \                 val numAsBoolean = num.toBoolean\n                         \
    \           if (numAsBoolean == num) {\n                                     \
    \   val numAsBigInt = num.toBigInt\n                                        if\
    \ (numAsBigInt == num) {\n                                            val numAsBigDecimal\
    \ = num.toBigDecimal\n                                            if (numAsBigDecimal\
    \ == num) {\n                                                val numAsBigFloat\
    \ = num.toBigFloat\n                                                if (numAsBigFloat\
    \ == num) {\n                                                    val numAsBigLong\
    \ = num.toBigLong\n                                                    if (numAsBigLong\
    \ == num) {\n                                                        val numAsBigInteger\
    \ = num.toBigInteger\n                                                       \
    \ if (numAsBigInteger == num) {\n                                            \
    \                val numAsBigDecimal = num.toBigDecimal\n                    \
    \                                        if (numAsBigDecimal == num) {\n     \
    \                                                           val numAsBigFloat\
    \ = num.toBigFloat\n                                                         \
    \       if (numAsBigFloat == num) {\n                                        \
    \                            val numAsBigLong = num.toBigLong\n              \
    \                                                      if (numAsBigLong == num)\
    \ {\n                                                                        val\
    \ numAsBigInteger = num.toBigInteger\n                                       \
    \                                 if (numAsBigInteger == num) {\n            \
    \                                                   ", "        val num = value.toLong\n\
    \        if (num < 0) num = -num\n        val abs = num.abs\n        val intPart\
    \ = num.div(abs).floor\n        val fracPart = num.div(abs).remainder\n      \
    \  val rounded = intPart + fracPart.div(abs).floor\n        if (abs.toInt > 0\
    \ && abs.toInt % 2 == 0) {\n            return rounded.toInt\n        } else {\n\
    \            return rounded.toLong\n        }", "        val num = value.toLong\n\
    \        if (num < 0) {\n            val abs = Math.abs(num)\n            val\
    \ floor = abs.floorDiv(abs.div(scala.math.BigInt(\"1\")))\n            val ceil\
    \ = abs.ceilDiv(abs.div(scala.math.BigInt(\"1\")))\n            val diff = abs.sub(floor).div(ceil).toInt\n\
    \            if (diff == 0) {\n                return floor\n            } else\
    \ if (diff > 0) {\n                return ceil\n            } else {\n       \
    \         return floor\n            }\n        } else {\n            return num\n\
    \        }", "        val num = value.toLong\n        if (num.isNaN) {\n     \
    \       throw new NumberFormatException(\"NaN\")\n        }\n        val numAsInt\
    \ = num.toInt\n        if (numAsInt.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsDouble = num.toDouble\n        if (numAsDouble.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsFloat = num.toFloat\n        if (numAsFloat.isNaN) {\n            throw\
    \ new NumberFormatException(\"NaN\")\n        }\n        val numAsShort = num.toShort\n\
    \        if (numAsShort.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsByte = num.toByte\n        if (numAsByte.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsChar = num.toChar\n        if (numAsChar.isNaN) {\n            throw\
    \ new NumberFormatException(\"NaN\")\n        }\n        val numAsBoolean = num.toBoolean\n\
    \        if (numAsBoolean.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsBigInteger = num.toBigInteger\n        if\
    \ (numAsBigInteger.isNaN) {\n            throw new NumberFormatException(\"NaN\"\
    )\n        }\n        val numAsBigDecimal = num.toBigDecimal\n        if (numAsBigDecimal.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsBigDecimal = num.toBigDecimal\n        if (numAsBigDecimal.isNaN) {\n\
    \            throw new NumberFormatException(\"NaN\")\n        }\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        if (numAsBigDecimal.isNaN) {\n \
    \           throw new NumberFormatException(\"NaN\")\n        }\n        val numAsBigDecimal\
    \ = num.toBigDecimal\n        if (numAsBigDecimal.isNaN) {\n            throw\
    \ new NumberFormatException", "        val num = value.toLong\n        if (num\
    \ < 0) {\n            val abs = Math.abs(num)\n            val nearest = abs.div(scala.math.BigInt(2)).toInt\n\
    \            val diff = abs.sub(scala.math.BigInt(nearest * 2)).toInt\n      \
    \      if (diff == 0) {\n                return nearest\n            } else {\n\
    \                return nearest + 1\n            }\n        } else {\n       \
    \     val abs = Math.abs(num)\n            val nearest = abs.div(scala.math.BigInt(2)).toInt\n\
    \            val diff = abs.sub(scala.math.BigInt(nearest * 2)).toInt\n      \
    \      if (diff == 0) {\n                return nearest\n            } else {\n\
    \                return nearest - 1\n            }\n        }", "        val num\
    \ = value.toLong\n        if (num < 0) {\n            return -num\n        } else\
    \ {\n            return num\n        }", "        val num = value.toLong\n   \
    \     if (num.isNaN) {\n            return 0l\n        }\n        val numAsInt\
    \ = num.toInt\n        if (numAsInt.isNaN) {\n            return 0l\n        }\n\
    \        val numAsFloat = num.toFloat\n        if (numAsFloat.isNaN) {\n     \
    \       return 0l\n        }\n        val numAsDouble = num.toDouble\n       \
    \ if (numAsDouble.isNaN) {\n            return 0l\n        }\n        val numAsBigDecimal\
    \ = num.toBigDecimal\n        if (numAsBigDecimal.isNaN) {\n            return\
    \ 0l\n        }\n        val numAsBigInteger = num.toBigInteger\n        if (numAsBigInteger.isNaN)\
    \ {\n            return 0l\n        }\n        val numAsLong = num.toLong\n  \
    \      if (numAsLong.isNaN) {\n            return 0l\n        }\n        val numAsIntAsLong\
    \ = numAsInt.toLong\n        if (numAsIntAsLong.isNaN) {\n            return 0l\n\
    \        }\n        val numAsFloatAsLong = numAsFloat.toLong\n        if (numAsFloatAsLong.isNaN)\
    \ {\n            return 0l\n        }\n        val numAsDoubleAsLong = numAsDouble.toLong\n\
    \        if (numAsDoubleAsLong.isNaN) {\n            return 0l\n        }\n  \
    \      val numAsBigDecimalAsLong = numAsBigDecimal.toLong\n        if (numAsBigDecimalAsLong.isNaN)\
    \ {\n            return 0l\n        }\n        val numAsBigIntegerAsLong = numAsBigInteger.toLong\n\
    \        if (numAsBigIntegerAsLong.isNaN) {\n            return 0l\n        }\n\
    \        val numAsLongAsLong = numAsLong.toLong\n        if (numAsLongAsLong.isNaN)\
    \ {\n            return 0l\n        }\n        val numAsIntAsLongAsLong = numAsIntAsLong.toLong\n\
    \        if (numAsIntAsLongAsLong.isNaN) {\n            return 0l\n        }\n\
    \        val", "        val num = value.toLong\n        if (num.isNaN) {\n   \
    \         throw new NumberFormatException(\"NaN\")\n        }\n        if (num.isInfinite)\
    \ {\n            throw new NumberFormatException(\"Infinity\")\n        }\n  \
    \      val numAsInt = num.toInt\n        if (numAsInt.isNaN) {\n            throw\
    \ new NumberFormatException(\"NaN\")\n        }\n        if (numAsInt.isInfinite)\
    \ {\n            throw new NumberFormatException(\"Infinity\")\n        }\n  \
    \      val numAsFloat = num.toFloat\n        if (numAsFloat.isNaN) {\n       \
    \     throw new NumberFormatException(\"NaN\")\n        }\n        if (numAsFloat.isInfinite)\
    \ {\n            throw new NumberFormatException(\"Infinity\")\n        }\n  \
    \      val numAsDouble = num.toDouble\n        if (numAsDouble.isNaN) {\n    \
    \        throw new NumberFormatException(\"NaN\")\n        }\n        if (numAsDouble.isInfinite)\
    \ {\n            throw new NumberFormatException(\"Infinity\")\n        }\n  \
    \      val numAsBigDecimal = num.toBigDecimal\n        if (numAsBigDecimal.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ if (numAsBigDecimal.isInfinite) {\n            throw new NumberFormatException(\"\
    Infinity\")\n        }\n        val numAsBigInteger = num.toBigInteger\n     \
    \   if (numAsBigInteger.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        if (numAsBigInteger.isInfinite) {\n            throw\
    \ new NumberFormatException(\"Infinity\")\n        }\n        val numAsBigDecimalScala\
    \ = num.toBigDecimalScala\n        if (numAsBigDecimalScala.isNaN) {\n       \
    \     throw new NumberFormatException(\"NaN\")\n        }\n        if (numAsBigDecimalScala.isInfinite)\
    \ {\n            throw new NumberFormatException(\"Infinity\")\n        }\n  \
    \      val numAsBigIntegerScala = num.toBigIntegerScala\n        if (numAsBigIntegerScala.isNaN)\
    \ {\n            throw", "        val num = value.toLong\n        if (num < 0)\
    \ {\n            return -num\n        } else {\n            return num\n     \
    \   }", "        val num = value.toLong\n        if (num < 0) {\n            return\
    \ -num\n        } else {\n            return num\n        }", "        val num\
    \ = value.toLong\n        if (num < 0) {\n            val abs = Math.abs(num)\n\
    \            if (abs % 2 == 0) {\n                return abs / 2\n           \
    \ } else {\n                return abs / 2 + 1\n            }\n        } else\
    \ {\n            return num\n        }", "        val num = value.toLong\n   \
    \     if (num < 0) {\n            val abs = Math.abs(num)\n            val floor\
    \ = abs.floorDiv(abs.intPart)\n            val ceil = abs.div(abs.intPart).add(1)\n\
    \            if (num.compareTo(floor) < 0)\n                return floor\n   \
    \         else\n                return ceil\n        } else {\n            val\
    \ abs = Math.abs(num)\n            val floor = abs.floorDiv(abs.intPart)\n   \
    \         val ceil = abs.div(abs.intPart).add(1)\n            if (num.compareTo(ceil)\
    \ > 0)\n                return ceil\n            else\n                return\
    \ floor\n        }", "        val num = value.toLong\n        if (num < 0) num\
    \ = -num\n        val abs = Math.abs(num)\n        val intPart = abs % 1\n   \
    \     val fracPart = abs - intPart\n        if (fracPart == 0) return num\n  \
    \      val res = num / abs\n        if (res < 0) return -res\n        else return\
    \ res", "        val num = value.toLong\n        val num_int = num.toInt\n   \
    \     val num_long = num.toLong\n        val num_float = num.toFloat\n       \
    \ val num_double = num.toDouble\n        val num_big_int = num.toBigInt\n    \
    \    val num_big_decimal = num.toBigDecimal\n        val num_big_float = num.toBigFloat\n\
    \        val num_big_double = num.toBigDouble\n        val num_big_big_int = num.toBigInt\n\
    \        val num_big_big_decimal = num.toBigDecimal\n        val num_big_big_float\
    \ = num.toBigFloat\n        val num_big_big_double = num.toBigDouble\n       \
    \ val num_big_big_big_int = num.toBigInt\n        val num_big_big_big_decimal\
    \ = num.toBigDecimal\n        val num_big_big_big_float = num.toBigFloat\n   \
    \     val num_big_big_big_double = num.toBigDouble\n        val num_big_big_big_big_int\
    \ = num.toBigInt\n        val num_big_big_big_big_decimal = num.toBigDecimal\n\
    \        val num_big_big_big_big_float = num.toBigFloat\n        val num_big_big_big_big_double\
    \ = num.toBigDouble\n        val num_big_big_big_big_big_int = num.toBigInt\n\
    \        val num_big_big_big_big_big_decimal = num.toBigDecimal\n        val num_big_big_big_big_big_float\
    \ = num.toBigFloat\n        val num_big_big_big_big_big_double = num.toBigDouble\n\
    \        val num_big_big_big_big_big_big_int = num.toBigInt\n        val num_big_big_big_big_big_big_decimal\
    \ = num.toBigDecimal\n        val num_big_big_big_big_big_big_float = num.toBigFloat\n\
    \        val num_big_big_big_big_big_big", "        val num = value.toLong\n \
    \       if (num < 0) {\n            val abs = Math.abs(num)\n            if (abs\
    \ < 10) {\n                return abs\n            } else {\n                return\
    \ abs - 10\n            }\n        } else {\n            return num\n        }",
  "        val v = value.toLowerCase()\n        if (v.contains(\".\")) {\n       \
    \     val n = v.replaceAll(\"[^0-9.]\", \"\")\n            val f = n.indexOf(\"\
    .\")\n            val s = n.substring(0, f)\n            val e = n.substring(f\
    \ + 1)\n            val i = Long.parseLong(s)\n            val f = Long.parseLong(e)\n\
    \            val diff = Math.abs(i - f)\n            if (diff == 0) {\n      \
    \          return i\n            } else if (diff > 0) {\n                return\
    \ i\n            } else {\n                return i + 1\n            }\n     \
    \   } else {\n            val i = Long.parseLong(v)\n            return i\n  \
    \      }", "        val num = value.toLong\n        if (num.isNaN) {\n       \
    \     return 0l\n        }\n        val numAsInt = num.toInt\n        if (numAsInt.isNaN)\
    \ {\n            return numAsInt\n        }\n        val numAsFloat = num.toFloat\n\
    \        if (numAsFloat.isNaN) {\n            return numAsFloat\n        }\n \
    \       val numAsDouble = num.toDouble\n        if (numAsDouble.isNaN) {\n   \
    \         return numAsDouble\n        }\n        val numAsBigInt = num.toBigInt\n\
    \        if (numAsBigInt.isNaN) {\n            return numAsBigInt\n        }\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        if (numAsBigDecimal.isNaN)\
    \ {\n            return numAsBigDecimal\n        }\n        val numAsBigDecimalToInt\
    \ = numAsBigDecimal.toBigInteger\n        if (numAsBigDecimalToInt.isNaN) {\n\
    \            return numAsBigDecimalToInt\n        }\n        val numAsBigDecimalToFloat\
    \ = numAsBigDecimal.toBigDecimal\n        if (numAsBigDecimalToFloat.isNaN) {\n\
    \            return numAsBigDecimalToFloat\n        }\n        val numAsBigDecimalToDouble\
    \ = numAsBigDecimal.toBigDecimal\n        if (numAsBigDecimalToDouble.isNaN) {\n\
    \            return numAsBigDecimalToDouble\n        }\n        val numAsBigDecimalToBigInt\
    \ = numAsBigDecimal.toBigInteger\n        if (numAsBigDecimalToBigInt.isNaN) {\n\
    \            return numAsBigDecimalToBigInt\n        }\n        val numAsBigDecimalToBigDecimal\
    \ = numAsBigDecimal.toBigDecimal\n        if (numAsBigDecimalToBigDecimal.isNaN)\
    \ {\n            return numAsBigDecimalToBigDecimal\n        }\n        val numAsBigDecimalToBigDecimalToInt\
    \ = numAsBigDecimal.toBigDecimalToBigInteger\n        if (numAsBigDecimalToBigDecimalToInt.isNa",
  "        val num = value.toLong\n        if (num < 0) {\n            val abs = Math.abs(num)\n\
    \            val max = abs.max\n            val min = abs.min\n            val\
    \ diff = max - min\n            val diff2 = diff / 2\n            val diff3 =\
    \ diff2 / 2\n            val diff4 = diff3 / 2\n            val diff5 = diff4\
    \ / 2\n            val diff6 = diff5 / 2\n            val diff7 = diff6 / 2\n\
    \            val diff8 = diff7 / 2\n            val diff9 = diff8 / 2\n      \
    \      val diff10 = diff9 / 2\n            val diff11 = diff10 / 2\n         \
    \   val diff12 = diff11 / 2\n            val diff13 = diff12 / 2\n           \
    \ val diff14 = diff13 / 2\n            val diff15 = diff14 / 2\n            val\
    \ diff16 = diff15 / 2\n            val diff17 = diff16 / 2\n            val diff18\
    \ = diff17 / 2\n            val diff19 = diff18 / 2\n            val diff20 =\
    \ diff19 / 2\n            val diff21 = diff20 / 2\n            val diff22 = diff21\
    \ / 2\n            val diff23 = diff22 / 2\n            val diff24 = diff23 /\
    \ 2\n            val diff25 = diff24 / 2\n            val diff26 = diff25 / 2\n\
    \            val diff27 = diff26 / 2\n            val diff28 = diff27 / 2\n  \
    \          val diff29 = diff28 / 2\n            val diff30 = diff29 / 2\n    \
    \        val diff31 = diff30 / 2\n            val diff32 = diff31 / 2\n      \
    \      val diff33 = diff32 / 2\n            val diff34 = diff33 / 2\n        \
    \    val diff35 = diff34 / 2\n            val diff36 = diff35 / 2\n          \
    \  val diff37 = diff36 / 2\n            val diff38 = diff37 / 2\n            val\
    \ diff39 = diff38 / 2\n            val diff40 = diff39 / 2\n            val diff41\
    \ = diff40 / 2\n            val diff42 = diff41 / 2\n            val diff43 =\
    \ diff42 / 2\n            val diff44 = diff43 / 2\n            val diff45 = diff44\
    \ / 2\n            val diff46 = diff45 / 2\n            val diff47 = diff46 /\
    \ 2\n", "        val num = value.toLong\n        if (num.isNaN) {\n          \
    \  return 0l\n        }\n        val numAsInt = num.toInt\n        val numAsFloat\
    \ = num.toFloat\n        val numAsDouble = num.toDouble\n        val numAsBigInt\
    \ = num.toBigInt\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimalWithScale = num.toBigDecimal(2)\n        val numAsBigDecimalWithScale2\
    \ = num.toBigDecimal(2, 2)\n        val numAsBigDecimalWithScale3 = num.toBigDecimal(2,\
    \ 2, 2)\n        val numAsBigDecimalWithScale4 = num.toBigDecimal(2, 2, 2, 2)\n\
    \        val numAsBigDecimalWithScale5 = num.toBigDecimal(2, 2, 2, 2, 2)\n   \
    \     val numAsBigDecimalWithScale6 = num.toBigDecimal(2, 2, 2, 2, 2, 2)\n   \
    \     val numAsBigDecimalWithScale7 = num.toBigDecimal(2, 2, 2, 2, 2, 2, 2)\n\
    \        val numAsBigDecimalWithScale8 = num.toBigDecimal(2, 2, 2, 2, 2, 2, 2,\
    \ 2)\n        val numAsBigDecimalWithScale9 = num.toBigDecimal(2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2)\n        val numAsBigDecimalWithScale10 = num.toBigDecimal(2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2)\n        val numAsBigDecimalWithScale11 = num.toBigDecimal(2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2)\n        val numAsBigDecimalWithScale12 = num.toBigDecimal(2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2)\n        val numAsBigDecimalWithScale13 = num.toBigDecimal(2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,", "        val num = value.toLong\n        if\
    \ (num < 0) {\n            val abs = Math.abs(num)\n            val nearest =\
    \ abs.div(scala.math.BigInt(2)).toInt\n            val result = nearest * 2 -\
    \ abs\n            if (result == 0) result = nearest\n            return result\n\
    \        } else {\n            val abs = Math.abs(num)\n            val nearest\
    \ = abs.div(scala.math.BigInt(2)).toInt\n            val result = nearest\n  \
    \          if (result == 0) result = nearest\n            return result\n    \
    \    }", "        val num = value.toLong\n        if (num < 0) {\n           \
    \ val abs = Math.abs(num)\n            val abs_int = abs.toInt\n            val\
    \ abs_long = abs.toLong\n            val abs_float = abs.toFloat\n           \
    \ val abs_double = abs.toDouble\n            val abs_big_int = abs.toBigInt\n\
    \            val abs_big_decimal = abs.toBigDecimal\n            val abs_big_float\
    \ = abs.toBigFloat\n            val abs_big_double = abs.toBigDouble\n       \
    \     val abs_big_big_int = abs.toBigBigInt\n            val abs_big_big_decimal\
    \ = abs.toBigBigDecimal\n            val abs_big_big_float = abs.toBigBigFloat\n\
    \            val abs_big_big_double = abs.toBigBigDouble\n            val abs_big_big_big_int\
    \ = abs.toBigBigBigInt\n            val abs_big_big_big_decimal = abs.toBigBigBigDecimal\n\
    \            val abs_big_big_big_float = abs.toBigBigBigFloat\n            val\
    \ abs_big_big_big_double = abs.toBigBigBigDouble\n            val abs_big_big_big_big_int\
    \ = abs.toBigBigBigBigInt\n            val abs_big_big_big_big_decimal = abs.toBigBigBigBigDecimal\n\
    \            val abs_big_big_big_big_float = abs.toBigBigBigBigFloat\n       \
    \     val abs_big_big_big_big_double = abs.toBigBigBigBigDouble\n            val\
    \ abs_big_big_big_big_big_int = abs.toBigBigBigBigBigInt\n            val abs_big_big_big_big_big_decimal\
    \ = abs.toBigBigBigBigBigDecimal\n            val abs_big_big_big_big_big_float\
    \ = abs.toBigBigBigBigBigFloat\n            val abs_big_big_big_big_big_double\
    \ = abs.toBigBigBigBigBigDouble\n            val abs_big_big_big_big_big_big_int\
    \ = abs.toBigBigBigBigBigBigInt\n", "        val num = value.toLong\n        if\
    \ (num.isNaN) {\n            return 0l\n        }\n        val abs = num.abs\n\
    \        val intPart = abs.floor\n        val fracPart = abs.subtract(intPart).toDouble\n\
    \        if (fracPart.abs.isNaN) {\n            return intPart\n        }\n  \
    \      val frac = fracPart.abs\n        if (frac.isNaN) {\n            return\
    \ intPart\n        }\n        val res = intPart.add(frac.div(scala.math.BigInt.ONE).toLong)\n\
    \        if (num.signum() < 0) {\n            return -res\n        } else {\n\
    \            return res\n        }", "        val num = value.toLong\n       \
    \ if (num.isNaN) {\n            return 0l\n        }\n        val abs = num.abs\n\
    \        val abs_floor = abs.floor\n        val abs_ceil = abs.ceiling\n     \
    \   val abs_half = abs.half\n        val abs_half_floor = abs_half.floor\n   \
    \     val abs_half_ceil = abs_half.ceiling\n        val abs_half_half = abs_half.half\n\
    \        val abs_half_half_floor = abs_half_half.floor\n        val abs_half_half_ceil\
    \ = abs_half_half.ceiling\n        val abs_half_half_half = abs_half_half.half\n\
    \        val abs_half_half_half_floor = abs_half_half_half.floor\n        val\
    \ abs_half_half_half_ceil = abs_half_half_half.ceiling\n        val abs_half_half_half_half\
    \ = abs_half_half_half_half.half\n        val abs_half_half_half_half_floor =\
    \ abs_half_half_half_half_half.floor\n        val abs_half_half_half_half_ceil\
    \ = abs_half_half_half_half_half.ceiling\n        val abs_half_half_half_half_half\
    \ = abs_half_half_half_half_half_half.half\n        val abs_half_half_half_half_half_floor\
    \ = abs_half_half_half_half_half_half.floor\n        val abs_half_half_half_half_half_ceil\
    \ = abs_half_half_half_half_half_half.ceiling\n        val abs_half_half_half_half_half_half\
    \ = abs_half_half_half_half_half_half_half.half\n        val abs_half_half_half_half_half_half_floor\
    \ = abs_half_half_half_half_half_half_half.floor\n        val abs_half_half_half_half_half_half_ceil\
    \ = abs_half_half_half_half_half_half_half.ceiling\n        val abs_half_half_half_half_",
  "        val num = value.toLong\n        if (num.isNaN) {\n            return 0l\n\
    \        }\n        val abs = num.abs\n        val abs_floor = abs.floor\n   \
    \     val abs_ceil = abs.ceil\n        val abs_half = abs.half\n        val abs_half_floor\
    \ = abs_half.floor\n        val abs_half_ceil = abs_half.ceil\n        val abs_half_half\
    \ = abs_half.half\n        val abs_half_half_floor = abs_half_half.floor\n   \
    \     val abs_half_half_ceil = abs_half_half.ceil\n        val abs_half_half_half\
    \ = abs_half_half.half\n        val abs_half_half_half_floor = abs_half_half_half.floor\n\
    \        val abs_half_half_half_ceil = abs_half_half_half.ceil\n        val abs_half_half_half_half\
    \ = abs_half_half_half_half.half\n        val abs_half_half_half_half_floor =\
    \ abs_half_half_half_half_half.floor\n        val abs_half_half_half_half_ceil\
    \ = abs_half_half_half_half_half.ceil\n        val abs_half_half_half_half_half\
    \ = abs_half_half_half_half_half_half.half\n        val abs_half_half_half_half_half_floor\
    \ = abs_half_half_half_half_half_half.floor\n        val abs_half_half_half_half_half_ceil\
    \ = abs_half_half_half_half_half_half.ceil\n        val abs_half_half_half_half_half_half\
    \ = abs_half_half_half_half_half_half_half.half\n        val abs_half_half_half_half_half_half_floor\
    \ = abs_half_half_half_half_half_half_half.floor\n        val abs_half_half_half_half_half_half_ceil\
    \ = abs_half_half_half_half_half_half_half.ceil\n        val abs_half_half_half_half_",
  "        val num = value.toLong\n        if (num < 0) {\n            val abs = Math.abs(num)\n\
    \            val nearest = abs.div(scala.math.BigInt(10)).toInt\n            val\
    \ diff = abs.sub(scala.math.BigInt(nearest * 10)).div(scala.math.BigInt(10))\n\
    \            if (diff.toInt > 0) {\n                return nearest + 1\n     \
    \       } else {\n                return nearest\n            }\n        } else\
    \ {\n            val abs = Math.abs(num)\n            val nearest = abs.div(scala.math.BigInt(10)).toInt\n\
    \            val diff = abs.sub(scala.math.BigInt(nearest * 10)).div(scala.math.BigInt(10))\n\
    \            if (diff.toInt > 0) {\n                return nearest\n         \
    \   } else {\n                return nearest - 1\n            }\n        }", " \
    \       val num = value.toLong\n        if (num < 0) {\n            val abs =\
    \ Math.abs(num)\n            if (abs % 2 == 0) {\n                return abs /\
    \ 2\n            } else {\n                return abs / 2 + 1\n            }\n\
    \        } else {\n            return num\n        }", "        val num = value.toLong\n\
    \        if (num.isNaN) {\n            return 0l\n        } else {\n         \
    \   return num\n        }", "        val num = value.toLong\n        if (num.isNaN)\
    \ {\n            return 0l\n        }\n        val numAsInt = num.toInt\n    \
    \    if (numAsInt.isNaN) {\n            return numAsInt\n        }\n        val\
    \ numAsFloat = num.toFloat\n        if (numAsFloat.isNaN) {\n            return\
    \ numAsFloat\n        }\n        val numAsDouble = num.toDouble\n        if (numAsDouble.isNaN)\
    \ {\n            return numAsDouble\n        }\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        if (numAsBigDecimal.isNaN) {\n            return numAsBigDecimal\n\
    \        }\n        val numAsBigInteger = num.toBigInteger\n        if (numAsBigInteger.isNaN)\
    \ {\n            return numAsBigInteger\n        }\n        val numAsShort = num.toShort\n\
    \        if (numAsShort.isNaN) {\n            return numAsShort\n        }\n \
    \       val numAsByte = num.toByte\n        if (numAsByte.isNaN) {\n         \
    \   return numAsByte\n        }\n        val numAsChar = num.toChar\n        if\
    \ (numAsChar.isNaN) {\n            return numAsChar\n        }\n        val numAsFloatChar\
    \ = num.toFloatChar\n        if (numAsFloatChar.isNaN) {\n            return numAsFloatChar\n\
    \        }\n        val numAsDoubleChar = num.toDoubleChar\n        if (numAsDoubleChar.isNaN)\
    \ {\n            return numAsDoubleChar\n        }\n        val numAsBigDecimalChar\
    \ = num.toBigDecimalChar\n        if (numAsBigDecimalChar.isNaN) {\n         \
    \   return numAsBigDecimalChar\n        }\n        val numAsBigIntegerChar = num.toBigIntegerChar\n\
    \        if (numAsBigIntegerChar.isNaN) {\n            return numAsBigIntegerChar\n\
    \        }\n        val numAsShortChar = num.toShortChar\n        if (numAsShortChar.isNaN)\
    \ {\n            return numAsShortChar\n        }\n        val numAsByteChar =\
    \ num.toByte", "        val num = value.toLong\n        if (num < 0) {\n     \
    \       val abs = Math.abs(num)\n            val floor = abs.floorDiv(1)\n   \
    \         val ceil = abs.ceilDiv(1)\n            if (num.equals(floor)) {\n  \
    \              return floor\n            } else if (num.equals(ceil)) {\n    \
    \            return ceil\n            } else {\n                return num\n \
    \           }\n        } else {\n            val abs = Math.abs(num)\n       \
    \     val floor = abs.floorDiv(1)\n            val ceil = abs.ceilDiv(1)\n   \
    \         if (num.equals(floor)) {\n                return floor\n           \
    \ } else if (num.equals(ceil)) {\n                return ceil\n            } else\
    \ {\n                return num\n            }\n        }", "        val num =\
    \ value.toLong\n        if (num < 0) {\n            val abs = Math.abs(num)\n\
    \            val floor = abs.floorDiv(1)\n            val ceil = abs.ceilDiv(1)\n\
    \            if (num.equals(floor)) {\n                return num\n          \
    \  } else if (num.equals(ceil)) {\n                return num.subtract(1)\n  \
    \          } else {\n                return num.subtract(floor).add(1)\n     \
    \       }\n        } else {\n            return num\n        }", "        val\
    \ num = value.toLong\n        if (num.isNaN) {\n            return 0l\n      \
    \  }\n        val abs = num.abs\n        if (abs.isNaN) {\n            return\
    \ 0l\n        }\n        val abs_int = abs.toInt\n        if (abs_int.isNaN) {\n\
    \            return 0l\n        }\n        val abs_long = abs_int.toLong\n   \
    \     if (abs_long.isNaN) {\n            return 0l\n        }\n        val abs_float\
    \ = abs_long.toFloat\n        if (abs_float.isNaN) {\n            return 0l\n\
    \        }\n        val abs_double = abs_float.toDouble\n        if (abs_double.isNaN)\
    \ {\n            return 0l\n        }\n        val abs_big_int = abs_double.toBigInt\n\
    \        if (abs_big_int.isNaN) {\n            return 0l\n        }\n        val\
    \ abs_big_long = abs_big_int.toBigLong\n        if (abs_big_long.isNaN) {\n  \
    \          return 0l\n        }\n        val abs_big_float = abs_big_long.toBigFloat\n\
    \        if (abs_big_float.isNaN) {\n            return 0l\n        }\n      \
    \  val abs_big_double = abs_big_float.toBigDouble\n        if (abs_big_double.isNaN)\
    \ {\n            return 0l\n        }\n        val abs_big_big_int = abs_big_double.toBigInt\n\
    \        if (abs_big_big_int.isNaN) {\n            return 0l\n        }\n    \
    \    val abs_big_big_long = abs_big_big_int.toBigLong\n        if (abs_big_big_long.isNaN)\
    \ {\n            return 0l\n        }\n        val abs_big_big_float = abs_big_big_long.toBigFloat\n\
    \        if (abs_big_big_float.isNaN) {\n            return 0l\n        }\n  \
    \      val abs_big_big_double = abs_big_big_float.toBigDouble\n", "        val\
    \ num = value.toLong\n        if (num.isNaN) {\n            return 0l\n      \
    \  }\n        val numAsInt = num.toInt\n        val numAsFloat = num.toFloat\n\
    \        val numAsDouble = num.toDouble\n        val numAsBigInt = num.toBigInt\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimalWithScale\
    \ = num.toBigDecimal(2)\n        val numAsBigDecimalWithScaleAndPrecision = num.toBigDecimal(2,\
    \ 20)\n        val numAsBigDecimalWithPrecision = num.toBigDecimal(20)\n     \
    \   val numAsBigDecimalWithPrecisionAndScale = num.toBigDecimal(20, 2)\n     \
    \   val numAsBigDecimalWithScaleAndPrecisionAndRoundingMode = num.toBigDecimal(2,\
    \ 20, RoundingMode.HALF_UP)\n        val numAsBigDecimalWithPrecisionAndRoundingMode\
    \ = num.toBigDecimal(20, RoundingMode.HALF_UP)\n        val numAsBigDecimalWithPrecisionAndScaleAndRoundingMode\
    \ = num.toBigDecimal(20, 2, RoundingMode.HALF_UP)\n        val numAsBigDecimalWithScaleAndRoundingMode\
    \ = num.toBigDecimal(2, RoundingMode.HALF_UP)\n        val numAsBigDecimalWithPrecisionAndScaleAndRoundingMode\
    \ = num.toBigDecimal(20, 2, RoundingMode.HALF_UP)\n        val numAsBigDecimalWithPrecisionAndScaleAndRoundingModeAndOption\
    \ = num.toBigDecimal(20, 2, RoundingMode.HALF_UP, Some(\"\"))\n        val numAsBigDecimalWithPrecisionAndScaleAndRoundingModeAndOption\
    \ = num.toBigDecimal(20, 2, RoundingMode.HALF_UP, None)\n        val numAsBigDecimalWithPrecisionAndScaleAndRoundingModeAndOption\
    \ = num.toBigDecimal(20, 2, RoundingMode.HALF_UP, None)\n        val numAsBigDecimalWithPrecisionAndScaleAndRoundingMode",
  "        val num = value.toLong\n        if (num.isNaN) {\n            throw new\
    \ NumberFormatException(\"NaN\")\n        }\n        val numAsInt = num.toInt\n\
    \        if (numAsInt.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsFloat = num.toFloat\n        if (numAsFloat.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsDouble = num.toDouble\n        if (numAsDouble.isNaN) {\n         \
    \   throw new NumberFormatException(\"NaN\")\n        }\n        val numAsBigInt\
    \ = num.toBigInt\n        if (numAsBigInt.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsBigDecimal = num.toBigDecimal\n        if\
    \ (numAsBigDecimal.isNaN) {\n            throw new NumberFormatException(\"NaN\"\
    )\n        }\n        val numAsBigDecimalToBigInt = num.toBigDecimal.toBigInt\n\
    \        if (numAsBigDecimalToBigInt.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsBigDecimalToBigIntToInt = num.toBigDecimal.toBigInt.toInt\n\
    \        if (numAsBigDecimalToBigIntToInt.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsBigDecimalToBigIntToIntToLong = num.toBigDecimal.toBigInt.toInt.toLong\n\
    \        if (numAsBigDecimalToBigIntToIntToLong.isNaN) {\n            throw new\
    \ NumberFormatException(\"NaN\")\n        }\n        val numAsBigDecimalToBigIntToIntToLongToInt\
    \ = num.toBigDecimal.toBigInt.toInt.toLong.toInt\n        if (numAsBigDecimalToBigIntToIntToLongToInt.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsBigDecimalToBigIntToIntToLongToIntToLong = num.", "        val num\
    \ = value.toLong\n        if (num < 0) {\n            val abs = Math.abs(num)\n\
    \            val nearest = abs.div(abs.div(2)).floorDiv(2)\n            return\
    \ nearest.toLong\n        } else {\n            val abs = Math.abs(num)\n    \
    \        val nearest = abs.div(abs.div(2)).floorDiv(2)\n            return -nearest.toLong\n\
    \        }", "        val num = value.toLong\n        if (num < 0) {\n       \
    \     return -num\n        } else {\n            return num\n        }", "   \
    \     val num = value.toDouble\n        val intPart = num.intPart\n        val\
    \ fracPart = num.fracPart\n        val intPartAsLong = intPart.toLong\n      \
    \  val fracPartAsLong = fracPart.toLong\n        val intPartAsDouble = intPartAsLong.toDouble\n\
    \        val fracPartAsDouble = fracPartAsLong.toDouble\n        val intPartAsFloat\
    \ = intPartAsDouble.toFloat\n        val fracPartAsFloat = fracPartAsDouble.toFloat\n\
    \        val intPartAsInt = intPartAsFloat.toInt\n        val fracPartAsInt =\
    \ fracPartAsFloat.toInt\n        val intPartAsShort = intPartAsInt.toShort\n \
    \       val fracPartAsShort = fracPartAsInt.toShort\n        val intPartAsByte\
    \ = intPartAsShort.toByte\n        val fracPartAsByte = fracPartAsShort.toByte\n\
    \        val intPartAsChar = intPartAsByte.toChar\n        val fracPartAsChar\
    \ = fracPartAsByte.toChar\n        val intPartAsBoolean = intPartAsChar.toBoolean\n\
    \        val fracPartAsBoolean = fracPartAsChar.toBoolean\n        val intPartAsString\
    \ = intPartAsBoolean.toString\n        val fracPartAsString = fracPartAsBoolean.toString\n\
    \        val intPartAsInt = intPartAsString.toInt\n        val fracPartAsInt =\
    \ fracPartAsString.toInt\n        val intPartAsShort = intPartAsInt.toShort\n\
    \        val fracPartAsShort = fracPartAsInt.toShort\n        val intPartAsByte\
    \ = intPartAsShort.toByte\n        val fracPartAsByte = fracPartAsShort.toByte\n\
    \        val intPartAsChar = intPartAsByte.toChar\n        val fracPartAsChar\
    \ = fracPartAsByte.toChar\n        val intPartAsBoolean = intPartAsChar.toBoolean\n\
    \        val fracPartAsBoolean = fracPartAsChar.toBoolean\n        val intPartAsString\
    \ = intPartAsBoolean.toString\n        val fracPartAsString = fracPartAs", " \
    \       val num = value.toLong\n        if (num < 0) {\n            return -num\n\
    \        } else {\n            return num\n        }", "        val num = value.toLong\n\
    \        if (num == 0) {\n            return 0l\n        } else {\n          \
    \  return num\n        }", "        val num = value.toLong\n        if (num.isNaN)\
    \ {\n            return 0l\n        }\n        val numAsInt = num.toInt\n    \
    \    val numAsFloat = num.toFloat\n        val numAsDouble = num.toDouble\n  \
    \      val numAsBigInt = num.toBigInt\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsByte = num.toByte\n        val numAsShort = num.toShort\n  \
    \      val numAsChar = num.toChar\n        val numAsLong = num.toLong\n      \
    \  val numAsInt8 = num.toInt8\n        val numAsInt16 = num.toInt16\n        val\
    \ numAsInt32 = num.toInt32\n        val numAsInt64 = num.toInt64\n        val\
    \ numAsFloat32 = num.toFloat32\n        val numAsFloat64 = num.toFloat64\n   \
    \     val numAsFloat128 = num.toFloat128\n        val numAsByteArray = num.toByteArray\n\
    \        val numAsShortArray = num.toShortArray\n        val numAsCharArray =\
    \ num.toCharArray\n        val numAsIntArray = num.toIntArray\n        val numAsLongArray\
    \ = num.toLongArray\n        val numAsFloatArray = num.toFloatArray\n        val\
    \ numAsDoubleArray = num.toDoubleArray\n        val numAsBigIntArray = num.toBigIntArray\n\
    \        val numAsBigDecimalArray = num.toBigDecimalArray\n        val numAsString\
    \ = num.toString\n        val numAsIntString = num.toIntString\n        val numAsLongString\
    \ = num.toLongString\n        val numAsFloatString = num.toFloatString\n     \
    \   val numAsDoubleString = num.toDoubleString\n        val numAsBigIntString\
    \ = num.toBigIntString\n        val numAsBigDecimalString = num.toBigDecimalString\n\
    \        val numAsByteString = num.toByteString\n        val numAsShortString\
    \ = num.toShortString\n        val numAsCharString = num.toCharString\n      \
    \  val numAsIntString = num.toIntString\n        val numAsLongString = num.toLongString\n\
    \        val numAsFloat", "        val num = value.toLong\n        if (num < 0)\
    \ {\n            val abs = Math.abs(num)\n            val floor = abs.floorDiv(1)\n\
    \            val ceil = abs.ceilDiv(1)\n            if (abs.subtract(floor).compareTo(ceil.subtract(abs))\
    \ > 0)\n                return -floor\n            else\n                return\
    \ -ceil\n        } else {\n            val abs = Math.abs(num)\n            val\
    \ floor = abs.floorDiv(1)\n            val ceil = abs.ceilDiv(1)\n           \
    \ if (abs.subtract(floor).compareTo(ceil.subtract(abs)) > 0)\n               \
    \ return floor\n            else\n                return ceil\n        }", " \
    \       val num = value.toLong\n        if (num < 0) {\n            val abs =\
    \ Math.abs(num)\n            val floor = abs.floorDiv(1)\n            val ceil\
    \ = abs.ceilDiv(1)\n            val diff = abs.subtract(floor).div(1)\n      \
    \      if (diff.compareTo(ceil.subtract(floor).div(1)) > 0) {\n              \
    \  return -floor\n            } else {\n                return -ceil\n       \
    \     }\n        } else {\n            return num\n        }", "        val num\
    \ = value.toLong\n        if (num < 0) {\n            val abs = Math.abs(num)\n\
    \            val max = (abs / 2) + 1\n            val min = max - 1\n        \
    \    val res = max\n            if (num < 0) res = min\n            return res\n\
    \        } else {\n            val abs = Math.abs(num)\n            val max =\
    \ (abs / 2)\n            val min = max - 1\n            val res = min\n      \
    \      if (num > 0) res = max\n            return res\n        }", "        val\
    \ num = value.toLong\n        if (num.isNaN) {\n            return 0l\n      \
    \  }\n        val abs = num.abs\n        if (abs.isNaN) {\n            return\
    \ 0l\n        }\n        val abs_int = abs.toInt\n        if (abs_int.isNaN) {\n\
    \            return 0l\n        }\n        val abs_frac = abs.subtract(abs_int).toDouble\n\
    \        if (abs_frac.isNaN) {\n            return 0l\n        }\n        val\
    \ abs_frac_int = abs_frac.toInt\n        if (abs_frac_int.isNaN) {\n         \
    \   return 0l\n        }\n        val abs_frac_frac = abs_frac.subtract(abs_frac_int).toDouble\n\
    \        if (abs_frac_frac.isNaN) {\n            return 0l\n        }\n      \
    \  val abs_frac_frac_int = abs_frac_frac.toInt\n        if (abs_frac_frac_int.isNaN)\
    \ {\n            return 0l\n        }\n        val abs_frac_frac_frac = abs_frac_frac.subtract(abs_frac_frac_int).toDouble\n\
    \        if (abs_frac_frac_frac.isNaN) {\n            return 0l\n        }\n \
    \       val abs_frac_frac_frac_int = abs_frac_frac_frac.toInt\n        if (abs_frac_frac_frac_int.isNaN)\
    \ {\n            return 0l\n        }\n        val abs_frac_frac_frac_frac = abs_frac_frac_frac_int.subtract(abs_frac_frac_frac).toDouble\n\
    \        if (abs_frac_frac_frac_frac.isNaN) {\n            return 0l\n       \
    \ }\n        val abs_frac_frac_frac_frac_int = abs_frac_frac_frac_frac.toInt\n\
    \        if (abs_frac_frac_frac_frac_int.isNaN) {\n            return 0l\n   \
    \     }\n        val abs_frac_frac_frac_frac_frac = abs_frac_frac_frac_frac_int.subtract",
  "        val num = value.toLong\n        val abs = num.abs\n        val sign = num.signum\n\
    \        if (abs == 0) {\n            return 0l\n        } else if (abs < 0) {\n\
    \            return -closestInteger(value.substring(1))\n        } else if (abs\
    \ > 0 && sign == 1) {\n            return num.div(scala.math.BigInteger.ONE)\n\
    \        } else if (abs > 0 && sign == -1) {\n            return num.sub(scala.math.BigInteger.ONE)\n\
    \        } else {\n            return num\n        }", "        val num = value.toLong\n\
    \        if (num < 0) {\n            val abs = Math.abs(num)\n            val\
    \ floor = abs.floorDiv(1)\n            val ceil = abs.ceilDiv(1)\n           \
    \ if (num.equals(floor)) {\n                return (floor.toLong)\n          \
    \  } else if (num.equals(ceil)) {\n                return (ceil.toLong)\n    \
    \        } else {\n                return (abs.toLong)\n            }\n      \
    \  } else {\n            return (num.toLong)\n        }", "        val num = value.toLong\n\
    \        if (num.isNaN) {\n            return 0l\n        }\n        val numAsInt\
    \ = num.toInt\n        if (numAsInt.isNaN) {\n            return numAsInt\n  \
    \      }\n        val numAsFloat = num.toFloat\n        if (numAsFloat.isNaN)\
    \ {\n            return numAsFloat\n        }\n        val numAsDouble = num.toDouble\n\
    \        if (numAsDouble.isNaN) {\n            return numAsDouble\n        }\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        if (numAsBigDecimal.isNaN)\
    \ {\n            return numAsBigDecimal\n        }\n        val numAsBigInteger\
    \ = num.toBigInteger\n        if (numAsBigInteger.isNaN) {\n            return\
    \ numAsBigInteger\n        }\n        val numAsShort = num.toShort\n        if\
    \ (numAsShort.isNaN) {\n            return numAsShort\n        }\n        val\
    \ numAsByte = num.toByte\n        if (numAsByte.isNaN) {\n            return numAsByte\n\
    \        }\n        val numAsLong = num.toLong\n        if (numAsLong.isNaN) {\n\
    \            return numAsLong\n        }\n        val numAsInteger = num.toInt\n\
    \        if (numAsInteger.isNaN) {\n            return numAsInteger\n        }\n\
    \        val numAsFloatAsInt = num.toInt\n        if (numAsFloatAsInt.isNaN) {\n\
    \            return numAsFloatAsInt\n        }\n        val numAsFloatAsLong =\
    \ num.toLong\n        if (numAsFloatAsLong.isNaN) {\n            return numAsFloatAsLong\n\
    \        }\n        val numAsFloatAsDouble = num.toDouble\n        if (numAsFloatAsDouble.isNaN)\
    \ {\n            return numAsFloatAsDouble\n        }\n        val numAsFloatAsBigDecimal\
    \ = num.toBigDecimal\n        if (numAsFloatAsBigDecimal.isNaN) {\n          \
    \  return numAsFloatAsBigDecimal\n        }\n        val numAsFloatAsBigInteger\
    \ = num.", "        val num = value.toLong\n        if (num.isNaN) {\n       \
    \     throw new NumberFormatException(\"NaN\")\n        }\n        val abs = num.abs\n\
    \        if (abs.isInfinite) {\n            throw new NumberFormatException(\"\
    Infinity\")\n        }\n        val sign = num.signum\n        if (sign == 0)\
    \ {\n            throw new NumberFormatException(\"Zero\")\n        }\n      \
    \  val absInt = abs.toInt\n        if (absInt.isInfinite) {\n            throw\
    \ new NumberFormatException(\"Infinity\")\n        }\n        val absIntPlusOne\
    \ = absInt + 1\n        if (absIntPlusOne.isInfinite) {\n            throw new\
    \ NumberFormatException(\"Infinity\")\n        }\n        val absIntMinusOne =\
    \ absInt - 1\n        if (absIntMinusOne.isInfinite) {\n            throw new\
    \ NumberFormatException(\"Infinity\")\n        }\n        val absIntPlusOneHalf\
    \ = absIntPlusOne / 2\n        if (absIntPlusOneHalf.isInfinite) {\n         \
    \   throw new NumberFormatException(\"Infinity\")\n        }\n        val absIntMinusOneHalf\
    \ = absIntMinusOne / 2\n        if (absIntMinusOneHalf.isInfinite) {\n       \
    \     throw new NumberFormatException(\"Infinity\")\n        }\n        val absIntPlusOneHalfInt\
    \ = absIntPlusOneHalf.toInt\n        if (absIntPlusOneHalfInt.isInfinite) {\n\
    \            throw new NumberFormatException(\"Infinity\")\n        }\n      \
    \  val absIntMinusOneHalfInt = absIntMinusOneHalf.toInt\n        if (absIntMinusOneHalfInt.isInfinite)\
    \ {\n            throw new NumberFormatException(\"Infinity\")\n        }\n  \
    \      val absIntPlusOneHalfIntPlusOne = absIntPlusOneHalfInt + 1\n        if\
    \ (absIntPlusOneHalfIntPlusOne.isInfinite) {\n            throw new NumberFormatException(\"\
    Infinity\")\n        }\n        val absIntMinusOneHalfIntMinusOne = absIntMinusOneHalfInt\
    \ - 1\n        if (absIntMinusOneHalfIntMinusOne.isInfinite) {\n            throw\
    \ new NumberFormatException(\"Infinity\")\n", "        val num = value.toLong\n\
    \        if (num.isNaN) {\n            throw new NumberFormatException(\"NaN\"\
    )\n        }\n        if (num.isInfinite) {\n            throw new NumberFormatException(\"\
    Infinity\")\n        }\n        val numAsInt = num.toInt\n        if (numAsInt.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ if (numAsInt.isInfinite) {\n            throw new NumberFormatException(\"Infinity\"\
    )\n        }\n        val numAsFloat = num.toFloat\n        if (numAsFloat.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ if (numAsFloat.isInfinite) {\n            throw new NumberFormatException(\"\
    Infinity\")\n        }\n        val numAsDouble = num.toDouble\n        if (numAsDouble.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ if (numAsDouble.isInfinite) {\n            throw new NumberFormatException(\"\
    Infinity\")\n        }\n        val numAsBigDecimal = num.toBigDecimal\n     \
    \   if (numAsBigDecimal.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        if (numAsBigDecimal.isInfinite) {\n            throw\
    \ new NumberFormatException(\"Infinity\")\n        }\n        val numAsBigInteger\
    \ = num.toBigInteger\n        if (numAsBigInteger.isNaN) {\n            throw\
    \ new NumberFormatException(\"NaN\")\n        }\n        if (numAsBigInteger.isInfinite)\
    \ {\n            throw new NumberFormatException(\"Infinity\")\n        }\n  \
    \      val numAsBigDecimal = num.toBigDecimal\n        if (numAsBigDecimal.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ if (numAsBigDecimal.isInfinite) {\n            throw new NumberFormatException(\"\
    Infinity\")\n        }\n        val numAsBigInteger = num.toBigInteger\n     \
    \   if (numAsBigInteger.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        if", "        val num = value.toLong\n        if (num\
    \ < 0) num = -num\n        val abs = Math.abs(num)\n        if (abs < 1) return\
    \ num\n        val intPart = num.div(abs).floorDiv(1).toLong\n        val fracPart\
    \ = num.sub(intPart).div(abs).floorDiv(1).toLong\n        if (fracPart == 0) return\
    \ intPart\n        if (fracPart > 0) return intPart + 1\n        return intPart\
    \ - 1", "        val num = value.toLong\n        if (num.isNaN) {\n          \
    \  throw new NumberFormatException(\"NaN\")\n        }\n        val numAsInt =\
    \ num.toInt\n        if (numAsInt.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsFloat = num.toFloat\n        if (numAsFloat.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsDouble = num.toDouble\n        if (numAsDouble.isNaN) {\n         \
    \   throw new NumberFormatException(\"NaN\")\n        }\n        val numAsBigDecimal\
    \ = num.toBigDecimal\n        if (numAsBigDecimal.isNaN) {\n            throw\
    \ new NumberFormatException(\"NaN\")\n        }\n        val numAsBigInteger =\
    \ num.toBigInteger\n        if (numAsBigInteger.isNaN) {\n            throw new\
    \ NumberFormatException(\"NaN\")\n        }\n        val numAsBigDecimalUnscaled\
    \ = num.unscaled\n        if (numAsBigDecimalUnscaled.isNaN) {\n            throw\
    \ new NumberFormatException(\"NaN\")\n        }\n        val numAsBigIntegerUnscaled\
    \ = num.unscaled\n        if (numAsBigIntegerUnscaled.isNaN) {\n            throw\
    \ new NumberFormatException(\"NaN\")\n        }\n        val numAsBigDecimalUnscaledAsInt\
    \ = num.unscaled.toInt\n        if (numAsBigDecimalUnscaledAsInt.isNaN) {\n  \
    \          throw new NumberFormatException(\"NaN\")\n        }\n        val numAsBigIntegerUnscaledAsInt\
    \ = num.unscaled.toInt\n        if (numAsBigIntegerUnscaledAsInt.isNaN) {\n  \
    \          throw new NumberFormatException(\"NaN\")\n        }\n        val numAsBigDecimalUnscaledAsFloat\
    \ = num.unscaled.toFloat\n        if (numAsBigDecimalUnscaledAsFloat.isNaN) {\n\
    \            throw new NumberFormatException(\"NaN\")\n        }\n        val\
    \ numAsBigIntegerUnscaledAsFloat = num.unscaled", "        val num = value.toLong\n\
    \        if (num < 0) {\n            val abs = Math.abs(num)\n            val\
    \ intPart = abs.floorDiv(1)\n            val fracPart = abs.subtract(intPart).floorDiv(1)\n\
    \            val result = intPart.add(fracPart.multiply(10))\n            if (num\
    \ < 0) result = result.subtract(1)\n            return result\n        } else\
    \ {\n            val abs = Math.abs(num)\n            val intPart = abs.floorDiv(1)\n\
    \            val fracPart = abs.subtract(intPart).floorDiv(1)\n            val\
    \ result = intPart.add(fracPart.multiply(10))\n            if (num > 0) result\
    \ = result.add(1)\n            return result\n        }", "        val num = value.toLong\n\
    \        if (num.isNaN) {\n            return 0l\n        }\n        val numAsInt\
    \ = num.toInt\n        val numAsFloat = num.toFloat\n        val numAsDouble =\
    \ num.toDouble\n        val numAsChar = num.toChar\n        val numAsByte = num.toByte\n\
    \        val numAsShort = num.toShort\n        val numAsLong = num.toLong\n  \
    \      val numAsBigInt = num.toBigInt\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAs", "        val num = value.toLong\n        if (num < 0) {\n\
    \            val abs = Math.abs(num)\n            val floor = abs.floor\n    \
    \        val ceil = abs.ceiling\n            val diff = abs.subtract(floor)\n\
    \            val diff2 = diff.abs\n            val diff3 = diff2.subtract(1)\n\
    \            val diff4 = diff3.abs\n            val diff5 = diff4.subtract(1)\n\
    \            val diff6 = diff5.abs\n            val diff7 = diff6.subtract(1)\n\
    \            val diff8 = diff7.abs\n            val diff9 = diff8.subtract(1)\n\
    \            val diff10 = diff9.abs\n            val diff11 = diff10.subtract(1)\n\
    \            val diff12 = diff11.abs\n            val diff13 = diff12.subtract(1)\n\
    \            val diff14 = diff13.abs\n            val diff15 = diff14.subtract(1)\n\
    \            val diff16 = diff15.abs\n            val diff17 = diff16.subtract(1)\n\
    \            val diff18 = diff17.abs\n            val diff19 = diff18.subtract(1)\n\
    \            val diff20 = diff19.abs\n            val diff21 = diff20.subtract(1)\n\
    \            val diff22 = diff21.abs\n            val diff23 = diff22.subtract(1)\n\
    \            val diff24 = diff23.abs\n            val diff25 = diff24.subtract(1)\n\
    \            val diff26 = diff25.abs\n            val diff27 = diff26.subtract(1)\n\
    \            val diff28 = diff27.abs\n            val diff29 = diff28.subtract(1)\n\
    \            val diff30 = diff29.abs\n            val diff31 = diff30.subtract(1)\n\
    \            val diff32 = diff31.abs\n            val diff33 = diff32.subtract(1)\n\
    \            val diff34 = diff33.abs\n            val diff35 = diff34.subtract(1)\n\
    \            val diff36 = diff35.abs\n            val diff37 = diff36.subtract(1)\n\
    \            val diff", "        val num = value.toLong\n        if (num.isNaN)\
    \ {\n            return 0l\n        }\n        val numAsInt = num.toInt\n    \
    \    if (numAsInt.isNaN) {\n            return numAsInt\n        }\n        val\
    \ numAsFloat = num.toFloat\n        if (numAsFloat.isNaN) {\n            return\
    \ numAsFloat\n        }\n        val numAsDouble = num.toDouble\n        if (numAsDouble.isNaN)\
    \ {\n            return numAsDouble\n        }\n        val numAsBigInt = num.toBigInt\n\
    \        if (numAsBigInt.isNaN) {\n            return numAsBigInt\n        }\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        if (numAsBigDecimal.isNaN)\
    \ {\n            return numAsBigDecimal\n        }\n        val numAsBigDecimalWithScale\
    \ = num.toBigDecimalWithScale\n        if (numAsBigDecimalWithScale.isNaN) {\n\
    \            return numAsBigDecimalWithScale\n        }\n        val numAsBigDecimalWithScaleAndPrecision\
    \ = num.toBigDecimalWithScaleAndPrecision\n        if (numAsBigDecimalWithScaleAndPrecision.isNaN)\
    \ {\n            return numAsBigDecimalWithScaleAndPrecision\n        }\n    \
    \    val numAsBigDecimalWithPrecision = num.toBigDecimalWithPrecision\n      \
    \  if (numAsBigDecimalWithPrecision.isNaN) {\n            return numAsBigDecimalWithPrecision\n\
    \        }\n        val numAsBigDecimalWithPrecisionAndScale = num.toBigDecimalWithPrecisionAndScale\n\
    \        if (numAsBigDecimalWithPrecisionAndScale.isNaN) {\n            return\
    \ numAsBigDecimalWithPrecisionAndScale\n        }\n        val numAsBigDecimalWithPrecisionAndScaleAndRoundingMode\
    \ = num.toBigDecimalWithPrecisionAndScaleAndRoundingMode\n        if (numAsBigDecimalWithPrecisionAndScaleAndRoundingMode.isNaN)\
    \ {\n            return numAsBigDecimalWithPrecisionAndScaleAndRoundingMode\n\
    \        }\n        val numAsBigDec", "        val num = value.toLong\n      \
    \  if (num < 0) {\n            return -num\n        } else {\n            return\
    \ num\n        }", "        val num = value.toLong\n        val numAsInt = num.toInt\n\
    \        val numAsFloat = num.toFloat\n        val numAsDouble = num.toDouble\n\
    \        val numAsChar = num.toChar\n        val numAsByte = num.toByte\n    \
    \    val numAsShort = num.toShort\n        val numAsLong = num.toLong\n      \
    \  val numAsBigInt = num.toBigInt\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimalInt = num.toBigDecimalInt\n        val numAsBigDecimalLong\
    \ = num.toBigDecimalLong\n        val numAsBigDecimalShort = num.toBigDecimalShort\n\
    \        val numAsBigDecimalByte = num.toBigDecimalByte\n        val numAsBigDecimalChar\
    \ = num.toBigDecimalChar\n        val numAsBigDecimalFloat = num.toBigDecimalFloat\n\
    \        val numAsBigDecimalDouble = num.toBigDecimalDouble\n        val numAsBigDecimalBigInt\
    \ = num.toBigDecimalBigInt\n        val numAsBigDecimalBigDecimal = num.toBigDecimalBigDecimal\n\
    \        val numAsBigDecimalBigDecimalInt = num.toBigDecimalBigDecimalInt\n  \
    \      val numAsBigDecimalBigDecimalLong = num.toBigDecimalBigDecimalLong\n  \
    \      val numAsBigDecimalBigDecimalShort = num.toBigDecimalBigDecimalShort\n\
    \        val numAsBigDecimalBigDecimalByte = num.toBigDecimalBigDecimalByte\n\
    \        val numAsBigDecimalBigDecimalChar = num.toBigDecimalBigDecimalChar\n\
    \        val numAsBigDecimalBigDecimalFloat = num.toBigDecimalBigDecimalFloat\n\
    \        val numAsBigDecimalBigDecimalDouble = num.toBigDecimalBigDecimalDouble\n\
    \        val numAsBigDecimalBigDecimalBigInt = num.toBigDecimalBigDecimalBigInt\n\
    \        val numAsBigDecimalBigDecimalBigDecimal = num.toBigDecimalBigDecimalBigDecimal\n\
    \        val numAsBigDecimalBigDecimalBigDecimalInt = num.toBigDecimalBigDecimalBigDec",
  "        val num = value.toLong\n        if (num < 0) {\n            return -num\n\
    \        } else {\n            return num\n        }", "        val num = value.toLong\n\
    \        if (num.isNaN) {\n            return 0l\n        }\n        val numAsInt\
    \ = num.toInt\n        if (numAsInt.isNaN) {\n            return numAsInt\n  \
    \      }\n        val numAsFloat = num.toFloat\n        if (numAsFloat.isNaN)\
    \ {\n            return numAsFloat\n        }\n        val numAsDouble = num.toDouble\n\
    \        if (numAsDouble.isNaN) {\n            return numAsDouble\n        }\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        if (numAsBigDecimal.isNaN)\
    \ {\n            return numAsBigDecimal\n        }\n        val numAsBigInteger\
    \ = num.toBigInteger\n        if (numAsBigInteger.isNaN) {\n            return\
    \ numAsBigInteger\n        }\n        val numAsBigDecimalUnscaled = num.unscaled\n\
    \        if (numAsBigDecimalUnscaled.isNaN) {\n            return numAsBigDecimalUnscaled\n\
    \        }\n        val numAsBigIntegerUnscaled = num.unscaled\n        if (numAsBigIntegerUnscaled.isNaN)\
    \ {\n            return numAsBigIntegerUnscaled\n        }\n        val numAsBigDecimalUnscaledAsInt\
    \ = num.unscaled.toInt\n        if (numAsBigDecimalUnscaledAsInt.isNaN) {\n  \
    \          return numAsBigDecimalUnscaledAsInt\n        }\n        val numAsBigIntegerUnscaledAsInt\
    \ = num.unscaled.toInt\n        if (numAsBigIntegerUnscaledAsInt.isNaN) {\n  \
    \          return numAsBigIntegerUnscaledAsInt\n        }\n        val numAsBigDecimalUnscaledAsFloat\
    \ = num.unscaled.toFloat\n        if (numAsBigDecimalUnscaledAsFloat.isNaN) {\n\
    \            return numAsBigDecimalUnscaledAsFloat\n        }\n        val numAsBigIntegerUnscaledAsFloat\
    \ = num.unscaled.toFloat\n        if (numAsBigIntegerUnscaledAsFloat.isNaN) {\n\
    \            ", "        val num = value.toLong\n        if (num < 0) {\n    \
    \        val abs = Math.abs(num)\n            val nearest = abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div(abs.div",
  "        val num = value.toLong\n        if (num < 0) {\n            val abs = Math.abs(num)\n\
    \            val nearest = abs.div(scala.math.BigInt(\"1\" + abs.subtract(abs.div(scala.math.BigInt(\"\
    1\" + abs.subtract(abs.div(scala.math.BigInt(\"1\" + abs.subtract(abs.div(scala.math.BigInt(\"\
    1\" + abs.subtract(abs.div(scala.math.BigInt(\"1\" + abs.subtract(abs.div(scala.math.BigInt(\"\
    1\" + abs.subtract(abs.div(scala.math.BigInt(\"1\" + abs.subtract(abs.div(scala.math.BigInt(\"\
    1\" + abs.subtract(abs.div(scala.math.BigInt(\"1\" + abs.subtract(abs.div(scala.math.BigInt(\"\
    1\" + abs.subtract(abs.div(scala.math.BigInt(\"1\" + abs.subtract(abs.div(scala.math.BigInt(\"\
    1\" + abs.subtract(abs.div(scala.math.BigInt(\"1\" + abs.subtract(abs.div(scala.math.BigInt(\"\
    1\" + abs.subtract(abs.div(scala.math.BigInt(\"1\" + abs.subtract(abs.div(scala.math.BigInt(\"\
    1\" + abs.subtract(abs.div(scala.math.BigInt(\"1\" + abs.subtract(abs.div(scala.math.BigInt(\"\
    1\" + abs.subtract(abs.div(scala.math.BigInt(\"1\" + abs.subtract(abs.div(scala.math.BigInt(\"\
    1\" + abs.subtract(abs.div(scala.math.BigInt(\"1\" + abs.subtract(abs.div(scala.math.BigInt(\"\
    1\" + abs.subtract(abs.div(scala.math.BigInt(\"1\" + abs.", "        val num =\
    \ value.toLong\n        if (num.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val abs = num.abs\n        if (abs.isInfinite) {\n\
    \            throw new NumberFormatException(\"Infinity\")\n        }\n      \
    \  val sign = num.signum\n        if (sign == 0) {\n            throw new NumberFormatException(\"\
    Zero\")\n        }\n        val numAsInt = num.toInt\n        if (numAsInt.isInfinite)\
    \ {\n            throw new NumberFormatException(\"Infinity\")\n        }\n  \
    \      val numAsFloat = num.toFloat\n        if (numAsFloat.isNaN) {\n       \
    \     throw new NumberFormatException(\"NaN\")\n        }\n        val numAsDouble\
    \ = num.toDouble\n        if (numAsDouble.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsBigDecimal = num.toBigDecimal\n        if\
    \ (numAsBigDecimal.isInfinite) {\n            throw new NumberFormatException(\"\
    Infinity\")\n        }\n        val numAsBigInteger = num.toBigInteger\n     \
    \   if (numAsBigInteger.isInfinite) {\n            throw new NumberFormatException(\"\
    Infinity\")\n        }\n        val numAsBigDecimalInt = numAsBigDecimal.intValue\n\
    \        if (numAsBigDecimalInt.isInfinite) {\n            throw new NumberFormatException(\"\
    Infinity\")\n        }\n        val numAsBigDecimalLong = numAsBigDecimal.longValue\n\
    \        if (numAsBigDecimalLong.isInfinite) {\n            throw new NumberFormatException(\"\
    Infinity\")\n        }\n        val numAsBigDecimalFloat = numAsBigDecimal.floatValue\n\
    \        if (numAsBigDecimalFloat.isInfinite) {\n            throw new NumberFormatException(\"\
    Infinity\")\n        }\n        val numAsBigDecimalDouble = numAsBigDecimal.doubleValue\n\
    \        if (numAsBigDecimalDouble.isInfinite) {\n            throw new NumberFormatException(\"\
    Infinity\")\n        }\n        val numAsBigDecimalBigInteger = numAsBigDecimal.bigIntegerValue\n\
    \        if (", "        val num = value.toLong\n        if (num < 0) {\n    \
    \        return -num\n        } else {\n            return num\n        }", " \
    \       val num = value.toLong\n        if (num.isNaN) {\n            return 0l\n\
    \        }\n        val numAsInt = num.toInt\n        val numAsFloat = num.toFloat\n\
    \        val numAsDouble = num.toDouble\n        val numAsChar = num.toChar\n\
    \        val numAsByte = num.toByte\n        val numAsShort = num.toShort\n  \
    \      val numAsLong = num.toLong\n        val numAsBigInt = num.toBigInt\n  \
    \      val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAs", "        val num = value.toLong\n\
    \        if (num < 0) {\n            val abs = Math.abs(num)\n            val\
    \ nearest = abs.div(scala.math.BigInt(2)).floorDiv(scala.math.BigInt(2))\n   \
    \         val diff = abs.sub(nearest)\n            if (diff.abs().toInt > 1) {\n\
    \                val diff2 = diff.div(scala.math.BigInt(2))\n                val\
    \ nearest2 = nearest.add(diff2)\n                val diff3 = abs.sub(nearest2)\n\
    \                if (diff3.abs().toInt > 1) {\n                    val diff4 =\
    \ diff3.div(scala.math.BigInt(2))\n                    val nearest4 = nearest2.add(diff4)\n\
    \                    val diff5 = abs.sub(nearest4)\n                    if (diff5.abs().toInt\
    \ > 1) {\n                        val diff6 = diff5.div(scala.math.BigInt(2))\n\
    \                        val nearest6 = nearest4.add(diff6)\n                \
    \        val diff7 = abs.sub(nearest6)\n                        if (diff7.abs().toInt\
    \ > 1) {\n                            val diff8 = diff7.div(scala.math.BigInt(2))\n\
    \                            val nearest8 = nearest6.add(diff8)\n            \
    \                val diff9 = abs.sub(nearest8)\n                            if\
    \ (diff9.abs().toInt > 1) {\n                                val diff10 = diff9.div(scala.math.BigInt(2))\n\
    \                                val nearest10 = nearest8.add(diff10)\n      \
    \                          val diff11 = abs.sub(nearest10)\n                 \
    \               if (diff11.abs().toInt > 1) {\n                              \
    \      val diff12 = diff11.div(scala.math.BigInt(2))\n                       \
    \             val nearest12 = nearest10.add(diff12)\n                        \
    \            val diff13 = abs.sub(nearest12)\n                               \
    \     if (diff13.abs().toInt > 1) {\n                                        val\
    \ diff14 = diff13.div(scala.math.BigInt(2))\n                                \
    \        val nearest14 = nearest12.add(", "        val num = value.toLong\n  \
    \      if (num.isNaN) {\n            return 0l\n        }\n        val numAsInt\
    \ = num.toInt\n        val numAsFloat = num.toFloat\n        val numAsDouble =\
    \ num.toDouble\n        val numAsBigInt = num.toBigInt\n        val numAsBigDecimal\
    \ = num.toBigDecimal\n        val numAsChar = num.toChar\n        val numAsByte\
    \ = num.toByte\n        val numAsShort = num.toShort\n        val numAsLong =\
    \ num.toLong\n        val numAsFloat32 = num.toFloat32\n        val numAsFloat64\
    \ = num.toFloat64\n        val numAsFloat128 = num.toFloat128\n        val numAsInt32\
    \ = num.toInt32\n        val numAsInt64 = num.toInt64\n        val numAsInt128\
    \ = num.toInt128\n        val numAsChar32 = num.toChar32\n        val numAsChar64\
    \ = num.toChar64\n        val numAsChar128 = num.toChar128\n        val numAsByte32\
    \ = num.toByte32\n        val numAsByte64 = num.toByte64\n        val numAsByte128\
    \ = num.toByte128\n        val numAsShort32 = num.toShort32\n        val numAsShort64\
    \ = num.toShort64\n        val numAsShort128 = num.toShort128\n        val numAsInt256\
    \ = num.toInt256\n        val numAsInt512 = num.toInt512\n        val numAsInt1024\
    \ = num.toInt1024\n        val numAsInt2048 = num.toInt2048\n        val numAsInt4096\
    \ = num.toInt4096\n        val numAsInt8192 = num.toInt8192\n        val numAsInt16384\
    \ = num.toInt16384\n        val numAsInt32768 = num.toInt32768\n        val numAsInt65536\
    \ = num.toInt65536\n        val numAsInt131072 = num.toInt131072\n        val\
    \ numAsInt262144 = num.toInt262144\n        val numAsInt524288 = num.toInt524288\n\
    \        val numAsInt1048576", "        val num = value.toLong\n        if (num\
    \ < 0) {\n            val abs = Math.abs(num)\n            val floor = abs.floorDiv(1)\n\
    \            val ceil = abs.ceilDiv(1)\n            if (num.equals(floor)) {\n\
    \                return -floor\n            } else if (num.equals(ceil)) {\n \
    \               return -ceil\n            } else {\n                return -num\n\
    \            }\n        } else {\n            return num\n        }", "      \
    \  val num = value.toLong\n        if (num.isNaN) {\n            return 0l\n \
    \       }\n        val numAsInt = num.toInt\n        val numAsFloat = num.toFloat\n\
    \        val numAsDouble = num.toDouble\n        val numAsBigInt = num.toBigInt\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsChar = num.toChar\n\
    \        val numAsByte = num.toByte\n        val numAsShort = num.toShort\n  \
    \      val numAsLong = num.toLong\n        val numAsFloat32 = num.toFloat32\n\
    \        val numAsFloat64 = num.toFloat64\n        val numAsFloat128 = num.toFloat128\n\
    \        val numAsInt32 = num.toInt32\n        val numAsInt64 = num.toInt64\n\
    \        val numAsInt128 = num.toInt128\n        val numAsInt256 = num.toInt256\n\
    \        val numAsInt512 = num.toInt512\n        val numAsInt1024 = num.toInt1024\n\
    \        val numAsInt2048 = num.toInt2048\n        val numAsInt4096 = num.toInt4096\n\
    \        val numAsInt8192 = num.toInt8192\n        val numAsInt16384 = num.toInt16384\n\
    \        val numAsInt32768 = num.toInt32768\n        val numAsInt65536 = num.toInt65536\n\
    \        val numAsInt131072 = num.toInt131072\n        val numAsInt262144 = num.toInt262144\n\
    \        val numAsInt524288 = num.toInt524288\n        val numAsInt1048576 = num.toInt1048576\n\
    \        val numAsInt2097152 = num.toInt2097152\n        val numAsInt4194304 =\
    \ num.toInt4194304\n        val numAsInt8388608 = num.toInt8388608\n        val\
    \ numAsInt16777216 = num.toInt16777216\n        val numAsInt33554432 = num.toInt33554432\n\
    \        val numAsInt67108864 = num.toInt67108864\n", "        val num = value.toLong\n\
    \        if (num.isNaN) {\n            throw new IllegalArgumentException(\"Invalid\
    \ number: \" + value)\n        }\n        val numAsInt = num.toInt\n        if\
    \ (numAsInt.isNaN) {\n            throw new IllegalArgumentException(\"Invalid\
    \ number: \" + value)\n        }\n        val numAsDouble = num.toDouble\n   \
    \     if (numAsDouble.isNaN) {\n            throw new IllegalArgumentException(\"\
    Invalid number: \" + value)\n        }\n        val numAsFloat = num.toFloat\n\
    \        if (numAsFloat.isNaN) {\n            throw new IllegalArgumentException(\"\
    Invalid number: \" + value)\n        }\n        val numAsShort = num.toShort\n\
    \        if (numAsShort.isNaN) {\n            throw new IllegalArgumentException(\"\
    Invalid number: \" + value)\n        }\n        val numAsByte = num.toByte\n \
    \       if (numAsByte.isNaN) {\n            throw new IllegalArgumentException(\"\
    Invalid number: \" + value)\n        }\n        val numAsChar = num.toChar\n \
    \       if (numAsChar.isNaN) {\n            throw new IllegalArgumentException(\"\
    Invalid number: \" + value)\n        }\n        val numAsLong = num.toLong\n \
    \       if (numAsLong.isNaN) {\n            throw new IllegalArgumentException(\"\
    Invalid number: \" + value)\n        }\n        val numAsBigInt = num.toBigInt\n\
    \        if (numAsBigInt.isNaN) {\n            throw new IllegalArgumentException(\"\
    Invalid number: \" + value)\n        }\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        if (numAsBigDecimal.isNaN) {\n            throw new IllegalArgumentException(\"\
    Invalid number: \" + value)\n        }\n        val numAsBigDecimalInt = num.toBigDecimalInt\n\
    \        if (numAsBigDecimalInt.isNaN) {\n            throw new IllegalArgumentException(\"\
    Invalid number: \" + value)\n        }\n        val numAsBigDecimalLong = num.toBigDecimalLong\n\
    \        if (numAsBigDecimal", "        val num = value.toLong\n        if (num.isNaN)\
    \ {\n            return 0l\n        }\n        val numAsInt = num.toInt\n    \
    \    if (numAsInt.isNaN) {\n            return numAsInt\n        }\n        val\
    \ numAsFloat = num.toFloat\n        if (numAsFloat.isNaN) {\n            return\
    \ numAsFloat\n        }\n        val numAsDouble = num.toDouble\n        if (numAsDouble.isNaN)\
    \ {\n            return numAsDouble\n        }\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        if (numAsBigDecimal.isNaN) {\n            return numAsBigDecimal\n\
    \        }\n        val numAsBigInteger = num.toBigInteger\n        if (numAsBigInteger.isNaN)\
    \ {\n            return numAsBigInteger\n        }\n        val numAsLong = num.toLong\n\
    \        if (numAsLong.isNaN) {\n            return numAsLong\n        }\n   \
    \     val numAsIntAsLong = numAsInt.toLong\n        if (numAsIntAsLong.isNaN)\
    \ {\n            return numAsIntAsLong\n        }\n        val numAsFloatAsLong\
    \ = numAsFloat.toLong\n        if (numAsFloatAsLong.isNaN) {\n            return\
    \ numAsFloatAsLong\n        }\n        val numAsDoubleAsLong = numAsDouble.toLong\n\
    \        if (numAsDoubleAsLong.isNaN) {\n            return numAsDoubleAsLong\n\
    \        }\n        val numAsBigDecimalAsLong = numAsBigDecimal.toLong\n     \
    \   if (numAsBigDecimalAsLong.isNaN) {\n            return numAsBigDecimalAsLong\n\
    \        }\n        val numAsBigIntegerAsLong = numAsBigInteger.toLong\n     \
    \   if (numAsBigIntegerAsLong.isNaN) {\n            return numAsBigIntegerAsLong\n\
    \        }\n        val numAsLongAsLong = numAsLong.toLong\n        if (numAsLongAsLong.isNaN)\
    \ {\n            return numAsLongAsLong\n        }\n        val numAsIntAsLongAsLong\
    \ = numAsIntAsLong.", "        val num = value.toLong\n        if (num.isNaN)\
    \ {\n            return 0l\n        }\n        val numAsInt = num.toInt\n    \
    \    val numAsFloat = num.toFloat\n        if (numAsFloat.isNaN) {\n         \
    \   return numAsInt\n        }\n        val numAsDouble = num.toDouble\n     \
    \   if (numAsDouble.isNaN) {\n            return numAsInt\n        }\n       \
    \ val numAsBigInt = num.toBigInt\n        if (numAsBigInt.isNaN) {\n         \
    \   return numAsInt\n        }\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        if (numAsBigDecimal.isNaN) {\n            return numAsInt\n        }\n\
    \        val numAsBigDecimalInt = numAsBigDecimal.toBigInteger\n        if (numAsBigDecimalInt.isNaN)\
    \ {\n            return numAsInt\n        }\n        val numAsBigDecimalLong =\
    \ numAsBigDecimal.toBigInteger\n        if (numAsBigDecimalLong.isNaN) {\n   \
    \         return numAsInt\n        }\n        val numAsBigDecimalIntAsLong = numAsBigDecimalInt.longValue\n\
    \        if (numAsBigDecimalIntAsLong.isNaN) {\n            return numAsInt\n\
    \        }\n        val numAsBigDecimalLongAsLong = numAsBigDecimalLong.longValue\n\
    \        if (numAsBigDecimalLongAsLong.isNaN) {\n            return numAsInt\n\
    \        }\n        val numAsBigDecimalIntAsInt = numAsBigDecimalInt.intValue\n\
    \        if (numAsBigDecimalIntAsInt.isNaN) {\n            return numAsInt\n \
    \       }\n        val numAsBigDecimalLongAsInt = numAsBigDecimalLong.intValue\n\
    \        if (numAsBigDecimalLongAsInt.isNaN) {\n            return numAsInt\n\
    \        }\n        val numAsBigDecimalIntAsDouble = numAsBigDecimalInt.doubleValue\n\
    \        if (numAsBigDecimalIntAsDouble.isNaN) {\n            return numAsInt\n\
    \        }\n        val numAs", "        val num = value.toLong\n        if (num.isNaN)\
    \ {\n            return 0l\n        }\n        val numAsInt = num.toInt\n    \
    \    if (numAsInt.isNaN) {\n            return numAsInt\n        }\n        val\
    \ numAsFloat = num.toFloat\n        if (numAsFloat.isNaN) {\n            return\
    \ numAsFloat\n        }\n        val numAsDouble = num.toDouble\n        if (numAsDouble.isNaN)\
    \ {\n            return numAsDouble\n        }\n        val numAsBigInt = num.toBigInt\n\
    \        if (numAsBigInt.isNaN) {\n            return numAsBigInt\n        }\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        if (numAsBigDecimal.isNaN)\
    \ {\n            return numAsBigDecimal\n        }\n        val numAsBigDecimalToBigInt\
    \ = numAsBigDecimal.toBigInt\n        if (numAsBigDecimalToBigInt.isNaN) {\n \
    \           return numAsBigDecimalToBigInt\n        }\n        val numAsBigDecimalToBigDecimal\
    \ = numAsBigDecimal.toBigDecimal\n        if (numAsBigDecimalToBigDecimal.isNaN)\
    \ {\n            return numAsBigDecimalToBigDecimal\n        }\n        val numAsBigDecimalToInt\
    \ = numAsBigDecimal.toInt\n        if (numAsBigDecimalToInt.isNaN) {\n       \
    \     return numAsBigDecimalToInt\n        }\n        val numAsBigDecimalToLong\
    \ = numAsBigDecimal.toLong\n        if (numAsBigDecimalToLong.isNaN) {\n     \
    \       return numAsBigDecimalToLong\n        }\n        val numAsBigDecimalToFloat\
    \ = numAsBigDecimal.toFloat\n        if (numAsBigDecimalToFloat.isNaN) {\n   \
    \         return numAsBigDecimalToFloat\n        }\n        val numAsBigDecimalToDouble\
    \ = numAsBigDecimal.toDouble\n        if (numAsBigDecimalToDouble.isNaN) {\n \
    \           return numAsBigDecimalToDouble\n        }\n        ", "        val\
    \ num = value.toLong\n        if (num.isNaN) {\n            return 0l\n      \
    \  }\n        val numAsInt = num.toInt\n        val numAsFloat = num.toFloat\n\
    \        val numAsDouble = num.toDouble\n        val numAsBigInt = num.toBigInt\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsChar = num.toChar\n\
    \        val numAsByte = num.toByte\n        val numAsShort = num.toShort\n  \
    \      val numAsLong = num.toLong\n        val numAsFloat32 = num.toFloat32\n\
    \        val numAsFloat64 = num.toFloat64\n        val numAsFloat128 = num.toFloat128\n\
    \        val numAsInt32 = num.toInt32\n        val numAsInt64 = num.toInt64\n\
    \        val numAsInt128 = num.toInt128\n        val numAsInt256 = num.toInt256\n\
    \        val numAsInt512 = num.toInt512\n        val numAsInt1024 = num.toInt1024\n\
    \        val numAsInt2048 = num.toInt2048\n        val numAsInt4096 = num.toInt4096\n\
    \        val numAsInt8192 = num.toInt8192\n        val numAsInt16384 = num.toInt16384\n\
    \        val numAsInt32768 = num.toInt32768\n        val numAsInt65536 = num.toInt65536\n\
    \        val numAsInt131072 = num.toInt131072\n        val numAsInt262144 = num.toInt262144\n\
    \        val numAsInt524288 = num.toInt524288\n        val numAsInt1048576 = num.toInt1048576\n\
    \        val numAsInt2097152 = num.toInt2097152\n        val numAsInt4194304 =\
    \ num.toInt4194304\n        val numAsInt8388608 = num.toInt8388608\n        val\
    \ numAsInt16777216 = num.toInt16777216\n        val numAsInt33554432 = num.toInt33554432\n\
    \        val numAsInt67108864 = num.toInt67108864\n", "        val num = value.toLong\n\
    \        if (num.isNaN) {\n            return 0l\n        }\n        val numAsInt\
    \ = num.toInt\n        val numAsFloat = num.toFloat\n        val numAsDouble =\
    \ num.toDouble\n        val numAsBigInt = num.toBigInt\n        val numAsBigDecimal\
    \ = num.toBigDecimal\n        val numAsChar = num.toChar\n        val numAsShort\
    \ = num.toShort\n        val numAsByte = num.toByte\n        val numAsFloat32\
    \ = num.toFloat32\n        val numAsFloat64 = num.toFloat64\n        val numAsFloat128\
    \ = num.toFloat128\n        val numAsInt32 = num.toInt32\n        val numAsInt64\
    \ = num.toInt64\n        val numAsInt128 = num.toInt128\n        val numAsLong\
    \ = num.toLong\n        val numAsBigInt128 = num.toBigInt128\n        val numAsBigInt256\
    \ = num.toBigInt256\n        val numAsBigDecimal128 = num.toBigDecimal128\n  \
    \      val numAsBigDecimal256 = num.toBigDecimal256\n        val numAsChar256\
    \ = num.toChar256\n        val numAsShort256 = num.toShort256\n        val numAsByte256\
    \ = num.toByte256\n        val numAsFloat32256 = num.toFloat32256\n        val\
    \ numAsFloat64256 = num.toFloat64256\n        val numAsFloat128256 = num.toFloat128256\n\
    \        val numAsInt32256 = num.toInt32256\n        val numAsInt64256 = num.toInt64256\n\
    \        val numAsInt128256 = num.toInt128256\n        val numAsLong256 = num.toLong256\n\
    \        val numAsBigInt128256 = num.toBigInt128256\n        val numAsBigInt256256\
    \ = num.toBigInt256256\n        val numAsBigDecimal128256 = num.toBigDecimal128256\n\
    \        val numAsBigDecimal256256 = num.toBigDecimal256256\n        val numAsChar512\
    \ = num.toChar512\n        val numAsShort512 = num.to", "        val num = value.toLong\n\
    \        if (num.isNaN) {\n            return 0l\n        }\n        val abs =\
    \ num.abs\n        if (abs.isNaN) {\n            return 0l\n        }\n      \
    \  val absInt = abs.toInt\n        if (absInt.isNaN) {\n            return 0l\n\
    \        }\n        val absIntPlusOne = absInt + 1\n        if (absIntPlusOne.isNaN)\
    \ {\n            return 0l\n        }\n        val absIntMinusOne = absInt - 1\n\
    \        if (absIntMinusOne.isNaN) {\n            return 0l\n        }\n     \
    \   if (absInt.equals(absIntPlusOne)) {\n            return absIntPlusOne\n  \
    \      } else if (absInt.equals(absIntMinusOne)) {\n            return absIntMinusOne\n\
    \        } else {\n            return num\n        }", "        val num = value.toLong\n\
    \        if (num.isNaN) {\n            throw new NumberFormatException(\"NaN\"\
    )\n        }\n        val numAsInt = num.toInt\n        if (numAsInt.isNaN) {\n\
    \            throw new NumberFormatException(\"NaN\")\n        }\n        val\
    \ numAsFloat = num.toFloat\n        if (numAsFloat.isNaN) {\n            throw\
    \ new NumberFormatException(\"NaN\")\n        }\n        val numAsDouble = num.toDouble\n\
    \        if (numAsDouble.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsBigDecimal = num.toBigDecimal\n        if\
    \ (numAsBigDecimal.isNaN) {\n            throw new NumberFormatException(\"NaN\"\
    )\n        }\n        val numAsBigInteger = num.toBigInteger\n        if (numAsBigInteger.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsLong = num.toLong\n        if (numAsLong.isNaN) {\n            throw\
    \ new NumberFormatException(\"NaN\")\n        }\n        val numAsIntAsLong =\
    \ numAsInt.toLong\n        if (numAsIntAsLong.isNaN) {\n            throw new\
    \ NumberFormatException(\"NaN\")\n        }\n        val numAsFloatAsLong = numAsFloat.toLong\n\
    \        if (numAsFloatAsLong.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsDoubleAsLong = numAsDouble.toLong\n      \
    \  if (numAsDoubleAsLong.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsBigDecimalAsLong = numAsBigDecimal.toLong\n\
    \        if (numAsBigDecimalAsLong.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsBigIntegerAsLong = numAsBigInteger.toLong\n\
    \        if (numAsBigIntegerAsLong.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsLongAsInt = numAsLong.", "        val num\
    \ = value.toDouble\n        val abs = Math.abs(num)\n        val intPart = num.intPart\n\
    \        val fracPart = num.fracPart\n        val intPartAbs = intPart.abs\n \
    \       val fracPartAbs = fracPart.abs\n        val intPartSign = intPart.sign\n\
    \        val fracPartSign = fracPart.sign\n        val intPartAbsSign = intPartAbs.sign\n\
    \        val fracPartAbsSign = fracPartAbs.sign\n        val intPartAbsAbs = intPartAbs.abs\n\
    \        val fracPartAbsAbs = fracPartAbs.abs\n        val intPartAbsAbsSign =\
    \ intPartAbsAbs.sign\n        val fracPartAbsAbsSign = fracPartAbsAbs.sign\n \
    \       val intPartAbsAbsAbs = intPartAbsAbs.abs\n        val fracPartAbsAbsAbs\
    \ = fracPartAbsAbs.abs\n        val intPartAbsAbsAbsSign = intPartAbsAbsAbs.sign\n\
    \        val fracPartAbsAbsAbsSign = fracPartAbsAbsAbs.sign\n        val intPartAbsAbsAbsAbs\
    \ = intPartAbsAbsAbs.abs\n        val fracPartAbsAbsAbsAbs = fracPartAbsAbsAbs.abs\n\
    \        val intPartAbsAbsAbsAbsSign = intPartAbsAbsAbsAbs.sign\n        val fracPartAbsAbsAbsAbsSign\
    \ = fracPartAbsAbsAbsAbs.sign\n        val intPartAbsAbsAbsAbsAbs = intPartAbsAbsAbsAbs.abs\n\
    \        val fracPartAbsAbsAbsAbsAbs = fracPartAbsAbsAbsAbs.abs\n        val intPartAbsAbsAbsAbsAbsSign\
    \ = intPartAbsAbsAbsAbsAbs.sign\n        val fracPartAbsAbsAbsAbsAbsSign = fracPartAbsAbsAbsAbsAbs.sign\n\
    \        val intPartAbsAbsAbsAbsAbsAbs = intPartAbsAbsAbsAbsAbs.abs\n        val\
    \ fracPartAbsAbsAbsAbsAbsAbs = fracPartAbsAbsAbsAbsAbs.abs\n        val intPartAbsAbsAbsAbsAbsAbsSign\
    \ = intPartAbsAbsAbsAbsAbsAbs.sign\n        val fracPartAbsAbsAbsAbsAbsAbsSign\
    \ = fracPartAbsAbsAbsAbsAbsAbs.sign\n        val intPartAbsAbsAbsAbsAbsAbsAbs\
    \ = intPartAbs", "        val num = value.toLong\n        if (num.isNaN) {\n \
    \           throw new NumberFormatException(\"NaN\")\n        }\n        val numAsInt\
    \ = num.toInt\n        if (numAsInt.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsFloat = num.toFloat\n        if (numAsFloat.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsDouble = num.toDouble\n        if (numAsDouble.isNaN) {\n         \
    \   throw new NumberFormatException(\"NaN\")\n        }\n        val numAsBigDecimal\
    \ = num.toBigDecimal\n        if (numAsBigDecimal.isNaN) {\n            throw\
    \ new NumberFormatException(\"NaN\")\n        }\n        val numAsBigInteger =\
    \ num.toBigInteger\n        if (numAsBigInteger.isNaN) {\n            throw new\
    \ NumberFormatException(\"NaN\")\n        }\n        val numAsShort = num.toShort\n\
    \        if (numAsShort.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsByte = num.toByte\n        if (numAsByte.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsLong = num.toLong\n        if (numAsLong.isNaN) {\n            throw\
    \ new NumberFormatException(\"NaN\")\n        }\n        val numAsInt128 = num.toInt128\n\
    \        if (numAsInt128.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsInt256 = num.toInt256\n        if (numAsInt256.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsInt512 = num.toInt512\n        if (numAsInt512.isNaN) {\n         \
    \   throw new NumberFormatException(\"NaN\")\n        }\n        val numAsInt1024\
    \ = num.toInt1024\n        if (numAsInt1024.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        ", "        val num = value.toLong\n        if (num.isNaN)\
    \ {\n            return 0l\n        }\n        val numAsInt = num.toInt\n    \
    \    val numAsFloat = num.toFloat\n        val numAsDouble = num.toDouble\n  \
    \      val numAsChar = num.toChar\n        val numAsByte = num.toByte\n      \
    \  val numAsShort = num.toShort\n        val numAsLong = num.toLong\n        val\
    \ numAsBigInt = num.toBigInt\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimalInt = num.toBigDecimalInt\n        val numAsBigDecimalLong\
    \ = num.toBigDecimalLong\n        val numAsBigDecimalShort = num.toBigDecimalShort\n\
    \        val numAsBigDecimalByte = num.toBigDecimalByte\n        val numAsBigDecimalChar\
    \ = num.toBigDecimalChar\n        val numAsBigDecimalFloat = num.toBigDecimalFloat\n\
    \        val numAsBigDecimalDouble = num.toBigDecimalDouble\n        val numAsBigDecimalString\
    \ = num.toBigDecimalString\n        val numAsBigDecimalStringInt = num.toBigDecimalStringInt\n\
    \        val numAsBigDecimalStringLong = num.toBigDecimalStringLong\n        val\
    \ numAsBigDecimalStringShort = num.toBigDecimalStringShort\n        val numAsBigDecimalStringByte\
    \ = num.toBigDecimalStringByte\n        val numAsBigDecimalStringChar = num.toBigDecimalStringChar\n\
    \        val numAsBigDecimalStringFloat = num.toBigDecimalStringFloat\n      \
    \  val numAsBigDecimalStringDouble = num.toBigDecimalStringDouble\n        val\
    \ numAsBigDecimalStringString = num.toBigDecimalStringString\n        val numAsBigDecimalStringStringInt\
    \ = num.toBigDecimalStringStringInt\n        val numAsBigDecimalStringStringLong\
    \ = num.toBigDecimalStringStringLong\n        val numAsBigDecimalStringStringShort\
    \ = num.toBigDecimalStringStringShort\n        val numAsBigDecimalStringStringByte\
    \ = num.toBigDecimalStringStringByte\n        val numAsBigDecimal", "        val\
    \ num = value.toLong\n        if (num < 0) {\n            val abs = Math.abs(num)\n\
    \            val nearest = abs.div(scala.math.BigInt(10)).floorDiv(scala.math.BigInt(10))\n\
    \            val diff = abs.subtract(nearest).div(scala.math.BigInt(10))\n   \
    \         if (diff.abs().compareTo(scala.math.BigInt(0)) < 0) {\n            \
    \    return nearest.subtract(scala.math.BigInt(1)).toLong\n            } else\
    \ {\n                return nearest.toLong\n            }\n        } else {\n\
    \            return num\n        }", "        val num = value.toLong\n       \
    \ if (num.isNaN) {\n            throw new RuntimeException(\"Invalid input: \"\
    \ + value)\n        }\n        val numAsInt = num.intValue\n        val numAsFloat\
    \ = num.floatValue\n        val numAsDouble = num.doubleValue\n        val numAsBigInt\
    \ = num.bigInt\n        val numAsBigDecimal = num.bigDecimal\n        val numAsBigDecimalUnscaled\
    \ = num.bigDecimalUnscaled\n        val numAsBigDecimalScale = num.bigDecimalScale\n\
    \        val numAsBigDecimalUnscaledAsDouble = num.bigDecimalUnscaledAsDouble\n\
    \        val numAsBigDecimalUnscaledAsFloat = num.bigDecimalUnscaledAsFloat\n\
    \        val numAsBigDecimalUnscaledAsInt = num.bigDecimalUnscaledAsInt\n    \
    \    val numAsBigDecimalUnscaledAsLong = num.bigDecimalUnscaledAsLong\n      \
    \  val numAsBigDecimalUnscaledAsShort = num.bigDecimalUnscaledAsShort\n      \
    \  val numAsBigDecimalUnscaledAsString = num.bigDecimalUnscaledAsString\n    \
    \    val numAsBigDecimalUnscaledAsBigInt = num.bigDecimalUnscaledAsBigInt\n  \
    \      val numAsBigDecimalUnscaledAsBigDecimal = num.bigDecimalUnscaledAsBigDecimal\n\
    \        val numAsBigDecimalUnscaledAsBigDecimalUnscaled = num.bigDecimalUnscaledAsBigDecimalUnscaled\n\
    \        val numAsBigDecimalUnscaledAsBigDecimalScale = num.bigDecimalUnscaledAsBigDecimalScale\n\
    \        val numAsBigDecimalUnscaledAsBigDecimalUnscaledAsDouble = num.bigDecimalUnscaledAsBigDecimalUnscaledAsDouble\n\
    \        val numAsBigDecimalUnscaledAsBigDecimalUnscaledAsFloat = num.bigDecimalUnscaledAsBigDecimalUnscaledAsFloat\n\
    \        val numAsBigDecimalUnscaledAsBigDecimalUnscaledAsInt = num.bigDecimalUnscaledAsBigDecimalUnscaledAsInt\n\
    \        val numAs", "        val num = value.toLong\n        if (num.isNaN) {\n\
    \            return 0l\n        }\n        val abs = num.abs\n        if (abs.isNaN)\
    \ {\n            return 0l\n        }\n        val abs_int = abs.toInt\n     \
    \   if (abs_int.isNaN) {\n            return 0l\n        }\n        val abs_long\
    \ = abs_int.toLong\n        if (abs_long.isNaN) {\n            return 0l\n   \
    \     }\n        val abs_float = abs_long.toFloat\n        if (abs_float.isNaN)\
    \ {\n            return 0l\n        }\n        val abs_double = abs_float.toDouble\n\
    \        if (abs_double.isNaN) {\n            return 0l\n        }\n        val\
    \ abs_big_int = abs_double.toBigInt\n        if (abs_big_int.isNaN) {\n      \
    \      return 0l\n        }\n        val abs_big_long = abs_big_int.toBigLong\n\
    \        if (abs_big_long.isNaN) {\n            return 0l\n        }\n       \
    \ val abs_big_float = abs_big_long.toBigFloat\n        if (abs_big_float.isNaN)\
    \ {\n            return 0l\n        }\n        val abs_big_double = abs_big_float.toBigDouble\n\
    \        if (abs_big_double.isNaN) {\n            return 0l\n        }\n     \
    \   val abs_big_big_int = abs_big_double.toBigInt\n        if (abs_big_big_int.isNaN)\
    \ {\n            return 0l\n        }\n        val abs_big_big_long = abs_big_big_int.toBigLong\n\
    \        if (abs_big_big_long.isNaN) {\n            return 0l\n        }\n   \
    \     val abs_big_big_float = abs_big_big_long.toBigFloat\n        if (abs_big_big_float.isNaN)\
    \ {\n            return 0l\n        }\n        val abs_big_big_double = abs_big_big_float.toBigDouble\n",
  "        val num = value.toLong\n        if (num.isNaN) {\n            return 0l\n\
    \        }\n        val numAsInt = num.toInt\n        if (numAsInt.isNaN) {\n\
    \            return numAsInt\n        }\n        val numAsFloat = num.toFloat\n\
    \        if (numAsFloat.isNaN) {\n            return numAsFloat\n        }\n \
    \       val numAsDouble = num.toDouble\n        if (numAsDouble.isNaN) {\n   \
    \         return numAsDouble\n        }\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        if (numAsBigDecimal.isNaN) {\n            return numAsBigDecimal\n  \
    \      }\n        val numAsBigInteger = num.toBigInteger\n        if (numAsBigInteger.isNaN)\
    \ {\n            return numAsBigInteger\n        }\n        val numAsLong = num.toLong\n\
    \        if (numAsLong.isNaN) {\n            return numAsLong\n        }\n   \
    \     val numAsIntAsLong = numAsInt.toLong\n        if (numAsIntAsLong.isNaN)\
    \ {\n            return numAsIntAsLong\n        }\n        val numAsFloatAsLong\
    \ = numAsFloat.toLong\n        if (numAsFloatAsLong.isNaN) {\n            return\
    \ numAsFloatAsLong\n        }\n        val numAsDoubleAsLong = numAsDouble.toLong\n\
    \        if (numAsDoubleAsLong.isNaN) {\n            return numAsDoubleAsLong\n\
    \        }\n        val numAsBigDecimalAsLong = numAsBigDecimal.toLong\n     \
    \   if (numAsBigDecimalAsLong.isNaN) {\n            return numAsBigDecimalAsLong\n\
    \        }\n        val numAsBigIntegerAsLong = numAsBigInteger.toLong\n     \
    \   if (numAsBigIntegerAsLong.isNaN) {\n            return numAsBigIntegerAsLong\n\
    \        }\n        val numAsLongAsLong = numAsLong.toLong\n        if (numAsLongAsLong.isNaN)\
    \ {\n            return numAsLongAsLong\n        }\n        val numAsIntAsLongAsLong\
    \ = numAsIntAsLong.", "        val num = value.toLong\n        if (num.isNaN)\
    \ {\n            return 0l\n        }\n        val numAsInt = num.toInt\n    \
    \    val numAsDouble = num.toDouble\n        val numAsFloat = num.toFloat\n  \
    \      val numAsShort = num.toShort\n        val numAsByte = num.toByte\n    \
    \    val numAsChar = num.toChar\n        val numAsBigInt = num.toBigInt\n    \
    \    val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n",
  "        val num = value.toLong\n        if (num.isNaN) {\n            throw new\
    \ NumberFormatException(\"NaN\")\n        }\n        val numAsInt = num.toInt\n\
    \        val numAsFloat = num.toFloat\n        val numAsDouble = num.toDouble\n\
    \        val numAsBigInt = num.toBigInt\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimalWithScale = num.toBigDecimal(2)\n        val numAsBigDecimalWithScaleAndPrecision\
    \ = num.toBigDecimal(2, 2)\n        val numAsBigDecimalWithPrecision = num.toBigDecimal(2)\n\
    \        val numAsBigDecimalWithPrecisionAndScale = num.toBigDecimal(2, 2)\n \
    \       val numAsBigDecimalWithScaleAndPrecisionAndRoundingMode = num.toBigDecimal(2,\
    \ 2, RoundingMode.HALF_UP)\n        val numAsBigDecimalWithPrecisionAndRoundingMode\
    \ = num.toBigDecimal(2, RoundingMode.HALF_UP)\n        val numAsBigDecimalWithScaleAndRoundingMode\
    \ = num.toBigDecimal(2, RoundingMode.HALF_UP)\n        val numAsBigDecimalWithPrecisionAndScaleAndRoundingMode\
    \ = num.toBigDecimal(2, 2, RoundingMode.HALF_UP)\n        val numAsBigDecimalWithPrecisionAndScaleAndRoundingModeAndOption\
    \ = num.toBigDecimal(2, 2, RoundingMode.HALF_UP, Option.empty)\n        val numAsBigDecimalWithPrecisionAndScaleAndRoundingModeAndOption\
    \ = num.toBigDecimal(2, 2, RoundingMode.HALF_UP, Option.empty)\n        val numAsBigDecimalWithPrecisionAndScaleAndRoundingModeAndOption\
    \ = num.toBigDecimal(2, 2, RoundingMode.HALF_UP, Option.empty)\n        val numAsBigDecimalWithPrecisionAndScaleAndRoundingModeAndOption\
    \ = num.toBigDecimal(2, 2, RoundingMode.HALF_UP, Option.empty)", "        val\
    \ num = value.toLong\n        if (num < 0) {\n            return -num\n      \
    \  } else {\n            return num\n        }", "        val num = value.toLong\n\
    \        if (num.isNaN) {\n            return 0l\n        }\n        val abs =\
    \ num.abs\n        val rounded = abs.round(10)\n        if (abs.equals(rounded))\
    \ {\n            return rounded.toLong\n        } else {\n            return abs.toLong\n\
    \        }", "        val num = value.toLong\n        if (num.isNaN) {\n     \
    \       return 0l\n        }\n        val numAsInt = num.toInt\n        val numAsFloat\
    \ = num.toFloat\n        val numAsDouble = num.toDouble\n        val numAsBigInt\
    \ = num.toBigInt\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimalWithScale = num.toBigDecimal(2)\n        val numAsBigDecimalWithScale2\
    \ = num.toBigDecimal(2, 2)\n        val numAsBigDecimalWithScale3 = num.toBigDecimal(2,\
    \ 2, 2)\n        val numAsBigDecimalWithScale4 = num.toBigDecimal(2, 2, 2, 2)\n\
    \        val numAsBigDecimalWithScale5 = num.toBigDecimal(2, 2, 2, 2, 2)\n   \
    \     val numAsBigDecimalWithScale6 = num.toBigDecimal(2, 2, 2, 2, 2, 2)\n   \
    \     val numAsBigDecimalWithScale7 = num.toBigDecimal(2, 2, 2, 2, 2, 2, 2)\n\
    \        val numAsBigDecimalWithScale8 = num.toBigDecimal(2, 2, 2, 2, 2, 2, 2,\
    \ 2)\n        val numAsBigDecimalWithScale9 = num.toBigDecimal(2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2)\n        val numAsBigDecimalWithScale10 = num.toBigDecimal(2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2)\n        val numAsBigDecimalWithScale11 = num.toBigDecimal(2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2)\n        val numAsBigDecimalWithScale12 = num.toBigDecimal(2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2)\n        val numAsBigDecimalWithScale13 = num.toBigDecimal(2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,", "        val num = value.toLong\n        if\
    \ (num < 0) {\n            val abs = Math.abs(num)\n            val intPart =\
    \ abs.intPart\n            val fracPart = abs.fracPart\n            val frac =\
    \ fracPart.toDouble\n            val rounded = intPart + frac\n            val\
    \ diff = abs.subtract(rounded)\n            if (diff.compareTo(frac) < 0) {\n\
    \                return rounded\n            } else {\n                return\
    \ rounded.add(1)\n            }\n        } else {\n            val abs = Math.abs(num)\n\
    \            val intPart = abs.intPart\n            val fracPart = abs.fracPart\n\
    \            val frac = fracPart.toDouble\n            val rounded = intPart +\
    \ frac\n            val diff = abs.subtract(rounded)\n            if (diff.compareTo(frac)\
    \ < 0) {\n                return rounded\n            } else {\n             \
    \   return rounded.subtract(1)\n            }\n        }", "        val num =\
    \ value.toLong\n        if (num < 0) {\n            val abs = Math.abs(num)\n\
    \            val floor = abs.floorDiv(1)\n            val ceil = abs.ceilDiv(1)\n\
    \            val diff = abs.subtract(floor).abs\n            if (diff.compareTo(ceil)\
    \ < 0)\n                return num.subtract(floor)\n            else\n       \
    \         return num.subtract(ceil)\n        } else {\n            val abs = Math.abs(num)\n\
    \            val floor = abs.floorDiv(1)\n            val ceil = abs.ceilDiv(1)\n\
    \            val diff = abs.subtract(floor).abs\n            if (diff.compareTo(ceil)\
    \ < 0)\n                return num.add(floor)\n            else\n            \
    \    return num.add(ceil)\n        }", "        val num = value.toLong\n     \
    \   if (num.isNaN) {\n            return 0l\n        }\n        val abs = num.abs\n\
    \        val floor = num.floor\n        val ceil = num.ceil\n        val diff\
    \ = abs.subtract(floor).abs\n        if (diff.isNaN) {\n            return floor\n\
    \        }\n        val half = diff.div(2).toInt\n        if (half.isNaN) {\n\
    \            return floor\n        }\n        val diff2 = abs.subtract(ceil).abs\n\
    \        if (diff2.isNaN) {\n            return ceil\n        }\n        val half2\
    \ = diff2.div(2).toInt\n        if (half2.isNaN) {\n            return ceil\n\
    \        }\n        if (half2.toInt > half.toInt) {\n            return floor\n\
    \        } else {\n            return ceil\n        }", "        val num = value.toLong\n\
    \        if (num < 0) {\n            return -num\n        } else {\n         \
    \   return num\n        }", "        val num = value.toLong\n        if (num <\
    \ 0) {\n            val abs = Math.abs(num)\n            val max = abs.max\n \
    \           val min = abs.min\n            val diff = max - min\n            val\
    \ diffAbs = diff.abs\n            val diffAbsMin = diffAbs.min\n            val\
    \ diffAbsMax = diffAbs.max\n            val diffAbsMinMax = diffAbsMin.max\n \
    \           val diffAbsMaxMin = diffAbsMax.min\n            val diffAbsMaxMinMax\
    \ = diffAbsMaxMin.max\n            val diffAbsMaxMinMaxMin = diffAbsMaxMinMax.min\n\
    \            val diffAbsMaxMinMaxMinMax = diffAbsMaxMinMaxMin.max\n          \
    \  val diffAbsMaxMinMaxMinMaxMin = diffAbsMaxMinMaxMinMax.min\n            val\
    \ diffAbsMaxMinMaxMinMaxMinMax = diffAbsMaxMinMaxMinMaxMin.max\n            val\
    \ diffAbsMaxMinMaxMinMaxMinMaxMin = diffAbsMaxMinMaxMinMaxMinMax.min\n       \
    \     val diffAbsMaxMinMaxMinMaxMinMaxMinMax = diffAbsMaxMinMaxMinMaxMinMaxMin.max\n\
    \            val diffAbsMaxMinMaxMinMaxMinMaxMinMaxMin = diffAbsMaxMinMaxMinMaxMinMaxMinMax.min\n\
    \            val diffAbsMaxMinMaxMinMaxMinMaxMinMaxMinMax = diffAbsMaxMinMaxMinMaxMinMaxMinMaxMin.max\n\
    \            val diffAbsMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = diffAbsMaxMinMaxMinMaxMinMaxMinMaxMinMax.min\n\
    \            val diffAbsMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = diffAbsMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin.max\n\
    \            val diffAbsMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = diffAbsMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax.min\n\
    \            val diffAbsMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = diffAbsMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin.max\n\
    \            val diffAbsMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = diffAbsMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin.min\n\
    \            val diffAbsMaxMinMaxMinMaxMinMax", "        val num = value.toLong\n\
    \        if (num.isNaN) {\n            return num\n        }\n        val numAsInt\
    \ = num.toInt\n        if (numAsInt.isNaN) {\n            return numAsInt\n  \
    \      }\n        val numAsFloat = num.toFloat\n        if (numAsFloat.isNaN)\
    \ {\n            return numAsFloat\n        }\n        val numAsDouble = num.toDouble\n\
    \        if (numAsDouble.isNaN) {\n            return numAsDouble\n        }\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        if (numAsBigDecimal.isNaN)\
    \ {\n            return numAsBigDecimal\n        }\n        val numAsBigInteger\
    \ = num.toBigInteger\n        if (numAsBigInteger.isNaN) {\n            return\
    \ numAsBigInteger\n        }\n        val numAsLong = num.toLong\n        if (numAsLong.isNaN)\
    \ {\n            return numAsLong\n        }\n        val numAsIntAsLong = numAsInt.toLong\n\
    \        if (numAsIntAsLong.isNaN) {\n            return numAsIntAsLong\n    \
    \    }\n        val numAsFloatAsLong = numAsFloat.toLong\n        if (numAsFloatAsLong.isNaN)\
    \ {\n            return numAsFloatAsLong\n        }\n        val numAsDoubleAsLong\
    \ = numAsDouble.toLong\n        if (numAsDoubleAsLong.isNaN) {\n            return\
    \ numAsDoubleAsLong\n        }\n        val numAsBigDecimalAsLong = numAsBigDecimal.toLong\n\
    \        if (numAsBigDecimalAsLong.isNaN) {\n            return numAsBigDecimalAsLong\n\
    \        }\n        val numAsBigIntegerAsLong = numAsBigInteger.toLong\n     \
    \   if (numAsBigIntegerAsLong.isNaN) {\n            return numAsBigIntegerAsLong\n\
    \        }\n        val numAsLongAsLong = numAsLong.toLong\n        if (numAsLongAsLong.isNaN)\
    \ {\n            return numAsLongAsLong\n        }\n        val numAsIntAsLongAsLong\
    \ = numAsIntAsLong.to", "        val num = value.toLong\n        if (num.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsInt = num.toInt\n        if (numAsInt.isNaN) {\n            throw new\
    \ NumberFormatException(\"NaN\")\n        }\n        val numAsFloat = num.toFloat\n\
    \        if (numAsFloat.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsDouble = num.toDouble\n        if (numAsDouble.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsBigDecimal = num.toBigDecimal\n        if (numAsBigDecimal.isNaN) {\n\
    \            throw new NumberFormatException(\"NaN\")\n        }\n        val\
    \ numAsBigInteger = num.toBigInteger\n        if (numAsBigInteger.isNaN) {\n \
    \           throw new NumberFormatException(\"NaN\")\n        }\n        val numAsLong\
    \ = num.toLong\n        if (numAsLong.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsIntAsLong = numAsInt.toLong\n        if (numAsIntAsLong.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsFloatAsLong = numAsFloat.toLong\n        if (numAsFloatAsLong.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsDoubleAsLong = numAsDouble.toLong\n        if (numAsDoubleAsLong.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsBigDecimalAsLong = numAsBigDecimal.toLong\n        if (numAsBigDecimalAsLong.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsBigIntegerAsLong = numAsBigInteger.toLong\n        if (numAsBigIntegerAsLong.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsLongAsInt = numAsLong.", "        val num = value.toLong\n        val\
    \ abs = Math.abs(num)\n        val intPart = num / abs\n        val fracPart =\
    \ num % abs\n        val rounded = intPart + (fracPart > 0.5 ? 1 : 0)\n      \
    \  return rounded", "        val num = value.toLong\n        if (num < 0) {\n\
    \            return -num\n        } else {\n            return num\n        }",
  "        val num = value.toLong\n        if (num.isNaN) {\n            throw new\
    \ NumberFormatException(\"NaN\")\n        }\n        val numAsInt = num.toInt\n\
    \        if (numAsInt.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsFloat = num.toFloat\n        if (numAsFloat.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsDouble = num.toDouble\n        if (numAsDouble.isNaN) {\n         \
    \   throw new NumberFormatException(\"NaN\")\n        }\n        val numAsBigDecimal\
    \ = num.toBigDecimal\n        if (numAsBigDecimal.isNaN) {\n            throw\
    \ new NumberFormatException(\"NaN\")\n        }\n        val numAsBigInteger =\
    \ num.toBigInteger\n        if (numAsBigInteger.isNaN) {\n            throw new\
    \ NumberFormatException(\"NaN\")\n        }\n        val numAsLong = num.toLong\n\
    \        if (numAsLong.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsShort = num.toShort\n        if (numAsShort.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsByte = num.toByte\n        if (numAsByte.isNaN) {\n            throw\
    \ new NumberFormatException(\"NaN\")\n        }\n        val numAsFloatWrapper\
    \ = num.toFloatWrapper\n        if (numAsFloatWrapper.isNaN) {\n            throw\
    \ new NumberFormatException(\"NaN\")\n        }\n        val numAsDoubleWrapper\
    \ = num.toDoubleWrapper\n        if (numAsDoubleWrapper.isNaN) {\n           \
    \ throw new NumberFormatException(\"NaN\")\n        }\n        val numAsBigDecimalWrapper\
    \ = num.toBigDecimalWrapper\n        if (numAsBigDecimalWrapper.isNaN) {\n   \
    \         throw new NumberFormatException(\"NaN\")\n        }\n        val numAsBigIntegerWrapper\
    \ = num.toBigIntegerWrapper\n        if (numAsBigIntegerWrapper.", "        val\
    \ num = value.toLong\n        if (num.isNaN) {\n            return 0l\n      \
    \  }\n        val numAsInt = num.toInt\n        val numAsFloat = num.toFloat\n\
    \        val numAsDouble = num.toDouble\n        val numAsBigInt = num.toBigInt\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimalWithScale\
    \ = num.toBigDecimal(2)\n        val numAsBigDecimalWithScale2 = num.toBigDecimal(2,\
    \ 2)\n        val numAsBigDecimalWithScale3 = num.toBigDecimal(2, 2, 2)\n    \
    \    val numAsBigDecimalWithScale4 = num.toBigDecimal(2, 2, 2, 2)\n        val\
    \ numAsBigDecimalWithScale5 = num.toBigDecimal(2, 2, 2, 2, 2)\n        val numAsBigDecimalWithScale6\
    \ = num.toBigDecimal(2, 2, 2, 2, 2, 2)\n        val numAsBigDecimalWithScale7\
    \ = num.toBigDecimal(2, 2, 2, 2, 2, 2, 2)\n        val numAsBigDecimalWithScale8\
    \ = num.toBigDecimal(2, 2, 2, 2, 2, 2, 2, 2)\n        val numAsBigDecimalWithScale9\
    \ = num.toBigDecimal(2, 2, 2, 2, 2, 2, 2, 2, 2)\n        val numAsBigDecimalWithScale10\
    \ = num.toBigDecimal(2, 2, 2, 2, 2, 2, 2, 2, 2, 2)\n        val numAsBigDecimalWithScale11\
    \ = num.toBigDecimal(2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2)\n        val numAsBigDecimalWithScale12\
    \ = num.toBigDecimal(2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2)\n        val numAsBigDecimalWithScale13\
    \ = num.toBigDecimal(2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,", "        val num = value.toLong\n\
    \        if (num.isNaN) {\n            return 0l\n        }\n        val abs =\
    \ num.abs\n        if (abs.isNaN) {\n            return 0l\n        }\n      \
    \  val absInt = abs.toInt\n        if (absInt.isNaN) {\n            return 0l\n\
    \        }\n        val absIntPlusOne = absInt + 1\n        if (absIntPlusOne.isNaN)\
    \ {\n            return 0l\n        }\n        val absIntMinusOne = absInt - 1\n\
    \        if (absIntMinusOne.isNaN) {\n            return 0l\n        }\n     \
    \   val absIntPlusOneHalf = absIntPlusOne / 2\n        if (absIntPlusOneHalf.isNaN)\
    \ {\n            return 0l\n        }\n        val absIntMinusOneHalf = absIntMinusOne\
    \ / 2\n        if (absIntMinusOneHalf.isNaN) {\n            return 0l\n      \
    \  }\n        if (num.compareTo(absIntPlusOneHalf) < 0) {\n            return\
    \ absIntMinusOneHalf\n        } else {\n            return absIntPlusOneHalf\n\
    \        }", "        val num = value.toLong\n        if (num < 0) {\n       \
    \     val abs = Math.abs(num)\n            val max = Math.max(abs, 1)\n      \
    \      val min = Math.min(abs, 1)\n            val diff = max - min\n        \
    \    val diff2 = diff / 2\n            val diff3 = diff2 / 2\n            val\
    \ diff4 = diff3 / 2\n            val diff5 = diff4 / 2\n            val diff6\
    \ = diff5 / 2\n            val diff7 = diff6 / 2\n            val diff8 = diff7\
    \ / 2\n            val diff9 = diff8 / 2\n            val diff10 = diff9 / 2\n\
    \            val diff11 = diff10 / 2\n            val diff12 = diff11 / 2\n  \
    \          val diff13 = diff12 / 2\n            val diff14 = diff13 / 2\n    \
    \        val diff15 = diff14 / 2\n            val diff16 = diff15 / 2\n      \
    \      val diff17 = diff16 / 2\n            val diff18 = diff17 / 2\n        \
    \    val diff19 = diff18 / 2\n            val diff20 = diff19 / 2\n          \
    \  val diff21 = diff20 / 2\n            val diff22 = diff21 / 2\n            val\
    \ diff23 = diff22 / 2\n            val diff24 = diff23 / 2\n            val diff25\
    \ = diff24 / 2\n            val diff26 = diff25 / 2\n            val diff27 =\
    \ diff26 / 2\n            val diff28 = diff27 / 2\n            val diff29 = diff28\
    \ / 2\n            val diff30 = diff29 / 2\n            val diff31 = diff30 /\
    \ 2\n            val diff32 = diff31 / 2\n            val diff33 = diff32 / 2\n\
    \            val diff34 = diff33 / 2\n            val diff35 = diff34 / 2\n  \
    \          val diff36 = diff35 / 2\n            val diff37 = diff36 / 2\n    \
    \        val diff38 = diff37 / 2\n            val diff39 = diff38 / 2\n      \
    \      val diff40 = diff39 / 2\n            val diff41 = diff40 / 2\n        \
    \    val diff42 = diff41 / 2\n            val diff43 = diff42 / 2\n          \
    \  val diff44 = diff43 / 2\n            val diff45 = diff44 / 2\n            val\
    \ diff46 = diff45 / 2\n", "        val num = value.toLong\n        if (num < 0)\
    \ {\n            return -num\n        } else {\n            return num\n     \
    \   }", "        val num = value.toLong\n        if (num.isNaN) {\n          \
    \  return 0l\n        }\n        val numAsInt = num.toInt\n        if (numAsInt.isNaN)\
    \ {\n            return num\n        }\n        val numAsFloat = num.toFloat\n\
    \        if (numAsFloat.isNaN) {\n            return num\n        }\n        val\
    \ numAsDouble = num.toDouble\n        if (numAsDouble.isNaN) {\n            return\
    \ num\n        }\n        val numAsBigDecimal = num.toBigDecimal\n        if (numAsBigDecimal.isNaN)\
    \ {\n            return num\n        }\n        val numAsBigInteger = num.toBigInteger\n\
    \        if (numAsBigInteger.isNaN) {\n            return num\n        }\n   \
    \     val numAsBigDecimalAsBigInteger = num.toBigDecimal.toBigInteger\n      \
    \  if (numAsBigDecimalAsBigInteger.isNaN) {\n            return num\n        }\n\
    \        val numAsBigIntegerAsBigDecimal = num.toBigInteger.toBigDecimal\n   \
    \     if (numAsBigIntegerAsBigDecimal.isNaN) {\n            return num\n     \
    \   }\n        val numAsBigIntegerAsBigInteger = num.toBigInteger.toBigInteger\n\
    \        if (numAsBigIntegerAsBigInteger.isNaN) {\n            return num\n  \
    \      }\n        val numAsBigIntegerAsBigIntegerAsBigDecimal = num.toBigInteger.toBigInteger.toBigDecimal\n\
    \        if (numAsBigIntegerAsBigIntegerAsBigDecimal.isNaN) {\n            return\
    \ num\n        }\n        val numAsBigIntegerAsBigIntegerAsBigInteger = num.toBigInteger.toBigInteger.toBigInteger\n\
    \        if (numAsBigIntegerAsBigIntegerAsBigInteger.isNaN) {\n            return\
    \ num\n        }\n        val numAsBigIntegerAsBigIntegerAsBigIntegerAsBigDecimal\
    \ = num.toBigInteger.toBigInteger.toBigInteger.toBigDecimal\n        if (numAsBigIntegerAsBigIntegerAsBigIntegerAsBigDecimal.isNaN)\
    \ {\n            return num\n        }\n        val numAs", "        val num =\
    \ value.toLong\n        if (num.isNaN) {\n            return 0l\n        }\n \
    \       val abs = num.abs\n        if (abs.isNaN) {\n            return 0l\n \
    \       }\n        val absInt = abs.toInt\n        if (absInt.isNaN) {\n     \
    \       return 0l\n        }\n        val absIntPlusOne = absInt + 1\n       \
    \ if (absIntPlusOne.isNaN) {\n            return 0l\n        }\n        val absIntMinusOne\
    \ = absInt - 1\n        if (absIntMinusOne.isNaN) {\n            return 0l\n \
    \       }\n        val absIntPlusOneHalf = absIntPlusOne / 2\n        if (absIntPlusOneHalf.isNaN)\
    \ {\n            return 0l\n        }\n        val absIntMinusOneHalf = absIntMinusOne\
    \ / 2\n        if (absIntMinusOneHalf.isNaN) {\n            return 0l\n      \
    \  }\n        val absIntPlusOneHalfInt = absIntPlusOneHalf.toInt\n        if (absIntPlusOneHalfInt.isNaN)\
    \ {\n            return 0l\n        }\n        val absIntMinusOneHalfInt = absIntMinusOneHalf.toInt\n\
    \        if (absIntMinusOneHalfInt.isNaN) {\n            return 0l\n        }\n\
    \        val absIntPlusOneHalfIntPlusOne = absIntPlusOneHalfInt + 1\n        if\
    \ (absIntPlusOneHalfIntPlusOne.isNaN) {\n            return 0l\n        }\n  \
    \      val absIntMinusOneHalfIntMinusOne = absIntMinusOneHalfInt - 1\n       \
    \ if (absIntMinusOneHalfIntMinusOne.isNaN) {\n            return 0l\n        }\n\
    \        val absIntPlusOneHalfIntPlusOneHalf = absIntPlusOneHalfInt + 1 / 2\n\
    \        if (absIntPlusOneHalfIntPlusOneHalf.isNaN) {\n            return 0l\n\
    \        }\n        val absIntMinusOneHalfIntMinusOneHalf = absIntMinusOneHalfInt\
    \ - 1 / 2\n        if (absIntMinusOneHalfIntMinusOneHalf.isNaN", "        val\
    \ num = value.toLong\n        if (num < 0) {\n            return -num\n      \
    \  } else {\n            return num\n        }", "        val num = value.toLong\n\
    \        if (num.isNaN) {\n            throw new IllegalArgumentException(\"Invalid\
    \ number: \" + value)\n        }\n        val numAsInt = num.toInt\n        val\
    \ numAsFloat = num.toFloat\n        val numAsDouble = num.toDouble\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigInteger = num.toBigInteger\n\
    \        val numAsByte = num.toByte\n        val numAsShort = num.toShort\n  \
    \      val numAsInteger = num.toInt\n        val numAsLong = num.toLong\n    \
    \    val numAsFloatAsDouble = num.toFloat.toDouble\n        val numAsFloatAsBigDecimal\
    \ = num.toFloat.toBigDecimal\n        val numAsFloatAsBigInteger = num.toFloat.toBigInteger\n\
    \        val numAsFloatAsByte = num.toFloat.toByte\n        val numAsFloatAsShort\
    \ = num.toFloat.toShort\n        val numAsFloatAsInteger = num.toFloat.toInt\n\
    \        val numAsFloatAsLong = num.toFloat.toLong\n        val numAsDoubleAsBigDecimal\
    \ = num.toDouble.toBigDecimal\n        val numAsDoubleAsBigInteger = num.toDouble.toBigInteger\n\
    \        val numAsDoubleAsByte = num.toDouble.toByte\n        val numAsDoubleAsShort\
    \ = num.toDouble.toShort\n        val numAsDoubleAsInteger = num.toDouble.toInt\n\
    \        val numAsDoubleAsLong = num.toDouble.toLong\n        val numAsBigDecimalAsBigInteger\
    \ = num.toBigDecimal.toBigInteger\n        val numAsBigDecimalAsByte = num.toBigDecimal.toByte\n\
    \        val numAsBigDecimalAsShort = num.toBigDecimal.toShort\n        val numAsBigDecimalAsInteger\
    \ = num.toBigDecimal.toInt\n        val numAsBigDecimalAsLong = num.toBigDecimal.toLong\n\
    \        val numAsBigIntegerAsBigDecimal = num.toBigInteger.toBigDecimal\n   \
    \     val numAsBigIntegerAsByte = num.toBigInteger.toByte\n        val numAsBigInteger",
  "        val num = value.toLong\n        if (num.isNaN) {\n            return 0l\n\
    \        }\n        val numAsInt = num.toInt\n        val numAsFloat = num.toFloat\n\
    \        val numAsDouble = num.toDouble\n        val numAsBigInt = num.toBigInt\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimalUnscaled\
    \ = num.toBigDecimalUnscaled\n        val numAsBigDecimalScale = num.toBigDecimalScale\n\
    \        val numAsBigDecimalString = num.toBigDecimalString\n        val numAsBigDecimalStringUnscaled\
    \ = num.toBigDecimalStringUnscaled\n        val numAsBigDecimalStringScale = num.toBigDecimalStringScale\n\
    \        val numAsBigDecimalStringUnscaledFraction = num.toBigDecimalStringUnscaledFraction\n\
    \        val numAsBigDecimalStringScaleFraction = num.toBigDecimalStringScaleFraction\n\
    \        val numAsBigDecimalStringUnscaledFractionFraction = num.toBigDecimalStringUnscaledFractionFraction\n\
    \        val numAsBigDecimalStringScaleFractionFraction = num.toBigDecimalStringScaleFractionFraction\n\
    \        val numAsBigDecimalStringUnscaledFractionFractionFraction = num.toBigDecimalStringUnscaledFractionFractionFraction\n\
    \        val numAsBigDecimalStringScaleFractionFractionFraction = num.toBigDecimalStringScaleFractionFractionFraction\n\
    \        val numAsBigDecimalStringUnscaledFractionFractionFractionFraction = num.toBigDecimalStringUnscaledFractionFractionFractionFraction\n\
    \        val numAsBigDecimalStringScaleFractionFractionFractionFraction = num.toBigDecimalStringScaleFractionFractionFractionFraction\n\
    \        val numAsBigDecimalStringUnscaledFractionFractionFractionFractionFraction\
    \ = num.toBigDecimalStringUnscaledFractionFractionFractionFractionFraction\n \
    \       val numAsBigDecimalStringScaleFractionFractionFractionFractionFraction\
    \ = num.toBigDecimalStringScaleFractionFractionFractionF", "        val num =\
    \ value.toLong\n        if (num.isNaN) {\n            return 0l\n        }\n \
    \       val numAsInt = num.toInt\n        val numAsFloat = num.toFloat\n     \
    \   val numAsDouble = num.toDouble\n        val numAsChar = num.toChar\n     \
    \   val numAsShort = num.toShort\n        val numAsByte = num.toByte\n       \
    \ val numAsBigInt = num.toBigInt\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimalInt = num.toBigDecimalInt\n        val numAsBigDecimalLong\
    \ = num.toBigDecimalLong\n        val numAsBigDecimalShort = num.toBigDecimalShort\n\
    \        val numAsBigDecimalByte = num.toBigDecimalByte\n        val numAsBigDecimalChar\
    \ = num.toBigDecimalChar\n        val numAsBigDecimalFloat = num.toBigDecimalFloat\n\
    \        val numAsBigDecimalDouble = num.toBigDecimalDouble\n        val numAsBigDecimalString\
    \ = num.toBigDecimalString\n        val numAsBigDecimalStringInt = num.toBigDecimalStringInt\n\
    \        val numAsBigDecimalStringLong = num.toBigDecimalStringLong\n        val\
    \ numAsBigDecimalStringShort = num.toBigDecimalStringShort\n        val numAsBigDecimalStringByte\
    \ = num.toBigDecimalStringByte\n        val numAsBigDecimalStringChar = num.toBigDecimalStringChar\n\
    \        val numAsBigDecimalStringFloat = num.toBigDecimalStringFloat\n      \
    \  val numAsBigDecimalStringDouble = num.toBigDecimalStringDouble\n        val\
    \ numAsBigDecimalStringString = num.toBigDecimalStringString\n        val numAsBigDecimalStringStringInt\
    \ = num.toBigDecimalStringStringInt\n        val numAsBigDecimalStringStringLong\
    \ = num.toBigDecimalStringStringLong\n        val numAsBigDecimalStringStringShort\
    \ = num.toBigDecimalStringStringShort\n        val numAsBigDecimalStringStringByte\
    \ = num.toBigDecimalStringStringByte\n        val numAsBigDecimalStringStringChar\
    \ = num.toBigDecimalString", "        val num = value.toLong\n        if (num.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ if (num.isInfinite) {\n            throw new NumberFormatException(\"Infinity\"\
    )\n        }\n        val numAsInt = num.toInt\n        if (numAsInt.isNaN) {\n\
    \            throw new NumberFormatException(\"NaN\")\n        }\n        if (numAsInt.isInfinite)\
    \ {\n            throw new NumberFormatException(\"Infinity\")\n        }\n  \
    \      val numAsDouble = num.toDouble\n        if (numAsDouble.isNaN) {\n    \
    \        throw new NumberFormatException(\"NaN\")\n        }\n        if (numAsDouble.isInfinite)\
    \ {\n            throw new NumberFormatException(\"Infinity\")\n        }\n  \
    \      val numAsFloat = num.toFloat\n        if (numAsFloat.isNaN) {\n       \
    \     throw new NumberFormatException(\"NaN\")\n        }\n        if (numAsFloat.isInfinite)\
    \ {\n            throw new NumberFormatException(\"Infinity\")\n        }\n  \
    \      val numAsShort = num.toShort\n        if (numAsShort.isNaN) {\n       \
    \     throw new NumberFormatException(\"NaN\")\n        }\n        if (numAsShort.isInfinite)\
    \ {\n            throw new NumberFormatException(\"Infinity\")\n        }\n  \
    \      val numAsByte = num.toByte\n        if (numAsByte.isNaN) {\n          \
    \  throw new NumberFormatException(\"NaN\")\n        }\n        if (numAsByte.isInfinite)\
    \ {\n            throw new NumberFormatException(\"Infinity\")\n        }\n  \
    \      val numAsChar = num.toChar\n        if (numAsChar.isNaN) {\n          \
    \  throw new NumberFormatException(\"NaN\")\n        }\n        if (numAsChar.isInfinite)\
    \ {\n            throw new NumberFormatException(\"Infinity\")\n        }\n  \
    \      val numAsBigInt = num.toBigInt\n        if (numAsBigInt.isNaN) {\n    \
    \        throw new NumberFormatException(\"NaN\")\n        }\n        if (numAsBigInt.isInfinite)\
    \ {\n            throw new NumberFormatException(\"Inf", "        val num = value.toLong\n\
    \        if (num.isNaN) {\n            throw new NumberFormatException(\"Invalid\
    \ number\")\n        }\n        val numAsInt = num.intValue\n        val numAsFloat\
    \ = num.floatValue\n        if (numAsFloat.isNaN) {\n            throw new NumberFormatException(\"\
    Invalid number\")\n        }\n        val numAsDouble = num.doubleValue\n    \
    \    if (numAsDouble.isNaN) {\n            throw new NumberFormatException(\"\
    Invalid number\")\n        }\n        val numAsBigDecimal = num.bigDecimal\n \
    \       if (numAsBigDecimal.isNaN) {\n            throw new NumberFormatException(\"\
    Invalid number\")\n        }\n        if (numAsInt == numAsFloat) {\n        \
    \    return numAsInt\n        }\n        if (numAsInt == numAsDouble) {\n    \
    \        return numAsInt\n        }\n        if (numAsInt == numAsBigDecimal)\
    \ {\n            return numAsInt\n        }\n        val numAsBigInt = num.bigInteger\n\
    \        if (numAsBigInt.isNaN) {\n            throw new NumberFormatException(\"\
    Invalid number\")\n        }\n        val numAsLong = num.longValue\n        if\
    \ (numAsLong.isNaN) {\n            throw new NumberFormatException(\"Invalid number\"\
    )\n        }\n        val numAsShort = num.shortValue\n        if (numAsShort.isNaN)\
    \ {\n            throw new NumberFormatException(\"Invalid number\")\n       \
    \ }\n        val numAsByte = num.byteValue\n        if (numAsByte.isNaN) {\n \
    \           throw new NumberFormatException(\"Invalid number\")\n        }\n \
    \       val numAsFloatAsInt = numAsFloat.intValue\n        if (numAsFloatAsInt.isNaN)\
    \ {\n            throw new NumberFormatException(\"Invalid number\")\n       \
    \ }\n        val numAsFloatAsLong = numAsFloat.longValue\n        if (numAsFloatAsLong.isNaN)\
    \ {\n            throw new NumberFormatException(\"Invalid number\")\n       \
    \ }\n        val numAsFloatAsShort = numAsFloat.shortValue\n        if (numAsFloatAsShort.isNaN)\
    \ {\n            throw new NumberFormatException(\"Invalid", "        val num\
    \ = value.toLong\n        if (num.isNaN) {\n            return 0l\n        }\n\
    \        val numAsInt = num.toInt\n        val numAsFloat = num.toFloat\n    \
    \    val numAsDouble = num.toDouble\n        val numAsBigInt = num.toBigInt\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsChar = num.toChar\n\
    \        val numAsByte = num.toByte\n        val numAsShort = num.toShort\n  \
    \      val numAsLong = num.toLong\n        val numAsFloat32 = num.toFloat32\n\
    \        val numAsFloat64 = num.toFloat64\n        val numAsFloat128 = num.toFloat128\n\
    \        val numAsInt32 = num.toInt32\n        val numAsInt64 = num.toInt64\n\
    \        val numAsInt128 = num.toInt128\n        val numAsChar32 = num.toChar32\n\
    \        val numAsChar64 = num.toChar64\n        val numAsChar128 = num.toChar128\n\
    \        val numAsByte32 = num.toByte32\n        val numAsByte64 = num.toByte64\n\
    \        val numAsByte128 = num.toByte128\n        val numAsShort32 = num.toShort32\n\
    \        val numAsShort64 = num.toShort64\n        val numAsShort128 = num.toShort128\n\
    \        val numAsInt256 = num.toInt256\n        val numAsInt512 = num.toInt512\n\
    \        val numAsLong256 = num.toLong256\n        val numAsLong512 = num.toLong512\n\
    \        val numAsFloat256 = num.toFloat256\n        val numAsFloat512 = num.toFloat512\n\
    \        val numAsDouble256 = num.toDouble256\n        val numAsDouble512 = num.toDouble512\n\
    \        val numAsBigInt256 = num.toBigInt256\n        val numAsBigInt512 = num.toBigInt512\n\
    \        val numAsBigDecimal256 = num.toBigDecimal256\n        val numAsBigDecimal512\
    \ = num.toBigDecimal512\n        val numAsChar256 = num.toChar256\n        val\
    \ num", "        val num = value.toLong\n        if (num.isNaN) {\n          \
    \  return 0l\n        }\n        val numAsInt = num.toInt\n        if (numAsInt.isNaN)\
    \ {\n            return numAsInt\n        }\n        val numAsFloat = num.toFloat\n\
    \        if (numAsFloat.isNaN) {\n            return numAsFloat\n        }\n \
    \       val numAsDouble = num.toDouble\n        if (numAsDouble.isNaN) {\n   \
    \         return numAsDouble\n        }\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        if (numAsBigDecimal.isNaN) {\n            return numAsBigDecimal\n  \
    \      }\n        val numAsBigInteger = num.toBigInteger\n        if (numAsBigInteger.isNaN)\
    \ {\n            return numAsBigInteger\n        }\n        val numAsLong = num.toLong\n\
    \        if (numAsLong.isNaN) {\n            return numAsLong\n        }\n   \
    \     val numAsIntAsLong = numAsInt.toLong\n        if (numAsIntAsLong.isNaN)\
    \ {\n            return numAsIntAsLong\n        }\n        val numAsFloatAsLong\
    \ = numAsFloat.toLong\n        if (numAsFloatAsLong.isNaN) {\n            return\
    \ numAsFloatAsLong\n        }\n        val numAsDoubleAsLong = numAsDouble.toLong\n\
    \        if (numAsDoubleAsLong.isNaN) {\n            return numAsDoubleAsLong\n\
    \        }\n        val numAsBigDecimalAsLong = numAsBigDecimal.toLong\n     \
    \   if (numAsBigDecimalAsLong.isNaN) {\n            return numAsBigDecimalAsLong\n\
    \        }\n        val numAsBigIntegerAsLong = numAsBigInteger.toLong\n     \
    \   if (numAsBigIntegerAsLong.isNaN) {\n            return numAsBigIntegerAsLong\n\
    \        }\n        val numAsLongAsLong = numAsLong.toLong\n        if (numAsLongAsLong.isNaN)\
    \ {\n            return numAsLongAsLong\n        }\n        val numAsIntAsLongAsLong\
    \ = numAsIntAsLong.", "        val num = value.toLong\n        if (num < 0) {\n\
    \            return -num\n        } else {\n            return num\n        }",
  "        val num = value.toLong\n        if (num.isNaN) {\n            return 0l\n\
    \        }\n        val numAsInt = num.toInt\n        if (numAsInt.isNaN) {\n\
    \            return num\n        }\n        val numAsFloat = num.toFloat\n   \
    \     if (numAsFloat.isNaN) {\n            return num\n        }\n        val\
    \ numAsDouble = num.toDouble\n        if (numAsDouble.isNaN) {\n            return\
    \ num\n        }\n        val numAsBigDecimal = num.toBigDecimal\n        if (numAsBigDecimal.isNaN)\
    \ {\n            return num\n        }\n        val numAsBigInteger = num.toBigInteger\n\
    \        if (numAsBigInteger.isNaN) {\n            return num\n        }\n   \
    \     val numAsShort = num.toShort\n        if (numAsShort.isNaN) {\n        \
    \    return num\n        }\n        val numAsByte = num.toByte\n        if (numAsByte.isNaN)\
    \ {\n            return num\n        }\n        val numAsChar = num.toChar\n \
    \       if (numAsChar.isNaN) {\n            return num\n        }\n        val\
    \ numAsFloatWrapper = num.toFloatWrapper\n        if (numAsFloatWrapper.isNaN)\
    \ {\n            return num\n        }\n        val numAsDoubleWrapper = num.toDoubleWrapper\n\
    \        if (numAsDoubleWrapper.isNaN) {\n            return num\n        }\n\
    \        val numAsBigDecimalWrapper = num.toBigDecimalWrapper\n        if (numAsBigDecimalWrapper.isNaN)\
    \ {\n            return num\n        }\n        val numAsBigIntegerWrapper = num.toBigIntegerWrapper\n\
    \        if (numAsBigIntegerWrapper.isNaN) {\n            return num\n       \
    \ }\n        val numAsShortWrapper = num.toShortWrapper\n        if (numAsShortWrapper.isNaN)\
    \ {\n            return num\n        }\n        val numAsByteWrapper = num.toByteWrapper\n\
    \        if (numAsByteWrapper.isNaN) {\n            return num", "        val\
    \ num = value.toLong\n        if (num < 0) {\n            val abs = Math.abs(num)\n\
    \            val nearest = abs.div(abs.div(2)).floorDiv(2)\n            return\
    \ nearest\n        } else {\n            val abs = Math.abs(num)\n           \
    \ val nearest = abs.div(abs.div(2)).floorDiv(2)\n            return -nearest\n\
    \        }", "        val num = value.toLong\n        if (num.isNaN) {\n     \
    \       return 0l\n        }\n        val abs = num.abs\n        if (abs.isNaN)\
    \ {\n            return 0l\n        }\n        val abs_int = abs.toInt\n     \
    \   if (abs_int.isNaN) {\n            return 0l\n        }\n        val abs_long\
    \ = abs_int.toLong\n        if (abs_long.isNaN) {\n            return 0l\n   \
    \     }\n        val abs_long_int = abs_long.toInt\n        if (abs_long_int.isNaN)\
    \ {\n            return 0l\n        }\n        val abs_long_long = abs_long_int.toLong\n\
    \        if (abs_long_long.isNaN) {\n            return 0l\n        }\n      \
    \  val abs_long_long_int = abs_long_long.toInt\n        if (abs_long_long_int.isNaN)\
    \ {\n            return 0l\n        }\n        val abs_long_long_long = abs_long_long_int.toLong\n\
    \        if (abs_long_long_long.isNaN) {\n            return 0l\n        }\n \
    \       val abs_long_long_long_int = abs_long_long_long.toInt\n        if (abs_long_long_long_int.isNaN)\
    \ {\n            return 0l\n        }\n        val abs_long_long_long_long = abs_long_long_long_int.toLong\n\
    \        if (abs_long_long_long_long.isNaN) {\n            return 0l\n       \
    \ }\n        val abs_long_long_long_long_int = abs_long_long_long_long.toInt\n\
    \        if (abs_long_long_long_long_int.isNaN) {\n            return 0l\n   \
    \     }\n        val abs_long_long_long_long_long = abs_long_long_long_long_int.toLong\n\
    \        if (abs_long_long_long_long_long.isNaN) {\n            return 0l\n  \
    \      }\n        val abs_long_long", "        val num = value.toLong\n      \
    \  if (num.isNaN) {\n            throw new NumberFormatException(\"NaN\")\n  \
    \      }\n        val numAsInt = num.toInt\n        if (numAsInt.isNaN) {\n  \
    \          throw new NumberFormatException(\"NaN\")\n        }\n        val numAsFloat\
    \ = num.toFloat\n        if (numAsFloat.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsDouble = num.toDouble\n        if (numAsDouble.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsBigDecimal = num.toBigDecimal\n        if (numAsBigDecimal.isNaN) {\n\
    \            throw new NumberFormatException(\"NaN\")\n        }\n        val\
    \ numAsBigInteger = num.toBigInteger\n        if (numAsBigInteger.isNaN) {\n \
    \           throw new NumberFormatException(\"NaN\")\n        }\n        val numAsBigDecimalScaled\
    \ = num.scaleByPowerOfTen(2)\n        if (numAsBigDecimalScaled.isNaN) {\n   \
    \         throw new NumberFormatException(\"NaN\")\n        }\n        val numAsBigDecimalScaledAsInt\
    \ = numAsBigDecimalScaled.toInt\n        if (numAsBigDecimalScaledAsInt.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsBigDecimalScaledAsLong = numAsBigDecimalScaled.toLong\n        if (numAsBigDecimalScaledAsLong.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsBigDecimalScaledAsFloat = numAsBigDecimalScaled.toFloat\n        if\
    \ (numAsBigDecimalScaledAsFloat.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsBigDecimalScaledAsDouble = numAsBigDecimalScaled.toDouble\n\
    \        if (numAsBigDecimalScaledAsDouble.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val num", "        val num = value.toLong\n       \
    \ if (num.isNaN) {\n            return 0l\n        }\n        val numAsInt = num.toInt\n\
    \        if (numAsInt.isNaN) {\n            return numAsInt\n        }\n     \
    \   val numAsFloat = num.toFloat\n        if (numAsFloat.isNaN) {\n          \
    \  return numAsFloat\n        }\n        val numAsDouble = num.toDouble\n    \
    \    if (numAsDouble.isNaN) {\n            return numAsDouble\n        }\n   \
    \     val numAsBigDecimal = num.toBigDecimal\n        if (numAsBigDecimal.isNaN)\
    \ {\n            return numAsBigDecimal\n        }\n        val numAsBigInteger\
    \ = num.toBigInteger\n        if (numAsBigInteger.isNaN) {\n            return\
    \ numAsBigInteger\n        }\n        val numAsShort = num.toShort\n        if\
    \ (numAsShort.isNaN) {\n            return numAsShort\n        }\n        val\
    \ numAsByte = num.toByte\n        if (numAsByte.isNaN) {\n            return numAsByte\n\
    \        }\n        val numAsLong = num.toLong\n        if (numAsLong.isNaN) {\n\
    \            return numAsLong\n        }\n        val numAsInteger = num.toInt\n\
    \        if (numAsInteger.isNaN) {\n            return numAsInteger\n        }\n\
    \        val numAsFloat = num.toFloat\n        if (numAsFloat.isNaN) {\n     \
    \       return numAsFloat\n        }\n        val numAsDouble = num.toDouble\n\
    \        if (numAsDouble.isNaN) {\n            return numAsDouble\n        }\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        if (numAsBigDecimal.isNaN)\
    \ {\n            return numAsBigDecimal\n        }\n        val numAsBigInteger\
    \ = num.toBigInteger\n        if (numAsBigInteger.isNaN) {\n            return\
    \ numAsBigInteger\n        }\n        val numAsShort = num.toShort\n        if\
    \ (numAsShort.isNaN) {\n            return numAsShort\n        ", "        val\
    \ num = value.toLong\n        if (num.isNaN) {\n            return 0l\n      \
    \  }\n        val numAsInt = num.toInt\n        val numAsFloat = num.toFloat\n\
    \        val numAsDouble = num.toDouble\n        val numAsBigInt = num.toBigInt\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsChar = num.toChar\n\
    \        val numAsShort = num.toShort\n        val numAsByte = num.toByte\n  \
    \      val numAsFloat32 = num.toFloat32\n        val numAsFloat64 = num.toFloat64\n\
    \        val numAsFloat128 = num.toFloat128\n        val numAsInt32 = num.toInt32\n\
    \        val numAsInt64 = num.toInt64\n        val numAsInt128 = num.toInt128\n\
    \        val numAsLong = num.toLong\n        val numAsShort32 = num.toShort32\n\
    \        val numAsShort64 = num.toShort64\n        val numAsShort128 = num.toShort128\n\
    \        val numAsByte32 = num.toByte32\n        val numAsByte64 = num.toByte64\n\
    \        val numAsByte128 = num.toByte128\n        val numAsChar32 = num.toChar32\n\
    \        val numAsChar64 = num.toChar64\n        val numAsChar128 = num.toChar128\n\
    \        val numAsShort32Char = num.toShort32Char\n        val numAsShort64Char\
    \ = num.toShort64Char\n        val numAsShort128Char = num.toShort128Char\n  \
    \      val numAsByte32Char = num.toByte32Char\n        val numAsByte64Char = num.toByte64Char\n\
    \        val numAsByte128Char = num.toByte128Char\n        val numAsInt32Char\
    \ = num.toInt32Char\n        val numAsInt64Char = num.toInt64Char\n        val\
    \ numAsInt128Char = num.toInt128Char\n        val numAsLongChar = num.toLongChar\n\
    \        val numAsShort32Long = num.toShort32Long\n        val numAsShort64Long\
    \ = num.toShort64Long\n        val numAsShort128", "        val num = value.toLong\n\
    \        if (num < 0) {\n            val abs = Math.abs(num)\n            val\
    \ max = abs.max\n            val min = abs.min\n            val diff = max - min\n\
    \            val mid = (max + min) / 2\n            val diff2 = mid - min\n  \
    \          val diff3 = max - mid\n            val diff4 = mid - max\n        \
    \    val diff5 = min - mid\n            val diff6 = mid - min\n            val\
    \ diff7 = max - mid\n            val diff8 = mid - max\n            val diff9\
    \ = min - mid\n            val diff10 = mid - min\n            val diff11 = max\
    \ - mid\n            val diff12 = mid - max\n            val diff13 = min - mid\n\
    \            val diff14 = max - mid\n            val diff15 = mid - min\n    \
    \        val diff16 = max - mid\n            val diff17 = mid - max\n        \
    \    val diff18 = min - mid\n            val diff19 = max - mid\n            val\
    \ diff20 = mid - min\n            val diff21 = max - mid\n            val diff22\
    \ = mid - max\n            val diff23 = min - mid\n            val diff24 = max\
    \ - mid\n            val diff25 = mid - min\n            val diff26 = max - mid\n\
    \            val diff27 = mid - max\n            val diff28 = min - mid\n    \
    \        val diff29 = max - mid\n            val diff30 = mid - min\n        \
    \    val diff31 = max - mid\n            val diff32 = mid - max\n            val\
    \ diff33 = min - mid\n            val diff34 = max - mid\n            val diff35\
    \ = mid - min\n            val diff36 = max - mid\n            val diff37 = mid\
    \ - max\n            val diff38 = min - mid\n            val diff39 = max - mid\n\
    \            val diff40 = mid - min\n            val diff41 = max - mid\n    \
    \        val diff42 = mid - max\n            val diff43 = min - mid\n        \
    \    val diff44 = max - mid\n            val diff45 = mid - min\n            val\
    \ diff46 = max - mid\n            val diff47 = mid - max\n            val diff48\
    \ = min - mid\n            val diff49 = max - mid\n            val diff50 = mid\
    \ - min\n            val diff51 = max", "        val num = value.toLong\n    \
    \    if (num < 0) {\n            val abs = Math.abs(num)\n            val nearest\
    \ = abs / 2\n            val result = nearest + (abs % 2)\n            return\
    \ result\n        } else {\n            val abs = Math.abs(num)\n            val\
    \ nearest = abs / 2\n            val result = nearest - (abs % 2)\n          \
    \  return result\n        }", "        val num = value.toLong\n        if (num\
    \ < 0) {\n            return -num\n        } else {\n            return num\n\
    \        }", "        val num = value.toLong\n        val abs = num.abs\n    \
    \    val sign = num.signum\n        val intPart = abs.floorDiv(scala.math.BigInteger(\"\
    1\"))\n        val fracPart = abs.subtract(intPart)\n        val frac = fracPart.toBigDecimal\n\
    \        val intPartAsLong = intPart.toLong\n        val fracAsLong = fracPart.toLong\n\
    \        val intPartAsInt = intPartAsLong.intValue\n        val fracAsInt = fracAsLong.intValue\n\
    \        val intPartAsInt2 = intPartAsInt.intValue\n        val fracAsInt2 = fracAsInt.intValue\n\
    \        val intPartAsInt3 = intPartAsInt2.intValue\n        val fracAsInt3 =\
    \ fracAsInt2.intValue\n        val intPartAsInt4 = intPartAsInt3.intValue\n  \
    \      val fracAsInt4 = fracAsInt3.intValue\n        val intPartAsInt5 = intPartAsInt4.intValue\n\
    \        val fracAsInt5 = fracAsInt4.intValue\n        val intPartAsInt6 = intPartAsInt5.intValue\n\
    \        val fracAsInt6 = fracAsInt5.intValue\n        val intPartAsInt7 = intPartAsInt6.intValue\n\
    \        val fracAsInt7 = fracAsInt6.intValue\n        val intPartAsInt8 = intPartAsInt7.intValue\n\
    \        val fracAsInt8 = fracAsInt7.intValue\n        val intPartAsInt9 = intPartAsInt8.intValue\n\
    \        val fracAsInt9 = fracAsInt8.intValue\n        val intPartAsInt10 = intPartAsInt9.intValue\n\
    \        val fracAsInt10 = fracAsInt9.intValue\n        val intPartAsInt11 = intPartAsInt10.intValue\n\
    \        val fracAsInt11 = fracAsInt10.intValue\n        val intPartAsInt12 =\
    \ intPartAsInt11.intValue\n        val fracAsInt12 = fracAsInt11.intValue\n  \
    \      val intPartAsInt", "        val num = value.toLong\n        if (num.isNaN)\
    \ {\n            return 0l\n        }\n        val abs = num.abs\n        if (abs.isNaN)\
    \ {\n            return 0l\n        }\n        val absInt = abs.toInt\n      \
    \  if (absInt.isNaN) {\n            return 0l\n        }\n        val absIntPlusOne\
    \ = absInt.add(1)\n        if (absIntPlusOne.isNaN) {\n            return 0l\n\
    \        }\n        val absIntMinusOne = absInt.subtract(1)\n        if (absIntMinusOne.isNaN)\
    \ {\n            return 0l\n        }\n        val absIntPlusOneHalf = absIntPlusOne.div(2)\n\
    \        if (absIntPlusOneHalf.isNaN) {\n            return 0l\n        }\n  \
    \      val absIntMinusOneHalf = absIntMinusOne.div(2)\n        if (absIntMinusOneHalf.isNaN)\
    \ {\n            return 0l\n        }\n        val absIntPlusOneHalfPlusOne =\
    \ absIntPlusOneHalf.add(1)\n        if (absIntPlusOneHalfPlusOne.isNaN) {\n  \
    \          return 0l\n        }\n        val absIntMinusOneHalfPlusOne = absIntMinusOneHalf.add(1)\n\
    \        if (absIntMinusOneHalfPlusOne.isNaN) {\n            return 0l\n     \
    \   }\n        val absIntPlusOneHalfPlusOneHalf = absIntPlusOneHalfPlusOne.div(2)\n\
    \        if (absIntPlusOneHalfPlusOneHalf.isNaN) {\n            return 0l\n  \
    \      }\n        val absIntMinusOneHalfPlusOneHalf = absIntMinusOneHalfPlusOne.div(2)\n\
    \        if (absIntMinusOneHalfPlusOneHalf.isNaN) {\n            return 0l\n \
    \       }\n        val absIntPlusOneHalfPlusOneHalfPlusOne = absIntPlusOneHalfPlusOneHalf.add(1)\n\
    \        if (absIntPlusOneHalfPlusOneHalfPlusOne.isNaN) {\n            return\
    \ 0l\n        }\n        val absIntMinusOneHalfPlusOneHalf", "        val num\
    \ = value.toLong\n        if (num.isNaN) {\n            return 0l\n        }\n\
    \        val abs = num.abs\n        if (abs.isNaN) {\n            return 0l\n\
    \        }\n        val absInt = abs.toInt\n        if (absInt.isNaN) {\n    \
    \        return 0l\n        }\n        val absIntPlusOne = absInt + 1\n      \
    \  if (absIntPlusOne.isNaN) {\n            return 0l\n        }\n        val absIntMinusOne\
    \ = absInt - 1\n        if (absIntMinusOne.isNaN) {\n            return 0l\n \
    \       }\n        val absIntPlusOneHalf = absIntPlusOne / 2\n        if (absIntPlusOneHalf.isNaN)\
    \ {\n            return 0l\n        }\n        val absIntMinusOneHalf = absIntMinusOne\
    \ / 2\n        if (absIntMinusOneHalf.isNaN) {\n            return 0l\n      \
    \  }\n        val absIntPlusOneHalfPlusOne = absIntPlusOneHalf + 1\n        if\
    \ (absIntPlusOneHalfPlusOne.isNaN) {\n            return 0l\n        }\n     \
    \   val absIntMinusOneHalfPlusOne = absIntMinusOneHalf + 1\n        if (absIntMinusOneHalfPlusOne.isNaN)\
    \ {\n            return 0l\n        }\n        val absIntPlusOneHalfMinusOne =\
    \ absIntPlusOneHalf - 1\n        if (absIntPlusOneHalfMinusOne.isNaN) {\n    \
    \        return 0l\n        }\n        val absIntMinusOneHalfMinusOne = absIntMinusOneHalf\
    \ - 1\n        if (absIntMinusOneHalfMinusOne.isNaN) {\n            return 0l\n\
    \        }\n        val absIntPlusOneHalfMinusOneHalf = absIntPlusOneHalfMinusOne\
    \ / 2\n        if (absIntPlusOneHalfMinusOneHalf.isNaN) {\n            return\
    \ 0l\n        }\n        val absIntMinusOneHalfMinusOneHalf = absIntMinusOneHalfMinusOne\
    \ / 2\n        if (absIntMinusOneHalfMinusOneHalf.isNaN) {\n            ", " \
    \       val num = value.toLong\n        if (num < 0) {\n            val abs =\
    \ Math.abs(num)\n            val max = abs.max\n            val min = abs.min\n\
    \            val diff = max - min\n            val diffAbs = diff.abs\n      \
    \      val diffAbsHalf = diffAbs / 2\n            val diffAbsHalfAbs = diffAbsHalf.abs\n\
    \            val diffAbsHalfAbsHalf = diffAbsHalfAbs / 2\n            val diffAbsHalfAbsHalfHalf\
    \ = diffAbsHalfAbsHalf / 2\n            val diffAbsHalfAbsHalfHalfHalf = diffAbsHalfAbsHalfHalf\
    \ / 2\n            val diffAbsHalfAbsHalfHalfHalfHalf = diffAbsHalfAbsHalfHalfHalf\
    \ / 2\n            val diffAbsHalfAbsHalfHalfHalfHalfHalf = diffAbsHalfAbsHalfHalfHalfHalf\
    \ / 2\n            val diffAbsHalfAbsHalfHalfHalfHalfHalfHalf = diffAbsHalfAbsHalfHalfHalfHalfHalf\
    \ / 2\n            val diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalf = diffAbsHalfAbsHalfHalfHalfHalfHalfHalf\
    \ / 2\n            val diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalf = diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalf\
    \ / 2\n            val diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalfHalf = diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalf\
    \ / 2\n            val diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalfHalfHalf\
    \ = diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalfHalf / 2\n            val diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalf\
    \ = diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalfHalfHalf / 2\n            val\
    \ diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalf = diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalf\
    \ / 2\n            val diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalf\
    \ = diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalf / 2\n         \
    \   val diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalf\
    \ = diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalf / 2\n         \
    \   val diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalf\
    \ = diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalf", "        val\
    \ num = value.toLong\n        if (num < 0) {\n            val abs = Math.abs(num)\n\
    \            val floor = abs.floorDiv(1)\n            val ceil = abs.ceilDiv(1)\n\
    \            if (abs.subtract(floor).abs().min() < abs.subtract(ceil).abs().min())\n\
    \                return -floor\n            else\n                return -ceil\n\
    \        } else {\n            val abs = Math.abs(num)\n            val floor\
    \ = abs.floorDiv(1)\n            val ceil = abs.ceilDiv(1)\n            if (abs.subtract(floor).abs().min()\
    \ < abs.subtract(ceil).abs().min())\n                return floor\n          \
    \  else\n                return ceil\n        }", "        val num = value.toLong\n\
    \        if (num.isNaN) {\n            throw new NumberFormatException(\"NaN\"\
    )\n        }\n        val numAsInt = num.toInt\n        if (numAsInt.isNaN) {\n\
    \            throw new NumberFormatException(\"NaN\")\n        }\n        val\
    \ numAsFloat = num.toFloat\n        if (numAsFloat.isNaN) {\n            throw\
    \ new NumberFormatException(\"NaN\")\n        }\n        val numAsDouble = num.toDouble\n\
    \        if (numAsDouble.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsBigInt = num.toBigInt\n        if (numAsBigInt.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsBigDecimal = num.toBigDecimal\n        if (numAsBigDecimal.isNaN) {\n\
    \            throw new NumberFormatException(\"NaN\")\n        }\n        val\
    \ numAsBigDecimalToBigInt = num.toBigDecimal.toBigInt\n        if (numAsBigDecimalToBigInt.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsBigDecimalToBigIntToInt = num.toBigDecimal.toBigInt.toInt\n       \
    \ if (numAsBigDecimalToBigIntToInt.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsBigDecimalToBigIntToIntToLong = num.toBigDecimal.toBigInt.toInt.toLong\n\
    \        if (numAsBigDecimalToBigIntToIntToLong.isNaN) {\n            throw new\
    \ NumberFormatException(\"NaN\")\n        }\n        val numAsBigDecimalToBigIntToIntToLongToFloat\
    \ = num.toBigDecimal.toBigInt.toInt.toLong.toFloat\n        if (numAsBigDecimalToBigIntToIntToLongToFloat.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsBigDecimalToBigIntToIntToLongToFloatToDouble = num.", "        val\
    \ num = value.toLong\n        if (num.isNaN) {\n            return 0l\n      \
    \  }\n        val numAsInt = num.toInt\n        if (numAsInt.isNaN) {\n      \
    \      return numAsInt\n        }\n        val numAsFloat = num.toFloat\n    \
    \    if (numAsFloat.isNaN) {\n            return numAsFloat\n        }\n     \
    \   val numAsDouble = num.toDouble\n        if (numAsDouble.isNaN) {\n       \
    \     return numAsDouble\n        }\n        val numAsBigInt = num.toBigInt\n\
    \        if (numAsBigInt.isNaN) {\n            return numAsBigInt\n        }\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        if (numAsBigDecimal.isNaN)\
    \ {\n            return numAsBigDecimal\n        }\n        val numAsBigDecimalInt\
    \ = numAsBigDecimal.toBigInteger\n        if (numAsBigDecimalInt.isNaN) {\n  \
    \          return numAsBigDecimalInt\n        }\n        val numAsBigDecimalLong\
    \ = numAsBigDecimal.toBigInteger\n        if (numAsBigDecimalLong.isNaN) {\n \
    \           return numAsBigDecimalLong\n        }\n        val numAsBigDecimalIntAsLong\
    \ = numAsBigDecimalInt.longValue\n        if (numAsBigDecimalIntAsLong.isNaN)\
    \ {\n            return numAsBigDecimalIntAsLong\n        }\n        val numAsBigDecimalIntAsInt\
    \ = numAsBigDecimalInt.intValue\n        if (numAsBigDecimalIntAsInt.isNaN) {\n\
    \            return numAsBigDecimalIntAsInt\n        }\n        val numAsBigDecimalIntAsShort\
    \ = numAsBigDecimalInt.shortValue\n        if (numAsBigDecimalIntAsShort.isNaN)\
    \ {\n            return numAsBigDecimalIntAsShort\n        }\n        val numAsBigDecimalIntAsByte\
    \ = numAsBigDecimalInt.byteValue\n        if (numAsBigDecimalIntAsByte.isNaN)\
    \ {\n            return numAsBigDecimalIntAsByte\n        }\n        ", "    \
    \    val num = value.toLong\n        if (num < 0) {\n            val abs = Math.abs(num)\n\
    \            val intPart = abs % 1\n            val fracPart = abs - intPart\n\
    \            val result = num + (1 - fracPart)\n            if (result == 0) {\n\
    \                result = 1\n            }\n            return result\n      \
    \  } else {\n            val abs = Math.abs(num)\n            val intPart = abs\
    \ % 1\n            val fracPart = abs - intPart\n            val result = num\
    \ - (1 - fracPart)\n            if (result == 0) {\n                result = -1\n\
    \            }\n            return result\n        }", "        val num = value.toLong\n\
    \        if (num.isNaN) {\n            return 0l\n        } else {\n         \
    \   return num\n        }", "        val num = value.toLong\n        if (num.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ if (num.isInfinite) {\n            throw new NumberFormatException(\"Infinity\"\
    )\n        }\n        if (num.isZero) {\n            return 0l\n        }\n  \
    \      val abs = num.abs\n        val absInt = abs.toInt\n        val absFrac\
    \ = abs.subtract(absInt).toDouble\n        val absFracInt = absFrac.toInt\n  \
    \      val absFracFrac = absFrac.subtract(absFracInt).toDouble\n        val absFracFracFrac\
    \ = absFracFrac.subtract(absFracFrac).toDouble\n        if (absFracFracFrac.isZero)\
    \ {\n            return absFracInt\n        }\n        if (absFracFracFrac.isNegative)\
    \ {\n            return absFracInt.subtract(1)\n        }\n        return absFracInt.add(1)",
  "        val num = value.toLong\n        if (num < 0) {\n            val abs = Math.abs(num)\n\
    \            val floor = abs.floorDiv(abs.div(abs.sub(1)))\n            val ceil\
    \ = abs.ceilDiv(abs.div(abs.sub(1)))\n            val diff = abs.sub(floor).sub(ceil)\n\
    \            if (diff.abs > 0.5) {\n                return ceil\n            }\
    \ else {\n                return floor\n            }\n        } else {\n    \
    \        return num\n        }", "        val num = value.toLong\n        if (num\
    \ < 0) {\n            return -num\n        } else {\n            return num\n\
    \        }", "        val num = value.toLong\n        if (num.isNaN) {\n     \
    \       return 0l\n        }\n        val numAsInt = num.toInt\n        val numAsFloat\
    \ = num.toFloat\n        val numAsDouble = num.toDouble\n        val numAsBigDecimal\
    \ = num.toBigDecimal\n        val numAsBigInteger = num.toBigInteger\n       \
    \ val numAsByte = num.toByte\n        val numAsShort = num.toShort\n        val\
    \ numAsInteger = num.toInt\n        val numAsLong = num.toLong\n        val numAsFloatAsDouble\
    \ = num.toFloat.toDouble\n        val numAsFloatAsFloat = num.toFloat.toFloat\n\
    \        val numAsFloatAsDoubleAsDouble = num.toFloat.toDouble.toDouble\n    \
    \    val numAsFloatAsDoubleAsFloat = num.toFloat.toDouble.toFloat\n        val\
    \ numAsDoubleAsDouble = num.toDouble.toDouble\n        val numAsDoubleAsFloat\
    \ = num.toDouble.toFloat\n        val numAsFloatAsDoubleAsDouble = num.toFloat.toDouble.toDouble\n\
    \        val numAsFloatAsDoubleAsFloat = num.toFloat.toDouble.toFloat\n      \
    \  val numAsDoubleAsFloatAsDouble = num.toDouble.toFloat.toDouble\n        val\
    \ numAsDoubleAsFloatAsFloat = num.toDouble.toFloat.toFloat\n        val numAsFloatAsDoubleAsDoubleAsDouble\
    \ = num.toFloat.toDouble.toDouble.toDouble\n        val numAsFloatAsDoubleAsDoubleAsFloat\
    \ = num.toFloat.toDouble.toDouble.toFloat\n        val numAsDoubleAsDoubleAsFloatAsDouble\
    \ = num.toDouble.toDouble.toFloat.toDouble\n        val numAsDoubleAsFloatAsDoubleAsFloat\
    \ = num.toDouble.toFloat.toDouble.toFloat\n        val numAsDoubleAsFloatAsDoubleAsDoubleAsDouble\
    \ = num.toDouble.toFloat.toDouble.toDouble.toDouble\n        val numAsDoubleAsFloatAsDoubleAsDoubleAsFloatAsDouble\
    \ = num.toDouble.toFloat.toDouble.toDouble.toFloat.toDouble\n        val numAsDoubleAsFloatAsDoubleAsDoubleAsFloatAsFloatAsDouble\
    \ =", "        val num = value.toDouble\n        val num_int = num.int\n     \
    \   val num_fract = num.remainder(1.0)\n        val num_int_fract = num_int +\
    \ num_fract\n        val num_int_fract_int = num_int_fract.int\n        val num_int_fract_int_fract\
    \ = num_int_fract_int + num_fract\n        val num_int_fract_int_fract_int = num_int_fract_int_fract.int\n\
    \        val num_int_fract_int_fract_int_fract = num_int_fract_int_fract_int +\
    \ num_fract\n        val num_int_fract_int_fract_int_fract_int = num_int_fract_int_fract_int_fract.int\n\
    \        val num_int_fract_int_fract_int_fract_int_fract = num_int_fract_int_fract_int_fract_int\
    \ + num_fract\n        val num_int_fract_int_fract_int_fract_int_fract_int = num_int_fract_int_fract_int_fract_int_fract.int\n\
    \        val num_int_fract_int_fract_int_fract_int_fract_int_fract = num_int_fract_int_fract_int_fract_int_fract_int\
    \ + num_fract\n        val num_int_fract_int_fract_int_fract_int_fract_int_fract_int\
    \ = num_int_fract_int_fract_int_fract_int_fract_int_fract.int\n        val num_int_fract_int_fract_int_fract_int_fract_int_fract_int_fract\
    \ = num_int_fract_int_fract_int_fract_int_fract_int_fract_int + num_fract\n  \
    \      val num_int_fract_int_fract_int_f", "        val num = value.toLong\n \
    \       if (num.isNaN) {\n            return 0l\n        } else {\n          \
    \  return num.round(scala.math.BigDecimal.ROUND_HALF_UP)\n        }", "      \
    \  val num = value.toLong\n        if (num.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        if (num.isInfinite) {\n            throw new NumberFormatException(\"\
    Infinity\")\n        }\n        val numAsInt = num.toInt\n        if (numAsInt.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ if (numAsInt.isInfinite) {\n            throw new NumberFormatException(\"Infinity\"\
    )\n        }\n        val numAsFloat = num.toFloat\n        if (numAsFloat.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ if (numAsFloat.isInfinite) {\n            throw new NumberFormatException(\"\
    Infinity\")\n        }\n        val numAsDouble = num.toDouble\n        if (numAsDouble.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ if (numAsDouble.isInfinite) {\n            throw new NumberFormatException(\"\
    Infinity\")\n        }\n        val numAsBigDecimal = num.toBigDecimal\n     \
    \   if (numAsBigDecimal.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        if (numAsBigDecimal.isInfinite) {\n            throw\
    \ new NumberFormatException(\"Infinity\")\n        }\n        val numAsBigInteger\
    \ = num.toBigInteger\n        if (numAsBigInteger.isNaN) {\n            throw\
    \ new NumberFormatException(\"NaN\")\n        }\n        if (numAsBigInteger.isInfinite)\
    \ {\n            throw new NumberFormatException(\"Infinity\")\n        }\n  \
    \      val numAsShort = num.toShort\n        if (numAsShort.isNaN) {\n       \
    \     throw new NumberFormatException(\"NaN\")\n        }\n        if (numAsShort.isInfinite)\
    \ {\n            throw new NumberFormatException(\"Infinity\")\n        }\n  \
    \      val numAsByte = num.toByte\n        if (numAsByte.isNaN) {\n          \
    \  throw new NumberFormatException(\"NaN\")\n        }\n        if (numAsByte.isInfinite)\
    \ {\n", "        val num = value.toDouble\n        val intPart = num.intPart\n\
    \        val fracPart = num.fracPart\n        val intPartAsLong = intPart.toLong\n\
    \        val fracPartAsLong = fracPart.toLong\n        val fracPartAsDouble =\
    \ fracPartAsLong.toDouble\n        val diff = num - intPartAsLong\n        val\
    \ diffAsLong = diff.toLong\n        val diffAsDouble = diffAsLong.toDouble\n \
    \       val diffAsDoubleAbs = diffAsDouble.abs\n        val diffAsDoubleAbsPlusOne\
    \ = diffAsDoubleAbs + 1\n        val diffAsDoubleAbsMinusOne = diffAsDoubleAbs\
    \ - 1\n        val diffAsDoubleAbsPlusOneHalf = diffAsDoubleAbsPlusOne / 2\n \
    \       val diffAsDoubleAbsMinusOneHalf = diffAsDoubleAbsMinusOne / 2\n      \
    \  val diffAsDoubleAbsPlusOneHalfSquared = diffAsDoubleAbsPlusOneHalf * diffAsDoubleAbsPlusOneHalf\n\
    \        val diffAsDoubleAbsMinusOneHalfSquared = diffAsDoubleAbsMinusOneHalf\
    \ * diffAsDoubleAbsMinusOneHalf\n        val diffAsDoubleAbsPlusOneHalfSquaredMinusOne\
    \ = diffAsDoubleAbsPlusOneHalfSquared - 1\n        val diffAsDoubleAbsMinusOneHalfSquaredMinusOne\
    \ = diffAsDoubleAbsMinusOneHalfSquared - 1\n        val diffAsDoubleAbsPlusOneHalfSquaredMinusOneHalf\
    \ = diffAsDoubleAbsPlusOneHalfSquaredMinusOne / 2\n        val diffAsDoubleAbsMinusOneHalfSquaredMinusOneHalf\
    \ = diffAsDoubleAbsMinusOneHalfSquaredMinusOne / 2\n        val diffAsDoubleAbsPlusOneHalfSquaredMinusOneHalfSquared\
    \ = diffAsDoubleAbsPlusOneHalfSquaredMinusOneHalf * diffAsDoubleAbsPlusOneHalfSquaredMinusOneHalf\n\
    \        val diffAsDoubleAbsMinusOneHalfSquaredMinusOneHalfSquared = diffAsDoubleAbsMinusOneHalfSquaredMinusOneHalf\
    \ * diffAsDoubleAbsMinusOneHalfSquaredMinusOneHalf\n        val diffAsDoubleAbsPlusOneHalfSquaredMinusOneHalfSquaredMinusOne\
    \ = diffAsDoubleAbsPlusOneHalfSquaredMinusOneHalfSquared - 1\n        val diff",
  "        val num = value.toLong\n        if (num.isNaN) {\n            return 0l\n\
    \        }\n        val numAsInt = num.toInt\n        val numAsFloat = num.toFloat\n\
    \        val numAsDouble = num.toDouble\n        val numAsBigInt = num.toBigInt\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimalWithScale\
    \ = num.toBigDecimal(20)\n        val numAsBigDecimalWithScaleAndPrecision = num.toBigDecimal(20,\
    \ 20)\n        val numAsBigDecimalWithPrecision = num.toBigDecimal(20)\n     \
    \   val numAsBigDecimalWithPrecisionAndScale = num.toBigDecimal(20, 20)\n    \
    \    val numAsBigDecimalWithPrecisionAndScaleAndRoundingMode = num.toBigDecimal(20,\
    \ 20, RoundingMode.HALF_UP)\n        val numAsBigDecimalWithPrecisionAndScaleAndRoundingMode\
    \ = num.toBigDecimal(20, 20, RoundingMode.HALF_UP)\n        val numAsBigDecimalWithPrecisionAndScaleAndRoundingMode\
    \ = num.toBigDecimal(20, 20, RoundingMode.HALF_UP)\n        val numAsBigDecimalWithPrecisionAndScaleAndRoundingMode\
    \ = num.toBigDecimal(20, 20, RoundingMode.HALF_UP)\n        val numAsBigDecimalWithPrecisionAndScaleAndRoundingMode\
    \ = num.toBigDecimal(20, 20, RoundingMode.HALF_UP)\n        val numAsBigDecimalWithPrecisionAndScaleAndRoundingMode\
    \ = num.toBigDecimal(20, 20, RoundingMode.HALF_UP)\n        val numAsBigDecimalWithPrecisionAndScaleAndRoundingMode\
    \ = num.toBigDecimal(20, 20, RoundingMode.HALF_UP)\n        val numAsBigDecimalWithPrecisionAndScaleAndRoundingMode\
    \ = num.toBigDecimal(20, 20, RoundingMode.HALF_UP)\n        val numAsBigDecimalWithPrecisionAndScaleAndRoundingMode\
    \ = num.to", "        val num = value.toLong\n        if (num.isNaN) {\n     \
    \       return 0l\n        }\n        val numAsInt = num.toInt\n        val numAsFloat\
    \ = num.toFloat\n        if (numAsInt.isNaN) {\n            return numAsInt\n\
    \        }\n        if (numAsFloat.isNaN) {\n            return numAsFloat\n \
    \       }\n        val numAsDouble = num.toDouble\n        if (numAsDouble.isNaN)\
    \ {\n            return numAsDouble\n        }\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        if (numAsBigDecimal.isNaN) {\n            return numAsBigDecimal\n\
    \        }\n        val numAsBigInteger = num.toBigInteger\n        if (numAsBigInteger.isNaN)\
    \ {\n            return numAsBigInteger\n        }\n        val numAsLong = num.toLong\n\
    \        if (numAsLong.isNaN) {\n            return numAsLong\n        }\n   \
    \     val numAsIntAsInt = numAsInt.toInt\n        val numAsFloatAsFloat = numAsFloat.toFloat\n\
    \        val numAsDoubleAsDouble = numAsDouble.toDouble\n        val numAsBigDecimalAsBigDecimal\
    \ = numAsBigDecimal.toBigDecimal\n        val numAsBigIntegerAsBigInteger = numAsBigInteger.toBigInteger\n\
    \        val numAsLongAsLong = numAsLong.toLong\n        val numAsIntAsIntAsInt\
    \ = numAsIntAsInt.toInt\n        val numAsFloatAsFloatAsFloat = numAsFloatAsFloat.toFloat\n\
    \        val numAsDoubleAsDoubleAsDouble = numAsDoubleAsDouble.toDouble\n    \
    \    val numAsBigDecimalAsBigDecimalAsBigDecimal = numAsBigDecimalAsBigDecimal.toBigDecimal\n\
    \        val numAsBigIntegerAsBigIntegerAsBigInteger = numAsBigIntegerAsBigInteger.toBigInteger\n\
    \        val numAsLongAsLongAsLong = numAsLongAsLong.toLong\n        val numAsIntAsIntAsIntAsInt\
    \ = numAsIntAsIntAsInt.toInt\n        val numAsFloatAsFloatAsFloatAsFloat = numAsFloatAsFloat",
  "        val num = value.toLong\n        if (num.isNaN) {\n            return 0l\n\
    \        }\n        val numAsInt = num.toInt\n        val numAsFloat = num.toFloat\n\
    \        val numAsDouble = num.toDouble\n        val numAsChar = num.toChar\n\
    \        val numAsByte = num.toByte\n        val numAsShort = num.toShort\n  \
    \      val numAsLong = num.toLong\n        val numAsBigInt = num.toBigInt\n  \
    \      val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAs", "        val num = value.toLong\n\
    \        if (num.isNaN) {\n            return 0l\n        }\n        val abs =\
    \ num.abs\n        val intPart = abs.floor\n        val fracPart = abs.subtract(intPart)\n\
    \        val frac = fracPart.toDouble\n        if (frac.isNaN) {\n           \
    \ return intPart\n        }\n        val rounded = intPart + (fracPart.div(scala.math.scalajs.js.scala_scalajs_runtime_Long().fromDouble(scala.math.scalajs.js.scala_scalajs_runtime_RuntimeString$.MODULE$.fromString(\"\
    1e\"))))\n        if (rounded.toDouble.isNaN) {\n            return intPart\n\
    \        }\n        if (abs.isNaN) {\n            return 0l\n        }\n     \
    \   if (rounded.toLong.isNaN) {\n            return 0l\n        }\n        if\
    \ (abs.toLong.isNaN) {\n            return 0l\n        }\n        if (abs.toLong.equals(rounded.toLong))\
    \ {\n            return rounded.toLong\n        }\n        return rounded.toLong",
  "        val num = value.toLong\n        if (num.isNaN) {\n            throw new\
    \ NumberFormatException(\"Not a number\")\n        }\n        val abs = num.abs\n\
    \        val sign = num.signum\n        if (abs.isInfinite) {\n            throw\
    \ new NumberFormatException(\"Infinite\")\n        }\n        if (abs.isZero)\
    \ {\n            throw new NumberFormatException(\"Zero\")\n        }\n      \
    \  if (sign == 0) {\n            throw new NumberFormatException(\"Negative zero\"\
    )\n        }\n        if (sign == 1) {\n            return num\n        }\n  \
    \      val abs_num = num.abs\n        val abs_num_int = abs_num.toInt\n      \
    \  val abs_num_long = abs_num.toLong\n        val abs_num_float = abs_num.toFloat\n\
    \        val abs_num_double = abs_num.toDouble\n        val abs_num_big_int =\
    \ abs_num.toBigInt\n        val abs_num_big_decimal = abs_num.toBigDecimal\n \
    \       val abs_num_big_float = abs_num.toBigFloat\n        val abs_num_big_double\
    \ = abs_num.toBigDouble\n        val abs_num_big_big_int = abs_num.toBigBigInt\n\
    \        val abs_num_big_big_decimal = abs_num.toBigBigDecimal\n        val abs_num_big_big_float\
    \ = abs_num.toBigBigFloat\n        val abs_num_big_big_double = abs_num.toBigBigDouble\n\
    \        val abs_num_big_big_big_int = abs_num.toBigBigBigInt\n        val abs_num_big_big_big_decimal\
    \ = abs_num.toBigBigBigDecimal\n        val abs_num_big_big_big_float = abs_num.toBigBigBigFloat\n\
    \        val abs_num_big_big_big_double = abs_num.toBigBigBigDouble\n        val\
    \ abs_num_big_big_big_big_int = abs_num.toBigBigBigBigInt\n        val abs_num_big_big_big_big_decimal\
    \ =", "        val num = value.toLong\n        if (num < 0) {\n            val\
    \ abs = Math.abs(num)\n            val max = abs.max\n            val min = abs.min\n\
    \            val diff = max - min\n            val diffAbs = diff.abs\n      \
    \      val diffAbsMin = diffAbs.min\n            val diffAbsMax = diffAbs.max\n\
    \            val diffAbsMinMax = diffAbsMin.max\n            val diffAbsMaxMin\
    \ = diffAbsMax.min\n            val diffAbsMaxMinMax = diffAbsMaxMin.max\n   \
    \         val diffAbsMaxMinMaxMin = diffAbsMaxMinMax.min\n            val diffAbsMaxMinMaxMinMax\
    \ = diffAbsMaxMinMaxMin.max\n            val diffAbsMaxMinMaxMinMaxMin = diffAbsMaxMinMaxMinMax.min\n\
    \            val diffAbsMaxMinMaxMinMaxMinMax = diffAbsMaxMinMaxMinMaxMin.max\n\
    \            val diffAbsMaxMinMaxMinMaxMinMaxMin = diffAbsMaxMinMaxMinMaxMinMax.min\n\
    \            val diffAbsMaxMinMaxMinMaxMinMaxMinMax = diffAbsMaxMinMaxMinMaxMinMaxMin.max\n\
    \            val diffAbsMaxMinMaxMinMaxMinMaxMinMaxMin = diffAbsMaxMinMaxMinMaxMinMaxMinMax.min\n\
    \            val diffAbsMaxMinMaxMinMaxMinMaxMinMaxMinMax = diffAbsMaxMinMaxMinMaxMinMaxMinMaxMin.max\n\
    \            val diffAbsMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = diffAbsMaxMinMaxMinMaxMinMaxMinMaxMinMax.min\n\
    \            val diffAbsMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = diffAbsMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin.max\n\
    \            val diffAbsMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = diffAbsMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax.min\n\
    \            val diffAbsMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = diffAbsMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin.max\n\
    \            val diffAbsMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = diffAbsMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin.min\n\
    \            val diffAbsMaxMinMaxMinMaxMinMax", "        val num = value.toLong\n\
    \        if (num.isNaN) {\n            return 0l\n        }\n        val numAsInt\
    \ = num.toInt\n        if (numAsInt.isNaN) {\n            return numAsInt\n  \
    \      }\n        val numAsFloat = num.toFloat\n        if (numAsFloat.isNaN)\
    \ {\n            return numAsFloat\n        }\n        val numAsDouble = num.toDouble\n\
    \        if (numAsDouble.isNaN) {\n            return numAsDouble\n        }\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        if (numAsBigDecimal.isNaN)\
    \ {\n            return numAsBigDecimal\n        }\n        val numAsBigInteger\
    \ = num.toBigInteger\n        if (numAsBigInteger.isNaN) {\n            return\
    \ numAsBigInteger\n        }\n        val numAsLong = num.toLong\n        if (numAsLong.isNaN)\
    \ {\n            return numAsLong\n        }\n        val numAsIntAsLong = numAsInt.toLong\n\
    \        if (numAsIntAsLong.isNaN) {\n            return numAsIntAsLong\n    \
    \    }\n        val numAsFloatAsLong = numAsFloat.toLong\n        if (numAsFloatAsLong.isNaN)\
    \ {\n            return numAsFloatAsLong\n        }\n        val numAsDoubleAsLong\
    \ = numAsDouble.toLong\n        if (numAsDoubleAsLong.isNaN) {\n            return\
    \ numAsDoubleAsLong\n        }\n        val numAsBigDecimalAsLong = numAsBigDecimal.toLong\n\
    \        if (numAsBigDecimalAsLong.isNaN) {\n            return numAsBigDecimalAsLong\n\
    \        }\n        val numAsBigIntegerAsLong = numAsBigInteger.toLong\n     \
    \   if (numAsBigIntegerAsLong.isNaN) {\n            return numAsBigIntegerAsLong\n\
    \        }\n        val numAsLongAsLong = numAsLong.toLong\n        if (numAsLongAsLong.isNaN)\
    \ {\n            return numAsLongAsLong\n        }\n        val numAsIntAsLongAsLong\
    \ = numAsIntAsLong.", "        val num = value.toLong\n        if (num < 0) {\n\
    \            val abs = Math.abs(num)\n            val floor = abs.floorDiv(1)\n\
    \            val ceil = abs.ceilDiv(1)\n            if (num.equals(floor)) {\n\
    \                return floor\n            } else if (num.equals(ceil)) {\n  \
    \              return ceil\n            } else {\n                return num\n\
    \            }\n        } else {\n            return num\n        }", "      \
    \  val num = value.toLong\n        if (num.isNaN) {\n            return 0l\n \
    \       }\n        val numAsInt = num.toInt\n        if (numAsInt.isNaN) {\n \
    \           return 0l\n        }\n        val numAsFloat = num.toFloat\n     \
    \   if (numAsFloat.isNaN) {\n            return 0l\n        }\n        val numAsDouble\
    \ = num.toDouble\n        if (numAsDouble.isNaN) {\n            return 0l\n  \
    \      }\n        val numAsBigDecimal = num.toBigDecimal\n        if (numAsBigDecimal.isNaN)\
    \ {\n            return 0l\n        }\n        val numAsBigInteger = num.toBigInteger\n\
    \        if (numAsBigInteger.isNaN) {\n            return 0l\n        }\n    \
    \    val numAsShort = num.toShort\n        if (numAsShort.isNaN) {\n         \
    \   return 0l\n        }\n        val numAsByte = num.toByte\n        if (numAsByte.isNaN)\
    \ {\n            return 0l\n        }\n        val numAsLong = num.toLong\n  \
    \      if (numAsLong.isNaN) {\n            return 0l\n        }\n        val numAsInteger\
    \ = num.toInt\n        if (numAsInteger.isNaN) {\n            return 0l\n    \
    \    }\n        val numAsFloatAsInt = numAsInt.toFloat\n        if (numAsFloatAsInt.isNaN)\
    \ {\n            return 0l\n        }\n        val numAsDoubleAsInt = numAsInt.toDouble\n\
    \        if (numAsDoubleAsInt.isNaN) {\n            return 0l\n        }\n   \
    \     val numAsBigDecimalAsInt = numAsInt.toBigDecimal\n        if (numAsBigDecimalAsInt.isNaN)\
    \ {\n            return 0l\n        }\n        val numAsBigIntegerAsInt = numAsInt.toBigInteger\n\
    \        if (numAsBigIntegerAsInt.isNaN) {\n            return 0l\n        }\n\
    \        val numAsShortAsInt = numAsInt.toShort\n        if (numAsShortAsInt.isNa",
  "        val num = value.toLong\n        if (num < 0) {\n            val abs = Math.abs(num)\n\
    \            val floor = abs.floorDiv(abs.div(abs.sub(1)))\n            val ceil\
    \ = abs.ceilDiv(abs.div(abs.sub(1)))\n            if (num.compareTo(floor) < 0)\
    \ {\n                return floor\n            } else {\n                return\
    \ ceil\n            }\n        } else {\n            return num\n        }", " \
    \       val num = value.toLong\n        if (num < 0) {\n            val abs =\
    \ Math.abs(num)\n            val nearest = abs.div(abs.div(2)).toInt\n       \
    \     if (abs.mod(nearest).isZero) {\n                return nearest\n       \
    \     } else {\n                return nearest - 1\n            }\n        } else\
    \ {\n            return num\n        }", "        val num = value.toLong\n   \
    \     if (num < 0) {\n            return -num\n        } else {\n            return\
    \ num\n        }", "        val num = value.toDouble\n        val intPart = num.intPart\n\
    \        val fracPart = num.fracPart\n        val intPartAsLong = intPart.toLong\n\
    \        val fracPartAsLong = fracPart.toLong\n        val intPartAsDouble = intPartAsLong.toDouble\n\
    \        val fracPartAsDouble = fracPartAsLong.toDouble\n        val intPartAsFloat\
    \ = intPartAsDouble.toFloat\n        val fracPartAsFloat = fracPartAsDouble.toFloat\n\
    \        val intPartAsInt = intPartAsFloat.toInt\n        val fracPartAsInt =\
    \ fracPartAsFloat.toInt\n        val intPartAsShort = intPartAsInt.toShort\n \
    \       val fracPartAsShort = fracPartAsInt.toShort\n        val intPartAsByte\
    \ = intPartAsShort.toByte\n        val fracPartAsByte = fracPartAsShort.toByte\n\
    \        val intPartAsChar = intPartAsByte.toChar\n        val fracPartAsChar\
    \ = fracPartAsByte.toChar\n        val intPartAsBoolean = intPartAsChar.toBoolean\n\
    \        val fracPartAsBoolean = fracPartAsChar.toBoolean\n        val intPartAsString\
    \ = intPartAsBoolean.toString\n        val fracPartAsString = fracPartAsBoolean.toString\n\
    \        val intPartAsInt = intPartAsString.toInt\n        val fracPartAsInt =\
    \ fracPartAsString.toInt\n        val intPartAsShort = intPartAsInt.toShort\n\
    \        val fracPartAsShort = fracPartAsInt.toShort\n        val intPartAsByte\
    \ = intPartAsShort.toByte\n        val fracPartAsByte = fracPartAsShort.toByte\n\
    \        val intPartAsChar = intPartAsByte.toChar\n        val fracPartAsChar\
    \ = fracPartAsByte.toChar\n        val intPartAsBoolean = intPartAsChar.toBoolean\n\
    \        val fracPartAsBoolean = fracPartAsChar.toBoolean\n        val intPartAsString\
    \ = intPartAsBoolean.toString\n        val fracPartAsString = fracPartAs", " \
    \       val num = value.toLong\n        if (num < 0) {\n            val abs =\
    \ Math.abs(num)\n            val floor = abs.floorDiv(1)\n            val ceil\
    \ = abs.ceilDiv(1)\n            if (num.equals(floor))\n                return\
    \ num\n            else if (num.equals(ceil))\n                return num.subtract(1)\n\
    \            else\n                return num.subtract(floor).add(1)\n       \
    \ } else {\n            val abs = Math.abs(num)\n            val floor = abs.floorDiv(1)\n\
    \            val ceil = abs.ceilDiv(1)\n            if (num.equals(floor))\n \
    \               return num\n            else if (num.equals(ceil))\n         \
    \       return num.subtract(1)\n            else\n                return num.subtract(floor).add(1)\n\
    \        }", "        val num = value.toLong\n        if (num.isNaN) {\n     \
    \       return 0l\n        }\n        val numAsInt = num.toInt\n        if (numAsInt.isNaN)\
    \ {\n            return numAsInt\n        }\n        val numAsFloat = num.toFloat\n\
    \        if (numAsFloat.isNaN) {\n            return numAsFloat\n        }\n \
    \       val numAsDouble = num.toDouble\n        if (numAsDouble.isNaN) {\n   \
    \         return numAsDouble\n        }\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        if (numAsBigDecimal.isNaN) {\n            return numAsBigDecimal\n  \
    \      }\n        val numAsBigInteger = num.toBigInteger\n        if (numAsBigInteger.isNaN)\
    \ {\n            return numAsBigInteger\n        }\n        val numAsLong = num.toLong\n\
    \        if (numAsLong.isNaN) {\n            return numAsLong\n        }\n   \
    \     val numAsIntAsBigDecimal = numAsInt.toBigDecimal\n        if (numAsIntAsBigDecimal.isNaN)\
    \ {\n            return numAsIntAsBigDecimal\n        }\n        val numAsIntAsBigInteger\
    \ = numAsInt.toBigInteger\n        if (numAsIntAsBigInteger.isNaN) {\n       \
    \     return numAsIntAsBigInteger\n        }\n        val numAsIntAsLong = numAsInt.toLong\n\
    \        if (numAsIntAsLong.isNaN) {\n            return numAsIntAsLong\n    \
    \    }\n        val numAsIntAsDouble = numAsInt.toDouble\n        if (numAsIntAsDouble.isNaN)\
    \ {\n            return numAsIntAsDouble\n        }\n        val numAsIntAsFloat\
    \ = numAsInt.toFloat\n        if (numAsIntAsFloat.isNaN) {\n            return\
    \ numAsIntAsFloat\n        }\n        val numAsIntAsBigIntegerAsLong = numAsIntAsBigInteger.toLong\n\
    \        if (numAsIntAsBigIntegerAsLong.isNaN) {\n            return numAsIntAsBigIntegerAsLong\n\
    \        }\n        val numAs", "        val v = value.toLowerCase()\n       \
    \ val num = v.replaceAll(\"[^0-9]\", \"\")\n        val num_int = Long.parseLong(num)\n\
    \        val num_int_abs = Math.abs(num_int)\n        val num_int_abs_floor =\
    \ num_int_abs.floor()\n        val num_int_abs_ceil = num_int_abs.ceil()\n   \
    \     val num_int_abs_floor_abs = Math.abs(num_int_abs_floor)\n        val num_int_abs_ceil_abs\
    \ = Math.abs(num_int_abs_ceil)\n        val num_int_abs_floor_abs_plus_one = num_int_abs_floor_abs\
    \ + 1\n        val num_int_abs_ceil_abs_minus_one = num_int_abs_ceil_abs - 1\n\
    \        val num_int_abs_floor_abs_plus_one_abs = Math.abs(num_int_abs_floor_abs_plus_one)\n\
    \        val num_int_abs_ceil_abs_minus_one_abs = Math.abs(num_int_abs_ceil_abs_minus_one)\n\
    \        val num_int_abs_floor_abs_plus_one_abs_plus_one = num_int_abs_floor_abs_plus_one_abs\
    \ + 1\n        val num_int_abs_ceil_abs_minus_one_abs_minus_one = num_int_abs_ceil_abs_minus_one_abs\
    \ - 1\n        val num_int_abs_floor_abs_plus_one_abs_plus_one_abs = Math.abs(num_int_abs_floor_abs_plus_one_abs_plus_one)\n\
    \        val num_int_abs_ceil_abs_minus_one_abs_minus_one_abs = Math.abs(num_int_abs_ceil_abs_minus_one_abs_minus_one)\n\
    \        val num_int_abs_floor_abs_plus_one_abs_plus_one_abs_plus_one = Math.abs(num_int_abs_floor_abs_plus",
  "        val num = value.toLong\n        if (num.isNaN) {\n            return 0l\n\
    \        }\n        val numAsInt = num.toInt\n        val numAsDouble = num.toDouble\n\
    \        val numAsFloat = num.toFloat\n        val numAsShort = num.toShort\n\
    \        val numAsByte = num.toByte\n        val numAsChar = num.toChar\n    \
    \    val numAsLong = num.toLong\n        val numAsBigInt = num.toBigInt\n    \
    \    val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAs", "        val num = value.toLong\n\
    \        if (num.isNaN) {\n            return 0l\n        }\n        val abs =\
    \ num.abs\n        if (abs.isNaN) {\n            return 0l\n        }\n      \
    \  val absInt = abs.toInt\n        if (absInt.isNaN) {\n            return 0l\n\
    \        }\n        val absIntPlusOne = absInt + 1\n        if (absIntPlusOne.isNaN)\
    \ {\n            return 0l\n        }\n        val absIntMinusOne = absInt - 1\n\
    \        if (absIntMinusOne.isNaN) {\n            return 0l\n        }\n     \
    \   val absIntPlusOneHalf = absIntPlusOne / 2\n        if (absIntPlusOneHalf.isNaN)\
    \ {\n            return 0l\n        }\n        val absIntMinusOneHalf = absIntMinusOne\
    \ / 2\n        if (absIntMinusOneHalf.isNaN) {\n            return 0l\n      \
    \  }\n        val absIntPlusOneHalfPlusOne = absIntPlusOneHalf + 1\n        if\
    \ (absIntPlusOneHalfPlusOne.isNaN) {\n            return 0l\n        }\n     \
    \   val absIntMinusOneHalfPlusOne = absIntMinusOneHalf + 1\n        if (absIntMinusOneHalfPlusOne.isNaN)\
    \ {\n            return 0l\n        }\n        val absIntPlusOneHalfPlusOneHalf\
    \ = absIntPlusOneHalfPlusOne / 2\n        if (absIntPlusOneHalfPlusOneHalf.isNaN)\
    \ {\n            return 0l\n        }\n        val absIntMinusOneHalfPlusOneHalf\
    \ = absIntMinusOneHalfPlusOne / 2\n        if (absIntMinusOneHalfPlusOneHalf.isNaN)\
    \ {\n            return 0l\n        }\n        val absIntPlusOneHalfPlusOneHalfPlusOne\
    \ = absIntPlusOneHalfPlusOneHalf + 1\n        if (absIntPlusOneHalfPlusOneHalfPlusOne.isNaN)\
    \ {\n            return 0l\n        }\n        val absIntMinusOneHalfPlusOneHalfPlusOne\
    \ = absIntMinusOneHalfPlusOneHalf + 1\n        if (absIntMinusOneHalfPlusOneHalfPlusOne",
  "        val num = value.toLong\n        if (num < 0) {\n            val abs = Math.abs(num)\n\
    \            val floor = abs.floor\n            val ceil = abs.ceiling\n     \
    \       val diff = abs.subtract(floor)\n            val diff2 = diff.div(2)\n\
    \            val diff3 = diff2.div(2)\n            val diff4 = diff3.div(2)\n\
    \            val diff5 = diff4.div(2)\n            val diff6 = diff5.div(2)\n\
    \            val diff7 = diff6.div(2)\n            val diff8 = diff7.div(2)\n\
    \            val diff9 = diff8.div(2)\n            val diff10 = diff9.div(2)\n\
    \            val diff11 = diff10.div(2)\n            val diff12 = diff11.div(2)\n\
    \            val diff13 = diff12.div(2)\n            val diff14 = diff13.div(2)\n\
    \            val diff15 = diff14.div(2)\n            val diff16 = diff15.div(2)\n\
    \            val diff17 = diff16.div(2)\n            val diff18 = diff17.div(2)\n\
    \            val diff19 = diff18.div(2)\n            val diff20 = diff19.div(2)\n\
    \            val diff21 = diff20.div(2)\n            val diff22 = diff21.div(2)\n\
    \            val diff23 = diff22.div(2)\n            val diff24 = diff23.div(2)\n\
    \            val diff25 = diff24.div(2)\n            val diff26 = diff25.div(2)\n\
    \            val diff27 = diff26.div(2)\n            val diff28 = diff27.div(2)\n\
    \            val diff29 = diff28.div(2)\n            val diff30 = diff29.div(2)\n\
    \            val diff31 = diff30.div(2)\n            val diff32 = diff31.div(2)\n\
    \            val diff33 = diff32.div(2)\n            val diff34 = diff33.div(2)\n\
    \            val diff35 = diff34.div(2)\n            val diff36 = diff35.div(2",
  "        val num = value.toLong\n        if (num.isNaN) {\n            return 0l\n\
    \        }\n        val numAsInt = num.toInt\n        if (numAsInt.isNaN) {\n\
    \            return num\n        }\n        val numAsFloat = num.toFloat\n   \
    \     if (numAsFloat.isNaN) {\n            return num\n        }\n        val\
    \ numAsDouble = num.toDouble\n        if (numAsDouble.isNaN) {\n            return\
    \ num\n        }\n        val numAsBigDecimal = num.toBigDecimal\n        if (numAsBigDecimal.isNaN)\
    \ {\n            return num\n        }\n        val numAsBigInteger = num.toBigInteger\n\
    \        if (numAsBigInteger.isNaN) {\n            return num\n        }\n   \
    \     val numAsShort = num.toShort\n        if (numAsShort.isNaN) {\n        \
    \    return num\n        }\n        val numAsByte = num.toByte\n        if (numAsByte.isNaN)\
    \ {\n            return num\n        }\n        val numAsChar = num.toChar\n \
    \       if (numAsChar.isNaN) {\n            return num\n        }\n        val\
    \ numAsFloatChar = num.toFloatChar\n        if (numAsFloatChar.isNaN) {\n    \
    \        return num\n        }\n        val numAsDoubleChar = num.toDoubleChar\n\
    \        if (numAsDoubleChar.isNaN) {\n            return num\n        }\n   \
    \     val numAsBigDecimalChar = num.toBigDecimalChar\n        if (numAsBigDecimalChar.isNaN)\
    \ {\n            return num\n        }\n        val numAsBigIntegerChar = num.toBigIntegerChar\n\
    \        if (numAsBigIntegerChar.isNaN) {\n            return num\n        }\n\
    \        val numAsShortChar = num.toShortChar\n        if (numAsShortChar.isNaN)\
    \ {\n            return num\n        }\n        val numAsByteChar = num.toByteChar\n\
    \        if (numAsByteChar.isNaN) {\n            return num\n        }\n     \
    \   val numAsCharChar = num.toCharChar\n        ", "        val num = value.toLong\n\
    \        if (num < 0) {\n            val abs = Math.abs(num)\n            val\
    \ res = abs / 2\n            if (abs % 2 == 1) res += 1\n            return res\n\
    \        } else {\n            val abs = Math.abs(num)\n            val res =\
    \ abs / 2\n            if (abs % 2 == 1) res -= 1\n            return res\n  \
    \      }", "        val num = value.toLong\n        if (num < 0) {\n         \
    \   val abs = Math.abs(num)\n            val max = Math.max(abs, 1)\n        \
    \    val min = Math.min(abs, 1)\n            val diff = max - min\n          \
    \  val result = num / diff\n            return result * diff\n        } else {\n\
    \            val abs = Math.abs(num)\n            val max = Math.max(abs, 1)\n\
    \            val min = Math.min(abs, 1)\n            val diff = max - min\n  \
    \          val result = num / diff\n            return result * diff\n       \
    \ }", "        val num = value.toLong\n        if (num.isNaN) {\n            return\
    \ 0l\n        }\n        val numAsInt = num.toInt\n        if (numAsInt.isNaN)\
    \ {\n            return numAsInt\n        }\n        val numAsFloat = num.toFloat\n\
    \        if (numAsFloat.isNaN) {\n            return numAsFloat\n        }\n \
    \       val numAsDouble = num.toDouble\n        if (numAsDouble.isNaN) {\n   \
    \         return numAsDouble\n        }\n        val numAsBigInt = num.toBigInt\n\
    \        if (numAsBigInt.isNaN) {\n            return numAsBigInt\n        }\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        if (numAsBigDecimal.isNaN)\
    \ {\n            return numAsBigDecimal\n        }\n        val numAsBigDecimalWithScale\
    \ = num.toBigDecimalWithScale\n        if (numAsBigDecimalWithScale.isNaN) {\n\
    \            return numAsBigDecimalWithScale\n        }\n        val numAsBigDecimalWithScaleAndPrecision\
    \ = num.toBigDecimalWithScaleAndPrecision\n        if (numAsBigDecimalWithScaleAndPrecision.isNaN)\
    \ {\n            return numAsBigDecimalWithScaleAndPrecision\n        }\n    \
    \    val numAsBigDecimalWithPrecision = num.toBigDecimalWithPrecision\n      \
    \  if (numAsBigDecimalWithPrecision.isNaN) {\n            return numAsBigDecimalWithPrecision\n\
    \        }\n        val numAsBigDecimalWithPrecisionAndScale = num.toBigDecimalWithPrecisionAndScale\n\
    \        if (numAsBigDecimalWithPrecisionAndScale.isNaN) {\n            return\
    \ numAsBigDecimalWithPrecisionAndScale\n        }\n        val numAsBigDecimalWithPrecisionAndScaleAndRoundingMode\
    \ = num.toBigDecimalWithPrecisionAndScaleAndRoundingMode\n        if (numAsBigDecimalWithPrecisionAndScaleAndRoundingMode.isNaN)\
    \ {\n            return numAsBigDecimalWithPrecisionAndScaleAndRoundingMode\n\
    \        }\n        val numAsBigDec", "        val num = value.toLong\n      \
    \  if (num < 0) {\n            val abs = Math.abs(num)\n            val floor\
    \ = abs.floorDiv(1)\n            val ceil = abs.ceilDiv(1)\n            if (num.equals(floor))\
    \ {\n                return -floor\n            } else if (num.equals(ceil)) {\n\
    \                return -ceil\n            } else {\n                return -abs\n\
    \            }\n        } else {\n            return num\n        }", "      \
    \  val num = value.toLong\n        if (num < 0) {\n            val abs = Math.abs(num)\n\
    \            val floor = abs.floorDiv(abs.div(10))\n            val ceil = abs.ceilDiv(abs.div(10))\n\
    \            if (abs.sub(floor).div(abs.sub(ceil)).toInt < 0) {\n            \
    \    return abs.sub(floor).div(abs.sub(ceil)).toInt\n            } else {\n  \
    \              return abs.sub(ceil).div(abs.sub(floor)).toInt\n            }\n\
    \        } else {\n            val abs = Math.abs(num)\n            val floor\
    \ = abs.floorDiv(abs.div(10))\n            val ceil = abs.ceilDiv(abs.div(10))\n\
    \            if (abs.sub(floor).div(abs.sub(ceil)).toInt > 0) {\n            \
    \    return abs.sub(floor).div(abs.sub(ceil)).toInt\n            } else {\n  \
    \              return abs.sub(ceil).div(abs.sub(floor)).toInt\n            }\n\
    \        }", "        val num = value.toLong\n        if (num < 0) {\n       \
    \     val abs = Math.abs(num)\n            val max = abs.max\n            val\
    \ min = abs.min\n            val diff = max - min\n            val diffAbs = diff.abs\n\
    \            val diffAbsHalf = diffAbs / 2\n            val diffAbsHalfAbs = diffAbsHalf.abs\n\
    \            val diffAbsHalfAbsHalf = diffAbsHalfAbs / 2\n            val diffAbsHalfAbsHalfHalf\
    \ = diffAbsHalfAbsHalf / 2\n            val diffAbsHalfAbsHalfHalfHalf = diffAbsHalfAbsHalfHalf\
    \ / 2\n            val diffAbsHalfAbsHalfHalfHalfHalf = diffAbsHalfAbsHalfHalfHalf\
    \ / 2\n            val diffAbsHalfAbsHalfHalfHalfHalfHalf = diffAbsHalfAbsHalfHalfHalfHalf\
    \ / 2\n            val diffAbsHalfAbsHalfHalfHalfHalfHalfHalf = diffAbsHalfAbsHalfHalfHalfHalfHalf\
    \ / 2\n            val diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalf = diffAbsHalfAbsHalfHalfHalfHalfHalfHalf\
    \ / 2\n            val diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalf = diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalf\
    \ / 2\n            val diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalfHalf = diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalf\
    \ / 2\n            val diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalfHalfHalf\
    \ = diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalfHalf / 2\n            val diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalf\
    \ = diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalfHalfHalf / 2\n            val\
    \ diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalf = diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalf\
    \ / 2\n            val diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalf\
    \ = diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalf / 2\n         \
    \   val diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalf\
    \ = diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalf / 2\n         \
    \   val diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalfHalf\
    \ = diffAbsHalfAbsHalfHalfHalfHalfHalfHalfHalfHalfHalfHalf /", "        val v\
    \ = value.toLowerCase.replaceAll(\"[^0-9]\", \"\")\n        if (v.length == 0)\
    \ {\n            return 0l\n        }\n        val v_int = Int.parseInt(v)\n \
    \       val v_float = Float.parseFloat(v)\n        if (v_int == v_float) {\n \
    \           return v_int\n        }\n        val v_float_rounded = v_float.round(2)\n\
    \        val v_int_rounded = v_int.round(2)\n        if (v_float_rounded == v_int_rounded)\
    \ {\n            return v_int_rounded\n        } else {\n            return v_float_rounded\n\
    \        }", "        val num = value.toLong\n        if (num < 0) {\n       \
    \     val abs = Math.abs(num)\n            val max = abs.max\n            val\
    \ min = abs.min\n            val diff = max - min\n            val mid = (max\
    \ + min) / 2\n            val diff2 = diff / 2\n            val diff3 = diff2\
    \ / 2\n            val diff4 = diff3 / 2\n            val diff5 = diff4 / 2\n\
    \            val diff6 = diff5 / 2\n            val diff7 = diff6 / 2\n      \
    \      val diff8 = diff7 / 2\n            val diff9 = diff8 / 2\n            val\
    \ diff10 = diff9 / 2\n            val diff11 = diff10 / 2\n            val diff12\
    \ = diff11 / 2\n            val diff13 = diff12 / 2\n            val diff14 =\
    \ diff13 / 2\n            val diff15 = diff14 / 2\n            val diff16 = diff15\
    \ / 2\n            val diff17 = diff16 / 2\n            val diff18 = diff17 /\
    \ 2\n            val diff19 = diff18 / 2\n            val diff20 = diff19 / 2\n\
    \            val diff21 = diff20 / 2\n            val diff22 = diff21 / 2\n  \
    \          val diff23 = diff22 / 2\n            val diff24 = diff23 / 2\n    \
    \        val diff25 = diff24 / 2\n            val diff26 = diff25 / 2\n      \
    \      val diff27 = diff26 / 2\n            val diff28 = diff27 / 2\n        \
    \    val diff29 = diff28 / 2\n            val diff30 = diff29 / 2\n          \
    \  val diff31 = diff30 / 2\n            val diff32 = diff31 / 2\n            val\
    \ diff33 = diff32 / 2\n            val diff34 = diff33 / 2\n            val diff35\
    \ = diff34 / 2\n            val diff36 = diff35 / 2\n            val diff37 =\
    \ diff36 / 2\n            val diff38 = diff37 / 2\n            val diff39 = diff38\
    \ / 2\n            val diff40 = diff39 / 2\n            val diff41 = diff40 /\
    \ 2\n            val diff42 = diff41 / 2\n            val diff43 = diff42 / 2\n\
    \            val diff44 = diff43 / 2\n            val diff45 = diff44 / 2\n  \
    \          val diff46 = diff45 /", "        val num = value.toLong\n        if\
    \ (num < 0) {\n            val abs = Math.abs(num)\n            val abs_int =\
    \ abs.toInt\n            val abs_long = abs.toLong\n            val abs_float\
    \ = abs.toFloat\n            val abs_double = abs.toDouble\n            val abs_big_int\
    \ = abs.toBigInt\n            val abs_big_decimal = abs.toBigDecimal\n       \
    \     val abs_big_float = abs.toBigFloat\n            val abs_big_double = abs.toBigDouble\n\
    \            val abs_big_big_int = abs.toBigBigInt\n            val abs_big_big_decimal\
    \ = abs.toBigBigDecimal\n            val abs_big_big_float = abs.toBigBigFloat\n\
    \            val abs_big_big_double = abs.toBigBigDouble\n            val abs_big_big_big_int\
    \ = abs.toBigBigBigInt\n            val abs_big_big_big_decimal = abs.toBigBigBigDecimal\n\
    \            val abs_big_big_big_float = abs.toBigBigBigFloat\n            val\
    \ abs_big_big_big_double = abs.toBigBigBigDouble\n            val abs_big_big_big_big_int\
    \ = abs.toBigBigBigBigInt\n            val abs_big_big_big_big_decimal = abs.toBigBigBigBigDecimal\n\
    \            val abs_big_big_big_big_float = abs.toBigBigBigBigFloat\n       \
    \     val abs_big_big_big_big_double = abs.toBigBigBigBigDouble\n            val\
    \ abs_big_big_big_big_big_int = abs.toBigBigBigBigBigInt\n            val abs_big_big_big_big_big_decimal\
    \ = abs.toBigBigBigBigBigDecimal\n            val abs_big_big_big_big_big_float\
    \ = abs.toBigBigBigBigBigFloat\n            val abs_big_big_big_big_big_double\
    \ = abs.toBigBigBigBigBigDouble\n            val abs_big_big_big_big_big_big_int\
    \ = abs.toBigBigBigBigBigBigInt\n", "        val num = value.toLong\n        if\
    \ (num < 0) {\n            return -num\n        } else {\n            return num\n\
    \        }", "        val num = value.toLong\n        val numAsInt = num.toInt\n\
    \        val numAsFloat = num.toFloat\n        val numAsDouble = num.toDouble\n\
    \        val numAsChar = num.toChar\n        val numAsShort = num.toShort\n  \
    \      val numAsByte = num.toByte\n        val numAsBigInt = num.toBigInt\n  \
    \      val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAs", "       \
    \ val num = value.toLong\n        if (num.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsInt = num.toInt\n        if (numAsInt.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsFloat = num.toFloat\n        if (numAsFloat.isNaN) {\n            throw\
    \ new NumberFormatException(\"NaN\")\n        }\n        val numAsDouble = num.toDouble\n\
    \        if (numAsDouble.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsBigDecimal = num.toBigDecimal\n        if\
    \ (numAsBigDecimal.isNaN) {\n            throw new NumberFormatException(\"NaN\"\
    )\n        }\n        val numAsBigInteger = num.toBigInteger\n        if (numAsBigInteger.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsLong = num.toLong\n        if (numAsLong.isNaN) {\n            throw\
    \ new NumberFormatException(\"NaN\")\n        }\n        val numAsShort = num.toShort\n\
    \        if (numAsShort.isNaN) {\n            throw new NumberFormatException(\"\
    NaN\")\n        }\n        val numAsByte = num.toByte\n        if (numAsByte.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsFloatWrapper = num.toFloatWrapper\n        if (numAsFloatWrapper.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsDoubleWrapper = num.toDoubleWrapper\n        if (numAsDoubleWrapper.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsBigDecimalWrapper = num.toBigDecimalWrapper\n        if (numAsBigDecimalWrapper.isNaN)\
    \ {\n            throw new NumberFormatException(\"NaN\")\n        }\n       \
    \ val numAsBigIntegerWrapper = num.toBigIntegerWrapper\n        if (numAsBigIntegerWrapper.",
  "        val num = value.toLong\n        if (num < 0) {\n            return -num\n\
    \        } else {\n            return num\n        }", "        val num = value.toLong\n\
    \        if (num < 0) {\n            return -num\n        } else {\n         \
    \   return num\n        }", "        val num = value.toLong\n        if (num.isNaN)\
    \ {\n            return 0l\n        }\n        val numAsInt = num.toInt\n    \
    \    val numAsFloat = num.toFloat\n        val numAsDouble = num.toDouble\n  \
    \      val numAsChar = num.toChar\n        val numAsByte = num.toByte\n      \
    \  val numAsShort = num.toShort\n        val numAsLong = num.toLong\n        val\
    \ numAsBigInt = num.toBigInt\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal =\
    \ num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n        val\
    \ numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimal = num.toBigDecimal\n\
    \        val numAs", "        val num = value.toLong\n        if (num < 0) {\n\
    \            val abs = Math.abs(num)\n            val floor = abs.floorDiv(abs.div(10))\n\
    \            val ceil = abs.ceilDiv(abs.div(10))\n            val diff = abs.sub(floor).div(abs.div(10)).toInt\n\
    \            if (diff == 0) {\n                return floor\n            } else\
    \ if (diff == 1) {\n                return ceil\n            } else {\n      \
    \          return num\n            }\n        } else {\n            val abs =\
    \ Math.abs(num)\n            val floor = abs.floorDiv(abs.div(10))\n         \
    \   val ceil = abs.ceilDiv(abs.div(10))\n            val diff = abs.sub(floor).div(abs.div(10)).toInt\n\
    \            if (diff == 0) {\n                return floor\n            } else\
    \ if (diff == 1) {\n                return ceil\n            } else {\n      \
    \          return num\n            }\n        }", "        val num = value.toLong\n\
    \        if (num.isNaN) {\n            return 0l\n        }\n        val numAsInt\
    \ = num.toInt\n        val numAsFloat = num.toFloat\n        val numAsDouble =\
    \ num.toDouble\n        val numAsChar = num.toChar\n        val numAsShort = num.toShort\n\
    \        val numAsByte = num.toByte\n        val numAsBigInt = num.toBigInt\n\
    \        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigDecimalInt\
    \ = num.toBigDecimalInt\n        val numAsBigDecimalLong = num.toBigDecimalLong\n\
    \        val numAsBigDecimalShort = num.toBigDecimalShort\n        val numAsBigDecimalByte\
    \ = num.toBigDecimalByte\n        val numAsBigDecimalChar = num.toBigDecimalChar\n\
    \        val numAsBigDecimalFloat = num.toBigDecimalFloat\n        val numAsBigDecimalDouble\
    \ = num.toBigDecimalDouble\n        val numAsBigDecimalString = num.toBigDecimalString\n\
    \        val numAsBigDecimalStringInt = num.toBigDecimalStringInt\n        val\
    \ numAsBigDecimalStringLong = num.toBigDecimalStringLong\n        val numAsBigDecimalStringShort\
    \ = num.toBigDecimalStringShort\n        val numAsBigDecimalStringByte = num.toBigDecimalStringByte\n\
    \        val numAsBigDecimalStringChar = num.toBigDecimalStringChar\n        val\
    \ numAsBigDecimalStringFloat = num.toBigDecimalStringFloat\n        val numAsBigDecimalStringDouble\
    \ = num.toBigDecimalStringDouble\n        val numAsBigDecimalStringString = num.toBigDecimalStringString\n\
    \        val numAsBigDecimalStringStringInt = num.toBigDecimalStringStringInt\n\
    \        val numAsBigDecimalStringStringLong = num.toBigDecimalStringStringLong\n\
    \        val numAsBigDecimalStringStringShort = num.toBigDecimalStringStringShort\n\
    \        val numAsBigDecimalStringStringByte = num.toBigDecimalStringStringByte\n\
    \        val numAsBigDecimalStringStringChar = num.toBigDecimalString", "    \
    \    val num = value.toLong\n        if (num < 0) {\n            val abs = Math.abs(num)\n\
    \            val floor = abs.floorDiv(1)\n            val ceil = abs.ceilDiv(1)\n\
    \            if (abs.subtract(floor).compareTo(ceil.subtract(abs)) > 0)\n    \
    \            return abs.subtract(floor).add(1)\n            else\n           \
    \     return abs.subtract(ceil).subtract(1)\n        } else {\n            val\
    \ abs = Math.abs(num)\n            val floor = abs.floorDiv(1)\n            val\
    \ ceil = abs.ceilDiv(1)\n            if (abs.subtract(floor).compareTo(ceil.subtract(abs))\
    \ > 0)\n                return abs.subtract(floor)\n            else\n       \
    \         return abs.subtract(ceil)\n        }", "        val num = value.toLong\n\
    \        if (num < 0) {\n            return -num\n        } else {\n         \
    \   return num\n        }", "        val num = value.toLong\n        if (num <\
    \ 0) {\n            val abs = Math.abs(num)\n            val max = Math.max(abs,\
    \ 1)\n            val min = Math.min(abs, 1)\n            val diff = max - min\n\
    \            val res = max - diff\n            if (diff == 0) {\n            \
    \    res = max\n            }\n            return res\n        } else {\n    \
    \        return num\n        }", "        val num = value.toLong\n        if (num\
    \ < 0) {\n            return -num\n        } else {\n            return num\n\
    \        }", "        val num = value.toDouble\n        val intPart = num.intPart\n\
    \        val fracPart = num.fracPart\n        val abs = num.abs\n        val sign\
    \ = num.signum\n        val intPartAsLong = intPart.toLong\n        val fracPartAsLong\
    \ = fracPart.toLong\n        val absAsLong = abs.toLong\n        val signAsLong\
    \ = sign.toLong\n        val intPartAsLongPlusOne = intPartAsLong + 1\n      \
    \  val intPartAsLongMinusOne = intPartAsLong - 1\n        val fracPartAsLongPlusOne\
    \ = fracPartAsLong + 1\n        val fracPartAsLongMinusOne = fracPartAsLong -\
    \ 1\n        val absAsLongPlusOne = absAsLong + 1\n        val absAsLongMinusOne\
    \ = absAsLong - 1\n        val signAsLongPlusOne = signAsLong + 1\n        val\
    \ signAsLongMinusOne = signAsLong - 1\n        val intPartAsLongPlusOneFracPartAsLong\
    \ = intPartAsLongPlusOne * fracPartAsLong\n        val intPartAsLongMinusOneFracPartAsLong\
    \ = intPartAsLongMinusOne * fracPartAsLong\n        val intPartAsLongPlusOneAbs\
    \ = intPartAsLongPlusOne * abs\n        val intPartAsLongMinusOneAbs = intPartAsLongMinusOne\
    \ * abs\n        val intPartAsLongPlusOneAbsFracPartAsLong = intPartAsLongPlusOneAbs\
    \ * fracPartAsLong\n        val intPartAsLongMinusOneAbsFracPartAsLong = intPartAsLongMinusOneAbs\
    \ * fracPartAsLong\n        val intPartAsLongPlusOneAbsFracPartAsLongPlusOne =\
    \ intPartAsLongPlusOneAbsFracPartAsLong + 1\n        val intPartAsLongMinusOneAbsFracPartAsLongMinusOne\
    \ = intPartAsLongMinusOneAbsFracPartAsLong - 1\n        val intPartAsLongPlusOneAbsFracPartAsLongMinusOne\
    \ = intPartAsLongPlusOneAbsFracPartAsLong - 1\n        val intPartAsLongMinusOneAbsFracPartAsLongPlusOne\
    \ = intPartAsLongMinusOneAbsFracPartAsLong", "        val num = value.toLong\n\
    \        if (num.isNaN) {\n            return 0l\n        }\n        val numAsInt\
    \ = num.toInt\n        val numAsFloat = num.toFloat\n        val numAsDouble =\
    \ num.toDouble\n        val numAsBigDecimal = num.toBigDecimal\n        val numAsBigInteger\
    \ = num.toBigInteger\n        val numAsShort = num.toShort\n        val numAsByte\
    \ = num.toByte\n        val numAsChar = num.toChar\n        val numAsFloatWrapper\
    \ = num.toFloatWrapper\n        val numAsDoubleWrapper = num.toDoubleWrapper\n\
    \        val numAsBigDecimalWrapper = num.toBigDecimalWrapper\n        val numAsBigIntegerWrapper\
    \ = num.toBigIntegerWrapper\n        val numAsShortWrapper = num.toShortWrapper\n\
    \        val numAsByteWrapper = num.toByteWrapper\n        val numAsCharWrapper\
    \ = num.toCharWrapper\n        val numAsFloatArray = num.toFloatArray\n      \
    \  val numAsDoubleArray = num.toDoubleArray\n        val numAsBigDecimalArray\
    \ = num.toBigDecimalArray\n        val numAsBigIntegerArray = num.toBigIntegerArray\n\
    \        val numAsShortArray = num.toShortArray\n        val numAsByteArray =\
    \ num.toByteArray\n        val numAsCharArray = num.toCharArray\n        val numAsFloatWrapperArray\
    \ = num.toFloatWrapperArray\n        val numAsDoubleWrapperArray = num.toDoubleWrapperArray\n\
    \        val numAsBigDecimalWrapperArray = num.toBigDecimalWrapperArray\n    \
    \    val numAsBigIntegerWrapperArray = num.toBigIntegerWrapperArray\n        val\
    \ numAsShortWrapperArray = num.toShortWrapperArray\n        val numAsByteWrapperArray\
    \ = num.toByteWrapperArray\n        val numAsCharWrapperArray = num.toCharWrapperArray\n\
    \        val numAsFloatArrayWrapper = num.toFloatArrayWrapper\n        val numAsDoubleArrayWrapper\
    \ = num.toDoubleArrayWrapper\n        val numAsBigDecimalArrayWrapper = num.toBigDecimalArrayWrapper\n\
    \        val", "        val num = value.toDouble\n        val abs = num.abs\n\
    \        val intPart = num.floor\n        val fracPart = num.subtract(intPart)\n\
    \        val frac = fracPart.abs\n        val intPartAsLong = intPart.toLong\n\
    \        val fracAsLong = fracPart.toLong\n        val absAsLong = abs.toLong\n\
    \        val diff = absAsLong - intPartAsLong\n        val diffAsLong = diff.abs\n\
    \        val diffAsInt = diff.toInt\n        val diffAsFrac = diff.subtract(diffAsInt)\n\
    \        val diffAsFracAsLong = diffAsFrac.toLong\n        val diffAsFracAsInt\
    \ = diffAsFrac.toInt\n        val diffAsFracAsFrac = diffAsFrac.subtract(diffAsFracAsInt)\n\
    \        val diffAsFracAsFracAsLong = diffAsFracAsFrac.toLong\n        val diffAsFracAsFracAsInt\
    \ = diffAsFracAsFrac.toInt\n        val diffAsFracAsFracAsFrac = diffAsFracAsFrac.subtract(diffAsFracAsFracAsInt)\n\
    \        val diffAsFracAsFracAsFracAsLong = diffAsFracAsFracAsFrac.toLong\n  \
    \      val diffAsFracAsFracAsFracAsInt = diffAsFracAsFracAsFrac.toInt\n      \
    \  val diffAsFracAsFracAsFracAsFrac = diffAsFracAsFracAsFracAsInt.subtract(diffAsFracAsFracAsFracAsInt)\n\
    \        val diffAsFracAsFracAsFracAsFracAsLong = diffAsFracAsFracAsFracAsFracAsInt.toLong\n\
    \        val diffAsFracAsFracAsFracAsFracAsInt = diffAsFracAsFracAsFracAsFracAsFrac.toInt\n\
    \        val diffAsFracAsFracAsFracAsFracAsFrac = diffAsFracAsFracAsFracAsFracAsFracAsInt.subtract(diffAsFrac",
  "        val num = value.toLong\n        if (num < 0) {\n            val abs = Math.abs(num)\n\
    \            val floor = abs.floorDiv(1)\n            val ceil = abs.ceilDiv(1)\n\
    \            if (abs.subtract(floor).compareTo(ceil.subtract(abs)) > 0)\n    \
    \            return -floor\n            else\n                return -ceil\n \
    \       } else {\n            val abs = Math.abs(num)\n            val floor =\
    \ abs.floorDiv(1)\n            val ceil = abs.ceilDiv(1)\n            if (abs.subtract(floor).compareTo(ceil.subtract(abs))\
    \ > 0)\n                return floor\n            else\n                return\
    \ ceil\n        }", "        val num = value.toLong\n        if (num.isNaN) {\n\
    \            return 0l\n        }\n        val abs = num.abs\n        val intPart\
    \ = abs.floor\n        val fracPart = abs.subtract(intPart)\n        val frac\
    \ = fracPart.toDouble\n        val intPartAsLong = intPart.toLong\n        val\
    \ fracAsLong = frac.toLong\n        val result = intPartAsLong + (fracAsLong /\
    \ Math.pow(10, Math.floor(Math.log10(fracAsLong))))\n        if (fracAsLong %\
    \ Math.pow(10, Math.floor(Math.log10(fracAsLong))) != 0) {\n            result\
    \ = result + 1\n        }\n        return result", "        val num = value.toLong\n\
    \        if (num.isNaN) {\n            return 0l\n        }\n        val numAsInt\
    \ = num.toInt\n        if (numAsInt.isNaN) {\n            return 0l\n        }\n\
    \        val numAsFloat = num.toFloat\n        if (numAsFloat.isNaN) {\n     \
    \       return 0l\n        }\n        val numAsDouble = num.toDouble\n       \
    \ if (numAsDouble.isNaN) {\n            return 0l\n        }\n        val numAsBigDecimal\
    \ = num.toBigDecimal\n        if (numAsBigDecimal.isNaN) {\n            return\
    \ 0l\n        }\n        val numAsBigInteger = num.toBigInteger\n        if (numAsBigInteger.isNaN)\
    \ {\n            return 0l\n        }\n        val numAsLong = num.toLong\n  \
    \      if (numAsLong.isNaN) {\n            return 0l\n        }\n        val numAsIntAsLong\
    \ = numAsInt.toLong\n        if (numAsIntAsLong.isNaN) {\n            return 0l\n\
    \        }\n        val numAsFloatAsLong = numAsFloat.toLong\n        if (numAsFloatAsLong.isNaN)\
    \ {\n            return 0l\n        }\n        val numAsDoubleAsLong = numAsDouble.toLong\n\
    \        if (numAsDoubleAsLong.isNaN) {\n            return 0l\n        }\n  \
    \      val numAsBigDecimalAsLong = numAsBigDecimal.toLong\n        if (numAsBigDecimalAsLong.isNaN)\
    \ {\n            return 0l\n        }\n        val numAsBigIntegerAsLong = numAsBigInteger.toLong\n\
    \        if (numAsBigIntegerAsLong.isNaN) {\n            return 0l\n        }\n\
    \        val numAsLongAsInt = numAsLong.toInt\n        if (numAsLongAsInt.isNaN)\
    \ {\n            return 0l\n        }\n        val numAsLongAsFloat = numAsLong.toFloat\n\
    \        if (numAsLongAsFloat.isNaN) {\n            return 0l\n        }\n   \
    \     val numAsLongAsDouble =", "        val num = value.toLong\n        if (num\
    \ < 0) {\n            val abs = Math.abs(num)\n            val floor = abs.floorDiv(1)\n\
    \            val ceil = abs.ceilDiv(1)\n            if (abs.subtract(floor).abs().min()\
    \ < abs.subtract(ceil).abs().min())\n                return num.subtract(floor).toLong\n\
    \            else\n                return num.subtract(ceil).toLong\n        }\
    \ else {\n            val abs = Math.abs(num)\n            val floor = abs.floorDiv(1)\n\
    \            val ceil = abs.ceilDiv(1)\n            if (abs.subtract(floor).abs().min()\
    \ < abs.subtract(ceil).abs().min())\n                return num.add(floor).toLong\n\
    \            else\n                return num.add(ceil).toLong\n        }"]
stop_tokens:
- "\n    }\n"
