{
  "name": "HumanEval_158_find_max",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"play\"))).equals((\"play\")));\n    }\n\n}\n",
  "completions": [
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (w : words.tail) {\n            if (w.length > maxCount) {\n                maxCount = w.length\n                max = w\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length == b.length) {\n                return a\n            } else if (a.length > b.length) {\n                return a\n            } else {\n                return b\n            }\n        })",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.apply(i).countUnique() > maxCount) {\n                maxCount = words.apply(i).countUnique()\n                max = words.apply(i)\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        var max = words.head\n        for (word <- words.tail) {\n            if (word.length > max.length) max = word\n        }\n        return max",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length == 1) {\n                return word\n            }\n            var count = 0\n            var max = \"\"\n            for (i <- 0 until word.length - 1) {\n                if (word.charAt(i) == word.charAt(i + 1)) {\n                    count += 1\n                } else {\n                    count = 1\n                }\n                if (count > max.length) {\n                    max = word.substring(i, i + 1)\n                }\n            }\n            return max\n        })",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 0\n        for(var i = 1; i < words.size; i++) {\n            var count = words.head.count(words.apply(i))\n            if(count > maxCount) {\n                max = words.apply(i)\n                maxCount = count\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (i <- words.tail) {\n            if (i.length > maxCount) {\n                maxCount = i.length\n                max = i\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (i <- words.tail.length - 1) {\n            if (words.tail[i].length > maxCount) {\n                maxCount = words.tail[i].length\n                max = words.tail[i]\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.apply(i).countUnique() > maxCount) {\n                maxCount = words.apply(i).countUnique()\n                max = words.apply(i)\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        return maxWord\n    }\n\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax2(List[String](\"name\", \"of\", \"string\"))\n    // (\"string\")\n    // >>> findMax2(List[String](\"name\", \"enam\", \"game\"))\n    // (\"enam\")\n    // >>> findMax2(List[String](\"aaaaaaa\", \"bb\", \"cc\"))\n    // (\"aaaaaaa\")\n    def findMax2(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        return maxWord",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.apply(i).countUnique() > maxCount) {\n                maxCount = words.apply(i).countUnique()\n                max = words.apply(i)\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (i <- words.tail) {\n            if (i.length > maxCount) {\n                maxCount = i.length\n                max = i\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).countUniqueChars()\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        words.foreach(w => {\n            if (w.length() == 1) {\n                return w\n            }\n        })",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (i <- words.tail.length - 1) {\n            if (words.tail[i].length > maxCount) {\n                maxCount = words.tail[i].length\n                max = words.tail[i]\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        words.foreach(word -> {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        return maxWord\n    }\n\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax2(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word -> {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        return maxWord\n    }\n\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax3(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word -> {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        return maxWord",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUnique() > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).countUnique()\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.apply(i).countUnique() > maxCount) {\n                maxCount = words.apply(i).countUnique()\n                max = words.apply(i)\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length == b.length) {\n                return a\n            } else if (a.length > b.length) {\n                return a\n            } else {\n                return b\n            }\n        })",
    "        words.sort(String.compareTo)\n        words.reduce((a, b) -> {\n            if (a.length() < b.length()) return b\n            if (a.length() > b.length()) return a\n            return a\n        })",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length == b.length) {\n                return a\n            } else if (a.length > b.length) {\n                return a\n            } else {\n                return b\n            }\n        })",
    "        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length == 1) {\n                return word\n            }\n            var count = 0\n            for (i <- 0 until word.length - 1) {\n                if (word.charAt(i) == word.charAt(i + 1)) {\n                    count += 1\n                }\n            }\n            if (count > max) {\n                max = count\n                return word\n            }\n        })",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 0\n        for (var i = 1; i < words.size(); i++) {\n            var count = words.head.count(words.apply(i))\n            if (count > maxCount) {\n                max = words.apply(i)\n                maxCount = count\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length == b.length) {\n                return a\n            } else if (a.length > b.length) {\n                return a\n            } else {\n                return b\n            }\n        })",
    "        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length() == 1) {\n                return word\n            }\n            var count = 0\n            for (i <- 0 until word.length - 1) {\n                count = count + 1\n                if (word.charAt(i) == word.charAt(i + 1)) {\n                    count = count - 1\n                }\n            }\n            if (count > 0) {\n                return word\n            }\n        })",
    "        var max = words.head\n        for (word <- words.tail) {\n            if (word.length > max.length) max = word\n        }\n        return max",
    "        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length == b.length) {\n                return a\n            } else if (a.length > b.length) {\n                return a\n            } else {\n                return b\n            }\n        })",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        var max = words.head\n        for (w in words.tail) {\n            if (w.length() > max.length()) max = w\n        }\n        return max",
    "        words.sort(String.compareTo)\n        words.foreach(x => {\n            if (x.length() > maxLen) {\n                maxLen = x.length()\n                maxWord = x\n            }\n        })\n        return maxWord",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUnique() > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).countUnique()\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).re",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length == 1) {\n                return word\n            }\n            var count = 0\n            var max = \"\"\n            for (i <- 0 until word.length - 1) {\n                count = count + 1\n                if (count > max.length) {\n                    max = word.substring(i, i + 1)\n                }\n            }\n        })\n        return max",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        return maxWord",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).countUniqueChars()\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        var max = words.head\n        for (w in words.tail) {\n            if (w.length > max.length) max = w\n        }\n        return max",
    "        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length == 1) {\n                return word\n            }\n            if (word.length > 1) {\n                var count = 0\n                for (i <- 0 until word.length - 1) {\n                    count = count + 1\n                    if (word.charAt(i) == word.charAt(i + 1)) {\n                        count = count - 1\n                    }\n                }\n                if (count > 0) {\n                    return word\n                }\n            }\n        })",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUnique() > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).countUnique()\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (i <- words.tail.length) {\n            if (words.tail[i].length > maxCount) {\n                max = words.tail[i]\n                maxCount = words.tail[i].length\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (i <- words.tail) {\n            if (i.length > maxCount) {\n                max = i\n                maxCount = i.length\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        words.foreach(x => {\n            if (x.length() > maxLen) {\n                maxLen = x.length()\n                maxWord = x\n            }\n        })\n        return maxWord",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).countUniqueChars()\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length() == 1) {\n                return word\n            }\n            if (word.length() > 1) {\n                var count = 0\n                for (i <- 0 until word.length - 1) {\n                    if (word.charAt(i) == word.charAt(i + 1)) {\n                        count += 1\n                    }\n                }\n                if (count > max) {\n                    max = count\n                    maxWord = word\n                }\n            }\n        })\n        return maxWord",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length() == 1) {\n                return word\n            }\n            if (word.length() > 1) {\n                var count = 0\n                var max = \"\"\n                for (i <- 0 until word.length()) {\n                    if (word.charAt(i) == word.charAt(i + 1)) {\n                        count += 1\n                    } else {\n                        count = 1\n                    }\n                    if (count > max.length()) {\n                        max = word.substring(i, i + 1)\n                    }\n                }\n                return max\n            }\n        })",
    "        words.sort(String.compareTo)\n        words.foreach(word -> {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        return maxWord",
    "        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length == b.length) {\n                return a\n            } else if (a.length > b.length) {\n                return a\n            } else {\n                return b\n            }\n        })",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).re",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).countUniqueChars()\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (i <- words.tail.size) {\n            if (words.tail.head.length > maxCount) {\n                maxCount = words.tail.head.length\n                max = words.tail.head\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        words.reduce((a, b) -> {\n            if (a.length() < b.length()) return b\n            else if (a.length() > b.length()) return a\n            else return a\n        })",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).countUniqueChars()\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length == b.length) {\n                return a\n            } else if (a.length > b.length) {\n                return a\n            } else {\n                return b\n            }\n        })",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length == 1) {\n                return word\n            }\n            var count = 0\n            for (i <- 0 to word.length - 1) {\n                if (word.charAt(i) == word.charAt(i + 1)) {\n                    count += 1\n                }\n            }\n            if (count > max) {\n                max = count\n                return word\n            }\n        })",
    "        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length == 1) {\n                return word\n            }\n            var count = 0\n            for (i <- 0 until word.length - 1) {\n                count += 1 if word.charAt(i) == word.charAt(i + 1) else 0\n            }\n            if (count > max) {\n                max = count\n                maxWord = word\n            }\n        })\n        return maxWord",
    "        words.sort(String.compareTo)\n        var max = words.head\n        for (i <- 1 until words.size) {\n            if (words.get(i).length > max.length) {\n                max = words.get(i)\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length == b.length) {\n                return a\n            } else if (a.length > b.length) {\n                return a\n            } else {\n                return b\n            }\n        })",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::valueOf))\n        words.sort(Comparator.comparing(String::hashCode))\n        words.sort(Comparator.comparing(String::toString))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.comparing(String::toCharArray))\n        words.sort(Comparator.",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length < b.length) return b\n            else if (a.length > b.length) return a\n            else return a\n        })",
    "        words.sort(String.compareTo)\n        var max = words.head\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > max.countUniqueChars()) {\n                max = words.get(i)\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (word <- words.tail) {\n            if (word.length > maxCount) {\n                maxCount = word.length\n                max = word\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        words.reduce((a, b) -> {\n            if (a.length() < b.length()) {\n                return b\n            } else if (a.length() > b.length()) {\n                return a\n            } else {\n                return a\n            }\n        })",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length() == 1) {\n                return word\n            }\n            if (word.length() > 1) {\n                var count = 0\n                for (i <- 0 to word.length() - 1) {\n                    if (word.charAt(i) == word.charAt(i + 1)) {\n                        count += 1\n                    } else {\n                        count = 1\n                    }\n                }\n                if (count > max) {\n                    max = count\n                    maxWord = word\n                }\n            }\n        })\n        return maxWord",
    "        words.sort(String.compareTo)\n        words.reduce((a, b) -> {\n            if (a.length() < b.length()) return b\n            else return a\n        })",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).re",
    "        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length < b.length) return b\n            else if (a.length > b.length) return a\n            else return a\n        })",
    "        words.sort(String.compareTo)\n        words.reduce((a, b) -> {\n            if (a.length() < b.length()) {\n                return b\n            } else if (a.length() > b.length()) {\n                return a\n            } else {\n                return a\n            }\n        })",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUnique() > maxCount) {\n                maxCount = words.get(i).countUnique()\n                max = words.get(i)\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        words.foreach(word -> {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        maxWord\n    }\n\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax2(List[String](\"name\", \"of\", \"string\"))\n    // (\"string\")\n    // >>> findMax2(List[String](\"name\", \"enam\", \"game\"))\n    // (\"enam\")\n    // >>> findMax2(List[String](\"aaaaaaa\", \"bb\", \"cc\"))\n    // (\"aaaaaaa\")\n    def findMax2(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word -> {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        maxWord",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 0\n        for (word <- words) {\n            var count = 0\n            for (i <- 0 until word.length) {\n                if (word.charAt(i) == max.charAt(i)) count += 1\n            }\n            if (count > maxCount) {\n                max = word\n                maxCount = count\n            }\n        }\n        max",
    "        words.sort(String.compareTo)\n        words.foreach(word => {\n            var count = 0\n            for (i <- 0 until word.length) {\n                count += 1 if word.charAt(i) == word.charAt(i + 1) else 0\n            }\n            if (count > max) max = count\n        })\n        words.foreach(word => {\n            if (word == max) return\n        })\n        max",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.apply(i).countUniqueChars() > maxCount) {\n                maxCount = words.apply(i).countUniqueChars()\n                max = words.apply(i)\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).countUniqueChars()\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (word : words.tail) {\n            var count = word.length\n            if (count > maxCount) {\n                max = word\n                maxCount = count\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (i <- words.tail) {\n            if (i.length > maxCount) {\n                maxCount = i.length\n                max = i\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (i <- words.tail) {\n            if (i.length > maxCount) {\n                maxCount = i.length\n                max = i\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (word <- words.tail) {\n            if (word.length > maxCount) {\n                maxCount = word.length\n                max = word\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        maxWord",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        words.foreach(word -> {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        maxWord\n    }\n\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax2(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word -> {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        maxWord\n    }\n\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax3(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word -> {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        maxWord\n    }",
    "        words.sort(String.compareTo)\n        words.foreach(word -> {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        return maxWord\n    }\n\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax2(List[String](\"name\", \"of\", \"string\"))\n    // (\"string\")\n    // >>> findMax2(List[String](\"name\", \"enam\", \"game\"))\n    // (\"enam\")\n    // >>> findMax2(List[String](\"aaaaaaa\", \"bb\", \"cc\"))\n    // (\"aaaaaaa\")\n    def findMax2(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(word -> {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        return maxWord",
    "        words.sort(String.compareTo)\n        words.reduce((a, b) -> {\n            if (a.length() < b.length()) {\n                return b\n            } else if (a.length() > b.length()) {\n                return a\n            } else {\n                return a\n            }\n        })",
    "        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length < b.length) return b\n            else if (a.length > b.length) return a\n            else return a\n        })",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).re",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).re",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length < b.length) return b\n            else if (a.length > b.length) return a\n            else return a\n        })",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        maxWord",
    "        words.sort(String.compareTo)\n        words.reduce((a, b) -> a.length() > b.length() ? a : b)",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUnique() > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).countUnique()\n            }\n        }\n        return max",
    "        var max = words.head\n        var maxCount = 1\n        for (w <- words.tail) {\n            var count = 0\n            for (c <- w.toCharArray) {\n                if (c == max.charAt(count)) {\n                    count += 1\n                } else {\n                    count = 1\n                }\n            }\n            if (count > maxCount) {\n                max = w\n                maxCount = count\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        var max = words.head\n        for (i <- 1 until words.size) {\n            if (words.apply(i).length > max.length) {\n                max = words.apply(i)\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 0\n        for (var i = 1; i < words.size(); i++) {\n            var count = words.head.count(words.apply(i))\n            if (count > maxCount) {\n                max = words.apply(i)\n                maxCount = count\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (w : words.tail) {\n            if (w.length > maxCount) {\n                max = w\n                maxCount = w.length\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.apply(i).countUnique() > maxCount) {\n                maxCount = words.apply(i).countUnique()\n                max = words.apply(i)\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length == b.length) {\n                return a\n            } else if (a.length > b.length) {\n                return a\n            } else {\n                return b\n            }\n        })",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).countUniqueChars()\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 0\n        for (var i = 1; i < words.size(); i++) {\n            var count = 0\n            for (var j = 0; j < words.head.length(); j++) {\n                if (words.head.charAt(j) == words.head.charAt(j + i)) {\n                    count += 1\n                }\n            }\n            if (count > maxCount) {\n                max = words.head\n                maxCount = count\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.apply(i).countUnique() > maxCount) {\n                max = words.apply(i)\n                maxCount = words.apply(i).countUnique()\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        return maxWord",
    "        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length() > maxLen) {\n                maxLen = word.length()\n                maxWord = word\n            }\n        })\n        maxWord",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.apply(i).countUnique() > maxCount) {\n                max = words.apply(i)\n                maxCount = words.apply(i).countUnique()\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        var max = words.head\n        var maxCount = words.head.length\n        for (i <- 1 until words.size) {\n            if (words.get(i).length > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).length\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        words.foreach(w => {\n            if (w.length() > maxLen) {\n                maxLen = w.length()\n                maxWord = w\n            }\n        })\n        return maxWord\n    }\n\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax2(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(w => {\n            if (w.length() > maxLen) {\n                maxLen = w.length()\n                maxWord = w\n            }\n        })\n        return maxWord\n    }\n\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax3(words : List[String]) : String = {\n        words.sort(String.compareTo)\n        words.foreach(w => {\n            if (w.length() > maxLen) {\n                maxLen = w.length()\n                maxWord = w\n            }\n        })\n        return maxWord",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        words.reduce((a, b) => {\n            if (a.length == b.length) {\n                return a\n            } else if (a.length > b.length) {\n                return a\n            } else {\n                return b\n            }\n        })",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length == 1) {\n                return word\n            }\n            var count = 0\n            for (i <- 0 until word.length - 1) {\n                count += 1 if word.charAt(i) == word.charAt(i + 1) else 0\n            }\n            if (count > max) {\n                max = count\n                maxWord = word\n            }\n        })\n        return maxWord",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 0\n        for (var w : words) {\n            if (w.length > maxCount) {\n                maxCount = w.length\n                max = w\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                maxCount = words.get(i).countUniqueChars()\n                max = words.get(i)\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).countUniqueChars()\n            }\n        }\n        return max",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (i <- words.tail) {\n            if (i.length > maxCount) {\n                max = i\n                maxCount = i.length\n            }\n        }\n        return max",
    "        var max = words.head\n        for (w in words.tail) {\n            if (countUniqueChars(w) > countUniqueChars(max)) max = w\n        }\n        return max\n    }\n\n    // Count the number of unique characters in a string.\n    // >>> countUniqueChars(\"name\")\n    // 1\n    // >>> countUniqueChars(\"name\")\n    // 2\n    // >>> countUniqueChars(\"name\")\n    // 2\n    // >>> countUniqueChars(\"name\")\n    // 2\n    def countUniqueChars(s : String) : Int = {\n        var count = 0\n        for (c in s) {\n            if (countUniqueChars.contains(c)) count += 1\n        }\n        return count\n    }\n\n    // Check if a character is unique in a string.\n    // >>> countUniqueChars.contains('a')\n    // true\n    // >>> countUniqueChars.contains('a')\n    // false\n    // >>> countUniqueChars.contains('a')\n    // false\n    def countUniqueChars(c : Char) : Boolean = {\n        return !countUniqueChars.contains(c)\n    }\n\n    // Create a new mutable set.\n    // >>> set = new HashSet()\n    // >>> set.add('a')\n    // true\n    // >>> set.add('a')\n    // false\n    // >>> set.add('a')\n    // false\n    // >>> set.add('b')\n    // true\n    // >>> set.add('b')\n    // false\n    // >>> set.add('b')\n    // false\n    // >>> set.add('c')\n    // true\n    // >>> set.add('c')\n    // false\n    // >>> set.add('c')\n    // false\n    // >>> set.add('d')\n    // true\n    // >>> set.add('d')\n    // false\n    // >>> set.add('d')\n    // false\n    // >>> set.add('e')\n    // true\n    // >>> set.add('e')\n    // false\n    // >>> set.add('e')\n    // false\n",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = 1\n        for (i <- 1 until words.size) {\n            if (words.get(i).countUniqueChars() > maxCount) {\n                max = words.get(i)\n                maxCount = words.get(i).countUniqueChars()\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        var max = words.head\n        for (i <- 1 until words.size) {\n            if (words.get(i).length > max.length) {\n                max = words.get(i)\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(String::toLowerCase))\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.sort(Comparator.comparing(",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String",
    "        words.sort(String.compareTo)\n        words.foreach(word => {\n            if (word.length() == 1) {\n                return word\n            }\n            var count = 0\n            for (i <- 0 until word.length()) {\n                if (word.charAt(i) == word.charAt(i + 1)) {\n                    count += 1\n                }\n            }\n            if (count > max) {\n                max = count\n                maxWord = word\n            }\n        })\n        return maxWord",
    "        words.sort(String.compareTo)\n        var max = words.head\n        var maxCount = words.head.length\n        for (word : words.tail) {\n            if (word.length > maxCount) {\n                max = word\n                maxCount = word.length\n            }\n        }\n        return max",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length).re",
    "        words.sort(Comparator.comparing(String::length).reversed())\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String::length))\n        words.sort(Comparator.comparing(String"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}