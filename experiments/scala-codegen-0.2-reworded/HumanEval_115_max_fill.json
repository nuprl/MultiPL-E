{
  "name": "HumanEval_115_max_fill",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a rectangular grid of wells. Each row represents a single well,\n    // and each 1 in a row represents a single unit of water.\n    // Each well has a corresponding bucket that can be used to extract water from it, \n    // and all buckets have the same capacity.\n    // Your task is to use the buckets to empty the wells.\n    // Output the number of times you need to lower the buckets.\n    // Example 1:\n    // >>> maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\n    // (6l)\n    // Example 2:\n    // >>> maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (2l))\n    // (5l)\n    // Example 3:\n    // >>> maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\n    // (0l)\n    // Constraints:\n    // * all wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]], capacity : Long) : Long = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l)) == (6l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (5l));\n    assert(maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l)) == (0l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (2l)) == (4l));\n    assert(maxFill((List[List[Long]](List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (9l)) == (2l));\n    }\n\n}\n",
  "completions": [
    "        var rows = grid.length\n        var cols = grid[0].length\n        var n = rows * cols\n        var m = n - capacity\n        var i = 0\n        var j = 0\n        var max = 0l\n        while (i < rows && j < cols) {\n            if (grid[i][j] == 1) {\n                var k = i * cols + j\n                if (m > 0) {\n                    m -= 1\n                    max = max + 1\n                }\n                i += 1\n                j += 1\n            } else {\n                i += 1\n                j += 1\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var cur = 0l\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1l) {\n                    cur += 1l\n                }\n            }\n            if (cur > max) {\n                max = cur\n            }\n        }\n        return max",
    "        var max = 0l\n        for (i <- 0 until grid.length) {\n            for (j <- 0 until grid[i].length) {\n                if (grid[i][j] == 1) {\n                    var cur = 0l\n                    for (k <- 0 until grid.length) {\n                        for (l <- 0 until grid[k].length) {\n                            if (grid[k][l] == 1) {\n                                cur += 1l\n                            }\n                        }\n                    }\n                    if (cur > max) {\n                        max = cur\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                var bucket = well.bucket\n                var water = well.water\n                if (water > 0 && bucket.water + water <= capacity) {\n                    bucket.water += water\n                    well.water = 0\n                    max = max + 1\n                }\n            }\n        }\n        return max",
    "        val rows = grid.length\n        val cols = grid[0].length\n        val well = grid[0][0]\n        val buckets = mutable.List[Long]()\n        for (i <- 0 until rows) {\n            for (j <- 0 until cols) {\n                if (grid[i][j] == 1) {\n                    buckets.append(well)\n                }\n                well = well + 1\n            }\n        }\n        val max = 0l\n        for (i <- 0 until buckets.length) {\n            val bucket = buckets[i]\n            val bucketCapacity = capacity\n            if (bucketCapacity > bucket) {\n                max = max + bucketCapacity - bucket\n            }\n        }\n        return max",
    "        var max = 0l\n        for (i <- 0 until grid.length) {\n            for (j <- 0 until grid[i].length) {\n                if (grid[i][j] == 1) {\n                    var curr = 0l\n                    for (k <- 0 until grid.length) {\n                        for (l <- 0 until grid[k].length) {\n                            if (grid[k][l] == 1) {\n                                curr += 1l\n                            }\n                        }\n                    }\n                    if (curr > max) {\n                        max = curr\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                rowMax = maxFill(row, j, capacity)\n                if (rowMax > max) max = rowMax\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var cur = 0l\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1l) {\n                    cur += 1l\n                }\n                if (cur > max) {\n                    max = cur\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 0) {\n                    continue\n                }\n                var buckets = well.toLong\n                var maxBucket = 0l\n                for (var k = 0; k < buckets.length; k++) {\n                    var bucket = buckets[k]\n                    if (bucket > maxBucket) {\n                        maxBucket = bucket\n                    }\n                }\n                max = maxBucket + 1\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 0) {\n                    continue\n                }\n                var bucket = well - 1\n                if (bucket < 0 || bucket >= capacity) {\n                    continue\n                }\n                if (well > max) {\n                    max = well\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                rowMax = Math.max(rowMax, row[j])\n                if (rowMax == 1l) {\n                    max = Math.max(max, j + 1)\n                }\n            }\n        }\n        return max",
    "        var n = grid.length\n        var m = grid[0].length\n        var i = 0\n        var j = 0\n        var max = 0l\n        var maxI = 0l\n        var maxJ = 0l\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < m; j++) {\n                if (grid[i][j] == 1l) {\n                    var c = 0l\n                    var k = i\n                    var l = j\n                    while (k < n && l < m && grid[k][l] == 1l) {\n                        c += 1l\n                        k += 1l\n                        l += 1l\n                    }\n                    if (c > max) {\n                        max = c\n                        maxI = i\n                        maxJ = j\n                    }\n                }\n            }\n        }\n        if (max == 0l) {\n            return 0l\n        }\n        var c = 0l\n        var k = maxI\n        var l = maxJ\n        while (k < n && l < m && grid[k][l] == 1l) {\n            c += 1l\n            k += 1l\n            l += 1l\n        }\n        if (c > max) {\n            max = c\n            maxI = i\n            maxJ = j\n        }\n        var c = 0l\n        var k = maxI\n        var l = maxJ\n        while (k < n && l < m && grid[k][l] == 0l) {\n            c += 1l\n            k += 1l\n            l += 1l\n        }\n        if (c > max) {\n            max = c\n            maxI = i\n            maxJ = j\n        }\n        var c = 0l\n        var k = maxI\n        var l = maxJ\n        while (k < n && l < m && grid[k][l] == 0l) {\n            c += 1l\n            k += 1l\n            l += 1l\n        }\n        if (c > max) {\n            max = c\n            maxI = i\n            maxJ = j\n        }\n        var c = 0l\n        var k = maxI",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var maxRow = 0l\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 0l) {\n                    maxRow = maxRow + 1l\n                } else {\n                    maxRow = maxRow + well\n                }\n            }\n            if (maxRow > max) {\n                max = maxRow\n            }\n        }\n        return max",
    "        var result = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1) {\n                    var curr = 0l\n                    for (var k = 0; k < grid.length; k++) {\n                        if (grid[k][j] == 1) {\n                            curr += 1l\n                        }\n                    }\n                    if (curr > result) {\n                        result = curr\n                    }\n                }\n            }\n        }\n        return result",
    "        var max = 0l\n        for (i <- 0 until grid.length) {\n            for (j <- 0 until grid[i].length) {\n                if (grid[i][j] == 1) {\n                    var curr = 0l\n                    for (k <- 0 until grid.length) {\n                        for (l <- 0 until grid[k].length) {\n                            if (grid[k][l] == 1) {\n                                curr += 1l\n                            }\n                        }\n                    }\n                    if (curr > max) {\n                        max = curr\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var n = row.length\n            var m = row[0]\n            var c = capacity\n            for (var j = 0; j < n; j++) {\n                if (row[j] == 1) {\n                    var d = j\n                    var k = 0\n                    while (k < d) {\n                        if (row[k] == 0) {\n                            row[k] = 1\n                            k = 0\n                        } else {\n                            k++\n                        }\n                    }\n                    if (m - d > c) {\n                        max = max + (m - d)\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                rowMax = Math.max(rowMax, row[j])\n            }\n            max = Math.max(max, rowMax)\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 0) {\n                    continue\n                }\n                var bucket = well - 1\n                if (bucket < 0 || bucket >= capacity) {\n                    continue\n                }\n                max = max + 1\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 0l) {\n                    rowMax += 1l\n                } else {\n                    rowMax += well\n                }\n            }\n            if (rowMax > max) {\n                max = rowMax\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 0) {\n                    continue\n                }\n                var buckets = well.toLong\n                var maxBucket = 0l\n                for (var k = 0; k < buckets.length; k++) {\n                    var bucket = buckets[k]\n                    if (bucket > maxBucket) {\n                        maxBucket = bucket\n                    }\n                }\n                max = maxBucket\n            }\n        }\n        return max",
    "        var n = grid.length\n        var m = grid[0].length\n        var max = 0l\n        for (var i = 0; i < n; i++) {\n            for (var j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    var total = 0l\n                    for (var k = 0; k < n; k++) {\n                        for (var l = 0; l < m; l++) {\n                            if (grid[k][l] == 1) {\n                                total += 1l\n                            }\n                        }\n                    }\n                    if (total > max) {\n                        max = total\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var sum = 0l\n            for (var j = 0; j < row.length; j++) {\n                sum += row[j]\n            }\n            if (sum > max) max = sum\n        }\n        var maxFill = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var sum = 0l\n            for (var j = 0; j < row.length; j++) {\n                sum += row[j]\n                if (sum > max) {\n                    maxFill += 1l\n                    sum = 0l\n                }\n            }\n        }\n        if (maxFill > max) maxFill = max\n        return maxFill",
    "        var max = 0l\n        for (i <- 0 until grid.length) {\n            for (j <- 0 until grid[i].length) {\n                if (grid[i][j] == 1) {\n                    var n = maxFill(grid, capacity)\n                    if (n > max) max = n\n                }\n            }\n        }\n        return max",
    "        var result = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1l) {\n                    var max = 0l\n                    for (var k = 0; k < grid.length; k++) {\n                        for (var l = 0; l < grid[k].length; l++) {\n                            if (grid[k][l] == 1l) {\n                                max = max + 1l\n                            }\n                        }\n                    }\n                    if (max > capacity) {\n                        result = result + max - capacity\n                    }\n                }\n            }\n        }\n        return result",
    "        var max = 0l\n        for (i <- 0 to grid.length - 1) {\n            for (j <- 0 to grid[i].length - 1) {\n                if (grid[i][j] == 1) {\n                    var n = maxFill(grid, capacity)\n                    if (n > max) max = n\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 0) {\n                    continue\n                }\n                var bucket = well - 1\n                if (bucket < 0 || bucket >= capacity) {\n                    continue\n                }\n                max = max + 1\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var well = row[0]\n            var bucket = row[1]\n            var left = row[2]\n            var right = row[3]\n            var wellCapacity = well.length\n            var bucketCapacity = capacity\n            var wellLeft = wellCapacity - bucketCapacity\n            var wellRight = wellCapacity - bucketCapacity\n            var bucketLeft = bucketCapacity - wellLeft\n            var bucketRight = bucketCapacity - wellRight\n            var wellLeftCount = well[0]\n            var wellRightCount = well[well.length - 1]\n            var bucketLeftCount = bucket[0]\n            var bucketRightCount = bucket[bucket.length - 1]\n            var leftCount = left[0]\n            var rightCount = right[0]\n            var leftCountCount = leftCount + left[left.length - 1]\n            var rightCountCount = rightCount + right[right.length - 1]\n            var wellLeftCountCount = wellLeftCount + wellLeft[wellLeft.length - 1]\n            var wellRightCountCount = wellRightCount + wellRight[wellRight.length - 1]\n            var bucketLeftCountCount = bucketLeftCount + bucketLeft[bucketLeft.length - 1]\n            var bucketRightCountCount = bucketRightCount + bucketRight[bucketRight.length - 1]\n            var leftCountCountCount = leftCountCount + leftCount[leftCount.length - 1]\n            var rightCountCountCount = rightCountCount + rightCount[rightCount.length - 1]\n            var wellLeftCountCountCount = wellLeftCountCount + wellLeftCount[wellLeftCount.length - 1]\n            var wellRightCountCountCount = wellRightCountCount + wellRightCount[wellRightCount.length - 1]\n            var bucketLeftCountCountCount = bucketLeftCountCount + bucketLeftCount[bucketLeftCount.length - 1]\n            var bucketRightCountCountCount = bucketRightCountCount + bucketRightCount[bucketRightCount.length - 1]\n            var leftCountCountCountCount = leftCountCountCount + leftCountCount[leftCountCount.length - 1]",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var bucket = mutable.List[Long]()\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1l) {\n                    bucket.append(capacity)\n                } else {\n                    bucket.append(0l)\n                }\n            }\n            var sum = 0l\n            for (var j = 0; j < bucket.length; j++) {\n                sum += bucket[j]\n            }\n            if (sum > max) {\n                max = sum\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var row_max = 0l\n            for (var j = 0; j < row.length; j++) {\n                row_max = maxFill(row, capacity)\n                if (row_max > max) max = row_max\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowCap = 0l\n            for (var j = 0; j < row.length; j++) {\n                rowCap = rowCap + row[j]\n            }\n            if (rowCap > capacity) {\n                max = max + 1l\n            }\n        }\n        return max",
    "        var n = grid.length\n        var m = grid[0].length\n        var i = 0\n        var j = 0\n        var max = 0l\n        var maxI = 0l\n        var maxJ = 0l\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    max = max(max, maxFill(grid, capacity - 1l))\n                    maxI = i\n                    maxJ = j\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (i <- 0 until grid.length) {\n            for (j <- 0 until grid[i].length) {\n                if (grid[i][j] == 1) {\n                    var n = fill(grid, i, j, capacity)\n                    if (n > max) max = n\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var n = row.length\n            var m = row[0]\n            var j = 0\n            while (j < n) {\n                var k = j\n                while (k < n && row[k] == 0) {\n                    k++\n                }\n                if (k - j >= m) {\n                    max = max + 1\n                }\n                j = k\n            }\n        }\n        return max",
    "        var max = 0l\n        for (i <- 0 until grid.length) {\n            for (j <- 0 until grid[i].length) {\n                if (grid[i][j] == 1) {\n                    var count = 0l\n                    for (k <- 0 until grid.length) {\n                        for (l <- 0 until grid[k].length) {\n                            if (grid[k][l] == 1) {\n                                count += 1l\n                            }\n                        }\n                    }\n                    if (count > max) {\n                        max = count\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowCapacity = row.length\n            var rowMax = 0l\n            for (var j = 0; j < rowCapacity; j++) {\n                var well = row[j]\n                var wellCapacity = well.length\n                var wellMax = 0l\n                for (var k = 0; k < wellCapacity; k++) {\n                    var bucket = well[k]\n                    var bucketCapacity = bucket.length\n                    var bucketMax = 0l\n                    for (var l = 0; l < bucketCapacity; l++) {\n                        var bucketValue = bucket[l]\n                        var bucketMax = maxFill(grid, capacity)\n                    }\n                }\n            }\n            max = max(max, rowMax + wellMax + bucketMax)\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 0) {\n                    continue\n                }\n                var bucket = well - 1\n                if (bucket < 0 || bucket >= capacity) {\n                    continue\n                }\n                max = max + 1\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1) {\n                    var count = 0l\n                    for (var k = 0; k < grid.length; k++) {\n                        for (var l = 0; l < grid[k].length; l++) {\n                            if (grid[k][l] == 1) {\n                                count += 1l\n                            }\n                        }\n                    }\n                    if (count > max) {\n                        max = count\n                    }\n                }\n            }\n        }\n        return max",
    "        var result = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1l) {\n                    var bucket = row[j]\n                    var left = 0l\n                    var right = 0l\n                    for (var k = 0; k < grid.length; k++) {\n                        var row2 = grid[k]\n                        for (var l = 0; l < row2.length; l++) {\n                            if (row2[l] == 1l) {\n                                left += 1l\n                            } else {\n                                right += 1l\n                            }\n                        }\n                    }\n                    result = max(result, left + right - bucket)\n                }\n            }\n        }\n        return result",
    "        var max = 0l\n        for (i <- 0 until grid.length) {\n            for (j <- 0 until grid[i].length) {\n                if (grid[i][j] == 1) {\n                    var well = i * grid[i].length + j\n                    var bucket = well / capacity\n                    var left = well % capacity\n                    var right = capacity - left\n                    if (left > 0 && grid[i][j - 1] == 0) {\n                        max = max + 1\n                    }\n                    if (right > 0 && grid[i][j + 1] == 0) {\n                        max = max + 1\n                    }\n                    if (left > 0 && grid[i - 1][j] == 0) {\n                        max = max + 1\n                    }\n                    if (right > 0 && grid[i + 1][j] == 0) {\n                        max = max + 1\n                    }\n                }\n            }\n        }\n        return max",
    "        var n = grid.length\n        var m = grid[0].length\n        var i = 0\n        var j = 0\n        var max = 0l\n        while (i < n && j < m) {\n            var well = grid[i][j]\n            if (well == 0) {\n                i += 1\n            } else {\n                j += 1\n            }\n            max = maxFill(grid, capacity)\n        }\n        return max",
    "        var result = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var bucket = mutable.List[Long]()\n            for (var j = 0; j < row.length; j++) {\n                bucket.append(row[j])\n                if (bucket.length() == capacity) {\n                    result += bucket.length()\n                    bucket = mutable.List[Long]()\n                }\n            }\n        }\n        return result",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowLength = row.length\n            var rowCapacity = capacity\n            var rowMax = 0l\n            for (var j = 0; j < rowLength; j++) {\n                if (row[j] == 1l) {\n                    rowMax = rowMax + 1l\n                }\n                if (rowMax > rowCapacity) {\n                    rowMax = rowCapacity\n                }\n                if (rowMax > max) {\n                    max = rowMax\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var sum = 0l\n            for (var j = 0; j < row.length; j++) {\n                sum += row[j]\n            }\n            if (sum > capacity) {\n                max = max + 1l\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var cur = 0l\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 1l) {\n                    cur += 1l\n                } else {\n                    cur += well\n                }\n                if (cur > max) {\n                    max = cur\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (i <- 0 until grid.length) {\n            for (j <- 0 until grid[i].length) {\n                if (grid[i][j] == 1) {\n                    var cur = 0l\n                    for (k <- 0 until grid.length) {\n                        for (l <- 0 until grid[k].length) {\n                            if (grid[k][l] == 1) {\n                                cur += 1l\n                            }\n                        }\n                    }\n                    if (cur > max) {\n                        max = cur\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                rowMax = Math.max(rowMax, row[j])\n                if (rowMax == 0l) {\n                    max = Math.max(max, j)\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 1l) {\n                    var buckets = 0l\n                    for (var k = 0; k < row.length; k++) {\n                        if (row[k] == 0l) {\n                            buckets += 1l\n                        }\n                    }\n                    if (buckets > max) {\n                        max = buckets\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                var wellMax = 0l\n                for (var k = 0; k < well.length; k++) {\n                    var bucket = well[k]\n                    if (bucket > 0) {\n                        var bucketMax = 0l\n                        for (var l = 0; l < bucket; l++) {\n                            bucketMax = maxFill(grid, capacity)\n                        }\n                        wellMax = max(wellMax, bucketMax)\n                    }\n                }\n                rowMax = max(rowMax, wellMax)\n            }\n            max = max(max, rowMax)\n        }\n        return max",
    "        val m = grid.length\n        val n = grid[0].length\n        val max = 0l\n        for (i <- 0 until m) {\n            for (j <- 0 until n) {\n                val cur = grid[i][j]\n                if (cur == 0) {\n                    val curCap = capacity\n                    val curMax = 0l\n                    for (k <- 0 until curCap) {\n                        val curBucket = i\n                        val curBucketCap = k\n                        val curBucketMax = 0l\n                        for (l <- 0 until curCap) {\n                            val curBucketCur = l\n                            if (curBucketCur < curBucketCap) {\n                                val curBucketCurCap = curBucketCur\n                                val curBucketCurMax = 0l\n                                for (m <- 0 until curCap) {\n                                    val curBucketCurCur = m\n                                    if (curBucketCurCur < curBucketCurCap) {\n                                        val curBucketCurCurCap = curBucketCurCur\n                                        val curBucketCurCurMax = 0l\n                                        for (n <- 0 until curCap) {\n                                            val curBucketCurCurCur = n\n                                            if (curBucketCurCurCur < curBucketCurCurCap) {\n                                                val curBucketCurCurCurCap = curBucketCurCurCur\n                                                val curBucketCurCurCurMax = 0l\n                                                for (o <- 0 until curCap) {\n                                                    val curBucketCurCurCurCur = o\n                                                    if (curBucketCurCurCurCur < curBucketCurCurCurCap) {\n                                                        val curBucketCurCurCurCurMax = 0l\n                                                        for (p <- 0 until curCap) {\n                                                            val curBucketCurCurCurCurCur = p\n                                                            if (curBucketCurCurCurCurCur < curBucketCurCurCurCap) {\n                                                                val curBucketCurCurCurCurCurMax = 0l\n                                                                for (q",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 1) {\n                    var buckets = 0l\n                    for (var k = 0; k < row.length; k++) {\n                        if (row[k] == 1) {\n                            buckets += 1l\n                        }\n                    }\n                    if (buckets > max) {\n                        max = buckets\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                var bucket = well.bucket\n                var water = well.water\n                var bucketCapacity = capacity\n                if (bucketCapacity > water) {\n                    bucketCapacity = water\n                }\n                if (bucketCapacity > bucket) {\n                    bucketCapacity = bucket\n                }\n                max = max + bucketCapacity - bucket\n            }\n        }\n        return max",
    "        val n = grid.length\n        val m = grid[0].length\n        val result = 0l\n        for (i <- 1 to n - 1) {\n            for (j <- 1 to m - 1) {\n                if (grid[i][j] == 1) {\n                    val left = grid[i - 1][j]\n                    val right = grid[i + 1][j]\n                    val down = grid[i][j - 1]\n                    val up = grid[i][j + 1]\n                    val top = grid[i - 1][j + 1]\n                    val bottom = grid[i + 1][j + 1]\n                    val max = Math.max(Math.max(left, right), Math.max(down, up))\n                    val min = Math.min(Math.min(left, right), Math.min(down, up))\n                    val maxCapacity = Math.min(capacity, max)\n                    val minCapacity = Math.min(capacity, min)\n                    if (maxCapacity > minCapacity) {\n                        result += maxCapacity - minCapacity\n                    }\n                }\n            }\n        }\n        return result",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var n = row.length\n            var m = row[0]\n            var s = 0l\n            for (var j = 0; j < n; j++) {\n                s += row[j]\n                if (s > m) {\n                    m = s\n                }\n            }\n            if (m > max) {\n                max = m\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 0) {\n                    var count = maxFill(grid, i, j, capacity)\n                    if (count > max) max = count\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var row_size = row.length\n            var row_capacity = capacity\n            for (var j = 0; j < row_size; j++) {\n                if (row[j] == 1l) {\n                    var bucket = row[j]\n                    var bucket_size = bucket.length\n                    var bucket_capacity = capacity\n                    for (var k = 0; k < bucket_size; k++) {\n                        if (bucket[k] == 1l) {\n                            var bucket_size_minus_1 = bucket_size - 1\n                            var row_size_minus_1 = row_size - 1\n                            var row_capacity_minus_1 = row_capacity - 1\n                            var bucket_capacity_minus_1 = bucket_capacity - 1\n                            var row_size_minus_1_plus_1 = row_size_minus_1 + 1\n                            var row_capacity_minus_1_plus_1 = row_capacity_minus_1 + 1\n                            var bucket_size_minus_1_plus_1 = bucket_size_minus_1 + 1\n                            var bucket_capacity_minus_1_plus_1 = bucket_capacity_minus_1 + 1\n                            var row_size_minus_1_plus_1_plus_1 = row_size_minus_1_plus_1 + 1\n                            var row_capacity_minus_1_plus_1_plus_1 = row_capacity_minus_1_plus_1 + 1\n                            var bucket_size_minus_1_plus_1_plus_1 = bucket_size_minus_1_plus_1 + 1\n                            var bucket_capacity_minus_1_plus_1_plus_1 = bucket_capacity_minus_1_plus_1 + 1\n                            var row_size_minus_1_plus_1_plus_1_plus_1 = row_size_minus_1_plus_1_plus_1 + 1\n                            var row_capacity_minus_1_plus_1_plus_1_plus_1 = row_capacity_minus_1_plus_1_plus_1 + 1\n                            var",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                var well = grid[i][j]\n                if (well == 0) {\n                    continue\n                }\n                var buckets = well.toLong\n                var total = 0l\n                for (var k = 0; k < buckets.length; k++) {\n                    total += buckets[k]\n                    if (total > capacity) {\n                        max += 1l\n                        total -= capacity\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                rowMax = maxFill(row, capacity)\n                if (rowMax > max) max = rowMax\n            }\n        }\n        return max",
    "        var result = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1l) {\n                    var bucket = row[j]\n                    var left = i - 1\n                    var right = i + 1\n                    var down = j - 1\n                    var up = j + 1\n                    if (left >= 0 && grid[left][j] == 0l) {\n                        bucket += grid[left][j]\n                        grid[left][j] = 0l\n                        result += 1\n                    }\n                    if (right < grid.length && grid[right][j] == 0l) {\n                        bucket += grid[right][j]\n                        grid[right][j] = 0l\n                        result += 1\n                    }\n                    if (down >= 0 && grid[i][down] == 0l) {\n                        bucket += grid[i][down]\n                        grid[i][down] = 0l\n                        result += 1\n                    }\n                    if (up < grid[i].length && grid[i][up] == 0l) {\n                        bucket += grid[i][up]\n                        grid[i][up] = 0l\n                        result += 1\n                    }\n                    if (bucket > capacity) {\n                        result += bucket - capacity\n                        bucket = capacity\n                    }\n                    row[j] = bucket\n                }\n            }\n        }\n        return result",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                var bucket = well.toLong\n                if (bucket > 0) {\n                    var left = 0l\n                    for (var k = 0; k < bucket; k++) {\n                        left += 1l\n                        if (left > capacity) {\n                            max += 1l\n                            break\n                        }\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 0) {\n                    continue\n                }\n                var bucket = well - 1\n                if (bucket < 0 || bucket >= capacity) {\n                    continue\n                }\n                max = max + 1\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1) {\n                    var curr = 1l\n                    for (var k = 0; k < grid.length; k++) {\n                        if (grid[k][j] == 1) {\n                            curr += 1l\n                        }\n                    }\n                    for (var k = 0; k < grid[i].length; k++) {\n                        if (grid[i][k] == 1) {\n                            curr += 1l\n                        }\n                    }\n                    if (curr > max) {\n                        max = curr\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                rowMax = Math.max(rowMax, row[j])\n            }\n            max = Math.max(max, rowMax)\n        }\n        max = Math.max(max, capacity)\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1l) {\n                    var buckets = row.slice(j)\n                    var filled = 0l\n                    for (var k = 0; k < buckets.length; k++) {\n                        if (buckets[k] > 0l) {\n                            filled += buckets[k]\n                        }\n                    }\n                    max = Math.max(max, filled)\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 0l) {\n                    continue\n                }\n                var buckets = well.toLong\n                var maxBuckets = 0l\n                for (var k = 0; k < buckets.length; k++) {\n                    var bucket = buckets[k]\n                    if (bucket == 0l) {\n                        continue\n                    }\n                    if (bucket > capacity) {\n                        continue\n                    }\n                    maxBuckets = maxBuckets + bucket\n                }\n                max = max + maxBuckets\n            }\n        }\n        return max",
    "        val gridLength = grid.length\n        val gridWidth = grid[0].length\n        val result = 0l\n        for (i <- 1 to gridLength - 1) {\n            for (j <- 1 to gridWidth - 1) {\n                if (grid[i][j] == 1) {\n                    val bucket = grid[i - 1][j]\n                    val left = grid[i][j - 1]\n                    val right = grid[i][j + 1]\n                    val down = grid[i + 1][j]\n                    val up = grid[i - 1][j + 1]\n                    val downLeft = grid[i + 1][j - 1]\n                    val upLeft = grid[i - 1][j - 1]\n                    val downRight = grid[i + 1][j + 1]\n                    val upRight = grid[i - 1][j + 1]\n                    val max = max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(",
    "        var result = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1) {\n                    var left = 0l\n                    var right = 0l\n                    var top = 0l\n                    var bottom = 0l\n                    for (var k = i - 1; k >= 0; k--) {\n                        if (grid[k][j] == 1) {\n                            left += 1l\n                        }\n                    }\n                    for (var k = i + 1; k < grid.length; k++) {\n                        if (grid[k][j] == 1) {\n                            right += 1l\n                        }\n                    }\n                    for (var k = j - 1; k >= 0; k--) {\n                        if (grid[i][k] == 1) {\n                            top += 1l\n                        }\n                    }\n                    for (var k = j + 1; k < grid[i].length; k++) {\n                        if (grid[i][k] == 1) {\n                            bottom += 1l\n                        }\n                    }\n                    result = Math.max(result, left + right + top + bottom)\n                }\n            }\n        }\n        return result",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1l) {\n                    var bucket = row[j]\n                    var left = 0l\n                    for (var k = 0; k < row.length; k++) {\n                        if (row[k] == 0l) {\n                            left += 1l\n                        } else {\n                            break\n                        }\n                    }\n                    if (left > max) {\n                        max = left\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                var wellMax = 0l\n                for (var k = 0; k < well.length; k++) {\n                    var bucket = well[k]\n                    var bucketMax = 0l\n                    for (var l = 0; l < bucket.length; l++) {\n                        bucketMax = Math.max(bucketMax, bucket[l])\n                    }\n                    wellMax = Math.max(wellMax, bucketMax)\n                }\n                rowMax = Math.max(rowMax, wellMax)\n            }\n            max = Math.max(max, rowMax)\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                var cur = grid[i][j]\n                if (cur == 1l) {\n                    var n = maxFill(grid, capacity - 1l)\n                    if (n > max) max = n\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var buckets = mutable.List[Long]()\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1l) {\n                    buckets.append(j)\n                }\n            }\n            var n = buckets.length\n            var m = capacity\n            var k = 0l\n            while (n > 0) {\n                if (n >= m) {\n                    k += m\n                    n -= m\n                } else {\n                    k += n\n                    n = 0l\n                }\n            }\n            max = max > k ? max : k\n        }\n        return max",
    "        var result = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 0) {\n                    var bucket = List[Long](0l, 0l, 0l, 0l)\n                    var well = List[Long](0l, 0l, 0l, 0l)\n                    for (var k = 0; k < grid.length; k++) {\n                        for (var l = 0; l < grid[k].length; l++) {\n                            if (grid[k][l] == 1) {\n                                bucket = bucket.updated(k, l, bucket.get(k, l) + 1)\n                                well = well.updated(k, l, well.get(k, l) + 1)\n                            }\n                        }\n                    }\n                    if (well.get(i, j) < capacity) {\n                        result = result + 1\n                    }\n                }\n            }\n        }\n        return result",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var n = row.length\n            var m = row[0]\n            var j = 0\n            for (var j = 0; j < n; j++) {\n                var k = row[j]\n                if (k == 1) {\n                    var c = capacity\n                    while (c > 0) {\n                        if (j + 1 < n) {\n                            c -= 1\n                            row[j + 1] += 1\n                        } else {\n                            c -= 1\n                            row[0] += 1\n                        }\n                    }\n                    max = max + 1\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1) {\n                    var curr = 0l\n                    for (var k = 0; k < grid.length; k++) {\n                        if (grid[k][j] == 1) {\n                            curr += 1l\n                        }\n                    }\n                    if (curr > max) {\n                        max = curr\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var n = row.length\n            var cur = 0l\n            for (var j = 0; j < n; j++) {\n                var well = row[j]\n                if (well == 0l) {\n                    cur = 0l\n                } else {\n                    cur += well\n                }\n                if (cur > max) {\n                    max = cur\n                }\n            }\n        }\n        return max",
    "        var rows = grid.length\n        var cols = grid[0].length\n        var n = rows * cols\n        var m = rows * cols\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var r = 0\n        var c = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c1 = 0\n        var c2 = 0\n        var c3 = 0\n        var c4 = 0\n        var c5 = 0\n        var c6 = 0\n        var c7 = 0\n        var c8 = 0\n        var c9 = 0\n        var c10 = 0\n        var c11 = 0\n        var c12 = 0\n        var c13 = 0\n        var c14 = 0\n        var c15 = 0\n        var c16 = 0\n        var c17 = 0\n        var c18 = 0\n        var c19 = 0\n        var c20 = 0\n        var c21 = 0\n        var c22 = 0\n        var c23 = 0\n        var c24 = 0\n        var c25 = 0\n        var c26 = 0\n        var c27 = 0\n        var c28 = 0\n        var c29 = 0\n        var c30 = 0\n        var c31 = 0\n        var c32 = 0\n        var c33 = 0\n        var c34 = 0\n        var c35 = 0\n        var c36 = 0\n        var c37 = 0\n        var c38 = 0\n        var c39 = 0\n        var c40 = 0\n        var c41 = 0\n        var c42 = 0\n        var c43 = 0\n        var c44 = 0\n        var c45 = 0\n        var c46 = 0\n        var c47 = 0\n        var c48 = 0\n        var c49 = 0\n        var c50 = 0\n        var c51 = 0\n        var c52 = 0\n        var c53 = 0\n        var c54 = 0\n        ",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 0l) {\n                    rowMax = 0l\n                } else {\n                    rowMax = Math.max(rowMax, well)\n                }\n            }\n            max = Math.max(max, rowMax)\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var cur = 0l\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 0l) {\n                    cur += 1l\n                } else {\n                    cur += well\n                }\n                if (cur > max) {\n                    max = cur\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1l) {\n                    var cur = 0l\n                    for (var k = 0; k < row.length; k++) {\n                        if (row[k] == 0l) {\n                            cur++\n                        }\n                    }\n                    if (cur > max) {\n                        max = cur\n                    }\n                }\n            }\n        }\n        return max",
    "        var result = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1l) {\n                    result = max(result, fill(i, j, grid, capacity))\n                }\n            }\n        }\n        return result",
    "        var n = grid.length\n        var m = grid[0].length\n        var i = 0\n        var j = 0\n        var max = 0l\n        var max_i = 0l\n        var max_j = 0l\n        var max_i_j = 0l\n        var max_i_j_i = 0l\n        var max_i_j_i_j = 0l\n        var max_i_j_i_j_i = 0l\n        var max_i_j_i_j_i_j = 0l\n        var max_i_j_i_j_i_j_i = 0l\n        var max_i_j_i_j_i_j_i_j = 0l\n        var max_i_j_i_j_i_j_i_j_i = 0l\n        var max_i_j_i_j_i_j_i_j_i_j = 0l\n        var max_i_j_i_j_i_j_i_j_i_j_i = 0l\n        var max_i_j_i_j_i_j_i_j_i_j_i_j = 0l\n        var max_i_j_i_j_i_j_i_j_i_j_i_j_i = 0l\n        var max_i_j_i_j_i_j_i_j_i_j_i_j_i_j = 0l\n        var max_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i = 0l\n        var max_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j = 0l\n        var max_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i = 0l\n        var max_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j = 0",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var maxRow = 0l\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                var maxWell = 0l\n                for (var k = 0; k < well.length; k++) {\n                    var bucket = well[k]\n                    if (bucket > maxWell) maxWell = bucket\n                }\n                maxRow = maxRow + maxWell\n            }\n            max = max + maxRow\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var n = row.length\n            var buckets = mutable.List[Long](n)\n            for (var j = 0; j < n; j++) {\n                buckets.update(j, row[j])\n            }\n            var maxBucket = 0l\n            for (var j = 0; j < n; j++) {\n                var bucket = buckets.get(j)\n                if (bucket > 0) {\n                    var nBucket = bucket\n                    for (var k = j + 1; k < n; k++) {\n                        var bucket2 = buckets.get(k)\n                        if (bucket2 > 0) {\n                            nBucket += bucket2\n                        }\n                    }\n                    if (nBucket > maxBucket) {\n                        maxBucket = nBucket\n                    }\n                }\n            }\n            if (maxBucket > max) {\n                max = maxBucket\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                var wellMax = 0l\n                for (var k = 0; k < well.length; k++) {\n                    var bucket = well[k]\n                    var bucketMax = 0l\n                    for (var l = 0; l < bucket.length; l++) {\n                        var bucketValue = bucket[l]\n                        if (bucketValue > 0) {\n                            bucketMax += bucketValue\n                        }\n                    }\n                    if (bucketMax > 0) {\n                        wellMax += bucketMax\n                    }\n                }\n                if (wellMax > 0) {\n                    rowMax += wellMax\n                }\n            }\n            if (rowMax > max) {\n                max = rowMax\n            }\n        }\n        if (max > capacity) {\n            return max - capacity\n        } else {\n            return 0l\n        }",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1l) {\n                    var count = 0l\n                    var well = i\n                    var bucket = j\n                    while (grid[well][bucket] == 1l) {\n                        count += 1l\n                        well += 1l\n                        bucket += 1l\n                    }\n                    if (count > max) max = count\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1) {\n                    var well = i\n                    var bucket = j\n                    var total = 0l\n                    while (grid[well][bucket] == 1) {\n                        total += 1l\n                        grid[well][bucket] = 0l\n                        well += 1\n                        bucket += 1\n                    }\n                    max = max > total ? max : total\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1l) {\n                    var num = maxFill(grid, i, j, capacity)\n                    max = max > num ? max : num\n                }\n            }\n        }\n        return max",
    "        val gridLength = grid.length\n        val gridWidth = grid[0].length\n        val gridHeight = grid.length\n        val gridWidthHeight = gridWidth * gridHeight\n        val gridLengthHeight = gridLength * gridHeight\n        val gridLengthWidth = gridLength * gridWidth\n        val gridWidthHeightWidth = gridWidthHeight * gridWidth\n        val gridLengthWidthWidth = gridLengthWidth * gridWidth\n        val gridLengthWidthHeight = gridLengthWidth * gridHeight\n        val gridWidthHeightHeight = gridWidthHeight * gridHeight\n        val gridWidthHeightWidthWidth = gridWidthHeightWidth * gridWidth\n        val gridLengthWidthWidthWidth = gridLengthWidthWidth * gridWidth\n        val gridLengthWidthHeightHeight = gridLengthWidthHeight * gridHeight\n        val gridWidthHeightWidthHeight = gridWidthHeightWidth * gridHeight\n        val gridWidthHeightHeightWidthWidth = gridWidthHeightHeight * gridWidth\n        val gridLengthWidthWidthWidthWidth = gridLengthWidthWidth * gridWidth\n        val gridLengthWidthHeightHeightHeight = gridLengthWidthHeight * gridHeight\n        val gridWidthHeightWidthHeightHeight = gridWidthHeightWidthHeight * gridHeight\n        val gridWidthHeightHeightWidthWidthWidth = gridWidthHeightHeightWidth * gridWidth\n        val gridLengthWidthWidthWidthWidthWidth = gridLengthWidthWidthWidth * gridWidth\n        val gridLengthWidthHeightHeightHeightHeight = gridLengthWidthHeightHeight * gridHeight\n        val gridWidthHeightWidthHeightHeightHeight = gridWidthHeightWidthHeightHeight * gridHeight\n        val gridWidthHeightHeightWidthWidthWidthWidth = gridWidthHeightHeightWidthWidthWidth * gridWidth\n        val gridLengthWidthWidthWidthWidthWidthWidth = gridLengthWidthWidthWidthWidthWidth * gridWidth\n        val gridLengthWidthHeightHeightHeightHeightHeight = gridLengthWidthHeightHeightHeightHeight * gridHeight\n        val gridWidthHeightWidthHeightHeightHeightHeight = gridWidthHeightWidthHeightHeightHeight * gridHeight\n        val gridWidthHeightHeightWidthWidthWidthWidthWidth = gridWidthHeightHeightWidthWidthWidthWidth * gridWidth\n        val gridLengthWidthWidthWidthWidthWidthWidthWidth = gridLengthWidthWidthWidthWidthWidthWidth * gridWidth\n        val gridLengthWidthHeightHeightHeightHeightHeightHeight = gridLengthWidthHeightHeightHeightHeightHeight * gridHeight\n        val gridWidthHeightWidthHeightHeightHeightHeightHeight = gridWidthHeightWidthHeightHeightHeightHeight *",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                rowMax = Math.max(rowMax, row[j])\n                if (rowMax == 0l) {\n                    max = Math.max(max, j)\n                } else {\n                    max = Math.max(max, j + 1)\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 0l) {\n                    continue\n                }\n                var bucket = well - 1l\n                if (bucket < 0 || bucket >= capacity) {\n                    continue\n                }\n                max = max + 1l\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                rowMax = Math.max(rowMax, row[j])\n            }\n            max = Math.max(max, rowMax)\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var n = row.length\n            var m = row[0]\n            var j = 0\n            for (var j = 0; j < n; j++) {\n                var k = row[j]\n                if (k == 0) {\n                    continue\n                }\n                var c = capacity\n                while (c > 0) {\n                    if (k > 0) {\n                        c -= 1\n                    }\n                    k -= 1\n                }\n                max = max > j + 1 ? max : j + 1\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1) {\n                    var bucket = row[j]\n                    var left = i - 1\n                    var right = i + 1\n                    var down = j - 1\n                    var up = j + 1\n                    if (left >= 0 && grid[left][j] == 0) {\n                        bucket += grid[left][j]\n                    }\n                    if (right < grid.length && grid[right][j] == 0) {\n                        bucket += grid[right][j]\n                    }\n                    if (down >= 0 && grid[i][down] == 0) {\n                        bucket += grid[i][down]\n                    }\n                    if (up < grid[i].length && grid[i][up] == 0) {\n                        bucket += grid[i][up]\n                    }\n                    max = max > bucket ? max : bucket\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var cur = 0l\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1l) {\n                    cur += 1l\n                }\n                if (cur > max) {\n                    max = cur\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var cur = 0l\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1l) {\n                    cur += 1l\n                }\n            }\n            if (cur > max) {\n                max = cur\n            }\n        }\n        return max",
    "        var n = grid.length\n        var m = grid[0].length\n        var i = 0\n        var j = 0\n        var max = 0l\n        var maxI = 0l\n        var maxJ = 0l\n        var maxCap = 0l\n        var maxCapI = 0l\n        var maxCapJ = 0l\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < m; j++) {\n                if (grid[i][j] == 1l) {\n                    maxCap = maxCap + 1l\n                    maxCapI = i\n                    maxCapJ = j\n                }\n            }\n        }\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < m; j++) {\n                if (grid[i][j] == 1l) {\n                    max = max + 1l\n                    maxI = i\n                    maxJ = j\n                }\n            }\n        }\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < m; j++) {\n                if (grid[i][j] == 1l) {\n                    maxCap = maxCap + 1l\n                    maxCapI = i\n                    maxCapJ = j\n                }\n            }\n        }\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < m; j++) {\n                if (grid[i][j] == 1l) {\n                    max = max + 1l\n                    maxI = i\n                    maxJ = j\n                }\n            }\n        }\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < m; j++) {\n                if (grid[i][j] == 1l) {\n                    maxCap = maxCap + 1l\n                    maxCapI = i\n                    maxCapJ = j\n                }\n            }\n        }\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < m; j++) {\n                if (grid[i][j] == 1l) {\n                    max = max + 1",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var row_max = 0l\n            for (var j = 0; j < row.length; j++) {\n                row_max = Math.max(row_max, row[j])\n            }\n            max = Math.max(max, row_max)\n        }\n        var max_row = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var row_max = 0l\n            for (var j = 0; j < row.length; j++) {\n                row_max = Math.max(row_max, row[j])\n            }\n            max_row = Math.max(max_row, row_max)\n        }\n        var max_col = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var row_max = 0l\n            for (var j = 0; j < row.length; j++) {\n                row_max = Math.max(row_max, row[j])\n            }\n            max_col = Math.max(max_col, row_max)\n        }\n        var max_well = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var row_max = 0l\n            for (var j = 0; j < row.length; j++) {\n                row_max = Math.max(row_max, row[j])\n            }\n            max_well = Math.max(max_well, row_max)\n        }\n        var max_well_row = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var row_max = 0l\n            for (var j = 0; j < row.length; j++) {\n                row_max = Math.max(row_max, row[j])\n            }\n            max_well_row = Math.max(max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var cur = 0l\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 1l) {\n                    cur += 1l\n                } else {\n                    cur += cur\n                }\n                if (cur > max) {\n                    max = cur\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                rowMax = Math.max(rowMax, row[j])\n            }\n            max = Math.max(max, rowMax)\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1l) {\n                    var well = i\n                    var bucket = j\n                    var left = 0l\n                    var right = 0l\n                    var down = 0l\n                    var up = 0l\n                    for (var k = 0; k < grid.length; k++) {\n                        var row2 = grid[k]\n                        for (var l = 0; l < row2.length; l++) {\n                            if (row2[l] == 1l) {\n                                if (k == i) {\n                                    if (l == j) {\n                                        left = 1l\n                                    } else {\n                                        right = 1l\n                                    }\n                                } else {\n                                    if (l == j) {\n                                        down = 1l\n                                    } else {\n                                        up = 1l\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    max = max + (left + right + down + up)\n                }\n            }\n        }\n        return max",
    "        var result = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowLength = row.length\n            var rowCapacity = capacity\n            for (var j = 0; j < rowLength; j++) {\n                if (row[j] == 1) {\n                    rowCapacity -= 1l\n                }\n            }\n            if (rowCapacity > 0) {\n                result += 1l\n            }\n        }\n        return result",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                var wellMax = 0l\n                for (var k = 0; k < well.length; k++) {\n                    var bucket = well[k]\n                    var bucketMax = 0l\n                    for (var l = 0; l < bucket.length; l++) {\n                        var bucketValue = bucket[l]\n                        if (bucketValue > 0) {\n                            bucketMax += bucketValue\n                        }\n                    }\n                    if (bucketMax > capacity) {\n                        bucketMax = capacity\n                    }\n                    if (bucketMax > wellMax) {\n                        wellMax = bucketMax\n                    }\n                }\n                if (wellMax > rowMax) {\n                    rowMax = wellMax\n                }\n            }\n            if (rowMax > max) {\n                max = rowMax\n            }\n        }\n        return max",
    "        var max = 0l\n        for (i <- 0 until grid.length) {\n            for (j <- 0 until grid[i].length) {\n                if (grid[i][j] == 1) {\n                    var count = 0l\n                    for (k <- 0 until grid.length) {\n                        for (l <- 0 until grid[k].length) {\n                            if (grid[k][l] == 1) {\n                                count += 1l\n                            }\n                        }\n                    }\n                    if (count > max) {\n                        max = count\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 0) {\n                    continue\n                }\n                var bucket = well - 1\n                if (bucket < 0 || bucket >= capacity) {\n                    continue\n                }\n                if (well > max) {\n                    max = well\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 0) {\n                    continue\n                }\n                var bucket = well - 1\n                if (bucket < 0 || bucket >= capacity) {\n                    continue\n                }\n                max = max + 1\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                var well = grid[i][j]\n                if (well == 1) {\n                    var buckets = List[Long](0l, 0l, 0l, 0l)\n                    for (var k = 0; k < buckets.length; k++) {\n                        var bucket = buckets[k]\n                        if (bucket + capacity > grid[i][j]) {\n                            buckets[k] = grid[i][j] - bucket\n                            if (buckets[k] > max) {\n                                max = buckets[k]\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1) {\n                    var cur = 1l\n                    for (var k = 0; k < grid.length; k++) {\n                        if (grid[k][j] == 1) {\n                            cur += 1l\n                        }\n                    }\n                    for (var k = 0; k < grid[i].length; k++) {\n                        if (grid[i][k] == 1) {\n                            cur += 1l\n                        }\n                    }\n                    if (cur > max) {\n                        max = cur\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                rowMax = maxFill(row, capacity)\n                if (rowMax > max) max = rowMax\n            }\n        }\n        return max",
    "        val gridLength = grid.length\n        val gridWidth = grid[0].length\n        val buckets = mutable.List.range(gridLength).map(i -> mutable.List.range(gridWidth).map(j -> 0l)).toList\n        val wellLength = grid[0].length\n        val wellWidth = grid[0][0]\n        val well = mutable.List.range(wellLength).map(i -> mutable.List.range(wellWidth).map(j -> 0l)).toList\n        val wellLength2 = grid[0].length\n        val wellWidth2 = grid[0][0]\n        val well2 = mutable.List.range(wellLength2).map(i -> mutable.List.range(wellWidth2).map(j -> 0l)).toList\n        val wellLength3 = grid[0].length\n        val wellWidth3 = grid[0][0]\n        val well3 = mutable.List.range(wellLength3).map(i -> mutable.List.range(wellWidth3).map(j -> 0l)).toList\n        val wellLength4 = grid[0].length\n        val wellWidth4 = grid[0][0]\n        val well4 = mutable.List.range(wellLength4).map(i -> mutable.List.range(wellWidth4).map(j -> 0l)).toList\n        val wellLength5 = grid[0].length\n        val wellWidth5 = grid[0][0]\n        val well5 = mutable.List.range(wellLength5).map(i -> mutable.List.range(wellWidth5).map(j -> 0l)).toList\n        val wellLength6 = grid[0].length\n        val wellWidth6 = grid[0][0]\n        val well6 = mutable.List.range(wellLength6).map(i -> mutable.List.range(wellWidth6).map(j -> 0l)).toList\n        val wellLength7 = grid[0].length\n        val wellWidth7 = grid[0][0]\n        val well7 = mutable.List.range(wellLength7).map(i -> mutable.List.range(wellWidth7).map(j -> 0l)).",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowLength = row.length\n            var rowCapacity = capacity\n            for (var j = 0; j < rowLength; j++) {\n                if (row[j] == 1l) {\n                    var bucket = row[j]\n                    var bucketCapacity = rowCapacity\n                    for (var k = j + 1; k < rowLength; k++) {\n                        if (row[k] == 1l) {\n                            bucketCapacity -= 1l\n                        }\n                    }\n                    if (bucketCapacity > 0l) {\n                        max = max + 1l\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                var sum = 0l\n                for (var k = 0; k < grid.length; k++) {\n                    sum += grid[k][j]\n                }\n                if (sum > capacity) {\n                    max = max + 1l\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                var count = 0l\n                for (var k = 0; k < grid[i].length; k++) {\n                    if (grid[i][k] == 1l) {\n                        count += 1l\n                    }\n                }\n                if (count > max) {\n                    max = count\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var n = row.length\n            var m = row[0]\n            var s = 0l\n            for (var j = 0; j < n; j++) {\n                if (row[j] == 1l) {\n                    s += 1l\n                }\n            }\n            if (s > max) {\n                max = s\n            }\n        }\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var n = row.length\n            var m = row[0]\n            var s = 0l\n            for (var j = 0; j < n; j++) {\n                if (row[j] == 1l) {\n                    s += 1l\n                }\n            }\n            if (s == max) {\n                max -= 1l\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1l) {\n                    var bucket = row[j]\n                    var left = 0l\n                    for (var k = 0; k < row.length; k++) {\n                        if (row[k] == 0l) {\n                            left += 1l\n                        } else {\n                            break\n                        }\n                    }\n                    var right = 0l\n                    for (var k = row.length - 1; k >= 0; k--) {\n                        if (row[k] == 0l) {\n                            right += 1l\n                        } else {\n                            break\n                        }\n                    }\n                    var cur = left + right\n                    if (cur > max) {\n                        max = cur\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var n = row.length\n            var m = row[0]\n            var s = 0l\n            for (var j = 0; j < n; j++) {\n                if (row[j] == 1l) {\n                    s += 1l\n                }\n            }\n            if (s > max) {\n                max = s\n            }\n        }\n        var n = grid.length\n        var m = grid[0].length\n        var s = 0l\n        for (var i = 0; i < n; i++) {\n            for (var j = 0; j < m; j++) {\n                if (grid[i][j] == 1l) {\n                    s += 1l\n                }\n            }\n        }\n        if (s > max) {\n            max = s\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                rowMax = Math.max(rowMax, row[j])\n                if (rowMax == 1l) {\n                    max = Math.max(max, j + 1)\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var n = row.length\n            var m = row[0]\n            for (var j = 0; j < n; j++) {\n                if (row[j] == 1) {\n                    var c = 0l\n                    for (var k = 0; k < m; k++) {\n                        if (row[k] == 1) {\n                            c += 1l\n                        }\n                    }\n                    if (c > max) {\n                        max = c\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1) {\n                    var cur = 1l\n                    for (var k = i - 1; k <= i + 1; k++) {\n                        for (var l = j - 1; l <= j + 1; l++) {\n                            if (k >= 0 && k < grid.length && l >= 0 && l < grid[i].length && grid[k][l] == 1) {\n                                cur += 1l\n                            }\n                        }\n                    }\n                    if (cur > max) {\n                        max = cur\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var maxRow = 0l\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                var maxWell = 0l\n                for (var k = 0; k < well.length; k++) {\n                    var bucket = well[k]\n                    if (bucket > 0) {\n                        maxWell = maxWell + bucket\n                    }\n                }\n                maxRow = maxRow + maxWell\n            }\n            max = max + maxRow\n        }\n        max = max + capacity\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowLength = row.length\n            var rowCapacity = capacity\n            for (var j = 0; j < rowLength; j++) {\n                if (row[j] == 1l) {\n                    var bucket = row[j]\n                    var bucketCapacity = rowCapacity\n                    for (var k = j + 1; k < rowLength; k++) {\n                        if (row[k] == 1l) {\n                            bucketCapacity -= 1l\n                        }\n                    }\n                    if (bucketCapacity > 0l) {\n                        max = max + 1l\n                    }\n                }\n            }\n        }\n        return max",
    "        var result = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 0) {\n                    continue\n                }\n                var bucket = well - 1\n                if (bucket < 0 || bucket >= capacity) {\n                    continue\n                }\n                result = max(result, bucket)\n            }\n        }\n        return result",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1l) {\n                    var count = 0l\n                    for (var k = 0; k < grid.length; k++) {\n                        for (var l = 0; l < grid[k].length; l++) {\n                            if (grid[k][l] == 1l) {\n                                count += 1l\n                            }\n                        }\n                    }\n                    if (count > max) {\n                        max = count\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var cur = 0l\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1l) {\n                    cur += 1l\n                }\n                if (cur > max) {\n                    max = cur\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 0) {\n                    continue\n                }\n                var bucket = well - 1\n                if (bucket < 0 || bucket >= capacity) {\n                    continue\n                }\n                max = max + 1\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var cur = 0l\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 0l) {\n                    cur = 0l\n                } else {\n                    cur += well\n                }\n                if (cur > max) {\n                    max = cur\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                var wellMax = 0l\n                for (var k = 0; k < well.length; k++) {\n                    var bucket = well[k]\n                    if (bucket > 0) {\n                        var bucketMax = 0l\n                        for (var l = 0; l < bucket; l++) {\n                            bucketMax = maxFill(grid, capacity)\n                        }\n                        wellMax = maxFill(well, capacity)\n                        max = max(max, wellMax + bucketMax)\n                    }\n                }\n                rowMax = max(rowMax, wellMax)\n            }\n            max = max(max, rowMax)\n        }\n        return max",
    "        var n = grid.length\n        var m = grid[0].length\n        var i = 0\n        var j = 0\n        var max = 0l\n        var maxI = 0l\n        var maxJ = 0l\n        var maxC = 0l\n        var maxI2 = 0l\n        var maxJ2 = 0l\n        var maxC2 = 0l\n        var maxI3 = 0l\n        var maxJ3 = 0l\n        var maxC3 = 0l\n        var maxI4 = 0l\n        var maxJ4 = 0l\n        var maxC4 = 0l\n        var maxI5 = 0l\n        var maxJ5 = 0l\n        var maxC5 = 0l\n        var maxI6 = 0l\n        var maxJ6 = 0l\n        var maxC6 = 0l\n        var maxI7 = 0l\n        var maxJ7 = 0l\n        var maxC7 = 0l\n        var maxI8 = 0l\n        var maxJ8 = 0l\n        var maxC8 = 0l\n        var maxI9 = 0l\n        var maxJ9 = 0l\n        var maxC9 = 0l\n        var maxI10 = 0l\n        var maxJ10 = 0l\n        var maxC10 = 0l\n        var maxI11 = 0l\n        var maxJ11 = 0l\n        var maxC11 = 0l\n        var maxI12 = 0l\n        var maxJ12 = 0l\n        var maxC12 = 0l\n        var maxI13 = 0l\n        var maxJ13 = 0l\n        var maxC13 = 0l\n        var maxI14 = 0l\n        var maxJ14 = 0l\n        var maxC14 = 0l\n        var maxI15 = 0l\n        var maxJ15 = 0l\n        var maxC15 = 0l\n        var maxI16 = 0l\n        var maxJ16 = 0l\n        var maxC16 = 0l\n        var maxI17 = 0l\n        var maxJ17 = 0l\n        var maxC17 = 0l\n        var maxI18 = 0l\n        var maxJ18 = 0l\n        ",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var n = row.length\n            var buckets = mutable.List[Long](n)\n            for (var j = 0; j < n; j++) {\n                buckets.update(j, row[j])\n            }\n            var nb = mutable.List[Long](n)\n            for (var j = 0; j < n; j++) {\n                nb.update(j, buckets.apply(j) - 1)\n            }\n            for (var j = 0; j < n; j++) {\n                if (nb.apply(j) > 0) {\n                    max = max + 1\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                var well = grid[i][j]\n                if (well == 0) {\n                    continue\n                }\n                var bucket = well - 1\n                if (bucket < 0 || bucket >= capacity) {\n                    continue\n                }\n                max = max + 1\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var row_max = 0l\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                var well_max = 0l\n                for (var k = 0; k < well.length; k++) {\n                    var bucket = well[k]\n                    var bucket_max = 0l\n                    for (var l = 0; l < bucket.length; l++) {\n                        bucket_max = Math.max(bucket_max, bucket[l] + well_max)\n                    }\n                    well_max = Math.max(well_max, bucket_max)\n                }\n                row_max = Math.max(row_max, well_max)\n            }\n            max = Math.max(max, row_max)\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 1) {\n                    var bucket = 0l\n                    for (var k = 0; k < row.length; k++) {\n                        if (row[k] == 1) {\n                            bucket += 1l\n                        }\n                    }\n                    if (bucket > max) {\n                        max = bucket\n                    }\n                }\n            }\n        }\n        return max",
    "        val gridSize = grid.length\n        val bucketSize = grid[0].length\n        val maxBucket = capacity\n        val maxBucketSize = bucketSize\n        val maxBucketIndex = 0\n        val maxBucketCount = 0\n        val maxBucketCountIndex = 0\n        val maxBucketCountCount = 0\n        val maxBucketCountCountIndex = 0\n        val maxBucketCountCountCount = 0\n        val maxBucketCountCountCountIndex = 0\n        val maxBucketCountCountCountCount = 0\n        val maxBucketCountCountCountCountIndex = 0\n        val maxBucketCountCountCountCountCount = 0\n        val maxBucketCountCountCountCountCountIndex = 0\n        val maxBucketCountCountCountCountCountCount = 0\n        val maxBucketCountCountCountCountCountCountIndex = 0\n        val maxBucketCountCountCountCountCountCountCount = 0\n        val maxBucketCountCountCountCountCountCountCountIndex = 0\n        val maxBucketCountCountCountCountCountCountCountCount = 0\n        val maxBucketCountCountCountCountCountCountCountCountIndex = 0\n        val maxBucketCountCountCountCountCountCountCountCountCount = 0\n        val maxBucketCountCountCountCountCountCountCountCountCountIndex = 0\n        val maxBucketCountCountCountCountCountCountCountCountCountCount = 0\n        val maxBucketCountCountCountCountCountCountCountCountCountCountIndex = 0\n        val maxBucketCountCountCountCountCountCountCountCountCountCountCount = 0\n        val maxBucketCountCountCountCountCountCountCountCountCountCountCountIndex = 0\n        val maxBucketCountCountCountCountCountCountCountCountCountCountCountCount = 0\n        val maxBucketCountCountCountCountCountCountCountCountCountCountCountCountIndex = 0\n        val maxBucketCountCountCountCountCountCountCountCountCountCountCountCountCount = 0\n        val maxBucketCountCountCountCountCountCountCountCountCountCountCountCountCountIndex = 0\n        val maxBucketCountCountCountCountCountCountCountCountCountCountCountCountCountCount = 0\n        val maxBucketCountCountCountCountCountCountCountCountCountCountCountCountCountCountIndex = 0\n        val maxBucketCountCountCountCountCountCountCountCountCountCountCountCount",
    "        var result = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1l) {\n                    var bucket = row[j]\n                    var left = j - 1\n                    while (left >= 0 && grid[i][left] == 0l) {\n                        bucket += grid[i][left]\n                        left -= 1\n                    }\n                    var right = j + 1\n                    while (right < row.length && grid[i][right] == 0l) {\n                        bucket += grid[i][right]\n                        right += 1\n                    }\n                    if (bucket > capacity) {\n                        result += 1l\n                    }\n                }\n            }\n        }\n        return result",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                rowMax = Math.max(rowMax, row[j])\n            }\n            max = Math.max(max, rowMax)\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var curr = 0l\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 1l) {\n                    curr += 1l\n                } else {\n                    curr += well\n                }\n                if (curr > max) {\n                    max = curr\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var cur = 0l\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 0l) {\n                    cur = 0l\n                } else {\n                    cur += well\n                    if (cur > max) {\n                        max = cur\n                    }\n                    cur = 0l\n                }\n            }\n        }\n        if (max > capacity) {\n            return max - capacity\n        } else {\n            return 0l\n        }",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1l) {\n                    var count = 0l\n                    for (var k = 0; k < grid.length; k++) {\n                        for (var l = 0; l < grid[k].length; l++) {\n                            if (grid[k][l] == 1l) {\n                                count += 1l\n                            }\n                        }\n                    }\n                    if (count > max) {\n                        max = count\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var cur = 0l\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1l) {\n                    cur += 1l\n                }\n                if (cur > max) {\n                    max = cur\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                var bucket = well.bucket\n                if (bucket.size() > capacity) {\n                    max = max + bucket.size() - capacity\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowCap = capacity\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1l) {\n                    rowCap -= 1l\n                }\n                if (rowCap == 0l) {\n                    max += 1l\n                    break\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 0) {\n                    continue\n                }\n                var bucket = well - 1\n                if (bucket < 0 || bucket >= capacity) {\n                    continue\n                }\n                max = max + 1\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1) {\n                    var count = 0l\n                    for (var k = 0; k < grid.length; k++) {\n                        for (var l = 0; l < grid[k].length; l++) {\n                            if (grid[k][l] == 1) {\n                                count += 1l\n                            }\n                        }\n                    }\n                    if (count > max) {\n                        max = count\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1l) {\n                    var fill = fill(grid, i, j, capacity)\n                    if (fill > max) max = fill\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var well = row[0]\n            var bucket = row[1]\n            var n = well.length\n            var m = bucket.length\n            var c = capacity\n            var i0 = 0l\n            var j0 = 0l\n            var i1 = 0l\n            var j1 = 0l\n            var i2 = 0l\n            var j2 = 0l\n            var i3 = 0l\n            var j3 = 0l\n            var i4 = 0l\n            var j4 = 0l\n            var i5 = 0l\n            var j5 = 0l\n            var i6 = 0l\n            var j6 = 0l\n            var i7 = 0l\n            var j7 = 0l\n            var i8 = 0l\n            var j8 = 0l\n            var i9 = 0l\n            var j9 = 0l\n            var i10 = 0l\n            var j10 = 0l\n            var i11 = 0l\n            var j11 = 0l\n            var i12 = 0l\n            var j12 = 0l\n            var i13 = 0l\n            var j13 = 0l\n            var i14 = 0l\n            var j14 = 0l\n            var i15 = 0l\n            var j15 = 0l\n            var i16 = 0l\n            var j16 = 0l\n            var i17 = 0l\n            var j17 = 0l\n            var i18 = 0l\n            var j18 = 0l\n            var i19 = 0l\n            var j19 = 0l\n            var i20 = 0l\n            var j20 = 0l\n            var i21 = 0l\n            var j21 = 0l\n            var i22 = 0l\n            var j22 = 0l\n            var i23 = 0l\n            var j23 = 0l\n            var i24 = 0l\n            var j24 = 0l\n            var i25 = 0l\n            var j25 = 0l\n            var i26 = 0l\n            var j26 = 0l\n            var i27 = 0",
    "        var max = 0l\n        for (i <- 0 until grid.length) {\n            for (j <- 0 until grid[i].length) {\n                if (grid[i][j] == 1) {\n                    var cur = 0l\n                    for (k <- 0 until grid.length) {\n                        for (l <- 0 until grid[k].length) {\n                            if (grid[k][l] == 1) {\n                                cur += 1l\n                            }\n                        }\n                    }\n                    if (cur > max) {\n                        max = cur\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowLength = row.length\n            var rowCapacity = capacity\n            for (var j = 0; j < rowLength; j++) {\n                if (row[j] == 1l) {\n                    rowCapacity -= 1l\n                }\n            }\n            max = Math.max(max, rowCapacity)\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var n = row.length\n            var j = 0\n            while (j < n) {\n                var c = row[j]\n                if (c == 0) {\n                    var k = j\n                    while (k < n && row[k] == 0) {\n                        k += 1\n                    }\n                    var l = k - j\n                    if (l > max) {\n                        max = l\n                    }\n                }\n                j += 1\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var row_max = 0l\n            for (var j = 0; j < row.length; j++) {\n                row_max = Math.max(row_max, row[j])\n                max = Math.max(max, row_max)\n            }\n            max = Math.max(max, row_max)\n        }\n        max = Math.max(max, capacity)\n        return max",
    "        var result = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1) {\n                    var bucket = List[Long](0l, 0l, 0l, 0l)\n                    for (var k = 0; k < grid.length; k++) {\n                        for (var l = 0; l < grid[k].length; l++) {\n                            if (grid[k][l] == 1) {\n                                bucket = bucket.updated(k, l, bucket.get(k, l) + 1)\n                            }\n                        }\n                    }\n                    if (bucket.updated(i, j, bucket.get(i, j) - 1) == 0) {\n                        result += 1\n                    }\n                }\n            }\n        }\n        return result",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var n = row.length\n            var buckets = mutable.List[Long](n)\n            for (var j = 0; j < n; j++) {\n                buckets.update(j, row[j])\n            }\n            var filled = mutable.List[Long](n)\n            for (var j = 0; j < n; j++) {\n                if (buckets.update(j, 0l) > 0) {\n                    filled.update(j, 1l)\n                }\n            }\n            var count = mutable.List[Long](n)\n            for (var j = 0; j < n; j++) {\n                count.update(j, 0l)\n            }\n            for (var j = 0; j < n; j++) {\n                if (filled.update(j, 0l) > 0) {\n                    count.update(j, count.update(j, 0l) + 1)\n                }\n            }\n            for (var j = 0; j < n; j++) {\n                if (count.update(j, 0l) > max) {\n                    max = count.update(j, 0l)\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1) {\n                    var count = 0l\n                    for (var k = 0; k < grid.length; k++) {\n                        for (var l = 0; l < grid[k].length; l++) {\n                            if (grid[k][l] == 1) {\n                                count += 1l\n                            }\n                        }\n                    }\n                    if (count > max) {\n                        max = count\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (i <- 0 until grid.length) {\n            for (j <- 0 until grid[i].length) {\n                if (grid[i][j] == 1) {\n                    var cur = 0l\n                    for (k <- 0 until grid.length) {\n                        for (l <- 0 until grid[k].length) {\n                            if (grid[k][l] == 1) {\n                                cur += 1l\n                            }\n                        }\n                    }\n                    if (cur > max) {\n                        max = cur\n                    }\n                }\n            }\n        }\n        return max",
    "        var n = grid.length\n        var m = grid[0].length\n        var i = 0\n        var j = 0\n        var max = 0l\n        var maxI = 0l\n        var maxJ = 0l\n        var maxC = 0l\n        var maxI2 = 0l\n        var maxJ2 = 0l\n        var maxC2 = 0l\n        var maxI3 = 0l\n        var maxJ3 = 0l\n        var maxC3 = 0l\n        var maxI4 = 0l\n        var maxJ4 = 0l\n        var maxC4 = 0l\n        var maxI5 = 0l\n        var maxJ5 = 0l\n        var maxC5 = 0l\n        var maxI6 = 0l\n        var maxJ6 = 0l\n        var maxC6 = 0l\n        var maxI7 = 0l\n        var maxJ7 = 0l\n        var maxC7 = 0l\n        var maxI8 = 0l\n        var maxJ8 = 0l\n        var maxC8 = 0l\n        var maxI9 = 0l\n        var maxJ9 = 0l\n        var maxC9 = 0l\n        var maxI10 = 0l\n        var maxJ10 = 0l\n        var maxC10 = 0l\n        var maxI11 = 0l\n        var maxJ11 = 0l\n        var maxC11 = 0l\n        var maxI12 = 0l\n        var maxJ12 = 0l\n        var maxC12 = 0l\n        var maxI13 = 0l\n        var maxJ13 = 0l\n        var maxC13 = 0l\n        var maxI14 = 0l\n        var maxJ14 = 0l\n        var maxC14 = 0l\n        var maxI15 = 0l\n        var maxJ15 = 0l\n        var maxC15 = 0l\n        var maxI16 = 0l\n        var maxJ16 = 0l\n        var maxC16 = 0l\n        var maxI17 = 0l\n        var maxJ17 = 0l\n        var maxC17 = 0l\n        var maxI18 = 0l\n        var maxJ18 = 0l\n        ",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1) {\n                    var count = 0l\n                    var well = i\n                    while (grid[well][j] == 1) {\n                        count += 1l\n                        well += 1\n                    }\n                    max = Math.max(max, count)\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1) {\n                    var curr = 1l\n                    for (var k = 0; k < grid.length; k++) {\n                        if (grid[k][j] == 1) {\n                            curr += 1l\n                        }\n                    }\n                    for (var k = 0; k < grid[i].length; k++) {\n                        if (grid[i][k] == 1) {\n                            curr += 1l\n                        }\n                    }\n                    max = Math.max(max, curr)\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var row_max = 0l\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                var well_max = 0l\n                for (var k = 0; k < well.length; k++) {\n                    var bucket = well[k]\n                    if (bucket > 0) {\n                        well_max += bucket\n                    }\n                }\n                if (well_max > row_max) {\n                    row_max = well_max\n                }\n            }\n            if (row_max > max) {\n                max = row_max\n            }\n        }\n        if (max > capacity) {\n            return max - capacity\n        } else {\n            return 0l\n        }",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                rowMax = maxFill(row, capacity)\n                if (rowMax > max) max = rowMax\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1l) {\n                    var buckets = row.slice(j)\n                    var filled = 0l\n                    for (var k = 0; k < buckets.length; k++) {\n                        if (buckets[k] > 0l) {\n                            filled += 1l\n                        }\n                    }\n                    if (filled > max) {\n                        max = filled\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1) {\n                    var bucket = row[j]\n                    var cur = 0l\n                    for (var k = 0; k < row.length; k++) {\n                        if (row[k] == 1) {\n                            cur += 1l\n                        }\n                    }\n                    if (cur > max) {\n                        max = cur\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1) {\n                    var cur = 1l\n                    for (var k = 0; k < grid.length; k++) {\n                        if (grid[k][j] == 1) {\n                            cur += 1l\n                        }\n                    }\n                    for (var k = 0; k < grid[i].length; k++) {\n                        if (grid[i][k] == 1) {\n                            cur += 1l\n                        }\n                    }\n                    max = Math.max(max, cur)\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1l) {\n                    max = maxFill(grid, i, j, capacity)\n                }\n            }\n        }\n        return max\n    }\n\n    def maxFill(grid : List[List[Long]], i : Int, j : Int, capacity : Long) : Long = {\n        var max = 0l\n        var i_ = i\n        var j_ = j\n        while (i_ < grid.length && j_ < grid[i].length && grid[i_][j_] == 1l) {\n            i_ += 1\n            j_ += 1\n        }\n        if (i_ == grid.length || j_ == grid[i].length) {\n            return max\n        }\n        var i_ = i\n        var j_ = j\n        while (i_ < grid.length && j_ < grid[i].length && grid[i_][j_] == 0l) {\n            i_ += 1\n            j_ += 1\n        }\n        if (i_ == grid.length || j_ == grid[i].length) {\n            return max\n        }\n        var i_ = i\n        var j_ = j\n        while (i_ < grid.length && j_ < grid[i].length && grid[i_][j_] == 1l) {\n            i_ += 1\n            j_ += 1\n        }\n        if (i_ == grid.length || j_ == grid[i].length) {\n            return max\n        }\n        var i_ = i\n        var j_ = j\n        while (i_ < grid.length && j_ < grid[i].length && grid[i_][j_] == 0l) {\n            i_ += 1\n            j_ += 1\n        }\n        if (i_ == grid.length || j_ == grid[i].length) {\n            return max\n        }\n        var i_ = i\n        var j_ = j\n        while (i_ < grid.length",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var sum = 0l\n            for (var j = 0; j < row.length; j++) {\n                sum += row[j]\n            }\n            if (sum > max) max = sum\n        }\n        var sum = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var sum = 0l\n            for (var j = 0; j < row.length; j++) {\n                sum += row[j]\n                if (sum > capacity) {\n                    sum -= row[j]\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum -= 1l\n                    sum",
    "        var result = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1l) {\n                    var bucket = row[j]\n                    var left = 0l\n                    var right = 0l\n                    for (var k = 0; k < row.length; k++) {\n                        if (row[k] == 0l) {\n                            left += 1l\n                        } else {\n                            right += 1l\n                        }\n                    }\n                    if (left == right) {\n                        result += 1l\n                    } else {\n                        result += Math.max(left, right)\n                    }\n                }\n            }\n        }\n        return result",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1l) {\n                    var curr = 1l\n                    for (var k = j + 1; k < row.length; k++) {\n                        if (row[k] == 1l) {\n                            curr += 1l\n                        } else {\n                            break\n                        }\n                    }\n                    if (curr > max) {\n                        max = curr\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var n = row.length\n            var buckets = mutable.List[Long](n)\n            for (var j = 0; j < n; j++) {\n                buckets.update(j, row[j])\n            }\n            var filled = mutable.List[Long](n)\n            for (var j = 0; j < n; j++) {\n                var bucket = buckets.apply(j)\n                if (bucket > 0) {\n                    var left = mutable.List[Long](n)\n                    for (var k = 0; k < n; k++) {\n                        left.update(k, row[k])\n                    }\n                    var right = mutable.List[Long](n)\n                    for (var k = 0; k < n; k++) {\n                        right.update(k, row[(k + 1) % n])\n                    }\n                    var leftBucket = mutable.List[Long](n)\n                    for (var k = 0; k < n; k++) {\n                        leftBucket.update(k, left.apply(k))\n                    }\n                    var rightBucket = mutable.List[Long](n)\n                    for (var k = 0; k < n; k++) {\n                        rightBucket.update(k, right.apply(k))\n                    }\n                    var leftCapacity = mutable.List[Long](n)\n                    for (var k = 0; k < n; k++) {\n                        leftCapacity.update(k, capacity)\n                    }\n                    var rightCapacity = mutable.List[Long](n)\n                    for (var k = 0; k < n; k++) {\n                        rightCapacity.update(k, capacity)\n                    }\n                    var leftBucketCapacity = mutable.List[Long](n)\n                    for (var k = 0; k < n; k++) {\n                        leftBucketCapacity.update(k, leftCapacity.apply(k))\n                    }\n                    var rightBucketCapacity = mutable.List[Long](n)\n                    for (var k =",
    "        var result = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var bucket = row[0]\n            var water = row[1]\n            var left = row[2]\n            var right = row[3]\n            if (bucket == 0) {\n                result = max(result, water)\n            } else {\n                if (left == 0) {\n                    result = max(result, water)\n                }\n                if (right == 0) {\n                    result = max(result, water)\n                }\n            }\n        }\n        return result",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1) {\n                    var cur = 0l\n                    for (var k = i; k < grid.length; k++) {\n                        for (var l = j; l < grid[k].length; l++) {\n                            if (grid[k][l] == 1) {\n                                cur += 1l\n                            }\n                        }\n                    }\n                    if (cur > max) {\n                        max = cur\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1l) {\n                    var buckets = List[Long](0l, 0l, 0l)\n                    var well = i\n                    var row = j\n                    while (well >= 0 && well < grid.length && row >= 0 && row < grid[well].length) {\n                        if (grid[well][row] == 1l) {\n                            buckets = buckets.update(0l, 1l)\n                            well--\n                        } else {\n                            buckets = buckets.update(1l, 0l)\n                            row--\n                        }\n                    }\n                    max = max.update(buckets.max(0l).toLong)\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (i <- 0 until grid.length) {\n            for (j <- 0 until grid[i].length) {\n                if (grid[i][j] == 1) {\n                    var curr = 0l\n                    for (k <- 0 until grid.length) {\n                        for (l <- 0 until grid[k].length) {\n                            if (grid[k][l] == 1) {\n                                curr += 1l\n                            }\n                        }\n                    }\n                    if (curr > max) {\n                        max = curr\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                var wellMax = 0l\n                for (var k = 0; k < well.length; k++) {\n                    var bucket = well[k]\n                    var bucketMax = 0l\n                    for (var l = 0; l < bucket.length; l++) {\n                        var bucketValue = bucket[l]\n                        if (bucketValue > 0) {\n                            bucketMax = Math.max(bucketMax, bucketValue)\n                        }\n                    }\n                    wellMax = Math.max(wellMax, bucketMax)\n                }\n                rowMax = Math.max(rowMax, wellMax)\n            }\n            max = Math.max(max, rowMax)\n        }\n        max = Math.max(max, capacity)\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                var well = grid[i][j]\n                if (well == 0) {\n                    continue\n                }\n                var buckets = well.toLong\n                var maxBucket = 0l\n                for (var k = 0; k < buckets.length; k++) {\n                    if (buckets[k] > capacity) {\n                        maxBucket = k\n                        break\n                    }\n                }\n                max = maxBucket > max ? maxBucket : max\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1l) {\n                    var cur = 1l\n                    for (var k = j + 1; k < row.length; k++) {\n                        if (row[k] == 1l) {\n                            cur += 1l\n                        } else {\n                            break\n                        }\n                    }\n                    if (cur > max) {\n                        max = cur\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (i <- 0 until grid.length) {\n            for (j <- 0 until grid[i].length) {\n                if (grid[i][j] == 1) {\n                    var cur = 0l\n                    for (k <- 0 until grid.length) {\n                        for (l <- 0 until grid[k].length) {\n                            if (grid[k][l] == 1) {\n                                cur += 1l\n                            }\n                        }\n                    }\n                    if (cur > max) {\n                        max = cur\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                var wellMax = 0l\n                for (var k = 0; k < well.length; k++) {\n                    var bucket = well[k]\n                    var bucketMax = 0l\n                    for (var l = 0; l < bucket.length; l++) {\n                        var bucketSize = bucket[l]\n                        if (bucketSize > 0) {\n                            bucketMax = Math.max(bucketMax, bucketSize)\n                        }\n                    }\n                    wellMax = Math.max(wellMax, bucketMax)\n                }\n                rowMax = Math.max(rowMax, wellMax)\n            }\n            max = Math.max(max, rowMax)\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                var wellMax = 0l\n                for (var k = 0; k < well.length; k++) {\n                    var bucket = well[k]\n                    var bucketMax = 0l\n                    for (var l = 0; l < bucket.length; l++) {\n                        var bucketValue = bucket[l]\n                        if (bucketValue > 0) {\n                            bucketMax = Math.max(bucketMax, bucketValue)\n                        }\n                    }\n                    wellMax = Math.max(wellMax, bucketMax)\n                }\n                rowMax = Math.max(rowMax, wellMax)\n            }\n            max = Math.max(max, rowMax)\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 0l) {\n                    rowMax = 0l\n                } else {\n                    rowMax = rowMax + well\n                }\n            }\n            if (rowMax > max) {\n                max = rowMax\n            }\n        }\n        if (max < capacity) {\n            return 0l\n        } else {\n            return max - capacity\n        }",
    "        var max = 0l\n        for (i <- 0 until grid.length) {\n            for (j <- 0 until grid[i].length) {\n                if (grid[i][j] == 1) {\n                    var cur = 0l\n                    for (k <- 0 until grid.length) {\n                        for (l <- 0 until grid[k].length) {\n                            if (grid[k][l] == 1) {\n                                cur += 1l\n                            }\n                        }\n                    }\n                    if (cur > max) {\n                        max = cur\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 0l) {\n                    continue\n                }\n                var buckets = well.toLong\n                var maxBuckets = 0l\n                for (var k = 0; k < buckets.length; k++) {\n                    var bucket = buckets[k]\n                    if (bucket > capacity) {\n                        continue\n                    }\n                    maxBuckets = maxBuckets + bucket\n                }\n                max = max + maxBuckets\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowCapacity = row.length\n            var rowMax = 0l\n            for (var j = 0; j < rowCapacity; j++) {\n                var well = row[j]\n                if (well == 0l) {\n                    var wellCapacity = capacity\n                    var wellMax = 0l\n                    for (var k = 0; k < wellCapacity; k++) {\n                        var bucket = well + k\n                        if (bucket > wellMax) {\n                            wellMax = bucket\n                        }\n                    }\n                    rowMax = wellMax\n                } else {\n                    rowMax = rowMax + 1l\n                }\n            }\n            max = max > rowMax ? max : rowMax\n        }\n        return max",
    "        var result = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1l) {\n                    result = max(result, fill(i, j, grid, capacity))\n                }\n            }\n        }\n        return result",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var cur = 0l\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1l) {\n                    cur += 1l\n                }\n            }\n            if (cur > max) {\n                max = cur\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                var wellMax = 0l\n                for (var k = 0; k < well.length; k++) {\n                    var bucket = well[k]\n                    var bucketMax = 0l\n                    for (var l = 0; l < bucket.length; l++) {\n                        var bucketValue = bucket[l]\n                        if (bucketValue > 0) {\n                            bucketMax = Math.max(bucketMax, bucketValue)\n                        }\n                    }\n                    wellMax = Math.max(wellMax, bucketMax)\n                }\n                rowMax = Math.max(rowMax, wellMax)\n            }\n            max = Math.max(max, rowMax)\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1l) {\n                    var buckets = row.slice(j)\n                    var sum = 0l\n                    for (var k = 0; k < buckets.length; k++) {\n                        sum += buckets[k]\n                    }\n                    if (sum > capacity) {\n                        max = max + 1l\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1l) {\n                    var count = maxFill(grid, capacity)\n                    if (count > max) max = count\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var maxRow = 0l\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                var maxWell = 0l\n                for (var k = 0; k < well.length; k++) {\n                    var bucket = well[k]\n                    var maxBucket = 0l\n                    for (var l = 0; l < bucket.length; l++) {\n                        maxBucket = maxBucket + bucket[l]\n                    }\n                    maxWell = maxWell + maxBucket\n                }\n                maxRow = maxRow + maxWell\n            }\n            max = max + maxRow\n        }\n        max = max + capacity\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                var bucket = well.toLong\n                var water = well.toLong\n                var n = 0l\n                while (bucket > 0 && water > 0) {\n                    n += 1l\n                    if (bucket > capacity) {\n                        bucket -= capacity\n                        water -= 1l\n                    } else {\n                        bucket -= 1l\n                        water -= 1l\n                    }\n                }\n                max = max > n ? max : n\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                rowMax = Math.max(rowMax, row[j])\n            }\n            max = Math.max(max, rowMax)\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                var wellMax = 0l\n                for (var k = 0; k < well.length; k++) {\n                    var bucket = well[k]\n                    var bucketMax = 0l\n                    for (var l = 0; l < bucket.length; l++) {\n                        var bucketValue = bucket[l]\n                        if (bucketValue > 0) {\n                            bucketMax += bucketValue\n                        }\n                    }\n                    if (bucketMax > 0) {\n                        wellMax += bucketMax\n                    }\n                }\n                if (wellMax > 0) {\n                    rowMax += wellMax\n                }\n            }\n            if (rowMax > max) {\n                max = rowMax\n            }\n        }\n        if (max > capacity) {\n            return max - capacity\n        } else {\n            return 0l\n        }",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var sum = 0l\n            for (var j = 0; j < row.length; j++) {\n                sum += row[j]\n            }\n            if (sum > max) max = sum\n        }\n        var max_wells = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var sum = 0l\n            for (var j = 0; j < row.length; j++) {\n                sum += row[j]\n                if (sum > max) max_wells += 1\n            }\n        }\n        if (max_wells > max) max = max_wells\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                var curr = grid[i][j]\n                if (curr == 0) {\n                    var currCap = 0l\n                    for (var k = 0; k < grid.length; k++) {\n                        if (grid[k][j] == 1) {\n                            currCap += 1l\n                        }\n                    }\n                    if (currCap > max) {\n                        max = currCap\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 0) {\n                    var count = 0l\n                    for (var k = 0; k < grid.length; k++) {\n                        for (var l = 0; l < grid[k].length; l++) {\n                            if (grid[k][l] == 1) {\n                                count += 1l\n                            }\n                        }\n                    }\n                    if (count > max) {\n                        max = count\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                if (row[j] == 1) {\n                    var count = 0l\n                    for (var k = 0; k < row.length; k++) {\n                        if (row[k] == 1) {\n                            count += 1l\n                        }\n                    }\n                    if (count > max) {\n                        max = count\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (i <- 0 until grid.length) {\n            for (j <- 0 until grid[i].length) {\n                if (grid[i][j] == 1) {\n                    var cur = 0l\n                    for (k <- 0 until grid.length) {\n                        for (l <- 0 until grid[k].length) {\n                            if (grid[k][l] == 1) {\n                                cur += 1l\n                            }\n                        }\n                    }\n                    if (cur > max) {\n                        max = cur\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1) {\n                    var cur = 1l\n                    for (var k = i - 1; k <= i + 1; k++) {\n                        for (var l = j - 1; l <= j + 1; l++) {\n                            if (k >= 0 && k < grid.length && l >= 0 && l < grid[i].length && grid[k][l] == 1) {\n                                cur += 1l\n                            }\n                        }\n                    }\n                    if (cur > max) max = cur\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            for (var j = 0; j < row.length; j++) {\n                var well = row[j]\n                if (well == 1) {\n                    var buckets = 0l\n                    for (var k = 0; k < row.length; k++) {\n                        if (row[k] == 0) {\n                            buckets += 1l\n                        }\n                    }\n                    if (buckets > max) {\n                        max = buckets\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1) {\n                    var cur = 1l\n                    for (var k = i - 1; k >= 0; k--) {\n                        if (grid[k][j] == 0) {\n                            cur = cur + 1l\n                        } else {\n                            break\n                        }\n                    }\n                    for (var k = i + 1; k < grid.length; k++) {\n                        if (grid[k][j] == 0) {\n                            cur = cur + 1l\n                        } else {\n                            break\n                        }\n                    }\n                    for (var k = j - 1; k >= 0; k--) {\n                        if (grid[i][k] == 0) {\n                            cur = cur + 1l\n                        } else {\n                            break\n                        }\n                    }\n                    for (var k = j + 1; k < grid[i].length; k++) {\n                        if (grid[i][k] == 0) {\n                            cur = cur + 1l\n                        } else {\n                            break\n                        }\n                    }\n                    if (cur > max) {\n                        max = cur\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1l) {\n                    var count = 0l\n                    for (var k = 0; k < grid.length; k++) {\n                        for (var l = 0; l < grid[k].length; l++) {\n                            if (grid[k][l] == 1l) {\n                                count += 1l\n                            }\n                        }\n                    }\n                    if (count > max) {\n                        max = count\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                rowMax = Math.max(rowMax, row[j])\n                if (rowMax == 0l) {\n                    max += 1l\n                } else {\n                    max += Math.min(capacity, rowMax)\n                }\n            }\n        }\n        return max",
    "        val rows = grid.length\n        val cols = grid[0].length\n        val well = new scala.collection.mutable.ArrayBuffer[Long]()\n        val buckets = new scala.collection.mutable.ArrayBuffer[Long]()\n        for (i <- 0 until rows) {\n            for (j <- 0 until cols) {\n                well.append(grid[i][j])\n            }\n        }\n        for (i <- 0 until rows) {\n            for (j <- 0 until cols) {\n                buckets.append(capacity)\n            }\n        }\n        var max = 0\n        for (i <- 0 until rows) {\n            for (j <- 0 until cols) {\n                if (well.get(i * cols + j) == 1) {\n                    buckets.set(i * cols + j, buckets.get(i * cols + j) - 1)\n                    if (buckets.get(i * cols + j) == 0) {\n                        well.set(i * cols + j, 0)\n                    }\n                    if (well.get(i * cols + j) == 0) {\n                        max = max + 1\n                    }\n                }\n            }\n        }\n        return max",
    "        var max = 0l\n        for (var i = 0; i < grid.length; i++) {\n            var row = grid[i]\n            var rowMax = 0l\n            for (var j = 0; j < row.length; j++) {\n                rowMax = Math.max(rowMax, row[j])\n                max = Math.max(max, rowMax)\n            }\n            max = Math.max(max, rowMax)\n        }\n        max = Math.max(max, capacity)\n        return max",
    "        var result = 0l\n        for (var i = 0; i < grid.length; i++) {\n            for (var j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 0) {\n                    result = max(result, maxFill(grid, i, j, capacity))\n                }\n            }\n        }\n        return result"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}