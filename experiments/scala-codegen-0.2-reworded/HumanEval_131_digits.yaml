name: HumanEval_131_digits
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return the product of the odd digits.\n    //\
  \ Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
  \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
  \    // (15l)\n    def digits(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
  \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l))\
  \ == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
  \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
completions: ["        if (n == 0) {\n            0\n        } else {\n          \
    \  var x = n\n            var y = 0\n            while (x > 0) {\n           \
    \     y = y * 10 + x % 10\n                x /= 10\n            }\n          \
    \  y\n        }", "        val nn = n.toString\n        val s = nn.substring(1,\
    \ nn.length)\n        val d = s.split(\"\")\n        val result = 0l\n       \
    \ for (i <- 1 to d.length) {\n            val dn = d(i)\n            if (dn.toInt\
    \ % 2 == 1) {\n                result = result * dn\n            }\n        }\n\
    \        result", "        val nn = n.toString\n        val s = nn.substring(2,\
    \ nn.length)\n        val r = s.split(\"\")\n        val r2 = r.map(_.toInt)\n\
    \        val r3 = r2.filter(_.%2 == 1)\n        val r4 = r3.map(_.toInt)\n   \
    \     val r5 = r4.reduce(_.times)\n        r5", "        val nn = n\n        val\
    \ nb = nn.toBigInteger()\n        val nb2 = nb.shiftRight(1)\n        val nb3\
    \ = nb2.and(new scala.math.Numeric$Bitmask().setBit(0))\n        val nb4 = nb3.shiftRight(1)\n\
    \        val nb5 = nb4.and(new scala.math.Numeric$Bitmask().setBit(0))\n     \
    \   val nb6 = nb5.shiftRight(1)\n        val nb7 = nb6.and(new scala.math.Numeric$Bitmask().setBit(0))\n\
    \        val nb8 = nb7.shiftRight(1)\n        val nb9 = nb8.and(new scala.math.Numeric$Bitmask().setBit(0))\n\
    \        val nb10 = nb9.shiftRight(1)\n        val nb11 = nb10.and(new scala.math.Numeric$Bitmask().setBit(0))\n\
    \        val nb12 = nb11.shiftRight(1)\n        val nb13 = nb12.and(new scala.math.Numeric$Bitmask().setBit(0))\n\
    \        val nb14 = nb13.shiftRight(1)\n        val nb15 = nb14.and(new scala.math.Numeric$Bitmask().setBit(0))\n\
    \        val nb16 = nb15.shiftRight(1)\n        val nb17 = nb16.and(new scala.math.Numeric$Bitmask().setBit(0))\n\
    \        val nb18 = nb17.shiftRight(1)\n        val nb19 = nb18.and(new scala.math.Numeric$Bitmask().setBit(0))\n\
    \        val nb20 = nb19.shiftRight(1)\n        val nb21 = nb20.and(new scala.math.Numeric$Bitmask().setBit(0))\n\
    \        val nb22 = nb21.shiftRight(1)\n        val nb23 = nb22.and(new scala.math",
  "        val nn = n\n        if (nn % 2 == 0) {\n            return 0l\n       \
    \ } else {\n            val nn2 = nn / 2\n            val nn3 = nn2 / 2\n    \
    \        val nn4 = nn3 / 2\n            val nn5 = nn4 / 2\n            val nn6\
    \ = nn5 / 2\n            val nn7 = nn6 / 2\n            val nn8 = nn7 / 2\n  \
    \          val nn9 = nn8 / 2\n            val nn10 = nn9 / 2\n            val\
    \ nn11 = nn10 / 2\n            val nn12 = nn11 / 2\n            val nn13 = nn12\
    \ / 2\n            val nn14 = nn13 / 2\n            val nn15 = nn14 / 2\n    \
    \        val nn16 = nn15 / 2\n            val nn17 = nn16 / 2\n            val\
    \ nn18 = nn17 / 2\n            val nn19 = nn18 / 2\n            val nn20 = nn19\
    \ / 2\n            val nn21 = nn20 / 2\n            val nn22 = nn21 / 2\n    \
    \        val nn23 = nn22 / 2\n            val nn24 = nn23 / 2\n            val\
    \ nn25 = nn24 / 2\n            val nn26 = nn25 / 2\n            val nn27 = nn26\
    \ / 2\n            val nn28 = nn27 / 2\n            val nn29 = nn28 / 2\n    \
    \        val nn30 = nn29 / 2\n            val nn31 = nn30 / 2\n            val\
    \ nn32 = nn31 / 2\n            val nn33 = nn32 / 2\n            val nn34 = nn33\
    \ / 2\n            val nn35 = nn34 / 2\n            val nn36 = nn35 / 2\n    \
    \        val nn37 = nn36 / 2\n            val nn38 = nn37 / 2\n            val\
    \ nn39 = nn38 / 2\n            val nn40 = nn39 / 2\n            val nn41 = nn40\
    \ / 2\n            val nn42", "        val digits = new Array[Long](n.toString().length())\n\
    \        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        val result = 0l\n        for (i <- 0 until digits.length)\
    \ {\n            if (digits(i) % 2 == 1) {\n                result = result *\
    \ digits(i)\n            }\n        }\n        result", "        val nn = n.toString\n\
    \        val s = nn.substring(1, nn.length)\n        val r = s.split(\"\")\n \
    \       val m = mutable.List[Long]()\n        for (i <- 0 until len(r)) {\n  \
    \          m:=m + (r(i) % 2 == 1 ? r(i) : 0)\n        }\n        m.reduce(0l)",
  "        if (n == 0) {\n            0\n        } else {\n            n % 2 == 0\
    \ ? 0 : (n % 10 * 9)\n        }", "        val digits = new Array[Long](n.toString().length())\n\
    \        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n     \
    \       if (digits(i) % 2 == 0) {\n                digits(i) = 0\n           \
    \ }\n        }\n        digits(n.toString().length() - 1)", "        val digits\
    \ = mutable.List[Long]()\n        while (n > 0) {\n            digits.append(n\
    \ % 10)\n            n /= 10\n        }\n        digits.reverse()\n        val\
    \ result = mutable.List[Long]()\n        for (i <- 0 until digits.size) {\n  \
    \          result.append(digits.apply(i) * 2 - 1)\n        }\n        result.reverse()\n\
    \        result.foreach(x -> {\n            if (x % 2 == 1) {\n              \
    \  result.append(x)\n            }\n        })\n        result.foreach(x -> {\n\
    \            if (x == 0) {\n                return\n            }\n          \
    \  if (x % 2 == 1) {\n                result.append(x)\n            }\n      \
    \  })\n        result.foreach(x -> {\n            if (x == 0) {\n            \
    \    return\n            }\n            if (x % 2 == 1) {\n                result.append(x)\n\
    \            }\n        })\n        result.foreach(x -> {\n            if (x ==\
    \ 0) {\n                return\n            }\n            if (x % 2 == 1) {\n\
    \                result.append(x)\n            }\n        })\n        result.foreach(x\
    \ -> {\n            if (x == 0) {\n                return\n            }\n   \
    \         if (x % 2 == 1) {\n                result.append(x)\n            }\n\
    \        })\n        result.foreach(x -> {\n            if (x == 0) {\n      \
    \          return\n            }\n            if (x % 2 == 1) {\n            \
    \    result.append(x)\n            }\n        })\n        result.foreach(x ->\
    \ {\n            if (x == 0) {\n                return\n            }\n      \
    \      if (x % 2 == 1) {\n                result.append(x)\n            }\n  \
    \      })\n        result.foreach(x -> {\n            if (x == 0) {\n        \
    \        return\n            }\n            if (x % 2 == 1) {\n              \
    \  result.append(x)\n            }\n        })\n        result.foreach(x -> {\n\
    \            if (x == 0) {\n                return\n            }\n", "      \
    \  val d = n.toString().split(\"\")\n        val result = 0l\n        for (i <-\
    \ 0 until d.length) {\n            if (d(i).toInt % 2 == 1) {\n              \
    \  result = result * d(i).toInt\n            }\n        }\n        result", " \
    \       var x = n\n        while (x > 0) {\n            var y = x % 10\n     \
    \       if (y % 2 == 1) {\n                x = x / 10\n            } else {\n\
    \                x = x / 10\n            }\n        }\n        x", "        if\
    \ (n == 0) {\n            return 0l\n        } else {\n            return (n %\
    \ 2l) * digits(n / 2l)\n        }", "        val digits = new Array[Long](n.toString().length())\n\
    \        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        digits.reduce(_.times)", "        val digits = new\
    \ Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length())\
    \ {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n       \
    \ val result = 0l\n        for (i <- 0 until digits.length) {\n            result\
    \ = result * digits(i)\n        }\n        result", "        if (n == 0) {\n \
    \           0\n        } else {\n            n % 2 == 0 ? 0 : n\n        }", " \
    \       if (n % 2 == 0) {\n            return 0l\n        } else {\n         \
    \   return n / 2l\n        }", "        if (n == 0) {\n            0\n       \
    \ } else {\n            n % 2 == 0 ? 0 : (n * digits(n - 1))\n        }", "  \
    \      if (n == 0) {\n            0\n        } else {\n            n % 2 == 0\
    \ ? 0 : n\n        }", "        if (n == 0) {\n            return 0l\n       \
    \ } else {\n            return (n % 2l) * digits(n / 2l)\n        }", "      \
    \  if (n == 0) {\n            0\n        } else {\n            n % 2 == 0 ? 0\
    \ : n\n        }", "        val digits = new Array[Long](n.toString().length())\n\
    \        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        digits(n.toString().length() - 1)", "        val digits\
    \ = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length())\
    \ {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n       \
    \ for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 ==\
    \ 0) {\n                digits(i) = 0\n            }\n        }\n        digits",
  "        var digits = new Array[Long](n.toString().length)\n        for (i <- 0\
    \ until n.toString().length) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        for (i <- 0 until n.toString().length) {\n       \
    \     if (digits(i) % 2 == 0) {\n                digits(i) = 0\n            }\n\
    \        }\n        digits(0)", "        if (n == 0) {\n            0\n      \
    \  } else {\n            var x = n\n            var y = 1l\n            while\
    \ (x > 0) {\n                if (x % 2 == 1) {\n                    y *= x\n \
    \               }\n                x /= 2\n            }\n            y\n    \
    \    }", "        if (n == 0) return 0l\n        if (n % 2 == 0) return 0l\n \
    \       return (n / 2) * (n / 2 + 1)", "        if (n == 0) return 0l\n      \
    \  if (n % 2 == 0) return 0l\n        return n % 2l", "        val n2 = n.toString\n\
    \        val s = n2.substring(2, n2.length)\n        val s2 = s.replaceAll(\"\
    0\", \"\")\n        val s3 = s2.replaceAll(\"1\", \"\")\n        val s4 = s3.replaceAll(\"\
    2\", \"\")\n        val s5 = s4.replaceAll(\"3\", \"\")\n        val s6 = s5.replaceAll(\"\
    4\", \"\")\n        val s7 = s6.replaceAll(\"5\", \"\")\n        val s8 = s7.replaceAll(\"\
    6\", \"\")\n        val s9 = s8.replaceAll(\"7\", \"\")\n        val s10 = s9.replaceAll(\"\
    8\", \"\")\n        val s11 = s10.replaceAll(\"9\", \"\")\n        val s12 = s11.replaceAll(\"\
    0\", \"\")\n        val s13 = s12.replaceAll(\"1\", \"\")\n        val s14 = s13.replaceAll(\"\
    2\", \"\")\n        val s15 = s14.replaceAll(\"3\", \"\")\n        val s16 = s15.replaceAll(\"\
    4\", \"\")\n        val s17 = s16.replaceAll(\"5\", \"\")\n        val s18 = s17.replaceAll(\"\
    6\", \"\")\n        val s19 = s18.replaceAll(\"7\", \"\")\n        val s20 = s19.replaceAll(\"\
    8\", \"\")\n        val s21 = s20.replaceAll(\"9\", \"\")\n        val s22 = s21.replaceAll(\"\
    0\", \"\")\n        val s23 = s22.replaceAll(\"1\", \"\")\n        val s24 = s23.replaceAll(\"\
    2\", \"\")\n        val s25 = s24.replaceAll(\"3\", \"\")\n        val s26 = s25.replaceAll(\"\
    4\", \"\")\n        val s27 = s26.replaceAll(\"5\", \"\")\n        val s28 = s27.replaceAll(\"\
    6\", \"\")\n        val s29 = s28.replaceAll(\"7\", \"\")\n        val s30 = s29.replaceAll(\"\
    8\", \"\")\n        val s31 = s30.replaceAll(\"9\", \"\")\n        val s32 =",
  "        val digits = new Array[Long](n.toString().length())\n        for (i <-\
    \ 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        digits(n.toString().length() - 1)", "        if (n\
    \ == 0) return 0l\n        if (n % 2 == 0) return 0l\n        return n % 2l",
  "        if (n == 0) return 0l\n        if (n < 0) return 0l\n        if (n == 1)\
    \ return 1l\n        if (n % 2 == 0) return 0l\n        return n % 2l", "    \
    \    val digits = new Array[Long](n.toString().length())\n        for (i <- 0\
    \ until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        val result = 0l\n        for (i <- 0 until digits.length)\
    \ {\n            result = result * digits(i)\n        }\n        result", "  \
    \      if (n == 0) return 0l\n        if (n % 2 == 0) return 0l\n        return\
    \ n / 2", "        val nn = n.toString\n        val s = nn.substring(2, nn.length)\n\
    \        val s2 = s.replaceAll(\"[0-9]\", \"\")\n        val s3 = s2.replaceAll(\"\
    [^0-9]\", \"\")\n        val s4 = s3.replaceAll(\"^0+\", \"\")\n        val s5\
    \ = s4.replaceAll(\"^1+\", \"\")\n        val s6 = s5.replaceAll(\"^2+\", \"\"\
    )\n        val s7 = s6.replaceAll(\"^3+\", \"\")\n        val s8 = s7.replaceAll(\"\
    ^4+\", \"\")\n        val s9 = s8.replaceAll(\"^5+\", \"\")\n        val s10 =\
    \ s9.replaceAll(\"^6+\", \"\")\n        val s11 = s10.replaceAll(\"^7+\", \"\"\
    )\n        val s12 = s11.replaceAll(\"^8+\", \"\")\n        val s13 = s12.replaceAll(\"\
    ^9+\", \"\")\n        val s14 = s13.replaceAll(\"^0+\", \"\")\n        val s15\
    \ = s14.replaceAll(\"^1+\", \"\")\n        val s16 = s15.replaceAll(\"^2+\", \"\
    \")\n        val s17 = s16.replaceAll(\"^3+\", \"\")\n        val s18 = s17.replaceAll(\"\
    ^4+\", \"\")\n        val s19 = s18.replaceAll(\"^5+\", \"\")\n        val s20\
    \ = s19.replaceAll(\"^6+\", \"\")\n        val s21 = s20.replaceAll(\"^7+\", \"\
    \")\n        val s22 = s21.replaceAll(\"^8+\", \"\")\n        val s23 = s22.replaceAll(\"\
    ^9+\", \"\")\n        val s24 = s23.replaceAll(\"^0+\", \"\")\n        val s25\
    \ = s24.replaceAll(\"^1+\", \"\")\n        val s26 = s25.replaceAll(\"^2+\", \"\
    \")\n        val s27 = s26.replaceAll(\"^3+\", \"\")\n        val s28 = s27.replaceAll(\"\
    ^", "        val nn = n.toString\n        val s = nn.substring(1, nn.length)\n\
    \        val r = s.split(\"\")\n        val rr = new ArrayList<Long>()\n     \
    \   for (i <- 0 until r.length) {\n            val rr1 = r.get(i).toLong\n   \
    \         rr.append(rr1)\n        }\n        val rr2 = rr.map(_.toLong)\n    \
    \    val rr3 = rr2.reduce(_.times)\n        return rr3", "        val digits =\
    \ new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length())\
    \ {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n       \
    \ for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 ==\
    \ 0) {\n                digits(i) = 0\n            }\n        }\n        digits(0)",
  "        val digits = new Array[Long](n.toString().length())\n        for (i <-\
    \ 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n     \
    \       if (digits(i) % 2 == 0) {\n                digits(i) = 0\n           \
    \ }\n        }\n        digits(n.toString().length())", "        if (n % 2 ==\
    \ 0) {\n            return 0l\n        } else {\n            return n % 10\n \
    \       }", "        val digits = new Array[Long](n.toString().length())\n   \
    \     for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        val result = 0l\n        for (i <- 0 until digits.length)\
    \ {\n            result = result * digits(i)\n        }\n        result", "  \
    \      if (n == 0) return 0l\n        if (n % 2 == 0) return 0l\n        return\
    \ n % 10", "        if (n == 0) {\n            0\n        } else {\n         \
    \   n % 2 == 0 ? 0 : n\n        }", "        val nn = n.toString\n        val\
    \ nn2 = nn.replaceAll(\"0\", \"\")\n        val nn3 = nn2.replaceAll(\"1\", \"\
    \")\n        val nn4 = nn3.replaceAll(\"2\", \"\")\n        val nn5 = nn4.replaceAll(\"\
    3\", \"\")\n        val nn6 = nn5.replaceAll(\"4\", \"\")\n        val nn7 = nn6.replaceAll(\"\
    5\", \"\")\n        val nn8 = nn7.replaceAll(\"6\", \"\")\n        val nn9 = nn8.replaceAll(\"\
    7\", \"\")\n        val nn10 = nn9.replaceAll(\"8\", \"\")\n        val nn11 =\
    \ nn10.replaceAll(\"9\", \"\")\n        val nn12 = nn11.replaceAll(\"0\", \"\"\
    )\n        val nn13 = nn12.replaceAll(\"1\", \"\")\n        val nn14 = nn13.replaceAll(\"\
    2\", \"\")\n        val nn15 = nn14.replaceAll(\"3\", \"\")\n        val nn16\
    \ = nn15.replaceAll(\"4\", \"\")\n        val nn17 = nn16.replaceAll(\"5\", \"\
    \")\n        val nn18 = nn17.replaceAll(\"6\", \"\")\n        val nn19 = nn18.replaceAll(\"\
    7\", \"\")\n        val nn20 = nn19.replaceAll(\"8\", \"\")\n        val nn21\
    \ = nn20.replaceAll(\"9\", \"\")\n        val nn22 = nn21.replaceAll(\"0\", \"\
    \")\n        val nn23 = nn22.replaceAll(\"1\", \"\")\n        val nn24 = nn23.replaceAll(\"\
    2\", \"\")\n        val nn25 = nn24.replaceAll(\"3\", \"\")\n        val nn26\
    \ = nn25.replaceAll(\"4\", \"\")\n        val nn27 = nn26.replaceAll(\"5\", \"\
    \")\n        val nn28 = nn27.replaceAll(\"6\", \"\")\n        val nn29 = nn28.replaceAll(\"\
    7\", \"\")", "        val digits = new Array[Long](n.toString().length())\n  \
    \      for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n     \
    \       if (digits(i) % 2 == 0) {\n                digits(i) = 0\n           \
    \ }\n        }\n        digits(n.toString().length())", "        if (n % 2 ==\
    \ 0) {\n            return 0l\n        } else {\n            return n % 10\n \
    \       }", "        if (n == 0) return 0l\n        if (n % 2 == 0) return 0l\n\
    \        return n % 10\n    }\n\n    // Given a positive integer n, return the\
    \ product of the even digits.\n    // Return 0 if all digits are odd.\n    //\
    \ For example:\n    // >>> evenDigits((1l))\n    // (1l)\n    // >>> evenDigits((4l))\n\
    \    // (0l)\n    // >>> evenDigits((235l))\n    // (0l)\n    def evenDigits(n\
    \ : Long) : Long = {\n        if (n == 0) return 0l\n        if (n % 2 == 1) return\
    \ 0l\n        return n % 10\n    }\n\n    // Given a positive integer n, return\
    \ the product of the digits\n    // in the number.\n    // Return 0 if all digits\
    \ are even.\n    // For example:\n    // >>> digitsInNumber((1l))\n    // (1l)\n\
    \    // >>> digitsInNumber((4l))\n    // (4l)\n    // >>> digitsInNumber((235l))\n\
    \    // (235l)\n    def digitsInNumber(n : Long) : Long = {\n        if (n ==\
    \ 0) return 0l\n        return n * digits(n)\n    }\n\n    // Given a positive\
    \ integer n, return the product of the digits\n    // in the number.\n    // Return\
    \ 0 if all digits are odd.\n    // For example:\n    // >>> evenDigitsInNumber((1l))\n\
    \    // (1l)\n    // >>> evenDigitsInNumber((4l))\n    // (0l)\n    // >>> evenDigitsInNumber((235l))\n\
    \    // (0l)\n    def evenDigitsInNumber(n : Long) : Long = {\n        if (n ==\
    \ 0) return 0l\n        return n * evenDigits(n)", "        val nn = n.toString\n\
    \        val s = nn.substring(1, nn.length)\n        val s2 = s.replaceAll(\"\
    l\", \"\")\n        val s3 = s2.replaceAll(\"o\", \"\")\n        val s4 = s3.replaceAll(\"\
    d\", \"\")\n        val s5 = s4.replaceAll(\"e\", \"\")\n        val s6 = s5.replaceAll(\"\
    f\", \"\")\n        val s7 = s6.replaceAll(\"g\", \"\")\n        val s8 = s7.replaceAll(\"\
    h\", \"\")\n        val s9 = s8.replaceAll(\"i\", \"\")\n        val s10 = s9.replaceAll(\"\
    j\", \"\")\n        val s11 = s10.replaceAll(\"k\", \"\")\n        val s12 = s11.replaceAll(\"\
    l\", \"\")\n        val s13 = s12.replaceAll(\"m\", \"\")\n        val s14 = s13.replaceAll(\"\
    n\", \"\")\n        val s15 = s14.replaceAll(\"o\", \"\")\n        val s16 = s15.replaceAll(\"\
    p\", \"\")\n        val s17 = s16.replaceAll(\"q\", \"\")\n        val s18 = s17.replaceAll(\"\
    r\", \"\")\n        val s19 = s18.replaceAll(\"s\", \"\")\n        val s20 = s19.replaceAll(\"\
    t\", \"\")\n        val s21 = s20.replaceAll(\"u\", \"\")\n        val s22 = s21.replaceAll(\"\
    v\", \"\")\n        val s23 = s22.replaceAll(\"w\", \"\")\n        val s24 = s23.replaceAll(\"\
    x\", \"\")\n        val s25 = s24.replaceAll(\"y\", \"\")\n        val s26 = s25.replaceAll(\"\
    z\", \"\")\n        val s27 = s26.replaceAll(\"0\", \"\")\n        val s28 = s27.replaceAll(\"\
    1\", \"\")\n        val s29 = s28.replaceAll(\"2\", \"\")\n        val s30 = s29.replaceAll(\"\
    3\", \"\")\n        val s31 = s30.replaceAll(\"4\", \"\")\n        val s32 =",
  "        val digits = new Array[Long](n.toString().length())\n        for (i <-\
    \ 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        digits(0)", "        if (n == 0) {\n            return\
    \ 0l\n        }\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be a positive integer\")\n        }\n        var result = 0l\n        while\
    \ (n > 0) {\n            var digit = n % 10\n            if (digit % 2 == 1) {\n\
    \                result = result * digit\n            }\n            n = n / 10\n\
    \        }\n        return result", "        val nn = n.toString\n        val\
    \ nn_len = nn.length\n        val nn_digits = new Array[Long](nn_len)\n      \
    \  for (i <- 0 until nn_len) {\n            nn_digits(i) = nn(i)\n        }\n\
    \        val nn_digits_odd = nn_digits.filter(x -> x % 2 != 0)\n        val nn_digits_odd_len\
    \ = nn_digits_odd.length\n        val nn_digits_odd_prod = nn_digits_odd.foldLeft(1l,\
    \ (x, y) -> x * y)\n        if (nn_digits_odd_len == 0) {\n            0l\n  \
    \      } else {\n            nn_digits_odd_prod\n        }", "        val digits\
    \ = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length())\
    \ {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n       \
    \ for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 ==\
    \ 0) {\n                digits(i) = 0\n            }\n        }\n        digits(0)",
  "        val digits = new Array[Long](n.toString().length())\n        for (i <-\
    \ 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        digits(0)", "        val digits = new Array[Long](n.toString().length())\n\
    \        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n     \
    \       if (digits(i) % 2 == 1) {\n                return digits(i)\n        \
    \    }\n        }\n        return 0", "        if (n == 0) return 0l\n       \
    \ if (n % 2 == 0) return 0l\n        return n % 2", "        val digits = new\
    \ Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length())\
    \ {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n       \
    \ val oddDigits = digits.filter(d -> d % 2 != 0)\n        val result = oddDigits.reduce(1l,\
    \ (a, b) -> a * b)\n        if (oddDigits.length() == 0) {\n            result\
    \ = 0l\n        }\n        result", "        var result = 0l\n        while (n\
    \ > 0) {\n            result = result * 10 + n % 10\n            n /= 10\n   \
    \     }\n        return result", "        if (n == 0) {\n            return 0l\n\
    \        } else {\n            return (n % 2 == 0) ? 0l : (n % 3 == 0) ? 0l :\
    \ (n % 5 == 0) ? 0l : (n % 7 == 0) ? 0l : (n % 11 == 0) ? 0l : (n % 13 == 0) ?\
    \ 0l : (n % 17 == 0) ? 0l : (n % 19 == 0) ? 0l : (n % 23 == 0) ? 0l : (n % 29\
    \ == 0) ? 0l : (n % 31 == 0) ? 0l : (n % 37 == 0) ? 0l : (n % 41 == 0) ? 0l :\
    \ (n % 43 == 0) ? 0l : (n % 47 == 0) ? 0l : (n % 53 == 0) ? 0l : (n % 59 == 0)\
    \ ? 0l : (n % 61 == 0) ? 0l : (n % 67 == 0) ? 0l : (n % 71 == 0) ? 0l : (n % 73\
    \ == 0) ? 0l : (n % 79 == 0) ? 0l : (n % 83 == 0) ? 0l : (n % 89 == 0) ? 0l :\
    \ (n % 97 == 0) ? 0l : (n % 101 == 0) ? 0l : (n % 103 == 0) ? 0l : (n % 107 ==\
    \ 0) ? 0l : (n % 109 == 0) ? 0l : (n % 113 == 0) ? 0l : (n % 127 == 0) ? 0l :\
    \ (n % 131 == 0) ? 0l : (n % 137 == 0) ? 0l : (n % 139 == 0) ? 0l : (n % 149 ==\
    \ 0) ? 0l : (n % 151 == 0) ? 0l : (n % 157 == 0) ? 0l : (n % 163 == 0) ? 0l :\
    \ (n % 167 == 0) ? 0l : (n % 173 == 0) ? 0l : (n % 179 == 0) ? 0l : (n % 181 ==\
    \ 0) ? 0l : (n % 191 == 0) ? 0l : (n % 193 == 0) ? 0l : (n % 197 == 0)", "   \
    \     val s = \"\"\n        while (n > 0) {\n            s = s + (n % 2)\n   \
    \         n /= 2\n        }\n        s", "        val digits = new Array[Long](n.toString().length())\n\
    \        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        digits(n.toString().length())\n    }\n\n    // Given\
    \ a positive integer n, return the product of the digits in the\n    // number.\n\
    \    // For example:\n    // >>> digits2((1l))\n    // (1l)\n    // >>> digits2((4l))\n\
    \    // (4l)\n    // >>> digits2((235l))\n    // (235l)\n    def digits2(n : Long)\
    \ : Long = {\n        val digits = new Array[Long](n.toString().length())\n  \
    \      for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        digits(n.toString().length())", "        val n2 =\
    \ n.toString.replaceAll(\"[^0-9]\", \"\")\n        val n3 = n2.toInt\n       \
    \ if (n3 % 2 == 0)\n            0l\n        else\n            n3", "        val\
    \ nn = n.toString\n        val odd = nn.filter(_.isOdd).toList\n        val even\
    \ = nn.filter(_.isEven).toList\n        val result = odd.map(_.toLong).reduce(_.times)\n\
    \        if (even.isEmpty) {\n            return result\n        } else {\n  \
    \          return 0l\n        }", "        val nn = n.toString\n        val s\
    \ = nn.substring(1, nn.length)\n        val s2 = s.replaceAll(\"0\", \"\")\n \
    \       val s3 = s2.replaceAll(\"1\", \"\")\n        val s4 = s3.replaceAll(\"\
    2\", \"\")\n        val s5 = s4.replaceAll(\"3\", \"\")\n        val s6 = s5.replaceAll(\"\
    4\", \"\")\n        val s7 = s6.replaceAll(\"5\", \"\")\n        val s8 = s7.replaceAll(\"\
    6\", \"\")\n        val s9 = s8.replaceAll(\"7\", \"\")\n        val s10 = s9.replaceAll(\"\
    8\", \"\")\n        val s11 = s10.replaceAll(\"9\", \"\")\n        val s12 = s11.replaceAll(\"\
    0\", \"\")\n        val s13 = s12.replaceAll(\"1\", \"\")\n        val s14 = s13.replaceAll(\"\
    2\", \"\")\n        val s15 = s14.replaceAll(\"3\", \"\")\n        val s16 = s15.replaceAll(\"\
    4\", \"\")\n        val s17 = s16.replaceAll(\"5\", \"\")\n        val s18 = s17.replaceAll(\"\
    6\", \"\")\n        val s19 = s18.replaceAll(\"7\", \"\")\n        val s20 = s19.replaceAll(\"\
    8\", \"\")\n        val s21 = s20.replaceAll(\"9\", \"\")\n        val s22 = s21.replaceAll(\"\
    0\", \"\")\n        val s23 = s22.replaceAll(\"1\", \"\")\n        val s24 = s23.replaceAll(\"\
    2\", \"\")\n        val s25 = s24.replaceAll(\"3\", \"\")\n        val s26 = s25.replaceAll(\"\
    4\", \"\")\n        val s27 = s26.replaceAll(\"5\", \"\")\n        val s28 = s27.replaceAll(\"\
    6\", \"\")\n        val s29 = s28.replaceAll(\"7\", \"\")\n        val s30 = s29.replaceAll(\"\
    8\", \"\")\n        val s31 = s30.replaceAll(\"9\", \"\")\n        val s32 =",
  "        val nn = n.toString\n        val s = nn.substring(1, nn.length)\n     \
    \   val ss = s.split(\"\")\n        val result = 0l\n        for (i <- 0 until\
    \ (ss.length - 1)) {\n            val digit = ss[i].toLong\n            if (digit\
    \ % 2 == 1) {\n                result = result * digit\n            }\n      \
    \  }\n        return result", "        val nn = n.toString\n        val s = nn.substring(2,\
    \ nn.length)\n        val s2 = s.replaceAll(\"l\", \"\")\n        val s3 = s2.replaceAll(\"\
    o\", \"\")\n        val s4 = s3.replaceAll(\"d\", \"\")\n        val s5 = s4.replaceAll(\"\
    e\", \"\")\n        val s6 = s5.replaceAll(\"f\", \"\")\n        val s7 = s6.replaceAll(\"\
    g\", \"\")\n        val s8 = s7.replaceAll(\"h\", \"\")\n        val s9 = s8.replaceAll(\"\
    i\", \"\")\n        val s10 = s9.replaceAll(\"j\", \"\")\n        val s11 = s10.replaceAll(\"\
    k\", \"\")\n        val s12 = s11.replaceAll(\"l\", \"\")\n        val s13 = s12.replaceAll(\"\
    m\", \"\")\n        val s14 = s13.replaceAll(\"n\", \"\")\n        val s15 = s14.replaceAll(\"\
    o\", \"\")\n        val s16 = s15.replaceAll(\"p\", \"\")\n        val s17 = s16.replaceAll(\"\
    q\", \"\")\n        val s18 = s17.replaceAll(\"r\", \"\")\n        val s19 = s18.replaceAll(\"\
    s\", \"\")\n        val s20 = s19.replaceAll(\"t\", \"\")\n        val s21 = s20.replaceAll(\"\
    u\", \"\")\n        val s22 = s21.replaceAll(\"v\", \"\")\n        val s23 = s22.replaceAll(\"\
    w\", \"\")\n        val s24 = s23.replaceAll(\"x\", \"\")\n        val s25 = s24.replaceAll(\"\
    y\", \"\")\n        val s26 = s25.replaceAll(\"z\", \"\")\n        val s27 = s26.replaceAll(\"\
    0\", \"\")\n        val s28 = s27.replaceAll(\"1\", \"\")\n        val s29 = s28.replaceAll(\"\
    2\", \"\")\n        val s30 = s29.replaceAll(\"3\", \"\")\n        val s31 = s30.replaceAll(\"\
    4\", \"\")\n        val s32 =", "        val digits = new Array[Long](n.toString().length())\n\
    \        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n     \
    \       if (digits(i) % 2 == 0) {\n                digits(i) = 0\n           \
    \ }\n        }\n        val result = 0l\n        for (i <- 0 until n.toString().length())\
    \ {\n            result = result * digits(i)\n        }\n        result", "  \
    \      val n2 = n.toString.replaceAll(\"0\", \"\").toLong\n        val n3 = n2.toString.replaceAll(\"\
    1\", \"\").toLong\n        val n4 = n3.toString.replaceAll(\"2\", \"\").toLong\n\
    \        val n5 = n4.toString.replaceAll(\"3\", \"\").toLong\n        val n6 =\
    \ n5.toString.replaceAll(\"4\", \"\").toLong\n        val n7 = n6.toString.replaceAll(\"\
    5\", \"\").toLong\n        val n8 = n7.toString.replaceAll(\"6\", \"\").toLong\n\
    \        val n9 = n8.toString.replaceAll(\"7\", \"\").toLong\n        val n10\
    \ = n9.toString.replaceAll(\"8\", \"\").toLong\n        val n11 = n10.toString.replaceAll(\"\
    9\", \"\").toLong\n        val n12 = n11.toString.replaceAll(\"0\", \"\").toLong\n\
    \        val n13 = n12.toString.replaceAll(\"1\", \"\").toLong\n        val n14\
    \ = n13.toString.replaceAll(\"2\", \"\").toLong\n        val n15 = n14.toString.replaceAll(\"\
    3\", \"\").toLong\n        val n16 = n15.toString.replaceAll(\"4\", \"\").toLong\n\
    \        val n17 = n16.toString.replaceAll(\"5\", \"\").toLong\n        val n18\
    \ = n17.toString.replaceAll(\"6\", \"\").toLong\n        val n19 = n18.toString.replaceAll(\"\
    7\", \"\").toLong\n        val n20 = n19.toString.replaceAll(\"8\", \"\").toLong\n\
    \        val n21 = n20.toString.replaceAll(\"9\", \"\").toLong\n        val n22\
    \ = n21.toString.replaceAll(\"0\", \"\").toLong\n        val n23 = n22.toString.replaceAll(\"\
    1\", \"\").toLong\n        val n24 = n23.toString.replaceAll(\"2\", \"\").toLong\n\
    \        val n25 = n24.toString.replaceAll(\"3\", \"\").toLong\n        val n26\
    \ = n25.to", "        val nn = n\n        val nb = nn.toBigInteger()\n       \
    \ val nb2 = nb.shiftRight(1)\n        val nb3 = nb2.and(BigInteger.valueOf(3))\n\
    \        val nb4 = nb3.and(BigInteger.valueOf(3))\n        val nb5 = nb4.and(BigInteger.valueOf(3))\n\
    \        val nb6 = nb5.and(BigInteger.valueOf(3))\n        val nb7 = nb6.and(BigInteger.valueOf(3))\n\
    \        val nb8 = nb7.and(BigInteger.valueOf(3))\n        val nb9 = nb8.and(BigInteger.valueOf(3))\n\
    \        val nb10 = nb9.and(BigInteger.valueOf(3))\n        val nb11 = nb10.and(BigInteger.valueOf(3))\n\
    \        val nb12 = nb11.and(BigInteger.valueOf(3))\n        val nb13 = nb12.and(BigInteger.valueOf(3))\n\
    \        val nb14 = nb13.and(BigInteger.valueOf(3))\n        val nb15 = nb14.and(BigInteger.valueOf(3))\n\
    \        val nb16 = nb15.and(BigInteger.valueOf(3))\n        val nb17 = nb16.and(BigInteger.valueOf(3))\n\
    \        val nb18 = nb17.and(BigInteger.valueOf(3))\n        val nb19 = nb18.and(BigInteger.valueOf(3))\n\
    \        val nb20 = nb19.and(BigInteger.valueOf(3))\n        val nb21 = nb20.and(BigInteger.valueOf(3))\n\
    \        val nb22 = nb21.and(BigInteger.valueOf(3))\n        val nb23 = nb22.and(BigInteger.valueOf(3))\n\
    \        val nb24 = nb23.and(BigInteger.valueOf(3))\n        val nb25 = nb24.and(BigInteger.",
  "        val digits = new Array[Long](n.toString().length())\n        for (i <-\
    \ 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n     \
    \       if (digits(i) % 2 == 0) {\n                digits(i) = 0\n           \
    \ }\n        }\n        digits(n.toString().length())", "        val nn = n.toString\n\
    \        val nn2 = nn.substring(1, nn.length)\n        val nn3 = nn2.replaceAll(\"\
    0\", \"\")\n        val nn4 = nn3.replaceAll(\"1\", \"\")\n        val nn5 = nn4.replaceAll(\"\
    2\", \"\")\n        val nn6 = nn5.replaceAll(\"3\", \"\")\n        val nn7 = nn6.replaceAll(\"\
    4\", \"\")\n        val nn8 = nn7.replaceAll(\"5\", \"\")\n        val nn9 = nn8.replaceAll(\"\
    6\", \"\")\n        val nn10 = nn9.replaceAll(\"7\", \"\")\n        val nn11 =\
    \ nn10.replaceAll(\"8\", \"\")\n        val nn12 = nn11.replaceAll(\"9\", \"\"\
    )\n        val nn13 = nn12.replaceAll(\"0\", \"\")\n        val nn14 = nn13.replaceAll(\"\
    1\", \"\")\n        val nn15 = nn14.replaceAll(\"2\", \"\")\n        val nn16\
    \ = nn15.replaceAll(\"3\", \"\")\n        val nn17 = nn16.replaceAll(\"4\", \"\
    \")\n        val nn18 = nn17.replaceAll(\"5\", \"\")\n        val nn19 = nn18.replaceAll(\"\
    6\", \"\")\n        val nn20 = nn19.replaceAll(\"7\", \"\")\n        val nn21\
    \ = nn20.replaceAll(\"8\", \"\")\n        val nn22 = nn21.replaceAll(\"9\", \"\
    \")\n        val nn23 = nn22.replaceAll(\"0\", \"\")\n        val nn24 = nn23.replaceAll(\"\
    1\", \"\")\n        val nn25 = nn24.replaceAll(\"2\", \"\")\n        val nn26\
    \ = nn25.replaceAll(\"3\", \"\")\n        val nn27 = nn26.replaceAll(\"4\", \"\
    \")\n        val nn28 = nn27.replaceAll(\"5\", \"\")\n        val nn29 = nn28.replaceAll(\"\
    6", "        val digits = new Array[Long](n.toString().length())\n        for\
    \ (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        val result = 0l\n        for (i <- 0 until digits.length)\
    \ {\n            result = result * digits(i)\n        }\n        result", "  \
    \      if (n == 0) return 0l\n        if (n % 2 == 0) return 0l\n        return\
    \ n * (n - 1) / 2", "        val digits = new Array[Long](n.toString().length())\n\
    \        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n     \
    \       if (digits(i) % 2 == 1) {\n                return digits(i)\n        \
    \    }\n        }\n        return 0", "        val nn = n.toString\n        val\
    \ s = nn.substring(2, nn.length)\n        val r = s.split(\"\")\n        val r2\
    \ = r.map(_.toInt)\n        val r3 = r2.filter(i -> i % 2 != 0)\n        val r4\
    \ = r3.map(i -> i * 2)\n        val r5 = r4.reduce(_.times)\n        val r6 =\
    \ r5.toInt\n        val r7 = r6.toInt\n        val r8 = r7.toInt\n        val\
    \ r9 = r8.toInt\n        val r10 = r9.toInt\n        val r11 = r10.toInt\n   \
    \     val r12 = r11.toInt\n        val r13 = r12.toInt\n        val r14 = r13.toInt\n\
    \        val r15 = r14.toInt\n        val r16 = r15.toInt\n        val r17 = r16.toInt\n\
    \        val r18 = r17.toInt\n        val r19 = r18.toInt\n        val r20 = r19.toInt\n\
    \        val r21 = r20.toInt\n        val r22 = r21.toInt\n        val r23 = r22.toInt\n\
    \        val r24 = r23.toInt\n        val r25 = r24.toInt\n        val r26 = r25.toInt\n\
    \        val r27 = r26.toInt\n        val r28 = r27.toInt\n        val r29 = r28.toInt\n\
    \        val r30 = r29.toInt\n        val r31 = r30.toInt\n        val r32 = r31.toInt\n\
    \        val r33 = r32.toInt\n        val r34 = r33.toInt\n        val r35 = r34.toInt\n\
    \        val r36 = r35.toInt\n        val r37 = r36.toInt\n        val r38 = r37.toInt\n\
    \        val r39 = r38.toInt\n        val r40 = r39.toInt\n        val r41 = r40.toInt\n\
    \        val r42 = r41.toInt\n        val", "        val digits = new Array[Long](n.toString().length())\n\
    \        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n     \
    \       if (digits(i) % 2 == 0) {\n                digits(i) = 0\n           \
    \ }\n        }\n        digits", "        val n2 = n.toString.replaceAll(\"[^0-9]\"\
    , \"\")\n        val n3 = n2.toInt\n        val n4 = n3.toInt\n        val n5\
    \ = n4.toInt\n        val n6 = n5.toInt\n        val n7 = n6.toInt\n        val\
    \ n8 = n7.toInt\n        val n9 = n8.toInt\n        val n10 = n9.toInt\n     \
    \   val n11 = n10.toInt\n        val n12 = n11.toInt\n        val n13 = n12.toInt\n\
    \        val n14 = n13.toInt\n        val n15 = n14.toInt\n        val n16 = n15.toInt\n\
    \        val n17 = n16.toInt\n        val n18 = n17.toInt\n        val n19 = n18.toInt\n\
    \        val n20 = n19.toInt\n        val n21 = n20.toInt\n        val n22 = n21.toInt\n\
    \        val n23 = n22.toInt\n        val n24 = n23.toInt\n        val n25 = n24.toInt\n\
    \        val n26 = n25.toInt\n        val n27 = n26.toInt\n        val n28 = n27.toInt\n\
    \        val n29 = n28.toInt\n        val n30 = n29.toInt\n        val n31 = n30.toInt\n\
    \        val n32 = n31.toInt\n        val n33 = n32.toInt\n        val n34 = n33.toInt\n\
    \        val n35 = n34.toInt\n        val n36 = n35.toInt\n        val n37 = n36.toInt\n\
    \        val n38 = n37.toInt\n        val n39 = n38.toInt\n        val n40 = n39.toInt\n\
    \        val n41 = n40.toInt\n        val n42 = n41.toInt\n        val n43 = n42.toInt\n\
    \        val n44 = n43.toInt\n        val n45 = n44.toInt\n        val n46 = n45.toInt\n\
    \        val n47 =", "        val nn = n.toString\n        val s = nn.substring(1,\
    \ nn.length)\n        val m = s.match(\"(\\\\d+)(\\\\d)\")\n        val d = m.group(1)\n\
    \        val o = m.group(2)\n        if (o.equals(\"0\")) {\n            return\
    \ 0l\n        } else {\n            return d.toLong * o.toLong\n        }", " \
    \       val digits = new Array[Long](n.toString().length())\n        for (i <-\
    \ 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        val result = 0l\n        for (i <- 0 until digits.length)\
    \ {\n            if (digits(i) % 2 == 1) {\n                result = result *\
    \ digits(i)\n            }\n        }\n        result", "        val digits =\
    \ new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length())\
    \ {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n       \
    \ for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 ==\
    \ 0) {\n                digits(i) = 0\n            }\n        }\n        digits(n.toString().length()\
    \ - 1)", "        val digits = new Array[Long](n.toString().length())\n      \
    \  for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        val result = 0l\n        for (i <- 0 until digits.length)\
    \ {\n            result = result * digits(i)\n        }\n        result", "  \
    \      if (n == 0) {\n            0\n        } else {\n            n % 2 == 0\
    \ ? 0 : (n % 3 == 0 ? 0 : (n % 5 == 0 ? 0 : (n % 7 == 0 ? 0 : (n % 11 == 0 ? 0\
    \ : (n % 13 == 0 ? 0 : (n % 17 == 0 ? 0 : (n % 19 == 0 ? 0 : (n % 23 == 0 ? 0\
    \ : (n % 29 == 0 ? 0 : (n % 31 == 0 ? 0 : (n % 37 == 0 ? 0 : (n % 41 == 0 ? 0\
    \ : (n % 43 == 0 ? 0 : (n % 47 == 0 ? 0 : (n % 53 == 0 ? 0 : (n % 59 == 0 ? 0\
    \ : (n % 61 == 0 ? 0 : (n % 67 == 0 ? 0 : (n % 71 == 0 ? 0 : (n % 73 == 0 ? 0\
    \ : (n % 79 == 0 ? 0 : (n % 83 == 0 ? 0 : (n % 89 == 0 ? 0 : (n % 97 == 0 ? 0\
    \ : (n % 101 == 0 ? 0 : (n % 103 == 0 ? 0 : (n % 107 == 0 ? 0 : (n % 109 == 0\
    \ ? 0 : (n % 113 == 0 ? 0 : (n % 127 == 0 ? 0 : (n % 131 == 0 ? 0 : (n % 137 ==\
    \ 0 ? 0 : (n % 139 == 0 ? 0 : (n % 149 == 0 ? 0 : (n % 151 == 0 ? 0 : (n % 157\
    \ == 0 ? 0 : (n % 163 == 0 ? 0 : (n % 167 == 0 ? 0 : (n % 173 == 0 ? 0 : (n %\
    \ 179 == 0 ? 0 : (n % 181 == 0 ? 0 : (n % 191 == 0 ? 0 : (n % 193 == 0 ? 0 : (n\
    \ % 197 == 0 ? 0 : (n % 199 == 0 ? 0 : (n % 211 == 0 ? 0 : (n % 223 == 0 ? 0 :\
    \ (n % 227 == 0 ? 0 : (n % 229 == 0 ? 0 : (n % 233 == 0 ? 0 : (n % 239 == 0 ?\
    \ 0 : (n % 241 == 0 ? 0 : (n % 251 == 0 ? 0 : (n % 257 == 0 ? 0 :", "        if\
    \ (n == 0) {\n            0\n        } else {\n            n % 2 == 0 ? 0 : n\n\
    \        }", "        val nn = n.toString\n        val s = nn.substring(1, nn.length)\n\
    \        val r = s.split(\"\")\n        val rr = scala.collection.mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until r.length) {\n            val rr$i = r(i).toLong\n \
    \           rr.append(rr$i)\n        }\n        val rr$ = rr.toList\n        val\
    \ rr$i = rr$.map(x => x.toLong)\n        val rr$i$ = rr$i.filter(x => x % 2 ==\
    \ 1)\n        val rr$i$i = rr$i$\n        val rr$i$i$ = rr$i$i.map(x => x * 2)\n\
    \        val rr$i$i$i = rr$i$i$i.reduceLeft(0l, (x, y) => x * y)\n        val\
    \ rr$i$i$i$ = rr$i$i$i.toLong\n        if (rr$i$i$i == 0) {\n            return\
    \ 0l\n        } else {\n            return rr$i$i$i\n        }", "        val\
    \ digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length())\
    \ {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n       \
    \ digits(n.toString().length() - 1)", "        val nn = n.toString\n        val\
    \ s = nn.substring(1, nn.length)\n        val s2 = s.substring(0, s.length() /\
    \ 2)\n        val s3 = s2.substring(0, s2.length() / 2)\n        val s4 = s3.substring(0,\
    \ s3.length() / 2)\n        val s5 = s4.substring(0, s4.length() / 2)\n      \
    \  val s6 = s5.substring(0, s5.length() / 2)\n        val s7 = s6.substring(0,\
    \ s6.length() / 2)\n        val s8 = s7.substring(0, s7.length() / 2)\n      \
    \  val s9 = s8.substring(0, s8.length() / 2)\n        val s10 = s9.substring(0,\
    \ s9.length() / 2)\n        val s11 = s10.substring(0, s10.length() / 2)\n   \
    \     val s12 = s11.substring(0, s11.length() / 2)\n        val s13 = s12.substring(0,\
    \ s12.length() / 2)\n        val s14 = s13.substring(0, s13.length() / 2)\n  \
    \      val s15 = s14.substring(0, s14.length() / 2)\n        val s16 = s15.substring(0,\
    \ s15.length() / 2)\n        val s17 = s16.substring(0, s16.length() / 2)\n  \
    \      val s18 = s17.substring(0, s17.length() / 2)\n        val s19 = s18.substring(0,\
    \ s18.length() / 2)\n        val s20 = s19.substring(0, s19.length() / 2)\n  \
    \      val s21 = s20.substring(0, s20.length() / 2)\n        val s22 = s21.substring(0,\
    \ s21.length() / 2)\n        val s23 = s22.substring(0, s22.length() / 2)\n  \
    \      val", "        if (n == 0) return 0l\n        if (n < 0) return 0l\n  \
    \      if (n % 2 == 0) return 0l\n        return n % 2\n    }\n\n    // Given\
    \ a positive integer n, return the product of the digits in the\n    // number.\n\
    \    // Return 0 if the number is 0.\n    // For example:\n    // >>> digits_product((1l))\n\
    \    // (1l)\n    // >>> digits_product((4l))\n    // (4l)\n    // >>> digits_product((235l))\n\
    \    // (235l)\n    def digits_product(n : Long) : Long = {\n        if (n ==\
    \ 0) return 0l\n        if (n < 0) return 0l\n        return n * digits(n)\n \
    \   }\n\n    // Given a positive integer n, return the product of the digits in\
    \ the\n    // number.\n    // Return 0 if the number is 0.\n    // For example:\n\
    \    // >>> digits_product_rec((1l))\n    // (1l)\n    // >>> digits_product_rec((4l))\n\
    \    // (4l)\n    // >>> digits_product_rec((235l))\n    // (235l)\n    def digits_product_rec(n\
    \ : Long) : Long = {\n        if (n == 0) return 0l\n        if (n < 0) return\
    \ 0l\n        if (n % 2 == 0) return 0l\n        return n * digits_product_rec(n\
    \ / 2)\n    }\n\n    // Given a positive integer n, return the product of the\
    \ digits in the\n    // number.\n    // Return 0 if the number is 0.\n    // For\
    \ example:\n    // >>> digits_product_iter((1l))\n    // (1l)\n    // >>> digits_product_iter((4l))\n\
    \    // (4l)\n    // >>> digits_product_iter((235l))\n    // (235l)\n    def digits_product_iter(n\
    \ : Long) : Long = {\n        if (n == 0) return 0l\n        if (n < 0) return\
    \ 0l\n        if (n % 2 == 0) return 0l\n        return n * digits_", "      \
    \  if (n == 0) return 0l\n        if (n % 2 == 0) return 0l\n        return n\
    \ % 2l", "        val s = \"\"\n        while (n > 0) {\n            s = s + (n\
    \ % 2)\n            n /= 2\n        }\n        if (s.length == 0) return 0l\n\
    \        return s.charAt(0)", "        if (n == 0) return 0l\n        if (n <\
    \ 0) return 0l\n        if (n == 1) return 1l\n        if (n == 2) return 2l\n\
    \        if (n == 3) return 3l\n        if (n == 4) return 4l\n        if (n ==\
    \ 5) return 5l\n        if (n == 6) return 6l\n        if (n == 7) return 7l\n\
    \        if (n == 8) return 8l\n        if (n == 9) return 9l\n        if (n %\
    \ 2 == 0) return 0l\n        return n % 2", "        if (n == 0) {\n         \
    \   0\n        } else {\n            n % 2 == 0 ? 0 : n\n        }", "       \
    \ val digits = mutable.List[Long]()\n        while (n > 0) {\n            digits.append(n\
    \ % 10)\n            n /= 10\n        }\n        return digits.foldLeft(0l)((acc,\
    \ x) => acc * x)", "        if (n == 0) return 0l\n        else {\n          \
    \  var result = 1l\n            var i = 2l\n            while (i <= n) {\n   \
    \             if (n % i == 0) {\n                    result *= i\n           \
    \         n /= i\n                } else {\n                    i += 2l\n    \
    \            }\n            }\n            return result\n        }", "      \
    \  val nn = n.toString\n        val nn_len = nn.length\n        val nn_digits\
    \ = nn.substring(nn_len - 1, nn_len)\n        val nn_digits_int = Integer.parseInt(nn_digits)\n\
    \        nn_digits_int % 2 == 0 ? 0 : nn_digits_int", "        if (n == 0) return\
    \ 0l\n        if (n < 0) return 0l\n        if (n == 1) return 1l\n        if\
    \ (n % 2 == 0) return 0l\n        return n % 2l", "        if (n == 0) {\n   \
    \         0\n        } else {\n            n % 2 == 0 ? 0 : (n % 3 == 0 ? 0 :\
    \ (n % 5 == 0 ? 0 : (n % 7 == 0 ? 0 : (n % 11 == 0 ? 0 : (n % 13 == 0 ? 0 : (n\
    \ % 17 == 0 ? 0 : (n % 19 == 0 ? 0 : (n % 23 == 0 ? 0 : (n % 29 == 0 ? 0 : (n\
    \ % 31 == 0 ? 0 : (n % 37 == 0 ? 0 : (n % 41 == 0 ? 0 : (n % 43 == 0 ? 0 : (n\
    \ % 47 == 0 ? 0 : (n % 53 == 0 ? 0 : (n % 59 == 0 ? 0 : (n % 61 == 0 ? 0 : (n\
    \ % 67 == 0 ? 0 : (n % 71 == 0 ? 0 : (n % 73 == 0 ? 0 : (n % 79 == 0 ? 0 : (n\
    \ % 83 == 0 ? 0 : (n % 89 == 0 ? 0 : (n % 97 == 0 ? 0 : (n % 101 == 0 ? 0 : (n\
    \ % 103 == 0 ? 0 : (n % 107 == 0 ? 0 : (n % 109 == 0 ? 0 : (n % 113 == 0 ? 0 :\
    \ (n % 127 == 0 ? 0 : (n % 131 == 0 ? 0 : (n % 137 == 0 ? 0 : (n % 139 == 0 ?\
    \ 0 : (n % 149 == 0 ? 0 : (n % 151 == 0 ? 0 : (n % 157 == 0 ? 0 : (n % 163 ==\
    \ 0 ? 0 : (n % 167 == 0 ? 0 : (n % 173 == 0 ? 0 : (n % 179 == 0 ? 0 : (n % 181\
    \ == 0 ? 0 : (n % 191 == 0 ? 0 : (n % 193 == 0 ? 0 : (n % 197 == 0 ? 0 : (n %\
    \ 199 == 0 ? 0 : (n % 211 == 0 ? 0 : (n % 223 == 0 ? 0 : (n % 227 == 0 ? 0 : (n\
    \ % 229 == 0 ? 0 : (n % 233 == 0 ? 0 : (n % 239 == 0 ? 0 : (n % 241 == 0 ? 0 :\
    \ (n % 251 == 0 ? 0 : (n % 257 == 0 ? 0 :", "        val nn = n.toString\n   \
    \     val s = nn.substring(1, nn.length)\n        val r = s.split(\"\")\n    \
    \    val r2 = r.map(Long.parseLong)\n        val r3 = r2.filter(x => x % 2 ==\
    \ 1)\n        val r4 = r3.map(x => x * x)\n        val r5 = r4.reduce(0, (x, y)\
    \ => x + y)\n        return r5", "        val digits = new Array[Long](n.toString().length())\n\
    \        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        val result = 0l\n        for (i <- 0 until digits.length)\
    \ {\n            result = result * digits(i)\n        }\n        result", "  \
    \      var x = n\n        while(x > 0) {\n            var y = x % 10\n       \
    \     if(y % 2 == 1) {\n                return x * y\n            }\n        \
    \    x = x / 10\n        }\n        return 0l", "        val digits = new Array[Long](n.toString().length())\n\
    \        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        digits(n.toString().length() - 1)", "        val nn\
    \ = n\n        if (nn % 2 == 0) {\n            return 0l\n        }\n        val\
    \ nn2 = nn / 2\n        val nn3 = nn2 / 3\n        val nn4 = nn2 / 4\n       \
    \ val nn5 = nn2 / 5\n        val nn6 = nn2 / 6\n        val nn7 = nn2 / 7\n  \
    \      val nn8 = nn2 / 8\n        val nn9 = nn2 / 9\n        val nn10 = nn3 /\
    \ 10\n        val nn11 = nn3 / 11\n        val nn12 = nn3 / 12\n        val nn13\
    \ = nn3 / 13\n        val nn14 = nn3 / 14\n        val nn15 = nn3 / 15\n     \
    \   val nn16 = nn4 / 16\n        val nn17 = nn4 / 17\n        val nn18 = nn4 /\
    \ 18\n        val nn19 = nn4 / 19\n        val nn20 = nn5 / 20\n        val nn21\
    \ = nn5 / 21\n        val nn22 = nn5 / 22\n        val nn23 = nn5 / 23\n     \
    \   val nn24 = nn5 / 24\n        val nn25 = nn6 / 25\n        val nn26 = nn6 /\
    \ 26\n        val nn27 = nn6 / 27\n        val nn28 = nn6 / 28\n        val nn29\
    \ = nn6 / 29\n        val nn30 = nn7 / 30\n        val nn31 = nn7 / 31\n     \
    \   val nn32 = nn7 / 32\n        val nn33 = nn7 / 33\n        val nn34 = nn7 /\
    \ 34\n        val nn35 = nn7 / 35\n        val nn36 = nn8 / 36\n        val nn37\
    \ = nn8 / 37\n        val nn38 = nn8 / 38\n        val nn39 = nn8 / 39\n     \
    \   val nn40 = nn9 / 40\n        val nn41 = nn9 / 41\n        val nn42 = n", " \
    \       if (n % 2 == 0) {\n            return 0l\n        } else {\n         \
    \   return n % 10l\n        }", "        val nn = n.toString\n        val s =\
    \ nn.substring(1, nn.length)\n        val r = s.split(\"\")\n        val rr =\
    \ r.map(_.toInt)\n        val rr2 = rr.filter(_.mod(2) == 1)\n        val rr3\
    \ = rr2.map(_ * 2)\n        val rr4 = rr3.filter(_ < n)\n        val rr5 = rr4.map(_\
    \ + 1)\n        val rr6 = rr5.filter(_ < n)\n        val rr7 = rr6.map(_ + 1)\n\
    \        val rr8 = rr7.filter(_ < n)\n        val rr9 = rr8.map(_ + 1)\n     \
    \   val rr10 = rr9.filter(_ < n)\n        val rr11 = rr10.map(_ + 1)\n       \
    \ val rr12 = rr11.filter(_ < n)\n        val rr13 = rr12.map(_ + 1)\n        val\
    \ rr14 = rr13.filter(_ < n)\n        val rr15 = rr14.map(_ + 1)\n        val rr16\
    \ = rr15.filter(_ < n)\n        val rr17 = rr16.map(_ + 1)\n        val rr18 =\
    \ rr17.filter(_ < n)\n        val rr19 = rr18.map(_ + 1)\n        val rr20 = rr19.filter(_\
    \ < n)\n        val rr21 = rr20.map(_ + 1)\n        val rr22 = rr21.filter(_ <\
    \ n)\n        val rr23 = rr22.map(_ + 1)\n        val rr24 = rr23.filter(_ < n)\n\
    \        val rr25 = rr24.map(_ + 1)\n        val rr26 = rr25.filter(_ < n)\n \
    \       val rr27 = rr26.map(_ + 1)\n        val rr28 = rr27.filter(_ < n)\n  \
    \      val rr29 = rr28.map(_ + 1)\n        val rr30 = rr", "        if (n == 0)\
    \ {\n            0\n        } else {\n            n % 2 == 0 ? 0 : n\n       \
    \ }", "        val digits = new Array[Long](n.toString().length())\n        for\
    \ (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n     \
    \       if (digits(i) % 2 == 0) {\n                digits(i) = 0\n           \
    \ }\n        }\n        digits(n.toString().length())", "        val digits =\
    \ new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length())\
    \ {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n       \
    \ digits(n.toString().length())", "        val n_ = n\n        val n_ = n_\n \
    \       val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_\
    \ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n      \
    \  val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n\
    \        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_\
    \ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n      \
    \  val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n\
    \        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_\
    \ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n      \
    \  val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n\
    \        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_\
    \ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n      \
    \  val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n\
    \        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_\
    \ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n      \
    \  val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n\
    \        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_\
    \ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n      \
    \  ", "        if (n == 0) return 0l\n        if (n == 1) return 1l\n        if\
    \ (n % 2 == 0) return 0l\n        return (n % 2) * digits(n / 2)", "        val\
    \ n2 = n.toString.replaceAll(\"[^0-9]\", \"\")\n        val n3 = n2.toInt\n  \
    \      if (n3 % 2 == 0) {\n            return 0l\n        } else {\n         \
    \   return n3.toLong\n        }", "        if (n == 0) {\n            0\n    \
    \    } else {\n            var x = n\n            var y = 1l\n            while\
    \ (x > 0) {\n                y = y * x % 10\n                x = x / 10\n    \
    \        }\n            y\n        }", "        if (n == 0) {\n            0\n\
    \        } else {\n            var i = 0\n            while (i < n) {\n      \
    \          if (n % 2 == 1) {\n                    n = n / 2\n                }\
    \ else {\n                    n = n / 2\n                    i = i + 1\n     \
    \           }\n            }\n        }", "        val digits = new Array[Long](n.toString().length())\n\
    \        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n     \
    \       if (digits(i) % 2 == 0) {\n                digits(i) = 0\n           \
    \ }\n        }\n        val result = 0l\n        for (i <- 0 until n.toString().length())\
    \ {\n            result = result * digits(i)\n        }\n        result", "  \
    \      val n2 = n.toString\n        val s = n2.substring(1, n2.length)\n     \
    \   val s2 = s.replaceAll(\"l\", \"\")\n        val s3 = s2.replaceAll(\"o\",\
    \ \"\")\n        val s4 = s3.replaceAll(\"d\", \"\")\n        val s5 = s4.replaceAll(\"\
    e\", \"\")\n        val s6 = s5.replaceAll(\"s\", \"\")\n        val s7 = s6.replaceAll(\"\
    f\", \"\")\n        val s8 = s7.replaceAll(\"g\", \"\")\n        val s9 = s8.replaceAll(\"\
    h\", \"\")\n        val s10 = s9.replaceAll(\"i\", \"\")\n        val s11 = s10.replaceAll(\"\
    j\", \"\")\n        val s12 = s11.replaceAll(\"k\", \"\")\n        val s13 = s12.replaceAll(\"\
    l\", \"\")\n        val s14 = s13.replaceAll(\"m\", \"\")\n        val s15 = s14.replaceAll(\"\
    n\", \"\")\n        val s16 = s15.replaceAll(\"o\", \"\")\n        val s17 = s16.replaceAll(\"\
    p\", \"\")\n        val s18 = s17.replaceAll(\"q\", \"\")\n        val s19 = s18.replaceAll(\"\
    r\", \"\")\n        val s20 = s19.replaceAll(\"s\", \"\")\n        val s21 = s20.replaceAll(\"\
    t\", \"\")\n        val s22 = s21.replaceAll(\"u\", \"\")\n        val s23 = s22.replaceAll(\"\
    v\", \"\")\n        val s24 = s23.replaceAll(\"w\", \"\")\n        val s25 = s24.replaceAll(\"\
    x\", \"\")\n        val s26 = s25.replaceAll(\"y\", \"\")\n        val s27 = s26.replaceAll(\"\
    z\", \"\")\n        val s28 = s27.replaceAll(\"0\", \"\")\n        val s29 = s28.replaceAll(\"\
    1\", \"\")\n        val s30 = s29.replaceAll(\"2\", \"\")\n        val s31 = s30.replaceAll(\"\
    3\", \"\")\n        val s32 =", "        val nn = n.toString\n        val nn2\
    \ = nn.replaceAll(\"0\", \"\")\n        val nn3 = nn2.replaceAll(\"1\", \"\")\n\
    \        val nn4 = nn3.replaceAll(\"2\", \"\")\n        val nn5 = nn4.replaceAll(\"\
    3\", \"\")\n        val nn6 = nn5.replaceAll(\"4\", \"\")\n        val nn7 = nn6.replaceAll(\"\
    5\", \"\")\n        val nn8 = nn7.replaceAll(\"6\", \"\")\n        val nn9 = nn8.replaceAll(\"\
    7\", \"\")\n        val nn10 = nn9.replaceAll(\"8\", \"\")\n        val nn11 =\
    \ nn10.replaceAll(\"9\", \"\")\n        val nn12 = nn11.replaceAll(\"0\", \"\"\
    )\n        val nn13 = nn12.replaceAll(\"1\", \"\")\n        val nn14 = nn13.replaceAll(\"\
    2\", \"\")\n        val nn15 = nn14.replaceAll(\"3\", \"\")\n        val nn16\
    \ = nn15.replaceAll(\"4\", \"\")\n        val nn17 = nn16.replaceAll(\"5\", \"\
    \")\n        val nn18 = nn17.replaceAll(\"6\", \"\")\n        val nn19 = nn18.replaceAll(\"\
    7\", \"\")\n        val nn20 = nn19.replaceAll(\"8\", \"\")\n        val nn21\
    \ = nn20.replaceAll(\"9\", \"\")\n        val nn22 = nn21.replaceAll(\"0\", \"\
    \")\n        val nn23 = nn22.replaceAll(\"1\", \"\")\n        val nn24 = nn23.replaceAll(\"\
    2\", \"\")\n        val nn25 = nn24.replaceAll(\"3\", \"\")\n        val nn26\
    \ = nn25.replaceAll(\"4\", \"\")\n        val nn27 = nn26.replaceAll(\"5\", \"\
    \")\n        val nn28 = nn27.replaceAll(\"6\", \"\")\n        val nn29 = nn28.replaceAll(\"\
    7\", \"\")", "        val nn = n\n        val nb = nn.bitLength()\n        val\
    \ nb2 = nb / 2\n        val nb3 = nb / 3\n        val nb4 = nb / 4\n        val\
    \ nb5 = nb / 5\n        val nb6 = nb / 6\n        val nb7 = nb / 7\n        val\
    \ nb8 = nb / 8\n        val nb9 = nb / 9\n        val nb10 = nb / 10\n       \
    \ val nb11 = nb / 11\n        val nb12 = nb / 12\n        val nb13 = nb / 13\n\
    \        val nb14 = nb / 14\n        val nb15 = nb / 15\n        val nb16 = nb\
    \ / 16\n        val nb17 = nb / 17\n        val nb18 = nb / 18\n        val nb19\
    \ = nb / 19\n        val nb20 = nb / 20\n        val nb21 = nb / 21\n        val\
    \ nb22 = nb / 22\n        val nb23 = nb / 23\n        val nb24 = nb / 24\n   \
    \     val nb25 = nb / 25\n        val nb26 = nb / 26\n        val nb27 = nb /\
    \ 27\n        val nb28 = nb / 28\n        val nb29 = nb / 29\n        val nb30\
    \ = nb / 30\n        val nb31 = nb / 31\n        val nb32 = nb / 32\n        val\
    \ nb33 = nb / 33\n        val nb34 = nb / 34\n        val nb35 = nb / 35\n   \
    \     val nb36 = nb / 36\n        val nb37 = nb / 37\n        val nb38 = nb /\
    \ 38\n        val nb39 = nb / 39\n        val nb40 = nb / 40\n        val nb41\
    \ = nb / 41\n        val nb42 = nb / 42\n        val nb43 = nb / 43\n        val\
    \ nb44 = nb / 44\n        val nb45 = nb / 45\n        val nb46 = nb /", "    \
    \    if (n == 0) {\n            0\n        } else {\n            n % 2 == 0 ?\
    \ 0 : n\n        }", "        if (n == 0) return 0l\n        if (n % 2 == 0) return\
    \ 0l\n        return n * (n - 1) / 2", "        val nn = n\n        val n2 = nn.toString.replaceAll(\"\
    [0-9]\", \"\")\n        val n3 = n2.toString.replaceAll(\"[0-9]\", \"\")\n   \
    \     val n4 = n3.toString.replaceAll(\"[0-9]\", \"\")\n        val n5 = n4.toString.replaceAll(\"\
    [0-9]\", \"\")\n        val n6 = n5.toString.replaceAll(\"[0-9]\", \"\")\n   \
    \     val n7 = n6.toString.replaceAll(\"[0-9]\", \"\")\n        val n8 = n7.toString.replaceAll(\"\
    [0-9]\", \"\")\n        val n9 = n8.toString.replaceAll(\"[0-9]\", \"\")\n   \
    \     val n10 = n9.toString.replaceAll(\"[0-9]\", \"\")\n        val n11 = n10.toString.replaceAll(\"\
    [0-9]\", \"\")\n        val n12 = n11.toString.replaceAll(\"[0-9]\", \"\")\n \
    \       val n13 = n12.toString.replaceAll(\"[0-9]\", \"\")\n        val n14 =\
    \ n13.toString.replaceAll(\"[0-9]\", \"\")\n        val n15 = n14.toString.replaceAll(\"\
    [0-9]\", \"\")\n        val n16 = n15.toString.replaceAll(\"[0-9]\", \"\")\n \
    \       val n17 = n16.toString.replaceAll(\"[0-9]\", \"\")\n        val n18 =\
    \ n17.toString.replaceAll(\"[0-9]\", \"\")\n        val n19 = n18.toString.replaceAll(\"\
    [0-9]\", \"\")\n        val n20 = n19.toString.replaceAll(\"[0-9]\", \"\")\n \
    \       val n21 = n20.toString.replaceAll(\"[0-9]\", \"\")\n        val n22 =\
    \ n21.toString.replaceAll(\"[0-9]\", \"\")\n        val n23 = n22.toString.replaceAll(\"\
    [0-9]\", \"\")", "        if (n == 0) {\n            0\n        } else {\n   \
    \         n % 2 == 0 ? 0 : n\n        }", "        val d = n.toString().toCharArray\n\
    \        val s = new StringBuilder()\n        for (i <- 0 until d.length) {\n\
    \            if (d[i].toCharCode() % 2 == 1) {\n                s.append(d[i])\n\
    \            }\n        }\n        if (s.length == 0) {\n            return 0l\n\
    \        } else {\n            return Long.parseLong(s.toString())\n        }",
  "        val s = \"\"\n        while (n > 0) {\n            s = (n % 2).toString()\
    \ + s\n            n /= 2\n        }\n        s.toLong", "        if (n == 0)\
    \ {\n            0\n        } else {\n            n % 2 == 0 ? 0 : n\n       \
    \ }", "        if (n == 0) return 0l\n        if (n % 2 == 0) return 0l\n    \
    \    return (n / 2) * (n / 2 + 1)", "        if (n % 2 == 0) {\n            return\
    \ 0l\n        } else {\n            return n % 10l\n        }", "        val nn\
    \ = n.toString\n        val s = nn.substring(2, nn.length)\n        val s2 = s.substring(1,\
    \ s.length - 1)\n        val s3 = s2.substring(0, s2.length - 1)\n        val\
    \ s4 = s3.substring(0, s3.length - 1)\n        val s5 = s4.substring(0, s4.length\
    \ - 1)\n        val s6 = s5.substring(0, s5.length - 1)\n        val s7 = s6.substring(0,\
    \ s6.length - 1)\n        val s8 = s7.substring(0, s7.length - 1)\n        val\
    \ s9 = s8.substring(0, s8.length - 1)\n        val s10 = s9.substring(0, s9.length\
    \ - 1)\n        val s11 = s10.substring(0, s10.length - 1)\n        val s12 =\
    \ s11.substring(0, s11.length - 1)\n        val s13 = s12.substring(0, s12.length\
    \ - 1)\n        val s14 = s13.substring(0, s13.length - 1)\n        val s15 =\
    \ s14.substring(0, s14.length - 1)\n        val s16 = s15.substring(0, s15.length\
    \ - 1)\n        val s17 = s16.substring(0, s16.length - 1)\n        val s18 =\
    \ s17.substring(0, s17.length - 1)\n        val s19 = s18.substring(0, s18.length\
    \ - 1)\n        val s20 = s19.substring(0, s19.length - 1)\n        val s21 =\
    \ s20.substring(0, s20.length - 1)\n        val s22 = s21.substring(0, s21.length\
    \ - 1)\n        val s23 = s22.substring(0, s22.length - 1)\n        val s24 =\
    \ s23.substring(0, s23.length - 1)\n        val s", "        val nn = n.toString\n\
    \        val s = nn.substring(2, nn.length)\n        val r = s.split(\"\")\n \
    \       val r2 = r.map(_.toInt)\n        val r3 = r2.filter(i -> i % 2 != 0)\n\
    \        val r4 = r3.map(i -> i * 2)\n        val r5 = r4.reduce(_.times)\n  \
    \      r5", "        val digits = new Array[Long](n.toString().length())\n   \
    \     for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        val result = 0l\n        for (i <- 0 until digits.length)\
    \ {\n            result = result * digits(i)\n        }\n        result", "  \
    \      val digits = new Array[Long](n.toString().length())\n        for (i <-\
    \ 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        digits(0)", "        val digits = new Array[Long](n.toString().length())\n\
    \        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        val result = 0l\n        for (i <- 0 until digits.length)\
    \ {\n            result = result * digits(i)\n        }\n        result", "  \
    \      val digits = new Array[Long](n.toString().length())\n        for (i <-\
    \ 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n     \
    \       if (digits(i) % 2 == 0) {\n                digits(i) = 0\n           \
    \ }\n        }\n        digits(n.toString().length())", "        val digits =\
    \ new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length())\
    \ {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n       \
    \ val result = 0l\n        for (i <- 0 until digits.length) {\n            result\
    \ = result * digits(i)\n        }\n        result", "        if (n == 0) {\n \
    \           0\n        } else {\n            n % 2 == 0 ? 0 : n\n        }", " \
    \       val nn = n.toString\n        val s = nn.substring(2, nn.length)\n    \
    \    val r = s.split(\"\")\n        val r2 = r.map(Long.parseLong)\n        val\
    \ r3 = r2.filter(x => x % 2 == 1)\n        val r4 = r3.map(x => x * x)\n     \
    \   val r5 = r4.reduce(0l, (x, y) => x * y)\n        return r5", "        val\
    \ nn = n.toString\n        val s = nn.substring(1, nn.length)\n        val r =\
    \ s.split(\"\")\n        val r2 = r.map(_.toInt)\n        val r3 = r2.filter(_.mod(2)\
    \ == 1)\n        val r4 = r3.map(_.toInt)\n        val r5 = r4.reduce(_.times)\n\
    \        val r6 = r5.toInt\n        if (r6 == 0) {\n            return 0\n   \
    \     } else {\n            return r6\n        }", "        val digits = new Array[Long](n.toString().length())\n\
    \        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n     \
    \       if (digits(i) % 2 == 0) {\n                digits(i) = 0\n           \
    \ }\n        }\n        digits", "        val d = new java.math.BigInteger(n.toString())\n\
    \        val odd = d.mod(new java.math.BigInteger(\"3\"))\n        if (odd.equals(java.math.BigInteger.ZERO))\
    \ {\n            return 0l\n        } else {\n            return odd.longValue()\n\
    \        }", "        val nn = n.toString\n        val s = nn.substring(2, nn.length)\n\
    \        val s2 = s.substring(1, s.length - 1)\n        val s3 = s2.substring(0,\
    \ s2.length - 1)\n        val s4 = s3.substring(0, s3.length - 1)\n        val\
    \ s5 = s4.substring(0, s4.length - 1)\n        val s6 = s5.substring(0, s5.length\
    \ - 1)\n        val s7 = s6.substring(0, s6.length - 1)\n        val s8 = s7.substring(0,\
    \ s7.length - 1)\n        val s9 = s8.substring(0, s8.length - 1)\n        val\
    \ s10 = s9.substring(0, s9.length - 1)\n        val s11 = s10.substring(0, s10.length\
    \ - 1)\n        val s12 = s11.substring(0, s11.length - 1)\n        val s13 =\
    \ s12.substring(0, s12.length - 1)\n        val s14 = s13.substring(0, s13.length\
    \ - 1)\n        val s15 = s14.substring(0, s14.length - 1)\n        val s16 =\
    \ s15.substring(0, s15.length - 1)\n        val s17 = s16.substring(0, s16.length\
    \ - 1)\n        val s18 = s17.substring(0, s17.length - 1)\n        val s19 =\
    \ s18.substring(0, s18.length - 1)\n        val s20 = s19.substring(0, s19.length\
    \ - 1)\n        val s21 = s20.substring(0, s20.length - 1)\n        val s22 =\
    \ s21.substring(0, s21.length - 1)\n        val s23 = s22.substring(0, s22.length\
    \ - 1)\n        val s24 = s23.substring(0, s23.length - 1)\n        val s", " \
    \       val d = n.toString\n        val s = d.split(\"\")\n        val odd = s.filter(x\
    \ => x % 2 == 1).toList\n        val even = s.filter(x => x % 2 == 0).toList\n\
    \        val oddDigits = odd.map(x => x.toInt).toList\n        val evenDigits\
    \ = even.map(x => x.toInt).toList\n        oddDigits.foreach(x => {\n        \
    \    if (x % 2 == 1) {\n                val prod = x * oddDigits.head\n      \
    \          oddDigits = oddDigits.tail\n                oddDigits.foreach(y =>\
    \ {\n                    if (y % 2 == 1) {\n                        prod *= y\n\
    \                    }\n                })\n                return prod\n    \
    \        }\n        })\n        evenDigits.foreach(x => {\n            if (x %\
    \ 2 == 0) {\n                return 0\n            }\n        })\n        return\
    \ oddDigits.head", "        if (n == 0) return 0l\n        if (n < 0) return 0l\n\
    \        if (n == 1) return 1l\n        if (n % 2 == 0) return 0l\n        return\
    \ n % 2l", "        val nn = n.toString\n        val nn2 = nn.replaceAll(\"0\"\
    , \"\")\n        val nn3 = nn2.replaceAll(\"1\", \"\")\n        val nn4 = nn3.replaceAll(\"\
    2\", \"\")\n        val nn5 = nn4.replaceAll(\"3\", \"\")\n        val nn6 = nn5.replaceAll(\"\
    4\", \"\")\n        val nn7 = nn6.replaceAll(\"5\", \"\")\n        val nn8 = nn7.replaceAll(\"\
    6\", \"\")\n        val nn9 = nn8.replaceAll(\"7\", \"\")\n        val nn10 =\
    \ nn9.replaceAll(\"8\", \"\")\n        val nn11 = nn10.replaceAll(\"9\", \"\"\
    )\n        val nn12 = nn11.replaceAll(\"0\", \"\")\n        val nn13 = nn12.replaceAll(\"\
    1\", \"\")\n        val nn14 = nn13.replaceAll(\"2\", \"\")\n        val nn15\
    \ = nn14.replaceAll(\"3\", \"\")\n        val nn16 = nn15.replaceAll(\"4\", \"\
    \")\n        val nn17 = nn16.replaceAll(\"5\", \"\")\n        val nn18 = nn17.replaceAll(\"\
    6\", \"\")\n        val nn19 = nn18.replaceAll(\"7\", \"\")\n        val nn20\
    \ = nn19.replaceAll(\"8\", \"\")\n        val nn21 = nn20.replaceAll(\"9\", \"\
    \")\n        val nn22 = nn21.replaceAll(\"0\", \"\")\n        val nn23 = nn22.replaceAll(\"\
    1\", \"\")\n        val nn24 = nn23.replaceAll(\"2\", \"\")\n        val nn25\
    \ = nn24.replaceAll(\"3\", \"\")\n        val nn26 = nn25.replaceAll(\"4\", \"\
    \")\n        val nn27 = nn26.replaceAll(\"5\", \"\")\n        val nn28 = nn27.replaceAll(\"\
    6\", \"\")\n        val nn29 = nn28.replaceAll(\"7\", \"\")", "        val digits\
    \ = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length())\
    \ {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n       \
    \ for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 ==\
    \ 0) {\n                return 0l\n            }\n        }\n        return reduce(digits)",
  "        if (n == 0) {\n            0\n        } else {\n            var m = n\n\
    \            var i = 0\n            while (m > 0) {\n                i = i + 1\n\
    \                m = m / 10\n            }\n            var result = 1l\n    \
    \        for (i <- 1 to i - 1) {\n                result = result * (m % 10)\n\
    \                m = m / 10\n            }\n            result\n        }", " \
    \       val digits = new Array[Long](n.toString().length())\n        for (i <-\
    \ 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n     \
    \       if (digits(i) % 2 == 0) {\n                digits(i) = 0\n           \
    \ }\n        }\n        val result = 0l\n        for (i <- 0 until n.toString().length())\
    \ {\n            result = result * digits(i)\n        }\n        result", "  \
    \      val digits = new Array[Long](n.toString().length())\n        for (i <-\
    \ 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n     \
    \       if (digits(i) % 2 == 0) {\n                digits(i) = 0\n           \
    \ }\n        }\n        digits(n.toString().length())", "        if (n % 2 ==\
    \ 0) {\n            return 0l\n        } else {\n            return n / 2\n  \
    \      }", "        if (n == 0) {\n            0\n        } else {\n         \
    \   n % 2 == 0 ? 0 : n\n        }", "        if (n == 0) {\n            0\n  \
    \      } else {\n            n % 2 == 0 ? 0 : (n % 2 == 1 ? 1 : 0)\n        }",
  "        val digits = new Array[Long](n.toString().length())\n        for (i <-\
    \ 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n     \
    \       if (digits(i) % 2 == 0) {\n                digits(i) = 0\n           \
    \ }\n        }\n        digits", "        val digits = new Array[Long](n.toString().length())\n\
    \        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n     \
    \       if (digits(i) % 2 == 1) {\n                return digits(i)\n        \
    \    }\n        }\n        return 0", "        val digits = new Array[Long](n.toString().length())\n\
    \        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        digits(0)\n    }\n\n    // Given a positive integer\
    \ n, return the product of the even digits.\n    // Return 0 if all digits are\
    \ odd.\n    // For example:\n    // >>> evenDigits((1l))\n    // (1l)\n    //\
    \ >>> evenDigits((4l))\n    // (0l)\n    // >>> evenDigits((235l))\n    // (0l)\n\
    \    def evenDigits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n\
    \        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        digits(0)", "        val d = new java.math.BigInteger(n.toString())\n\
    \        val odd = d.mod(new java.math.BigInteger(\"3\"))\n        val result\
    \ = odd.multiply(new java.math.BigInteger(\"1\"))\n        if (odd.equals(new\
    \ java.math.BigInteger(\"0\")))\n            return result\n        else\n   \
    \         return 0l", "        val digits = new Array[Long](n.toString().length())\n\
    \        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        digits(digits.length - 1)\n    }\n\n    // Given a\
    \ positive integer n, return the product of the even digits.\n    // Return 0\
    \ if all digits are odd.\n    // For example:\n    // >>> evenDigits((1l))\n \
    \   // (0l)\n    // >>> evenDigits((4l))\n    // (4l)\n    // >>> evenDigits((235l))\n\
    \    // (0l)\n    def evenDigits(n : Long) : Long = {\n        val digits = new\
    \ Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length())\
    \ {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n       \
    \ digits(digits.length - 1)\n    }\n\n    // Given a positive integer n, return\
    \ the product of the digits\n    // in the number.\n    // For example:\n    //\
    \ >>> digitsProduct((1l))\n    // (1l)\n    // >>> digitsProduct((4l))\n    //\
    \ (4l)\n    // >>> digitsProduct((235l))\n    // (235l)\n    def digitsProduct(n\
    \ : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n\
    \        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        digits(digits.length - 1)\n    }\n\n    // Given a\
    \ positive integer n, return the product of the digits\n    // in the number.\n\
    \    // For example:\n    // >>> digitsProduct((1l))\n    // (1l)\n    // >>>\
    \ digitsProduct((4l))\n    // (4l)\n    // >>> digitsProduct((235l))\n    // (235l)\n\
    \    def digitsProduct2(n : Long) : Long = {\n        val digits", "        val\
    \ digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length())\
    \ {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n       \
    \ for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 ==\
    \ 0) {\n                digits(i) = 0\n            }\n        }\n        digits(n.toString().length())",
  "        if (n == 0) {\n            0l\n        } else {\n            n % 2 == 0l\
    \ ? 0l : n\n        }", "        val d = n.toString\n        val s = d.split(\"\
    \")\n        val odd = s.filter(d -> d % 2 != 0).toList\n        val result =\
    \ odd.map(d -> d.toLong)\n        if (odd.size == 0) {\n            return 0l\n\
    \        } else {\n            return result.reduce(_.times)\n        }", "  \
    \      val digits = new Array[Long](n.toString().length())\n        for (i <-\
    \ 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        digits(n.toString().length())\n    }\n\n    // Given\
    \ a positive integer n, return the product of the even digits.\n    // Return\
    \ 0 if all digits are odd.\n    // For example:\n    // >>> evenDigits((1l))\n\
    \    // (1l)\n    // >>> evenDigits((4l))\n    // (0l)\n    // >>> evenDigits((235l))\n\
    \    // (0l)\n    def evenDigits(n : Long) : Long = {\n        val digits = new\
    \ Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length())\
    \ {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n       \
    \ digits(n.toString().length())\n    }\n\n    // Given a positive integer n, return\
    \ the product of the digits in the\n    // number.\n    // For example:\n    //\
    \ >>> digitsProduct((1l))\n    // (1l)\n    // >>> digitsProduct((4l))\n    //\
    \ (4l)\n    // >>> digitsProduct((235l))\n    // (235l)\n    def digitsProduct(n\
    \ : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n\
    \        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        digits(n.toString().length())\n    }\n\n    // Given\
    \ a positive integer n, return the product of the digits in the\n    // number.\n\
    \    // For example:\n    // >>> digitsProduct((1l))\n    // (1l)\n    // >>>\
    \ digitsProduct((4l))\n    // (4l)\n    // >>> digitsProduct((235l))\n    // (235l)\n\
    \    def digitsProduct2(n : Long) : Long = {\n        val digits", "        val\
    \ digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length())\
    \ {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n       \
    \ digits.reduce((x, y) -> x * y)", "        if (n == 0) return 0l\n        if\
    \ (n % 2 == 0) return 0l\n        return n % 2", "        if (n == 0) {\n    \
    \        0\n        } else {\n            var x = n\n            var y = 1l\n\
    \            while (x > 0) {\n                y = y * x % 10\n               \
    \ x = x / 10\n            }\n            y\n        }", "        val nn = n\n\
    \        val nb = nn.toBigInteger()\n        val nb2 = nb.shiftRight(1)\n    \
    \    val nb3 = nb2.and(BigInteger.valueOf(3))\n        val nb4 = nb3.and(BigInteger.valueOf(7))\n\
    \        val nb5 = nb4.and(BigInteger.valueOf(15))\n        val nb6 = nb5.and(BigInteger.valueOf(31))\n\
    \        val nb7 = nb6.and(BigInteger.valueOf(63))\n        val nb8 = nb7.and(BigInteger.valueOf(127))\n\
    \        val nb9 = nb8.and(BigInteger.valueOf(255))\n        val nb10 = nb9.and(BigInteger.valueOf(511))\n\
    \        val nb11 = nb10.and(BigInteger.valueOf(1023))\n        val nb12 = nb11.and(BigInteger.valueOf(2047))\n\
    \        val nb13 = nb12.and(BigInteger.valueOf(4095))\n        val nb14 = nb13.and(BigInteger.valueOf(8191))\n\
    \        val nb15 = nb14.and(BigInteger.valueOf(16383))\n        val nb16 = nb15.and(BigInteger.valueOf(32767))\n\
    \        val nb17 = nb16.and(BigInteger.valueOf(65535))\n        val nb18 = nb17.and(BigInteger.valueOf(131071))\n\
    \        val nb19 = nb18.and(BigInteger.valueOf(262143))\n        val nb20 = nb19.and(BigInteger.valueOf(524287))\n\
    \        val nb21 = nb20.and(BigInteger.valueOf(1048575))\n        val nb22 =\
    \ nb21.and(BigInteger.valueOf(2097151))\n        val nb23 = nb22.and(BigInteger.valueOf(4194303))\n\
    \        val nb24 = nb23.and(BigInteger.valueOf(8", "        val n2 = n.toString.replaceAll(\"\
    0\", \"\").toLong\n        if (n2 % 2 == 0)\n            0l\n        else\n  \
    \          n2", "        val s = \"\"\n        while (n > 0) {\n            s\
    \ = (n % 2l).toString() + s\n            n /= 2l\n        }\n        s", "   \
    \     if (n == 0) {\n            0\n        } else {\n            var _$1 = n\n\
    \            while (_$1 > 0) {\n                var _$2 = _$1 % 10\n         \
    \       if (_$2 % 2 == 1) {\n                    _$1 = _$1 / 10\n            \
    \        return _$1\n                } else {\n                    _$1 = _$1 /\
    \ 10\n                }\n            }\n        }", "        if (n == 0) {\n \
    \           0\n        } else {\n            if (n % 2 == 0) {\n             \
    \   0\n            } else {\n                n % 2\n            }\n        }",
  "        val digits = new Array[Long](n.toString().length())\n        for (i <-\
    \ 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n     \
    \       if (digits(i) % 2 == 0) {\n                digits(i) = 0\n           \
    \ }\n        }\n        digits(n.toString().length() - 1)", "        val digits\
    \ = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length())\
    \ {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n       \
    \ val result = 0l\n        for (i <- 0 until digits.length) {\n            result\
    \ = result * digits(i)\n        }\n        result", "        val digits = new\
    \ Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length())\
    \ {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n       \
    \ digits.reduce(_.times(_.toLong)", "        val digits = new Array[Long](n.toString().length())\n\
    \        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n     \
    \       if (digits(i) % 2 == 0) {\n                digits(i) = 0\n           \
    \ }\n        }\n        digits(0)", "        var i = 0l\n        while (i < n)\
    \ {\n            i = i + 1l\n            if (i % 2l == 0l) {\n               \
    \ i = i / 2l\n            } else {\n                i = i * 3l\n            }\n\
    \        }\n        return i", "        val digits = new Array[Long](n.toString().length())\n\
    \        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        digits(0)", "        if (n == 0) {\n            0\n\
    \        } else {\n            n % 2 == 0 ? 0 : n\n        }", "        val digits\
    \ = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length())\
    \ {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n       \
    \ val result = 0l\n        for (i <- 0 until digits.length) {\n            result\
    \ = result * digits(i)\n        }\n        result", "        val digits = new\
    \ Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length())\
    \ {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n       \
    \ val oddDigits = digits.filter(d -> d % 2 != 0)\n        val result = 0l\n  \
    \      for (i <- 0 until oddDigits.length) {\n            result = result * oddDigits(i)\n\
    \        }\n        result", "        val digits = new Array[Long](n.toString().length())\n\
    \        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        digits(n.toString().length() - 1)", "        val digits\
    \ = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length())\
    \ {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n       \
    \ digits(n.toString().length())", "        if (n == 0) {\n            0\n    \
    \    } else {\n            var result = 1l\n            while (n > 0) {\n    \
    \            result *= n % 10\n                n /= 10\n            }\n      \
    \      result\n        }", "        val digits = new Array[Long](n.toString().length())\n\
    \        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n     \
    \       if (digits(i) % 2 == 0) {\n                digits(i) = 0\n           \
    \ }\n        }\n        val result = 0l\n        for (i <- 0 until n.toString().length())\
    \ {\n            result = result * digits(i)\n        }\n        result", "  \
    \      if (n % 2 == 0) {\n            return 0l\n        } else {\n          \
    \  return n % 10\n        }", "        if (n == 0) return 0l\n        if (n %\
    \ 2 == 0) return 0l\n        return n % 2", "        if (n == 0) {\n         \
    \   0\n        } else {\n            var x = n\n            var y = 0\n      \
    \      while (x > 0) {\n                y = y * 10 + x % 10\n                x\
    \ /= 10\n            }\n            y\n        }", "        val n_ = n.toString\n\
    \        val n_len = n_().length\n        val n_digits = n_().substring(n_len\
    \ - 1, n_len)\n        val n_digits_ = n_digits.toString\n        val n_digits_len\
    \ = n_digits_().length\n        val n_digits_digits = n_digits_().substring(n_digits_len\
    \ - 1, n_digits_len)\n        val n_digits_digits_ = n_digits_digits.toString\n\
    \        val n_digits_digits_len = n_digits_digits_().length\n        val n_digits_digits_digits\
    \ = n_digits_digits_().substring(n_digits_digits_len - 1, n_digits_digits_len)\n\
    \        val n_digits_digits_digits_ = n_digits_digits_digits.toString\n     \
    \   val n_digits_digits_digits_len = n_digits_digits_digits_().length\n      \
    \  val n_digits_digits_digits_digits = n_digits_digits_digits_().substring(n_digits_digits_digits_len\
    \ - 1, n_digits_digits_digits_len)\n        val n_digits_digits_digits_digits_\
    \ = n_digits_digits_digits_digits.toString\n        val n_digits_digits_digits_digits_len\
    \ = n_digits_digits_digits_digits_().length\n        val n_digits_digits_digits_digits_digits\
    \ = n_digits_digits_digits_digits_().substring(n_digits_digits_digits_digits_len\
    \ - 1, n_digits_digits_digits_digits_len)\n        val n_digits_digits_digits_digits_digits_\
    \ = n_digits_digits_digits_digits_digits.toString\n        val n_digits_", " \
    \       if (n == 0) return 0l\n        if (n % 2 == 0) return 0l\n        return\
    \ n * (n - 1) / 2", "        val digits = new Array[Long](n.toString().length())\n\
    \        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n     \
    \       if (digits(i) % 2 == 0) {\n                digits(i) = 0\n           \
    \ }\n        }\n        digits(n.toString().length())", "        val nn = n\n\
    \        val nn2 = nn / 2\n        val nn3 = nn2 / 2\n        val nn4 = nn3 /\
    \ 2\n        val nn5 = nn4 / 2\n        val nn6 = nn5 / 2\n        val nn7 = nn6\
    \ / 2\n        val nn8 = nn7 / 2\n        val nn9 = nn8 / 2\n        val nn10\
    \ = nn9 / 2\n        val nn11 = nn10 / 2\n        val nn12 = nn11 / 2\n      \
    \  val nn13 = nn12 / 2\n        val nn14 = nn13 / 2\n        val nn15 = nn14 /\
    \ 2\n        val nn16 = nn15 / 2\n        val nn17 = nn16 / 2\n        val nn18\
    \ = nn17 / 2\n        val nn19 = nn18 / 2\n        val nn20 = nn19 / 2\n     \
    \   val nn21 = nn20 / 2\n        val nn22 = nn21 / 2\n        val nn23 = nn22\
    \ / 2\n        val nn24 = nn23 / 2\n        val nn25 = nn24 / 2\n        val nn26\
    \ = nn25 / 2\n        val nn27 = nn26 / 2\n        val nn28 = nn27 / 2\n     \
    \   val nn29 = nn28 / 2\n        val nn30 = nn29 / 2\n        val nn31 = nn30\
    \ / 2\n        val nn32 = nn31 / 2\n        val nn33 = nn32 / 2\n        val nn34\
    \ = nn33 / 2\n        val nn35 = nn34 / 2\n        val nn36 = nn35 / 2\n     \
    \   val nn37 = nn36 / 2\n        val nn38 = nn37 / 2\n        val nn39 = nn38\
    \ / 2\n        val nn40 = nn39 / 2\n        val nn41 = nn40 / 2\n        val nn42\
    \ = nn41 / 2\n        val nn43 = nn42 / 2\n        val", "        val digits =\
    \ new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length())\
    \ {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n       \
    \ val result = 0l\n        for (i <- 0 until digits.length) {\n            result\
    \ = result * digits(i)\n        }\n        result", "        val nn = n.toString\n\
    \        val nn_ = nn.replaceAll(\"0\", \"\")\n        val nn_ = nn_.replaceAll(\"\
    1\", \"1l\")\n        val nn_ = nn_.replaceAll(\"2\", \"2l\")\n        val nn_\
    \ = nn_.replaceAll(\"3\", \"3l\")\n        val nn_ = nn_.replaceAll(\"4\", \"\
    4l\")\n        val nn_ = nn_.replaceAll(\"5\", \"5l\")\n        val nn_ = nn_.replaceAll(\"\
    6\", \"6l\")\n        val nn_ = nn_.replaceAll(\"7\", \"7l\")\n        val nn_\
    \ = nn_.replaceAll(\"8\", \"8l\")\n        val nn_ = nn_.replaceAll(\"9\", \"\
    9l\")\n        val nn_ = nn_.replaceAll(\"l\", \"\")\n        val nn_ = nn_.replaceAll(\"\
    0l\", \"\")\n        val nn_ = nn_.replaceAll(\"1l\", \"1\")\n        val nn_\
    \ = nn_.replaceAll(\"2l\", \"2\")\n        val nn_ = nn_.replaceAll(\"3l\", \"\
    3\")\n        val nn_ = nn_.replaceAll(\"4l\", \"4\")\n        val nn_ = nn_.replaceAll(\"\
    5l\", \"5\")\n        val nn_ = nn_.replaceAll(\"6l\", \"6\")\n        val nn_\
    \ = nn_.replaceAll(\"7l\", \"7\")\n        val nn_ = nn_.replaceAll(\"8l\", \"\
    8\")\n        val nn_ = nn_.replaceAll(\"9l\", \"9\")\n        val nn_ = nn_.replaceAll(\"\
    l\", \"\")\n        nn_", "        val nn = n.toString\n        val nn_len = nn.length\n\
    \        val nn_digits = nn.substring(nn_len - 1, nn_len)\n        val nn_digits_len\
    \ = nn_digits.length\n        val nn_digits_int = nn_digits.toInt\n        val\
    \ nn_digits_int_len = nn_digits_int.length\n        val nn_digits_int_digits =\
    \ nn_digits_int.substring(nn_digits_int_len - 1, nn_digits_int_len)\n        val\
    \ nn_digits_int_digits_len = nn_digits_int_digits.length\n        val nn_digits_int_digits_int\
    \ = nn_digits_int_digits.toInt\n        val nn_digits_int_digits_int_len = nn_digits_int_digits_int.length\n\
    \        val nn_digits_int_digits_int_digits = nn_digits_int_digits_int.substring(nn_digits_int_digits_int_len\
    \ - 1, nn_digits_int_digits_int_len)\n        val nn_digits_int_digits_int_digits_len\
    \ = nn_digits_int_digits_int_digits.length\n        val nn_digits_int_digits_int_digits_int\
    \ = nn_digits_int_digits_int_digits_int.toInt\n        val nn_digits_int_digits_int_digits_int_len\
    \ = nn_digits_int_digits_int_digits_int.length\n        val nn_digits_int_digits_int_digits_int_digits\
    \ = nn_digits_int_digits_int_digits_int_digits.toInt\n        val nn_digits_int_digits_int_digits_int_digits_len\
    \ = nn_digits_int_digits_", "        val n_ = n\n        val n_ = n_\n       \
    \ val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n\
    \        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_\
    \ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n      \
    \  val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n\
    \        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_\
    \ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n      \
    \  val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n\
    \        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_\
    \ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n      \
    \  val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n\
    \        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_\
    \ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n      \
    \  val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n\
    \        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_\
    \ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n      \
    \  val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n\
    \        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        ", " \
    \       val digits = new Array[Long](n.toString().length())\n        for (i <-\
    \ 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n     \
    \       if (digits(i) % 2 == 0) {\n                digits(i) = 0\n           \
    \ }\n        }\n        val result = 0l\n        for (i <- 0 until n.toString().length())\
    \ {\n            result = result * digits(i)\n        }\n        result", "  \
    \      val digits = new Array[Long](n.toString().length())\n        for (i <-\
    \ 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        digits(n.toString().length())", "        val nn =\
    \ n.toString\n        val s = nn.substring(1, nn.length)\n        val i = 0l\n\
    \        while (i < s.length) {\n            val d = s.substring(i, i + 1)\n \
    \           if (d.toInt % 2 == 1) {\n                return i\n            }\n\
    \            i = i + 1\n        }\n        return 0l", "        val n_ = n\n \
    \       val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_\
    \ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n      \
    \  val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n\
    \        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_\
    \ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n      \
    \  val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n\
    \        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_\
    \ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n      \
    \  val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n\
    \        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_\
    \ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n      \
    \  val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n\
    \        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_\
    \ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n      \
    \  val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n\
    \        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_\
    \ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n      \
    \  val n_ = n_\n        ", "        val nn = n\n        val nb = nn.toByte\n \
    \       val nb2 = nb / 2\n        val nb3 = nb2 / 2\n        val nb4 = nb3 / 2\n\
    \        val nb5 = nb4 / 2\n        val nb6 = nb5 / 2\n        val nb7 = nb6 /\
    \ 2\n        val nb8 = nb7 / 2\n        val nb9 = nb8 / 2\n        val nb10 =\
    \ nb9 / 2\n        val nb11 = nb10 / 2\n        val nb12 = nb11 / 2\n        val\
    \ nb13 = nb12 / 2\n        val nb14 = nb13 / 2\n        val nb15 = nb14 / 2\n\
    \        val nb16 = nb15 / 2\n        val nb17 = nb16 / 2\n        val nb18 =\
    \ nb17 / 2\n        val nb19 = nb18 / 2\n        val nb20 = nb19 / 2\n       \
    \ val nb21 = nb20 / 2\n        val nb22 = nb21 / 2\n        val nb23 = nb22 /\
    \ 2\n        val nb24 = nb23 / 2\n        val nb25 = nb24 / 2\n        val nb26\
    \ = nb25 / 2\n        val nb27 = nb26 / 2\n        val nb28 = nb27 / 2\n     \
    \   val nb29 = nb28 / 2\n        val nb30 = nb29 / 2\n        val nb31 = nb30\
    \ / 2\n        val nb32 = nb31 / 2\n        val nb33 = nb32 / 2\n        val nb34\
    \ = nb33 / 2\n        val nb35 = nb34 / 2\n        val nb36 = nb35 / 2\n     \
    \   val nb37 = nb36 / 2\n        val nb38 = nb37 / 2\n        val nb39 = nb38\
    \ / 2\n        val nb40 = nb39 / 2\n        val nb41 = nb40 / 2\n        val nb42\
    \ = nb41 / 2\n        val n", "        if (n == 0) {\n            0\n        }\
    \ else {\n            n % 2 == 0 ? 0 : n\n        }", "        if (n == 0) return\
    \ 0l\n        if (n < 0) return 0l\n        if (n == 1) return 1l\n        if\
    \ (n % 2 == 0) return 0l\n        return n % 2l\n    }\n\n    // Given a positive\
    \ integer n, return the product of the even digits.\n    // Return 0 if all digits\
    \ are odd.\n    // For example:\n    // >>> evenDigits((1l))\n    // (1l)\n  \
    \  // >>> evenDigits((4l))\n    // (0l)\n    // >>> evenDigits((235l))\n    //\
    \ (0l)\n    def evenDigits(n : Long) : Long = {\n        if (n == 0) return 0l\n\
    \        if (n < 0) return 0l\n        if (n == 1) return 1l\n        if (n %\
    \ 2 == 1) return 0l\n        return n % 2l\n    }\n\n    // Given a positive integer\
    \ n, return the product of the digits in the\n    // number.\n    // For example:\n\
    \    // >>> digitsProduct((1l))\n    // (1l)\n    // >>> digitsProduct((4l))\n\
    \    // (4l)\n    // >>> digitsProduct((235l))\n    // (235l)\n    def digitsProduct(n\
    \ : Long) : Long = {\n        if (n == 0) return 0l\n        if (n < 0) return\
    \ 0l\n        if (n == 1) return 1l\n        return n * digits(n)\n    }\n\n \
    \   // Given a positive integer n, return the product of the digits in the\n \
    \   // number.\n    // For example:\n    // >>> digitsProduct((1l))\n    // (1l)\n\
    \    // >>> digitsProduct((4l))\n    // (4l)\n    // >>> digitsProduct((235l))\n\
    \    // (235l)\n    def evenDigitsProduct(n : Long) : Long = {\n        if (n\
    \ == 0) return 0l\n        if (n < 0) return 0l\n        if (n == 1) return 1l\n\
    \        return n * evenDigits(n)\n    }\n\n    // Given a positive integer n,\
    \ return the product of the digits in the\n", "        val s = \"\"\n        while\
    \ (n > 0) {\n            s = s + (n % 2)\n            n /= 2\n        }\n    \
    \    if (s.length == 0)\n            0l\n        else\n            s.substring(1)",
  "        val n2 = n.toString.replaceAll(\"0\", \"\").toLong\n        val n3 = n2.toString.replaceAll(\"\
    1\", \"\").toLong\n        val n4 = n3.toString.replaceAll(\"2\", \"\").toLong\n\
    \        val n5 = n4.toString.replaceAll(\"3\", \"\").toLong\n        val n6 =\
    \ n5.toString.replaceAll(\"4\", \"\").toLong\n        val n7 = n6.toString.replaceAll(\"\
    5\", \"\").toLong\n        val n8 = n7.toString.replaceAll(\"6\", \"\").toLong\n\
    \        val n9 = n8.toString.replaceAll(\"7\", \"\").toLong\n        val n10\
    \ = n9.toString.replaceAll(\"8\", \"\").toLong\n        val n11 = n10.toString.replaceAll(\"\
    9\", \"\").toLong\n        val n12 = n11.toString.replaceAll(\"0\", \"\").toLong\n\
    \        val n13 = n12.toString.replaceAll(\"1\", \"\").toLong\n        val n14\
    \ = n13.toString.replaceAll(\"2\", \"\").toLong\n        val n15 = n14.toString.replaceAll(\"\
    3\", \"\").toLong\n        val n16 = n15.toString.replaceAll(\"4\", \"\").toLong\n\
    \        val n17 = n16.toString.replaceAll(\"5\", \"\").toLong\n        val n18\
    \ = n17.toString.replaceAll(\"6\", \"\").toLong\n        val n19 = n18.toString.replaceAll(\"\
    7\", \"\").toLong\n        val n20 = n19.toString.replaceAll(\"8\", \"\").toLong\n\
    \        val n21 = n20.toString.replaceAll(\"9\", \"\").toLong\n        val n22\
    \ = n21.toString.replaceAll(\"0\", \"\").toLong\n        val n23 = n22.toString.replaceAll(\"\
    1\", \"\").toLong\n        val n24 = n23.toString.replaceAll(\"2\", \"\").toLong\n\
    \        val n25 = n24.toString.replaceAll(\"3\", \"\").toLong\n        val n26\
    \ = n25.to", "        val digits = new Array[Long](n.toString().length())\n  \
    \      for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        digits(n.toString().length() - 1)\n    }\n\n    //\
    \ Given a positive integer n, return the product of the digits of n.\n    // Return\
    \ 0 if n is 0.\n    // For example:\n    // >>> digits2((1l))\n    // (1l)\n \
    \   // >>> digits2((4l))\n    // (4l)\n    // >>> digits2((235l))\n    // (235l)\n\
    \    def digits2(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n\
    \        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        digits(n.toString().length() - 1)", "        val digits\
    \ = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length())\
    \ {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n       \
    \ for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 ==\
    \ 0) {\n                digits(i) = 0\n            }\n        }\n        val result\
    \ = 0l\n        for (i <- 0 until n.toString().length()) {\n            result\
    \ = result * digits(i)\n        }\n        result", "        val n2 = n.toString.replaceAll(\"\
    [^0-9]\", \"\")\n        val n3 = n2.toInt\n        if (n3 % 2 == 0) {\n     \
    \       return 0l\n        } else {\n            return n3\n        }", "    \
    \    if (n == 0) return 0l\n        if (n % 2 == 0) return 0l\n        return\
    \ n % 10", "        val digits = new Array[Long](n.toString().length())\n    \
    \    for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i)\
    \ - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n     \
    \       if (digits(i) % 2 == 0) {\n                digits(i) = 0\n           \
    \ }\n        }\n        val result = 0l\n        for (i <- 0 until n.toString().length())\
    \ {\n            result = result * digits(i)\n        }\n        result", "  \
    \      val digits = mutable.List[Long]()\n        while (n > 0) {\n          \
    \  digits.append(n % 10)\n            n /= 10\n        }\n        for (i <- 0\
    \ until digits.size - 1) {\n            if (digits.get(i) % 2 == 1) {\n      \
    \          digits.set(i, digits.get(i) * 2)\n            }\n        }\n      \
    \  digits.reverse()\n        return digits.foldLeft(0l)((a, b) => a * b)"]
stop_tokens:
- "\n    }\n"
