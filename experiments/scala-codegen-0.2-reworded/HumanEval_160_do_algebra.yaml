name: HumanEval_160_do_algebra
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given two lists operator, and operand. The first list has basic algebra\
  \ operations, and \n    // the second list is a list of integers. Use the two given\
  \ lists to build the algebric \n    // expression and return the evaluation of this\
  \ expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n  \
  \  // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division (\
  \ // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*',\
  \ '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result\
  \ = 9\n    // Note:\n    // The length of operator list is equal to the length of\
  \ operand list minus one.\n    // Operand is a list of of non-negative integers.\n\
  \    // Operator list has at least one operator, and operand list has at least two\
  \ operands.\n    def doAlgebra(op : List[String], operand : List[Long]) : Long =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
  **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
  \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
  //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
  \n}\n"
completions: ["        var result = 0L\n        for (i <- 0 until operand.length -\
    \ 1) {\n            var op1 = op[i]\n            var op2 = op[i + 1]\n       \
    \     var operand1 = operand[i]\n            var operand2 = operand[i + 1]\n \
    \           if (op1 == \"+\") {\n                result = result + operand1 +\
    \ operand2\n            } else if (op1 == \"-\") {\n                result = result\
    \ - operand1 - operand2\n            } else if (op1 == \"*\") {\n            \
    \    result = result * operand1 * operand2\n            } else if (op1 == \"//\"\
    ) {\n                result = result / operand1 / operand2\n            } else\
    \ if (op1 == \"**\") {\n                result = result ** operand1 ** operand2\n\
    \            }\n        }\n        return result", "        val opList = op.toList\n\
    \        val operandList = operand.toList\n        val result = 0L\n        for\
    \ (i <- 0 until operandList.size - 1) {\n            val op1 = opList.apply(i)\n\
    \            val op2 = opList.apply(i + 1)\n            val operand1 = operandList.apply(i)\n\
    \            val operand2 = operandList.apply(i + 1)\n            if (op1 == \"\
    +\") {\n                result = result + operand1 + operand2\n            } else\
    \ if (op1 == \"-\") {\n                result = result - operand1 - operand2\n\
    \            } else if (op1 == \"*\") {\n                result = result * operand1\
    \ * operand2\n            } else if (op1 == \"//\") {\n                result\
    \ = result / operand1 / operand2\n            } else if (op1 == \"**\") {\n  \
    \              result = result ** operand1 ** operand2\n            }\n      \
    \  }\n        return result", "        var result = 0L\n        for (i <- 0 until\
    \ operand.length - 1) {\n            var operand1 = operand[i]\n            var\
    \ operand2 = operand[i + 1]\n            var operator = op[i]\n            if\
    \ (operator == \"+\") {\n                result = result + operand1\n        \
    \    } else if (operator == \"-\") {\n                result = result - operand1\n\
    \            } else if (operator == \"*\") {\n                result = result\
    \ * operand1\n            } else if (operator == \"//\") {\n                result\
    \ = result / operand1\n            } else if (operator == \"**\") {\n        \
    \        result = result ** operand1\n            }\n        }\n        return\
    \ result", "        var result = 0L\n        for (i <- 0 until operand.length\
    \ - 1) {\n            var operand1 = operand[i]\n            var operand2 = operand[i\
    \ + 1]\n            var operator = op[i]\n            if (operator == \"+\") {\n\
    \                result = result + operand1 + operand2\n            } else if\
    \ (operator == \"-\") {\n                result = result - operand1 - operand2\n\
    \            } else if (operator == \"*\") {\n                result = result\
    \ * operand1 * operand2\n            } else if (operator == \"//\") {\n      \
    \          result = result / operand1 / operand2\n            } else if (operator\
    \ == \"**\") {\n                result = result ** operand1 ** operand2\n    \
    \        }\n        }\n        return result", "        val opLen = op.length\n\
    \        val operandLen = operand.length\n        val result = 0L\n        for\
    \ (i <- 0 until operandLen - 1) {\n            val operandVal = operand[i]\n \
    \           for (j <- 0 until opLen - 1) {\n                val opVal = op[j]\n\
    \                if (opVal == \"+\") {\n                    result = result +\
    \ operandVal\n                } else if (opVal == \"-\") {\n                 \
    \   result = result - operandVal\n                } else if (opVal == \"*\") {\n\
    \                    result = result * operandVal\n                } else if (opVal\
    \ == \"/\") {\n                    result = result / operandVal\n            \
    \    } else if (opVal == \"**\") {\n                    result = result ** operandVal\n\
    \                }\n            }\n        }\n        return result", "      \
    \  val opLen = op.length\n        val operandLen = operand.length\n        val\
    \ result = 0L\n        for (i <- 0 until operandLen - 1) {\n            val opIndex\
    \ = i\n            val operandIndex = i + 1\n            val opValue = op[opIndex]\n\
    \            val operandValue = operand[operandIndex]\n            if (opValue\
    \ == \"*\") {\n                result = result * operandValue\n            } else\
    \ if (opValue == \"/\") {\n                result = result / operandValue\n  \
    \          } else if (opValue == \"**\") {\n                result = result **\
    \ operandValue\n            } else if (opValue == \"+\") {\n                result\
    \ = result + operandValue\n            } else if (opValue == \"-\") {\n      \
    \          result = result - operandValue\n            }\n        }\n        return\
    \ result", "        val opList = op.toList\n        val operandList = operand.toList\n\
    \        val result = 0L\n        for (i <- 0 until operandList.size - 1) {\n\
    \            for (j <- 0 until opList.size - 1) {\n                if (opList[j]\
    \ == \"+\") {\n                    result = result + operandList[i] + operandList[i\
    \ + 1]\n                    i = i + 2\n                } else if (opList[j] ==\
    \ \"-\") {\n                    result = result - operandList[i] - operandList[i\
    \ + 1]\n                    i = i + 2\n                } else if (opList[j] ==\
    \ \"*\") {\n                    result = result * operandList[i] * operandList[i\
    \ + 1]\n                    i = i + 2\n                } else if (opList[j] ==\
    \ \"//\") {\n                    result = result / operandList[i] / operandList[i\
    \ + 1]\n                    i = i + 2\n                } else if (opList[j] ==\
    \ \"**\") {\n                    result = result ** operandList[i] ** operandList[i\
    \ + 1]\n                    i = i + 2\n                }\n            }\n    \
    \    }\n        return result", "        def add(x : Long, y : Long) : Long =\
    \ x + y\n        def sub(x : Long, y : Long) : Long = x - y\n        def mul(x\
    \ : Long, y : Long) : Long = x * y\n        def div(x : Long, y : Long) : Long\
    \ = x / y\n        def exp(x : Long, y : Long) : Long = x ** y\n        def f(x\
    \ : Long) : Long = x\n        def f2(x : Long, y : Long) : Long = x * y\n    \
    \    def f3(x : Long, y : Long, z : Long) : Long = x * y * z\n        def f4(x\
    \ : Long, y : Long, z : Long, w : Long) : Long = x * y * z * w\n        def f5(x\
    \ : Long, y : Long, z : Long, w : Long, v : Long) : Long = x * y * z * w * v\n\
    \        def f6(x : Long, y : Long, z : Long, w : Long, v : Long, u : Long) :\
    \ Long = x * y * z * w * v * u\n        def f7(x : Long, y : Long, z : Long, w\
    \ : Long, v : Long, u : Long, t : Long) : Long = x * y * z * w * v * u * t\n \
    \       def f8(x : Long, y : Long, z : Long, w : Long, v : Long, u : Long, t :\
    \ Long, s : Long) : Long = x * y * z * w * v * u * t * s\n        def f9(x : Long,\
    \ y : Long, z : Long, w : Long, v : Long, u : Long, t : Long, s : Long, r : Long)\
    \ : Long = x * y * z * w * v * u * t * s * r\n        def f10(x : Long, y : Long,\
    \ z : Long, w : Long, v : Long, u : Long, t : Long, s : Long, r : Long, q : Long)\
    \ : Long = x * y * z * w * v * u * t * s * r * q\n        def f11(x : Long", " \
    \       val opLen = op.length\n        val operandLen = operand.length\n     \
    \   val result = 0L\n        for (i <- 0 until operandLen - 1) {\n           \
    \ val operandVal = operand[i]\n            for (j <- 0 until opLen - 1) {\n  \
    \              val opVal = op[j]\n                if (opVal == \"+\") {\n    \
    \                result += operandVal\n                } else if (opVal == \"\
    -\") {\n                    result -= operandVal\n                } else if (opVal\
    \ == \"*\") {\n                    result *= operandVal\n                } else\
    \ if (opVal == \"/\") {\n                    result /= operandVal\n          \
    \      } else if (opVal == \"**\") {\n                    result = _.pow(operandVal,\
    \ result)\n                }\n            }\n        }\n        return result",
  "        var result = 0L\n        for (i <- 0 until operand.length - 1) {\n    \
    \        var operand1 = operand[i]\n            var operand2 = operand[i + 1]\n\
    \            var operator = op[i]\n            if (operator == \"+\") {\n    \
    \            result = result + operand1 + operand2\n            } else if (operator\
    \ == \"-\") {\n                result = result - operand1 - operand2\n       \
    \     } else if (operator == \"*\") {\n                result = result * operand1\
    \ * operand2\n            } else if (operator == \"//\") {\n                result\
    \ = result / operand1 / operand2\n            } else if (operator == \"**\") {\n\
    \                result = result ** operand1 ** operand2\n            }\n    \
    \    }\n        return result", "        val opLen = op.length\n        val operandLen\
    \ = operand.length\n        val result = 0L\n        for (i <- 0 until operandLen\
    \ - 1) {\n            val operand1 = operand[i]\n            val operand2 = operand[i\
    \ + 1]\n            val opIndex = i\n            if (opLen > 1) {\n          \
    \      val opIndex2 = i + 1\n                val op2 = op[opIndex2]\n        \
    \        if (opIndex2 < opLen - 1) {\n                    val op3 = op[opIndex2\
    \ + 1]\n                    result = result + op2 * operand1 * operand2 * op3\n\
    \                } else {\n                    result = result + op2 * operand1\
    \ * operand2\n                }\n            } else {\n                result\
    \ = result + operand1 * operand2\n            }\n        }\n        return result",
  "        val opLen = op.length\n        val operandLen = operand.length\n      \
    \  val result = 0L\n        for (i <- 0 until operandLen - 1) {\n            val\
    \ operandVal = operand[i]\n            for (j <- 0 until opLen - 1) {\n      \
    \          val opVal = op[j]\n                if (opVal == \"+\") {\n        \
    \            result += operandVal\n                } else if (opVal == \"-\")\
    \ {\n                    result -= operandVal\n                } else if (opVal\
    \ == \"*\") {\n                    result *= operandVal\n                } else\
    \ if (opVal == \"/\") {\n                    result /= operandVal\n          \
    \      } else if (opVal == \"**\") {\n                    result = _.pow(operandVal,\
    \ result)\n                }\n            }\n        }\n        return result",
  "        val opList = op.toList\n        val operandList = operand.toList\n    \
    \    val result = 0L\n        for (i <- 0 until operandList.size - 1) {\n    \
    \        val op = opList.get(i)\n            val operand1 = operandList.get(i)\n\
    \            val operand2 = operandList.get(i + 1)\n            if (op == \"+\"\
    ) {\n                result = result + operand1 + operand2\n            } else\
    \ if (op == \"-\") {\n                result = result - operand1 - operand2\n\
    \            } else if (op == \"*\") {\n                result = result * operand1\
    \ * operand2\n            } else if (op == \"//\") {\n                result =\
    \ result / operand1 / operand2\n            } else if (op == \"**\") {\n     \
    \           result = result ** operand1 ** operand2\n            }\n        }\n\
    \        return result", "        def getOperator(op : String) : String = {\n\
    \            if (op == \"+\") {\n                return \"+\"\n            } else\
    \ if (op == \"-\") {\n                return \"-\"\n            } else if (op\
    \ == \"*\") {\n                return \"*\"\n            } else if (op == \"//\"\
    ) {\n                return \"//\"\n            } else if (op == \"**\") {\n \
    \               return \"**\"\n            } else {\n                throw new\
    \ RuntimeException(\"Unknown operator \" + op)\n            }\n        }\n   \
    \     def getOperand(operand : Long) : Long = {\n            return operand\n\
    \        }\n        def getOperator(op : String) : String = {\n            if\
    \ (op == \"+\") {\n                return \"+\"\n            } else if (op ==\
    \ \"-\") {\n                return \"-\"\n            } else if (op == \"*\")\
    \ {\n                return \"*\"\n            } else if (op == \"//\") {\n  \
    \              return \"//\"\n            } else if (op == \"**\") {\n       \
    \         return \"**\"\n            } else {\n                throw new RuntimeException(\"\
    Unknown operator \" + op)\n            }\n        }\n        def getOperand(operand\
    \ : Long) : Long = {\n            return operand\n        }\n        def getOperator(op\
    \ : String) : String = {\n            if (op == \"+\") {\n                return\
    \ \"+\"\n            } else if (op == \"-\") {\n                return \"-\"\n\
    \            } else if (op == \"*\") {\n                return \"*\"\n       \
    \     } else if (op == \"//\") {\n                return \"//\"\n            }\
    \ else if (op == \"**\") {\n                return \"**\"\n            } else\
    \ {\n                throw new RuntimeException(\"Unknown operator \" + op)\n\
    \            }\n        }\n        def getOperand(operand : Long) : Long = {\n\
    \            return operand\n        }\n        def getOperator(op : String) :\
    \ String = {\n            if (op == \"+\") {\n                return \"+\"\n \
    \           } else if (op == \"-\") {\n                return \"-\"\n        \
    \    } else if (op == \"*\") {\n                return \"*\"\n            } else\
    \ if (op == \"", "        var result = 0L\n        for (i <- 0 until operand.length\
    \ - 1) {\n            var operand1 = operand[i]\n            var operand2 = operand[i\
    \ + 1]\n            var operator = op[i]\n            if (operator == \"+\") {\n\
    \                result = result + operand1 + operand2\n            } else if\
    \ (operator == \"-\") {\n                result = result - operand1 - operand2\n\
    \            } else if (operator == \"*\") {\n                result = result\
    \ * operand1 * operand2\n            } else if (operator == \"//\") {\n      \
    \          result = result / operand1 / operand2\n            } else if (operator\
    \ == \"**\") {\n                result = result ** operand1 ** operand2\n    \
    \        }\n        }\n        return result", "        val opLen = op.length\n\
    \        val opArr = new Array[Long](opLen)\n        for (i <- 0 until opLen)\
    \ {\n            opArr[i] = op[i]\n        }\n        val operandLen = operand.length\n\
    \        val operandArr = new Array[Long](operandLen)\n        for (i <- 0 until\
    \ operandLen) {\n            operandArr[i] = operand[i]\n        }\n        val\
    \ result = 0\n        for (i <- 0 until operandLen - 1) {\n            val opIndex\
    \ = i\n            val operandIndex = i + 1\n            val op = opArr[opIndex]\n\
    \            val operand = operandArr[operandIndex]\n            if (op == \"\
    *\") {\n                result = result * operand\n            } else if (op ==\
    \ \"/\") {\n                result = result / operand\n            } else if (op\
    \ == \"**\") {\n                result = result ** operand\n            } else\
    \ if (op == \"+\") {\n                result = result + operand\n            }\
    \ else if (op == \"-\") {\n                result = result - operand\n       \
    \     }\n        }\n        return result", "        var result = 0L\n       \
    \ for (i <- 0 until operand.length - 1) {\n            var operand1 = operand[i]\n\
    \            var operand2 = operand[i + 1]\n            var operator = op[i]\n\
    \            if (operator == \"+\") {\n                result += operand1 + operand2\n\
    \            } else if (operator == \"-\") {\n                result -= operand1\
    \ - operand2\n            } else if (operator == \"*\") {\n                result\
    \ *= operand1 * operand2\n            } else if (operator == \"//\") {\n     \
    \           result /= operand1 // operand2\n            } else if (operator ==\
    \ \"**\") {\n                result **= operand1 ** operand2\n            }\n\
    \        }\n        return result", "        val opLen = op.length\n        val\
    \ opArr = new Array[Long](opLen)\n        for (i <- 0 until opLen) {\n       \
    \     opArr[i] = op[i]\n        }\n        val opArrLen = opArr.length\n     \
    \   val opArrLenMinusOne = opArrLen - 1\n        val operandArr = new Array[Long](operand.length)\n\
    \        for (i <- 0 until operand.length) {\n            operandArr[i] = operand[i]\n\
    \        }\n        val operandArrLen = operandArr.length\n        val operandArrLenMinusTwo\
    \ = operandArrLen - 2\n        val result = 0\n        for (i <- 0 until operandArrLen)\
    \ {\n            if (i == 0) {\n                result = operandArr[i]\n     \
    \       } else {\n                result = opArr[i - 1]\n                if (i\
    \ == opArrLenMinusOne) {\n                    result = result * operandArr[i]\n\
    \                } else {\n                    result = result + operandArr[i]\n\
    \                }\n            }\n        }\n        result = result + opArr[opArrLenMinusOne]\n\
    \        if (operandArrLenMinusTwo >= 0) {\n            result = result - operandArr[operandArrLenMinusTwo]\n\
    \        }\n        return result", "        val opLen = op.length\n        val\
    \ operandLen = operand.length\n        val result = 0L\n        for (i <- 0 until\
    \ operandLen - 1) {\n            val operand1 = operand[i]\n            val operand2\
    \ = operand[i + 1]\n            if (opLen == 1) {\n                result = result\
    \ + operand1\n            } else if (opLen == 2) {\n                result = result\
    \ + operand1 * operand2\n            } else if (opLen == 3) {\n              \
    \  result = result + operand1 * operand2 * operand[i + 2]\n            } else\
    \ {\n                result = result + operand1 * operand2 * operand[i + 2] *\
    \ operand[i + 3]\n            }\n        }\n        return result", "        val\
    \ opList = op.toList\n        val operandList = operand.toList\n        val result\
    \ = 0L\n        for (i <- 0 until operandList.size - 1) {\n            val op1\
    \ = opList.apply(i)\n            val op2 = opList.apply(i + 1)\n            val\
    \ operand1 = operandList.apply(i)\n            val operand2 = operandList.apply(i\
    \ + 1)\n            if (op1 == \"+\") {\n                result = result + operand1\
    \ + operand2\n            } else if (op1 == \"-\") {\n                result =\
    \ result - operand1 - operand2\n            } else if (op1 == \"*\") {\n     \
    \           result = result * operand1 * operand2\n            } else if (op1\
    \ == \"//\") {\n                result = result / operand1 / operand2\n      \
    \      } else if (op1 == \"**\") {\n                result = result ** operand1\
    \ ** operand2\n            }\n        }\n        return result", "        val\
    \ opLen = op.length\n        val operandLen = operand.length\n        val result\
    \ = 0L\n        for (i <- 0 until operandLen - 1) {\n            val operandVal\
    \ = operand[i]\n            for (j <- 0 until opLen - 1) {\n                val\
    \ opVal = op[j]\n                if (opVal == \"+\") {\n                    result\
    \ += operandVal\n                } else if (opVal == \"-\") {\n              \
    \      result -= operandVal\n                } else if (opVal == \"*\") {\n  \
    \                  result *= operandVal\n                } else if (opVal == \"\
    //\") {\n                    result /= operandVal\n                } else if (opVal\
    \ == \"**\") {\n                    result = result ** operandVal\n          \
    \      }\n            }\n        }\n        return result", "        val opLen\
    \ = op.length\n        val operandLen = operand.length\n        val result = 0L\n\
    \        for (i <- 0 until operandLen - 1) {\n            val operandVal = operand[i]\n\
    \            for (j <- 0 until opLen - 1) {\n                val opVal = op[j]\n\
    \                if (opVal == \"+\") {\n                    result += operandVal\n\
    \                } else if (opVal == \"-\") {\n                    result -= operandVal\n\
    \                } else if (opVal == \"*\") {\n                    result *= operandVal\n\
    \                } else if (opVal == \"/\") {\n                    result /= operandVal\n\
    \                } else if (opVal == \"**\") {\n                    result **=\
    \ operandVal\n                }\n            }\n        }\n        return result",
  "        val opLen = op.length\n        val operandLen = operand.length\n      \
    \  val result = 0L\n        for (i <- 0 until operandLen - 1) {\n            for\
    \ (j <- 0 until opLen - 1) {\n                if (op[j] == \"+\") {\n        \
    \            result = result + operand[i]\n                } else if (op[j] ==\
    \ \"-\") {\n                    result = result - operand[i]\n               \
    \ } else if (op[j] == \"*\") {\n                    result = result * operand[i]\n\
    \                } else if (op[j] == \"//\") {\n                    result = result\
    \ / operand[i]\n                } else if (op[j] == \"**\") {\n              \
    \      result = result ** operand[i]\n                }\n            }\n     \
    \   }\n        return result", "        val opLen = op.length\n        val opList\
    \ = op.toList\n        val operandLen = operand.length\n        val operandList\
    \ = operand.toList\n        val result = 0L\n        for (i <- 0 until operandLen\
    \ - 1) {\n            val operand1 = operandList.apply(i)\n            val operand2\
    \ = operandList.apply(i + 1)\n            val operator = opList.apply(i)\n   \
    \         if (operator == \"+\") {\n                result += operand1\n     \
    \       } else if (operator == \"-\") {\n                result -= operand1\n\
    \            } else if (operator == \"*\") {\n                result *= operand1\n\
    \            } else if (operator == \"//\") {\n                result /= operand1\n\
    \            } else if (operator == \"**\") {\n                result = _.pow(operand1,\
    \ operand2)\n            }\n        }\n        return result", "        var result\
    \ = 0L\n        for (i <- 0 until operand.length - 1) {\n            var operand1\
    \ = operand[i]\n            var operand2 = operand[i + 1]\n            var operator\
    \ = op[i]\n            if (operator == \"+\") {\n                result += operand1\
    \ + operand2\n            } else if (operator == \"-\") {\n                result\
    \ -= operand1 - operand2\n            } else if (operator == \"*\") {\n      \
    \          result *= operand1 * operand2\n            } else if (operator == \"\
    //\") {\n                result /= operand1 / operand2\n            } else if\
    \ (operator == \"**\") {\n                result **= operand1 ** operand2\n  \
    \          }\n        }\n        return result", "        def add(x : Long, y\
    \ : Long) : Long = x + y\n        def sub(x : Long, y : Long) : Long = x - y\n\
    \        def mul(x : Long, y : Long) : Long = x * y\n        def div(x : Long,\
    \ y : Long) : Long = x / y\n        def exp(x : Long, y : Long) : Long = x **\
    \ y\n        def floorDiv(x : Long, y : Long) : Long = x // y\n        def mod(x\
    \ : Long, y : Long) : Long = x % y\n        def pow(x : Long, y : Long) : Long\
    \ = x ** y\n        def addOperator(x : Long, y : Long) : Long = x + y\n     \
    \   def subOperator(x : Long, y : Long) : Long = x - y\n        def mulOperator(x\
    \ : Long, y : Long) : Long = x * y\n        def divOperator(x : Long, y : Long)\
    \ : Long = x / y\n        def expOperator(x : Long, y : Long) : Long = x ** y\n\
    \        def floorDivOperator(x : Long, y : Long) : Long = x // y\n        def\
    \ modOperator(x : Long, y : Long) : Long = x % y\n        def powOperator(x :\
    \ Long, y : Long) : Long = x ** y\n        def addOperatorList(x : List[Long],\
    \ y : List[Long]) : List[Long] = x + y\n        def subOperatorList(x : List[Long],\
    \ y : List[Long]) : List[Long] = x - y\n        def mulOperatorList(x : List[Long],\
    \ y : List[Long]) : List[Long] = x * y\n        def divOperatorList(x : List[Long],\
    \ y : List[Long]) : List[Long] = x / y\n        def expOperatorList(x : List[Long],\
    \ y : List[Long]) : List[Long] = x ** y\n        def floorDivOperatorList(x :\
    \ List[Long], y : List[Long]) : List[Long] = x // y\n        def modOperatorList(x\
    \ : List[Long], y :", "        val opList = op.toList\n        val operandList\
    \ = operand.toList\n        val result = 0L\n        for (i <- 0 until operandList.size\
    \ - 1) {\n            val operand1 = operandList.get(i)\n            val operand2\
    \ = operandList.get(i + 1)\n            val operator = opList.get(i)\n       \
    \     switch (operator) {\n                case \"+\":\n                    result\
    \ = result + operand1\n                    break\n                case \"-\":\n\
    \                    result = result - operand1\n                    break\n \
    \               case \"*\":\n                    result = result * operand1\n\
    \                    break\n                case \"//\":\n                   \
    \ result = result // operand1\n                    break\n                case\
    \ \"**\":\n                    result = result ** operand1\n                 \
    \   break\n                default:\n                    throw new RuntimeException(\"\
    Invalid operator\")\n            }\n        }\n        return result", "     \
    \   var result = 0L\n        for (i <- 0 until operand.length - 1) {\n       \
    \     var operand1 = operand[i]\n            var operand2 = operand[i + 1]\n \
    \           var operator = op[i]\n            if (operator == \"+\") {\n     \
    \           result = result + operand1 + operand2\n            } else if (operator\
    \ == \"-\") {\n                result = result - operand1 - operand2\n       \
    \     } else if (operator == \"*\") {\n                result = result * operand1\
    \ * operand2\n            } else if (operator == \"//\") {\n                result\
    \ = result / operand1 / operand2\n            } else if (operator == \"**\") {\n\
    \                result = result ** operand1 ** operand2\n            }\n    \
    \    }\n        return result", "        var result = 0L\n        for (i <- 0\
    \ until operand.length - 1) {\n            var operand1 = operand[i]\n       \
    \     var operand2 = operand[i + 1]\n            var operator = op[i]\n      \
    \      var operation = operator\n            if (operator == \"+\") {\n      \
    \          result = result + operand1 + operand2\n            } else if (operator\
    \ == \"-\") {\n                result = result - operand1 - operand2\n       \
    \     } else if (operator == \"*\") {\n                result = result * operand1\
    \ * operand2\n            } else if (operator == \"//\") {\n                result\
    \ = result / operand1 / operand2\n            } else if (operator == \"**\") {\n\
    \                result = result ** operand1 ** operand2\n            }\n    \
    \    }\n        return result", "        var result = 0L\n        for (i <- 0\
    \ until operand.length - 1) {\n            var op_i = op[i]\n            var operand_i\
    \ = operand[i]\n            if (op_i == \"+\") {\n                result += operand_i\n\
    \            } else if (op_i == \"-\") {\n                result -= operand_i\n\
    \            } else if (op_i == \"*\") {\n                result *= operand_i\n\
    \            } else if (op_i == \"//\") {\n                result /= operand_i\n\
    \            } else if (op_i == \"**\") {\n                result **= operand_i\n\
    \            }\n        }\n        return result", "        var result = 0L\n\
    \        for (i <- 0 until operand.length - 1) {\n            var operand1 = operand[i]\n\
    \            var operand2 = operand[i + 1]\n            var operator = op[i]\n\
    \            if (operator == \"+\") {\n                result += operand1 + operand2\n\
    \            } else if (operator == \"-\") {\n                result -= operand1\
    \ - operand2\n            } else if (operator == \"*\") {\n                result\
    \ *= operand1 * operand2\n            } else if (operator == \"//\") {\n     \
    \           result /= operand1 // operand2\n            } else if (operator ==\
    \ \"**\") {\n                result **= operand1 ** operand2\n            }\n\
    \        }\n        return result", "        var result = 0L\n        for (i <-\
    \ 0 until operand.length - 1) {\n            var op1 = op[i]\n            var\
    \ op2 = op[i + 1]\n            var operand1 = operand[i]\n            var operand2\
    \ = operand[i + 1]\n            if (op1 == \"+\") {\n                result =\
    \ result + operand1 + operand2\n            } else if (op1 == \"-\") {\n     \
    \           result = result - operand1 - operand2\n            } else if (op1\
    \ == \"*\") {\n                result = result * operand1 * operand2\n       \
    \     } else if (op1 == \"//\") {\n                result = result / operand1\
    \ / operand2\n            } else if (op1 == \"**\") {\n                result\
    \ = result ** operand1 ** operand2\n            }\n        }\n        return result",
  "        var result = 0L\n        for (i <- 0 until operand.length - 1) {\n    \
    \        var operand1 = operand[i]\n            var operand2 = operand[i + 1]\n\
    \            var operator = op[i]\n            if (operator == \"+\") {\n    \
    \            result += operand1 + operand2\n            } else if (operator ==\
    \ \"-\") {\n                result -= operand1 - operand2\n            } else\
    \ if (operator == \"*\") {\n                result *= operand1 * operand2\n  \
    \          } else if (operator == \"//\") {\n                result /= operand1\
    \ // operand2\n            } else if (operator == \"**\") {\n                result\
    \ **= operand1 ** operand2\n            }\n        }\n        return result",
  "        var result = 0L\n        for (i <- 0 until operand.length - 1) {\n    \
    \        var operand1 = operand[i]\n            var operand2 = operand[i + 1]\n\
    \            var operator = op[i]\n            if (operator == \"+\") {\n    \
    \            result = result + operand1 + operand2\n            } else if (operator\
    \ == \"-\") {\n                result = result - operand1 - operand2\n       \
    \     } else if (operator == \"*\") {\n                result = result * operand1\
    \ * operand2\n            } else if (operator == \"//\") {\n                result\
    \ = result / operand1 / operand2\n            } else if (operator == \"**\") {\n\
    \                result = result ** operand1 ** operand2\n            }\n    \
    \    }\n        return result", "        val opLen = op.length\n        val operandLen\
    \ = operand.length\n        val result = 0L\n        for (i <- 0 until operandLen\
    \ - 1) {\n            val operandVal = operand[i]\n            for (j <- 0 until\
    \ opLen - 1) {\n                val operator = op[j]\n                if (operator\
    \ == \"+\") {\n                    result = result + operandVal\n            \
    \    } else if (operator == \"-\") {\n                    result = result - operandVal\n\
    \                } else if (operator == \"*\") {\n                    result =\
    \ result * operandVal\n                } else if (operator == \"//\") {\n    \
    \                result = result / operandVal\n                } else if (operator\
    \ == \"**\") {\n                    result = result ** operandVal\n          \
    \      }\n            }\n        }\n        return result", "        val opLen\
    \ = op.length\n        val opList = op.toList\n        val operandLen = operand.length\n\
    \        val operandList = operand.toList\n        val result = 0L\n        for\
    \ (i <- 0 until operandLen - 1) {\n            val operand1 = operandList.get(i)\n\
    \            val operand2 = operandList.get(i + 1)\n            if (opLen == 2)\
    \ {\n                result = result + operand1 * operand2\n            } else\
    \ {\n                val operator = opList.get(i)\n                val operand3\
    \ = operandList.get(i + 2)\n                if (operator == \"+\") {\n       \
    \             result = result + operand1 + operand2\n                } else if\
    \ (operator == \"-\") {\n                    result = result - operand1 - operand2\n\
    \                } else if (operator == \"*\") {\n                    result =\
    \ result * operand1 * operand2\n                } else if (operator == \"//\"\
    ) {\n                    result = result / operand1 / operand2\n             \
    \   } else if (operator == \"**\") {\n                    result = result ** operand1\
    \ ** operand2\n                }\n            }\n        }\n        return result",
  "        val opLen = op.length\n        val operandLen = operand.length\n      \
    \  val result = 0L\n        for (i <- 0 until operandLen - 1) {\n            val\
    \ operandVal = operand[i]\n            for (j <- 0 until opLen - 1) {\n      \
    \          val opVal = op[j]\n                if (opVal == \"+\") {\n        \
    \            result += operandVal\n                } else if (opVal == \"-\")\
    \ {\n                    result -= operandVal\n                } else if (opVal\
    \ == \"*\") {\n                    result *= operandVal\n                } else\
    \ if (opVal == \"/\") {\n                    result /= operandVal\n          \
    \      } else if (opVal == \"**\") {\n                    result = result ** operandVal\n\
    \                }\n            }\n        }\n        return result", "      \
    \  var result = 0L\n        for (i <- 0 until operand.length - 1) {\n        \
    \    var operand1 = operand[i]\n            var operand2 = operand[i + 1]\n  \
    \          var operator = op[i]\n            if (operator == \"+\") {\n      \
    \          result = result + operand1 + operand2\n            } else if (operator\
    \ == \"-\") {\n                result = result - operand1 - operand2\n       \
    \     } else if (operator == \"*\") {\n                result = result * operand1\
    \ * operand2\n            } else if (operator == \"//\") {\n                result\
    \ = result / operand1 / operand2\n            } else if (operator == \"**\") {\n\
    \                result = result ** operand1 ** operand2\n            }\n    \
    \    }\n        return result", "        val opLen = op.length\n        val operandLen\
    \ = operand.length\n        if (opLen == 0) {\n            throw new RuntimeException(\"\
    Operator list is empty.\")\n        }\n        if (operandLen == 0) {\n      \
    \      throw new RuntimeException(\"Operand list is empty.\")\n        }\n   \
    \     if (opLen == 1) {\n            throw new RuntimeException(\"Operator list\
    \ has only one operator.\")\n        }\n        if (operandLen == 1) {\n     \
    \       throw new RuntimeException(\"Operand list has only one operand.\")\n \
    \       }\n        if (opLen != operandLen - 1) {\n            throw new RuntimeException(\"\
    Operator list and operand list are not matched.\")\n        }\n        val result\
    \ = 0L\n        for (i <- 0 until operandLen) {\n            val op = op[i]\n\
    \            val operand = operand[i]\n            if (op == \"+\") {\n      \
    \          result = result + operand\n            } else if (op == \"-\") {\n\
    \                result = result - operand\n            } else if (op == \"*\"\
    ) {\n                result = result * operand\n            } else if (op == \"\
    //\") {\n                result = result / operand\n            } else if (op\
    \ == \"**\") {\n                result = result ** operand\n            } else\
    \ {\n                throw new RuntimeException(\"Operator list has unknown operator.\"\
    )\n            }\n        }\n        return result", "        val opLen = op.length\n\
    \        val operandLen = operand.length\n        val result = 0L\n        for\
    \ (i <- 0 until operandLen - 1) {\n            val operand1 = operand[i]\n   \
    \         for (j <- i + 1 until operandLen) {\n                val operand2 =\
    \ operand[j]\n                if (op[i] == \"+\") {\n                    result\
    \ += operand1 + operand2\n                } else if (op[i] == \"-\") {\n     \
    \               result -= operand1 - operand2\n                } else if (op[i]\
    \ == \"*\") {\n                    result *= operand1 * operand2\n           \
    \     } else if (op[i] == \"//\") {\n                    result /= operand1 //\
    \ operand2\n                } else if (op[i] == \"**\") {\n                  \
    \  result **= operand1 ** operand2\n                }\n            }\n       \
    \ }\n        return result", "        var result = 0L\n        for (i <- 0 until\
    \ operand.length - 1) {\n            var operand1 = operand[i]\n            var\
    \ operand2 = operand[i + 1]\n            var operator = op[i]\n            if\
    \ (operator == \"+\") {\n                result = result + operand1 + operand2\n\
    \            } else if (operator == \"-\") {\n                result = result\
    \ - operand1 - operand2\n            } else if (operator == \"*\") {\n       \
    \         result = result * operand1 * operand2\n            } else if (operator\
    \ == \"//\") {\n                result = result / operand1 / operand2\n      \
    \      } else if (operator == \"**\") {\n                result = result ** operand1\
    \ ** operand2\n            }\n        }\n        return result", "        var\
    \ result = 0L\n        for (i <- 0 until operand.length - 1) {\n            var\
    \ operand1 = operand[i]\n            var operand2 = operand[i + 1]\n         \
    \   var operator = op[i]\n            if (operator == \"+\") {\n             \
    \   result = result + operand1 + operand2\n            } else if (operator ==\
    \ \"-\") {\n                result = result - operand1 - operand2\n          \
    \  } else if (operator == \"*\") {\n                result = result * operand1\
    \ * operand2\n            } else if (operator == \"//\") {\n                result\
    \ = result / operand1 / operand2\n            } else if (operator == \"**\") {\n\
    \                result = result ** operand1 ** operand2\n            }\n    \
    \    }\n        return result", "        var result = 0L\n        for (i <- 0\
    \ until operand.length - 1) {\n            var operand1 = operand[i]\n       \
    \     var operand2 = operand[i + 1]\n            var operator = op[i]\n      \
    \      if (operator == \"+\") {\n                result = result + operand1 +\
    \ operand2\n            } else if (operator == \"-\") {\n                result\
    \ = result - operand1 - operand2\n            } else if (operator == \"*\") {\n\
    \                result = result * operand1 * operand2\n            } else if\
    \ (operator == \"//\") {\n                result = result / operand1 / operand2\n\
    \            } else if (operator == \"**\") {\n                result = result\
    \ ** operand1 ** operand2\n            }\n        }\n        return result", " \
    \       val opList = op.toList\n        val operandList = operand.toList\n   \
    \     val result = 0L\n        for (i <- 0 until operandList.size - 1) {\n   \
    \         val op1 = opList.get(i)\n            val op2 = opList.get(i + 1)\n \
    \           val operand1 = operandList.get(i)\n            val operand2 = operandList.get(i\
    \ + 1)\n            if (op1 == \"+\") {\n                result += operand1 +\
    \ operand2\n            } else if (op1 == \"-\") {\n                result -=\
    \ operand1 - operand2\n            } else if (op1 == \"*\") {\n              \
    \  result *= operand1 * operand2\n            } else if (op1 == \"//\") {\n  \
    \              result /= operand1 // operand2\n            } else if (op1 == \"\
    **\") {\n                result **= operand1 ** operand2\n            }\n    \
    \    }\n        return result", "        val opLen = op.length\n        val operandLen\
    \ = operand.length\n        val result = 0L\n        for (i <- 0 until operandLen\
    \ - 1) {\n            val operand1 = operand[i]\n            for (j <- i + 1 until\
    \ operandLen) {\n                val operand2 = operand[j]\n                val\
    \ opIndex = i - j + 1\n                if (opIndex >= 0 && opIndex < opLen) {\n\
    \                    result = result + op[opIndex] * operand1 * operand2\n   \
    \             }\n            }\n        }\n        return result", "        var\
    \ result = 0L\n        for (i <- 0 until operand.length - 1) {\n            var\
    \ op1 = op[i]\n            var op2 = op[i + 1]\n            var operand1 = operand[i]\n\
    \            var operand2 = operand[i + 1]\n            if (op1 == \"+\") {\n\
    \                result += operand1 + operand2\n            } else if (op1 ==\
    \ \"-\") {\n                result -= operand1 + operand2\n            } else\
    \ if (op1 == \"*\") {\n                result *= operand1 * operand2\n       \
    \     } else if (op1 == \"//\") {\n                result /= operand1 // operand2\n\
    \            } else if (op1 == \"**\") {\n                result **= operand1\
    \ ** operand2\n            } else {\n                throw new RuntimeException(\"\
    Unknown operator: \" + op1)\n            }\n        }\n        return result",
  "        val result = 0L\n        for (i <- 0 until operand.length - 1) {\n    \
    \        result = result + operand[i] * op.length - 1\n            op.foreach(op\
    \ => {\n                result = result + operand[i] * op\n            })\n  \
    \      }\n        result", "        var result = 0L\n        for (i <- 0 until\
    \ operand.length - 1) {\n            var operand1 = operand[i]\n            var\
    \ operand2 = operand[i + 1]\n            var operator = op[i]\n            var\
    \ operation = operator\n            if (operator == \"*\") {\n               \
    \ result = result * operand1\n            } else if (operator == \"/\") {\n  \
    \              result = result / operand1\n            } else if (operator ==\
    \ \"//\") {\n                result = result // operand1\n            } else if\
    \ (operator == \"**\") {\n                result = result ** operand1\n      \
    \      } else if (operator == \"+\") {\n                result = result + operand1\n\
    \            } else if (operator == \"-\") {\n                result = result\
    \ - operand1\n            } else {\n                result = result * operand1\n\
    \            }\n        }\n        return result", "        def toInt(x : String)\
    \ : Long = {\n            if (x.equals(\"+\")) {\n                return 1\n \
    \           } else if (x.equals(\"-\")) {\n                return -1\n       \
    \     } else if (x.equals(\"*\")) {\n                return 2\n            } else\
    \ if (x.equals(\"/\")) {\n                return 3\n            } else if (x.equals(\"\
    **\")) {\n                return 4\n            } else {\n                return\
    \ 0\n            }\n        }\n        def toOp(x : Long) : String = {\n     \
    \       if (x == 1) {\n                return \"+\"\n            } else if (x\
    \ == -1) {\n                return \"-\"\n            } else if (x == 2) {\n \
    \               return \"*\"\n            } else if (x == 3) {\n             \
    \   return \"/\"\n            } else if (x == 4) {\n                return \"\
    **\"\n            } else {\n                return \"\"\n            }\n     \
    \   }\n        def toOpList(x : List[Long]) : List[String] = {\n            var\
    \ result = List[String]()\n            for (i <- 0 until x.length) {\n       \
    \         result = result.append(toOp(x[i]))\n            }\n            return\
    \ result\n        }\n        def toOperandList(x : List[Long]) : List[Long] =\
    \ {\n            var result = List[Long]()\n            for (i <- 0 until x.length)\
    \ {\n                result = result.append(x[i])\n            }\n           \
    \ return result\n        }\n        def toOperand(x : Long) : Long = {\n     \
    \       if (x < 0) {\n                return 0\n            } else {\n       \
    \         return x\n            }\n        }\n        def toOperator(x : String)\
    \ : String = {\n            if (x.equals(\"+\")) {\n                return \"\
    +\"\n            } else if (x.equals(\"-\")) {\n                return \"-\"\n\
    \            } else if (x.equals(\"*\")) {\n                return \"*\"\n   \
    \         } else if (x.equals(\"/\")) {\n                return \"/\"\n      \
    \      } else if (x.equals(\"**\")) {\n                return", "        var result\
    \ = 0L\n        for (i <- 0 until operand.length - 1) {\n            var operand1\
    \ = operand[i]\n            var operand2 = operand[i + 1]\n            var operator\
    \ = op[i]\n            switch (operator) {\n                case \"+\":\n    \
    \                result += operand1 + operand2\n                    break\n  \
    \              case \"-\":\n                    result -= operand1 - operand2\n\
    \                    break\n                case \"*\":\n                    result\
    \ *= operand1 * operand2\n                    break\n                case \"//\"\
    :\n                    result /= operand1 // operand2\n                    break\n\
    \                case \"**\":\n                    result **= operand1 ** operand2\n\
    \                    break\n                default:\n                    throw\
    \ new RuntimeException(\"Invalid operator\")\n            }\n        }\n     \
    \   return result", "        var result = 0L\n        for (i <- 0 until operand.length\
    \ - 1) {\n            var op1 = op[i]\n            var op2 = op[i + 1]\n     \
    \       var operand1 = operand[i]\n            var operand2 = operand[i + 1]\n\
    \            if (op1 == \"+\") {\n                result = result + operand1 +\
    \ operand2\n            } else if (op1 == \"-\") {\n                result = result\
    \ - operand1 - operand2\n            } else if (op1 == \"*\") {\n            \
    \    result = result * operand1 * operand2\n            } else if (op1 == \"//\"\
    ) {\n                result = result / operand1 / operand2\n            } else\
    \ if (op1 == \"**\") {\n                result = result ** operand1 ** operand2\n\
    \            }\n        }\n        return result", "        val opLen = op.length\n\
    \        val operandLen = operand.length\n        val result = 0L\n        for\
    \ (i <- 0 until operandLen - 1) {\n            val operandVal = operand[i]\n \
    \           for (j <- 0 until opLen - 1) {\n                val opVal = op[j]\n\
    \                if (opVal == \"+\") {\n                    result += operandVal\n\
    \                } else if (opVal == \"-\") {\n                    result -= operandVal\n\
    \                } else if (opVal == \"*\") {\n                    result *= operandVal\n\
    \                } else if (opVal == \"/\") {\n                    result /= operandVal\n\
    \                } else if (opVal == \"**\") {\n                    result = result\
    \ ** operandVal\n                }\n            }\n        }\n        return result",
  "        var result = 0L\n        for (i <- 0 until operand.length - 1) {\n    \
    \        var op1 = op[i]\n            var op2 = op[i + 1]\n            var operand1\
    \ = operand[i]\n            var operand2 = operand[i + 1]\n            if (op1\
    \ == \"+\") {\n                result = result + operand1 + operand2\n       \
    \     } else if (op1 == \"-\") {\n                result = result - operand1 -\
    \ operand2\n            } else if (op1 == \"*\") {\n                result = result\
    \ * operand1 * operand2\n            } else if (op1 == \"//\") {\n           \
    \     result = result / operand1 / operand2\n            } else if (op1 == \"\
    **\") {\n                result = result ** operand1 ** operand2\n           \
    \ }\n        }\n        return result", "        val opLen = op.length\n     \
    \   val opList = op.toList\n        val operandList = operand.toList\n       \
    \ val result = 0L\n        for (i <- 0 until opLen - 1) {\n            val op1\
    \ = opList[i]\n            val op2 = opList[i + 1]\n            val operand1 =\
    \ operandList[i]\n            val operand2 = operandList[i + 1]\n            if\
    \ (op1 == \"+\") {\n                result = result + operand1 + operand2\n  \
    \          } else if (op1 == \"-\") {\n                result = result - operand1\
    \ - operand2\n            } else if (op1 == \"*\") {\n                result =\
    \ result * operand1 * operand2\n            } else if (op1 == \"//\") {\n    \
    \            result = result / operand1 / operand2\n            } else if (op1\
    \ == \"**\") {\n                result = result ** operand1 ** operand2\n    \
    \        }\n        }\n        return result", "        val opList = op.toList\n\
    \        val operandList = operand.toList\n        val result = 0L\n        for\
    \ (i <- 0 until operandList.size - 1) {\n            val operand1 = operandList.get(i)\n\
    \            val operand2 = operandList.get(i + 1)\n            val operator =\
    \ opList.get(i)\n            val operator2 = opList.get(i + 1)\n            if\
    \ (operator == \"+\") {\n                result = result + operand1 + operand2\n\
    \            } else if (operator == \"-\") {\n                result = result\
    \ - operand1 - operand2\n            } else if (operator == \"*\") {\n       \
    \         result = result * operand1 * operand2\n            } else if (operator\
    \ == \"//\") {\n                result = result / operand1 / operand2\n      \
    \      } else if (operator == \"**\") {\n                result = result ** operand1\
    \ ** operand2\n            }\n        }\n        return result", "        val\
    \ opLen = op.length\n        val opList = List[Long](Array.apply(opLen).map(_.toLong).toJavaArray(Long.class))\n\
    \        val operandLen = operand.length\n        val operandList = List[Long](Array.apply(operandLen).map(_.toLong).toJavaArray(Long.class))\n\
    \        val result = opList.zip(operandList).map(op => op._1() + op._2()).reduce(_.add)\n\
    \        return result", "        var result = 0L\n        for (i <- 0 until operand.length\
    \ - 1) {\n            var operand1 = operand[i]\n            var operand2 = operand[i\
    \ + 1]\n            var operator = op[i]\n            if (operator == \"+\") {\n\
    \                result += operand1 + operand2\n            } else if (operator\
    \ == \"-\") {\n                result -= operand1 - operand2\n            } else\
    \ if (operator == \"*\") {\n                result *= operand1 * operand2\n  \
    \          } else if (operator == \"//\") {\n                result /= operand1\
    \ / operand2\n            } else if (operator == \"**\") {\n                result\
    \ **= operand1 ** operand2\n            }\n        }\n        return result",
  "        val opList = op.toList\n        val operandList = operand.toList\n    \
    \    val result = 0L\n        for (i <- 0 until operandList.size - 1) {\n    \
    \        val operand1 = operandList.get(i)\n            val operand2 = operandList.get(i\
    \ + 1)\n            val operator = opList.get(i)\n            if (operator ==\
    \ \"+\") {\n                result += operand1 + operand2\n            } else\
    \ if (operator == \"-\") {\n                result -= operand1 - operand2\n  \
    \          } else if (operator == \"*\") {\n                result *= operand1\
    \ * operand2\n            } else if (operator == \"//\") {\n                result\
    \ /= operand1 // operand2\n            } else if (operator == \"**\") {\n    \
    \            result **= operand1 ** operand2\n            }\n        }\n     \
    \   return result", "        var result = 0L\n        for (i <- 0 until operand.length\
    \ - 1) {\n            var operand1 = operand[i]\n            var operand2 = operand[i\
    \ + 1]\n            var operator = op[i]\n            if (operator == \"+\") {\n\
    \                result = result + operand1\n            } else if (operator ==\
    \ \"-\") {\n                result = result - operand1\n            } else if\
    \ (operator == \"*\") {\n                result = result * operand1\n        \
    \    } else if (operator == \"//\") {\n                result = result / operand1\n\
    \            } else if (operator == \"**\") {\n                result = result\
    \ ** operand1\n            }\n        }\n        return result", "        var\
    \ result = 0L\n        for (i <- 0 until operand.length - 1) {\n            var\
    \ op1 = op[i]\n            var op2 = op[i + 1]\n            var operand1 = operand[i]\n\
    \            var operand2 = operand[i + 1]\n            if (op1 == \"+\") {\n\
    \                result += operand1 + operand2\n            } else if (op1 ==\
    \ \"-\") {\n                result -= operand1 - operand2\n            } else\
    \ if (op1 == \"*\") {\n                result *= operand1 * operand2\n       \
    \     } else if (op1 == \"//\") {\n                result /= operand1 / operand2\n\
    \            } else if (op1 == \"**\") {\n                result **= operand1\
    \ ** operand2\n            }\n        }\n        return result", "        var\
    \ result = 0L\n        for (i <- 0 until operand.length - 1) {\n            var\
    \ operand1 = operand[i]\n            var operand2 = operand[i + 1]\n         \
    \   var operator = op[i]\n            switch (operator) {\n                case\
    \ \"+\":\n                    result = result + operand1 + operand2\n        \
    \            break\n                case \"-\":\n                    result =\
    \ result - operand1 - operand2\n                    break\n                case\
    \ \"*\":\n                    result = result * operand1 * operand2\n        \
    \            break\n                case \"//\":\n                    result =\
    \ result / operand1 / operand2\n                    break\n                case\
    \ \"**\":\n                    result = result ** operand1 ** operand2\n     \
    \               break\n                default:\n                    throw new\
    \ RuntimeException(\"Invalid operator\")\n            }\n        }\n        return\
    \ result", "        val opLen = op.length\n        val operandLen = operand.length\n\
    \        val result = 0L\n        for (i <- 0 until operandLen - 1) {\n      \
    \      for (j <- 0 until opLen - 1) {\n                if (op[j] == \"+\") {\n\
    \                    result = result + operand[i]\n                } else if (op[j]\
    \ == \"-\") {\n                    result = result - operand[i]\n            \
    \    } else if (op[j] == \"*\") {\n                    result = result * operand[i]\n\
    \                } else if (op[j] == \"//\") {\n                    result = result\
    \ / operand[i]\n                } else if (op[j] == \"**\") {\n              \
    \      result = result ** operand[i]\n                }\n            }\n     \
    \   }\n        return result", "        var result = 0L\n        for (i <- 0 until\
    \ operand.length - 1) {\n            var operand1 = operand[i]\n            for\
    \ (j <- i + 1 until operand.length) {\n                var operand2 = operand[j]\n\
    \                var operator = op[i]\n                if (operator == \"*\")\
    \ {\n                    result = result * operand1 * operand2\n             \
    \   } else if (operator == \"/\") {\n                    result = result * operand1\
    \ / operand2\n                } else if (operator == \"**\") {\n             \
    \       result = result * operand1 ** operand2\n                } else if (operator\
    \ == \"+\") {\n                    result = result + operand1 + operand2\n   \
    \             } else if (operator == \"-\") {\n                    result = result\
    \ - operand1 - operand2\n                }\n            }\n        }\n       \
    \ return result", "        var result = 0L\n        for (i <- 0 until operand.length\
    \ - 1) {\n            var operand1 = operand[i]\n            var operand2 = operand[i\
    \ + 1]\n            var operator = op[i]\n            if (operator == \"+\") {\n\
    \                result += operand1 + operand2\n            } else if (operator\
    \ == \"-\") {\n                result -= operand1 - operand2\n            } else\
    \ if (operator == \"*\") {\n                result *= operand1 * operand2\n  \
    \          } else if (operator == \"//\") {\n                result /= operand1\
    \ // operand2\n            } else if (operator == \"**\") {\n                result\
    \ **= operand1 ** operand2\n            }\n        }\n        return result",
  "        var result = 0L\n        for (i <- 0 until operand.length - 1) {\n    \
    \        var op1 = op[i]\n            var op2 = op[i + 1]\n            var operand1\
    \ = operand[i]\n            var operand2 = operand[i + 1]\n            if (op1\
    \ == \"+\") {\n                result = result + operand1 + operand2\n       \
    \     } else if (op1 == \"-\") {\n                result = result - operand1 -\
    \ operand2\n            } else if (op1 == \"*\") {\n                result = result\
    \ * operand1 * operand2\n            } else if (op1 == \"//\") {\n           \
    \     result = result / operand1 / operand2\n            } else if (op1 == \"\
    **\") {\n                result = result ** operand1 ** operand2\n           \
    \ }\n        }\n        return result", "        var result = 0L\n        for\
    \ (i <- 0 until operand.length - 1) {\n            var opr = op[i]\n         \
    \   var opr_i = operand[i]\n            if (opr == \"+\") {\n                result\
    \ += opr_i\n            } else if (opr == \"-\") {\n                result -=\
    \ opr_i\n            } else if (opr == \"*\") {\n                result *= opr_i\n\
    \            } else if (opr == \"/\") {\n                result /= opr_i\n   \
    \         } else if (opr == \"**\") {\n                result **= opr_i\n    \
    \        }\n        }\n        return result", "        val opLen = op.length\n\
    \        val operandLen = operand.length\n        val result = 0L\n        for\
    \ (i <- 0 until operandLen - 1) {\n            val operandVal = operand[i]\n \
    \           for (j <- 0 until opLen - 1) {\n                val operator = op[j]\n\
    \                if (operator == \"+\") {\n                    result = result\
    \ + operandVal\n                } else if (operator == \"-\") {\n            \
    \        result = result - operandVal\n                } else if (operator ==\
    \ \"*\") {\n                    result = result * operandVal\n               \
    \ } else if (operator == \"//\") {\n                    result = result / operandVal\n\
    \                } else if (operator == \"**\") {\n                    result\
    \ = result ** operandVal\n                }\n            }\n        }\n      \
    \  return result", "        var result = 0L\n        for (i <- 0 until operand.length\
    \ - 1) {\n            var op1 = op[i]\n            var op2 = op[i + 1]\n     \
    \       var operand1 = operand[i]\n            var operand2 = operand[i + 1]\n\
    \            if (op1 == \"+\") {\n                result += operand1 + operand2\n\
    \            } else if (op1 == \"-\") {\n                result -= operand1 -\
    \ operand2\n            } else if (op1 == \"*\") {\n                result *=\
    \ operand1 * operand2\n            } else if (op1 == \"//\") {\n             \
    \   result /= operand1 // operand2\n            } else if (op1 == \"**\") {\n\
    \                result **= operand1 ** operand2\n            }\n        }\n \
    \       return result", "        var result = 0L\n        for (i <- 0 until operand.length\
    \ - 1) {\n            var operand1 = operand[i]\n            var operand2 = operand[i\
    \ + 1]\n            var operator = op[i]\n            var operation = operator\n\
    \            if (operator == \"+\") {\n                result += operand1 + operand2\n\
    \            } else if (operator == \"-\") {\n                result -= operand1\
    \ - operand2\n            } else if (operator == \"*\") {\n                result\
    \ *= operand1 * operand2\n            } else if (operator == \"//\") {\n     \
    \           result /= operand1 // operand2\n            } else if (operator ==\
    \ \"**\") {\n                result **= operand1 ** operand2\n            }\n\
    \        }\n        return result", "        val opList = op.toList\n        val\
    \ operandList = operand.toList\n        val result = 0L\n        for (i <- 0 until\
    \ operandList.size - 1) {\n            val op = opList.get(i)\n            val\
    \ operand1 = operandList.get(i)\n            val operand2 = operandList.get(i\
    \ + 1)\n            if (op == \"+\") {\n                result = result + operand1\
    \ + operand2\n            } else if (op == \"-\") {\n                result =\
    \ result - operand1 - operand2\n            } else if (op == \"*\") {\n      \
    \          result = result * operand1 * operand2\n            } else if (op ==\
    \ \"//\") {\n                result = result / operand1 / operand2\n         \
    \   } else if (op == \"**\") {\n                result = result ** operand1 **\
    \ operand2\n            }\n        }\n        return result", "        var result\
    \ = 0L\n        for (i <- 0 until operand.length - 1) {\n            var operand1\
    \ = operand[i]\n            var operand2 = operand[i + 1]\n            var operator\
    \ = op[i]\n            if (operator == \"+\") {\n                result = result\
    \ + operand1 + operand2\n            } else if (operator == \"-\") {\n       \
    \         result = result - operand1 - operand2\n            } else if (operator\
    \ == \"*\") {\n                result = result * operand1 * operand2\n       \
    \     } else if (operator == \"//\") {\n                result = result / operand1\
    \ / operand2\n            } else if (operator == \"**\") {\n                result\
    \ = result ** operand1 ** operand2\n            }\n        }\n        return result",
  "        val opList = op.toList\n        val operandList = operand.toList\n    \
    \    val result = 0L\n        for (i <- 0 until operandList.size - 1) {\n    \
    \        val op = opList.apply(i)\n            val operand = operandList.apply(i)\n\
    \            if (op == \"+\") {\n                result = result + operand\n \
    \           } else if (op == \"-\") {\n                result = result - operand\n\
    \            } else if (op == \"*\") {\n                result = result * operand\n\
    \            } else if (op == \"//\") {\n                result = result / operand\n\
    \            } else if (op == \"**\") {\n                result = result ** operand\n\
    \            }\n        }\n        return result", "        val opList = op.toList\n\
    \        val operandList = operand.toList\n        val result = 0L\n        for\
    \ (i <- 0 until operandList.size - 1) {\n            for (j <- 0 until opList.size\
    \ - 1) {\n                if (opList[j] == \"+\") {\n                    result\
    \ = result + operandList[i] + operandList[i + 1]\n                    i = i +\
    \ 2\n                } else if (opList[j] == \"-\") {\n                    result\
    \ = result - operandList[i] - operandList[i + 1]\n                    i = i +\
    \ 2\n                } else if (opList[j] == \"*\") {\n                    result\
    \ = result * operandList[i] * operandList[i + 1]\n                    i = i +\
    \ 2\n                } else if (opList[j] == \"//\") {\n                    result\
    \ = result / operandList[i] / operandList[i + 1]\n                    i = i +\
    \ 2\n                } else if (opList[j] == \"**\") {\n                    result\
    \ = result ** operandList[i] ** operandList[i + 1]\n                    i = i\
    \ + 2\n                }\n            }\n        }\n        return result", " \
    \       val opLen = op.length\n        val operandLen = operand.length\n     \
    \   val result = 0L\n        for (i <- 0 until operandLen - 1) {\n           \
    \ val operandVal = operand[i]\n            for (j <- 0 until opLen - 1) {\n  \
    \              val opVal = op[j]\n                if (opVal == \"+\") {\n    \
    \                result = result + operandVal\n                } else if (opVal\
    \ == \"-\") {\n                    result = result - operandVal\n            \
    \    } else if (opVal == \"*\") {\n                    result = result * operandVal\n\
    \                } else if (opVal == \"//\") {\n                    result = result\
    \ / operandVal\n                } else if (opVal == \"**\") {\n              \
    \      result = result ** operandVal\n                }\n            }\n     \
    \   }\n        return result", "        var result = 0L\n        for (i <- 0 until\
    \ operand.length - 1) {\n            var op1 = op[i]\n            var op2 = op[i\
    \ + 1]\n            var operand1 = operand[i]\n            var operand2 = operand[i\
    \ + 1]\n            if (op1 == \"+\") {\n                result += operand1 +\
    \ operand2\n            } else if (op1 == \"-\") {\n                result -=\
    \ operand1 - operand2\n            } else if (op1 == \"*\") {\n              \
    \  result *= operand1 * operand2\n            } else if (op1 == \"//\") {\n  \
    \              result /= operand1 // operand2\n            } else if (op1 == \"\
    **\") {\n                result **= operand1 ** operand2\n            }\n    \
    \    }\n        return result", "        var result = 0L\n        for (i <- 0\
    \ until operand.length - 1) {\n            var op1 = op[i]\n            var op2\
    \ = op[i + 1]\n            var operand1 = operand[i]\n            var operand2\
    \ = operand[i + 1]\n            if (op1 == \"+\") {\n                result +=\
    \ operand1 + operand2\n            } else if (op1 == \"-\") {\n              \
    \  result -= operand1 - operand2\n            } else if (op1 == \"*\") {\n   \
    \             result *= operand1 * operand2\n            } else if (op1 == \"\
    //\") {\n                result /= operand1 // operand2\n            } else if\
    \ (op1 == \"**\") {\n                result **= operand1 ** operand2\n       \
    \     }\n        }\n        return result", "        val opLen = op.length\n \
    \       val operandLen = operand.length\n        val result = 0L\n        for\
    \ (i <- 0 until operandLen - 1) {\n            val operandVal = operand[i]\n \
    \           for (j <- 0 until opLen - 1) {\n                val operator = op[j]\n\
    \                if (operator == \"+\") {\n                    result += operandVal\n\
    \                } else if (operator == \"-\") {\n                    result -=\
    \ operandVal\n                } else if (operator == \"*\") {\n              \
    \      result *= operandVal\n                } else if (operator == \"//\") {\n\
    \                    result /= operandVal\n                } else if (operator\
    \ == \"**\") {\n                    result = _.pow(result, operandVal)\n     \
    \           }\n            }\n        }\n        return result", "        var\
    \ result = 0L\n        for (var i = 0; i < operand.length; i++) {\n          \
    \  var operand_i = operand[i]\n            for (var j = 0; j < op.length; j++)\
    \ {\n                var operator_j = op[j]\n                if (operator_j ==\
    \ \"+\") {\n                    result += operand_i\n                } else if\
    \ (operator_j == \"-\") {\n                    result -= operand_i\n         \
    \       } else if (operator_j == \"*\") {\n                    result *= operand_i\n\
    \                } else if (operator_j == \"//\") {\n                    result\
    \ /= operand_i\n                } else if (operator_j == \"**\") {\n         \
    \           result = _.pow(result, operand_i)\n                }\n           \
    \ }\n        }\n        return result", "        val opLen = op.length\n     \
    \   val operandLen = operand.length\n        val result = 0L\n        for (i <-\
    \ 0 until operandLen - 1) {\n            val operandVal = operand[i]\n       \
    \     for (j <- 0 until opLen - 1) {\n                val opVal = op[j]\n    \
    \            if (opVal == \"+\") {\n                    result += operandVal\n\
    \                } else if (opVal == \"-\") {\n                    result -= operandVal\n\
    \                } else if (opVal == \"*\") {\n                    result *= operandVal\n\
    \                } else if (opVal == \"/\") {\n                    result /= operandVal\n\
    \                } else if (opVal == \"**\") {\n                    result = (result\
    \ ** operandVal)\n                }\n            }\n        }\n        return\
    \ result", "        var result = 0L\n        for (i <- 0 until operand.length\
    \ - 1) {\n            var op1 = op[i]\n            var op2 = op[i + 1]\n     \
    \       var operand1 = operand[i]\n            var operand2 = operand[i + 1]\n\
    \            if (op1 == \"+\") {\n                result += operand1 + operand2\n\
    \            } else if (op1 == \"-\") {\n                result -= operand1 +\
    \ operand2\n            } else if (op1 == \"*\") {\n                result *=\
    \ operand1 * operand2\n            } else if (op1 == \"//\") {\n             \
    \   result /= operand1 / operand2\n            } else if (op1 == \"**\") {\n \
    \               result = (operand1 ** operand2)\n            }\n        }\n  \
    \      return result", "        var result = 0L\n        for (i <- 0 until operand.length\
    \ - 1) {\n            var op1 = op[i]\n            var op2 = op[i + 1]\n     \
    \       var operand1 = operand[i]\n            var operand2 = operand[i + 1]\n\
    \            if (op1 == \"+\") {\n                result = result + operand1 +\
    \ operand2\n            } else if (op1 == \"-\") {\n                result = result\
    \ - operand1 - operand2\n            } else if (op1 == \"*\") {\n            \
    \    result = result * operand1 * operand2\n            } else if (op1 == \"//\"\
    ) {\n                result = result / operand1 / operand2\n            } else\
    \ if (op1 == \"**\") {\n                result = result ** operand1 ** operand2\n\
    \            }\n        }\n        return result", "        val opLen = op.length\n\
    \        val operandLen = operand.length\n        if (opLen < 2 || operandLen\
    \ < 2) {\n            throw new IllegalArgumentException(\"Operator list and operand\
    \ list should have at least 2 elements.\")\n        }\n        val result = operand[0]\n\
    \        for (i <- 1 until operandLen) {\n            val opIndex = i % opLen\n\
    \            val operandIndex = i % operandLen\n            if (op[opIndex] ==\
    \ \"+\") {\n                result = result + operand[operandIndex]\n        \
    \    } else if (op[opIndex] == \"-\") {\n                result = result - operand[operandIndex]\n\
    \            } else if (op[opIndex] == \"*\") {\n                result = result\
    \ * operand[operandIndex]\n            } else if (op[opIndex] == \"//\") {\n \
    \               result = result / operand[operandIndex]\n            } else if\
    \ (op[opIndex] == \"**\") {\n                result = result ** operand[operandIndex]\n\
    \            } else {\n                throw new IllegalArgumentException(\"Unknown\
    \ operator \" + op[opIndex])\n            }\n        }\n        return result",
  "        var result = 0L\n        for (i <- 0 until operand.length - 1) {\n    \
    \        var operand1 = operand[i]\n            var operand2 = operand[i + 1]\n\
    \            var operator = op[i]\n            if (operator == \"+\") {\n    \
    \            result = result + operand1 + operand2\n            } else if (operator\
    \ == \"-\") {\n                result = result - operand1 - operand2\n       \
    \     } else if (operator == \"*\") {\n                result = result * operand1\
    \ * operand2\n            } else if (operator == \"//\") {\n                result\
    \ = result / operand1 / operand2\n            } else if (operator == \"**\") {\n\
    \                result = result ** operand1 ** operand2\n            }\n    \
    \    }\n        return result", "        val opLen = op.length\n        val operandLen\
    \ = operand.length\n        val result = 0L\n        for (i <- 0 until operandLen\
    \ - 1) {\n            val operandVal = operand[i]\n            for (j <- 0 until\
    \ opLen - 1) {\n                val opVal = op[j]\n                if (opVal ==\
    \ \"+\") {\n                    result += operandVal\n                } else if\
    \ (opVal == \"-\") {\n                    result -= operandVal\n             \
    \   } else if (opVal == \"*\") {\n                    result *= operandVal\n \
    \               } else if (opVal == \"//\") {\n                    result /= operandVal\n\
    \                } else if (opVal == \"**\") {\n                    result **=\
    \ operandVal\n                }\n            }\n        }\n        return result",
  "        val opLen = op.length\n        val opList = op.toList\n        val operandLen\
    \ = operand.length\n        val operandList = operand.toList\n        val result\
    \ = 0L\n        for (i <- 0 until operandLen - 1) {\n            val operand1\
    \ = operandList.apply(i)\n            val operand2 = operandList.apply(i + 1)\n\
    \            val operator = opList.apply(i)\n            if (operator == \"+\"\
    ) {\n                result = result + operand1\n            } else if (operator\
    \ == \"-\") {\n                result = result - operand1\n            } else\
    \ if (operator == \"*\") {\n                result = result * operand1\n     \
    \       } else if (operator == \"//\") {\n                result = result / operand1\n\
    \            } else if (operator == \"**\") {\n                result = result\
    \ ** operand1\n            }\n        }\n        return result", "        var\
    \ result = 0L\n        for (i <- 0 until operand.length - 1) {\n            var\
    \ operand1 = operand[i]\n            var operand2 = operand[i + 1]\n         \
    \   var operator = op[i]\n            if (operator == \"+\") {\n             \
    \   result = result + operand1\n            } else if (operator == \"-\") {\n\
    \                result = result - operand1\n            } else if (operator ==\
    \ \"*\") {\n                result = result * operand1\n            } else if\
    \ (operator == \"//\") {\n                result = result / operand1\n       \
    \     } else if (operator == \"**\") {\n                result = result ** operand1\n\
    \            }\n        }\n        return result", "        val opLen = op.length\n\
    \        val opList = new ArrayList[Long](opLen)\n        for (i <- 0 until opLen)\
    \ {\n            opList.set(i, op[i])\n        }\n        val operandList = new\
    \ ArrayList[Long](operand)\n        val result = 0\n        for (i <- 0 until\
    \ operandList.size - 1) {\n            val op1 = opList.get(i)\n            val\
    \ op2 = opList.get(i + 1)\n            val operand1 = operandList.get(i)\n   \
    \         val operand2 = operandList.get(i + 1)\n            if (op1 == \"+\"\
    ) {\n                result = result + operand1 + operand2\n            } else\
    \ if (op1 == \"-\") {\n                result = result - operand1 - operand2\n\
    \            } else if (op1 == \"*\") {\n                result = result * operand1\
    \ * operand2\n            } else if (op1 == \"//\") {\n                result\
    \ = result / operand1 / operand2\n            } else if (op1 == \"**\") {\n  \
    \              result = result ** operand1 ** operand2\n            }\n      \
    \  }\n        return result", "        val opLen = op.length\n        val operandLen\
    \ = operand.length\n        if (opLen < 2 || operandLen < 2) {\n            throw\
    \ new IllegalArgumentException(\"Operator list and operand list should have at\
    \ least 2 elements.\")\n        }\n        val result = 0L\n        for (i <-\
    \ 0 until operandLen - 1) {\n            val operandVal = operand[i]\n       \
    \     for (j <- 0 until opLen - 1) {\n                val operator = op[j]\n \
    \               if (operator == \"+\") {\n                    result += operandVal\n\
    \                } else if (operator == \"-\") {\n                    result -=\
    \ operandVal\n                } else if (operator == \"*\") {\n              \
    \      result *= operandVal\n                } else if (operator == \"/\") {\n\
    \                    result /= operandVal\n                } else if (operator\
    \ == \"**\") {\n                    result = result ** operandVal\n          \
    \      } else {\n                    throw new IllegalArgumentException(\"Unknown\
    \ operator: \" + operator)\n                }\n            }\n        }\n    \
    \    return result", "        var result = 0L\n        for (i <- 0 until operand.length\
    \ - 1) {\n            var op1 = op[i]\n            var op2 = op[i + 1]\n     \
    \       var operand1 = operand[i]\n            var operand2 = operand[i + 1]\n\
    \            if (op1 == \"+\") {\n                result = result + operand1 +\
    \ operand2\n            } else if (op1 == \"-\") {\n                result = result\
    \ - operand1 - operand2\n            } else if (op1 == \"*\") {\n            \
    \    result = result * operand1 * operand2\n            } else if (op1 == \"//\"\
    ) {\n                result = result / operand1 / operand2\n            } else\
    \ if (op1 == \"**\") {\n                result = result ** operand1 ** operand2\n\
    \            }\n        }\n        return result", "        var result = 0L\n\
    \        for (i <- 0 until operand.length - 1) {\n            var op1 = op[i]\n\
    \            var op2 = op[i + 1]\n            var operand1 = operand[i]\n    \
    \        var operand2 = operand[i + 1]\n            if (op1 == \"+\") {\n    \
    \            result += operand1 + operand2\n            } else if (op1 == \"-\"\
    ) {\n                result -= operand1 - operand2\n            } else if (op1\
    \ == \"*\") {\n                result *= operand1 * operand2\n            } else\
    \ if (op1 == \"//\") {\n                result /= operand1 // operand2\n     \
    \       } else if (op1 == \"**\") {\n                result **= operand1 ** operand2\n\
    \            }\n        }\n        return result", "        var result = 0L\n\
    \        for (i <- 0 until operand.length - 1) {\n            var operand1 = operand[i]\n\
    \            var operand2 = operand[i + 1]\n            var operator = op[i]\n\
    \            if (operator == \"+\") {\n                result += operand1 + operand2\n\
    \            } else if (operator == \"-\") {\n                result -= operand1\
    \ - operand2\n            } else if (operator == \"*\") {\n                result\
    \ *= operand1 * operand2\n            } else if (operator == \"//\") {\n     \
    \           result /= operand1 // operand2\n            } else if (operator ==\
    \ \"**\") {\n                result **= operand1 ** operand2\n            }\n\
    \        }\n        return result", "        def add(a : Long, b : Long) : Long\
    \ = {\n            a + b\n        }\n        def sub(a : Long, b : Long) : Long\
    \ = {\n            a - b\n        }\n        def mul(a : Long, b : Long) : Long\
    \ = {\n            a * b\n        }\n        def div(a : Long, b : Long) : Long\
    \ = {\n            a / b\n        }\n        def exp(a : Long, b : Long) : Long\
    \ = {\n            a ** b\n        }\n        def f(a : Long, b : Long) : Long\
    \ = {\n            a // b\n        }\n        def eval(op : List[String], operand\
    \ : List[Long]) : Long = {\n            var result = 0L\n            for (i <-\
    \ 0 until operand.length - 1) {\n                var opr = op[i]\n           \
    \     var opr2 = opr\n                if (opr == \"+\") {\n                  \
    \  result = result + operand[i]\n                } else if (opr == \"-\") {\n\
    \                    result = result - operand[i]\n                } else if (opr\
    \ == \"*\") {\n                    result = result * operand[i]\n            \
    \    } else if (opr == \"/\") {\n                    result = result / operand[i]\n\
    \                } else if (opr == \"**\") {\n                    result = result\
    \ ** operand[i]\n                } else if (opr == \"//\") {\n               \
    \     result = result // operand[i]\n                }\n            }\n      \
    \      result\n        }\n        eval(op, operand)", "        val opLen = op.length\n\
    \        val opList = op.toList\n        val operandLen = operand.length\n   \
    \     val operandList = operand.toList\n        val result = 0L\n        for (i\
    \ <- 0 until operandLen - 1) {\n            val operand1 = operandList.apply(i)\n\
    \            val operand2 = operandList.apply(i + 1)\n            val operator\
    \ = opList.apply(i)\n            if (operator == \"+\") {\n                result\
    \ = result + operand1\n            } else if (operator == \"-\") {\n         \
    \       result = result - operand1\n            } else if (operator == \"*\")\
    \ {\n                result = result * operand1\n            } else if (operator\
    \ == \"//\") {\n                result = result / operand1\n            } else\
    \ if (operator == \"**\") {\n                result = result ** operand1\n   \
    \         }\n        }\n        return result", "        val opLen = op.length\n\
    \        val operandLen = operand.length\n        val result = 0L\n        for\
    \ (i <- 0 until operandLen - 1) {\n            val operandVal = operand[i]\n \
    \           for (j <- 0 until opLen - 1) {\n                val opVal = op[j]\n\
    \                if (opVal == \"+\") {\n                    result += operandVal\n\
    \                } else if (opVal == \"-\") {\n                    result -= operandVal\n\
    \                } else if (opVal == \"*\") {\n                    result *= operandVal\n\
    \                } else if (opVal == \"/\") {\n                    result /= operandVal\n\
    \                } else if (opVal == \"**\") {\n                    result = _.pow(operandVal,\
    \ result)\n                }\n            }\n        }\n        return result",
  "        var result = 0L\n        for (i <- 0 until operand.length - 1) {\n    \
    \        var operand1 = operand[i]\n            var operand2 = operand[i + 1]\n\
    \            var operator = op[i]\n            if (operator == \"+\") {\n    \
    \            result = result + operand1 + operand2\n            } else if (operator\
    \ == \"-\") {\n                result = result - operand1 - operand2\n       \
    \     } else if (operator == \"*\") {\n                result = result * operand1\
    \ * operand2\n            } else if (operator == \"//\") {\n                result\
    \ = result / operand1 / operand2\n            } else if (operator == \"**\") {\n\
    \                result = result ** operand1 ** operand2\n            }\n    \
    \    }\n        return result", "        val opLen = op.length\n        val operandLen\
    \ = operand.length\n        val result = 0L\n        for (i <- 0 until operandLen\
    \ - 1) {\n            val operandVal = operand[i]\n            for (j <- 0 until\
    \ opLen - 1) {\n                val opVal = op[j]\n                if (opVal ==\
    \ \"+\") {\n                    result = result + operandVal\n               \
    \ } else if (opVal == \"-\") {\n                    result = result - operandVal\n\
    \                } else if (opVal == \"*\") {\n                    result = result\
    \ * operandVal\n                } else if (opVal == \"/\") {\n               \
    \     result = result / operandVal\n                } else if (opVal == \"**\"\
    ) {\n                    result = result ** operandVal\n                }\n  \
    \          }\n        }\n        return result", "        var result = 0L\n  \
    \      for (i <- 0 until operand.length - 1) {\n            var op1 = op[i]\n\
    \            var op2 = op[i + 1]\n            var operand1 = operand[i]\n    \
    \        var operand2 = operand[i + 1]\n            if (op1 == \"+\") {\n    \
    \            result = result + operand1 + operand2\n            } else if (op1\
    \ == \"-\") {\n                result = result - operand1 - operand2\n       \
    \     } else if (op1 == \"*\") {\n                result = result * operand1 *\
    \ operand2\n            } else if (op1 == \"//\") {\n                result =\
    \ result / operand1 / operand2\n            } else if (op1 == \"**\") {\n    \
    \            result = result ** operand1 ** operand2\n            }\n        }\n\
    \        return result", "        val opLen = op.length\n        val opList =\
    \ List.range(0, opLen)\n        val operandList = List.range(0, operand.length)\n\
    \        val result = 0L\n        for (i <- 0 until operand.length - 1) {\n  \
    \          for (j <- 0 until opLen - 1) {\n                if (op[j] == \"+\"\
    ) {\n                    result = result + operandList[i] + operandList[i + 1]\n\
    \                    i = i + 2\n                } else if (op[j] == \"-\") {\n\
    \                    result = result - operandList[i] - operandList[i + 1]\n \
    \                   i = i + 2\n                } else if (op[j] == \"*\") {\n\
    \                    result = result * operandList[i] * operandList[i + 1]\n \
    \                   i = i + 2\n                } else if (op[j] == \"//\") {\n\
    \                    result = result / operandList[i] / operandList[i + 1]\n \
    \                   i = i + 2\n                } else if (op[j] == \"**\") {\n\
    \                    result = result ** operandList[i] ** operandList[i + 1]\n\
    \                    i = i + 2\n                }\n            }\n        }\n\
    \        return result", "        val opLen = op.length\n        val operandLen\
    \ = operand.length\n        val result = 0L\n        for (i <- 0 until operandLen\
    \ - 1) {\n            val operandVal = operand[i]\n            for (j <- 0 until\
    \ opLen - 1) {\n                val opVal = op[j]\n                if (opVal ==\
    \ \"+\") {\n                    result += operandVal\n                } else if\
    \ (opVal == \"-\") {\n                    result -= operandVal\n             \
    \   } else if (opVal == \"*\") {\n                    result *= operandVal\n \
    \               } else if (opVal == \"/\") {\n                    result /= operandVal\n\
    \                } else if (opVal == \"**\") {\n                    result = _.pow(operandVal,\
    \ result)\n                }\n            }\n        }\n        return result",
  "        val opList = op.toList\n        val operandList = operand.toList\n    \
    \    val result = 0L\n        for (i <- 0 until operandList.size - 1) {\n    \
    \        for (j <- 0 until opList.size - 1) {\n                if (opList[j] ==\
    \ \"+\") {\n                    result = result + operandList[i] + operandList[i\
    \ + 1]\n                    i = i + 2\n                } else if (opList[j] ==\
    \ \"-\") {\n                    result = result - operandList[i] - operandList[i\
    \ + 1]\n                    i = i + 2\n                } else if (opList[j] ==\
    \ \"*\") {\n                    result = result * operandList[i] * operandList[i\
    \ + 1]\n                    i = i + 2\n                } else if (opList[j] ==\
    \ \"//\") {\n                    result = result / operandList[i] / operandList[i\
    \ + 1]\n                    i = i + 2\n                } else if (opList[j] ==\
    \ \"**\") {\n                    result = result ** operandList[i] ** operandList[i\
    \ + 1]\n                    i = i + 2\n                }\n            }\n    \
    \    }\n        return result", "        var result = 0L\n        for (i <- 0\
    \ until operand.length - 1) {\n            var op1 = op[i]\n            var op2\
    \ = op[i + 1]\n            var operand1 = operand[i]\n            var operand2\
    \ = operand[i + 1]\n            if (op1 == \"+\") {\n                result +=\
    \ operand1 + operand2\n            } else if (op1 == \"-\") {\n              \
    \  result -= operand1 - operand2\n            } else if (op1 == \"*\") {\n   \
    \             result *= operand1 * operand2\n            } else if (op1 == \"\
    //\") {\n                result /= operand1 // operand2\n            } else if\
    \ (op1 == \"**\") {\n                result **= operand1 ** operand2\n       \
    \     }\n        }\n        return result", "        var result = 0L\n       \
    \ for (i <- 0 until operand.length - 1) {\n            var operand1 = operand[i]\n\
    \            var operand2 = operand[i + 1]\n            var operator = op[i]\n\
    \            if (operator == \"+\") {\n                result = result + operand1\n\
    \            } else if (operator == \"-\") {\n                result = result\
    \ - operand1\n            } else if (operator == \"*\") {\n                result\
    \ = result * operand1\n            } else if (operator == \"//\") {\n        \
    \        result = result / operand1\n            } else if (operator == \"**\"\
    ) {\n                result = result ** operand1\n            }\n        }\n \
    \       return result", "        val opLen = op.length\n        val operandLen\
    \ = operand.length\n        val result = 0L\n        for (i <- 0 until operandLen\
    \ - 1) {\n            val opVal = op[i]\n            val operandVal = operand[i]\n\
    \            if (opVal == \"+\") {\n                result += operandVal\n   \
    \         } else if (opVal == \"-\") {\n                result -= operandVal\n\
    \            } else if (opVal == \"*\") {\n                result *= operandVal\n\
    \            } else if (opVal == \"//\") {\n                result /= operandVal\n\
    \            } else if (opVal == \"**\") {\n                result **= operandVal\n\
    \            }\n        }\n        return result", "        val opLen = op.length\n\
    \        val operandLen = operand.length\n        val result = 0L\n        for\
    \ (i <- 0 until operandLen - 1) {\n            val operandVal = operand[i]\n \
    \           for (j <- 0 until opLen - 1) {\n                val opVal = op[j]\n\
    \                if (opVal == \"+\") {\n                    result += operandVal\n\
    \                } else if (opVal == \"-\") {\n                    result -= operandVal\n\
    \                } else if (opVal == \"*\") {\n                    result *= operandVal\n\
    \                } else if (opVal == \"/\") {\n                    result /= operandVal\n\
    \                } else if (opVal == \"**\") {\n                    result **=\
    \ operandVal\n                }\n            }\n        }\n        return result",
  "        var result = 0L\n        for (i <- 0 until operand.length - 1) {\n    \
    \        var opr = op[i]\n            var opr_i = operand[i]\n            if (opr\
    \ == \"+\") {\n                result += opr_i\n            } else if (opr ==\
    \ \"-\") {\n                result -= opr_i\n            } else if (opr == \"\
    *\") {\n                result *= opr_i\n            } else if (opr == \"//\"\
    ) {\n                result /= opr_i\n            } else if (opr == \"**\") {\n\
    \                result **= opr_i\n            }\n        }\n        return result",
  "        val opLen = op.length\n        val opList = op.toList\n        val operandList\
    \ = operand.toList\n        val result = 0L\n        for (i <- 0 until operandList.length\
    \ - 1) {\n            val operand1 = operandList[i]\n            val operand2\
    \ = operandList[i + 1]\n            if (opLen == 2) {\n                if (opList[0]\
    \ == \"+\") {\n                    result += operand1\n                } else\
    \ if (opList[0] == \"-\") {\n                    result -= operand1\n        \
    \        } else if (opList[0] == \"*\") {\n                    result *= operand1\n\
    \                } else if (opList[0] == \"//\") {\n                    result\
    \ /= operand1\n                } else if (opList[0] == \"**\") {\n           \
    \         result = (operand1 ** operand2)\n                }\n            } else\
    \ if (opLen == 3) {\n                if (opList[0] == \"+\") {\n             \
    \       result += operand1\n                } else if (opList[0] == \"-\") {\n\
    \                    result -= operand1\n                } else if (opList[0]\
    \ == \"*\") {\n                    result *= operand1\n                } else\
    \ if (opList[0] == \"//\") {\n                    result /= operand1\n       \
    \         } else if (opList[0] == \"**\") {\n                    result = (operand1\
    \ ** operand2)\n                }\n            }\n        }\n        return result",
  "        val result = 0L\n        for (i <- 0 until operand.length - 1) {\n    \
    \        val op1 = op[i]\n            val op2 = op[i + 1]\n            if (op1\
    \ == \"+\") {\n                result += operand[i]\n            } else if (op1\
    \ == \"-\") {\n                result -= operand[i]\n            } else if (op1\
    \ == \"*\") {\n                result *= operand[i]\n            } else if (op1\
    \ == \"//\") {\n                result /= operand[i]\n            } else if (op1\
    \ == \"**\") {\n                result **= operand[i]\n            }\n       \
    \ }\n        return result", "        val opList = op.toList\n        val operandList\
    \ = operand.toList\n        val result = 0L\n        for (i <- 0 until operandList.size\
    \ - 1) {\n            val op1 = opList.apply(i)\n            val op2 = opList.apply(i\
    \ + 1)\n            val operand1 = operandList.apply(i)\n            val operand2\
    \ = operandList.apply(i + 1)\n            if (op1 == \"+\") {\n              \
    \  result = result + operand1 + operand2\n            } else if (op1 == \"-\"\
    ) {\n                result = result - operand1 - operand2\n            } else\
    \ if (op1 == \"*\") {\n                result = result * operand1 * operand2\n\
    \            } else if (op1 == \"//\") {\n                result = result / operand1\
    \ / operand2\n            } else if (op1 == \"**\") {\n                result\
    \ = result ** operand1 ** operand2\n            }\n        }\n        return result",
  "        val opLen = op.length\n        val operandLen = operand.length\n      \
    \  val result = 0L\n        for (i <- 0 until operandLen - 1) {\n            val\
    \ operandVal = operand[i]\n            for (j <- 0 until opLen - 1) {\n      \
    \          val opVal = op[j]\n                if (opVal == \"+\") {\n        \
    \            result += operandVal\n                } else if (opVal == \"-\")\
    \ {\n                    result -= operandVal\n                } else if (opVal\
    \ == \"*\") {\n                    result *= operandVal\n                } else\
    \ if (opVal == \"/\") {\n                    result /= operandVal\n          \
    \      } else if (opVal == \"**\") {\n                    result = result ** operandVal\n\
    \                }\n            }\n        }\n        return result", "      \
    \  val opLen = op.length\n        val operandLen = operand.length\n        val\
    \ result = 0L\n        for (i <- 0 until operandLen - 1) {\n            for (j\
    \ <- 0 until opLen - 1) {\n                if (op[j] == \"+\") {\n           \
    \         result = result + operand[i]\n                } else if (op[j] == \"\
    -\") {\n                    result = result - operand[i]\n                } else\
    \ if (op[j] == \"*\") {\n                    result = result * operand[i]\n  \
    \              } else if (op[j] == \"//\") {\n                    result = result\
    \ / operand[i]\n                } else if (op[j] == \"**\") {\n              \
    \      result = result ** operand[i]\n                }\n            }\n     \
    \   }\n        return result", "        val opLen = op.length\n        val operandLen\
    \ = operand.length\n        val result = 0L\n        for (i <- 0 until operandLen\
    \ - 1) {\n            val operand1 = operand[i]\n            val operand2 = operand[i\
    \ + 1]\n            for (j <- 0 until opLen - 1) {\n                val operator\
    \ = op[j]\n                if (operator == \"+\") {\n                    result\
    \ += operand1\n                    result += operand2\n                } else\
    \ if (operator == \"-\") {\n                    result -= operand1\n         \
    \           result -= operand2\n                } else if (operator == \"*\")\
    \ {\n                    result *= operand1\n                    result *= operand2\n\
    \                } else if (operator == \"/\") {\n                    result /=\
    \ operand1\n                    result /= operand2\n                } else if\
    \ (operator == \"**\") {\n                    result = _.pow(operand1, operand2)\n\
    \                }\n            }\n        }\n        return result", "      \
    \  val result = 0L\n        for (i <- 0 until operand.length - 1) {\n        \
    \    result = result + operand[i] * op[i]\n        }\n        result", "     \
    \   def add(a : Long, b : Long) : Long = {\n            return a + b\n       \
    \ }\n        def sub(a : Long, b : Long) : Long = {\n            return a - b\n\
    \        }\n        def mul(a : Long, b : Long) : Long = {\n            return\
    \ a * b\n        }\n        def div(a : Long, b : Long) : Long = {\n         \
    \   return a / b\n        }\n        def exp(a : Long, b : Long) : Long = {\n\
    \            return a ** b\n        }\n        def op(a : Long, b : Long) : Long\
    \ = {\n            return a + b\n        }\n        def op2(a : Long, b : Long)\
    \ : Long = {\n            return a * b\n        }\n        def op3(a : Long, b\
    \ : Long) : Long = {\n            return a - b\n        }\n        def op4(a :\
    \ Long, b : Long) : Long = {\n            return a / b\n        }\n        def\
    \ op5(a : Long, b : Long) : Long = {\n            return a ** b\n        }\n \
    \       def op6(a : Long, b : Long) : Long = {\n            return a + b\n   \
    \     }\n        def op7(a : Long, b : Long) : Long = {\n            return a\
    \ * b\n        }\n        def op8(a : Long, b : Long) : Long = {\n           \
    \ return a - b\n        }\n        def op9(a : Long, b : Long) : Long = {\n  \
    \          return a / b\n        }\n        def op10(a : Long, b : Long) : Long\
    \ = {\n            return a ** b\n        }\n        def op11(a : Long, b : Long)\
    \ : Long = {\n            return a + b\n        }\n        def op12(a : Long,\
    \ b : Long) : Long = {\n            return a * b\n        }\n        def op13(a\
    \ : Long, b : Long) : Long = {\n            return a - b\n        }\n        def\
    \ op14(a : Long, b : Long) : Long = {\n            return a / b\n        }\n \
    \       def op15(", "        val result = 0L\n        for (i <- 0 until operand.length\
    \ - 1) {\n            val op1 = op[i]\n            val op2 = op[i + 1]\n     \
    \       val operand1 = operand[i]\n            val operand2 = operand[i + 1]\n\
    \            if (op1 == \"+\") {\n                result = result + operand1 +\
    \ operand2\n            } else if (op1 == \"-\") {\n                result = result\
    \ - operand1 - operand2\n            } else if (op1 == \"*\") {\n            \
    \    result = result * operand1 * operand2\n            } else if (op1 == \"//\"\
    ) {\n                result = result / operand1 / operand2\n            } else\
    \ if (op1 == \"**\") {\n                result = result ** operand1 ** operand2\n\
    \            }\n        }\n        return result", "        var result = 0L\n\
    \        for (i <- 0 until operand.length - 1) {\n            var operand1 = operand[i]\n\
    \            var operand2 = operand[i + 1]\n            var operator = op[i]\n\
    \            if (operator == \"*\") {\n                result = result * operand1\n\
    \            } else if (operator == \"/\") {\n                result = result\
    \ / operand1\n            } else if (operator == \"//\") {\n                result\
    \ = result // operand1\n            } else if (operator == \"+\") {\n        \
    \        result = result + operand1\n            } else if (operator == \"-\"\
    ) {\n                result = result - operand1\n            } else if (operator\
    \ == \"**\") {\n                result = result ** operand1\n            } else\
    \ {\n                result = result * operand1\n            }\n        }\n  \
    \      return result", "        def add(a : Long, b : Long) : Long = {\n     \
    \       return a + b\n        }\n        def sub(a : Long, b : Long) : Long =\
    \ {\n            return a - b\n        }\n        def mul(a : Long, b : Long)\
    \ : Long = {\n            return a * b\n        }\n        def div(a : Long, b\
    \ : Long) : Long = {\n            return a / b\n        }\n        def exp(a :\
    \ Long, b : Long) : Long = {\n            return a ** b\n        }\n        def\
    \ eval(op : String, operand : List[Long]) : Long = {\n            if (op == \"\
    +\") {\n                return operand.reduce(add)\n            } else if (op\
    \ == \"-\") {\n                return operand.reduce(sub)\n            } else\
    \ if (op == \"*\") {\n                return operand.reduce(mul)\n           \
    \ } else if (op == \"/\") {\n                return operand.reduce(div)\n    \
    \        } else if (op == \"**\") {\n                return operand.reduce(exp)\n\
    \            } else {\n                return 0\n            }\n        }\n  \
    \      return eval(op, operand)", "        val result = operand[0]\n        for\
    \ (i <- 1) {\n            val op_i = op[i]\n            if (op_i == \"+\") {\n\
    \                result = result + operand[i]\n            } else if (op_i ==\
    \ \"-\") {\n                result = result - operand[i]\n            } else if\
    \ (op_i == \"*\") {\n                result = result * operand[i]\n          \
    \  } else if (op_i == \"//\") {\n                result = result / operand[i]\n\
    \            } else if (op_i == \"**\") {\n                result = result **\
    \ operand[i]\n            }\n        }\n        return result", "        var result\
    \ = 0L\n        for (i <- 0 until operand.length - 1) {\n            var op1 =\
    \ op[i]\n            var op2 = op[i + 1]\n            var operand1 = operand[i]\n\
    \            var operand2 = operand[i + 1]\n            if (op1 == \"+\") {\n\
    \                result += operand1 + operand2\n            } else if (op1 ==\
    \ \"-\") {\n                result -= operand1 - operand2\n            } else\
    \ if (op1 == \"*\") {\n                result *= operand1 * operand2\n       \
    \     } else if (op1 == \"/\") {\n                result /= operand1 / operand2\n\
    \            } else if (op1 == \"**\") {\n                result **= operand1\
    \ ** operand2\n            }\n        }\n        return result", "        var\
    \ result = 0L\n        for (i <- 0 until operand.length - 1) {\n            var\
    \ operand1 = operand[i]\n            var operand2 = operand[i + 1]\n         \
    \   var operator = op[i]\n            if (operator == \"+\") {\n             \
    \   result += operand1 + operand2\n            } else if (operator == \"-\") {\n\
    \                result -= operand1 - operand2\n            } else if (operator\
    \ == \"*\") {\n                result *= operand1 * operand2\n            } else\
    \ if (operator == \"//\") {\n                result /= operand1 / operand2\n \
    \           } else if (operator == \"**\") {\n                result **= operand1\
    \ ** operand2\n            }\n        }\n        return result", "        var\
    \ result = 0L\n        for (i <- 0 until operand.length - 1) {\n            var\
    \ operand1 = operand[i]\n            var operand2 = operand[i + 1]\n         \
    \   var operator = op[i]\n            if (operator == \"+\") {\n             \
    \   result = result + operand1 + operand2\n            } else if (operator ==\
    \ \"-\") {\n                result = result - operand1 - operand2\n          \
    \  } else if (operator == \"*\") {\n                result = result * operand1\
    \ * operand2\n            } else if (operator == \"//\") {\n                result\
    \ = result / operand1 / operand2\n            } else if (operator == \"**\") {\n\
    \                result = result ** operand1 ** operand2\n            }\n    \
    \    }\n        return result", "        var result = 0L\n        for (i <- 0\
    \ until operand.length - 1) {\n            var op1 = op[i]\n            var op2\
    \ = op[i + 1]\n            var operand1 = operand[i]\n            var operand2\
    \ = operand[i + 1]\n            if (op1 == \"+\") {\n                result +=\
    \ operand1 + operand2\n            } else if (op1 == \"-\") {\n              \
    \  result -= operand1 - operand2\n            } else if (op1 == \"*\") {\n   \
    \             result *= operand1 * operand2\n            } else if (op1 == \"\
    //\") {\n                result /= operand1 // operand2\n            } else if\
    \ (op1 == \"**\") {\n                result **= operand1 ** operand2\n       \
    \     }\n        }\n        return result", "        var result = 0L\n       \
    \ for (i <- 0 until operand.length - 1) {\n            var operand1 = operand[i]\n\
    \            var operand2 = operand[i + 1]\n            var operator = op[i]\n\
    \            if (operator == \"+\") {\n                result = result + operand1\
    \ + operand2\n            } else if (operator == \"-\") {\n                result\
    \ = result - operand1 - operand2\n            } else if (operator == \"*\") {\n\
    \                result = result * operand1 * operand2\n            } else if\
    \ (operator == \"//\") {\n                result = result / operand1 / operand2\n\
    \            } else if (operator == \"**\") {\n                result = result\
    \ ** operand1 ** operand2\n            }\n        }\n        return result", " \
    \       val opLen = op.length\n        val operandLen = operand.length\n     \
    \   if (opLen < 2 || operandLen < 2) {\n            throw new IllegalArgumentException(\"\
    Invalid input\")\n        }\n        val result = 0L\n        for (i <- 0 until\
    \ operandLen - 1) {\n            val operandVal = operand[i]\n            for\
    \ (j <- i + 1 until operandLen) {\n                val operator = op[j]\n    \
    \            val operand2 = operand[j]\n                if (operator == \"+\"\
    ) {\n                    result += operandVal + operand2\n                } else\
    \ if (operator == \"-\") {\n                    result -= operandVal - operand2\n\
    \                } else if (operator == \"*\") {\n                    result *=\
    \ operandVal * operand2\n                } else if (operator == \"//\") {\n  \
    \                  result /= operandVal // operand2\n                } else if\
    \ (operator == \"**\") {\n                    result **= operandVal ** operand2\n\
    \                } else {\n                    throw new IllegalArgumentException(\"\
    Invalid input\")\n                }\n            }\n        }\n        return\
    \ result", "        var result = 0L\n        for (i <- 0 until operand.length\
    \ - 1) {\n            var operand1 = operand[i]\n            var operand2 = operand[i\
    \ + 1]\n            var operator = op[i]\n            if (operator == \"+\") {\n\
    \                result += operand1 + operand2\n            } else if (operator\
    \ == \"-\") {\n                result -= operand1 - operand2\n            } else\
    \ if (operator == \"*\") {\n                result *= operand1 * operand2\n  \
    \          } else if (operator == \"//\") {\n                result /= operand1\
    \ // operand2\n            } else if (operator == \"**\") {\n                result\
    \ **= operand1 ** operand2\n            }\n        }\n        return result",
  "        val opLen = op.length\n        val opArr = new Array[Long](opLen)\n   \
    \     for (i <- 0 until opLen) {\n            opArr[i] = op[i]\n        }\n  \
    \      val operandArr = new Array[Long](operand.length)\n        for (i <- 0 until\
    \ operand.length) {\n            operandArr[i] = operand[i]\n        }\n     \
    \   val result = 0L\n        for (i <- 0 until operandArr.length - 1) {\n    \
    \        for (j <- i + 1 until operandArr.length) {\n                val op1 =\
    \ opArr[i]\n                val op2 = opArr[j]\n                val operand1 =\
    \ operandArr[i]\n                val operand2 = operandArr[j]\n              \
    \  if (op1 == \"*\") {\n                    result = result * operand1 * operand2\n\
    \                } else if (op1 == \"/\") {\n                    result = result\
    \ / operand1 / operand2\n                } else if (op1 == \"+\") {\n        \
    \            result = result + operand1 + operand2\n                } else if\
    \ (op1 == \"-\") {\n                    result = result - operand1 - operand2\n\
    \                } else if (op1 == \"**\") {\n                    result = result\
    \ ** operand1 ** operand2\n                }\n            }\n        }\n     \
    \   return result", "        var result = 0L\n        for (i <- 0 until operand.length\
    \ - 1) {\n            var operand1 = operand[i]\n            var operand2 = operand[i\
    \ + 1]\n            var operator = op[i]\n            if (operator == \"+\") {\n\
    \                result = result + operand1 + operand2\n            } else if\
    \ (operator == \"-\") {\n                result = result - operand1 - operand2\n\
    \            } else if (operator == \"*\") {\n                result = result\
    \ * operand1 * operand2\n            } else if (operator == \"//\") {\n      \
    \          result = result / operand1 / operand2\n            } else if (operator\
    \ == \"**\") {\n                result = result ** operand1 ** operand2\n    \
    \        }\n        }\n        return result", "        val opLen = op.length\n\
    \        val operandLen = operand.length\n        val result = 0L\n        for\
    \ (i <- 0 until operandLen - 1) {\n            val operandVal = operand[i]\n \
    \           for (j <- 0 until opLen - 1) {\n                val opVal = op[j]\n\
    \                if (opVal == \"+\") {\n                    result = result +\
    \ operandVal\n                } else if (opVal == \"-\") {\n                 \
    \   result = result - operandVal\n                } else if (opVal == \"*\") {\n\
    \                    result = result * operandVal\n                } else if (opVal\
    \ == \"/\") {\n                    result = result / operandVal\n            \
    \    } else if (opVal == \"**\") {\n                    result = result ** operandVal\n\
    \                }\n            }\n        }\n        return result", "      \
    \  var result = 0L\n        for (i <- 0 until operand.length - 1) {\n        \
    \    var operand1 = operand[i]\n            var operand2 = operand[i + 1]\n  \
    \          var operator = op[i]\n            if (operator == \"+\") {\n      \
    \          result = result + operand1 + operand2\n            } else if (operator\
    \ == \"-\") {\n                result = result - operand1 - operand2\n       \
    \     } else if (operator == \"*\") {\n                result = result * operand1\
    \ * operand2\n            } else if (operator == \"//\") {\n                result\
    \ = result / operand1 / operand2\n            } else if (operator == \"**\") {\n\
    \                result = result ** operand1 ** operand2\n            }\n    \
    \    }\n        return result", "        val opLen = op.length\n        val operandLen\
    \ = operand.length\n        val result = 0L\n        for (i <- 0 until operandLen\
    \ - 1) {\n            val operandVal = operand[i]\n            for (j <- 0 until\
    \ opLen - 1) {\n                val opVal = op[j]\n                if (opVal ==\
    \ \"+\") {\n                    result = result + operandVal\n               \
    \ } else if (opVal == \"-\") {\n                    result = result - operandVal\n\
    \                } else if (opVal == \"*\") {\n                    result = result\
    \ * operandVal\n                } else if (opVal == \"//\") {\n              \
    \      result = result / operandVal\n                } else if (opVal == \"**\"\
    ) {\n                    result = result ** operandVal\n                }\n  \
    \          }\n        }\n        return result", "        var result = 0L\n  \
    \      for (i <- 0 until operand.length - 1) {\n            var op1 = op[i]\n\
    \            var op2 = op[i + 1]\n            var operand1 = operand[i]\n    \
    \        var operand2 = operand[i + 1]\n            if (op1 == \"+\") {\n    \
    \            result += operand1 + operand2\n            } else if (op1 == \"-\"\
    ) {\n                result -= operand1 - operand2\n            } else if (op1\
    \ == \"*\") {\n                result *= operand1 * operand2\n            } else\
    \ if (op1 == \"//\") {\n                result /= operand1 // operand2\n     \
    \       } else if (op1 == \"**\") {\n                result **= operand1 ** operand2\n\
    \            }\n        }\n        return result", "        val opLen = op.length\n\
    \        val operandLen = operand.length\n        val result = 0L\n        for\
    \ (i <- 0 until operandLen - 1) {\n            val operandVal = operand[i]\n \
    \           for (j <- 0 until opLen - 1) {\n                val opVal = op[j]\n\
    \                if (opVal == \"+\") {\n                    result += operandVal\n\
    \                } else if (opVal == \"-\") {\n                    result -= operandVal\n\
    \                } else if (opVal == \"*\") {\n                    result *= operandVal\n\
    \                } else if (opVal == \"//\") {\n                    result /=\
    \ operandVal\n                } else if (opVal == \"**\") {\n                \
    \    result **= operandVal\n                }\n            }\n        }\n    \
    \    return result", "        val opList = op.toList\n        val operandList\
    \ = operand.toList\n        val result = 0L\n        for (i <- 0 until operandList.size\
    \ - 1) {\n            val op = opList.get(i)\n            val operand1 = operandList.get(i)\n\
    \            val operand2 = operandList.get(i + 1)\n            if (op == \"+\"\
    ) {\n                result = result + operand1 + operand2\n            } else\
    \ if (op == \"-\") {\n                result = result - operand1 - operand2\n\
    \            } else if (op == \"*\") {\n                result = result * operand1\
    \ * operand2\n            } else if (op == \"//\") {\n                result =\
    \ result / operand1 / operand2\n            } else if (op == \"**\") {\n     \
    \           result = result ** operand1 ** operand2\n            }\n        }\n\
    \        return result", "        var result = 0L\n        for (i <- 0 until operand.length\
    \ - 1) {\n            var operand1 = operand[i]\n            var operand2 = operand[i\
    \ + 1]\n            var operator = op[i]\n            if (operator == \"+\") {\n\
    \                result = result + operand1 + operand2\n            } else if\
    \ (operator == \"-\") {\n                result = result - operand1 - operand2\n\
    \            } else if (operator == \"*\") {\n                result = result\
    \ * operand1 * operand2\n            } else if (operator == \"//\") {\n      \
    \          result = result / operand1 / operand2\n            } else if (operator\
    \ == \"**\") {\n                result = result ** operand1 ** operand2\n    \
    \        }\n        }\n        return result", "        val opLen = op.length\n\
    \        val operandLen = operand.length\n        val result = 0L\n        for\
    \ (i <- 0 until operandLen - 1) {\n            val operand1 = operand[i]\n   \
    \         val operand2 = operand[i + 1]\n            if (opLen == 1) {\n     \
    \           result = result + operand1\n            } else if (opLen == 2) {\n\
    \                result = result + operand1 * operand2\n            } else if\
    \ (opLen == 3) {\n                result = result + operand1 * operand2 * operand[i\
    \ + 2]\n            } else if (opLen == 4) {\n                result = result\
    \ + operand1 * operand2 * operand[i + 2] * operand[i + 3]\n            } else\
    \ {\n                throw new RuntimeException(\"Invalid operator list length\"\
    )\n            }\n        }\n        return result", "        val opLen = op.length\n\
    \        val operandLen = operand.length\n        val result = 0L\n        for\
    \ (i <- 0 until operandLen - 1) {\n            val operand1 = operand[i]\n   \
    \         for (j <- i + 1 until operandLen) {\n                val operand2 =\
    \ operand[j]\n                if (op[i] == \"+\") {\n                    result\
    \ += operand1 + operand2\n                } else if (op[i] == \"-\") {\n     \
    \               result -= operand1 - operand2\n                } else if (op[i]\
    \ == \"*\") {\n                    result *= operand1 * operand2\n           \
    \     } else if (op[i] == \"//\") {\n                    result /= operand1 /\
    \ operand2\n                } else if (op[i] == \"**\") {\n                  \
    \  result = operand1 ** operand2\n                }\n            }\n        }\n\
    \        return result", "        val opLen = op.length\n        val opList =\
    \ op.toList\n        val operandList = operand.toList\n        val result = 0L\n\
    \        for (i <- 0 until (opLen - 1)) {\n            val op1 = opList.apply(i)\n\
    \            val op2 = opList.apply(i + 1)\n            val operand1 = operandList.apply(i)\n\
    \            val operand2 = operandList.apply(i + 1)\n            if (op1 == \"\
    +\") {\n                result += operand1 + operand2\n            } else if (op1\
    \ == \"-\") {\n                result -= operand1 - operand2\n            } else\
    \ if (op1 == \"*\") {\n                result *= operand1 * operand2\n       \
    \     } else if (op1 == \"//\") {\n                result /= operand1 // operand2\n\
    \            } else if (op1 == \"**\") {\n                result **= operand1\
    \ ** operand2\n            }\n        }\n        return result", "        val\
    \ opLen = op.length\n        val operandLen = operand.length\n        val result\
    \ = 0L\n        for (i <- 0 until operandLen - 1) {\n            val operandVal\
    \ = operand[i]\n            for (j <- 0 until opLen - 1) {\n                val\
    \ opVal = op[j]\n                if (opVal == \"+\") {\n                    result\
    \ = result + operandVal\n                } else if (opVal == \"-\") {\n      \
    \              result = result - operandVal\n                } else if (opVal\
    \ == \"*\") {\n                    result = result * operandVal\n            \
    \    } else if (opVal == \"//\") {\n                    result = result / operandVal\n\
    \                } else if (opVal == \"**\") {\n                    result = result\
    \ ** operandVal\n                }\n            }\n        }\n        return result",
  "        val opList = op.toList\n        val operandList = operand.toList\n    \
    \    val result = 0L\n        for (i <- 0 until operandList.size - 1) {\n    \
    \        val operand1 = operandList.get(i)\n            val operand2 = operandList.get(i\
    \ + 1)\n            val operator = opList.get(i)\n            if (operator ==\
    \ \"+\") {\n                result = result + operand1 + operand2\n          \
    \  } else if (operator == \"-\") {\n                result = result - operand1\
    \ - operand2\n            } else if (operator == \"*\") {\n                result\
    \ = result * operand1 * operand2\n            } else if (operator == \"//\") {\n\
    \                result = result / operand1 / operand2\n            } else if\
    \ (operator == \"**\") {\n                result = result ** operand1 ** operand2\n\
    \            }\n        }\n        return result", "        var result = 0L\n\
    \        for (i <- 0 until operand.length - 1) {\n            var operand1 = operand[i]\n\
    \            var operand2 = operand[i + 1]\n            var operator = op[i]\n\
    \            if (operator == \"+\") {\n                result += operand1 + operand2\n\
    \            } else if (operator == \"-\") {\n                result -= operand1\
    \ - operand2\n            } else if (operator == \"*\") {\n                result\
    \ *= operand1 * operand2\n            } else if (operator == \"//\") {\n     \
    \           result /= operand1 // operand2\n            } else if (operator ==\
    \ \"**\") {\n                result **= operand1 ** operand2\n            }\n\
    \        }\n        return result", "        val opList = op.toList\n        val\
    \ operandList = operand.toList\n        val result = 0L\n        for (i <- 0 until\
    \ operandList.size - 1) {\n            val operand1 = operandList.get(i)\n   \
    \         val operand2 = operandList.get(i + 1)\n            val operator = opList.get(i)\n\
    \            if (operator == \"+\") {\n                result = result + operand1\n\
    \            } else if (operator == \"-\") {\n                result = result\
    \ - operand1\n            } else if (operator == \"*\") {\n                result\
    \ = result * operand1\n            } else if (operator == \"//\") {\n        \
    \        result = result / operand1\n            } else if (operator == \"**\"\
    ) {\n                result = result ** operand1\n            }\n        }\n \
    \       return result", "        var result = 0L\n        for (i <- 0 until operand.length\
    \ - 1) {\n            var op1 = op[i]\n            var op2 = op[i + 1]\n     \
    \       var operand1 = operand[i]\n            var operand2 = operand[i + 1]\n\
    \            if (op1 == \"+\") {\n                result = result + operand1 +\
    \ operand2\n            } else if (op1 == \"-\") {\n                result = result\
    \ - operand1 - operand2\n            } else if (op1 == \"*\") {\n            \
    \    result = result * operand1 * operand2\n            } else if (op1 == \"//\"\
    ) {\n                result = result / operand1 / operand2\n            } else\
    \ if (op1 == \"**\") {\n                result = result ** operand1 ** operand2\n\
    \            }\n        }\n        return result", "        var result = 0L\n\
    \        for (i <- 0 until operand.length - 1) {\n            var operand1 = operand[i]\n\
    \            for (j <- i + 1 until operand.length) {\n                var operand2\
    \ = operand[j]\n                var operator = op[i]\n                if (operator\
    \ == \"+\") {\n                    result += operand1 + operand2\n           \
    \     } else if (operator == \"-\") {\n                    result -= operand1\
    \ - operand2\n                } else if (operator == \"*\") {\n              \
    \      result *= operand1 * operand2\n                } else if (operator == \"\
    //\") {\n                    result /= operand1 // operand2\n                }\
    \ else if (operator == \"**\") {\n                    result **= operand1 ** operand2\n\
    \                }\n            }\n        }\n        return result", "      \
    \  var result = 0L\n        for (i <- 0 until operand.length - 1) {\n        \
    \    var op1 = op[i]\n            var op2 = op[i + 1]\n            var operand1\
    \ = operand[i]\n            var operand2 = operand[i + 1]\n            if (op1\
    \ == \"+\") {\n                result = result + operand1 + operand2\n       \
    \     } else if (op1 == \"-\") {\n                result = result - operand1 -\
    \ operand2\n            } else if (op1 == \"*\") {\n                result = result\
    \ * operand1 * operand2\n            } else if (op1 == \"//\") {\n           \
    \     result = result / operand1 / operand2\n            } else if (op1 == \"\
    **\") {\n                result = result ** operand1 ** operand2\n           \
    \ }\n        }\n        return result", "        val result = 0L\n        for\
    \ (i <- 0 until operand.length - 1) {\n            if (op.contains(\"+\")) {\n\
    \                result = result + operand[i]\n            } else if (op.contains(\"\
    -\")) {\n                result = result - operand[i]\n            } else if (op.contains(\"\
    *\")) {\n                result = result * operand[i]\n            } else if (op.contains(\"\
    /\")) {\n                result = result / operand[i]\n            } else if (op.contains(\"\
    **\")) {\n                result = result ** operand[i]\n            }\n     \
    \   }\n        return result", "        val opLen = op.length\n        val operandLen\
    \ = operand.length\n        val result = 0L\n        for (i <- 0 until operandLen\
    \ - 1) {\n            val operandVal = operand[i]\n            for (j <- 0 until\
    \ opLen - 1) {\n                val opVal = op[j]\n                if (opVal ==\
    \ \"+\") {\n                    result += operandVal\n                } else if\
    \ (opVal == \"-\") {\n                    result -= operandVal\n             \
    \   } else if (opVal == \"*\") {\n                    result *= operandVal\n \
    \               } else if (opVal == \"/\") {\n                    result /= operandVal\n\
    \                } else if (opVal == \"**\") {\n                    result **=\
    \ operandVal\n                }\n            }\n        }\n        return result",
  "        val opLen = op.length\n        val operandLen = operand.length\n      \
    \  val result = 0L\n        for (i <- 0 until operandLen - 1) {\n            val\
    \ opVal = op[i]\n            val operandVal = operand[i]\n            if (opVal\
    \ == \"+\") {\n                result += operandVal\n            } else if (opVal\
    \ == \"-\") {\n                result -= operandVal\n            } else if (opVal\
    \ == \"*\") {\n                result *= operandVal\n            } else if (opVal\
    \ == \"/\") {\n                result /= operandVal\n            } else if (opVal\
    \ == \"**\") {\n                result **= operandVal\n            }\n       \
    \ }\n        return result", "        var result = 0L\n        for (i <- 0 until\
    \ operand.length - 1) {\n            var op1 = op[i]\n            var op2 = op[i\
    \ + 1]\n            var operand1 = operand[i]\n            var operand2 = operand[i\
    \ + 1]\n            if (op1 == \"+\") {\n                result = result + operand1\
    \ + operand2\n            } else if (op1 == \"-\") {\n                result =\
    \ result - operand1 - operand2\n            } else if (op1 == \"*\") {\n     \
    \           result = result * operand1 * operand2\n            } else if (op1\
    \ == \"//\") {\n                result = result / operand1 / operand2\n      \
    \      } else if (op1 == \"**\") {\n                result = result ** operand1\
    \ ** operand2\n            }\n        }\n        return result", "        val\
    \ opLen = op.length\n        val operandLen = operand.length\n        val result\
    \ = 0L\n        for (i <- 0 until operandLen - 1) {\n            val operandVal\
    \ = operand[i]\n            for (j <- 0 until opLen - 1) {\n                val\
    \ opVal = op[j]\n                if (opVal == \"+\") {\n                    result\
    \ += operandVal\n                } else if (opVal == \"-\") {\n              \
    \      result -= operandVal\n                } else if (opVal == \"*\") {\n  \
    \                  result *= operandVal\n                } else if (opVal == \"\
    //\") {\n                    result /= operandVal\n                } else if (opVal\
    \ == \"**\") {\n                    result = result ** operandVal\n          \
    \      }\n            }\n        }\n        return result", "        def add(a\
    \ : Long, b : Long) : Long = {\n            return a + b\n        }\n        def\
    \ sub(a : Long, b : Long) : Long = {\n            return a - b\n        }\n  \
    \      def mul(a : Long, b : Long) : Long = {\n            return a * b\n    \
    \    }\n        def div(a : Long, b : Long) : Long = {\n            return a /\
    \ b\n        }\n        def exp(a : Long, b : Long) : Long = {\n            return\
    \ a ** b\n        }\n        def floorDiv(a : Long, b : Long) : Long = {\n   \
    \         return a // b\n        }\n        def mod(a : Long, b : Long) : Long\
    \ = {\n            return a % b\n        }\n        def pow(a : Long, b : Long)\
    \ : Long = {\n            return a ** b\n        }\n        def sum(a : Long,\
    \ b : Long) : Long = {\n            return a + b\n        }\n        def prod(a\
    \ : Long, b : Long) : Long = {\n            return a * b\n        }\n        def\
    \ max(a : Long, b : Long) : Long = {\n            return Math.max(a, b)\n    \
    \    }\n        def min(a : Long, b : Long) : Long = {\n            return Math.min(a,\
    \ b)\n        }\n        def gcd(a : Long, b : Long) : Long = {\n            return\
    \ gcd(b, a % b)\n        }\n        def lcm(a : Long, b : Long) : Long = {\n \
    \           return a * b / gcd(a, b)\n        }\n        def factorial(n : Long)\
    \ : Long = {\n            if (n < 2) {\n                return 1\n           \
    \ } else {\n                return n * factorial(n - 1)\n            }\n     \
    \   }\n        def factorial2(n : Long) : Long = {\n            if (n < 2) {\n\
    \                return 1\n            } else {\n                return n * factorial2(n\
    \ - 1)\n            }\n        }\n        def factorial3(n : Long) : Long = {\n\
    \            if (n", "        var result = 0L\n        for (i <- 0 until operand.length\
    \ - 1) {\n            var op1 = op[i]\n            var op2 = op[i + 1]\n     \
    \       var operand1 = operand[i]\n            var operand2 = operand[i + 1]\n\
    \            if (op1 == \"+\") {\n                result += operand1 + operand2\n\
    \            } else if (op1 == \"-\") {\n                result -= operand1 -\
    \ operand2\n            } else if (op1 == \"*\") {\n                result *=\
    \ operand1 * operand2\n            } else if (op1 == \"//\") {\n             \
    \   result /= operand1 // operand2\n            } else if (op1 == \"**\") {\n\
    \                result **= operand1 ** operand2\n            }\n        }\n \
    \       return result", "        val opLen = op.length\n        val operandLen\
    \ = operand.length\n        val result = 0L\n        for (i <- 0 until operandLen\
    \ - 1) {\n            val operandVal = operand[i]\n            for (j <- 0 until\
    \ opLen - 1) {\n                val opVal = op[j]\n                if (opVal ==\
    \ \"+\") {\n                    result += operandVal\n                } else if\
    \ (opVal == \"-\") {\n                    result -= operandVal\n             \
    \   } else if (opVal == \"*\") {\n                    result *= operandVal\n \
    \               } else if (opVal == \"//\") {\n                    result /= operandVal\n\
    \                } else if (opVal == \"**\") {\n                    result = _.pow(result,\
    \ operandVal)\n                }\n            }\n        }\n        return result",
  "        val opLen = op.length\n        val operandLen = operand.length\n      \
    \  val result = 0L\n        for (i <- 0 until operandLen - 1) {\n            for\
    \ (j <- 0 until opLen - 1) {\n                if (op[j] == \"+\") {\n        \
    \            result = result + operand[i]\n                } else if (op[j] ==\
    \ \"-\") {\n                    result = result - operand[i]\n               \
    \ } else if (op[j] == \"*\") {\n                    result = result * operand[i]\n\
    \                } else if (op[j] == \"//\") {\n                    result = result\
    \ / operand[i]\n                } else if (op[j] == \"**\") {\n              \
    \      result = result ** operand[i]\n                }\n            }\n     \
    \   }\n        return result", "        val opLen = op.length\n        val opArr\
    \ = op.toArray(new String[opLen])\n        val operandArr = operand.toArray(new\
    \ Long[operand.size()])\n        val result = 0L\n        for (i <- 0 until operandArr.length\
    \ - 1) {\n            val operand1 = operandArr[i]\n            val operand2 =\
    \ operandArr[i + 1]\n            val opIndex = i\n            val opIndex2 = i\
    \ + 1\n            val opIndex3 = i + 2\n            val opIndex4 = i + 3\n  \
    \          val opIndex5 = i + 4\n            val opIndex6 = i + 5\n          \
    \  val opIndex7 = i + 6\n            val opIndex8 = i + 7\n            val opIndex9\
    \ = i + 8\n            val opIndex10 = i + 9\n            val opIndex11 = i +\
    \ 10\n            val opIndex12 = i + 11\n            val opIndex13 = i + 12\n\
    \            val opIndex14 = i + 13\n            val opIndex15 = i + 14\n    \
    \        val opIndex16 = i + 15\n            val opIndex17 = i + 16\n        \
    \    val opIndex18 = i + 17\n            val opIndex19 = i + 18\n            val\
    \ opIndex20 = i + 19\n            val opIndex21 = i + 20\n            val opIndex22\
    \ = i + 21\n            val opIndex23 = i + 22\n            val opIndex24 = i\
    \ + 23\n            val opIndex25 = i + 24\n            val opIndex26 = i + 25\n\
    \            val opIndex27 = i + 26\n            val opIndex28 = i + 27\n    \
    \        val opIndex29 = i + 28\n            val opIndex30 = i + 29\n        \
    \    val opIndex31 = i + 30\n            val opIndex32 = i + 31\n            val\
    \ opIndex33 = i + 32\n            val opIndex34 = i + 33\n            val opIndex35\
    \ = i + 34\n            val opIndex36 = i + 35\n            val opIndex37 = i\
    \ + 36\n            val opIndex38 = i + 37\n            val opIndex39 = i + 38\n\
    \            val opIndex40 = i + 39\n            val opIndex41 = i + 40\n", " \
    \       var result = 0L\n        for (i <- 0 until operand.length - 1) {\n   \
    \         var op1 = op[i]\n            var op2 = op[i + 1]\n            var operand1\
    \ = operand[i]\n            var operand2 = operand[i + 1]\n            if (op1\
    \ == \"+\") {\n                result += operand1 + operand2\n            } else\
    \ if (op1 == \"-\") {\n                result -= operand1 - operand2\n       \
    \     } else if (op1 == \"*\") {\n                result *= operand1 * operand2\n\
    \            } else if (op1 == \"//\") {\n                result /= operand1 //\
    \ operand2\n            } else if (op1 == \"**\") {\n                result **=\
    \ operand1 ** operand2\n            }\n        }\n        return result", "  \
    \      val opLen = op.length\n        val operandLen = operand.length\n      \
    \  val result = 0L\n        for (i <- 0 until operandLen - 1) {\n            val\
    \ operandVal = operand[i]\n            for (j <- 0 until opLen - 1) {\n      \
    \          val operator = op[j]\n                if (operator == \"+\") {\n  \
    \                  result += operandVal\n                } else if (operator ==\
    \ \"-\") {\n                    result -= operandVal\n                } else if\
    \ (operator == \"*\") {\n                    result *= operandVal\n          \
    \      } else if (operator == \"//\") {\n                    result /= operandVal\n\
    \                } else if (operator == \"**\") {\n                    result\
    \ **= operandVal\n                }\n            }\n        }\n        return\
    \ result", "        val result = 0L\n        for (i <- 0 until operand.length\
    \ - 1) {\n            result = result + operand[i] * op.length - 1\n         \
    \   op.foreach(x <- 0 until op.length - 1) {\n                result = result\
    \ + operand[i] * op[x]\n            }\n        }\n        result", "        var\
    \ result = 0L\n        for (i <- 0 until operand.length - 1) {\n            var\
    \ op1 = op[i]\n            var op2 = op[i + 1]\n            var operand1 = operand[i]\n\
    \            var operand2 = operand[i + 1]\n            if (op1 == \"+\") {\n\
    \                result += operand1 + operand2\n            } else if (op1 ==\
    \ \"-\") {\n                result -= operand1 - operand2\n            } else\
    \ if (op1 == \"*\") {\n                result *= operand1 * operand2\n       \
    \     } else if (op1 == \"//\") {\n                result /= operand1 // operand2\n\
    \            } else if (op1 == \"**\") {\n                result **= operand1\
    \ ** operand2\n            }\n        }\n        return result", "        val\
    \ opList = op.toList\n        val operandList = operand.toList\n        val result\
    \ = 0L\n        for (i <- 0 until operandList.size - 1) {\n            val op1\
    \ = opList.get(i)\n            val op2 = opList.get(i + 1)\n            val operand1\
    \ = operandList.get(i)\n            val operand2 = operandList.get(i + 1)\n  \
    \          if (op1 == \"+\") {\n                result += operand1 + operand2\n\
    \            } else if (op1 == \"-\") {\n                result -= operand1 -\
    \ operand2\n            } else if (op1 == \"*\") {\n                result *=\
    \ operand1 * operand2\n            } else if (op1 == \"//\") {\n             \
    \   result /= operand1 // operand2\n            } else if (op1 == \"**\") {\n\
    \                result **= operand1 ** operand2\n            }\n        }\n \
    \       return result", "        var result = 0L\n        for (i <- 0 until operand.length\
    \ - 1) {\n            var operand1 = operand[i]\n            var operand2 = operand[i\
    \ + 1]\n            var operator = op[i]\n            if (operator == \"+\") {\n\
    \                result = result + operand1 + operand2\n            } else if\
    \ (operator == \"-\") {\n                result = result - operand1 - operand2\n\
    \            } else if (operator == \"*\") {\n                result = result\
    \ * operand1 * operand2\n            } else if (operator == \"//\") {\n      \
    \          result = result / operand1 / operand2\n            } else if (operator\
    \ == \"**\") {\n                result = result ** operand1 ** operand2\n    \
    \        }\n        }\n        return result", "        var result = 0L\n    \
    \    for (i <- 0 until operand.length - 1) {\n            var op1 = op[i]\n  \
    \          var op2 = op[i + 1]\n            var operand1 = operand[i]\n      \
    \      var operand2 = operand[i + 1]\n            if (op1 == \"+\") {\n      \
    \          result += operand1 + operand2\n            } else if (op1 == \"-\"\
    ) {\n                result -= operand1 - operand2\n            } else if (op1\
    \ == \"*\") {\n                result *= operand1 * operand2\n            } else\
    \ if (op1 == \"//\") {\n                result /= operand1 // operand2\n     \
    \       } else if (op1 == \"**\") {\n                result **= operand1 ** operand2\n\
    \            }\n        }\n        return result", "        var result = 0L\n\
    \        for (i <- 0 until operand.length - 1) {\n            var operand1 = operand[i]\n\
    \            var operand2 = operand[i + 1]\n            var operator = op[i]\n\
    \            if (operator == \"+\") {\n                result = result + operand1\
    \ + operand2\n            } else if (operator == \"-\") {\n                result\
    \ = result - operand1 - operand2\n            } else if (operator == \"*\") {\n\
    \                result = result * operand1 * operand2\n            } else if\
    \ (operator == \"//\") {\n                result = result / operand1 / operand2\n\
    \            } else if (operator == \"**\") {\n                result = result\
    \ ** operand1 ** operand2\n            }\n        }\n        return result", " \
    \       var result = 0L\n        for (i <- 0 until operand.length - 1) {\n   \
    \         var op1 = op[i]\n            var op2 = op[i + 1]\n            var operand1\
    \ = operand[i]\n            var operand2 = operand[i + 1]\n            if (op1\
    \ == \"+\") {\n                result = result + operand1 + operand2\n       \
    \     } else if (op1 == \"-\") {\n                result = result - operand1 -\
    \ operand2\n            } else if (op1 == \"*\") {\n                result = result\
    \ * operand1 * operand2\n            } else if (op1 == \"//\") {\n           \
    \     result = result / operand1 / operand2\n            } else if (op1 == \"\
    **\") {\n                result = result ** operand1 ** operand2\n           \
    \ }\n        }\n        return result", "        val opLen = op.length\n     \
    \   val operandLen = operand.length\n        val result = 0L\n        for (i <-\
    \ 0 until operandLen - 1) {\n            val operand1 = operand[i]\n         \
    \   for (j <- i + 1 until operandLen) {\n                val operand2 = operand[j]\n\
    \                val operator = op[i]\n                val op2 = op[j]\n     \
    \           if (operator == \"+\") {\n                    result += operand1 +\
    \ operand2\n                } else if (operator == \"-\") {\n                \
    \    result -= operand1 - operand2\n                } else if (operator == \"\
    *\") {\n                    result *= operand1 * operand2\n                } else\
    \ if (operator == \"/\") {\n                    result /= operand1 / operand2\n\
    \                } else if (operator == \"**\") {\n                    result\
    \ **= operand1 ** operand2\n                }\n            }\n        }\n    \
    \    return result", "        val opList = op.toList\n        val operandList\
    \ = operand.toList\n        val result = 0L\n        for (i <- 0 until operandList.size\
    \ - 1) {\n            val operand1 = operandList.get(i)\n            val operand2\
    \ = operandList.get(i + 1)\n            val operator = opList.get(i)\n       \
    \     if (operator == \"+\") {\n                result += operand1 + operand2\n\
    \            } else if (operator == \"-\") {\n                result -= operand1\
    \ - operand2\n            } else if (operator == \"*\") {\n                result\
    \ *= operand1 * operand2\n            } else if (operator == \"//\") {\n     \
    \           result /= operand1 // operand2\n            } else if (operator ==\
    \ \"**\") {\n                result **= operand1 ** operand2\n            }\n\
    \        }\n        return result", "        var result = 0L\n        for (i <-\
    \ 0 until operand.length - 1) {\n            var operand1 = operand[i]\n     \
    \       var operand2 = operand[i + 1]\n            var operator = op[i]\n    \
    \        if (operator == \"+\") {\n                result = result + operand1\
    \ + operand2\n            } else if (operator == \"-\") {\n                result\
    \ = result - operand1 - operand2\n            } else if (operator == \"*\") {\n\
    \                result = result * operand1 * operand2\n            } else if\
    \ (operator == \"//\") {\n                result = result / operand1 / operand2\n\
    \            } else if (operator == \"**\") {\n                result = result\
    \ ** operand1 ** operand2\n            }\n        }\n        return result", " \
    \       var result = 0L\n        for (i <- 0 until operand.length - 1) {\n   \
    \         var op1 = op[i]\n            var op2 = op[i + 1]\n            var operand1\
    \ = operand[i]\n            var operand2 = operand[i + 1]\n            if (op1\
    \ == \"+\") {\n                result += operand1 + operand2\n            } else\
    \ if (op1 == \"-\") {\n                result -= operand1 - operand2\n       \
    \     } else if (op1 == \"*\") {\n                result *= operand1 * operand2\n\
    \            } else if (op1 == \"//\") {\n                result /= operand1 //\
    \ operand2\n            } else if (op1 == \"**\") {\n                result **=\
    \ operand1 ** operand2\n            }\n        }\n        return result", "  \
    \      var result = 0L\n        for (i <- 0 until operand.length - 1) {\n    \
    \        var op1 = op[i]\n            var op2 = op[i + 1]\n            var operand1\
    \ = operand[i]\n            var operand2 = operand[i + 1]\n            if (op1\
    \ == \"+\") {\n                result = result + operand1 + operand2\n       \
    \     } else if (op1 == \"-\") {\n                result = result - operand1 -\
    \ operand2\n            } else if (op1 == \"*\") {\n                result = result\
    \ * operand1 * operand2\n            } else if (op1 == \"//\") {\n           \
    \     result = result / operand1 / operand2\n            } else if (op1 == \"\
    **\") {\n                result = result ** operand1 ** operand2\n           \
    \ }\n        }\n        return result", "        var result = 0L\n        for\
    \ (i <- 0 until operand.length - 1) {\n            var op_i = op[i]\n        \
    \    var operand_i = operand[i]\n            if (op_i == \"+\") {\n          \
    \      result += operand_i\n            } else if (op_i == \"-\") {\n        \
    \        result -= operand_i\n            } else if (op_i == \"*\") {\n      \
    \          result *= operand_i\n            } else if (op_i == \"//\") {\n   \
    \             result /= operand_i\n            } else if (op_i == \"**\") {\n\
    \                result **= operand_i\n            }\n        }\n        return\
    \ result", "        val opLen = op.length\n        val operandLen = operand.length\n\
    \        if (opLen < 2 || operandLen < 2) {\n            throw new IllegalArgumentException(\"\
    Operator list and operand list should have at least two elements.\")\n       \
    \ }\n        val result = 0L\n        for (i <- 0 until operandLen - 1) {\n  \
    \          val operandVal = operand[i]\n            for (j <- i + 1 until operandLen)\
    \ {\n                val operatorVal = op[j]\n                switch (operatorVal)\
    \ {\n                    case \"+\":\n                        result += operandVal\n\
    \                        break\n                    case \"-\":\n            \
    \            result -= operandVal\n                        break\n           \
    \         case \"*\":\n                        result *= operandVal\n        \
    \                break\n                    case \"//\":\n                   \
    \     result /= operandVal\n                        break\n                  \
    \  case \"**\":\n                        result = _.pow(result, operandVal)\n\
    \                        break\n                    default:\n               \
    \         throw new IllegalArgumentException(\"Unknown operator: \" + operatorVal)\n\
    \                }\n            }\n        }\n        return result", "      \
    \  var result = 0L\n        for (i <- 0 until operand.length - 1) {\n        \
    \    var operand1 = operand[i]\n            var operand2 = operand[i + 1]\n  \
    \          var operator = op[i]\n            if (operator == \"*\") {\n      \
    \          result = result * operand1\n            } else if (operator == \"/\"\
    ) {\n                result = result / operand1\n            } else if (operator\
    \ == \"**\") {\n                result = result ** operand1\n            } else\
    \ if (operator == \"+\") {\n                result = result + operand1\n     \
    \       } else if (operator == \"-\") {\n                result = result - operand1\n\
    \            }\n        }\n        return result", "        val opList = op.toList\n\
    \        val operandList = operand.toList\n        val result = 0L\n        for\
    \ (i <- 0 until operandList.size - 1) {\n            val operand1 = operandList.get(i)\n\
    \            val operand2 = operandList.get(i + 1)\n            val operator =\
    \ opList.get(i)\n            switch (operator) {\n                case \"+\":\n\
    \                    result = result + operand1 + operand2\n                 \
    \   break\n                case \"-\":\n                    result = result -\
    \ operand1 - operand2\n                    break\n                case \"*\":\n\
    \                    result = result * operand1 * operand2\n                 \
    \   break\n                case \"//\":\n                    result = result /\
    \ operand1 / operand2\n                    break\n                case \"**\"\
    :\n                    result = result ** operand1 ** operand2\n             \
    \       break\n                default:\n                    throw new RuntimeException(\"\
    Invalid operator\")\n            }\n        }\n        return result", "     \
    \   var result = 0L\n        for (var i = 0; i < operand.length; i++) {\n    \
    \        var operand_i = operand[i]\n            for (var j = 0; j < op.length;\
    \ j++) {\n                var op_j = op[j]\n                if (op_j == \"+\"\
    ) {\n                    result += operand_i\n                } else if (op_j\
    \ == \"-\") {\n                    result -= operand_i\n                } else\
    \ if (op_j == \"*\") {\n                    result *= operand_i\n            \
    \    } else if (op_j == \"//\") {\n                    result /= operand_i\n \
    \               } else if (op_j == \"**\") {\n                    result = _.pow(operand_i,\
    \ operand_i)\n                }\n            }\n        }\n        return result",
  "        val opLen = op.length\n        val opList = new ArrayList[Long]()\n   \
    \     val operandList = new ArrayList[Long]()\n        for (i <- 0 to opLen -\
    \ 1) {\n            opList.add(op[i])\n            operandList.add(operand[i])\n\
    \        }\n        val result = 0L\n        for (i <- 0 to opLen - 2) {\n   \
    \         val op1 = opList.get(i)\n            val op2 = opList.get(i + 1)\n \
    \           val operand1 = operandList.get(i)\n            val operand2 = operandList.get(i\
    \ + 1)\n            if (op1 == \"+\") {\n                result += operand1 +\
    \ operand2\n            } else if (op1 == \"-\") {\n                result -=\
    \ operand1 - operand2\n            } else if (op1 == \"*\") {\n              \
    \  result *= operand1 * operand2\n            } else if (op1 == \"//\") {\n  \
    \              result /= operand1 / operand2\n            } else if (op1 == \"\
    **\") {\n                result **= operand1 ** operand2\n            }\n    \
    \    }\n        result += operandList.get(opLen - 1)\n        return result",
  "        val opLen = op.length\n        val opList = op.toList\n        val operandLen\
    \ = operand.length\n        val operandList = operand.toList\n        val result\
    \ = 0L\n        for (i <- 0 until operandLen - 1) {\n            val operand1\
    \ = operandList.get(i)\n            val operand2 = operandList.get(i + 1)\n  \
    \          if (opLen == 2) {\n                result = result + operand1 * operand2\n\
    \            } else if (opLen == 3) {\n                result = result + operand1\
    \ * operand2 * opList.get(2)\n            } else if (opLen == 4) {\n         \
    \       result = result + operand1 * operand2 * opList.get(2) * opList.get(3)\n\
    \            }\n        }\n        return result", "        var result = 0L\n\
    \        for (i <- 0 until operand.length - 1) {\n            var operand1 = operand[i]\n\
    \            var operand2 = operand[i + 1]\n            var operator = op[i]\n\
    \            if (operator == \"+\") {\n                result = result + operand1\
    \ + operand2\n            } else if (operator == \"-\") {\n                result\
    \ = result - operand1 - operand2\n            } else if (operator == \"*\") {\n\
    \                result = result * operand1 * operand2\n            } else if\
    \ (operator == \"//\") {\n                result = result / operand1 / operand2\n\
    \            } else if (operator == \"**\") {\n                result = result\
    \ ** operand1 ** operand2\n            }\n        }\n        return result", " \
    \       val opList = op.toList\n        val operandList = operand.toList\n   \
    \     val result = 0L\n        for (i <- 0 until operandList.size - 1) {\n   \
    \         val operand1 = operandList.get(i)\n            val operand2 = operandList.get(i\
    \ + 1)\n            val operator = opList.get(i)\n            if (operator ==\
    \ \"+\") {\n                result += operand1 + operand2\n            } else\
    \ if (operator == \"-\") {\n                result -= operand1 - operand2\n  \
    \          } else if (operator == \"*\") {\n                result *= operand1\
    \ * operand2\n            } else if (operator == \"//\") {\n                result\
    \ /= operand1 // operand2\n            } else if (operator == \"**\") {\n    \
    \            result **= operand1 ** operand2\n            }\n        }\n     \
    \   return result", "        var result = 0L\n        for (i <- 0 until operand.length\
    \ - 1) {\n            var op1 = op[i]\n            var op2 = op[i + 1]\n     \
    \       var operand1 = operand[i]\n            var operand2 = operand[i + 1]\n\
    \            if (op1 == \"+\") {\n                result += operand1 + operand2\n\
    \            } else if (op1 == \"-\") {\n                result -= operand1 -\
    \ operand2\n            } else if (op1 == \"*\") {\n                result *=\
    \ operand1 * operand2\n            } else if (op1 == \"//\") {\n             \
    \   result /= operand1 // operand2\n            } else if (op1 == \"**\") {\n\
    \                result **= operand1 ** operand2\n            }\n        }\n \
    \       return result", "        var result = 0L\n        for (i <- 0 until operand.length\
    \ - 1) {\n            var operand1 = operand[i]\n            var operand2 = operand[i\
    \ + 1]\n            var operator = op[i]\n            if (operator == \"+\") {\n\
    \                result += operand1 + operand2\n            } else if (operator\
    \ == \"-\") {\n                result -= operand1 - operand2\n            } else\
    \ if (operator == \"*\") {\n                result *= operand1 * operand2\n  \
    \          } else if (operator == \"//\") {\n                result /= operand1\
    \ / operand2\n            } else if (operator == \"**\") {\n                result\
    \ **= operand1 ** operand2\n            }\n        }\n        return result",
  "        var result = 0L\n        for (i <- 0 until operand.length - 1) {\n    \
    \        var operand1 = operand[i]\n            var operand2 = operand[i + 1]\n\
    \            var operator = op[i]\n            if (operator == \"+\") {\n    \
    \            result = result + operand1 + operand2\n            } else if (operator\
    \ == \"-\") {\n                result = result - operand1 - operand2\n       \
    \     } else if (operator == \"*\") {\n                result = result * operand1\
    \ * operand2\n            } else if (operator == \"//\") {\n                result\
    \ = result / operand1 / operand2\n            } else if (operator == \"**\") {\n\
    \                result = result ** operand1 ** operand2\n            }\n    \
    \    }\n        return result", "        val opList = op.toList\n        val operandList\
    \ = operand.toList\n        val result = 0L\n        for (i <- 0 until operandList.size\
    \ - 1) {\n            val op = opList.get(i)\n            val operand1 = operandList.get(i)\n\
    \            val operand2 = operandList.get(i + 1)\n            if (op == \"+\"\
    ) {\n                result = result + operand1 + operand2\n            } else\
    \ if (op == \"-\") {\n                result = result - operand1 - operand2\n\
    \            } else if (op == \"*\") {\n                result = result * operand1\
    \ * operand2\n            } else if (op == \"//\") {\n                result =\
    \ result / operand1 / operand2\n            } else if (op == \"**\") {\n     \
    \           result = result ** operand1 ** operand2\n            }\n        }\n\
    \        return result", "        val result = 0L\n        for (i <- 0 until operand.length\
    \ - 1) {\n            result = result + operand[i] * op.apply(i)\n        }\n\
    \        return result", "        val result = 0L\n        for (i <- 0 until operand.length\
    \ - 1) {\n            result = result + operand[i] * op.length - 1\n         \
    \   op.foreach(x <- 0 until op.length - 1) {\n                result = result\
    \ + operand[i] * op[x]\n            }\n        }\n        result", "        var\
    \ result = 0L\n        for (i <- 0 until operand.length - 1) {\n            var\
    \ op1 = op[i]\n            var op2 = op[i + 1]\n            var operand1 = operand[i]\n\
    \            var operand2 = operand[i + 1]\n            if (op1 == \"+\") {\n\
    \                result += operand1 + operand2\n            } else if (op1 ==\
    \ \"-\") {\n                result -= operand1 - operand2\n            } else\
    \ if (op1 == \"*\") {\n                result *= operand1 * operand2\n       \
    \     } else if (op1 == \"//\") {\n                result /= operand1 // operand2\n\
    \            } else if (op1 == \"**\") {\n                result **= operand1\
    \ ** operand2\n            }\n        }\n        return result", "        var\
    \ result = 0L\n        for (i <- 0 until operand.length - 1) {\n            var\
    \ operand1 = operand[i]\n            var operand2 = operand[i + 1]\n         \
    \   var operator = op[i]\n            if (operator == \"+\") {\n             \
    \   result = result + operand1\n            } else if (operator == \"-\") {\n\
    \                result = result - operand1\n            } else if (operator ==\
    \ \"*\") {\n                result = result * operand1\n            } else if\
    \ (operator == \"//\") {\n                result = result / operand1\n       \
    \     } else if (operator == \"**\") {\n                result = result ** operand1\n\
    \            }\n        }\n        return result", "        var result = 0L\n\
    \        for (i <- 0 until operand.length - 1) {\n            var operand1 = operand[i]\n\
    \            var operand2 = operand[i + 1]\n            var operator = op[i]\n\
    \            if (operator == \"+\") {\n                result = result + operand1\
    \ + operand2\n            } else if (operator == \"-\") {\n                result\
    \ = result - operand1 - operand2\n            } else if (operator == \"*\") {\n\
    \                result = result * operand1 * operand2\n            } else if\
    \ (operator == \"//\") {\n                result = result / operand1 / operand2\n\
    \            } else if (operator == \"**\") {\n                result = result\
    \ ** operand1 ** operand2\n            }\n        }\n        return result", " \
    \       val opLen = op.length\n        val operandLen = operand.length\n     \
    \   val result = 0L\n        for (i <- 0 until operandLen - 1) {\n           \
    \ val operandVal = operand[i]\n            for (j <- 0 until opLen - 1) {\n  \
    \              val opVal = op[j]\n                if (opVal == \"+\") {\n    \
    \                result += operandVal\n                } else if (opVal == \"\
    -\") {\n                    result -= operandVal\n                } else if (opVal\
    \ == \"*\") {\n                    result *= operandVal\n                } else\
    \ if (opVal == \"/\") {\n                    result /= operandVal\n          \
    \      } else if (opVal == \"**\") {\n                    result = _.pow(result,\
    \ operandVal)\n                }\n            }\n        }\n        return result",
  "        val opList = op.toList\n        val operandList = operand.toList\n    \
    \    val result = 0L\n        for (i <- 0 until operandList.size - 1) {\n    \
    \        val op1 = opList.get(i)\n            val op2 = opList.get(i + 1)\n  \
    \          val operand1 = operandList.get(i)\n            val operand2 = operandList.get(i\
    \ + 1)\n            if (op1 == \"+\") {\n                result = result + operand1\
    \ + operand2\n            } else if (op1 == \"-\") {\n                result =\
    \ result - operand1 - operand2\n            } else if (op1 == \"*\") {\n     \
    \           result = result * operand1 * operand2\n            } else if (op1\
    \ == \"//\") {\n                result = result / operand1 / operand2\n      \
    \      } else if (op1 == \"**\") {\n                result = result ** operand1\
    \ ** operand2\n            }\n        }\n        return result", "        val\
    \ opLen = op.length\n        val operandLen = operand.length\n        val result\
    \ = 0L\n        for (i <- 0 until operandLen - 1) {\n            val operand1\
    \ = operand[i]\n            for (j <- i + 1 until operandLen) {\n            \
    \    val operand2 = operand[j]\n                if (op[i] == \"+\") {\n      \
    \              result += operand1 + operand2\n                } else if (op[i]\
    \ == \"-\") {\n                    result -= operand1 - operand2\n           \
    \     } else if (op[i] == \"*\") {\n                    result *= operand1 * operand2\n\
    \                } else if (op[i] == \"/\") {\n                    result /= operand1\
    \ / operand2\n                } else if (op[i] == \"**\") {\n                \
    \    result **= operand1 ** operand2\n                }\n            }\n     \
    \   }\n        return result", "        val opLen = op.length\n        val operandLen\
    \ = operand.length\n        val result = 0L\n        for (i <- 0 until operandLen\
    \ - 1) {\n            val operandVal = operand[i]\n            for (j <- 0 until\
    \ opLen - 1) {\n                val opVal = op[j]\n                if (opVal ==\
    \ \"+\") {\n                    result += operandVal\n                } else if\
    \ (opVal == \"-\") {\n                    result -= operandVal\n             \
    \   } else if (opVal == \"*\") {\n                    result *= operandVal\n \
    \               } else if (opVal == \"//\") {\n                    result /= operandVal\n\
    \                } else if (opVal == \"**\") {\n                    result **=\
    \ operandVal\n                }\n            }\n        }\n        return result",
  "        var result = 0L\n        for (i <- 0 until operand.length - 1) {\n    \
    \        var op1 = op[i]\n            var op2 = op[i + 1]\n            var operand1\
    \ = operand[i]\n            var operand2 = operand[i + 1]\n            if (op1\
    \ == \"+\") {\n                result += operand1 + operand2\n            } else\
    \ if (op1 == \"-\") {\n                result -= operand1 - operand2\n       \
    \     } else if (op1 == \"*\") {\n                result *= operand1 * operand2\n\
    \            } else if (op1 == \"//\") {\n                result /= operand1 //\
    \ operand2\n            } else if (op1 == \"**\") {\n                result **=\
    \ operand1 ** operand2\n            }\n        }\n        return result", "  \
    \      val opLen = op.length\n        val operandLen = operand.length\n      \
    \  if (opLen < 2 || operandLen < 2) {\n            throw new IllegalArgumentException(\"\
    Operator list and operand list should have at least 2 elements.\")\n        }\n\
    \        val result = 0L\n        for (i <- 0 until operandLen - 1) {\n      \
    \      for (j <- 0 until opLen - 1) {\n                if (op[j] == \"+\") {\n\
    \                    result = result + operand[i] + operand[i + 1]\n         \
    \       } else if (op[j] == \"-\") {\n                    result = result - operand[i]\
    \ - operand[i + 1]\n                } else if (op[j] == \"*\") {\n           \
    \         result = result * operand[i] * operand[i + 1]\n                } else\
    \ if (op[j] == \"//\") {\n                    result = result / operand[i] / operand[i\
    \ + 1]\n                } else if (op[j] == \"**\") {\n                    result\
    \ = result ** operand[i] ** operand[i + 1]\n                }\n            }\n\
    \            i = i + 2\n        }\n        return result", "        var result\
    \ = 0L\n        for (i <- 0 until operand.length - 1) {\n            var operand1\
    \ = operand[i]\n            var operand2 = operand[i + 1]\n            var operator\
    \ = op[i]\n            if (operator == \"+\") {\n                result = result\
    \ + operand1 + operand2\n            } else if (operator == \"-\") {\n       \
    \         result = result - operand1 - operand2\n            } else if (operator\
    \ == \"*\") {\n                result = result * operand1 * operand2\n       \
    \     } else if (operator == \"//\") {\n                result = result / operand1\
    \ / operand2\n            } else if (operator == \"**\") {\n                result\
    \ = result ** operand1 ** operand2\n            }\n        }\n        return result",
  "        def opMap(op : String) : String = {\n            if (op == \"+\") {\n \
    \               return \"+\"\n            } else if (op == \"-\") {\n        \
    \        return \"-\"\n            } else if (op == \"*\") {\n               \
    \ return \"*\"\n            } else if (op == \"//\") {\n                return\
    \ \"//\"\n            } else if (op == \"**\") {\n                return \"**\"\
    \n            } else {\n                throw new RuntimeException(\"Invalid operator\"\
    )\n            }\n        }\n        def opList(op : String) : List[String] =\
    \ {\n            if (op == \"+\") {\n                return [ \"+\", \"-\" ]\n\
    \            } else if (op == \"-\") {\n                return [ \"-\", \"+\"\
    \ ]\n            } else if (op == \"*\") {\n                return [ \"*\", \"\
    /\" ]\n            } else if (op == \"//\") {\n                return [ \"//\"\
    , \"**\" ]\n            } else if (op == \"**\") {\n                return [ \"\
    **\", \"*\" ]\n            } else {\n                throw new RuntimeException(\"\
    Invalid operator\")\n            }\n        }\n        def opListLen(op : String)\
    \ : Int = {\n            if (op == \"+\") {\n                return 2\n      \
    \      } else if (op == \"-\") {\n                return 2\n            } else\
    \ if (op == \"*\") {\n                return 2\n            } else if (op == \"\
    //\") {\n                return 2\n            } else if (op == \"**\") {\n  \
    \              return 2\n            } else {\n                throw new RuntimeException(\"\
    Invalid operator\")\n            }\n        }\n        def opListLen2(op : String)\
    \ : Int = {\n            if (op == \"+\") {\n                return 2\n      \
    \      } else if (op == \"-\") {\n                return 2\n            } else\
    \ if (op == \"*\") {\n                return 2\n            } else if (op == \"\
    //\") {\n                return 2\n            } else if (op == \"**\") {\n  \
    \              return 2\n            } else {\n                throw new RuntimeException(\"\
    Invalid operator\")\n            }\n        }\n        def opListLen3(op : String)\
    \ : Int = {\n            if (op == \"+\") {", "        var result = 0L\n     \
    \   for (i <- 0 until operand.length - 1) {\n            var operand1 = operand[i]\n\
    \            var operand2 = operand[i + 1]\n            var operator = op[i]\n\
    \            if (operator == \"+\") {\n                result = result + operand1\
    \ + operand2\n            } else if (operator == \"-\") {\n                result\
    \ = result - operand1 - operand2\n            } else if (operator == \"*\") {\n\
    \                result = result * operand1 * operand2\n            } else if\
    \ (operator == \"//\") {\n                result = result / operand1 / operand2\n\
    \            } else if (operator == \"**\") {\n                result = result\
    \ ** operand1 ** operand2\n            }\n        }\n        return result", " \
    \       var result = 0L\n        for (i <- 0 until operand.length - 1) {\n   \
    \         var operand1 = operand[i]\n            var operand2 = operand[i + 1]\n\
    \            var operator = op[i]\n            switch (operator) {\n         \
    \       case \"+\":\n                    result = result + operand1\n        \
    \            break\n                case \"-\":\n                    result =\
    \ result - operand1\n                    break\n                case \"*\":\n\
    \                    result = result * operand1\n                    break\n \
    \               case \"//\":\n                    result = result / operand1\n\
    \                    break\n                case \"**\":\n                   \
    \ result = result ** operand1\n                    break\n                default:\n\
    \                    break\n            }\n        }\n        return result",
  "        val opLen = op.length\n        val operandLen = operand.length\n      \
    \  val result = 0L\n        for (i <- 0 until operandLen - 1) {\n            val\
    \ operandVal = operand[i]\n            for (j <- 0 until opLen - 1) {\n      \
    \          val opVal = op[j]\n                if (opVal == \"+\") {\n        \
    \            result += operandVal\n                } else if (opVal == \"-\")\
    \ {\n                    result -= operandVal\n                } else if (opVal\
    \ == \"*\") {\n                    result *= operandVal\n                } else\
    \ if (opVal == \"/\") {\n                    result /= operandVal\n          \
    \      } else if (opVal == \"**\") {\n                    result = _.pow(result,\
    \ operandVal)\n                }\n            }\n        }\n        return result",
  "        var result = 0L\n        for (i <- 0 until operand.length - 1) {\n    \
    \        var op1 = op[i]\n            var op2 = op[i + 1]\n            var operand1\
    \ = operand[i]\n            var operand2 = operand[i + 1]\n            if (op1\
    \ == \"+\") {\n                result += operand1 + operand2\n            } else\
    \ if (op1 == \"-\") {\n                result -= operand1 - operand2\n       \
    \     } else if (op1 == \"*\") {\n                result *= operand1 * operand2\n\
    \            } else if (op1 == \"//\") {\n                result /= operand1 //\
    \ operand2\n            } else if (op1 == \"**\") {\n                result **=\
    \ operand1 ** operand2\n            }\n        }\n        return result", "  \
    \      val opLen = op.length\n        val operandLen = operand.length\n      \
    \  val result = 0L\n        for (i <- 0 until operandLen - 1) {\n            val\
    \ operandVal = operand[i]\n            for (j <- 0 until opLen - 1) {\n      \
    \          val opVal = op[j]\n                if (opVal == \"+\") {\n        \
    \            result += operandVal\n                } else if (opVal == \"-\")\
    \ {\n                    result -= operandVal\n                } else if (opVal\
    \ == \"*\") {\n                    result *= operandVal\n                } else\
    \ if (opVal == \"//\") {\n                    result /= operandVal\n         \
    \       } else if (opVal == \"**\") {\n                    result = _.pow(operandVal,\
    \ result)\n                }\n            }\n        }\n        return result",
  "        val opLen = op.length\n        val opList = new ArrayList[Long](opLen)\n\
    \        for (i <- 0 until opLen) {\n            opList.set(i, op[i])\n      \
    \  }\n        val operandLen = operand.length\n        val operandList = new ArrayList[Long](operandLen)\n\
    \        for (i <- 0 until operandLen) {\n            operandList.set(i, operand[i])\n\
    \        }\n        val result = 0\n        for (i <- 0 until operandLen - 1)\
    \ {\n            val op1 = opList.get(i)\n            val op2 = opList.get(i +\
    \ 1)\n            val operand1 = operandList.get(i)\n            val operand2\
    \ = operandList.get(i + 1)\n            if (op1 == \"+\") {\n                result\
    \ = result + operand1 + operand2\n            } else if (op1 == \"-\") {\n   \
    \             result = result - operand1 - operand2\n            } else if (op1\
    \ == \"*\") {\n                result = result * operand1 * operand2\n       \
    \     } else if (op1 == \"//\") {\n                result = result // operand1\
    \ // operand2\n            } else if (op1 == \"**\") {\n                result\
    \ = result ** operand1 ** operand2\n            }\n        }\n        return result",
  "        val opLen = op.length\n        val operandLen = operand.length\n      \
    \  val result = 0L\n        for (i <- 0 until operandLen - 1) {\n            val\
    \ operandVal = operand[i]\n            for (j <- 0 until opLen - 1) {\n      \
    \          val operator = op[j]\n                if (operator == \"+\") {\n  \
    \                  result = result + operandVal\n                } else if (operator\
    \ == \"-\") {\n                    result = result - operandVal\n            \
    \    } else if (operator == \"*\") {\n                    result = result * operandVal\n\
    \                } else if (operator == \"//\") {\n                    result\
    \ = result / operandVal\n                } else if (operator == \"**\") {\n  \
    \                  result = result ** operandVal\n                }\n        \
    \    }\n        }\n        return result"]
stop_tokens:
- "\n    }\n"
