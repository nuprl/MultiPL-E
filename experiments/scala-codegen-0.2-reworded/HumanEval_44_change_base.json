{
  "name": "HumanEval_44_change_base",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Change numerical base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\")\n    def changeBase(x : Long, base : Long) : String = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l), (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l), (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\")));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l), (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l), (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n",
  "completions": [
    "        if (x == 0) return \"0\"\n        if (base == 10) return x.toString()\n        if (x < 0) return \"-\" + changeBase(-x, base)\n        if (base < 10) return changeBase(x, base)\n        if (base > 10) {\n            var x_ = x\n            var base_ = base\n            var result = \"\"\n            while (x_ > 0) {\n                var digit = x_ % base_\n                result = digit.toString() + result\n                x_ = x_ / base_\n            }\n            return result\n        }\n    }\n\n    // Convert a string representation of a number in a given base to\n    // another base.\n    // >>> convertBase(\"22\", (3l))\n    // (8l)\n    // >>> convertBase(\"1000\", (2l))\n    // (8l)\n    // >>> convertBase(\"111\", (2l))\n    // (7l)\n    // >>> convertBase(\"100\", (2l))\n    // (100l)\n    // >>> convertBase(\"100\", (3l))\n    // (100l)\n    // >>> convertBase(\"100\", (4l))\n    // (100l)\n    // >>> convertBase(\"100\", (5l))\n    // (100l)\n    // >>> convertBase(\"100\", (6l))\n    // (100l)\n    // >>> convertBase(\"100\", (7l))\n    // (100l)\n    // >>> convertBase(\"100\", (8l))\n    // (100l)\n    // >>> convertBase(\"100\", (9l))\n    // (100l)\n    // >>> convertBase(\"100\", (10l))\n    // (100l)\n    // >>> convertBase(\"100\", (11l))\n    // (100l)\n    // >>> convertBase(\"100\", (12l))\n    // (100l)\n    // >>> convertBase(\"100\", (13l))\n    // (100l)\n    // >>> convertBase(\"100\", (14l))\n    // (100l)\n    // >>> convertBase(\"100\", (15l))\n    // (100l)\n    // >>> convertBase(\"100",
    "        val xStr = x.toString\n        val baseStr = base.toString\n        val result = \"\"\n        for (i <- 0 until xStr.length) {\n            val digit = xStr.substring(i, i + 1)\n            val digitBase = baseStr.substring(i, i + 1)\n            result = result + digitBase\n        }\n        result",
    "        var s = \"\"\n        var i = 0\n        while (x > 0) {\n            var digit = x % base\n            s = digit.toString() + s\n            x /= base\n            i += 1\n        }\n        return s\n    }\n\n    // Convert a string to a number.\n    // The string can be a decimal number, or a number in any base less than 10.\n    // >>> stringToNumber(\"1234\")\n    // 1234\n    // >>> stringToNumber(\"1000\")\n    // 1000\n    // >>> stringToNumber(\"111\")\n    // 111\n    // >>> stringToNumber(\"0xF\")\n    // 15\n    // >>> stringToNumber(\"0xF\")\n    // 15\n    // >>> stringToNumber(\"0b1101\")\n    // 101\n    // >>> stringToNumber(\"0b1101\")\n    // 101\n    def stringToNumber(s : String) : Long = {\n        var x = 0l\n        var i = 0\n        while (i < s.length) {\n            var c = s.charAt(i)\n            if (c.isDigit()) {\n                x = x * 10 + (c - '0')\n            } else if (c == '0') {\n                if (i == 0 || s.charAt(i - 1) != '0') {\n                    x = x * 0\n                }\n            } else if (c == 'x' || c == 'X') {\n                var j = i + 1\n                while (j < s.length && s.charAt(j).isDigit()) {\n                    j += 1\n                }\n                x = x * 16 + stringToNumber(s.substring(i + 1, j))\n                i = j\n            } else if (c == 'b' || c == 'B') {\n                var j = i + 1\n                while (j < s.length && s.charAt(j) == '0') {\n                    j += 1\n                }\n                x = x * 2 + stringToNumber(s.substring(i + 1, j))\n                i = j\n            } else {\n                throw new RuntimeException(\"Unexpected character \" + c + \" in string \"",
    "        var result = \"\"\n        for (i <- 0 until x.toString().length()) {\n            var digit = x.toString().substring(i, i + 1)\n            result = result + digit.toString(base)\n        }\n        result",
    "        val x_ = x\n        val base_ = base\n        val res = \"\"\n        while (x_ > 0) {\n            val digit = x_ % base_\n            res = digit.toString() + res\n            x_ /= base_\n        }\n        return res\n    }\n\n    // Return the number of 1's in the binary representation of x.\n    // >>> countOnes(8l)\n    // (3)\n    // >>> countOnes(7l)\n    // (2)\n    // >>> countOnes(0l)\n    // (0)\n    def countOnes(x : Long) : Int = {\n        val x_ = x\n        val res = 0\n        while (x_ > 0) {\n            val digit = x_ % 2\n            if (digit == 1) {\n                res += 1\n            }\n            x_ /= 2\n        }\n        return res\n    }\n\n    // Return the number of 0's in the binary representation of x.\n    // >>> countZeros(8l)\n    // (7)\n    // >>> countZeros(7l)\n    // (6)\n    // >>> countZeros(0l)\n    // (0)\n    def countZeros(x : Long) : Int = {\n        val x_ = x\n        val res = 0\n        while (x_ > 0) {\n            val digit = x_ % 2\n            if (digit == 0) {\n                res += 1\n            }\n            x_ /= 2\n        }\n        return res\n    }\n\n    // Return the number of 1's in the binary representation of x.\n    // >>> countOnes(8l)\n    // (3)\n    // >>> countOnes(7l)\n    // (2)\n    // >>> countOnes(0l)\n    // (0)\n    def countOnes(x : Long) : Int = {\n        val x_ = x\n        val res = 0\n        while (x_ > 0) {\n            val digit = x_ % 2\n            if (digit == 1) {\n                res += 1\n            }\n            x_ /= 2\n        }\n        return res\n    }",
    "        def change(x : Long) : String = {\n            if (x == 0) return \"0\"\n            if (x < 0) return \"-\" + change(-x)\n            if (x < base) return x.toString()\n            else return change(x / base) + \".\" + change(x % base)\n        }\n        return change(x)",
    "        val x_ = x\n        val base_ = base\n        val res = \"\"\n        while (x_ > 0l) {\n            val digit = x_ % base_\n            res = digit.toString() + res\n            x_ = x_ / base_\n        }\n        return res",
    "        val x_ = x\n        val base_ = base\n        val res = \"\"\n        while (x_ > 0) {\n            val digit = x_ % base_\n            res = digit + res\n            x_ = x_ / base_\n        }\n        return res",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        var result = \"\"\n        var x_ = x\n        while (x_ > 0) {\n            var digit = x_ % base\n            result = digit + result\n            x_ = x_ / base\n        }\n        return result\n    }\n\n    // Return the sum of the digits of the input number x.\n    // >>> sumDigits(12345l)\n    // 15\n    // >>> sumDigits(123456789l)\n    // 9\n    def sumDigits(x : Long) : Long = {\n        var result = 0l\n        while (x > 0) {\n            result = result + x % 10\n            x = x / 10\n        }\n        return result\n    }\n\n    // Return the sum of the digits of the input number x.\n    // >>> sumDigits(123456789l)\n    // 9\n    def sumDigits2(x : Long) : Long = {\n        var result = 0l\n        while (x > 0) {\n            result = result + x % 10\n            x = x / 10\n        }\n        return result\n    }\n\n    // Return the sum of the digits of the input number x.\n    // >>> sumDigits(123456789l)\n    // 9\n    def sumDigits3(x : Long) : Long = {\n        var result = 0l\n        while (x > 0) {\n            result = result + x % 10\n            x = x / 10\n        }\n        return result\n    }\n\n    // Return the sum of the digits of the input number x.\n    // >>> sumDigits(123456789l)\n    // 9\n    def sumDigits4(x : Long) : Long = {\n        var result = 0l\n        while (x > 0) {\n            result = result + x % 10\n            x = x / 10\n        }\n        return result\n    }\n\n    // Return the sum of the digits of the input number x.\n    // >>> sumDigits(123456789l)\n    // 9\n    def sumDigits5(x : Long) : Long = {\n        var result = 0l\n        while (x > 0) {\n            result = result + x % 10\n            ",
    "        var result = \"\"\n        var x_ = x\n        while (x_ > 0) {\n            var digit = x_ % base\n            result = digit.toString() + result\n            x_ = x_ / base\n        }\n        return result",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        def toStr(x : Long) : String = {\n            if (x == 0) {\n                \"0\"\n            } else {\n                def toStr(x : Long) : String = {\n                    if (x == 0) {\n                        \"0\"\n                    } else {\n                        if (x < 0) {\n                            \"-\" + toStr(-x)\n                        } else {\n                            toStr(x / base) + toStr(x % base)\n                        }\n                    }\n                }\n                toStr(x)\n            }\n        }\n        toStr(x)",
    "        var result = \"\"\n        var x_ = x\n        while (x_ != 0) {\n            var digit = x_ % base\n            result = digit + result\n            x_ = x_ / base\n        }\n        return result\n    }\n\n    // Return the sum of all the digits in the input number x.\n    // >>> sumDigits(8)\n    // (8)\n    // >>> sumDigits(9)\n    // (9)\n    // >>> sumDigits(10)\n    // (1)\n    // >>> sumDigits(11)\n    // (2)\n    // >>> sumDigits(12)\n    // (3)\n    // >>> sumDigits(13)\n    // (4)\n    // >>> sumDigits(14)\n    // (5)\n    // >>> sumDigits(15)\n    // (6)\n    // >>> sumDigits(16)\n    // (7)\n    // >>> sumDigits(17)\n    // (8)\n    // >>> sumDigits(18)\n    // (9)\n    // >>> sumDigits(19)\n    // (10)\n    def sumDigits(x : Long) : Long = {\n        var result = 0l\n        while (x != 0) {\n            result = result + x % 10\n            x = x / 10\n        }\n        return result\n    }\n\n    // Return the product of all the digits in the input number x.\n    // >>> productDigits(8)\n    // (8)\n    // >>> productDigits(9)\n    // (9)\n    // >>> productDigits(10)\n    // (10)\n    // >>> productDigits(11)\n    // (11)\n    // >>> productDigits(12)\n    // (24)\n    // >>> productDigits(13)\n    // (13)\n    // >>> productDigits(14)\n    // (140)\n    // >>> productDigits(15)\n    // (15)\n    // >>> productDigits(16)\n    // (160)\n    // >>> productDigits(17)\n    // (17)\n    // >>> productDigits(18)\n    // (",
    "        def changeBaseHelper(x, base) : String = {\n            if (x == 0) return \"0\"\n            if (base == 10) return x.toString()\n            if (x < 0) return \"-\" + changeBaseHelper(-x, base)\n            if (base < 10) return changeBaseHelper(x, base)\n            if (base == 10) return x.toString()\n            if (base == 2) return changeBaseHelper(x, 2)\n            if (base == 3) return changeBaseHelper(x, 3)\n            if (base == 4) return changeBaseHelper(x, 4)\n            if (base == 5) return changeBaseHelper(x, 5)\n            if (base == 6) return changeBaseHelper(x, 6)\n            if (base == 7) return changeBaseHelper(x, 7)\n            if (base == 8) return changeBaseHelper(x, 8)\n            if (base == 9) return changeBaseHelper(x, 9)\n            return \"error\"\n        }\n        return changeBaseHelper(x, base)\n    }\n\n    // Change the base of a number to base.\n    // >>> changeBaseToBase(8, 3)\n    // 22\n    // >>> changeBaseToBase(8, 2)\n    // 1000\n    // >>> changeBaseToBase(7, 2)\n    // 111\n    def changeBaseToBase(x : Long, base : Long) : Long = {\n        if (x == 0) return 0\n        if (base == 10) return x\n        if (x < 0) return -changeBaseToBase(-x, base)\n        if (base < 10) return changeBaseToBase(x, base)\n        if (base == 10) return x\n        if (base == 2) return changeBaseToBase(x, 2)\n        if (base == 3) return changeBaseToBase(x, 3)\n        if (base == 4) return changeBaseToBase(x, 4)\n        if (base == 5) return changeBaseToBase(x, 5)\n        if (base == 6) return changeBaseToBase(x, 6)\n        if (base == 7) return changeBaseToBase(x, 7)\n        if (",
    "        if (x < 0) {\n            throw new IllegalArgumentException(\"Negative numbers are not supported\")\n        }\n        if (base < 2 || base > 36) {\n            throw new IllegalArgumentException(\"Base should be between 2 and 36\")\n        }\n        if (x == 0) {\n            return \"0\"\n        }\n        if (base == 2) {\n            return toBinaryString(x)\n        }\n        if (base == 10) {\n            return toDecimalString(x)\n        }\n        if (base == 16) {\n            return toHexString(x)\n        }\n        if (base == 8) {\n            return toOctalString(x)\n        }\n        if (base == 3) {\n            return toBinaryString(x)\n        }\n        if (base == 5) {\n            return toDecimalString(x)\n        }\n        if (base == 7) {\n            return toOctalString(x)\n        }\n        if (base == 11) {\n            return toDecimalString(x)\n        }\n        if (base == 13) {\n            return toOctalString(x)\n        }\n        if (base == 14) {\n            return toDecimalString(x)\n        }\n        if (base == 15) {\n            return toOctalString(x)\n        }\n        if (base == 17) {\n            return toDecimalString(x)\n        }\n        if (base == 19) {\n            return toOctalString(x)\n        }\n        if (base == 23) {\n            return toDecimalString(x)\n        }\n        if (base == 24) {\n            return toOctalString(x)\n        }\n        if (base == 25) {\n            return toDecimalString(x)\n        }\n        if (base == 27) {\n            return toOctalString(x)\n        }\n        if (base == 31) {\n            return toDecimalString(x)\n        }\n        if (base == 32) {\n            return toOctalString(x)\n        }\n        if (base == 33) {\n            return toDecimalString",
    "        var result = \"\"\n        var x_ = x\n        while (x_ > 0) {\n            var digit = x_ % base\n            result = digit.toString() + result\n            x_ = x_ / base\n        }\n        return result",
    "        def baseString(x : Long, base : Long) : String = {\n            if (x == 0) {\n                \"\"\n            } else {\n                baseString(x / base, base) + (x % base)\n            }\n        }\n        baseString(x, base)",
    "        def toStr(x : Long, base : Long) : String = {\n            if (x == 0) {\n                return \"\"\n            }\n            if (x < 0) {\n                return toStr(-x, base)\n            }\n            if (base == 10) {\n                return toStr(x, base)\n            }\n            if (base == 2) {\n                return toStr(x, base)\n            }\n            if (base == 3) {\n                return toStr(x, base)\n            }\n            if (base == 4) {\n                return toStr(x, base)\n            }\n            if (base == 5) {\n                return toStr(x, base)\n            }\n            if (base == 6) {\n                return toStr(x, base)\n            }\n            if (base == 7) {\n                return toStr(x, base)\n            }\n            if (base == 8) {\n                return toStr(x, base)\n            }\n            if (base == 9) {\n                return toStr(x, base)\n            }\n            return toStr(x, base)\n        }\n        return toStr(x, base)",
    "        var result = \"\"\n        var tmp = x\n        while (tmp > 0) {\n            var digit = tmp % base\n            result = digit + result\n            tmp /= base\n        }\n        return result\n    }\n\n    // Convert a string to a number.\n    // The string is a sequence of digits from base 10.\n    // The digits are stored in the array digits.\n    // The number is a long value.\n    // >>> stringToNumber(\"123\")\n    // 123l\n    // >>> stringToNumber(\"1234\")\n    // 1234l\n    // >>> stringToNumber(\"12345\")\n    // 12345l\n    // >>> stringToNumber(\"123456\")\n    // 123456l\n    // >>> stringToNumber(\"1234567\")\n    // 1234567l\n    // >>> stringToNumber(\"12345678\")\n    // 12345678l\n    // >>> stringToNumber(\"123456789\")\n    // 123456789l\n    // >>> stringToNumber(\"1234567890\")\n    // 1234567890l\n    // >>> stringToNumber(\"12345678901\")\n    // 12345678901l\n    // >>> stringToNumber(\"123456789012\")\n    // 123456789012l\n    // >>> stringToNumber(\"1234567890123\")\n    // 1234567890123l\n    // >>> stringToNumber(\"12345678901234\")\n    // 12345678901234l\n    // >>> stringToNumber(\"123456789012345\")\n    // 123456789012345l\n    // >>> stringToNumber(\"1234567890123456\")\n    // 1234567890123456l\n    // >>> stringToNumber(\"12345678901234567\")\n    // 12345678901234567l\n    // >>> stringToNumber(\"123456789012345678\")\n    // 123456789012345678l\n    // >>> stringToNumber(\"1234567890123456789\")\n    // 1234567890123456789l\n    // >>> stringToNumber(\"12345678901234567890\")\n    // 12345678901234567890",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        def changeBaseHelper(x, base) : String = {\n            if (x == 0) {\n                \"\"\n            } else {\n                if (base == 10) {\n                    x.toString()\n                } else {\n                    changeBaseHelper(x / base, base) + x % base\n                }\n            }\n        }\n        changeBaseHelper(x, base)\n    }\n\n    // Change the base of a number to 2.\n    // >>> changeBaseTo2((8l))\n    // (1000l)\n    // >>> changeBaseTo2((8l))\n    // (1000l)\n    // >>> changeBaseTo2((7l))\n    // (111l)\n    def changeBaseTo2(x : Long) : Long = {\n        if (x == 0) {\n            0\n        } else {\n            x / 2\n        }\n    }\n\n    // Change the base of a number to 3.\n    // >>> changeBaseTo3((8l))\n    // (1000l)\n    // >>> changeBaseTo3((8l))\n    // (1000l)\n    // >>> changeBaseTo3((7l))\n    // (111l)\n    def changeBaseTo3(x : Long) : Long = {\n        if (x == 0) {\n            0\n        } else {\n            x / 3\n        }\n    }\n\n    // Change the base of a number to 4.\n    // >>> changeBaseTo4((8l))\n    // (1000l)\n    // >>> changeBaseTo4((8l))\n    // (1000l)\n    // >>> changeBaseTo4((7l))\n    // (111l)\n    def changeBaseTo4(x : Long) : Long = {\n        if (x == 0) {\n            0\n        } else {\n            x / 4\n        }\n    }\n\n    // Change the base of a number to 5.\n    // >>> changeBaseTo5((8l))\n    // (1000l)\n    // >>> changeBaseTo5((8l))\n    // (1000l)\n    // >>> changeBaseTo5((7l))\n    // (111l)\n    def changeBaseTo5(x : Long) : Long",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        val b = scala.math.BigInt(x)\n        val bb = scala.math.BigInt(base)\n        val r = b.divide(bb)\n        return r.toString()\n    }\n\n    // Convert a string representation of a number in a given base to the\n    // base 10.\n    // >>> convertBase(\"22\", (3l))\n    // (8l)\n    // >>> convertBase(\"1000\", (2l))\n    // (8l)\n    // >>> convertBase(\"111\", (2l))\n    // (7l)\n    def convertBase(s : String, base : Long) : Long = {\n        val b = scala.math.BigInt(s)\n        val bb = scala.math.BigInt(base)\n        val r = b.divide(bb)\n        return r.longValue()\n    }\n\n    // Convert a string representation of a number in a given base to the\n    // base 10.\n    // >>> convertBase(\"22\", (3l))\n    // (8l)\n    // >>> convertBase(\"1000\", (2l))\n    // (8l)\n    // >>> convertBase(\"111\", (2l))\n    // (7l)\n    def convertBase(s : String, base : Long) : Long = {\n        val b = scala.math.BigInt(s)\n        val bb = scala.math.BigInt(base)\n        val r = b.divide(bb)\n        return r.longValue()\n    }\n\n    // Convert a string representation of a number in a given base to the\n    // base 10.\n    // >>> convertBase(\"22\", (3l))\n    // (8l)\n    // >>> convertBase(\"1000\", (2l))\n    // (8l)\n    // >>> convertBase(\"111\", (2l))\n    // (7l)\n    def convertBase(s : String, base : Long) : Long = {\n        val b = scala.math.BigInt(s)\n        val bb = scala.math.BigInt(base)\n        val r = b.divide(bb)\n        return r.longValue()",
    "        val b = scala.math.BigInteger.valueOf(x)\n        val bb = b.toString(base)\n        return bb\n    }\n\n    // Convert a string to a number.\n    // The string is a sequence of digits from base 10.\n    // >>> stringToNumber(\"22\")\n    // 22\n    // >>> stringToNumber(\"1000\")\n    // 1000\n    // >>> stringToNumber(\"111\")\n    // 111\n    def stringToNumber(s : String) : Long = {\n        val b = scala.math.BigInteger.valueOf(s)\n        return b.longValue()\n    }\n\n    // Convert a number to a string in a given base.\n    // The number is a positive integer less than base.\n    // >>> numberToString(22, (3l))\n    // \"22\"\n    // >>> numberToString(1000, (2l))\n    // \"1000\"\n    // >>> numberToString(111, (2l))\n    // \"111\"\n    def numberToString(x : Long, base : Long) : String = {\n        val b = scala.math.BigInteger.valueOf(x)\n        val bb = b.toString(base)\n        return bb\n    }\n\n    // Convert a string to a number in a given base.\n    // The string is a sequence of digits from base 10.\n    // >>> stringToNumber(\"22\")\n    // 22\n    // >>> stringToNumber(\"1000\")\n    // 1000\n    // >>> stringToNumber(\"111\")\n    // 111\n    def stringToNumber(s : String) : Long = {\n        val b = scala.math.BigInteger.valueOf(s)\n        return b.longValue()\n    }\n\n    // Convert a number to a string in a given base.\n    // The number is a positive integer less than base.\n    // >>> numberToString(22, (3l))\n    // \"22\"\n    // >>> numberToString(1000, (2l))\n    // \"1000\"\n    // >>> numberToString(111, (2l))\n    // \"111\"\n    def numberToString(x : Long, base : Long) : String =",
    "        def toString(x : Long, base : Long) : String = {\n            if (x < 0) {\n                return \"-\" + toString(-x, base)\n            } else {\n                return toString(x, base)\n            }\n        }\n        if (x == 0) {\n            return \"0\"\n        } else {\n            return toString(x, base)\n        }",
    "        var result = \"\"\n        for (i <- 0 until x.toString().length) {\n            var digit = x.toString().charAt(i)\n            if (digit.isDigit()) {\n                result = result + digit.toString()\n            } else {\n                result = result + digit.toString()\n            }\n        }\n        return result\n    }\n\n    // Change the base of a number to the base 10.\n    // >>> changeBaseToBase10(8l)\n    // (8)\n    // >>> changeBaseToBase10(8l)\n    // (8)\n    // >>> changeBaseToBase10(7l)\n    // (7)\n    // >>> changeBaseToBase10(7l)\n    // (7)\n    def changeBaseToBase10(x : Long) : Long = {\n        return x\n    }\n\n    // Change the base of a number to the base 2.\n    // >>> changeBaseToBase2(8l)\n    // (8)\n    // >>> changeBaseToBase2(8l)\n    // (8)\n    // >>> changeBaseToBase2(7l)\n    // (7)\n    // >>> changeBaseToBase2(7l)\n    // (7)\n    def changeBaseToBase2(x : Long) : Long = {\n        return x\n    }\n\n    // Change the base of a number to the base 3.\n    // >>> changeBaseToBase3(8l)\n    // (8)\n    // >>> changeBaseToBase3(8l)\n    // (8)\n    // >>> changeBaseToBase3(7l)\n    // (7)\n    // >>> changeBaseToBase3(7l)\n    // (7)\n    def changeBaseToBase3(x : Long) : Long = {\n        return x\n    }\n\n    // Change the base of a number to the base 4.\n    // >>> changeBaseToBase4(8l)\n    // (8)\n    // >>> changeBaseToBase4(8l)\n    // (8)\n    // >>> changeBaseToBase4(7l)\n    // (7)\n    // >>> changeBaseToBase4(7l",
    "        val x_ = x\n        val base_ = base\n        val base_digits = scala.math.bitmask(base_).toList\n        val x_digits = scala.math.bitmask(x_).toList\n        val result = \"\"\n        for (i <- 0 until x_digits.length) {\n            val digit = x_digits(i)\n            val digit_base = base_digits(i)\n            val digit_base_digits = scala.math.bitmask(digit_base).toList\n            val digit_base_digits_length = digit_base_digits.length\n            val digit_base_digits_index = digit_base_digits.indexOf(digit)\n            val digit_base_digits_index_plus_1 = digit_base_digits_index + 1\n            val digit_base_digits_index_plus_2 = digit_base_digits_index + 2\n            val digit_base_digits_index_plus_3 = digit_base_digits_index + 3\n            val digit_base_digits_index_plus_4 = digit_base_digits_index + 4\n            val digit_base_digits_index_plus_5 = digit_base_digits_index + 5\n            val digit_base_digits_index_plus_6 = digit_base_digits_index + 6\n            val digit_base_digits_index_plus_7 = digit_base_digits_index + 7\n            val digit_base_digits_index_plus_8 = digit_base_digits_index + 8\n            val digit_base_digits_index_plus_9 = digit_base_digits_index + 9\n            val digit_base_digits_index_plus_10 = digit_base_digits_index + 10\n            val digit_base_digits_index_plus_11 = digit_base_digits_index + 11\n            val digit_base_digits_index_plus_12 = digit_base_digits_index + 12\n            val digit_base_digits_index_plus_13 = digit_base_digits_index + 13\n            val",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        val xStr = x.toString\n        val baseStr = base.toString\n        val result = \"\"\n        for (i <- 0 until xStr.length) {\n            val digit = xStr.substring(i, i + 1)\n            val digitBase = baseStr.substring(i, i + 1)\n            result += digitBase\n        }\n        return result\n    }\n\n    // Change the base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBase((8l), (3l), (2l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (10l))\n    // (\"8\")\n    // >>> changeBaseToBase((7l), (3l), (2l))\n    // (\"111\")\n    // >>> changeBaseToBase((7l), (3l), (10l))\n    // (\"7\")\n    def changeBaseToBase(x : Long, base1 : Long, base2 : Long) : String = {\n        val xStr = x.toString\n        val base1Str = base1.toString\n        val base2Str = base2.toString\n        val result = \"\"\n        for (i <- 0 until xStr.length) {\n            val digit = xStr.substring(i, i + 1)\n            val digitBase1 = base1Str.substring(i, i + 1)\n            val digitBase2 = base2Str.substring(i, i + 1)\n            result += digitBase2\n        }\n        return result\n    }\n\n    // Change the base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBaseToBase((8l), (3l), (2l), (10l))\n    // (\"8\")\n    // >>> changeBaseToBaseToBase((8l), (3l), (2l), (16l))\n    // (\"1000\")\n    // >>> changeBaseToBaseToBase((7l), (3l), (2l), (10l))\n    // (\"111\")\n    ",
    "        val b = scala.math.BigInt(x)\n        val n = scala.math.BigInt(base)\n        val result = b.divide(n).toString()\n        return result\n    }\n\n    // Change the base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBase((8l), (3l), (2l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (10l))\n    // (\"8\")\n    // >>> changeBaseToBase((7l), (2l), (10l))\n    // (\"7\")\n    // >>> changeBaseToBase((7l), (2l), (3l))\n    // (\"111\")\n    def changeBaseToBase(x : Long, base1 : Long, base2 : Long) : String = {\n        val b = scala.math.BigInt(x)\n        val n1 = scala.math.BigInt(base1)\n        val n2 = scala.math.BigInt(base2)\n        val result = b.divide(n1).multiply(n2).toString()\n        return result\n    }\n\n    // Change the base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBaseToBase((8l), (3l), (2l), (10l))\n    // (\"8\")\n    // >>> changeBaseToBaseToBase((8l), (3l), (2l), (3l))\n    // (\"1000\")\n    // >>> changeBaseToBaseToBase((7l), (2l), (2l), (3l))\n    // (\"111\")\n    def changeBaseToBaseToBase(x : Long, base1 : Long, base2 : Long, base3 : Long) : String = {\n        val b = scala.math.BigInt(x)\n        val n1 = scala.math.BigInt(base1)\n        val n2 = scala.math.BigInt(base2)\n        val n3 = scala",
    "        val x_ = x\n        val base_ = base\n        val result = \"\"\n        while (x_ > 0l) {\n            val digit = x_ % base_\n            result = digit.toString() + result\n            x_ = x_ / base_\n        }\n        return result\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 10.\n    // >>> convertToBase(\"22\", (3l))\n    // (8l)\n    // >>> convertToBase(\"1000\", (2l))\n    // (8l)\n    // >>> convertToBase(\"111\", (2l))\n    // (7l)\n    def convertToBase(s : String, base : Long) : Long = {\n        val s_ = s\n        val base_ = base\n        val result = 0l\n        for (i <- 0 until (s_.length - 1)) {\n            val digit = s_.charAt(i)\n            result = result * base_ + digit.toInt\n        }\n        return result\n    }\n\n    // Convert a number to a string representation in a given base.\n    // The string representation is in base 10.\n    // >>> convertToBase(8l, (3l))\n    // (\"22\")\n    // >>> convertToBase(8l, (2l))\n    // (\"1000\")\n    // >>> convertToBase(7l, (2l))\n    // (\"111\")\n    def convertToString(x : Long, base : Long) : String = {\n        val x_ = x\n        val base_ = base\n        val result = \"\"\n        while (x_ > 0l) {\n            val digit = x_ % base_\n            result = digit.toString() + result\n            x_ = x_ / base_\n        }\n        return result\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 10.\n    // >>> convertToBase(\"22\", (3l))\n    // (8l)\n    // >>> convertToBase(\"1000\", (2l))\n    // (8l)\n    // >>> convertToBase(\"111\", (2l))\n",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        var x_ = x\n        var base_ = base\n        var result = \"\"\n        while (x_ > 0) {\n            var digit = x_ % base_\n            result = digit.toString() + result\n            x_ = x_ / base_\n        }\n        return result\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 10.\n    // >>> stringToNumber(\"22\")\n    // 22\n    // >>> stringToNumber(\"1000\")\n    // 1000\n    // >>> stringToNumber(\"111\")\n    // 111\n    def stringToNumber(s : String) : Long = {\n        var result = 0l\n        var i = 0\n        while (i < s.length) {\n            var digit = s.charAt(i)\n            result = result * 10 + digit.toInt\n            i = i + 1\n        }\n        return result\n    }\n\n    // Convert a number to a string representation in base 10.\n    // >>> numberToString(22)\n    // \"22\"\n    // >>> numberToString(1000)\n    // \"1000\"\n    // >>> numberToString(111)\n    // \"111\"\n    def numberToString(n : Long) : String = {\n        var result = \"\"\n        var i = 0\n        while (i < 10) {\n            var digit = n % 10\n            result = digit.toString() + result\n            n = n / 10\n            i = i + 1\n        }\n        return result\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 2.\n    // >>> stringToNumber(\"22\")\n    // 22\n    // >>> stringToNumber(\"1000\")\n    // 1000\n    // >>> stringToNumber(\"111\")\n    // 111\n    def stringToNumber2(s : String) : Long = {\n        var result = 0l\n        var i = 0\n        while (i < s.length) {\n            var digit = s.charAt(i)\n            result = result * 2 + digit.toInt\n            i = i + 1\n        }\n        return result\n    }\n\n    // Convert a number",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        def _changeBase(x : Long, base : Long) : String = {\n            if (x == 0) {\n                \"\"\n            } else {\n                if (base == 10) {\n                    x.toString()\n                } else {\n                    _changeBase(x / base, base) + x % base\n                }\n            }\n        }\n        _changeBase(x, base)\n    }\n\n    // Convert a string representation of a number to the corresponding number.\n    // The string representation can be a single digit, a decimal number, or a\n    // fraction.\n    // >>> stringToNumber(\"0\")\n    // 0\n    // >>> stringToNumber(\"1\")\n    // 1\n    // >>> stringToNumber(\"2\")\n    // 2\n    // >>> stringToNumber(\"3\")\n    // 3\n    // >>> stringToNumber(\"4\")\n    // 4\n    // >>> stringToNumber(\"5\")\n    // 5\n    // >>> stringToNumber(\"6\")\n    // 6\n    // >>> stringToNumber(\"7\")\n    // 7\n    // >>> stringToNumber(\"8\")\n    // 8\n    // >>> stringToNumber(\"9\")\n    // 9\n    // >>> stringToNumber(\"10\")\n    // 10\n    // >>> stringToNumber(\"11\")\n    // 11\n    // >>> stringToNumber(\"12\")\n    // 12\n    // >>> stringToNumber(\"13\")\n    // 13\n    // >>> stringToNumber(\"14\")\n    // 14\n    // >>> stringToNumber(\"15\")\n    // 15\n    // >>> stringToNumber(\"16\")\n    // 16\n    // >>> stringToNumber(\"17\")\n    // 17\n    // >>> stringToNumber(\"18\")\n    // 18\n    // >>> stringToNumber(\"19\")\n    // 19\n    // >>> stringToNumber(\"20\")\n    // 20\n    // >>> stringToNumber(\"21\")\n    // 21\n    // >>> stringToNumber(\"22\")\n    // 22\n    // >>> stringToNumber(\"23\")\n    // 23\n    // >>> stringToNumber(\"24\")\n    // 24\n    // >>> stringToNumber(\"25\")\n    // 25\n    // >>> stringToNumber(\"26\")\n    // 26\n    ",
    "        var result = \"\"\n        var x_ = x\n        while (x_ > 0) {\n            var digit = x_ % base\n            result = digit + result\n            x_ = x_ / base\n        }\n        return result\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 10.\n    // >>> stringToNumber(\"22\")\n    // 22\n    // >>> stringToNumber(\"1000\")\n    // 8\n    // >>> stringToNumber(\"111\")\n    // 7\n    def stringToNumber(s : String) : Long = {\n        var result = 0l\n        var s_ = s\n        for (var i = s_.length - 1; i >= 0; i--) {\n            var digit = s_.charAt(i) - '0'\n            result = result * 10 + digit\n        }\n        return result\n    }\n\n    // Convert a number to a string representation in a given base.\n    // >>> numberToString(22, (2l))\n    // \"100\"\n    // >>> numberToString(8, (3l))\n    // \"1000\"\n    // >>> numberToString(7, (2l))\n    // \"111\"\n    def numberToString(x : Long, base : Long) : String = {\n        var result = \"\"\n        var x_ = x\n        while (x_ > 0) {\n            var digit = x_ % base\n            result = digit + result\n            x_ = x_ / base\n        }\n        return result\n    }\n\n    // Convert a string representation of a number to a string representation in a given base.\n    // The string representation is in base 10.\n    // >>> stringToString(\"100\", (2l))\n    // \"1000\"\n    // >>> stringToString(\"111\", (3l))\n    // \"1000\"\n    // >>> stringToString(\"1000\", (2l))\n    // \"1000\"\n    def stringToString(s : String, base : Long) : String = {\n        var result = \"\"\n        var s_ = s\n        for (var i = s_.length - 1; i >= 0; i--) {\n            var digit = s_.char",
    "        var result = \"\"\n        for (i <- 0 until x.toString().length) {\n            var digit = x.toString().charAt(i)\n            if (digit.toString().length == 1) {\n                result = result + digit\n            } else {\n                result = result + digit.toString().charAt(0) + result\n            }\n        }\n        result = result + \"0\"\n        return result\n    }\n\n    // Change the base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBase((8l), (3l), (2l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (2l), (3l))\n    // (\"100\")\n    // >>> changeBaseToBase((7l), (2l), (3l))\n    // (\"111\")\n    def changeBaseToBase(x : Long, base1 : Long, base2 : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until x.toString().length) {\n            var digit = x.toString().charAt(i)\n            if (digit.toString().length == 1) {\n                result = result + digit\n            } else {\n                result = result + digit.toString().charAt(0) + result\n            }\n        }\n        result = result + \"0\"\n        return result\n    }\n\n    // Change the base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBase((8l), (3l), (2l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (2l), (3l))\n    // (\"100\")\n    // >>> changeBaseToBase((7l), (2l), (3l))\n    // (\"111\")\n    def changeBaseToBase2(x : Long, base1 : Long, base2 : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until x.toString().length) {\n            var digit = x.toString().",
    "        var y = x\n        var result = \"\"\n        while (y != 0) {\n            var digit = y % base\n            result = digit + result\n            y = y / base\n        }\n        return result\n    }\n\n    // Change the numerical base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBase((8l), (3l), (2l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (10l))\n    // (\"8\")\n    // >>> changeBaseToBase((7l), (3l), (2l))\n    // (\"111\")\n    def changeBaseToBase(x : Long, base1 : Long, base2 : Long) : String = {\n        var y = x\n        var result = \"\"\n        while (y != 0) {\n            var digit = y % base1\n            result = digit + result\n            y = y / base1\n        }\n        return result.toString() + changeBase(result, base2)\n    }\n\n    // Change the numerical base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBaseToBase((8l), (3l), (2l), (10l))\n    // (\"8\")\n    // >>> changeBaseToBaseToBase((8l), (3l), (2l), (16l))\n    // (\"10\")\n    // >>> changeBaseToBaseToBase((7l), (3l), (2l), (10l))\n    // (\"111\")\n    def changeBaseToBaseToBase(x : Long, base1 : Long, base2 : Long, base3 : Long) : String = {\n        var y = x\n        var result = \"\"\n        while (y != 0) {\n            var digit = y % base1\n            result = digit + result\n            y = y / base1\n        }\n        return result.toString() + changeBase(result, base2) + changeBase(result, base3)",
    "        val x_ = x\n        val base_ = base\n        val res = \"\"\n        while (x_ > 0) {\n            val digit = x_ % base_\n            res = digit.toString() + res\n            x_ = x_ / base_\n        }\n        return res",
    "        var result = \"\"\n        var x_ = x\n        while (x_ > 0) {\n            var digit = x_ % base\n            result = digit + result\n            x_ = x_ / base\n        }\n        return result\n    }\n\n    // Convert a string to a number.\n    // The string is a sequence of digits in some radix.\n    // The digits are stored in the array digits.\n    // The first character of the string is stored in the variable firstChar.\n    // The radix is stored in the variable radix.\n    // The number is stored in the variable number.\n    // >>> stringToNumber(\"123\")\n    // (123)\n    // >>> stringToNumber(\"10\")\n    // (10)\n    // >>> stringToNumber(\"100\")\n    // (100)\n    // >>> stringToNumber(\"100\")\n    // (100)\n    // >>> stringToNumber(\"100\")\n    // (100)\n    // >>> stringToNumber(\"100\")\n    // (100)\n    // >>> stringToNumber(\"100\")\n    // (100)\n    // >>> stringToNumber(\"100\")\n    // (100)\n    // >>> stringToNumber(\"100\")\n    // (100)\n    // >>> stringToNumber(\"100\")\n    // (100)\n    // >>> stringToNumber(\"100\")\n    // (100)\n    // >>> stringToNumber(\"100\")\n    // (100)\n    // >>> stringToNumber(\"100\")\n    // (100)\n    // >>> stringToNumber(\"100\")\n    // (100)\n    // >>> stringToNumber(\"100\")\n    // (100)\n    // >>> stringToNumber(\"100\")\n    // (100)\n    // >>> stringToNumber(\"100\")\n    // (100)\n    // >>> stringToNumber(\"100\")\n    // (100)\n    // >>> stringToNumber(\"100\")\n    // (100)\n    // >>> stringToNumber(\"100\")\n    // (100)\n    // >>> stringToNumber(\"100\")\n    // (100)\n    // >>> stringToNumber(\"100\")\n    // (100)\n    // >>> stringToNumber(\"100\")\n    // (100)\n    // >>> stringToNumber",
    "        var y = x\n        var result = \"\"\n        while (y > 0) {\n            var digit = y % base\n            result = digit.toString() + result\n            y = y / base\n        }\n        return result\n    }\n\n    // Return the number of 1s in the binary representation of x.\n    // >>> countOnes(5l)\n    // (1)\n    // >>> countOnes(7l)\n    // (2)\n    // >>> countOnes(8l)\n    // (3)\n    // >>> countOnes(9l)\n    // (0)\n    def countOnes(x : Long) : Int = {\n        var result = 0\n        while (x > 0) {\n            var digit = x % 2\n            result = digit + result\n            x = x / 2\n        }\n        return result\n    }\n\n    // Return the number of 0s in the binary representation of x.\n    // >>> countZeros(5l)\n    // (0)\n    // >>> countZeros(7l)\n    // (1)\n    // >>> countZeros(8l)\n    // (3)\n    // >>> countZeros(9l)\n    // (2)\n    def countZeros(x : Long) : Int = {\n        var result = 0\n        while (x > 0) {\n            var digit = x % 2\n            result = digit + result\n            x = x / 2\n        }\n        return result\n    }\n\n    // Return the number of 1s in the binary representation of x.\n    // >>> countOnes(5l)\n    // (1)\n    // >>> countOnes(7l)\n    // (2)\n    // >>> countOnes(8l)\n    // (3)\n    // >>> countOnes(9l)\n    // (0)\n    def countOnes(x : Long) : Int = {\n        var result = 0\n        while (x > 0) {\n            var digit = x % 2\n            result = digit + result\n            x = x / 2\n        }\n        return result\n    }\n\n    // Return the number of 0s in the binary representation of x.\n    ",
    "        val x_ = x\n        val base_ = base\n        val base_digits = toCharArray(base_)\n        val x_digits = toCharArray(x_)\n        val result = \"\"\n        for (i <- 0 until x_.length) {\n            val digit = x_digits[i]\n            val base_digit = base_digits[i]\n            val digit_value = digit.toInt\n            val base_digit_value = base_digit.toInt\n            val digit_value_in_base = digit_value * base_\n            val base_digit_value_in_base = base_digit_value * base_\n            val digit_value_in_base_as_string = toString(digit_value_in_base)\n            val base_digit_value_in_base_as_string = toString(base_digit_value_in_base)\n            result = result + base_digit_value_in_base_as_string\n        }\n        result",
    "        val xStr = x.toString\n        val baseStr = base.toString\n        val result = \"\"\n        for (i <- 0 until xStr.length) {\n            val digit = xStr[i]\n            val digitBase = digit.toChar\n            val digitBaseStr = digitBase.toString\n            val digitBaseStrLen = digitBaseStr.length\n            val digitBaseStrLenMod = digitBaseStrLen % base\n            val digitBaseStrLenDiv = digitBaseStrLen / base\n            val digitBaseStrLenMod10 = digitBaseStrLenMod % 10\n            val digitBaseStrLenDiv10 = digitBaseStrLenDiv % 10\n            val digitBaseStrLenMod10Str = digitBaseStrLenMod10.toString\n            val digitBaseStrLenDiv10Str = digitBaseStrLenDiv10.toString\n            val digitBaseStrLenMod10StrLen = digitBaseStrLenMod10Str.length\n            val digitBaseStrLenDiv10StrLen = digitBaseStrLenDiv10Str.length\n            val digitBaseStrLenMod10StrLenMod = digitBaseStrLenMod10Str.length % base\n            val digitBaseStrLenDiv10StrLenDiv = digitBaseStrLenDiv10Str.length / base\n            val digitBaseStrLenMod10StrLenDiv10 = digitBaseStrLenMod10StrLenMod % 10\n            val digitBaseStrLenDiv10StrLenDiv10 = digitBaseStrLenDiv10StrLenDiv % 10\n            val digitBaseStrLenMod10StrLenDiv10Str = digitBaseStrLenMod10StrLenMod10Str.toString\n            val digitBaseStrLenDiv10StrLenDiv10StrLen = digitBaseStrLenDiv10StrLenDiv10Str.length\n            val digitBaseStrLenDiv10StrLenDiv10StrLenDiv = digitBaseStrLenDiv10StrLenDiv10Str.length / base\n            val digitBaseStrLenDiv10StrLenDiv10StrLenDiv10 = digitBaseStrLenDiv10StrLenDiv10StrLenDiv % 10\n            val digitBaseStrLenDiv10StrLenDiv10StrLenDiv10Str = digitBaseStrLenDiv10StrLenDiv10StrLenDiv10Str.toString\n            val digitBaseStrLenDiv10StrLenDiv10StrLenDiv10StrLen = digitBaseStrLen",
    "        def changeBaseHelper(x, base) : String = {\n            if (x == 0) return \"0\"\n            if (base == 10) return x.toString()\n            if (base == 2) return x.toString(2)\n            if (base == 3) return x.toString(3)\n            if (base == 4) return x.toString(4)\n            if (base == 5) return x.toString(5)\n            if (base == 6) return x.toString(6)\n            if (base == 7) return x.toString(7)\n            if (base == 8) return x.toString(8)\n            if (base == 9) return x.toString(9)\n            throw new RuntimeException(\"Invalid base\")\n        }\n        return changeBaseHelper(x, base)",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        val x_ = x\n        val base_ = base\n        val base_digits = toCharArray(base_)\n        val x_digits = toCharArray(x_)\n        val result = \"\"\n        for (i <- 0 until x_digits.length) {\n            val digit = x_digits.apply(i)\n            val index = base_digits.indexOf(digit)\n            if (index >= 0) {\n                result = result + base_digits.apply(index)\n            } else {\n                result = result + digit\n            }\n        }\n        return result\n    }\n\n    // Convert a string representation of a number in a given base to the\n    // numerical representation.\n    // base numbers are less than 10.\n    // >>> convert(\"22\", (3l))\n    // (8l)\n    // >>> convert(\"1000\", (2l))\n    // (8l)\n    // >>> convert(\"111\", (2l))\n    // (7l)\n    def convert(s : String, base : Long) : Long = {\n        val s_ = s\n        val base_ = base\n        val base_digits = toCharArray(base_)\n        val s_digits = toCharArray(s_)\n        val result = 0l\n        for (i <- 0 until s_digits.length) {\n            val digit = s_digits.apply(i)\n            val index = base_digits.indexOf(digit)\n            if (index >= 0) {\n                result = result + (base_ * (index + 1))\n            } else {\n                result = result + (base_ * digit)\n            }\n        }\n        return result\n    }\n\n    // Convert a string representation of a number in a given base to the\n    // numerical representation.\n    // base numbers are less than 10.\n    // >>> convert(\"22\", (3l))\n    // (8l)\n    // >>> convert(\"1000\", (2l))\n    // (8l)\n    // >>> convert(\"111\", (2l))\n    // (7l)\n    def convert2(s : String, base : Long) : Long = {\n        val s_ =",
    "        var result = \"\"\n        var tmp = x\n        while (tmp > 0) {\n            result = (tmp % base) + result\n            tmp /= base\n        }\n        return result\n    }\n\n    // Change the number of digits of input number x to digits.\n    // return string representation after the conversion.\n    // >>> changeDigits((8l), (3l))\n    // (\"22\")\n    // >>> changeDigits((8l), (2l))\n    // (\"1000\")\n    // >>> changeDigits((7l), (2l))\n    // (\"111\")\n    def changeDigits(x : Long, digits : Long) : String = {\n        var result = \"\"\n        var tmp = x\n        while (tmp > 0) {\n            result = (tmp % 10) + result\n            tmp /= 10\n        }\n        return result\n    }\n\n    // Change the number of digits of input number x to digits.\n    // return string representation after the conversion.\n    // >>> changeDigits2((8l), (3l))\n    // (\"22\")\n    // >>> changeDigits2((8l), (2l))\n    // (\"1000\")\n    // >>> changeDigits2((7l), (2l))\n    // (\"111\")\n    def changeDigits2(x : Long, digits : Long) : String = {\n        var result = \"\"\n        var tmp = x\n        while (tmp > 0) {\n            result = (tmp % 10) + result\n            tmp /= 10\n        }\n        return result\n    }\n\n    // Change the number of digits of input number x to digits.\n    // return string representation after the conversion.\n    // >>> changeDigits3((8l), (3l))\n    // (\"22\")\n    // >>> changeDigits3((8l), (2l))\n    // (\"1000\")\n    // >>> changeDigits3((7l), (2l))\n    // (\"111\")\n    def changeDigits3(x : Long, digits : Long) : String = {\n        var result = \"\"\n        var tmp = x\n        while (tmp > 0) {\n            result = (tmp % 10) + result\n            tmp /= 10\n        ",
    "        if (x == 0) return \"0\"\n        if (x < 0) return \"-\" + changeBase(-x, base)\n        if (base == 10) return toString(x)\n        if (base < 10) return toString(x, base)\n        if (base > 10) return toString(x, base)\n    }\n\n    // Convert a string to a number.\n    // The string can be a decimal number, or a number in any base less than 10.\n    // >>> stringToNumber(\"123\")\n    // 123\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"100\")",
    "        val b = scala.math.BigInteger.valueOf(x)\n        val bb = b.toString(base)\n        return bb\n    }\n\n    // Convert a string to a number.\n    // The string is a sequence of digits from base 10.\n    // >>> stringToNumber(\"22\")\n    // 22\n    // >>> stringToNumber(\"1000\")\n    // 1000\n    // >>> stringToNumber(\"111\")\n    // 111\n    def stringToNumber(s : String) : Long = {\n        val b = scala.math.BigInteger.valueOf(s)\n        return b.longValue()\n    }\n\n    // Convert a number to a string.\n    // The number is a sequence of digits from base 10.\n    // >>> numberToString(22)\n    // \"22\"\n    // >>> numberToString(1000)\n    // \"1000\"\n    // >>> numberToString(111)\n    // \"111\"\n    def numberToString(x : Long) : String = {\n        val b = scala.math.BigInteger.valueOf(x)\n        return b.toString()\n    }\n\n    // Convert a string to a list of digits.\n    // >>> stringToDigits(\"22\")\n    // [2, 2]\n    // >>> stringToDigits(\"1000\")\n    // [1, 0, 0, 0]\n    // >>> stringToDigits(\"111\")\n    // [1, 1, 1]\n    def stringToDigits(s : String) : scala.collection.immutable.List[Long] = {\n        val b = scala.math.BigInteger.valueOf(s)\n        return b.toList()\n    }\n\n    // Convert a list of digits to a string.\n    // >>> digitsToString([2, 2])\n    // \"22\"\n    // >>> digitsToString([1, 0, 0, 0])\n    // \"1000\"\n    // >>> digitsToString([1, 1, 1])\n    // \"111\"\n    def digitsToString(l : scala.collection.immutable.List[Long]) : String = {\n        val b = scala.math.BigInteger.apply(l)\n        return",
    "        def convert(x : Long, base : Long) : String = {\n            if (x == 0) return \"\"\n            if (x < 0) return \"-\" + convert(-x, base)\n            if (base == 10) return x.toString()\n            if (base == 2) return \"\" + (x & 1)\n            if (base == 3) return \"\" + (x % 3)\n            if (base == 4) return \"\" + (x % 4)\n            if (base == 5) return \"\" + (x % 5)\n            if (base == 6) return \"\" + (x % 6)\n            if (base == 7) return \"\" + (x % 7)\n            if (base == 8) return \"\" + (x % 8)\n            if (base == 9) return \"\" + (x % 9)\n            if (base == 11) return \"\" + (x % 11)\n            if (base == 12) return \"\" + (x % 12)\n            if (base == 13) return \"\" + (x % 13)\n            if (base == 14) return \"\" + (x % 14)\n            if (base == 15) return \"\" + (x % 15)\n            if (base == 16) return \"\" + (x % 16)\n            if (base == 17) return \"\" + (x % 17)\n            if (base == 18) return \"\" + (x % 18)\n            if (base == 19) return \"\" + (x % 19)\n            if (base == 20) return \"\" + (x % 20)\n            if (base == 21) return \"\" + (x % 21)\n            if (base == 22) return \"\" + (x % 22)\n            if (base == 23) return \"\" + (x % 23)\n            if (base == 24) return \"\" + (x % 24)\n            if (base == 25) return \"\" + (x % 25)\n            if (base == 26) return \"\" + (x % 26)\n            if (base == 27) return \"\" + (x % 27)\n            if (base == 28) return \"\" + (x % 28)\n            if (base == 29) return \"\" + (x % 29)\n            if (base == 30) return \"\" + (x % 30)\n            if (base ==",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        val b = scala.math.BigInt(x)\n        val result = b.toString(base)\n        return result",
    "        def toStr(x : Long) : String = {\n            if (x == 0) {\n                \"0\"\n            } else {\n                def toStr(x : Long) : String = {\n                    if (x == 0) {\n                        \"0\"\n                    } else {\n                        if (x < 0) {\n                            \"-\" + toStr(-x)\n                        } else {\n                            toStr(x / base)\n                        }\n                    }\n                }\n                toStr(x)\n            }\n        }\n        toStr(x)",
    "        val x_ = x\n        val base_ = base\n        val res = \"\"\n        while (x_ > 0) {\n            val digit = x_ % base_\n            res = digit + res\n            x_ = x_ / base_\n        }\n        return res\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 10.\n    // >>> stringToNumber(\"22\")\n    // 22\n    // >>> stringToNumber(\"1000\")\n    // 1000\n    // >>> stringToNumber(\"111\")\n    // 111\n    def stringToNumber(s : String) : Long = {\n        val res = 0l\n        for (i <- 0 until s.length) {\n            val digit = s.charAt(i)\n            res = res * 10 + digit\n        }\n        return res\n    }\n\n    // Convert a number to a string representation in base 10.\n    // >>> numberToString(22)\n    // \"22\"\n    // >>> numberToString(1000)\n    // \"1000\"\n    // >>> numberToString(111)\n    // \"111\"\n    def numberToString(x : Long) : String = {\n        val res = \"\"\n        while (x > 0) {\n            val digit = x % 10\n            res = digit + res\n            x = x / 10\n        }\n        return res\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 2.\n    // >>> stringToNumber(\"22\")\n    // 22\n    // >>> stringToNumber(\"1000\")\n    // 1000\n    // >>> stringToNumber(\"111\")\n    // 111\n    def stringToNumber2(s : String) : Long = {\n        val res = 0l\n        for (i <- 0 until s.length) {\n            val digit = s.charAt(i)\n            res = res * 2 + digit\n        }\n        return res\n    }\n\n    // Convert a number to a string representation in base 2.\n    // >>> numberToString2(22)\n    // \"11\"\n    // >>> numberToString2(1000)\n    // \"100\"\n    // >>> numberToString",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        def baseString = \"\"\n        for (i <- 0 until x.toString().length) {\n            baseString = baseString + x.toString().charAt(i)\n            if (i + 1) % base == 0 {\n                baseString = baseString + \" \"\n            }\n        }\n        return baseString",
    "        var y = x\n        for (var i = 0; i < base; i++) {\n            y = y * 10\n        }\n        return y.toString()\n    }\n\n    // Convert a string to a number.\n    // The string may be a decimal, octal, or hexadecimal number.\n    // >>> convertToNumber(\"12\")\n    // (12l)\n    // >>> convertToNumber(\"0xFF\")\n    // (255l)\n    // >>> convertToNumber(\"0xF\")\n    // (15l)\n    // >>> convertToNumber(\"0x\")\n    // (0l)\n    // >>> convertToNumber(\"0\")\n    // (0l)\n    // >>> convertToNumber(\"0xFFF\")\n    // (4095l)\n    // >>> convertToNumber(\"0xFFFF\")\n    // (65535l)\n    // >>> convertToNumber(\"0xFFFFFF\")\n    // (16777215l)\n    // >>> convertToNumber(\"0xFFFFFFFF\")\n    // (4294967295l)\n    // >>> convertToNumber(\"0xFFFFFFFFFFFFFFFF\")\n    // (9223372036854775807l)\n    def convertToNumber(s : String) : Long = {\n        var x = s.toLong\n        if (x == 0) {\n            return 0l\n        }\n        var i = 0\n        while (i < s.length && s.charAt(i) == '0') {\n            i += 1\n        }\n        if (i == s.length) {\n            return x\n        }\n        var base = 10\n        if (s.charAt(i) == 'x' || s.charAt(i) == 'X') {\n            base = 16\n            i += 1\n        } else if (s.charAt(i) == 'b' || s.charAt(i) == 'B') {\n            base = 2\n            i += 1\n        }\n        var y = x\n        for (var j = i; j < s.length; j++) {\n            var c = s.charAt(j)\n            if (c >= '0' && c <= '9')",
    "        var result = \"\"\n        var x_ = x\n        while (x_ > 0l) {\n            var digit = x_ % base\n            result = digit.toString() + result\n            x_ = x_ / base\n        }\n        return result",
    "        def _changeBase(x : Long, base : Long) : String = {\n            if (x == 0) return \"0\"\n            if (base == 10) return x.toString()\n            if (base < 10) return _changeBase(x, 10)\n            if (base > 10) return _changeBase(x, base)\n        }\n        _changeBase(x, base)",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        val x_ = x\n        val base_ = base\n        val result = \"\"\n        while (x_ > 0l) {\n            val digit = x_ % base_\n            result = digit.toString() + result\n            x_ = x_ / base_\n        }\n        result\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 10.\n    // >>> stringToNumber(\"22\")\n    // 22\n    // >>> stringToNumber(\"1000\")\n    // 1000\n    // >>> stringToNumber(\"111\")\n    // 111\n    def stringToNumber(s : String) : Long = {\n        val result = 0l\n        val s_ = s\n        for (i <- 0 until s_.length) {\n            val digit = s_.charAt(i)\n            result = result * 10 + digit.toInt\n        }\n        result\n    }\n\n    // Convert a number to a string representation in base 10.\n    // >>> numberToString(22)\n    // \"22\"\n    // >>> numberToString(1000)\n    // \"1000\"\n    // >>> numberToString(111)\n    // \"111\"\n    def numberToString(x : Long) : String = {\n        val result = \"\"\n        val x_ = x\n        while (x_ > 0l) {\n            val digit = x_ % 10\n            result = digit.toString() + result\n            x_ = x_ / 10\n        }\n        result\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 2.\n    // >>> stringToNumber(\"22\")\n    // 22\n    // >>> stringToNumber(\"1000\")\n    // 1000\n    // >>> stringToNumber(\"111\")\n    // 111\n    def stringToNumber2(s : String) : Long = {\n        val result = 0l\n        val s_ = s\n        for (i <- 0 until s_.length) {\n            val digit = s_.charAt(i)\n            result = result * 2 + digit.toInt\n        }\n        result\n    }\n\n    // Convert a number to a string representation in base 2.\n    // >>>",
    "        val x_ = x\n        val base_ = base\n        val base_digits = scala.math.bitmask(base_).toInt\n        val x_digits = scala.math.bitmask(x_).toInt\n        val x_base = scala.math.bitmask(x_).toLong\n        val x_base_digits = scala.math.bitmask(x_base).toInt\n        val x_base_digits_ = x_base_digits\n        val x_base_digits__ = x_base_digits_\n        val x_base_digits__$1 = x_base_digits__\n        val x_base_digits__$2 = x_base_digits__$1\n        val x_base_digits__$3 = x_base_digits__$2\n        val x_base_digits__$4 = x_base_digits__$3\n        val x_base_digits__$5 = x_base_digits__$4\n        val x_base_digits__$6 = x_base_digits__$5\n        val x_base_digits__$7 = x_base_digits__$6\n        val x_base_digits__$8 = x_base_digits__$7\n        val x_base_digits__$9 = x_base_digits__$8\n        val x_base_digits__$10 = x_base_digits__$9\n        val x_base_digits__$11 = x_base_digits__$10\n        val x_base_digits__$12 = x_base_digits__$11\n        val x_base_digits__$13 = x_base_digits__$12\n        val x_base_digits__$14 = x_base_digits__$13\n        val x_base_digits__$15 = x_base_digits__$14\n        val x_base_digits__$16 = x_base_digits__$15\n        val x_base_digits__$17 = x_base_digits__$16\n        val x_base",
    "        val y = x.toString(base)\n        val z = y.toCharArray\n        val a = scala.collection.mutable.ArrayBuffer()\n        for (i <- 0 until z.length) {\n            if (z[i] == '1') {\n                a.append(z[i])\n            }\n        }\n        return a.toString",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        var x_ = x\n        var base_ = base\n        var result = \"\"\n        while (x_ > 0) {\n            var digit = x_ % base_\n            result = digit + result\n            x_ = x_ / base_\n        }\n        return result",
    "        val x_ = x\n        val base_ = base\n        val res = \"\"\n        while (x_ > 0) {\n            val digit = x_ % base_\n            res = digit.toString() + res\n            x_ = x_ / base_\n        }\n        return res\n    }\n\n    // Convert a string representation of a number in base b to a number in base a.\n    // return the string representation of the number after the conversion.\n    // >>> convertBase(\"22\", (3l))\n    // (\"8\")\n    // >>> convertBase(\"1000\", (2l))\n    // (\"8\")\n    // >>> convertBase(\"111\", (2l))\n    // (\"7\")\n    def convertBase(s : String, b : Long) : String = {\n        val s_ = s\n        val b_ = b\n        val res = \"\"\n        for (i <- 0 until s_.length) {\n            val digit = s_.charAt(i)\n            val base = b_\n            val res_ = \"\"\n            for (j <- 0 until digit.length) {\n                val d = digit.charAt(j)\n                val res_ = d.toString() + res_\n                base = base * b_\n            }\n            res = res + res_\n        }\n        return res\n    }\n\n    // Convert a string representation of a number in base b to a number in base a.\n    // return the string representation of the number after the conversion.\n    // >>> convertBase(\"8\", (3l))\n    // (\"22\")\n    // >>> convertBase(\"8\", (2l))\n    // (\"1000\")\n    // >>> convertBase(\"7\", (2l))\n    // (\"111\")\n    def convertBase2(s : String, b : Long) : String = {\n        val s_ = s\n        val b_ = b\n        val res = \"\"\n        for (i <- 0 until s_.length) {\n            val digit = s_.charAt(i)\n            val base = b_\n            val res_ = \"\"\n            for (j <- 0 until digit.length) {\n                val d = digit.charAt(j)\n                val res_ = d.toString() +",
    "        def toString(x : Long, base : Long) : String = {\n            if (x < 0) {\n                return toString(-x, base)\n            }\n            if (base == 10) {\n                return toString(x, base)\n            }\n            if (base == 2) {\n                return toString(x, base)\n            }\n            if (base == 3) {\n                return toString(x, base)\n            }\n            if (base == 4) {\n                return toString(x, base)\n            }\n            if (base == 5) {\n                return toString(x, base)\n            }\n            if (base == 6) {\n                return toString(x, base)\n            }\n            if (base == 7) {\n                return toString(x, base)\n            }\n            if (base == 8) {\n                return toString(x, base)\n            }\n            if (base == 9) {\n                return toString(x, base)\n            }\n            return toString(x, base)\n        }\n        return toString(x, base)",
    "        def change(x : Long) : String = {\n            if (x < 0) {\n                return \"-\" + change(-x)\n            } else {\n                return \"\" + x\n            }\n        }\n        return change(x).toString(base)\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 10.\n    // >>> stringToNumber(\"22\")\n    // 22\n    // >>> stringToNumber(\"1000\")\n    // 1000\n    // >>> stringToNumber(\"111\")\n    // 111\n    def stringToNumber(s : String) : Long = {\n        if (s.startsWith(\"-\")) {\n            return -stringToNumber(s.substring(1))\n        } else {\n            return Long.parseLong(s)\n        }\n    }\n\n    // Convert a number to a string representation in base 10.\n    // >>> numberToString(22)\n    // \"22\"\n    // >>> numberToString(1000)\n    // \"1000\"\n    // >>> numberToString(111)\n    // \"111\"\n    def numberToString(x : Long) : String = {\n        if (x < 0) {\n            return \"-\" + numberToString(-x)\n        } else {\n            return x.toString()\n        }\n    }\n\n    // Convert a string representation of a number to a string representation in base 2.\n    // >>> stringToBase2(\"22\")\n    // \"101010\"\n    // >>> stringToBase2(\"1000\")\n    // \"100000\"\n    // >>> stringToBase2(\"111\")\n    // \"110101\"\n    def stringToBase2(s : String) : String = {\n        return changeBase(stringToNumber(s), 2)\n    }\n\n    // Convert a string representation of a number to a string representation in base 3.\n    // >>> stringToBase3(\"22\")\n    // \"100100\"\n    // >>> stringToBase3(\"1000\")\n    // \"100000\"\n    // >>> stringToBase3(\"111\")\n    // \"110101\"\n    def stringToBase3(s : String) : String = {\n        return changeBase(",
    "        val b = scala.math.BigInteger.valueOf(x)\n        val bb = scala.math.BigInteger.valueOf(base)\n        val result = b.divide(bb).toString()\n        return result\n    }\n\n    // Change the numerical base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBase((8l), (3l), (2l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (10l))\n    // (\"8\")\n    // >>> changeBaseToBase((7l), (2l), (10l))\n    // (\"7\")\n    // >>> changeBaseToBase((7l), (2l), (3l))\n    // (\"111\")\n    def changeBaseToBase(x : Long, base1 : Long, base2 : Long) : String = {\n        val b = scala.math.BigInteger.valueOf(x)\n        val bb1 = scala.math.BigInteger.valueOf(base1)\n        val bb2 = scala.math.BigInteger.valueOf(base2)\n        val result = b.divide(bb1).multiply(bb2).toString()\n        return result\n    }\n\n    // Change the numerical base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBaseToBase((8l), (3l), (2l), (10l))\n    // (\"8\")\n    // >>> changeBaseToBaseToBase((8l), (3l), (2l), (3l))\n    // (\"111\")\n    // >>> changeBaseToBaseToBase((7l), (2l), (10l), (3l))\n    // (\"7\")\n    // >>> changeBaseToBaseToBase((7l), (2l), (3l), (3l))\n    // (\"111\")\n    def changeBaseToBaseToBase(x : Long, base1 : Long, base2 : Long, base3 : Long) : String = {\n        val b =",
    "        val x_ = x\n        val base_ = base\n        val result = \"\"\n        if (x_ < 0) {\n            result = \"-\"\n            x_ = -x_\n        }\n        if (base_ < 2) {\n            throw new IllegalArgumentException(\"Base must be greater than 2\")\n        }\n        if (base_ > 10) {\n            throw new IllegalArgumentException(\"Base must be less than 10\")\n        }\n        if (x_ == 0) {\n            result = \"\"\n        } else {\n            var i = 0\n            while (x_ > 0) {\n                result = (base_ * result) + (x_ % base_)\n                x_ = x_ / base_\n                i += 1\n            }\n            if (i == 0) {\n                result = \"0\"\n            }\n        }\n        return result",
    "        var xStr = x.toString\n        var baseStr = base.toString\n        var result = \"\"\n        var i = 0\n        while (i < xStr.length) {\n            var digit = xStr.charAt(i)\n            var digitValue = digit - '0'\n            var digitBase = baseStr.charAt(i)\n            var digitBaseValue = digitBase - '0'\n            var digitBasePower = Math.pow(digitBase, i)\n            var digitValuePower = Math.pow(digitValue, i)\n            result = result + digitBasePower * digitValuePower\n            i = i + 1\n        }\n        return result",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        var result = \"\"\n        var x_ = x\n        while (x_ > 0) {\n            var digit = x_ % base\n            result = digit + result\n            x_ = x_ / base\n        }\n        return result\n    }\n\n    // Return the number of 1s in the binary representation of n.\n    // >>> countOnes(5)\n    // 2\n    // >>> countOnes(7)\n    // 3\n    // >>> countOnes(8)\n    // 4\n    // >>> countOnes(9)\n    // 5\n    def countOnes(n : Long) : Long = {\n        var result = 0l\n        var n_ = n\n        while (n_ > 0) {\n            var digit = n_ % 2\n            result = digit + result\n            n_ = n_ / 2\n        }\n        return result\n    }\n\n    // Return the number of 0s in the binary representation of n.\n    // >>> countZeros(5)\n    // 2\n    // >>> countZeros(7)\n    // 3\n    // >>> countZeros(8)\n    // 4\n    // >>> countZeros(9)\n    // 5\n    def countZeros(n : Long) : Long = {\n        var result = 0l\n        var n_ = n\n        while (n_ > 0) {\n            var digit = n_ % 2\n            result = result + 1l\n            n_ = n_ / 2\n        }\n        return result\n    }\n\n    // Return the number of 1s in the decimal representation of n.\n    // >>> countOnes(5)\n    // 2\n    // >>> countOnes(7)\n    // 3\n    // >>> countOnes(8)\n    // 4\n    // >>> countOnes(9)\n    // 5\n    def countOnes(n : Long) : Long = {\n        var result = 0l\n        var n_ = n\n        while (n_ > 0) {\n            var digit = n_ % 10\n            result = digit + result\n            n_ = n_ / 10\n        }\n        return result\n    }\n\n    // Return the number of 0s in the decimal representation of n.",
    "        val x_ = x\n        val base_ = base\n        val result = \"\"\n        while (x_ > 0) {\n            val digit = x_ % base_\n            result = digit.toString() + result\n            x_ = x_ / base_\n        }\n        result\n    }\n\n    // Return the number of 1s in the binary representation of x.\n    // >>> countOnes(8l)\n    // (3)\n    // >>> countOnes(7l)\n    // (2)\n    // >>> countOnes(0l)\n    // (0)\n    def countOnes(x : Long) : Int = {\n        val x_ = x\n        val result = 0\n        while (x_ > 0) {\n            val digit = x_ % 2\n            result = digit + result\n            x_ = x_ / 2\n        }\n        result\n    }\n\n    // Return the number of 0s in the binary representation of x.\n    // >>> countZeros(8l)\n    // (7)\n    // >>> countZeros(7l)\n    // (6)\n    // >>> countZeros(0l)\n    // (0)\n    def countZeros(x : Long) : Int = {\n        val x_ = x\n        val result = 0\n        while (x_ > 0) {\n            val digit = x_ % 2\n            result = digit + result\n            x_ = x_ / 2\n        }\n        result\n    }\n\n    // Return the number of 1s in the decimal representation of x.\n    // >>> countOnes(8)\n    // (3)\n    // >>> countOnes(7)\n    // (2)\n    // >>> countOnes(0)\n    // (0)\n    def countOnes(x : Int) : Int = {\n        val x_ = x\n        val result = 0\n        while (x_ > 0) {\n            val digit = x_ % 10\n            result = digit + result\n            x_ = x_ / 10\n        }\n        result\n    }\n\n    // Return the number of 0s in the decimal representation of x.\n    // >>> countZeros(8)\n    //",
    "        var x_ = x\n        var base_ = base\n        var result = \"\"\n        while (x_ > 0) {\n            var digit = x_ % base_\n            result = digit + result\n            x_ = x_ / base_\n        }\n        return result",
    "        var y = x\n        var result = \"\"\n        while (y > 0) {\n            var digit = y % base\n            result = digit + result\n            y /= base\n        }\n        return result\n    }\n\n    // Change the numerical base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBase((8l), (3l), (2l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (10l))\n    // (\"22\")\n    // >>> changeBaseToBase((7l), (2l), (10l))\n    // (\"111\")\n    def changeBaseToBase(x : Long, base1 : Long, base2 : Long) : String = {\n        var y = x\n        var result = \"\"\n        while (y > 0) {\n            var digit = y % base1\n            result = digit + result\n            y /= base1\n        }\n        return result.toString().replaceAll(\"^0+\", \"\") + changeBase(result, base2)\n    }\n\n    // Change the numerical base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBaseToBase((8l), (3l), (2l), (10l))\n    // (\"1000\")\n    // >>> changeBaseToBaseToBase((8l), (3l), (2l), (16l))\n    // (\"22\")\n    // >>> changeBaseToBaseToBase((7l), (2l), (10l), (16l))\n    // (\"111\")\n    def changeBaseToBaseToBase(x : Long, base1 : Long, base2 : Long, base3 : Long) : String = {\n        var y = x\n        var result = \"\"\n        while (y > 0) {\n            var digit = y % base1\n            result = digit + result\n            y /= base1\n        }\n        return result.toString().replaceAll(\"^0+\", \"\") + changeBase(result, base2) + changeBase(result, base3)\n    ",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        val x_ = x\n        val base_ = base\n        val base_digits = scala.math.pow(base_, 10)\n        val x_digits = scala.math.pow(base_, x_)\n        val x_digits_ = x_digits.toString\n        val x_digits_ = x_digits_.substring(0, x_digits_.length - 1)\n        val x_digits_ = x_digits_.substring(0, x_digits_.length - 1)\n        val x_digits_ = x_digits_.substring(0, x_digits_.length - 1)\n        val x_digits_ = x_digits_.substring(0, x_digits_.length - 1)\n        val x_digits_ = x_digits_.substring(0, x_digits_.length - 1)\n        val x_digits_ = x_digits_.substring(0, x_digits_.length - 1)\n        val x_digits_ = x_digits_.substring(0, x_digits_.length - 1)\n        val x_digits_ = x_digits_.substring(0, x_digits_.length - 1)\n        val x_digits_ = x_digits_.substring(0, x_digits_.length - 1)\n        val x_digits_ = x_digits_.substring(0, x_digits_.length - 1)\n        val x_digits_ = x_digits_.substring(0, x_digits_.length - 1)\n        val x_digits_ = x_digits_.substring(0, x_digits_.length - 1)\n        val x_digits_ = x_digits_.substring(0, x_digits_.length - 1)\n        val x_digits_ = x_digits_.substring(0, x_digits_.length - 1)\n        val x_digits_ = x_digits_.substring(0, x_digits_.length - 1)\n        val x_digits_ = x_digits_.substring(0, x",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        var result = \"\"\n        var x_ = x\n        while (x_ > 0) {\n            var digit = x_ % base\n            result = digit.toString() + result\n            x_ = x_ / base\n        }\n        return result",
    "        def baseDigits = \"\"\n        def xDigits = \"\"\n        def i = 0\n        while (i < base) {\n            baseDigits = baseDigits + \"1\"\n            i = i + 1\n        }\n        while (x > 0l) {\n            xDigits = xDigits + baseDigits.charAt(x % base)\n            x = x / base\n        }\n        return xDigits",
    "        val x_ = x\n        val base_ = base\n        val res = \"\"\n        for (i <- 0 until x_.toInt) {\n            val digit = x_.toInt.apply(i)\n            val digit_ = digit\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            ",
    "        val b = scala.math.BigInteger.valueOf(x)\n        val r = b.toString(base)\n        return r",
    "        var result = \"\"\n        var x_ = x\n        while (x_ > 0) {\n            var digit = x_ % base\n            result = digit.toString() + result\n            x_ = x_ / base\n        }\n        return result\n    }\n\n    // Return the number of 1's in the binary representation of x.\n    // >>> countOnes(8l)\n    // (3)\n    // >>> countOnes(5l)\n    // (1)\n    // >>> countOnes(0l)\n    // (0)\n    def countOnes(x : Long) : Int = {\n        var result = 0\n        var x_ = x\n        while (x_ > 0) {\n            var digit = x_ % 2\n            if (digit == 1) {\n                result = result + 1\n            }\n            x_ = x_ / 2\n        }\n        return result\n    }\n\n    // Return the number of 0's in the binary representation of x.\n    // >>> countZeros(8l)\n    // (5)\n    // >>> countZeros(5l)\n    // (2)\n    // >>> countZeros(0l)\n    // (0)\n    def countZeros(x : Long) : Int = {\n        var result = 0\n        var x_ = x\n        while (x_ > 0) {\n            var digit = x_ % 2\n            if (digit == 0) {\n                result = result + 1\n            }\n            x_ = x_ / 2\n        }\n        return result\n    }\n\n    // Return the number of 1's in the decimal representation of x.\n    // >>> countOnes(8)\n    // (3)\n    // >>> countOnes(5)\n    // (1)\n    // >>> countOnes(0)\n    // (0)\n    def countOnes(x : Int) : Int = {\n        var result = 0\n        var x_ = x\n        while (x_ > 0) {\n            var digit = x_ % 10\n            if (digit == 1) {\n                result = result + 1\n            }\n            x_ = x_ / 10\n        }\n        return result\n",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        val b = scala.math.BigInteger.valueOf(x)\n        val bb = scala.math.BigInteger.valueOf(base)\n        val result = b.divide(bb).toString()\n        return result",
    "        val y = x.toString(base)\n        y.substring(0, y.length() - 1)\n    }\n\n    // Change the base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBase((8l), (3l), (2l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (10l))\n    // (\"22\")\n    // >>> changeBaseToBase((7l), (2l), (10l))\n    // (\"111\")\n    def changeBaseToBase(x : Long, base : Long, base2 : Long) : String = {\n        val y = x.toString(base)\n        y.substring(0, y.length() - 1)\n    }\n\n    // Change the base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBase((8l), (3l), (10l))\n    // (\"22\")\n    // >>> changeBaseToBase((8l), (2l), (10l))\n    // (\"1000\")\n    // >>> changeBaseToBase((7l), (2l), (10l))\n    // (\"111\")\n    def changeBaseToBase2(x : Long, base : Long, base2 : Long) : String = {\n        val y = x.toString(base)\n        y.substring(0, y.length() - 1)\n    }\n\n    // Change the base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBase((8l), (3l), (10l))\n    // (\"22\")\n    // >>> changeBaseToBase((8l), (2l), (10l))\n    // (\"1000\")\n    // >>> changeBaseToBase((7l), (2l), (10l))\n    // (\"111\")\n    def changeBaseToBase3(x : Long, base : Long, base2 : Long, base3 : Long) : String = {\n        val y =",
    "        var x_ = x\n        var base_ = base\n        var result = \"\"\n        while (x_ > 0) {\n            var digit = x_ % base_\n            result = digit.toString() + result\n            x_ = x_ / base_\n        }\n        return result\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 10.\n    // >>> stringToNumber(\"22\")\n    // 22\n    // >>> stringToNumber(\"1000\")\n    // 1000\n    // >>> stringToNumber(\"111\")\n    // 111\n    def stringToNumber(s : String) : Long = {\n        var result = 0l\n        var s_ = s\n        var i = 0\n        while (i < s_.length) {\n            var digit = s_.charAt(i)\n            result = result * 10 + digit.toInt\n            i = i + 1\n        }\n        return result\n    }\n\n    // Convert a number to a string representation in a given base.\n    // >>> numberToString(22, (3l))\n    // \"22\"\n    // >>> numberToString(1000, (3l))\n    // \"1000\"\n    // >>> numberToString(111, (3l))\n    // \"111\"\n    def numberToString(x : Long, base : Long) : String = {\n        var x_ = x\n        var base_ = base\n        var result = \"\"\n        while (x_ > 0) {\n            var digit = x_ % base_\n            result = digit.toString() + result\n            x_ = x_ / base_\n        }\n        return result\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 10.\n    // >>> stringToNumber(\"22\")\n    // 22\n    // >>> stringToNumber(\"1000\")\n    // 1000\n    // >>> stringToNumber(\"111\")\n    // 111\n    def stringToNumber(s : String) : Long = {\n        var result = 0l\n        var s_ = s\n        var i = 0\n        while (i < s_.length) {\n            var digit = s_.charAt(",
    "        val x_ = x\n        val base_ = base\n        val res = \"\"\n        while (x_ > 0) {\n            val digit = x_ % base_\n            res = digit + res\n            x_ = x_ / base_\n        }\n        return res\n    }\n\n    // Change the base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBase((8l), (3l), (2l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (10l))\n    // (\"0.8\")\n    // >>> changeBaseToBase((8l), (2l), (10l))\n    // (\"1000\")\n    // >>> changeBaseToBase((7l), (2l), (10l))\n    // (\"111\")\n    def changeBaseToBase(x : Long, base1 : Long, base2 : Long) : String = {\n        val x_ = x\n        val base1_ = base1\n        val base2_ = base2\n        val res = \"\"\n        while (x_ > 0) {\n            val digit = x_ % base1_\n            res = digit + res\n            x_ = x_ / base1_\n        }\n        return res\n    }\n\n    // Change the base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBaseToBase((8l), (3l), (2l), (10l))\n    // (\"1000\")\n    // >>> changeBaseToBaseToBase((8l), (3l), (2l), (16l))\n    // (\"100\")\n    // >>> changeBaseToBaseToBase((8l), (3l), (10l), (16l))\n    // (\"0.8\")\n    // >>> changeBaseToBaseToBase((8l), (2l), (10l), (16l))\n    // (\"1000\")\n    // >>> changeBaseToBaseToBase((7l), (2l), (10l), (16l))\n    // (\"111\")\n    def changeBaseTo",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        val x_ = x\n        val base_ = base\n        val res = \"\"\n        while (x_ > 0) {\n            val digit = x_ % base_\n            res = digit.toString() + res\n            x_ = x_ / base_\n        }\n        return res\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 10.\n    // >>> stringToNumber(\"22\")\n    // 22\n    // >>> stringToNumber(\"1000\")\n    // 1000\n    // >>> stringToNumber(\"111\")\n    // 111\n    def stringToNumber(s : String) : Long = {\n        val res = 0l\n        for (i <- 0 until s.length) {\n            val digit = s.charAt(i)\n            res = res * 10 + digit.toInt\n        }\n        return res\n    }\n\n    // Convert a number to a string representation in a given base.\n    // >>> numberToString(22, (3l))\n    // \"22\"\n    // >>> numberToString(1000, (3l))\n    // \"1000\"\n    // >>> numberToString(111, (3l))\n    // \"111\"\n    def numberToString(x : Long, base : Long) : String = {\n        val res = \"\"\n        while (x > 0) {\n            val digit = x % base\n            res = digit.toString() + res\n            x = x / base\n        }\n        return res\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 10.\n    // >>> stringToNumber(\"22\")\n    // 22\n    // >>> stringToNumber(\"1000\")\n    // 1000\n    // >>> stringToNumber(\"111\")\n    // 111\n    def stringToNumber(s : String) : Long = {\n        val res = 0l\n        for (i <- 0 until s.length) {\n            val digit = s.charAt(i)\n            res = res * 10 + digit.toInt\n        }\n        return res\n    }\n\n    // Convert a number to a string representation in a given base.\n    // >>> numberToString(22,",
    "        val xStr = x.toString\n        val baseStr = base.toString\n        val result = \"\"\n        for (i <- 0 until xStr.length) {\n            val digit = xStr[i]\n            val digitBase = baseStr[i]\n            if (digitBase == \"0\") {\n                result += digit\n            } else {\n                result += digitBase\n            }\n        }\n        return result\n    }\n\n    // Return the number of digits in the string.\n    // >>> numDigits(\"123\")\n    // (3)\n    // >>> numDigits(\"\")\n    // (0)\n    // >>> numDigits(\"0\")\n    // (1)\n    def numDigits(s : String) : Int = {\n        val result = 0\n        for (i <- 0 until s.length) {\n            if (s[i] == \"0\") {\n                break\n            } else {\n                result += 1\n            }\n        }\n        return result\n    }\n\n    // Return the number of digits in the string.\n    // >>> numDigits(\"123\")\n    // (3)\n    // >>> numDigits(\"\")\n    // (0)\n    // >>> numDigits(\"0\")\n    // (1)\n    def numDigits2(s : String) : Int = {\n        val result = 0\n        for (i <- 0 until s.length) {\n            if (s[i] == \"0\") {\n                break\n            } else {\n                result += 1\n            }\n        }\n        return result\n    }\n\n    // Return the number of digits in the string.\n    // >>> numDigits(\"123\")\n    // (3)\n    // >>> numDigits(\"\")\n    // (0)\n    // >>> numDigits(\"0\")\n    // (1)\n    def numDigits3(s : String) : Int = {\n        val result = 0\n        for (i <- 0 until s.length) {\n            if (s[i] == \"0\") {\n                break\n            } else {\n                result += 1\n            }\n        }\n        return result\n    }\n\n    // Return the number of digits in the string.\n    ",
    "        def baseString(x : Long, base : Long) : String = {\n            if (x == 0) return \"0\"\n            if (x < 0) return \"-\" + baseString(-x, base)\n            if (base == 10) return x.toString()\n            if (base == 2) return binaryString(x, 2)\n            if (base == 3) return binaryString(x, 3)\n            if (base == 4) return binaryString(x, 4)\n            if (base == 5) return binaryString(x, 5)\n            if (base == 6) return binaryString(x, 6)\n            if (base == 7) return binaryString(x, 7)\n            if (base == 8) return binaryString(x, 8)\n            if (base == 9) return binaryString(x, 9)\n            throw new IllegalArgumentException(\"base must be between 2 and 10\")\n        }\n        return baseString(x, base)\n    }\n\n    // Convert binary string to decimal.\n    // >>> binaryStringToDecimal(\"1101\")\n    // (5)\n    // >>> binaryStringToDecimal(\"1010\")\n    // (2)\n    // >>> binaryStringToDecimal(\"11111\")\n    // (27)\n    // >>> binaryStringToDecimal(\"100\")\n    // (4)\n    // >>> binaryStringToDecimal(\"10101\")\n    // (13)\n    def binaryStringToDecimal(s : String) : Long = {\n        if (s == \"\") return 0l\n        if (s.charAt(0) == \"0\") return 0l\n        if (s.charAt(0) == \"1\") return 1l\n        if (s.charAt(0) == \"-\") return 0l\n        if (s.charAt(0) == \"+\") return 1l\n        throw new IllegalArgumentException(\"string must start with 0 or 1\")\n    }\n\n    // Convert decimal to binary string.\n    // >>> decimalToBinaryString(5)\n    // (\"11\")\n    // >>> decimalToBinaryString(2)\n    // (\"10\")\n    // >>> decimalToBinaryString(27)\n    // (\"11111\")\n    // >>>",
    "        val xStr = x.toString\n        val baseStr = base.toString\n        val num = xStr.substring(0, xStr.length - 1)\n        val baseNum = baseStr.substring(0, baseStr.length - 1)\n        val baseNumStr = baseNum.toString\n        val baseNumStrLen = baseNumStr.length\n        val numLen = num.length\n        val numStr = num.substring(0, numLen - baseNumStrLen)\n        val res = numStr + baseNumStr\n        return res",
    "        val x_ = x\n        val base_ = base\n        val base_digits = scala.math.pow(base_, 10)\n        val x_digits = scala.math.pow(x_, 10)\n        val x_base_digits = scala.math.pow(x_, base_)\n        val x_base_digits_ = x_base_digits\n        val x_base_digits_digits = scala.math.pow(x_base_digits_, 10)\n        val x_base_digits_digits_ = x_base_digits_digits\n        val x_base_digits_digits_digits = scala.math.pow(x_base_digits_digits_, 10)\n        val x_base_digits_digits_digits_ = x_base_digits_digits_digits\n        val x_base_digits_digits_digits_digits = scala.math.pow(x_base_digits_digits_digits_, 10)\n        val x_base_digits_digits_digits_digits_ = x_base_digits_digits_digits_digits\n        val x_base_digits_digits_digits_digits_digits = scala.math.pow(x_base_digits_digits_digits_digits_, 10)\n        val x_base_digits_digits_digits_digits_digits_ = x_base_digits_digits_digits_digits_digits\n        val x_base_digits_digits_digits_digits_digits_digits = scala.math.pow(x_base_digits_digits_digits_digits_digits_, 10)\n        val x_base_digits_digits_digits_digits_digits_digits_ = x_base_digits_digits_digits_digits_digits_digits\n        val x_base_digits_digits_digits_digits_digits_digits_dig",
    "        var result = \"\"\n        for (i <- 0 until x.toString().length) {\n            var digit = x.toString().charAt(i)\n            if (digit.toString().equals(\"0\")) {\n                result += \"0\"\n            } else {\n                result += digit.toString()\n            }\n            if (i + 1 < x.toString().length) {\n                result += base.toString()\n            }\n        }\n        return result\n    }\n\n    // Change the base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBase((8l), (3l), (2l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (10l))\n    // (\"8\")\n    // >>> changeBaseToBase((7l), (3l), (2l))\n    // (\"111\")\n    // >>> changeBaseToBase((7l), (3l), (10l))\n    // (\"7\")\n    def changeBaseToBase(x : Long, base : Long, targetBase : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until x.toString().length) {\n            var digit = x.toString().charAt(i)\n            if (digit.toString().equals(\"0\")) {\n                result += \"0\"\n            } else {\n                result += digit.toString()\n            }\n            if (i + 1 < x.toString().length) {\n                result += base.toString()\n            }\n        }\n        return result.toString()\n    }\n\n    // Change the base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBaseToBase((8l), (3l), (2l), (10l))\n    // (\"8\")\n    // >>> changeBaseToBaseToBase((8l), (3l), (2l), (3l))\n    // (\"1000\")\n    // >>> changeBaseToBaseToBase((7l), (3l), (2l),",
    "        val x_ = x\n        val base_ = base\n        val res = \"\"\n        for (i <- 0 until x_.toInt) {\n            val digit = x_.toInt.apply(i)\n            val digit_ = digit\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            ",
    "        def baseDigits = \"\"\n        def xDigits = \"\"\n        def baseDigitsLength = baseDigits.length\n        def xDigitsLength = xDigits.length\n        def xDigitsLengthMinus1 = xDigitsLength - 1\n        def xDigitsLengthMinus2 = xDigitsLength - 2\n        def xDigitsLengthMinus3 = xDigitsLength - 3\n        def xDigitsLengthMinus4 = xDigitsLength - 4\n        def xDigitsLengthMinus5 = xDigitsLength - 5\n        def xDigitsLengthMinus6 = xDigitsLength - 6\n        def xDigitsLengthMinus7 = xDigitsLength - 7\n        def xDigitsLengthMinus8 = xDigitsLength - 8\n        def xDigitsLengthMinus9 = xDigitsLength - 9\n        def xDigitsLengthMinus10 = xDigitsLength - 10\n        def xDigitsLengthMinus11 = xDigitsLength - 11\n        def xDigitsLengthMinus12 = xDigitsLength - 12\n        def xDigitsLengthMinus13 = xDigitsLength - 13\n        def xDigitsLengthMinus14 = xDigitsLength - 14\n        def xDigitsLengthMinus15 = xDigitsLength - 15\n        def xDigitsLengthMinus16 = xDigitsLength - 16\n        def xDigitsLengthMinus17 = xDigitsLength - 17\n        def xDigitsLengthMinus18 = xDigitsLength - 18\n        def xDigitsLengthMinus19 = xDigitsLength - 19\n        def xDigitsLengthMinus20 = xDigitsLength - 20\n        def xDigitsLengthMinus21 = xDigitsLength - 21\n        def xDigitsLengthMinus22 = xDigitsLength - 22\n        def xDigitsLengthMinus23 = xDigitsLength - 23\n        def xDigitsLengthMinus24 = xDigitsLength - 24\n        def xDigitsLengthMinus25 = xDigitsLength - 25\n        def xDigitsLengthMinus26 = xDigitsLength - 26\n        def xDigitsLengthMinus27 = xDigitsLength - 27\n        def xDigitsLengthMinus28 = x",
    "        def baseString(x : Long, base : Long) : String = {\n            if (x == 0) return \"\"\n            if (x < 0) return \"-\" + baseString(-x, base)\n            if (base == 10) return \"\" + x\n            if (base == 2) return \"\" + (x & 1)\n            if (base == 3) return \"\" + (x % 3)\n            if (base == 4) return \"\" + (x % 4)\n            if (base == 5) return \"\" + (x % 5)\n            if (base == 6) return \"\" + (x % 6)\n            if (base == 7) return \"\" + (x % 7)\n            if (base == 8) return \"\" + (x % 8)\n            if (base == 9) return \"\" + (x % 9)\n            if (base == 11) return \"\" + (x % 11)\n            if (base == 12) return \"\" + (x % 12)\n            if (base == 13) return \"\" + (x % 13)\n            if (base == 14) return \"\" + (x % 14)\n            if (base == 15) return \"\" + (x % 15)\n            if (base == 16) return \"\" + (x % 16)\n            if (base == 17) return \"\" + (x % 17)\n            if (base == 18) return \"\" + (x % 18)\n            if (base == 19) return \"\" + (x % 19)\n            if (base == 20) return \"\" + (x % 20)\n            if (base == 21) return \"\" + (x % 21)\n            if (base == 22) return \"\" + (x % 22)\n            if (base == 23) return \"\" + (x % 23)\n            if (base == 24) return \"\" + (x % 24)\n            if (base == 25) return \"\" + (x % 25)\n            if (base == 26) return \"\" + (x % 26)\n            if (base == 27) return \"\" + (x % 27)\n            if (base == 28) return \"\" + (x % 28)\n            if (base == 29) return \"\" + (x % 29)\n            if (base == 30) return \"\" + (x % 30)\n            if (base ==",
    "        def changeBaseHelper(x, base) : String = {\n            if (x < 0) {\n                throw new java.lang.IllegalArgumentException(\"Negative number cannot be converted to base \" + base)\n            }\n            if (base < 2 || base > 36) {\n                throw new java.lang.IllegalArgumentException(\"Base should be between 2 and 36\")\n            }\n            if (x == 0) {\n                return \"\"\n            }\n            var result = \"\"\n            var digit = x % base\n            while (x > 0) {\n                result = (digit * base) + result\n                x = x / base\n                digit = x % base\n            }\n            return result\n        }\n        return changeBaseHelper(x, base)",
    "        def _changeBase(x : Long, base : Long) : String = {\n            if (x == 0) {\n                return \"0\"\n            }\n            if (x < 0) {\n                return \"-\" + _changeBase(-x, base)\n            }\n            if (base == 10) {\n                return x.toString()\n            }\n            if (base == 2) {\n                return _changeBase(x, 10).toString()\n            }\n            if (base == 3) {\n                return _changeBase(x, 10).toString()\n            }\n            if (base == 4) {\n                return _changeBase(x, 10).toString()\n            }\n            if (base == 5) {\n                return _changeBase(x, 10).toString()\n            }\n            if (base == 6) {\n                return _changeBase(x, 10).toString()\n            }\n            if (base == 7) {\n                return _changeBase(x, 10).toString()\n            }\n            if (base == 8) {\n                return _changeBase(x, 10).toString()\n            }\n            if (base == 9) {\n                return _changeBase(x, 10).toString()\n            }\n            return \"error\"\n        }\n        return _changeBase(x, base)",
    "        var x_ = x\n        var base_ = base\n        var result = \"\"\n        while (x_ > 0l) {\n            var digit = x_ % base_\n            result = digit + result\n            x_ = x_ / base_\n        }\n        return result",
    "        val x_ = x.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ =",
    "        val x_ = x\n        val base_ = base\n        val res = \"\"\n        while (x_ > 0) {\n            val digit = x_ % base_\n            res = digit.toString() + res\n            x_ = x_ / base_\n        }\n        return res\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 10.\n    // >>> convertToBase(\"22\", (3l))\n    // (8l)\n    // >>> convertToBase(\"1000\", (2l))\n    // (8l)\n    // >>> convertToBase(\"111\", (2l))\n    // (7l)\n    def convertToBase(s : String, base : Long) : Long = {\n        val s_ = s\n        val base_ = base\n        val res = 0l\n        for (i <- 1 to s.length) {\n            val digit = s.charAt(i) - '0'\n            res = res * base_ + digit\n        }\n        return res\n    }\n\n    // Convert a number to a string representation in a given base.\n    // The string representation is in base 10.\n    // >>> convertToString(8l, (3l))\n    // (\"22\")\n    // >>> convertToString(8l, (2l))\n    // (\"1000\")\n    // >>> convertToString(7l, (2l))\n    // (\"111\")\n    def convertToString(x : Long, base : Long) : String = {\n        val x_ = x\n        val base_ = base\n        val res = \"\"\n        while (x_ > 0) {\n            val digit = x_ % base_\n            res = digit.toString() + res\n            x_ = x_ / base_\n        }\n        return res\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 10.\n    // >>> convertToBase(\"22\", (3l))\n    // (8l)\n    // >>> convertToBase(\"1000\", (2l))\n    // (8l)\n    // >>> convertToBase(\"111\", (2l))\n    // (7",
    "        def toString(x : Long, base : Long) : String = {\n            if (x < 0) {\n                return \"-\" + toString(-x, base)\n            }\n            if (x == 0) {\n                return \"0\"\n            }\n            if (base == 10) {\n                return toString(x / 10, base) + toString(x % 10, base)\n            }\n            if (base == 2) {\n                return toString(x / 2, base) + toString(x % 2, base)\n            }\n            if (base == 3) {\n                return toString(x / 3, base) + toString(x % 3, base)\n            }\n            if (base == 4) {\n                return toString(x / 4, base) + toString(x % 4, base)\n            }\n            if (base == 5) {\n                return toString(x / 5, base) + toString(x % 5, base)\n            }\n            if (base == 6) {\n                return toString(x / 6, base) + toString(x % 6, base)\n            }\n            if (base == 7) {\n                return toString(x / 7, base) + toString(x % 7, base)\n            }\n            if (base == 8) {\n                return toString(x / 8, base) + toString(x % 8, base)\n            }\n            if (base == 9) {\n                return toString(x / 9, base) + toString(x % 9, base)\n            }\n            if (base == 11) {\n                return toString(x / 11, base) + toString(x % 11, base)\n            }\n            if (base == 12) {\n                return toString(x / 12, base) + toString(x % 12, base)\n            }\n            if (base == 13) {\n                return toString(x / 13, base) + toString(x % 13, base)\n            }\n            if (base == 14) {\n                return toString(x / 14, base) + toString(x % 14, base)\n            }\n            if (base == 15) {\n",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        var result = \"\"\n        var x_ = x\n        while (x_ > 0) {\n            var digit = x_ % base\n            result = digit + result\n            x_ = x_ / base\n        }\n        return result\n    }\n\n    // Convert a string representation of a number to the corresponding number.\n    // The string representation is in base 10.\n    // >>> stringToNumber(\"22\")\n    // 22\n    // >>> stringToNumber(\"1000\")\n    // 8\n    // >>> stringToNumber(\"111\")\n    // 7\n    def stringToNumber(s : String) : Long = {\n        var result = 0l\n        var s_ = s\n        for (i <- 0 until s.length) {\n            var digit = s_.charAt(i)\n            result = result * 10 + digit\n        }\n        return result\n    }\n\n    // Convert a number to the corresponding string representation in base 10.\n    // >>> numberToString(22)\n    // \"22\"\n    // >>> numberToString(8)\n    // \"1000\"\n    // >>> numberToString(7)\n    // \"111\"\n    def numberToString(x : Long) : String = {\n        var result = \"\"\n        var x_ = x\n        while (x_ > 0) {\n            var digit = x_ % 10\n            result = digit + result\n            x_ = x_ / 10\n        }\n        return result\n    }\n\n    // Convert a string representation of a number to the corresponding number.\n    // The string representation is in base 2.\n    // >>> stringToNumber(\"22\")\n    // 22\n    // >>> stringToNumber(\"1000\")\n    // 8\n    // >>> stringToNumber(\"111\")\n    // 7\n    def stringToNumber2(s : String) : Long = {\n        var result = 0l\n        var s_ = s\n        for (i <- 0 until s.length) {\n            var digit = s_.charAt(i)\n            result = result * 2 + digit\n        }\n        return result\n    }\n\n    // Convert a number to the corresponding string representation in base 2.\n    // >>> numberToString2(22)\n    // \"22\"\n    // >>>",
    "        var result = \"\"\n        var tmp = x\n        while (tmp > 0) {\n            var digit = tmp % base\n            result = digit.toString() + result\n            tmp /= base\n        }\n        return result\n    }\n\n    // Return the number of 1's in the binary representation of x.\n    // >>> countOnes(8l)\n    // (3)\n    // >>> countOnes(9l)\n    // (2)\n    // >>> countOnes(10l)\n    // (1)\n    def countOnes(x : Long) : Int = {\n        var result = 0\n        var tmp = x\n        while (tmp > 0) {\n            var digit = tmp % 2\n            result += digit\n            tmp /= 2\n        }\n        return result\n    }\n\n    // Return the number of 0's in the binary representation of x.\n    // >>> countZeros(8l)\n    // (7)\n    // >>> countZeros(9l)\n    // (8)\n    // >>> countZeros(10l)\n    // (9)\n    def countZeros(x : Long) : Int = {\n        var result = 0\n        var tmp = x\n        while (tmp > 0) {\n            var digit = tmp % 2\n            result += 1 - digit\n            tmp /= 2\n        }\n        return result\n    }\n\n    // Return the number of 1's in the decimal representation of x.\n    // >>> countOnes(8)\n    // (3)\n    // >>> countOnes(9)\n    // (2)\n    // >>> countOnes(10)\n    // (1)\n    def countOnes(x : Int) : Int = {\n        var result = 0\n        var tmp = x\n        while (tmp > 0) {\n            var digit = tmp % 10\n            result += digit\n            tmp /= 10\n        }\n        return result\n    }\n\n    // Return the number of 0's in the decimal representation of x.\n    // >>> countZeros(8)\n    // (7)\n    // >>> countZeros(9)\n    // (8)\n    // >>> countZeros(10)\n    // (",
    "        def changeBaseHelper(x, base) : String = {\n            if (x < 0) {\n                throw new java.lang.IllegalArgumentException(\"Negative number cannot be converted to base \" + base)\n            }\n            if (base < 2 || base > 36) {\n                throw new java.lang.IllegalArgumentException(\"Base must be between 2 and 36\")\n            }\n            if (x == 0) {\n                return \"\"\n            }\n            if (base == 2) {\n                return \"\" + (x % 2)\n            }\n            if (base == 10) {\n                return \"\" + x\n            }\n            if (base == 16) {\n                return \"\" + (x % 16)\n            }\n            if (base == 8) {\n                return \"\" + (x % 8)\n            }\n            if (base == 36) {\n                return \"\" + (x % 36)\n            }\n            if (base == 3) {\n                return \"\" + (x % 3)\n            }\n            if (base == 5) {\n                return \"\" + (x % 5)\n            }\n            if (base == 7) {\n                return \"\" + (x % 7)\n            }\n            if (base == 11) {\n                return \"\" + (x % 11)\n            }\n            if (base == 13) {\n                return \"\" + (x % 13)\n            }\n            if (base == 17) {\n                return \"\" + (x % 17)\n            }\n            if (base == 19) {\n                return \"\" + (x % 19)\n            }\n            if (base == 23) {\n                return \"\" + (x % 23)\n            }\n            if (base == 29) {\n                return \"\" + (x % 29)\n            }\n            if (base == 31) {\n                return \"\" + (x % 31)\n            }\n            if (base == 37) {\n                return \"\" + (x % 37)\n            }\n            if (base == 41) {\n                return \"\" + (x % 41)\n            }\n            if (base == 43) {\n                return \"\" + (x % 43)\n            }\n            if (base == 47) {\n                return \"\" +",
    "        var y = x\n        var result = \"\"\n        while (y > 0) {\n            var digit = y % base\n            result = digit.toString() + result\n            y = y / base\n        }\n        return result\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 10.\n    // >>> stringToNumber(\"22\")\n    // 22\n    // >>> stringToNumber(\"1000\")\n    // 8\n    // >>> stringToNumber(\"111\")\n    // 7\n    def stringToNumber(s : String) : Long = {\n        var result = 0l\n        var i = 0\n        while (i < s.length) {\n            var digit = s.charAt(i)\n            result = result * 10 + digit.toInt\n            i = i + 1\n        }\n        return result\n    }\n\n    // Convert a number to a string representation in a given base.\n    // >>> numberToString(22, (3l))\n    // \"22\"\n    // >>> numberToString(8, (2l))\n    // \"1000\"\n    // >>> numberToString(7, (2l))\n    // \"111\"\n    def numberToString(x : Long, base : Long) : String = {\n        var result = \"\"\n        var y = x\n        while (y > 0) {\n            var digit = y % base\n            result = digit.toString() + result\n            y = y / base\n        }\n        return result\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 10.\n    // >>> stringToNumber(\"22\")\n    // 22\n    // >>> stringToNumber(\"1000\")\n    // 8\n    // >>> stringToNumber(\"111\")\n    // 7\n    def stringToNumber(s : String) : Long = {\n        var result = 0l\n        var i = 0\n        while (i < s.length) {\n            var digit = s.charAt(i)\n            result = result * 10 + digit.toInt\n            i = i + 1\n        }\n        return result\n    }\n\n    // Convert a number to a string representation in",
    "        var result = \"\"\n        var digit = x\n        while (digit > 0) {\n            result = (digit % base) + result\n            digit /= base\n        }\n        return result\n    }\n\n    // Convert a string to a number.\n    // The string is a sequence of digits in some base.\n    // The number is a long value.\n    // >>> stringToNumber(\"22\")\n    // 22\n    // >>> stringToNumber(\"1000\")\n    // 1000\n    // >>> stringToNumber(\"111\")\n    // 111\n    def stringToNumber(s : String) : Long = {\n        var result = 0l\n        var digit = 0l\n        for (i <- 0 until s.length) {\n            digit = s.charAt(i) - '0'\n            result = result * 10 + digit\n        }\n        return result\n    }\n\n    // Convert a number to a string.\n    // The number is a long value.\n    // The string is a sequence of digits in some base.\n    // >>> numberToString(22)\n    // \"22\"\n    // >>> numberToString(1000)\n    // \"1000\"\n    // >>> numberToString(111)\n    // \"111\"\n    def numberToString(x : Long) : String = {\n        var result = \"\"\n        var digit = x\n        while (digit > 0) {\n            result = (digit % 10) + result\n            digit /= 10\n        }\n        return result\n    }\n\n    // Convert a number to a string.\n    // The number is a long value.\n    // The string is a sequence of digits in some base.\n    // >>> numberToBase(22, 3)\n    // \"22\"\n    // >>> numberToBase(1000, 3)\n    // \"1000\"\n    // >>> numberToBase(111, 3)\n    // \"111\"\n    def numberToBase(x : Long, base : Long) : String = {\n        var result = \"\"\n        var digit = x\n        while (digit > 0) {\n            result = (digit % base) + result\n            digit /= base\n        }\n        return result\n    }\n\n    // Convert a string to a number.\n    //",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        val b = scala.math.BigInteger.valueOf(x)\n        val bb = b.toString(base)\n        return bb",
    "        def baseDigits = \"\"\n        for (i <- 0 until (base - 1)) {\n            baseDigits = baseDigits + \"1\"\n        }\n        def xDigits = \"\"\n        for (i <- 0 until (x - 1)) {\n            xDigits = xDigits + \"0\"\n        }\n        return xDigits + baseDigits\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 10.\n    // >>> convertToBase(\"1000\", 10)\n    // (8l)\n    // >>> convertToBase(\"111\", 10)\n    // (7l)\n    // >>> convertToBase(\"22\", 10)\n    // (8l)\n    // >>> convertToBase(\"1000\", 2)\n    // (8l)\n    // >>> convertToBase(\"111\", 2)\n    // (7l)\n    // >>> convertToBase(\"22\", 2)\n    // (8l)\n    def convertToBase(s : String, base : Long) : Long = {\n        def baseDigits = \"\"\n        for (i <- 0 until (base - 1)) {\n            baseDigits = baseDigits + \"1\"\n        }\n        def sDigits = \"\"\n        for (i <- 0 until (s.length - 1)) {\n            sDigits = sDigits + s.charAt(i)\n        }\n        return baseDigits.toLong * Long.parseLong(sDigits)\n    }\n\n    // Convert a number to a string representation in a given base.\n    // The string representation is in base 10.\n    // >>> convertToBase(8l, 10)\n    // (\"1000\")\n    // >>> convertToBase(7l, 10)\n    // (\"111\")\n    // >>> convertToBase(8l, 2)\n    // (\"1000\")\n    // >>> convertToBase(7l, 2)\n    // (\"111\")\n    def convertToBase(x : Long, base : Long) : String = {\n        def baseDigits = \"\"\n        for (i <- 0 until (base - 1)) {\n            baseDigits = baseDigits + \"1\"\n        }\n        return",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        var result = \"\"\n        while (x != 0) {\n            var digit = x % base\n            result = digit + result\n            x = x / base\n        }\n        return result\n    }\n\n    // Return the number of digits in the number x.\n    // >>> digits(8l)\n    // (3)\n    // >>> digits(3l)\n    // (1)\n    // >>> digits(9l)\n    // (1)\n    def digits(x : Long) : Int = {\n        var result = 0\n        while (x != 0) {\n            x = x / 10\n            result = result + 1\n        }\n        return result\n    }\n\n    // Return the number of digits in the number x.\n    // >>> digits(8l)\n    // (3)\n    // >>> digits(3l)\n    // (1)\n    // >>> digits(9l)\n    // (1)\n    def digits2(x : Long) : Int = {\n        var result = 0\n        while (x != 0) {\n            x = x / 10\n            result = result + 1\n        }\n        return result\n    }\n\n    // Return the number of digits in the number x.\n    // >>> digits(8l)\n    // (3)\n    // >>> digits(3l)\n    // (1)\n    // >>> digits(9l)\n    // (1)\n    def digits3(x : Long) : Int = {\n        var result = 0\n        while (x != 0) {\n            x = x / 10\n            result = result + 1\n        }\n        return result\n    }\n\n    // Return the number of digits in the number x.\n    // >>> digits(8l)\n    // (3)\n    // >>> digits(3l)\n    // (1)\n    // >>> digits(9l)\n    // (1)\n    def digits4(x : Long) : Int = {\n        var result = 0\n        while (x != 0) {\n            x = x / 10\n            result = result + 1\n        }\n        return result\n    }\n\n    // Return the number of digits in the number x.\n    // >>> digits(8l)\n",
    "        var result = \"\"\n        var tmp = x\n        while (tmp != 0) {\n            var digit = tmp % base\n            result = digit + result\n            tmp /= base\n        }\n        return result",
    "        if (x == 0) return \"0\"\n        if (base == 10) return x.toString()\n        if (x < 0) return \"-\" + changeBase(-x, base)\n        if (base == 2) return toBinaryString(x)\n        if (base == 3) return toBinaryString(x)\n        if (base == 4) return toBinaryString(x)\n        if (base == 5) return toBinaryString(x)\n        if (base == 6) return toBinaryString(x)\n        if (base == 7) return toBinaryString(x)\n        if (base == 8) return toBinaryString(x)\n        if (base == 9) return toBinaryString(x)\n        if (base == 10) return toDecimalString(x)\n        if (base == 11) return toDecimalString(x)\n        if (base == 12) return toDecimalString(x)\n        if (base == 13) return toDecimalString(x)\n        if (base == 14) return toDecimalString(x)\n        if (base == 15) return toDecimalString(x)\n        if (base == 16) return toDecimalString(x)\n        if (base == 17) return toDecimalString(x)\n        if (base == 18) return toDecimalString(x)\n        if (base == 19) return toDecimalString(x)\n        if (base == 20) return toDecimalString(x)\n        if (base == 21) return toDecimalString(x)\n        if (base == 22) return toDecimalString(x)\n        if (base == 23) return toDecimalString(x)\n        if (base == 24) return toDecimalString(x)\n        if (base == 25) return toDecimalString(x)\n        if (base == 26) return toDecimalString(x)\n        if (base == 27) return toDecimalString(x)\n        if (base == 28) return toDecimalString(x)\n        if (base == 29) return toDecimalString(x)\n        if (base == 30) return toDecimalString(x)\n        if (",
    "        val xStr = x.toString\n        val baseStr = base.toString\n        val baseDigits = baseStr.length\n        val xDigits = xStr.length\n        val result = \"\"\n        for (i <- 0 until xDigits) {\n            val digit = xStr.substring(i, i + 1)\n            val digitBase = digit.toString\n            val digitBaseDigits = digitBase.length\n            val digitBaseDigitsRemainder = digitBaseDigits % baseDigits\n            val digitBaseDigitsRemainderDigits = digitBaseDigitsRemainder.toString\n            val digitBaseDigitsRemainderDigitsRemainder = digitBaseDigitsRemainderDigits.length\n            val digitBaseDigitsRemainderDigitsRemainderDigitsRemainder = digitBaseDigitsRemainderDigitsRemainder.toString\n            val digitBaseDigitsRemainderDigitsRemainderDigitsRemainderDigitsRemainder = digitBaseDigitsRemainderDigitsRemainderDigitsRemainder.toString\n            val digitBaseDigitsRemainderDigitsRemainderDigitsRemainderDigitsRemainderDigitsRemainder = digitBaseDigitsRemainderDigitsRemainderDigitsRemainderDigitsRemainder.toString\n            val digitBaseDigitsRemainderDigitsRemainderDigitsRemainderDigitsRemainderDigitsRemainderDigitsRemainder = digitBaseDigitsRemainderDigitsRemainderDigitsRemainderDigitsRemainderDigitsRemainder.toString\n            val digitBaseDigitsRemainderDigitsRemainderDigitsRemainderDigitsRemainderDigitsRemainderDigitsRemainderDigitsRemainder = digitBaseDigitsRemainderDigitsRemainderDigitsRemainderDigitsRemainderDigitsRemainderDigitsRemainder.toString\n            val digitBaseDigitsRemainderDigitsRemainderDigitsRemainderDigitsRemainderDigitsRemainderDigitsRemainderDigitsRemainderDigitsRemainder = digitBaseDigitsRemainderDigitsRemainderDigitsRemainderDig",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        if (x < 0) {\n            throw new IllegalArgumentException(\"Negative number is not supported\")\n        }\n        if (base < 2 || base > 36) {\n            throw new IllegalArgumentException(\"Base should be between 2 and 36\")\n        }\n        if (x == 0) {\n            return \"0\"\n        }\n        var result = \"\"\n        var digit = x\n        while (digit > 0) {\n            var remainder = digit % base\n            result = remainder + result\n            digit = digit / base\n        }\n        return result",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        var y = x\n        var s = \"\"\n        while (y > 0) {\n            var digit = y % base\n            s = digit + s\n            y /= base\n        }\n        return s\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 10.\n    // >>> stringToNumber(\"22\")\n    // 22\n    // >>> stringToNumber(\"1000\")\n    // 8\n    // >>> stringToNumber(\"111\")\n    // 7\n    def stringToNumber(s : String) : Long = {\n        var x = 0l\n        for (i <- 0 until (s.length - 1)) {\n            var digit = s.charAt(i) - '0'\n            x = x * 10 + digit\n        }\n        return x\n    }\n\n    // Convert a number to a string representation in a given base.\n    // >>> numberToString(22, (3l))\n    // \"22\"\n    // >>> numberToString(22, (2l))\n    // \"1000\"\n    // >>> numberToString(7, (2l))\n    // \"111\"\n    def numberToString(x : Long, base : Long) : String = {\n        var s = \"\"\n        while (x > 0) {\n            var digit = x % base\n            s = digit + s\n            x /= base\n        }\n        return s\n    }\n\n    // Convert a string representation of a number to a string representation in a given base.\n    // The string representation is in base 10.\n    // >>> stringToNumberToString(\"22\", (3l))\n    // \"22\"\n    // >>> stringToNumberToString(\"22\", (2l))\n    // \"1000\"\n    // >>> stringToNumberToString(\"7\", (2l))\n    // \"111\"\n    def stringToNumberToString(s : String, base : Long) : String = {\n        var x = stringToNumber(s)\n        return numberToString(x, base)\n    }\n\n    // Convert a string representation of a number to a string representation in a given base.\n    // The string representation is in base 10.\n    // >>> stringToNumberToString",
    "        val y = x.toString(base)\n        val z = y.toCharArray\n        val w = scala.collection.mutable.ArrayBuffer()\n        for (i <- 0 until z.length) {\n            if (z[i] == '1') {\n                w.append(z[i])\n            }\n        }\n        return w.toString\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 10.\n    // >>> convertToBase(\"1000\", 10)\n    // (8l)\n    // >>> convertToBase(\"111\", 10)\n    // (7l)\n    // >>> convertToBase(\"22\", 10)\n    // (2l)\n    // >>> convertToBase(\"100\", 2)\n    // (4l)\n    // >>> convertToBase(\"100\", 3)\n    // (100l)\n    // >>> convertToBase(\"100\", 4)\n    // (100l)\n    def convertToBase(s : String, base : Long) : Long = {\n        val x = s.toCharArray\n        val y = scala.collection.mutable.ArrayBuffer()\n        for (i <- 0 until x.length) {\n            if (x[i] == '1') {\n                y.append(x[i])\n            }\n        }\n        return Long.parseLong(y.toString, base)\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 2.\n    // >>> convertToBase(\"100\", 2)\n    // (4l)\n    // >>> convertToBase(\"100\", 3)\n    // (100l)\n    // >>> convertToBase(\"100\", 4)\n    // (100l)\n    // >>> convertToBase(\"100\", 5)\n    // (100l)\n    def convertToBase2(s : String) : Long = {\n        val x = s.toCharArray\n        val y = scala.collection.mutable.ArrayBuffer()\n        for (i <- 0 until x.length) {\n            if (x[i] == '1') {\n                y.append(x[i])",
    "        var y = x\n        var result = \"\"\n        while (y > 0) {\n            var digit = y % base\n            result = digit + result\n            y /= base\n        }\n        return result\n    }\n\n    // Change the numerical base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBase((8l), (3l), (2l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (10l))\n    // (\"8\")\n    // >>> changeBaseToBase((7l), (3l), (2l))\n    // (\"111\")\n    // >>> changeBaseToBase((7l), (3l), (10l))\n    // (\"7\")\n    def changeBaseToBase(x : Long, base1 : Long, base2 : Long) : String = {\n        var y = x\n        var result = \"\"\n        while (y > 0) {\n            var digit = y % base1\n            result = digit + result\n            y /= base1\n        }\n        return result.toString() + changeBase(result, base2)\n    }\n\n    // Change the numerical base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBaseToBase((8l), (3l), (2l), (10l))\n    // (\"8\")\n    // >>> changeBaseToBaseToBase((8l), (3l), (2l), (16l))\n    // (\"1000\")\n    // >>> changeBaseToBaseToBase((7l), (3l), (2l), (10l))\n    // (\"111\")\n    // >>> changeBaseToBaseToBase((7l), (3l), (2l), (16l))\n    // (\"7\")\n    def changeBaseToBaseToBase(x : Long, base1 : Long, base2 : Long, base3 : Long) : String = {\n        var y = x\n        var result = \"\"\n        while (y > 0) {\n            var digit = y % base1\n            result = digit",
    "        def baseString = \"\"\n        for (i <- 0 until x) {\n            baseString = baseString + (base * i)\n        }\n        baseString\n    }\n\n    // Change the base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBase((8l), (3l), (2l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (10l))\n    // (\"0.8\")\n    // >>> changeBaseToBase((8l), (2l), (10l))\n    // (\"1000\")\n    // >>> changeBaseToBase((7l), (2l), (10l))\n    // (\"111\")\n    def changeBaseToBase(x : Long, base : Long, base2 : Long) : String = {\n        def baseString = \"\"\n        for (i <- 0 until x) {\n            baseString = baseString + (base2 * i)\n        }\n        baseString\n    }\n\n    // Change the base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBaseToBase((8l), (3l), (2l), (10l))\n    // (\"1000\")\n    // >>> changeBaseToBaseToBase((8l), (3l), (10l), (10l))\n    // (\"0.8\")\n    // >>> changeBaseToBaseToBase((8l), (2l), (10l), (10l))\n    // (\"1000\")\n    // >>> changeBaseToBaseToBase((7l), (2l), (10l), (10l))\n    // (\"111\")\n    def changeBaseToBaseToBase(x : Long, base : Long, base2 : Long, base3 : Long) : String = {\n        def baseString = \"\"\n        for (i <- 0 until x) {\n            baseString = baseString + (base3 * i)\n        }\n        baseString\n    }\n\n    // Change the base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are",
    "        val x_ = x\n        val base_ = base\n        val res = \"\"\n        while (x_ > 0) {\n            val digit = x_ % base_\n            res = digit.toString() + res\n            x_ = x_ / base_\n        }\n        return res\n    }\n\n    // Change the numerical base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBase((8l), (3l), (2l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (10l))\n    // (\"0.8\")\n    // >>> changeBaseToBase((7l), (2l), (10l))\n    // (\"111\")\n    // >>> changeBaseToBase((7l), (2l), (3l))\n    // (\"7\")\n    def changeBaseToBase(x : Long, base1 : Long, base2 : Long) : String = {\n        val x_ = x\n        val base1_ = base1\n        val base2_ = base2\n        val res = \"\"\n        while (x_ > 0) {\n            val digit = x_ % base1_\n            res = digit.toString() + res\n            x_ = x_ / base1_\n        }\n        return res.toString() + changeBase(res, base2)\n    }\n\n    // Change the numerical base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBaseToBase((8l), (3l), (2l), (10l))\n    // (\"0.8\")\n    // >>> changeBaseToBaseToBase((8l), (3l), (2l), (3l))\n    // (\"0.78\")\n    // >>> changeBaseToBaseToBase((7l), (2l), (10l), (3l))\n    // (\"111\")\n    // >>> changeBaseToBaseToBase((7l), (2l), (3l), (10l))\n    // (\"7.2\")\n    def changeBaseToBaseToBase(x",
    "        var result = \"\"\n        var x_ = x\n        while (x_ > 0) {\n            var digit = x_ % base\n            result = digit + result\n            x_ = x_ / base\n        }\n        return result\n    }\n\n    // Change the base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBase((8l), (3l), (2l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (3l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (4l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (5l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (6l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (7l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (8l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (9l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (10l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (11l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (12l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (13l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (14l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (15l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (16l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (17l))\n    // (\"1000\")\n    // >>> changeBase",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        var y = x\n        var s = \"\"\n        while (y != 0) {\n            var z = y % base\n            s = z + s\n            y = y / base\n        }\n        return s\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 10.\n    // >>> stringToNumber(\"22\")\n    // 22\n    // >>> stringToNumber(\"1000\")\n    // 8\n    // >>> stringToNumber(\"111\")\n    // 7\n    def stringToNumber(s : String) : Long = {\n        var x = 0l\n        for (i <- 0 until s.length) {\n            var c = s.charAt(i)\n            if (c >= '0' && c <= '9') {\n                x = x * 10 + (c - '0')\n            } else {\n                break\n            }\n        }\n        return x\n    }\n\n    // Convert a number to a string representation in a given base.\n    // The string representation is in base 10.\n    // >>> numberToString(22, (3l))\n    // \"22\"\n    // >>> numberToString(8, (2l))\n    // \"1000\"\n    // >>> numberToString(7, (2l))\n    // \"111\"\n    def numberToString(x : Long, base : Long) : String = {\n        var s = \"\"\n        while (x != 0) {\n            var z = x % base\n            s = z + s\n            x = x / base\n        }\n        return s\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 10.\n    // >>> stringToNumber(\"22\")\n    // 22\n    // >>> stringToNumber(\"1000\")\n    // 8\n    // >>> stringToNumber(\"111\")\n    // 7\n    def stringToNumber(s : String) : Long = {\n        var x = 0l\n        for (i <- 0 until s.length) {\n            var c = s.charAt(i)\n            if (c >= '0' && c <= '9') {\n                x = x * 10 + (c - '0",
    "        val b = scala.math.BigInteger.valueOf(x)\n        val result = b.toString(base)\n        return result",
    "        var result = \"\"\n        var x_ = x\n        while (x_ > 0) {\n            var digit = x_ % base\n            result = digit + result\n            x_ = x_ / base\n        }\n        return result",
    "        var y = x\n        var s = \"\"\n        while (y != 0) {\n            var digit = y % base\n            s = digit + s\n            y /= base\n        }\n        return s\n    }\n\n    // Convert a string representation of a number in a given base to the\n    // numerical representation.\n    // >>> convert(\"22\", (3l))\n    // (8l)\n    // >>> convert(\"1000\", (2l))\n    // (8l)\n    // >>> convert(\"111\", (2l))\n    // (7l)\n    def convert(s : String, base : Long) : Long = {\n        var result = 0l\n        for (var i = 0; i < s.length(); i++) {\n            var digit = s.charAt(i) - '0'\n            result = result * base + digit\n        }\n        return result\n    }\n\n    // Convert a number in a given base to the string representation.\n    // >>> convert(8l, (3l))\n    // (\"22\")\n    // >>> convert(8l, (2l))\n    // (\"1000\")\n    // >>> convert(7l, (2l))\n    // (\"111\")\n    def toString(x : Long, base : Long) : String = {\n        var s = \"\"\n        while (x != 0) {\n            var digit = x % base\n            s = digit + s\n            x /= base\n        }\n        return s\n    }\n\n    // Convert a string representation of a number in a given base to the\n    // numerical representation.\n    // >>> convert(\"22\", (3l))\n    // (8l)\n    // >>> convert(\"1000\", (2l))\n    // (8l)\n    // >>> convert(\"111\", (2l))\n    // (7l)\n    def convert2(s : String, base : Long) : Long = {\n        var result = 0l\n        for (var i = 0; i < s.length(); i++) {\n            var digit = s.charAt(i) - '0'\n            result = result * base + digit\n        }\n        return result\n    }\n\n    // Convert a number in a given base to the",
    "        val b = scala.math.BigInt(x)\n        val bb = scala.math.BigInt(base)\n        val res = b.divide(bb)\n        return res.toString()",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        var result = \"\"\n        var tmp = x\n        while (tmp != 0) {\n            var digit = tmp % base\n            result = digit + result\n            tmp /= base\n        }\n        return result\n    }\n\n    // Change the base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBase((8l), (3l), (2l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (10l))\n    // (\"8\")\n    // >>> changeBaseToBase((7l), (2l), (10l))\n    // (\"111\")\n    def changeBaseToBase(x : Long, base1 : Long, base2 : Long) : String = {\n        var result = \"\"\n        var tmp = x\n        while (tmp != 0) {\n            var digit = tmp % base1\n            result = digit + result\n            tmp /= base1\n        }\n        return result\n    }\n\n    // Change the base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBaseToBase((8l), (3l), (2l), (10l))\n    // (\"1000\")\n    // >>> changeBaseToBaseToBase((8l), (3l), (2l), (16l))\n    // (\"10\")\n    // >>> changeBaseToBaseToBase((7l), (2l), (10l), (16l))\n    // (\"111\")\n    def changeBaseToBaseToBase(x : Long, base1 : Long, base2 : Long, base3 : Long) : String = {\n        var result = \"\"\n        var tmp = x\n        while (tmp != 0) {\n            var digit = tmp % base1\n            result = digit + result\n            tmp /= base1\n        }\n        return result\n    }\n\n    // Change the base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBaseToBaseToBase((8l), (3l), (",
    "        var y = x\n        var s = \"\"\n        while (y != 0) {\n            var digit = y % base\n            s = digit + s\n            y /= base\n        }\n        return s\n    }\n\n    // Change the numerical base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBase((8l), (3l), (2l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (2l), (2l))\n    // (\"100\")\n    // >>> changeBaseToBase((7l), (2l), (2l))\n    // (\"111\")\n    def changeBaseToBase(x : Long, base1 : Long, base2 : Long) : String = {\n        var y = x\n        var s = \"\"\n        while (y != 0) {\n            var digit = y % base1\n            s = digit + s\n            y /= base1\n        }\n        return changeBase(s, base2)\n    }\n\n    // Change the numerical base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBaseToBase((8l), (3l), (2l), (2l))\n    // (\"1000\")\n    // >>> changeBaseToBaseToBase((8l), (2l), (2l), (2l))\n    // (\"100\")\n    // >>> changeBaseToBaseToBase((7l), (2l), (2l), (2l))\n    // (\"111\")\n    def changeBaseToBaseToBase(x : Long, base1 : Long, base2 : Long, base3 : Long) : String = {\n        var y = x\n        var s = \"\"\n        while (y != 0) {\n            var digit = y % base1\n            s = digit + s\n            y /= base1\n        }\n        return changeBaseToBase(s, base2, base3)\n    }\n\n    // Change the numerical base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10",
    "        var result = \"\"\n        var x_ = x\n        while (x_ > 0) {\n            var digit = x_ % base\n            result = digit + result\n            x_ = x_ / base\n        }\n        return result\n    }\n\n    // Convert a string to a number.\n    // The string is a sequence of digits from base 10.\n    // >>> stringToNumber(\"22\")\n    // 22\n    // >>> stringToNumber(\"1000\")\n    // 1000\n    // >>> stringToNumber(\"111\")\n    // 111\n    def stringToNumber(s : String) : Long = {\n        var result = 0l\n        for (var i = 0; i < s.length(); i++) {\n            var digit = s.charAt(i) - '0'\n            result = result * 10 + digit\n        }\n        return result\n    }\n\n    // Convert a number to a string.\n    // The number is a sequence of digits from base 10.\n    // >>> numberToString(22)\n    // \"22\"\n    // >>> numberToString(1000)\n    // \"1000\"\n    // >>> numberToString(111)\n    // \"111\"\n    def numberToString(n : Long) : String = {\n        var result = \"\"\n        var n_ = n\n        while (n_ > 0) {\n            var digit = n_ % 10\n            result = digit + result\n            n_ = n_ / 10\n        }\n        return result\n    }\n\n    // Convert a string to a list of digits.\n    // The string is a sequence of digits from base 10.\n    // >>> stringToList(\"22\")\n    // [2, 2]\n    // >>> stringToList(\"1000\")\n    // [1, 0, 0, 0]\n    // >>> stringToList(\"111\")\n    // [1, 1, 1]\n    def stringToList(s : String) : mutable.List[Long] = {\n        var result = mutable.List[Long]()\n        for (var i = 0; i < s.length(); i++) {\n            var digit = s.charAt(i) - '0'\n            result = result.append(digit)\n        }\n        ",
    "        var y = x.toString\n        var result = \"\"\n        for (i <- 0 until y.length) {\n            var digit = y[i]\n            if (digit.isDigit()) {\n                var digitAsInt = digit.toInt\n                var digitAsLong = digitAsInt.toLong\n                var digitAsLongBase = digitAsLong.toLong / base\n                result = result + digitAsLongBase.toString\n            } else {\n                result = result + digit\n            }\n        }\n        return result",
    "        var s = \"\"\n        var n = x\n        while (n > 0) {\n            var digit = n % base\n            s = digit + s\n            n /= base\n        }\n        return s",
    "        var result = \"\"\n        var x_ = x\n        while (x_ > 0) {\n            var digit = x_ % base\n            result = digit + result\n            x_ = x_ / base\n        }\n        return result\n    }\n\n    // Return the number of 1-bits in the binary representation of x.\n    // >>> countBits(5l)\n    // 2\n    // >>> countBits(7l)\n    // 3\n    // >>> countBits(8l)\n    // 4\n    // >>> countBits(9l)\n    // 4\n    // >>> countBits(10l)\n    // 5\n    // >>> countBits(11l)\n    // 6\n    def countBits(x : Long) : Int = {\n        var result = 0\n        while (x > 0) {\n            var digit = x % 2\n            result = digit + result\n            x = x / 2\n        }\n        return result\n    }\n\n    // Return the number of 1-bits in the binary representation of x.\n    // >>> countBits2(5l)\n    // 2\n    // >>> countBits2(7l)\n    // 3\n    // >>> countBits2(8l)\n    // 4\n    // >>> countBits2(9l)\n    // 4\n    // >>> countBits2(10l)\n    // 5\n    // >>> countBits2(11l)\n    // 6\n    def countBits2(x : Long) : Int = {\n        var result = 0\n        while (x > 0) {\n            result += x % 2\n            x = x / 2\n        }\n        return result\n    }\n\n    // Return the number of 1-bits in the binary representation of x.\n    // >>> countBits3(5l)\n    // 2\n    // >>> countBits3(7l)\n    // 3\n    // >>> countBits3(8l)\n    // 4\n    // >>> countBits3(9l)\n    // 4\n    // >>> countBits3(10l)\n    // 5\n    // >>> countBits3(11l)\n    // 6\n    def countB",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        var y = x\n        var s = \"\"\n        while (y > 0) {\n            var z = y % base\n            s = z.toString() + s\n            y = y / base\n        }\n        return s\n    }\n\n    // Convert a string to a number.\n    // The string can be a decimal number, or a number in any base less than 10.\n    // >>> stringToNumber(\"123\")\n    // 123\n    // >>> stringToNumber(\"100\")\n    // 100\n    // >>> stringToNumber(\"10001\")\n    // 10001\n    // >>> stringToNumber(\"1000101\")\n    // 1000101\n    // >>> stringToNumber(\"100010101\")\n    // 100010101\n    // >>> stringToNumber(\"10001010101\")\n    // 10001010101\n    // >>> stringToNumber(\"1000101010101\")\n    // 1000101010101\n    // >>> stringToNumber(\"100010101010101\")\n    // 100010101010101\n    // >>> stringToNumber(\"10001010101010101\")\n    // 10001010101010101\n    // >>> stringToNumber(\"1000101010101010101\")\n    // 1000101010101010101\n    // >>> stringToNumber(\"100010101010101010101\")\n    // 100010101010101010101\n    // >>> stringToNumber(\"10001010101010101010101\")\n    // 10001010101010101010101\n    // >>> stringToNumber(\"1000101010101010101010101\")\n    // 1000101010101010101010101\n    // >>> stringToNumber(\"100010101010101010101010101\")\n    // 100010101010101010101010101\n    // >>> stringToNumber(\"10001010101010101010101010101\")\n    // 10001010101010101010101010101\n    // >>> stringToNumber(\"1000101010101010101010101010101\")\n    // 1000101010101",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        def change(x : Long, base : Long) : String = {\n            if (x == 0) {\n                \"\"\n            } else {\n                if (base == 10) {\n                    x.toString()\n                } else {\n                    x.toString().replaceAll(\"\\\\d\", \"\")\n                }\n            }\n        }\n        if (x < 0) {\n            \"-\" + change(-x, base)\n        } else {\n            change(x, base)\n        }\n    }\n\n    // Change the base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBase((8l), (3l), (2l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (10l))\n    // (\"22\")\n    // >>> changeBaseToBase((7l), (2l), (10l))\n    // (\"111\")\n    def changeBaseToBase(x : Long, base1 : Long, base2 : Long) : String = {\n        def change(x : Long, base1 : Long, base2 : Long) : String = {\n            if (x == 0) {\n                \"\"\n            } else {\n                if (base1 == 10) {\n                    x.toString()\n                } else {\n                    x.toString().replaceAll(\"\\\\d\", \"\")\n                }\n            }\n        }\n        if (x < 0) {\n            \"-\" + change(-x, base1, base2)\n        } else {\n            change(x, base1, base2)\n        }\n    }\n\n    // Change the base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBaseToBase((8l), (3l), (2l), (10l))\n    // (\"1000\")\n    // >>> changeBaseToBaseToBase((8l), (3l), (2l), (2l))\n    // (\"100\")\n    // >>> changeBaseToBaseToBase((7l), (2l), (2l), (10l))\n    ",
    "        def baseString(x : Long) : String = {\n            if (x == 0) {\n                \"\"\n            } else {\n                baseString(x / base) + \"\" + (x % base)\n            }\n        }\n        baseString(x)",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        var x_ = x\n        var base_ = base\n        var result = \"\"\n        while (x_ > 0) {\n            var digit = x_ % base_\n            result = digit + result\n            x_ = x_ / base_\n        }\n        return result\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 10.\n    // >>> convertToBase(\"22\", 10)\n    // 22\n    // >>> convertToBase(\"1000\", 10)\n    // 8\n    // >>> convertToBase(\"111\", 10)\n    // 7\n    def convertToBase(s : String, base : Long) : Long = {\n        var result = 0l\n        var i = 0\n        while (i < s.length) {\n            var digit = s.charAt(i) - '0'\n            result = result * base + digit\n            i = i + 1\n        }\n        return result\n    }\n\n    // Convert a number to a string representation in a given base.\n    // The string representation is in base 10.\n    // >>> convertToBase(22, 10)\n    // \"22\"\n    // >>> convertToBase(8, 10)\n    // \"1000\"\n    // >>> convertToBase(7, 10)\n    // \"111\"\n    def convertToString(x : Long, base : Long) : String = {\n        var x_ = x\n        var base_ = base\n        var result = \"\"\n        while (x_ > 0) {\n            var digit = x_ % base_\n            result = digit + result\n            x_ = x_ / base_\n        }\n        return result\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 10.\n    // >>> convertToBase(\"22\", 10)\n    // 22\n    // >>> convertToBase(\"1000\", 10)\n    // 8\n    // >>> convertToBase(\"111\", 10)\n    // 7\n    def convertToBase(s : String, base : Long) : Long = {\n        var result = 0l\n        var i = 0\n        while (i < s.length) {\n            var digit = s",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        var result = \"\"\n        for (i <- 0 until x.toString().length) {\n            var digit = x.toString().charAt(i)\n            var value = digit.toInt\n            if (value >= base) {\n                throw new java.lang.IllegalArgumentException(\"digit \" + digit + \" is greater than base \" + base)\n            }\n            result = result + digit.toString\n        }\n        return result\n    }\n\n    // Change the base of a number to a specified base.\n    // >>> changeBaseToBase((8l, 3l), (2l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l, 2l), (3l))\n    // (\"22\")\n    // >>> changeBaseToBase((7l, 2l), (3l))\n    // (\"111\")\n    def changeBaseToBase(x : Long, base : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until x.toString().length) {\n            var digit = x.toString().charAt(i)\n            var value = digit.toInt\n            if (value >= base) {\n                throw new java.lang.IllegalArgumentException(\"digit \" + digit + \" is greater than base \" + base)\n            }\n            result = result + digit.toString\n        }\n        return result\n    }\n\n    // Convert a number from base x to base y.\n    // >>> convertBase((8l, 3l), (2l))\n    // (\"1000\")\n    // >>> convertBase((8l, 2l), (3l))\n    // (\"22\")\n    // >>> convertBase((7l, 2l), (3l))\n    // (\"111\")\n    def convertBase(x : Long, base : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until x.toString().length) {\n            var digit = x.toString().charAt(i)\n            var value = digit.toInt\n            if (value >= base) {\n                throw new java.lang.IllegalArgumentException(\"digit \" + digit + \" is greater than base \" + base)\n            }\n            result = result +",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        def _changeBase(x : Long, base : Long) : String = {\n            if (x < 0) {\n                throw new java.lang.IllegalArgumentException(\"Negative number cannot be converted to base \" + base)\n            }\n            if (base < 2 || base > 36) {\n                throw new java.lang.IllegalArgumentException(\"Base should be in the range 2 to 36\")\n            }\n            if (x == 0) {\n                return \"\"\n            }\n            var _x = x\n            var _base = base\n            var _result = \"\"\n            while (_x > 0) {\n                var _digit = _x % _base\n                _x /= _base\n                _result = (_digit + _result)\n            }\n            return _result\n        }\n        return _changeBase(x, base)",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        val xStr = x.toString\n        val baseStr = base.toString\n        val result = \"\"\n        for (i <- 0 until xStr.length) {\n            val digit = xStr.substring(i, i + 1)\n            val digitBase = baseStr.substring(i, i + 1)\n            result = result + digitBase\n        }\n        return result\n    }\n\n    // Convert a string representation of a number to the corresponding number.\n    // The string representation is in base 10.\n    // >>> convertToNumber(\"22\")\n    // 22\n    // >>> convertToNumber(\"1000\")\n    // 8\n    // >>> convertToNumber(\"111\")\n    // 7\n    def convertToNumber(s : String) : Long = {\n        val result = 0l\n        for (i <- 0 until s.length) {\n            val digit = s.substring(i, i + 1)\n            result = result * 10 + Long.parseLong(digit)\n        }\n        return result\n    }\n\n    // Convert a number to the string representation in the given base.\n    // The number is represented in base 10.\n    // >>> convertToBase10(\"22\", (3l))\n    // \"2\"\n    // >>> convertToBase10(\"1000\", (2l))\n    // \"8\"\n    // >>> convertToBase10(\"111\", (2l))\n    // \"7\"\n    def convertToBase10(x : Long, base : Long) : String = {\n        val xStr = x.toString\n        val baseStr = base.toString\n        val result = \"\"\n        for (i <- 0 until xStr.length) {\n            val digit = xStr.substring(i, i + 1)\n            val digitBase = baseStr.substring(i, i + 1)\n            result = result + digitBase\n        }\n        return result\n    }\n\n    // Convert a string representation of a number to the corresponding number.\n    // The string representation is in base 2.\n    // >>> convertToNumber(\"22\")\n    // 22\n    // >>> convertToNumber(\"1000\")\n    // 8\n    // >>> convertToNumber(\"111\")\n    // 7\n    def convertToNumber",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        var xStr = x.toString\n        var xStrLen = xStr.length\n        var xStrLen2 = xStrLen - 1\n        var xStrLen3 = xStrLen - 2\n        var xStrLen4 = xStrLen - 3\n        var xStrLen5 = xStrLen - 4\n        var xStrLen6 = xStrLen - 5\n        var xStrLen7 = xStrLen - 6\n        var xStrLen8 = xStrLen - 7\n        var xStrLen9 = xStrLen - 8\n        var xStrLen10 = xStrLen - 9\n        var xStrLen11 = xStrLen - 10\n        var xStrLen12 = xStrLen - 11\n        var xStrLen13 = xStrLen - 12\n        var xStrLen14 = xStrLen - 13\n        var xStrLen15 = xStrLen - 14\n        var xStrLen16 = xStrLen - 15\n        var xStrLen17 = xStrLen - 16\n        var xStrLen18 = xStrLen - 17\n        var xStrLen19 = xStrLen - 18\n        var xStrLen20 = xStrLen - 19\n        var xStrLen21 = xStrLen - 20\n        var xStrLen22 = xStrLen - 21\n        var xStrLen23 = xStrLen - 22\n        var xStrLen24 = xStrLen - 23\n        var xStrLen25 = xStrLen - 24\n        var xStrLen26 = xStrLen - 25\n        var xStrLen27 = xStrLen - 26\n        var xStrLen28 = xStrLen - 27\n        var xStrLen29 = xStrLen - 28\n        var xStrLen30 = xStrLen - 29\n        var xStrLen31 = xStrLen - 30\n        var xStrLen32 = xStrLen - 31\n        var xStrLen33 = xStrLen - 32\n        var xStrLen34 = xStrLen - 33\n        var xStrLen35 = xStrLen - 34\n        var xStrLen36 = xStrLen - 35\n        var xStrLen37 = xStrLen - 36\n        var xStrLen38 = xStrLen - 37\n        var xStrLen39 = xStrLen",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        val x_ = x.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ = x_.toString(base)\n        val x_ =",
    "        var result = \"\"\n        var x_ = x\n        while (x_ > 0) {\n            var digit = x_ % base\n            result = digit + result\n            x_ = x_ / base\n        }\n        return result",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        var result = \"\"\n        var x_ = x\n        while (x_ > 0) {\n            var digit = x_ % base\n            result = digit + result\n            x_ = x_ / base\n        }\n        return result\n    }\n\n    // Change the number x to the base 2.\n    // return string representation after the conversion.\n    // >>> changeBase2(8l)\n    // (\"1000\")\n    // >>> changeBase2(7l)\n    // (\"111\")\n    // >>> changeBase2(0l)\n    // (\"0\")\n    def changeBase2(x : Long) : String = {\n        var result = \"\"\n        var x_ = x\n        while (x_ > 0) {\n            var digit = x_ % 2\n            result = digit + result\n            x_ = x_ / 2\n        }\n        return result\n    }\n\n    // Change the number x to the base 3.\n    // return string representation after the conversion.\n    // >>> changeBase3(8l)\n    // (\"100\")\n    // >>> changeBase3(7l)\n    // (\"111\")\n    // >>> changeBase3(0l)\n    // (\"0\")\n    def changeBase3(x : Long) : String = {\n        var result = \"\"\n        var x_ = x\n        while (x_ > 0) {\n            var digit = x_ % 3\n            result = digit + result\n            x_ = x_ / 3\n        }\n        return result\n    }\n\n    // Change the number x to the base 4.\n    // return string representation after the conversion.\n    // >>> changeBase4(8l)\n    // (\"100\")\n    // >>> changeBase4(7l)\n    // (\"111\")\n    // >>> changeBase4(0l)\n    // (\"0\")\n    def changeBase4(x : Long) : String = {\n        var result = \"\"\n        var x_ = x\n        while (x_ > 0) {\n            var digit = x_ % 4\n            result = digit + result\n            x_ = x_ / 4\n        }\n        return result\n    }\n\n    // Change the number x to the base 5.\n    // return string",
    "        var result = \"\"\n        var i = 0\n        while (x > 0l) {\n            result = result + (x % base)\n            x = x / base\n            i = i + 1\n        }\n        return result\n    }\n\n    // Convert a string representation of a number in a given base to a number.\n    // base numbers are less than 10.\n    // >>> stringToBase(\"22\", (3l))\n    // (8l)\n    // >>> stringToBase(\"1000\", (3l))\n    // (8l)\n    // >>> stringToBase(\"111\", (3l))\n    // (7l)\n    // >>> stringToBase(\"100\", (3l))\n    // (4l)\n    // >>> stringToBase(\"0\", (3l))\n    // (0l)\n    // >>> stringToBase(\"0\", (2l))\n    // (0l)\n    // >>> stringToBase(\"0\", (1l))\n    // (0l)\n    def stringToBase(s : String, base : Long) : Long = {\n        var result = 0l\n        var i = 0\n        while (i < s.length) {\n            result = result * base + s.charAt(i) - '0'\n            i = i + 1\n        }\n        return result\n    }\n\n    // Convert a number in a given base to a string representation.\n    // base numbers are less than 10.\n    // >>> baseToString(8l, (3l))\n    // (\"22\")\n    // >>> baseToString(8l, (2l))\n    // (\"1000\")\n    // >>> baseToString(7l, (2l))\n    // (\"111\")\n    // >>> baseToString(4l, (2l))\n    // (\"100\")\n    // >>> baseToString(0l, (2l))\n    // (\"0\")\n    // >>> baseToString(0l, (1l))\n    // (\"0\")\n    def baseToString(x : Long, base : Long) : String = {\n        var result = \"\"\n        var i = 0\n        while (x > 0l) {\n            result = result + (x % base",
    "        def convert(x : Long, base : Long) : String = {\n            if (x == 0) return \"0\"\n            if (x < 0) return \"-\" + convert(-x, base)\n            if (x < base) return convert(x, base)\n            else return \"\"\n        }\n        return convert(x, base)",
    "        val x_ = x\n        val base_ = base\n        val base_digits = new ArrayBuffer[Long]()\n        val base_digits_ = base_digits\n        val base_digits__$1 = base_digits_\n        val base_digits_$eq = base_digits__$1\n        val base_digits_$eq$1 = base_digits_$eq\n        val base_digits_$eq$2 = base_digits_$eq$1\n        val base_digits_$eq$3 = base_digits_$eq$2\n        val base_digits_$eq$4 = base_digits_$eq$3\n        val base_digits_$eq$5 = base_digits_$eq$4\n        val base_digits_$eq$6 = base_digits_$eq$5\n        val base_digits_$eq$7 = base_digits_$eq$6\n        val base_digits_$eq$8 = base_digits_$eq$7\n        val base_digits_$eq$9 = base_digits_$eq$8\n        val base_digits_$eq$10 = base_digits_$eq$9\n        val base_digits_$eq$11 = base_digits_$eq$10\n        val base_digits_$eq$12 = base_digits_$eq$11\n        val base_digits_$eq$13 = base_digits_$eq$12\n        val base_digits_$eq$14 = base_digits_$eq$13\n        val base_digits_$eq$15 = base_digits_$eq$14\n        val base_digits_$eq$16 = base_digits_$eq$15\n        val base_digits_$eq$17 = base_digits_$eq$16\n        val base_digits_$eq$18 = base_digits_$eq$17\n        val base_digits_$eq$19 = base_digits_$eq$18\n        val base_digits_$eq$20 = base_digits_$eq$",
    "        val x_ = x\n        val base_ = base\n        val result = \"\"\n        for (i <- 0 until x_.toInt) {\n            val digit = x_.toInt - i\n            val digit_ = digit\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_ = digit_\n            val digit_",
    "        var x_ = x\n        var base_ = base\n        var result = \"\"\n        while (x_ > 0) {\n            var digit = x_ % base_\n            result = digit + result\n            x_ = x_ / base_\n        }\n        return result",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        var x_ = x\n        var base_ = base\n        var result = \"\"\n        while (x_ > 0) {\n            var digit = x_ % base_\n            result = digit + result\n            x_ = x_ / base_\n        }\n        return result\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in the given base.\n    // >>> convertToBase(\"22\", (3l))\n    // (8l)\n    // >>> convertToBase(\"1000\", (2l))\n    // (8l)\n    // >>> convertToBase(\"111\", (2l))\n    // (7l)\n    def convertToBase(s : String, base : Long) : Long = {\n        var s_ = s\n        var base_ = base\n        var result = 0l\n        for (var i = 0; i < s_.length(); i++) {\n            var digit = s_.charAt(i) - '0'\n            result = result * base_ + digit\n        }\n        return result\n    }\n\n    // Convert a number to a string representation in the given base.\n    // >>> convertToString(8l, (3l))\n    // (\"22\")\n    // >>> convertToString(8l, (2l))\n    // (\"1000\")\n    // >>> convertToString(7l, (2l))\n    // (\"111\")\n    def convertToString(x : Long, base : Long) : String = {\n        var x_ = x\n        var base_ = base\n        var result = \"\"\n        while (x_ > 0) {\n            var digit = x_ % base_\n            result = digit + result\n            x_ = x_ / base_\n        }\n        return result\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in the given base.\n    // >>> convertToBase(\"22\", (3l))\n    // (8l)\n    // >>> convertToBase(\"1000\", (2l))\n    // (8l)\n    // >>> convertToBase(\"111\", (2l))\n    // (7l)\n    def convertToBase(s : String",
    "        val x_ = x\n        val base_ = base\n        val result = \"\"\n        var i = 0\n        while (x_ != 0) {\n            val digit = x_ % base_\n            result = digit.toString() + result\n            x_ = x_ / base_\n            i = i + 1\n        }\n        return result",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        var result = \"\"\n        var tmp = x\n        while (tmp != 0) {\n            var digit = tmp % base\n            result = digit.toString() + result\n            tmp = tmp / base\n        }\n        return result\n    }\n\n    // Change the base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBase((8l), (3l), (2l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (2l), (3l))\n    // (\"22\")\n    // >>> changeBaseToBase((7l), (2l), (3l))\n    // (\"111\")\n    def changeBaseToBase(x : Long, base1 : Long, base2 : Long) : String = {\n        var result = \"\"\n        var tmp = x\n        while (tmp != 0) {\n            var digit = tmp % base1\n            result = digit.toString() + result\n            tmp = tmp / base1\n        }\n        return result.toString() + changeBase(result, base2)\n    }\n\n    // Change the base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBaseToBase((8l), (3l), (2l), (3l))\n    // (\"1000\")\n    // >>> changeBaseToBaseToBase((8l), (2l), (3l), (2l))\n    // (\"22\")\n    // >>> changeBaseToBaseToBase((7l), (2l), (3l), (2l))\n    // (\"111\")\n    def changeBaseToBaseToBase(x : Long, base1 : Long, base2 : Long, base3 : Long) : String = {\n        var result = \"\"\n        var tmp = x\n        while (tmp != 0) {\n            var digit = tmp % base1\n            result = digit.toString() + result\n            tmp = tmp / base1\n        }\n        return result.toString() + changeBaseToBase(result, base2, base3)\n    }\n\n    // Change the base of input",
    "        var y = x\n        var result = \"\"\n        while (y > 0) {\n            var digit = y % base\n            result = digit + result\n            y = y / base\n        }\n        return result\n    }\n\n    // Convert a string to a number.\n    // The string is a sequence of digits in the given base.\n    // The number is a long value.\n    // >>> stringToNumber(\"123\")\n    // 123l\n    // >>> stringToNumber(\"00\")\n    // 0l\n    // >>> stringToNumber(\"FF\")\n    // 255l\n    // >>> stringToNumber(\"1234\")\n    // 1234l\n    // >>> stringToNumber(\"1234a\")\n    // Traceback (most recent call last):\n    // ...\n    // ValueError: invalid literal for long() with base 10: '1234a'\n    def stringToNumber(s : String) : Long = {\n        var result = 0l\n        var i = 0\n        while (i < s.length) {\n            var digit = s.charAt(i)\n            if (digit >= '0' && digit <= '9') {\n                result = result * 10 + digit - '0'\n            } else {\n                throw new ValueError(\"invalid literal for long() with base 10: '\" + s + \"'\")\n            }\n            i = i + 1\n        }\n        return result\n    }\n\n    // Convert a string to a number.\n    // The string is a sequence of digits in the given base.\n    // The number is a long value.\n    // >>> stringToNumber(\"123\")\n    // 123l\n    // >>> stringToNumber(\"00\")\n    // 0l\n    // >>> stringToNumber(\"FF\")\n    // 255l\n    // >>> stringToNumber(\"1234\")\n    // 1234l\n    // >>> stringToNumber(\"1234a\")\n    // Traceback (most recent call last):\n    // ...\n    // ValueError: invalid literal for long() with base 10: '1234a'\n    def stringToNumber2(s : String) : Long = {\n        var result = 0l\n        var i = 0\n        while (i < s.length) {\n            var",
    "        var x_ = x\n        var base_ = base\n        var result = \"\"\n        while (x_ > 0l) {\n            var digit = x_ % base_\n            result = digit.toString() + result\n            x_ = x_ / base_\n        }\n        return result",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        val x_ = x\n        val base_ = base\n        val base_digits = String.valueOf(base_)\n        val x_digits = String.valueOf(x_)\n        val base_digits_length = base_digits.length()\n        val x_digits_length = x_digits.length()\n        val result = \"\"\n        for (i <- 0 until x_digits_length) {\n            val digit = x_digits.substring(i, i + 1)\n            val digit_index = base_digits.indexOf(digit)\n            if (digit_index < 0) {\n                throw new java.lang.RuntimeException(\"digit \" + digit + \" not found in base \" + base_)\n            }\n            val digit_index_in_base = digit_index + base_digits_length\n            result = result + base_digits.substring(digit_index_in_base, digit_index_in_base + 1)\n        }\n        return result",
    "        def change(x : Long) : String = {\n            if (x < 0) {\n                return \"-\" + change(-x)\n            } else {\n                return \"\" + (x / base)\n            }\n        }\n        return change(x)\n    }\n\n    // Convert a string representation of a number to a number.\n    // >>> convertToNumber(\"22\")\n    // 22\n    // >>> convertToNumber(\"1000\")\n    // 1000\n    // >>> convertToNumber(\"111\")\n    // 111\n    def convertToNumber(s : String) : Long = {\n        if (s.startsWith(\"-\")) {\n            return -convertToNumber(s.substring(1))\n        } else {\n            return Long.parseLong(s)\n        }\n    }\n\n    // Convert a string representation of a number to a string representation of a base.\n    // >>> convertToBase(\"22\", 3)\n    // \"2\"\n    // >>> convertToBase(\"1000\", 3)\n    // \"10\"\n    // >>> convertToBase(\"111\", 3)\n    // \"11\"\n    // >>> convertToBase(\"111\", 2)\n    // \"11\"\n    def convertToBase(x : Long, base : Long) : String = {\n        def change(x : Long) : String = {\n            if (x < 0) {\n                return \"-\" + change(-x)\n            } else {\n                return \"\" + (x / base)\n            }\n        }\n        return change(x)\n    }\n\n    // Convert a string representation of a number to a string representation of a base.\n    // >>> convertToBase(\"22\", 3)\n    // \"2\"\n    // >>> convertToBase(\"1000\", 3)\n    // \"10\"\n    // >>> convertToBase(\"111\", 3)\n    // \"11\"\n    // >>> convertToBase(\"111\", 2)\n    // \"11\"\n    def convertToBase2(x : Long, base : Long) : String = {\n        def change(x : Long) : String = {\n            if (x < 0) {\n                return \"-\" + change(-x)\n            } else {\n                return \"\" + (x / base)",
    "        val xStr = x.toString\n        val baseStr = base.toString\n        val result = \"\"\n        for (i <- 0 until xStr.length) {\n            val digit = xStr.substring(i, i + 1)\n            val digitBase = baseStr.substring(i, i + 1)\n            val digitBaseInt = Integer.parseInt(digitBase)\n            val digitInt = Integer.parseInt(digit)\n            val digitBaseIntPow = _.pow(digitBaseInt, xStr.length - i - 1)\n            val digitIntPow = _.pow(digitInt, xStr.length - i - 1)\n            val digitBaseIntPowMod = _.mod(digitBaseIntPow, base)\n            val digitIntPowMod = _.mod(digitIntPow, base)\n            val digitBaseIntPowModDiv = _.div(digitBaseIntPowMod, base)\n            val digitIntPowModDiv = _.div(digitIntPowMod, base)\n            val digitBaseIntPowModDivMod = _.mod(digitBaseIntPowModDiv, base)\n            val digitIntPowModDivMod = _.mod(digitIntPowModDiv, base)\n            val digitBaseIntPowModDivModDiv = _.div(digitBaseIntPowModDivMod, base)\n            val digitIntPowModDivModDiv = _.div(digitIntPowModDivMod, base)\n            val digitBaseIntPowModDivModDivMod = _.mod(digitBaseIntPowModDivDiv, base)\n            val digitIntPowModDivModDivMod = _.mod(digitIntPowModDivModDiv, base)\n            val digitBaseIntPowModDivModDivModDiv = _.div(digitBaseIntPowModDivModDivMod, base)\n            val digitIntPowModDivModDivModDiv = _.div(digitIntPowModDivModDivMod, base)\n            val digitBaseIntPowModDivModDivModDivMod = _.mod(digitBaseIntPowModDivModDivModDiv, base)\n            val digitIntPowModDivModDivModDiv",
    "        def toString(x : Long, base : Long) : String = {\n            if (x == 0) {\n                return \"\"\n            }\n            if (x < 0) {\n                return toString(-x, base)\n            }\n            if (x < base) {\n                return toString(x, base)\n            }\n            return toString(x % base, base) + toString(x / base, base)\n        }\n        return toString(x, base)\n    }\n\n    // Change the base of a string representation of a number.\n    // base numbers are less than 10.\n    // >>> changeBaseString(\"22\", (3l))\n    // (\"22\")\n    // >>> changeBaseString(\"1000\", (2l))\n    // (\"1000\")\n    // >>> changeBaseString(\"111\", (2l))\n    // (\"111\")\n    def changeBaseString(x : String, base : Long) : String = {\n        def toString(x : String, base : Long) : String = {\n            if (x == \"\") {\n                return \"\"\n            }\n            if (x < \"0\") {\n                return toString(-x, base)\n            }\n            if (x < base) {\n                return toString(x, base)\n            }\n            return toString(x % base, base) + toString(x / base, base)\n        }\n        return toString(x, base)\n    }\n\n    // Change the base of a string representation of a number.\n    // base numbers are less than 10.\n    // >>> changeBaseString(\"22\", (3l))\n    // (\"22\")\n    // >>> changeBaseString(\"1000\", (2l))\n    // (\"1000\")\n    // >>> changeBaseString(\"111\", (2l))\n    // (\"111\")\n    def changeBaseString2(x : String, base : Long) : String = {\n        def toString(x : String, base : Long) : String = {\n            if (x == \"\") {\n                return \"\"\n            }\n            if (x < \"0\") {\n                return toString(-x, base)\n            }\n            if (x < base) {\n                return toString(x",
    "        val xStr = x.toString\n        val baseStr = base.toString\n        val result = \"\"\n        for (i <- 0 until xStr.length) {\n            val digit = xStr.substring(i, i + 1)\n            val digitBase = baseStr.substring(i, i + 1)\n            result = result + digitBase\n        }\n        result\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 10.\n    // >>> stringToNumber(\"22\")\n    // 22\n    // >>> stringToNumber(\"1000\")\n    // 1000\n    // >>> stringToNumber(\"111\")\n    // 111\n    def stringToNumber(s : String) : Long = {\n        val result = 0l\n        for (i <- 0 until s.length) {\n            val digit = s.substring(i, i + 1)\n            result = result * 10 + Long.parseLong(digit)\n        }\n        result\n    }\n\n    // Convert a number to a string representation in base 10.\n    // >>> numberToString(22)\n    // \"22\"\n    // >>> numberToString(1000)\n    // \"1000\"\n    // >>> numberToString(111)\n    // \"111\"\n    def numberToString(n : Long) : String = {\n        val result = \"\"\n        for (i <- 0 until n.toString().length) {\n            val digit = n.toString.substring(i, i + 1)\n            result = result + digit\n        }\n        result\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 2.\n    // >>> stringToNumber(\"22\")\n    // 22\n    // >>> stringToNumber(\"1000\")\n    // 1000\n    // >>> stringToNumber(\"111\")\n    // 111\n    def stringToNumber2(s : String) : Long = {\n        val result = 0l\n        for (i <- 0 until s.length) {\n            val digit = s.substring(i, i + 1)\n            result = result * 2 + Long.parseLong(digit)\n        }\n        result\n    }\n\n    ",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        val xStr = x.toString\n        val baseStr = base.toString\n        val result = \"\"\n        for (i <- 0 until xStr.length) {\n            val digit = xStr[i]\n            val digitBase = digit.toString\n            val digitBaseInt = digitBase.toInt\n            val digitBaseIntBase = digitBaseInt.toInt\n            val digitBaseIntBaseBase = digitBaseIntBase.toInt\n            val digitBaseIntBaseBaseBase = digitBaseIntBaseBase.toInt\n            val digitBaseIntBaseBaseBaseBase = digitBaseIntBaseBaseBase.toInt\n            val digitBaseIntBaseBaseBaseBaseBase = digitBaseIntBaseBaseBaseBase.toInt\n            val digitBaseIntBaseBaseBaseBaseBaseBase = digitBaseIntBaseBaseBaseBaseBase.toInt\n            val digitBaseIntBaseBaseBaseBaseBaseBaseBase = digitBaseIntBaseBaseBaseBaseBaseBase.toInt\n            val digitBaseIntBaseBaseBaseBaseBaseBaseBaseBase = digitBaseIntBaseBaseBaseBaseBaseBaseBase.toInt\n            val digitBaseIntBaseBaseBaseBaseBaseBaseBaseBaseBase = digitBaseIntBaseBaseBaseBaseBaseBaseBaseBase.toInt\n            val digitBaseIntBaseBaseBaseBaseBaseBaseBaseBaseBaseBase = digitBaseIntBaseBaseBaseBaseBaseBaseBaseBaseBase.toInt\n            val digitBaseIntBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBase = digitBaseIntBaseBaseBaseBaseBaseBaseBaseBaseBaseBase.toInt\n            val digitBaseIntBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBase = digitBaseIntBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBase.toInt\n            val digitBaseIntBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBase = digitBaseIntBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBase.toInt\n            val digitBaseIntBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBase = digitBaseIntBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBase.toInt\n            val digitBaseIntBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBase = digitBaseIntBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBase.toInt\n            val digitBaseIntBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBase",
    "        var y = x\n        var result = \"\"\n        while (y > 0) {\n            var digit = y % base\n            result = digit + result\n            y /= base\n        }\n        return result\n    }\n\n    // Change the numerical base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBaseToBase((8l), (3l), (2l))\n    // (\"1000\")\n    // >>> changeBaseToBase((8l), (3l), (10l))\n    // (\"8\")\n    // >>> changeBaseToBase((8l), (2l), (10l))\n    // (\"1000\")\n    // >>> changeBaseToBase((7l), (2l), (10l))\n    // (\"111\")\n    def changeBaseToBase(x : Long, base1 : Long, base2 : Long) : String = {\n        var y = x\n        var result = \"\"\n        while (y > 0) {\n            var digit = y % base1\n            result = digit + result\n            y /= base1\n        }\n        return result.toString() + changeBase(result, base2)",
    "        val b = scala.math.BigInteger.valueOf(x)\n        val bb = scala.math.BigInteger.valueOf(base)\n        val res = b.divide(bb).toString()\n        return res",
    "        if (x == 0) {\n            \"0\"\n        } else {\n            var result = \"\"\n            var digit = x\n            while (digit > 0) {\n                var remainder = digit % base\n                result = remainder + result\n                digit = digit / base\n            }\n            result\n        }\n    }\n\n    // Return the number of digits in the given number.\n    // >>> digits(123)\n    // (3)\n    def digits(x : Long) : Int = {\n        if (x == 0) {\n            0\n        } else {\n            var result = 1\n            var digit = x\n            while (digit > 0) {\n                digit = digit / 10\n                result = result + 1\n            }\n            result\n        }\n    }\n\n    // Return the number of digits in the given number.\n    // >>> digits(123456789)\n    // (9)\n    def digits2(x : Long) : Int = {\n        if (x == 0) {\n            0\n        } else {\n            var result = 1\n            var digit = x\n            while (digit > 0) {\n                digit = digit / 10\n                result = result + 1\n            }\n            result\n        }\n    }\n\n    // Return the number of digits in the given number.\n    // >>> digits(123456789)\n    // (9)\n    def digits3(x : Long) : Int = {\n        if (x == 0) {\n            0\n        } else {\n            var result = 1\n            var digit = x\n            while (digit > 0) {\n                digit = digit / 10\n                result = result + 1\n            }\n            result\n        }\n    }\n\n    // Return the number of digits in the given number.\n    // >>> digits(123456789)\n    // (9)\n    def digits4(x : Long) : Int = {\n        if (x == 0) {\n            0\n        } else {\n            var result = 1\n            var digit = x\n            while (digit > 0) {\n                digit = digit / 10\n                result = result + 1\n            }\n            result\n        }\n    }\n\n    // Return the number of digits in the given",
    "        val x_ = x\n        val base_ = base\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val x_ = x_\n        val base_ = base_\n        val",
    "        var x_ = x\n        var base_ = base\n        var result = \"\"\n        while (x_ > 0) {\n            var digit = x_ % base_\n            result = digit + result\n            x_ = x_ / base_\n        }\n        return result"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}