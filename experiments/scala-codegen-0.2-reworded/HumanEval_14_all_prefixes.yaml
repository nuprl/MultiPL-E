name: HumanEval_14_all_prefixes
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return list of all prefixes from shortest to longest of the input string\n\
  \    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\", \"abc\"\
  ))\n    def allPrefixes(string : String) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\"\
  )).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
  a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
  WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
completions: ["        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(0, i + 1))\n        }\n\
    \        return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string,\n    // where the number of characters in each permutation is\
    \ the same\n    // >>> allPermutationsSameLength((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutationsSameLength(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n",
  "        var result = List[String]()\n        for (var i = 0; i < string.length();\
    \ i++) {\n            var prefix = string.substring(0, i + 1)\n            result\
    \ = result.append(prefix)\n        }\n        return result\n    }\n\n    // Return\
    \ list of all suffixes from shortest to longest of the input string\n    // >>>\
    \ allSuffixes((\"abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def\
    \ allSuffixes(string : String) : List[String] = {\n        var result = List[String]()\n\
    \        for (var i = 0; i < string.length(); i++) {\n            var suffix =\
    \ string.substring(i)\n            result = result.append(suffix)\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (var i = 0; i < string.length(); i++) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (var i = 0; i < string.length(); i++) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations(", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations(\"abc\")\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string, except those that\n\
    \    // begin or end with the same character.\n    // >>> allPermutationsExcept(\"\
    abc\")\n    // (List[String](\"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutationsExcept(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j and string.charAt(i) != string.charAt(j)) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n", "        var result = List[String]()\n\
    \        for (var i = 0; i < string.length(); i++) {\n            var prefix =\
    \ string.substring(0, i + 1)\n            result = result.append(prefix)\n   \
    \     }\n        return result\n    }\n\n    // Return list of all suffixes from\
    \ shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n\
    \    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String)\
    \ : List[String] = {\n        var result = List[String]()\n        for (var i\
    \ = 0; i < string.length(); i++) {\n            var suffix = string.substring(i)\n\
    \            result = result.append(suffix)\n        }\n        return result\n\
    \    }\n\n    // Return list of all permutations of the input string\n    // >>>\
    \ allPermutations((\"abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\",\
    \ \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string : String) : List[String]\
    \ = {\n        var result = List[String]()\n        for (var i = 0; i < string.length();\
    \ i++) {\n            var permutation = string.substring(0, i) + string.substring(i\
    \ + 1)\n            result = result.append(permutation)\n        }\n        return\
    \ result\n    }\n\n    // Return list of all permutations of the input string\n\
    \    // >>> allPermutations((\"abc\"))\n    // (List[String](\"abc\", \"acb\"\
    , \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string : String)\
    \ : List[String] = {\n        var result = List[String]()\n        for (var i\
    \ = 0; i < string.length(); i++) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations(", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i).reverse())\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i).reverse())\n                }\n            }\n        }\n        return result\n\
    \    }\n\n    // Return list of all permutations", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i).reverse())\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i).reverse())\n                }\n            }\n        }\n        return result\n\
    \    }\n\n    // Return list of all permutations", "        var result = List[String]()\n\
    \        for (var i = 0; i < string.length(); i++) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (var i = 0; i < string.length(); i++) {\n            result = result.append(string.substring(i,\
    \ string.length()))\n        }\n        return result\n    }\n\n    // Return\
    \ list of all permutations of the input string\n    // >>> allPermutations(\"\
    abc\")\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"\
    ))\n    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (var i = 0; i < string.length(); i++) {\n    \
    \        for (var j = 0; j < string.length(); j++) {\n                if (i !=\
    \ j) {\n                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string\n    // >>>\
    \ allPermutations(\"abc\")\n    // (List[String](\"abc\", \"acb\", \"bac\", \"\
    bca\", \"cab\", \"cba\"))\n    def allPermutations2(string : String) : List[String]\
    \ = {\n        var result = List[String]()\n        for (var i = 0; i < string.length();\
    \ i++) {\n            for (var j = 0; j < string.length(); j++) {\n          \
    \      if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                ", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations(\"abc\")\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations2(\"\
    abc\")\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"\
    ))\n    def allPermutations2(string : String) : List[String] = {\n        var\
    \ result = List[String]()\n        for (i <- 0 until string.length) {\n      \
    \      for (j <- 0 until string.length) {\n                if (i != j) {\n   \
    \                 result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string\n", "     \
    \   var result = List[String]()\n        for (i <- 0 until string.length) {\n\
    \            result = result.append(string.substring(0, i + 1))\n        }\n \
    \       return result", "        var result = List[String]()\n        for (i <-\
    \ 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(0, i + 1))\n        }\n   \
    \     return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations(\"abc\")\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            var sub = string.substring(0, i)\n\
    \            for (j <- 0 until string.length) {\n                var sub2 = string.substring(i,\
    \ j)\n                for (k <- 0 until string.length) {\n                   \
    \ var sub3 = string.substring(j, k)\n                    for (l <- 0 until string.length)\
    \ {\n                        var sub4 = string.substring(k, l)\n             \
    \           for (m <- 0 until string.length) {\n                            var\
    \ sub5 = string.substring(l, m)\n                            for (n <- 0 until\
    \ string.length) {\n                                var sub6 = string.substring(m,\
    \ n)\n                                for (o <- 0 until string.length) {\n   \
    \                                 var sub7 = string.substring(n, o)\n        \
    \                            for (p <- 0 until string.length) {\n            \
    \                            var sub8 = string.substring(o, p)\n             \
    \                           for (q <- 0 until string.length) {\n             \
    \                               var sub9 = string.sub", "        var result =\
    \ List[String]()\n        for (i <- 0 until string.length) {\n            result\
    \ = result.append(string.substring(0, i + 1))\n        }\n        return result\n\
    \    }\n\n    // Return list of all suffixes from shortest to longest of the input\
    \ string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"c\", \"bc\"\
    , \"abc\"))\n    def allSuffixes(string : String) : List[String] = {\n       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(string.length - i - 1))\n \
    \       }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string", "        var result = List[String]()\n        for (i <- 0 until\
    \ string.length) {\n            result = result.append(string.substring(0, i +\
    \ 1))\n        }\n        return result\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"\
    ))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(0, i + 1))\n        }\n   \
    \     return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            var sub = string.substring(0, i)\n\
    \            var rest = string.substring(i)\n            for (j <- 0 until rest.length)\
    \ {\n                result = result.append(sub + rest.substring(0, j) + rest.substring(j))\n\
    \            }\n        }\n        return result\n    }\n\n    // Return list\
    \ of all permutations of the input string\n    // >>> allPermutations((\"abc\"\
    ))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"\
    ))\n    def allPermutations2(string : String) : List[String] = {\n        var\
    \ result = List[String]()\n        for (i <- 0 until string.length) {\n      \
    \      var sub = string.substring(0, i)\n            var rest = string.substring(i)\n\
    \            for (j <- 0 until rest.length) {\n                result = result.append(sub\
    \ + rest.substring(0, j) + rest.substring(", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(0, i + 1))\n        }\n   \
    \     return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i).reverse())\n                }\n            }\n \
    \       }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i).reverse())\n                }\n            }\n \
    \       }\n        return result\n    }\n\n    // Return list of all permutations",
  "        var result = List[String]()\n        for (var i = 0; i < string.length;\
    \ i++) {\n            var prefix = string.substring(0, i + 1)\n            result\
    \ = result.append(prefix)\n        }\n        return result", "        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            result\
    \ = result.append(string.substring(0, i + 1))\n        }\n        return result\n\
    \    }\n\n    // Return list of all suffixes from shortest to longest of the input\
    \ string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"c\", \"bc\"\
    , \"abc\"))\n    def allSuffixes(string : String) : List[String] = {\n       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(string.length - i - 1))\n \
    \       }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            var sub = string.substring(0, i)\n\
    \            var rest = string.substring(i)\n            for (j <- 0 until rest.length)\
    \ {\n                result = result.append(sub + rest.substring(0, j) + rest.substring(j))\n\
    \            }\n        }\n        return result\n    }\n\n    // Return list\
    \ of all permutations of the input string\n    // >>> allPermutations((\"abc\"\
    ))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"\
    ))\n    def allPermutations2(string : String) : List[String] = {\n        var\
    \ result = List[String]()\n        for (i <- 0 until string.length) {\n      \
    \      var sub = string.substring(0, i)\n            var rest = string.substring(i)\n\
    \            for (j <- 0 until rest.length) {\n                result = result.append(sub\
    \ + rest.substring(0, j) + rest.substring(", "        val result = mutable.List.empty\n\
    \        for (i <- 0 until string.length) {\n            val prefix = string.substring(i)\n\
    \            result = result.append(prefix)\n        }\n        result", "   \
    \     var result = List[String]()\n        for (i <- 0 until string.length) {\n\
    \            result = result.append(string.substring(0, i + 1))\n        }\n \
    \       return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string", "        var result = List[String]()\n        for (i <- 0 until\
    \ string.length) {\n            result = result.append(string.substring(0, i +\
    \ 1))\n        }\n        return result\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"\
    ))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations(\"abc\")\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all strings that are substrings of the input string\n \
    \   // >>> allSubstrings(\"abc\")\n    // (List[String](\"a\", \"ab\", \"abc\"\
    , \"b\", \"bc\", \"c\"))\n    def allSubstrings(string : String) : List[String]\
    \ = {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            for (j <- 0 until string.length) {\n                if (i !=\
    \ j) {\n                    result = result.append(string.substring(i, j))\n \
    \               }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all strings that are substrings of the input string\n \
    \   // >>> allSubstrings(\"abc\")\n    // (", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            var\
    \ sub = string.substring(0, i)\n            for (j <- 0 until string.length) {\n\
    \                var sub2 = string.substring(i, j)\n                for (k <-\
    \ 0 until string.length) {\n                    var sub3 = string.substring(j,\
    \ k)\n                    for (l <- 0 until string.length) {\n               \
    \         var sub4 = string.substring(k, l)\n                        for (m <-\
    \ 0 until string.length) {\n                            var sub5 = string.substring(l,\
    \ m)\n                            for (n <- 0 until string.length) {\n       \
    \                         var sub6 = string.substring(m, n)\n                \
    \                for (o <- 0 until string.length) {\n                        \
    \            var sub7 = string.substring(n, o)\n                             \
    \       for (p <- 0 until string.length) {\n                                 \
    \       var sub8 = string.substring(o, p)\n                                  \
    \      for (q <- 0 until string.length) {\n                                  \
    \          var sub9 = string.", "        var result = List[String]()\n       \
    \ var i = 0\n        while (i < string.length) {\n            var j = i\n    \
    \        while (j < string.length && string[j] == string[i]) {\n             \
    \   j += 1\n            }\n            result = result.append(string.substring(i,\
    \ j))\n            i = j\n        }\n        return result\n    }\n\n    // Return\
    \ list of all suffixes from shortest to longest of the input string\n    // >>>\
    \ allSuffixes((\"abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def\
    \ allSuffixes(string : String) : List[String] = {\n        var result = List[String]()\n\
    \        var i = string.length - 1\n        while (i >= 0) {\n            var\
    \ j = i\n            while (j >= 0 && string[j] == string[i]) {\n            \
    \    j -= 1\n            }\n            result = result.append(string.substring(i,\
    \ j + 1))\n            i = j\n        }\n        return result\n    }\n\n    //\
    \ Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations(string : String) : List[String] = {\n       \
    \ var result = List[String]()\n        var i = 0\n        while (i < string.length)\
    \ {\n            var j = i\n            while (j < string.length && string[j]\
    \ == string[i]) {\n                j += 1\n            }\n            result =\
    \ result.append(string.substring(i, j))\n            i = j\n        }\n      \
    \  return result\n    }\n\n    // Return list of all permutations of the input\
    \ string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"abc\"\
    , \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        var\
    \ i", "        var result = List[String]()\n        for (var i = 0; i < string.length();\
    \ i++) {\n            var prefix = string.substring(0, i + 1)\n            result\
    \ = result.append(prefix)\n        }\n        return result\n    }\n\n    // Return\
    \ list of all suffixes from shortest to longest of the input string\n    // >>>\
    \ allSuffixes((\"abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def\
    \ allSuffixes(string : String) : List[String] = {\n        var result = List[String]()\n\
    \        for (var i = 0; i < string.length(); i++) {\n            var suffix =\
    \ string.substring(i)\n            result = result.append(suffix)\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (var i = 0; i < string.length(); i++) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (var i = 0; i < string.length(); i++) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations(", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i).reverse())\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i).reverse())\n                }\n            }\n        }\n        return result\n\
    \    }\n\n    // Return list of all permutations", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n            }\n        }\n        return result\n\
    \    }\n\n    // Return list of all permutations of the input string\n    // >>>\
    \ allPermutations((\"abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\",\
    \ \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string : String) : List[String]\
    \ = {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            for (j <- 0 until string.length) {\n                result =\
    \ result.append(string.substring(i, j) + string.substring(j, i))\n           \
    \ }\n        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"", "        val result = mutable.List[String]()\n        for (i <- 0\
    \ until string.length) {\n            val prefix = string.substring(0, i + 1)\n\
    \            result.append(prefix)\n        }\n        result\n    }\n\n    //\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \   // >>> allSuffixes((\"abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"\
    ))\n    def allSuffixes(string : String) : List[String] = {\n        val result\
    \ = mutable.List[String]()\n        for (i <- 0 until string.length) {\n     \
    \       val suffix = string.substring(i, string.length)\n            result.append(suffix)\n\
    \        }\n        result\n    }\n\n    // Return list of all permutations of\
    \ the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        val result = mutable.List[String]()\n\
    \        for (i <- 0 until string.length) {\n            val permutation = string.substring(0,\
    \ i) + string.substring(i + 1, string.length)\n            result.append(permutation)\n\
    \        }\n        result\n    }\n\n    // Return list of all permutations of\
    \ the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        val result = mutable.List[String]()\n\
    \        for (i <- 0 until string.length) {\n            val permutation = string.substring(0,\
    \ i) + string.substring(i + 1, string.length)\n            result.append(permutation)\n\
    \        }\n        result\n    }\n\n    // Return list of all permutations of\
    \ the input string\n    // >>> allPermutations((\"abc\"))\n    // (List", "  \
    \      var result = List[String]()\n        for (i <- 0 until string.length) {\n\
    \            result = result.append(string.substring(0, i + 1))\n        }\n \
    \       return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string", "        var result = List[String]()\n        for (i <- 0 until\
    \ string.length) {\n            result = result.append(string.substring(0, i +\
    \ 1))\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            var prefix = string.substring(0,\
    \ i + 1)\n            result = result.append(prefix)\n        }\n        return\
    \ result\n    }\n\n    // Return list of all suffixes from shortest to longest\
    \ of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            var suffix = string.substring(i, string.length)\n           \
    \ result = result.append(suffix)\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations(string : String) : List[String] = {\n       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          var permutation = string.substring(0, i) + string.substring(i + 1,\
    \ string.length)\n            result = result.append(permutation)\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1, string.length)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List", " \
    \       var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(0, i + 1))\n        }\n\
    \        return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string", "        var result = List[String]()\n        for (i <- 0 until\
    \ string.length) {\n            result = result.append(string.substring(0, i +\
    \ 1))\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations(\"abc\")\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations2(\"\
    abc\")\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"\
    ))\n    def allPermutations2(string : String) : List[String] = {\n        var\
    \ result = List[String]()\n        for (i <- 0 until string.length) {\n      \
    \      for (j <- 0 until string.length) {\n                if (i != j) {\n   \
    \                 result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string\n", "     \
    \   var result = List[String]()\n        for (i <- 0 until string.length) {\n\
    \            result = result.append(string.substring(0, i + 1))\n        }\n \
    \       return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i).reverse())\n                }\n            }\n \
    \       }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i).reverse())\n                }\n            }\n \
    \       }\n        return result\n    }\n\n    // Return list of all permutations",
  "        var result = List[String]()\n        for (i <- 0 until string.length) {\n\
    \            result = result.append(string.substring(0, i + 1))\n        }\n \
    \       return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string", "        var result = List[String]()\n        for (i <- 0 until\
    \ string.length) {\n            result = result.append(string.substring(0, i +\
    \ 1))\n        }\n        return result\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"\
    ))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (var i = 0; i < string.length(); i++)\
    \ {\n            var prefix = string.substring(0, i + 1)\n            result =\
    \ result.append(prefix)\n        }\n        return result\n    }\n\n    // Return\
    \ list of all suffixes from shortest to longest of the input string\n    // >>>\
    \ allSuffixes((\"abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def\
    \ allSuffixes(string : String) : List[String] = {\n        var result = List[String]()\n\
    \        for (var i = 0; i < string.length(); i++) {\n            var suffix =\
    \ string.substring(i)\n            result = result.append(suffix)\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (var i = 0; i < string.length(); i++) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (var i = 0; i < string.length(); i++) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations(", "        var result = List[String]()\n\
    \        var i = 0\n        while (i < string.length) {\n            var j = i\n\
    \            while (j < string.length && string[j] == string[i]) {\n         \
    \       j += 1\n            }\n            result = result.append(string.substring(i,\
    \ j))\n            i = j\n        }\n        return result\n    }\n\n    // Return\
    \ list of all suffixes from shortest to longest of the input string\n    // >>>\
    \ allSuffixes((\"abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def\
    \ allSuffixes(string : String) : List[String] = {\n        var result = List[String]()\n\
    \        var i = string.length - 1\n        while (i >= 0) {\n            var\
    \ j = i\n            while (j >= 0 && string[j] == string[i]) {\n            \
    \    j -= 1\n            }\n            result = result.append(string.substring(i,\
    \ j + 1))\n            i = j\n        }\n        return result\n    }\n\n    //\
    \ Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations(string : String) : List[String] = {\n       \
    \ var result = List[String]()\n        var permutations = allPrefixes(string)\n\
    \        for (permutation in permutations) {\n            var suffixes = allSuffixes(string)\n\
    \            for (suffix in suffixes) {\n                result = result.append(permutation\
    \ + suffix)\n            }\n        }\n        return result\n    }\n\n    //\
    \ Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        var permutations = allPrefixes(string",
  "        var result = List[String]()\n        for (i <- 0 until string.length) {\n\
    \            result = result.append(string.substring(0, i + 1))\n        }\n \
    \       return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                result = result.append(string.substring(i, j).concat(string.substring(j,\
    \ i)))\n            }\n        }\n        return result\n    }\n\n    // Return\
    \ list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                result = result.append(string.substring(i,\
    \ j).concat(string.substring(j, i)))\n            }\n        }\n        return\
    \ result\n    }\n\n    // Return list of all permutations of the input string\n\
    \    // >>> allPermutations((\"abc\"))\n    // (List[String]", "        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            var\
    \ prefix = string.substring(0, i + 1)\n            result = result.append(prefix)\n\
    \        }\n        return result\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"\
    ))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            var suffix = string.substring(i)\n\
    \            result = result.append(suffix)\n        }\n        return result\n\
    \    }\n\n    // Return list of all permutations of the input string\n    // >>>\
    \ allPermutations((\"abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\",\
    \ \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string : String) : List[String]\
    \ = {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            var permutation = string.substring(0, i) + string.substring(i\
    \ + 1)\n            result = result.append(permutation)\n        }\n        return\
    \ result\n    }\n\n    // Return list of all permutations of the input string\n\
    \    // >>> allPermutations((\"abc\"))\n    // (List[String](\"abc\", \"acb\"\
    , \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string : String)\
    \ : List[String] = {\n        var result = List[String]()\n        for (i <- 0\
    \ until string.length) {\n            var permutation = string.substring(0, i)\
    \ + string.substring(i + 1)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"b", "        var result = List[String]()\n        for (i <-\
    \ 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(0, i + 1))\n        }\n   \
    \     return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string", "        var result = List[String]()\n        for (var i = 0;\
    \ i < string.length(); i++) {\n            var prefix = string.substring(0, i\
    \ + 1)\n            result = result.append(prefix)\n        }\n        return\
    \ result\n    }\n\n    // Return list of all suffixes from shortest to longest\
    \ of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (var i = 0; i < string.length();\
    \ i++) {\n            var suffix = string.substring(i)\n            result = result.append(suffix)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        var\
    \ permutations = allPrefixes(string)\n        for (var i = 0; i < permutations.length();\
    \ i++) {\n            var permutation = permutations.apply(i)\n            result\
    \ = result.append(permutation)\n        }\n        return result\n    }\n\n  \
    \  // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        var permutations = allPrefixes(string)\n\
    \        for (var i = 0; i < permutations.length(); i++) {\n            var permutation\
    \ = permutations.apply(i)\n            result = result.append(permutation)\n \
    \       }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> all", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(0, i + 1))\n        }\n   \
    \     return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1,\
    \ string.length))\n        }\n        return result\n    }\n\n    // Return list\
    \ of all permutations of the input string\n    // >>> allPermutations((\"abc\"\
    ))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"\
    ))\n    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string,\n    // but with\
    \ duplicates removed\n    // >>> allUniquePermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allUniquePermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result.filter", "        var result = List[String]()\n       \
    \ for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                result = result.append(string.substring(i,\
    \ j).concat(string.substring(j, i)))\n            }\n        }\n        return\
    \ result\n    }\n\n    // Return list of all permutations of the input string\n\
    \    // >>> allPermutations((\"abc\"))\n    // (List[String](\"abc\", \"acb\"\
    , \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string : String)\
    \ : List[String] = {\n        var result = List[String]()\n        for (i <- 0\
    \ until string.length) {\n            for (j <- 0 until string.length) {\n   \
    \             result = result.append(string.substring(i, j).concat(string.substring(j,\
    \ i)))\n            }\n        }\n        return result\n    }\n\n    // Return\
    \ list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String]", "        var result = List[String]()\n       \
    \ for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(0, i + 1))\n        }\n   \
    \     return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string, except those that\n    // begin with the input string itself\n\
    \    // >>> allPermutationsExcept((\"abc\"))\n    // (List[String](\"bca\", \"\
    cab\", \"cba\"))\n    def allPermutationsExcept(string : String) : List[String]\
    \ = {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            for (j <- 0 until string.length) {\n                if (i !=\
    \ j) {\n                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations(\"abc\")\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations(\"\
    abc\")\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"\
    ))\n    def allPermutations2(string : String) : List[String] = {\n        var\
    \ result = List[String]()\n        for (i <- 0 until string.length) {\n      \
    \      for (j <- 0 until string.length) {\n                if (i != j) {\n   \
    \                 result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string\n    ", " \
    \       var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(0, i + 1))\n        }\n\
    \        return result", "        var result = List[String]()\n        for (i\
    \ <- 0 until string.length) {\n            var prefix = string.substring(0, i\
    \ + 1)\n            result = result.append(prefix)\n        }\n        return\
    \ result\n    }\n\n    // Return list of all suffixes from shortest to longest\
    \ of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            var suffix = string.substring(i)\n            result = result.append(suffix)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"b", "        var result = List[String]()\n        for (var i\
    \ = 0; i < string.length; i++) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (var i = 0; i < string.length; i++) {\n            result = result.append(string.substring(i,\
    \ string.length))\n        }\n        return result\n    }\n\n    // Return list\
    \ of all permutations of the input string\n    // >>> allPermutations((\"abc\"\
    ))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"\
    ))\n    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (var i = 0; i < string.length; i++) {\n      \
    \      var sub = string.substring(0, i)\n            var rest = string.substring(i\
    \ + 1)\n            for (var j = 0; j < rest.length; j++) {\n                var\
    \ perm = sub + rest.substring(0, j) + rest.substring(j + 1)\n                result\
    \ = result.append(perm)\n            }\n        }\n        return result\n   \
    \ }\n\n    // Return list of all permutations of the input string\n    // >>>\
    \ allPermutations((\"abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\",\
    \ \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string : String) : List[String]\
    \ = {\n        var result = List[String]()\n        for (var i = 0; i < string.length;\
    \ i++) {\n            var sub = string.substring(0, i)\n            var rest =\
    \ string.substring(i + 1)\n            ", "        var result = List[String]()\n\
    \        var i = 0\n        while (i < string.length) {\n            var j = i\n\
    \            while (j < string.length && string.charAt(j) == string.charAt(i))\
    \ {\n                j += 1\n            }\n            result = result.append(string.substring(i,\
    \ j))\n            i = j\n        }\n        return result", "        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            result\
    \ = result.append(string.substring(0, i + 1))\n        }\n        return result\n\
    \    }\n\n    // Return list of all suffixes from shortest to longest of the input\
    \ string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"c\", \"bc\"\
    , \"abc\"))\n    def allSuffixes(string : String) : List[String] = {\n       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(string.length - i - 1))\n \
    \       }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string", "        var result = List[String]()\n        for (i <- 0 until\
    \ string.length) {\n            result = result.append(string.substring(0, i +\
    \ 1))\n        }\n        return result\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"\
    ))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            var\
    \ permutations = allPermutations(string.substring(0, i) + string.substring(i +\
    \ 1))\n            for (permutation <- permutations) {\n                result\
    \ = result.append(permutation + string.substring(i, i + 1))\n            }\n \
    \       }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            var permutations = allPermutations(string.substring(0,\
    \ i) + string.substring(i + 1))\n            for (permutation <- permutations)\
    \ {\n                result = result.append(permutation + string.substring(i,\
    \ i + 1))\n            }\n", "        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        var i = 0\n        while (i < string.length)\
    \ {\n            var j = i\n            while (j < string.length && string.charAt(j)\
    \ == string.charAt(i)) {\n                j += 1\n            }\n            result\
    \ = result.append(string.substring(i, j))\n            i = j\n        }\n    \
    \    return result", "        var result = List[String]()\n        for (i <- 0\
    \ until string.length) {\n            result = result.append(string.substring(i,\
    \ string.length))\n        }\n        return result\n    }\n\n    // Return list\
    \ of all suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ string.length - i))\n        }\n        return result\n    }\n\n    // Return\
    \ list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations(string : String) : List[String] = {\n       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, string.length).concat(string.substring(j,\
    \ string.length)))\n                }\n            }\n        }\n        return\
    \ result\n    }\n\n    // Return list of all permutations of the input string\n\
    \    // >>> allPermutations((\"abc\"))\n    // (List[String](\"abc\", \"acb\"\
    , \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string : String)\
    \ : List[String] = {\n        var result = List[String]()\n        for (i <- 0\
    \ until string.length) {\n            for (j <- 0 until string.length) {\n   \
    \             if (i != j) {\n                    result = result.append(string.substring(i,\
    \ string.length).concat(string.substring(j, string.length)))\n               \
    \ }\n            }\n        }\n        return result\n    }\n\n", "        var\
    \ result = List[String]()\n        for (i <- 0 until string.length) {\n      \
    \      result = result.append(string.substring(0, i + 1))\n        }\n       \
    \ return result\n    }\n\n    // Return list of all suffixes from shortest to\
    \ longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string", "        val result = List[String]()\n        for (i <- 0 until\
    \ string.length) {\n            result = result.append(string.substring(0, i +\
    \ 1))\n        }\n        return result\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"\
    ))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        val result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        val result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            val\
    \ permutations = allPermutations(string.substring(0, i) + string.substring(i +\
    \ 1))\n            for (permutation <- permutations) {\n                result\
    \ = result.append(permutation + string.substring(i, i + 1))\n            }\n \
    \       }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        val result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            val permutations = allPermutations2(string.substring(0,\
    \ i) + string.substring(i + 1))\n            for (permutation <- permutations)\
    \ {\n                result = result.append(permutation + string.substring(i,\
    \ i + 1))\n            }", "        var result = List[String]()\n        for (i\
    \ <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations(\"abc\")\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            var\
    \ sub = string.substring(0, i)\n            var rest = string.substring(i)\n \
    \           for (j <- 0 until rest.length) {\n                result = result.append(sub.concat(rest.substring(0,\
    \ j + 1)))\n            }\n        }\n        return result\n    }\n\n    // Return\
    \ list of all permutations of the input string\n    // >>> allPermutations(\"\
    abc\")\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"\
    ))\n    def allPermutations2(string : String) : List[String] = {\n        var\
    \ result = List[String]()\n        for (i <- 0 until string.length) {\n      \
    \      var sub = string.substring(0, i)\n            var rest = string.substring(i)\n\
    \            for (j <- 0 until rest.length) {\n                result = result.append(sub.concat(rest.substring(j)))\n\
    \            }\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(0, i + 1))\n        }\n   \
    \     return result", "        var result = List[String]()\n        for (i <-\
    \ 0 until string.length) {\n            var prefix = string.substring(0, i + 1)\n\
    \            result = result.append(prefix)\n        }\n        return result",
  "        var result = List[String]()\n        for (i <- 0 until string.length) {\n\
    \            result = result.append(string.substring(0, i + 1))\n        }\n \
    \       return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string", "        var result = List[String]()\n        for (i <- 0 until\
    \ string.length) {\n            result = result.append(string.substring(0, i +\
    \ 1))\n        }\n        return result\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"\
    ))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i).reverse())\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i).reverse())\n                }\n            }\n        }\n        return result\n\
    \    }\n\n    // Return list of all permutations", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i).reverse())\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i).reverse())\n                }\n            }\n        }\n        return result\n\
    \    }\n\n    // Return list of all permutations", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            var prefix = string.substring(0,\
    \ i + 1)\n            result = result.append(prefix)\n        }\n        return\
    \ result\n    }\n\n    // Return list of all suffixes from shortest to longest\
    \ of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            var suffix = string.substring(i)\n            result = result.append(suffix)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"b", "        var result = List[String]()\n        for (i <-\
    \ 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(0, i + 1))\n        }\n   \
    \     return result", "        var result = List[String]()\n        for (i <-\
    \ 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i).reverse())\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all strings that are substrings of the input string\n \
    \   // >>> allSubstrings((\"abc\"))\n    // (List[String](\"a\", \"ab\", \"abc\"\
    , \"b\", \"bc\", \"c\"))\n    def allSubstrings(string : String) : List[String]\
    \ = {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            for (j <- 0 until string.length) {\n                if (i !=\
    \ j) {\n                    result = result.append(string.substring(i, j))\n \
    \               }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all strings that are substrings of the input string\n \
    \   // >>> allSubstrings((\"abc", "        var result = List[String]()\n     \
    \   for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(0, i + 1))\n        }\n   \
    \     return result", "        var result = List[String]()\n        for (var i\
    \ = 0; i < string.length; i++) {\n            var prefix = string.substring(0,\
    \ i + 1)\n            result = result.append(prefix)\n        }\n        return\
    \ result\n    }\n\n    // Return list of all suffixes from shortest to longest\
    \ of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (var i = 0; i < string.length;\
    \ i++) {\n            var suffix = string.substring(i)\n            result = result.append(suffix)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (var i = 0; i < string.length; i++) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (var i = 0; i < string.length; i++) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations(", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(0, i + 1))\n        }\n   \
    \     return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string", "        var result = List[String]()\n        for (i <- 0 until\
    \ string.length) {\n            result = result.append(string.substring(0, i +\
    \ 1))\n        }\n        return result\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"\
    ))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            var\
    \ sub = string.substring(0, i)\n            var rest = string.substring(i)\n \
    \           for (j <- 0 until rest.length) {\n                result = result.append(sub\
    \ + rest.substring(0, j) + rest.substring(j))\n            }\n        }\n    \
    \    return result\n    }\n\n    // Return list of all permutations of the input\
    \ string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"abc\"\
    , \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            var sub = string.substring(0, i)\n\
    \            var rest = string.substring(i)\n            for (j <- 0 until rest.length)\
    \ {\n                result = result.append(sub + rest.substring(0, j) + rest.substring(",
  "        var result = List[String]()\n        for (i <- 0 until string.length) {\n\
    \            result = result.append(string.substring(0, i + 1))\n        }\n \
    \       return result", "        var result = List[String]()\n        for (i <-\
    \ 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(0, i + 1))\n        }\n   \
    \     return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            var sub = string.substring(0, i)\n\
    \            for (j <- 0 until string.length) {\n                var sub2 = string.substring(i,\
    \ j)\n                result = result.append(sub + sub2)\n            }\n    \
    \    }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            var sub = string.substring(0, i)\n\
    \            for (j <- 0 until string.length) {\n                var sub2 = string.substring(i,\
    \ j)\n                result = result.append(sub + sub2)\n            }\n    \
    \    }\n        return result\n    }\n\n    // Return list of all", "        var\
    \ result = List[String]()\n        for (i <- 0 until string.length) {\n      \
    \      result = result.append(string.substring(0, i + 1))\n        }\n       \
    \ return result\n    }\n\n    // Return list of all suffixes from shortest to\
    \ longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations(\"abc\")\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations(\"abc\")\n    // (List[String](\"abc\"\
    , \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    ", "        var result = List[String]()\n        for (i <-\
    \ 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(0, i + 1))\n        }\n   \
    \     return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string", "        var result = List[String]()\n        for (i <- 0 until\
    \ string.length) {\n            result = result.append(string.substring(0, i +\
    \ 1))\n        }\n        return result\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"\
    ))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                result = result.append(string.substring(i,\
    \ j).concat(string.substring(j, i)))\n            }\n        }\n        return\
    \ result\n    }\n\n    // Return list of all permutations of the input string\n\
    \    // >>> allPermutations((\"abc\"))\n    // (List[String](\"abc\", \"acb\"\
    , \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string : String)\
    \ : List[String] = {\n        var result = List[String]()\n        for (i <- 0\
    \ until string.length) {\n            for (j <- 0 until string.length) {\n   \
    \             result = result.append(string.substring(i, j).concat(string.substring(j,\
    \ i)))\n            }\n        }\n        return result\n    }\n\n    // Return\
    \ list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String]", "        var result = List[String]()\n       \
    \ for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            var\
    \ sub = string.substring(0, i)\n            var rest = string.substring(i)\n \
    \           for (j <- 0 until rest.length) {\n                result = result.append(sub.concat(rest.substring(0,\
    \ j + 1)))\n            }\n        }\n        return result\n    }\n\n    // Return\
    \ list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           var sub = string.substring(0, i)\n            var rest = string.substring(i)\n\
    \            for (j <- 0 until rest.length) {\n                result = result.append(sub.concat(rest.substring(0,\
    \ j + 1)))\n            }\n", "        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(0, i + 1))\n        }\n   \
    \     return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string", "        var result = List[String]()\n        for (i <- 0 until\
    \ string.length) {\n            result = result.append(string.substring(0, i +\
    \ 1))\n        }\n        return result\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"\
    ))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(0, i + 1))\n        }\n   \
    \     return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string", "        var result = List[String]()\n        for (i <- 0 until\
    \ string.length) {\n            result = result.append(string.substring(0, i +\
    \ 1))\n        }\n        return result\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"\
    ))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all substrings of the input string\n    // >>> allSubstrings((\"abc\"))\n  \
    \  // (List[String](\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"))\n    def allSubstrings(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length\
    \ - i) {\n                result = result.append(string.substring(i, i + j + 1))\n\
    \            }\n        }\n        return result\n    }\n\n    // Return list\
    \ of all permutations of the input string\n    // >>> allPermutations((\"abc\"\
    ))\n    // (List[String](\"abc\", \"bac\", \"cab\", \"bca\", \"cba\"))\n    def\
    \ allPermutations(string : String) : List[String] = {\n        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            for (j <- 0 until string.length\
    \ - i) {\n                result = result.append(string.substring(i, i + j + 1))\n\
    \            }\n        }\n        return result\n    }\n\n    // Return list\
    \ of all permutations of the input string\n    // >>> allPermutations((\"abc\"\
    ))\n    // (List[String](\"abc\", \"bac\", \"cab\", \"bca\", \"cba\"))\n    def\
    \ allPer", "        var result = List[String]()\n        for (var i = 0; i < string.length();\
    \ i++) {\n            var prefix = string.substring(0, i + 1)\n            result\
    \ = result.append(prefix)\n        }\n        return result\n    }\n\n    // Return\
    \ list of all suffixes from shortest to longest of the input string\n    // >>>\
    \ allSuffixes((\"abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def\
    \ allSuffixes(string : String) : List[String] = {\n        var result = List[String]()\n\
    \        for (var i = 0; i < string.length(); i++) {\n            var suffix =\
    \ string.substring(i, string.length())\n            result = result.append(suffix)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (var i = 0; i < string.length(); i++) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1, string.length())\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (var i = 0; i < string.length(); i++) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1, string.length())\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of", "        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(0, i + 1))\n        }\n\
    \        return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string", "        var result = List[String]()\n        for (i <- 0 until\
    \ string.length) {\n            result = result.append(string.substring(0, i +\
    \ 1))\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(i, string.length))\n      \
    \  }\n        return result\n    }\n\n    // Return list of all suffixes from\
    \ shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n\
    \    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String)\
    \ : List[String] = {\n        var result = List[String]()\n        for (i <- 0\
    \ until string.length) {\n            result = result.append(string.substring(0,\
    \ string.length - i))\n        }\n        return result\n    }\n\n    // Return\
    \ list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations(string : String) : List[String] = {\n       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, string.length\
    \ - j).concat(string.substring(j, string.length)))\n                }\n      \
    \      }\n        }\n        return result\n    }\n\n    // Return list of all\
    \ permutations of the input string\n    // >>> allPermutations((\"abc\"))\n  \
    \  // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n \
    \   def allPermutations2(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, string.length - j).concat(string.substring(j,\
    \ string.length)))\n                }\n            }\n        }\n        return\
    \ result", "        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(i))\n        }\n    \
    \    return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- string.length - 1\
    \ until 0) {\n            result = result.append(string.substring(i))\n      \
    \  }\n        return result\n    }\n\n    // Return list of all permutations of\
    \ the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- i + 1 until string.length)\
    \ {\n                result = result.append(string.substring(i, j))\n        \
    \    }\n        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- i + 1 until string.length)\
    \ {\n                result = result.append(string.substring(i, j))\n        \
    \    }\n        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPer", "     \
    \   var result = List[String]()\n        for (var i = 0; i < string.length; i++)\
    \ {\n            var prefix = string.substring(0, i + 1)\n            result =\
    \ result.append(prefix)\n        }\n        return result\n    }\n\n    // Return\
    \ list of all suffixes from shortest to longest of the input string\n    // >>>\
    \ allSuffixes((\"abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def\
    \ allSuffixes(string : String) : List[String] = {\n        var result = List[String]()\n\
    \        for (var i = 0; i < string.length; i++) {\n            var suffix = string.substring(i)\n\
    \            result = result.append(suffix)\n        }\n        return result\n\
    \    }\n\n    // Return list of all permutations of the input string\n    // >>>\
    \ allPermutations((\"abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\",\
    \ \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string : String) : List[String]\
    \ = {\n        var result = List[String]()\n        for (var i = 0; i < string.length;\
    \ i++) {\n            var permutation = string.substring(0, i) + string.substring(i\
    \ + 1)\n            result = result.append(permutation)\n        }\n        return\
    \ result\n    }\n\n    // Return list of all permutations of the input string\n\
    \    // >>> allPermutations((\"abc\"))\n    // (List[String](\"abc\", \"acb\"\
    , \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string : String)\
    \ : List[String] = {\n        var result = List[String]()\n        for (var i\
    \ = 0; i < string.length; i++) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations(", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(0, i + 1))\n        }\n   \
    \     return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string", "        var result = List[String]()\n        for (i <- 0 until\
    \ string.length) {\n            result = result.append(string.substring(0, i +\
    \ 1))\n        }\n        return result\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"\
    ))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(0, i + 1))\n        }\n   \
    \     return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            var permutations = allPermutations(string.substring(0,\
    \ i) + string.substring(i + 1))\n            for (permutation <- permutations)\
    \ {\n                result = result.append(permutation + string.substring(i,\
    \ i + 1))\n            }\n        }\n        return result\n    }\n\n    // Return\
    \ list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           var permutations = allPermutations(string.substring(0, i) + string.substring(i\
    \ + 1))\n            for (permutation <- permutations) {\n                result\
    \ = result.append(permutation + string.substring(i, i + 1))\n            }\n",
  "        var result = List[String]()\n        for (var i = 0; i < string.length();\
    \ i++) {\n            var prefix = string.substring(0, i + 1)\n            result\
    \ = result.append(prefix)\n        }\n        return result\n    }\n\n    // Return\
    \ list of all suffixes from shortest to longest of the input string\n    // >>>\
    \ allSuffixes((\"abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def\
    \ allSuffixes(string : String) : List[String] = {\n        var result = List[String]()\n\
    \        for (var i = 0; i < string.length(); i++) {\n            var suffix =\
    \ string.substring(i)\n            result = result.append(suffix)\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        var\
    \ permutations = allPrefixes(string)\n        for (var permutation : permutations)\
    \ {\n            var suffix = allSuffixes(permutation)\n            for (var suffixPermutation\
    \ : suffix) {\n                result = result.append(suffixPermutation)\n   \
    \         }\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations2(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        var permutations = allPrefixes(string)\n        for\
    \ (var permutation : permutations) {\n            var suffix = allSuffixes(permutation)\n\
    \            for (var suffixPermutation : suffix) {\n                result =\
    \ result.append(suffixPermutation)\n            }\n        ", "        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            result\
    \ = result.append(string.substring(0, i + 1))\n        }\n        return result\n\
    \    }\n\n    // Return list of all suffixes from shortest to longest of the input\
    \ string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"c\", \"bc\"\
    , \"abc\"))\n    def allSuffixes(string : String) : List[String] = {\n       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(string.length - i - 1))\n \
    \       }\n        return result\n    }\n\n    // Return list of all substrings\
    \ of the input string\n    // >>> allSubstrings((\"abc\"))\n    // (List[String](\"\
    a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"))\n    def allSubstrings(string : String)\
    \ : List[String] = {\n        var result = List[String]()\n        for (i <- 0\
    \ until string.length) {\n            for (j <- i + 1 until string.length) {\n\
    \                result = result.append(string.substring(i, j))\n            }\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- i + 1 until string.length)\
    \ {\n                for (k <- j + 1 until string.length) {\n                \
    \    result = result.append(string.substring(i, j).concat(string.substring(j,\
    \ k)).concat(string.substring(k, i)))\n                }\n            }\n    \
    \    }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPer", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(0, i + 1))\n        }\n   \
    \     return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1,\
    \ string.length))\n        }\n        return result\n    }\n\n    // Return list\
    \ of all permutations of the input string\n    // >>> allPermutations((\"abc\"\
    ))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"\
    ))\n    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                result = result.append(string.substring(i,\
    \ j).concat(string.substring(j, i)))\n            }\n        }\n        return\
    \ result\n    }\n\n    // Return list of all permutations of the input string\n\
    \    // >>> allPermutations((\"abc\"))\n    // (List[String](\"abc\", \"acb\"\
    , \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string : String)\
    \ : List[String] = {\n        var result = List[String]()\n        for (i <- 0\
    \ until string.length) {\n            for (j <- 0 until string.length) {\n   \
    \             result = result.append(string.substring(i, j).concat(string.substring(j,\
    \ i)))\n            }\n        }\n        return result\n    }\n\n    // Return\
    \ list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String]", "        var result = List[String]()\n       \
    \ for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all substrings from shortest to longest of the input string\n    // >>> allSubstrings((\"\
    abc\"))\n    // (List[String](\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"))\n\
    \    def allSubstrings(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- i + 1 until string.length) {\n                result = result.append(string.substring(i,\
    \ j))\n            }\n        }\n        return result\n    }\n\n    // Return\
    \ list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations(string : String) : List[String] = {\n       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          for (j <- i + 1 until string.length) {\n                for (k <- j\
    \ + 1 until string.length) {\n                    result = result.append(string.substring(i,\
    \ j).concat(string.substring(j, k)).concat(string.substring(k, i)))\n        \
    \        }\n            }\n        }\n        return result\n    }\n\n    // Return\
    \ list of all permutations of the input string\n    ", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            var prefix = string.substring(0,\
    \ i + 1)\n            result = result.append(prefix)\n        }\n        return\
    \ result\n    }\n\n    // Return list of all suffixes from shortest to longest\
    \ of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            var suffix = string.substring(i)\n            result = result.append(suffix)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"b", "        var result = List[String]()\n        for (i <-\
    \ 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(0, i + 1))\n        }\n   \
    \     return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string", "        var result = List[String]()\n        for (i <- 0 until\
    \ string.length) {\n            result = result.append(string.substring(0, i +\
    \ 1))\n        }\n        return result\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"\
    ))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i).reverse())\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i).reverse())\n                }\n            }\n        }\n        return result\n\
    \    }\n\n    // Return list of all permutations", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            var\
    \ sub = string.substring(0, i)\n            var rest = string.substring(i)\n \
    \           for (j <- 0 until rest.length) {\n                result = result.append(sub\
    \ + rest.substring(0, j) + rest.substring(j))\n            }\n        }\n    \
    \    return result\n    }\n\n    // Return list of all permutations of the input\
    \ string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"abc\"\
    , \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            var sub = string.substring(0, i)\n\
    \            var rest = string.substring(i)\n            for (j <- 0 until rest.length)\
    \ {\n                result = result.append(sub + rest.substring(0, j) + rest.substring(",
  "        var result = List[String]()\n        for (i <- 0 until string.length) {\n\
    \            result = result.append(string.substring(0, i + 1))\n        }\n \
    \       return result", "        var result = List[String]()\n        for (i <-\
    \ 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i).reverse())\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i).reverse())\n                }\n            }\n        }\n        return result\n\
    \    }\n\n    // Return list of all permutations", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (var i = 0; i < string.length(); i++)\
    \ {\n            var prefix = string.substring(0, i + 1)\n            result =\
    \ result.append(prefix)\n        }\n        return result", "        var result\
    \ = List[String]()\n        var i = 0\n        while (i < string.length) {\n \
    \           var j = i\n            while (j < string.length && string[j] == string[i])\
    \ {\n                j += 1\n            }\n            result = result + List(string.substring(i,\
    \ j))\n            i = j\n        }\n        return result", "        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            result\
    \ = result.append(string.substring(0, i + 1))\n        }\n        return result\n\
    \    }\n\n    // Return list of all suffixes from shortest to longest of the input\
    \ string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"c\", \"bc\"\
    , \"abc\"))\n    def allSuffixes(string : String) : List[String] = {\n       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(string.length - i - 1))\n \
    \       }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i).reverse())\n                }\n            }\n \
    \       }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i).reverse())\n                }\n            }\n \
    \       }\n        return result\n    }\n\n    // Return list of all permutations",
  "        var result = List[String]()\n        for (i <- 0 until string.length) {\n\
    \            result = result.append(string.substring(0, i + 1))\n        }\n \
    \       return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string", "        val s = string\n        val result = List[String]()\n\
    \        for (i <- 0 until s.length) {\n            val prefix = s.substring(i,\
    \ s.length)\n            result = result.append(prefix)\n        }\n        return\
    \ result\n    }\n\n    // Return list of all suffixes from shortest to longest\
    \ of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        val s = string\n        val result = List[String]()\n        for\
    \ (i <- 0 until s.length) {\n            val suffix = s.substring(0, s.length\
    \ - i)\n            result = result.append(suffix)\n        }\n        return\
    \ result\n    }\n\n    // Return list of all permutations of the input string\n\
    \    // >>> allPermutations((\"abc\"))\n    // (List[String](\"abc\", \"acb\"\
    , \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string : String)\
    \ : List[String] = {\n        val s = string\n        val result = List[String]()\n\
    \        for (i <- 0 until s.length) {\n            val permutation = s.substring(0,\
    \ s.length - i) + s.substring(s.length - i, s.length)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        val s = string\n        val result = List[String]()\n\
    \        for (i <- 0 until s.length) {\n            val permutation = s.substring(0,\
    \ s.length - i) + s.substring(s.length - i, s.length)\n            result = result.append(permutation)\n\
    \        ", "        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(0, i + 1))\n        }\n\
    \        return result", "        var result = List[String]()\n        for (i\
    \ <- 0 until string.length) {\n            result = result.append(string.substring(i))\n\
    \        }\n        return result\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"\
    ))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i).reverse())\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i).reverse())\n                }\n            }\n        }\n        return result\n\
    \    }\n\n    // Return list of all permutations of the input string", "     \
    \   var result = List[String]()\n        for (i <- 0 until string.length) {\n\
    \            result = result.append(string.substring(0, i + 1))\n        }\n \
    \       return result", "        var result = List[String]()\n        for (i <-\
    \ 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i).reverse())\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i).reverse())\n                }\n            }\n        }\n        return result\n\
    \    }\n\n    // Return list of all permutations", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1, string.length))\n        }\n        return result\n    }\n\n    //\
    \ Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations(string : String) : List[String] = {\n       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          for (j <- 0 until string.length) {\n                result = result.append(string.substring(i,\
    \ string.length).concat(string.substring(j, string.length)))\n            }\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                result = result.append(string.substring(i, string.length).concat(string.substring(j,\
    \ string.length)))\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations",
  "        var result = List[String]()\n        for (i <- 0 until string.length) {\n\
    \            result = result.append(string.substring(0, i + 1))\n        }\n \
    \       return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string", "        var result = List[String]()\n        for (i <- 0 until\
    \ string.length) {\n            result = result.append(string.substring(0, i +\
    \ 1))\n        }\n        return result\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"\
    ))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(0, i + 1))\n        }\n   \
    \     return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string", "        var result = List[String]()\n        for (i <- 0 until\
    \ string.length) {\n            result = result.append(string.substring(0, i +\
    \ 1))\n        }\n        return result\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"\
    ))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(i, string.length))\n      \
    \  }\n        return result", "        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(0, i + 1))\n        }\n   \
    \     return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i).reverse())\n                }\n            }\n \
    \       }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i).reverse())\n                }\n            }\n \
    \       }\n        return result\n    }\n\n    // Return list of all permutations",
  "        var result = List[String]()\n        for (i <- 0 until string.length) {\n\
    \            result = result.append(string.substring(0, i + 1))\n        }\n \
    \       return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string", "        var result = List[String]()\n        for (i <- 0 until\
    \ string.length) {\n            result = result.append(string.substring(0, i +\
    \ 1))\n        }\n        return result\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"\
    ))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(0, i + 1))\n        }\n   \
    \     return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string", "        var result = List[String]()\n        for (i <- 0 until\
    \ string.length) {\n            result = result.append(string.substring(0, i +\
    \ 1))\n        }\n        return result\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"\
    ))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations(\"abc\")\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string, except those that\n\
    \    // are duplicates of other permutations\n    // >>> allUniquePermutations(\"\
    abc\")\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"\
    ))\n    def allUniquePermutations(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result.filter(",
  "        var result = List[String]()\n        for (i <- 0 until string.length) {\n\
    \            result = result.append(string.substring(i, string.length))\n    \
    \    }\n        return result", "        var result = List[String]()\n       \
    \ for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ val result = new ArrayList[String]()\n        for (i <- 0 until string.length)\
    \ {\n            val prefix = string.substring(0, i + 1)\n            result.add(prefix)\n\
    \        }\n        return result\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"\
    ))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        val result = new ArrayList[String]()\n\
    \        for (i <- 0 until string.length) {\n            val suffix = string.substring(i,\
    \ string.length)\n            result.add(suffix)\n        }\n        return result\n\
    \    }\n\n    // Return list of all permutations of the input string\n    // >>>\
    \ allPermutations((\"abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\",\
    \ \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string : String) : List[String]\
    \ = {\n        val result = new ArrayList[String]()\n        for (i <- 0 until\
    \ string.length) {\n            val permutation = string.substring(0, i) + string.substring(i\
    \ + 1, string.length)\n            result.add(permutation)\n        }\n      \
    \  return result\n    }\n\n    // Return list of all permutations of the input\
    \ string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"abc\"\
    , \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        val result = new ArrayList[String]()\n\
    \        for (i <- 0 until string.length) {\n            val permutation = string.substring(0,\
    \ i) + string.substring(i + 1, string.length)\n            result.add(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List", " \
    \       var result = List[String]()\n        for (var i = 0; i < string.length;\
    \ i++) {\n            result = result.append(string.substring(0, i + 1))\n   \
    \     }\n        return result", "        var result = List[String]()\n      \
    \  for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (var i = 0; i < string.length(); i++)\
    \ {\n            var prefix = string.substring(0, i + 1)\n            result =\
    \ result.append(prefix)\n        }\n        return result\n    }\n\n    // Return\
    \ list of all suffixes from shortest to longest of the input string\n    // >>>\
    \ allSuffixes((\"abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def\
    \ allSuffixes(string : String) : List[String] = {\n        var result = List[String]()\n\
    \        for (var i = 0; i < string.length(); i++) {\n            var suffix =\
    \ string.substring(i)\n            result = result.append(suffix)\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (var i = 0; i < string.length(); i++) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (var i = 0; i < string.length(); i++) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations(", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i).reverse())\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i).reverse())\n                }\n            }\n        }\n        return result\n\
    \    }\n\n    // Return list of all permutations", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i).reverse())\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i).reverse())\n                }\n            }\n        }\n        return result\n\
    \    }\n\n    // Return list of all permutations", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(0, i + 1))\n        }\n   \
    \     return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all substrings\
    \ from shortest to longest of the input string\n    // >>> allSubstrings((\"abc\"\
    ))\n    // (List[String](\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"))\n    def\
    \ allSubstrings(string : String) : List[String] = {\n        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            for (j <- i + 1 until\
    \ string.length) {\n                result = result.append(string.substring(i,\
    \ j))\n            }\n        }\n        return result\n    }\n\n    // Return\
    \ list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations(string : String) : List[String] = {\n       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          for (j <- i + 1 until string.length) {\n                for (k <- j\
    \ + 1 until string.length) {\n                    result = result.append(string.substring(i,\
    \ j).concat(string.substring(j, k)).concat(string.substring(k, i)))\n        \
    \        }\n            }\n        }\n        return result\n    }\n\n    // Return\
    \ list of all permutations of the input string\n    ", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations(\"abc\")\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            var\
    \ sub = string.substring(0, i)\n            var rest = string.substring(i)\n \
    \           for (j <- 0 until rest.length) {\n                result = result.append(sub\
    \ + rest.substring(0, j) + rest.substring(j))\n            }\n        }\n    \
    \    return result\n    }\n\n    // Return list of all permutations of the input\
    \ string\n    // >>> allPermutations2(\"abc\")\n    // (List[String](\"abc\",\
    \ \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            var sub = string.substring(0, i)\n\
    \            var rest = string.substring(i)\n            for (j <- 0 until rest.length)\
    \ {\n                result = result.append(sub + rest.substring(0, j) + rest.substring(j",
  "        val result = List[String]()\n        for (i <- 0 until string.length) {\n\
    \            val prefix = string.substring(0, i + 1)\n            result = result.append(prefix)\n\
    \        }\n        return result\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"\
    ))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        val result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            val suffix = string.substring(i)\n\
    \            result = result.append(suffix)\n        }\n        return result\n\
    \    }\n\n    // Return list of all permutations of the input string\n    // >>>\
    \ allPermutations((\"abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\",\
    \ \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string : String) : List[String]\
    \ = {\n        val result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            val permutation = string.substring(0, i) + string.substring(i\
    \ + 1)\n            result = result.append(permutation)\n        }\n        return\
    \ result\n    }\n\n    // Return list of all permutations of the input string\n\
    \    // >>> allPermutations((\"abc\"))\n    // (List[String](\"abc\", \"acb\"\
    , \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string : String)\
    \ : List[String] = {\n        val result = List[String]()\n        for (i <- 0\
    \ until string.length) {\n            val permutation = string.substring(0, i)\
    \ + string.substring(i + 1)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"b", "        var result = List[String]()\n        for (i <-\
    \ 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result", "        val result = new ArrayList[String]\n\
    \        for (i <- 0 until string.length) {\n            val prefix = string.substring(0,\
    \ i + 1)\n            result.add(prefix)\n        }\n        result\n    }\n\n\
    \    // Return list of all suffixes from shortest to longest of the input string\n\
    \    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"\
    ))\n    def allSuffixes(string : String) : List[String] = {\n        val result\
    \ = new ArrayList[String]\n        for (i <- 0 until string.length) {\n      \
    \      val suffix = string.substring(i)\n            result.add(suffix)\n    \
    \    }\n        result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        val result = new ArrayList[String]\n \
    \       for (i <- 0 until string.length) {\n            val permutation = string.substring(0,\
    \ i) + string.substring(i + 1)\n            result.add(permutation)\n        }\n\
    \        result\n    }\n\n    // Return list of all permutations of the input\
    \ string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"abc\"\
    , \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        val result = new ArrayList[String]\n \
    \       for (i <- 0 until string.length) {\n            val permutation = string.substring(0,\
    \ i) + string.substring(i + 1)\n            result.add(permutation)\n        }\n\
    \        result\n    }\n\n    // Return list of all permutations of the input\
    \ string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"abc\"\
    , \"acb\", \"bac\", \"bca\", \"c", "        val result = List[String]()\n    \
    \    for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        val result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        val result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            val\
    \ permutations = allPermutations(string.substring(0, i) + string.substring(i +\
    \ 1))\n            for (permutation <- permutations) {\n                result\
    \ = result.append(permutation + string.substring(i, i + 1))\n            }\n \
    \       }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string,\n    // where the permutations are ordered lexicographically\n\
    \    // >>> allPermutationsOrdered((\"abc\"))\n    // (List[String](\"abc\", \"\
    bac\", \"cab\", \"cba\", \"acb\", \"bca\"))\n    def allPermutationsOrdered(string\
    \ : String) : List[String] = {\n        val result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            val permutations = allPermutations(string.substring(0,\
    \ i) + string.substring(i + 1))\n            for (permutation <- permutations)\
    \ {\n                result = result.append(permutation", "        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            result\
    \ = result.append(string.substring(0, i + 1))\n        }\n        return result\n\
    \    }\n\n    // Return list of all suffixes from shortest to longest of the input\
    \ string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"c\", \"bc\"\
    , \"abc\"))\n    def allSuffixes(string : String) : List[String] = {\n       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(string.length - i - 1))\n \
    \       }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i).reverse())\n                }\n            }\n \
    \       }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i).reverse())\n                }\n            }\n \
    \       }\n        return result\n    }\n\n    // Return list of all permutations",
  "        var result = List[String]()\n        for (i <- 0 until string.length) {\n\
    \            result = result.append(string.substring(0, i + 1))\n        }\n \
    \       return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1,\
    \ string.length))\n        }\n        return result\n    }\n\n    // Return list\
    \ of all permutations of the input string\n    // >>> allPermutations((\"abc\"\
    ))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"\
    ))\n    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i).reverse())\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all strings that are substrings of the input string\n \
    \   // >>> allSubstrings((\"abc\"))\n    // (List[String](\"abc\", \"a\", \"ab\"\
    , \"b\", \"ba\", \"c\"))\n    def allSubstrings(string : String) : List[String]\
    \ = {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            for (j <- 0 until string.length) {\n                if (i !=\
    \ j) {\n                    result = result.append(string.substring(i, j))\n \
    \               }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all strings that are substrings of the input string\n \
    \   // >>> allSubstrings((\"abc", "        var result = List[String]()\n     \
    \   for (var i = 0; i < string.length(); i++) {\n            var prefix = string.substring(0,\
    \ i + 1)\n            result = result.append(prefix)\n        }\n        return\
    \ result\n    }\n\n    // Return list of all suffixes from shortest to longest\
    \ of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (var i = 0; i < string.length();\
    \ i++) {\n            var suffix = string.substring(i)\n            result = result.append(suffix)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (var i = 0; i < string.length(); i++) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (var i = 0; i < string.length(); i++) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"", "        var result =\
    \ List[String]()\n        for (i <- 0 until string.length) {\n            result\
    \ = result.append(string.substring(0, i + 1))\n        }\n        return result\n\
    \    }\n\n    // Return list of all suffixes from shortest to longest of the input\
    \ string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"c\", \"bc\"\
    , \"abc\"))\n    def allSuffixes(string : String) : List[String] = {\n       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(string.length - i - 1))\n \
    \       }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string", "        var result = List[String]()\n        for (i <- 0 until\
    \ string.length) {\n            result = result.append(string.substring(0, i +\
    \ 1))\n        }\n        return result\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"\
    ))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            var\
    \ sub = string.substring(0, i)\n            for (j <- 0 until string.length) {\n\
    \                var sub2 = string.substring(i, j)\n                result = result.append(sub\
    \ + sub2)\n            }\n        }\n        return result\n    }\n\n    // Return\
    \ list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           var sub = string.substring(0, i)\n            for (j <- 0 until string.length)\
    \ {\n                var sub2 = string.substring(i, j)\n                result\
    \ = result.append(sub + sub2)\n            }\n        }\n        return result\n\
    \    }\n\n    // Return list of all", "        var result = List[String]()\n \
    \       for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i).reverse())\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i).reverse())\n                }\n            }\n        }\n        return result\n\
    \    }\n\n    // Return list of all permutations", "        var result = List[String]()\n\
    \        for (var i = 0; i < string.length(); i++) {\n            var prefix =\
    \ string.substring(0, i + 1)\n            result = result.append(prefix)\n   \
    \     }\n        return result", "        var result = List[String]()\n      \
    \  for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(0, i + 1))\n        }\n   \
    \     return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i).reverse())\n                }\n            }\n \
    \       }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i).reverse())\n                }\n            }\n \
    \       }\n        return result\n    }\n\n    // Return list of all permutations",
  "        var result = List[String]()\n        for (i <- 0 until string.length) {\n\
    \            result = result.append(string.substring(0, i + 1))\n        }\n \
    \       return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            var sub = string.substring(0, i)\n\
    \            var rest = string.substring(i)\n            for (j <- 0 until rest.length)\
    \ {\n                var perm = sub.concat(rest.substring(0, j))\n           \
    \     result = result.append(perm)\n            }\n        }\n        return result\n\
    \    }\n\n    // Return list of all permutations of the input string\n    // >>>\
    \ allPermutations((\"abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\",\
    \ \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string : String) : List[String]\
    \ = {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            var sub = string.substring(0, i)\n            var rest = string.substring(i)\n\
    \            for (j <- 0 until rest.length) {\n                var perm = sub.concat(rest.substring(0,\
    \ j))\n                result =", "        var result = List[String]()\n     \
    \   for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            var\
    \ sub = string.substring(0, i)\n            var rest = string.substring(i)\n \
    \           for (j <- 0 until rest.length) {\n                result = result.append(sub.concat(rest.substring(0,\
    \ j + 1)))\n            }\n        }\n        return result\n    }\n\n    // Return\
    \ list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           var sub = string.substring(0, i)\n            var rest = string.substring(i)\n\
    \            for (j <- 0 until rest.length) {\n                result = result.append(sub.concat(rest.substring(j)))\n\
    \            }\n        }\n        ", "        var result = List[String]()\n \
    \       for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            var\
    \ sub = string.substring(0, i)\n            var rest = string.substring(i)\n \
    \           for (j <- 0 until rest.length) {\n                var perm = sub.concat(rest.substring(0,\
    \ j))\n                result = result.append(perm)\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            var sub = string.substring(0, i)\n\
    \            var rest = string.substring(i)\n            for (j <- 0 until rest.length)\
    \ {\n                var perm = sub.concat(rest.substring(0, j))\n           \
    \     result =", "        var result = List[String]()\n        for (i <- 0 until\
    \ string.length) {\n            result = result.append(string.substring(0, i +\
    \ 1))\n        }\n        return result\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"\
    ))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i).reverse())\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i).reverse())\n                }\n            }\n        }\n        return result\n\
    \    }\n\n    // Return list of all permutations", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            var\
    \ permutations = allPermutations(string.substring(0, i) + string.substring(i +\
    \ 1))\n            for (permutation <- permutations) {\n                result\
    \ = result.append(string.substring(0, i) + permutation)\n            }\n     \
    \   }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            var permutations = allPermutations(string.substring(0,\
    \ i) + string.substring(i + 1))\n            for (permutation <- permutations)\
    \ {\n                result = result.append(string.substring(0, i) + permutation)\n\
    \            }\n        }", "        val result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            val prefix = string.substring(0,\
    \ i + 1)\n            result = result.append(prefix)\n        }\n        result\n\
    \    }\n\n    // Return list of all suffixes from shortest to longest of the input\
    \ string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"c\", \"bc\"\
    , \"abc\"))\n    def allSuffixes(string : String) : List[String] = {\n       \
    \ val result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          val suffix = string.substring(i)\n            result = result.append(suffix)\n\
    \        }\n        result\n    }\n\n    // Return list of all substrings of the\
    \ input string\n    // >>> allSubstrings((\"abc\"))\n    // (List[String](\"a\"\
    , \"ab\", \"abc\", \"b\", \"bc\", \"c\"))\n    def allSubstrings(string : String)\
    \ : List[String] = {\n        val result = List[String]()\n        for (i <- 0\
    \ until string.length) {\n            val substring = string.substring(i, string.length)\n\
    \            result = result.append(substring)\n        }\n        result\n  \
    \  }\n\n    // Return list of all permutations of the input string\n    // >>>\
    \ allPermutations((\"abc\"))\n    // (List[String](\"abc\", \"bac\", \"cab\",\
    \ \"bca\", \"cab\", \"bac\", \"cab\", \"bca\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        val result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            val permutation = string.substring(0,\
    \ i) + string.substring(i + 1, string.length)\n            result = result.append(permutation)\n\
    \        }\n        result\n    }\n\n    // Return list of all permutations of\
    \ the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"bac\", \"cab\", \"bca\", \"c", "        var result = List[String]()\n\
    \        for (var i = 0; i < string.length(); i++) {\n            var prefix =\
    \ string.substring(0, i + 1)\n            result = result.append(prefix)\n   \
    \     }\n        return result\n    }\n\n    // Return list of all suffixes from\
    \ shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n\
    \    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String)\
    \ : List[String] = {\n        var result = List[String]()\n        for (var i\
    \ = 0; i < string.length(); i++) {\n            var suffix = string.substring(i)\n\
    \            result = result.append(suffix)\n        }\n        return result\n\
    \    }\n\n    // Return list of all permutations of the input string\n    // >>>\
    \ allPermutations((\"abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\",\
    \ \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string : String) : List[String]\
    \ = {\n        var result = List[String]()\n        var permutations = allPrefixes(string)\n\
    \        for (var permutation : permutations) {\n            var suffix = allSuffixes(permutation)\n\
    \            for (var suffixPermutation : suffix) {\n                result =\
    \ result.append(suffixPermutation)\n            }\n        }\n        return result\n\
    \    }\n\n    // Return list of all permutations of the input string\n    // >>>\
    \ allPermutations((\"abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\",\
    \ \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string : String) : List[String]\
    \ = {\n        var result = List[String]()\n        var permutations = allPrefixes(string)\n\
    \        for (var permutation : permutations) {\n            var suffix = allSuffixes(permutation)\n\
    \            for (var suffixPermutation : suffix) {\n                result =\
    \ result.append(suffixPermutation)\n            }\n        ", "        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            result\
    \ = result.append(string.substring(0, i + 1))\n        }\n        return result\n\
    \    }\n\n    // Return list of all suffixes from shortest to longest of the input\
    \ string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"c\", \"bc\"\
    , \"abc\"))\n    def allSuffixes(string : String) : List[String] = {\n       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(string.length - i - 1))\n \
    \       }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string,\n    // but with duplicates removed\n    // >>> allUniquePermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allUniquePermutations(string : String) : List[String] = {\n \
    \       var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            for (j <- 0 until string.length) {\n                if (i !=\
    \ j) {\n                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result.filter(x\
    \ => !", "        var result = List[String]()\n        for (var i = 0; i < string.length();\
    \ i++) {\n            var prefix = string.substring(0, i + 1)\n            result\
    \ = result.append(prefix)\n        }\n        return result\n    }\n\n    // Return\
    \ list of all suffixes from shortest to longest of the input string\n    // >>>\
    \ allSuffixes((\"abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def\
    \ allSuffixes(string : String) : List[String] = {\n        var result = List[String]()\n\
    \        for (var i = 0; i < string.length(); i++) {\n            var suffix =\
    \ string.substring(i, string.length())\n            result = result.append(suffix)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (var i = 0; i < string.length(); i++) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1, string.length())\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (var i = 0; i < string.length(); i++) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1, string.length())\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of", "        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(0, i + 1))\n        }\n\
    \        return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations(\"abc\")\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations2(\"abc\")\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n", "        var result = List[String]()\n        for (i <- 0 until\
    \ string.length) {\n            result = result.append(string.substring(0, i +\
    \ 1))\n        }\n        return result\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"\
    ))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(0, i + 1))\n        }\n   \
    \     return result", "        var result = List[String]()\n        for (i <-\
    \ 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(0, i + 1))\n        }\n   \
    \     return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1,\
    \ string.length))\n        }\n        return result\n    }\n\n    // Return list\
    \ of all permutations of the input string\n    // >>> allPermutations((\"abc\"\
    ))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"\
    ))\n    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          var prefix = string.substring(0, i + 1)\n            result = result.append(prefix)\n\
    \        }\n        return result\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"\
    ))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            var suffix = string.substring(i)\n\
    \            result = result.append(suffix)\n        }\n        return result\n\
    \    }\n\n    // Return list of all permutations of the input string\n    // >>>\
    \ allPermutations((\"abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\",\
    \ \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string : String) : List[String]\
    \ = {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            var permutation = string.substring(0, i) + string.substring(i\
    \ + 1)\n            result = result.append(permutation)\n        }\n        return\
    \ result\n    }\n\n    // Return list of all permutations of the input string\n\
    \    // >>> allPermutations((\"abc\"))\n    // (List[String](\"abc\", \"acb\"\
    , \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string : String)\
    \ : List[String] = {\n        var result = List[String]()\n        for (i <- 0\
    \ until string.length) {\n            var permutation = string.substring(0, i)\
    \ + string.substring(i + 1)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"b", "        var result = List[String]()\n        for (i <-\
    \ 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(0, i + 1))\n        }\n   \
    \     return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string", "        var result = List[String]()\n        var i = 0\n   \
    \     while (i < string.length) {\n            var j = i\n            while (j\
    \ < string.length && string.charAt(j) == string.charAt(i)) {\n               \
    \ j += 1\n            }\n            result = result.append(string.substring(i,\
    \ j))\n            i = j\n        }\n        return result", "        var result\
    \ = List[String]()\n        for (var i = 0; i < string.length; i++) {\n      \
    \      var prefix = string.substring(0, i + 1)\n            result = result.append(prefix)\n\
    \        }\n        return result", "        var result = List[String]()\n   \
    \     for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        var i = 0\n        while (i < string.length)\
    \ {\n            var j = i\n            while (j < string.length && string.charAt(j)\
    \ == string.charAt(i)) {\n                j += 1\n            }\n            result\
    \ = result.append(string.substring(i, j))\n            i = j\n        }\n    \
    \    return result", "        var result = List[String]()\n        var i = 0\n\
    \        while (i < string.length) {\n            var j = i\n            while\
    \ (j < string.length && string.charAt(j) == string.charAt(i)) {\n            \
    \    j += 1\n            }\n            result = result.append(string.substring(i,\
    \ j))\n            i = j\n        }\n        return result\n    }\n\n    // Return\
    \ list of all suffixes from shortest to longest of the input string\n    // >>>\
    \ allSuffixes((\"abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def\
    \ allSuffixes(string : String) : List[String] = {\n        var result = List[String]()\n\
    \        var i = string.length - 1\n        while (i >= 0) {\n            var\
    \ j = i\n            while (j >= 0 && string.charAt(j) == string.charAt(i)) {\n\
    \                j -= 1\n            }\n            result = result.append(string.substring(i,\
    \ j + 1))\n            i = j\n        }\n        return result\n    }\n\n    //\
    \ Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations(string : String) : List[String] = {\n       \
    \ var result = List[String]()\n        var permutations = allPrefixes(string)\n\
    \        for (permutation in permutations) {\n            var suffixes = allSuffixes(string)\n\
    \            for (suffix in suffixes) {\n                result = result.append(permutation\
    \ + suffix)\n            }\n        }\n        return result\n    }\n\n    //\
    \ Return list of all anagrams of the input string\n    // >>> allAnagrams((\"\
    abc\"))\n    // (List[String](\"abc\", \"bac\", \"cab\", \"cba\"))\n    def allAnagrams(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        var\
    \ permutations = allPer", "        var result = List[String]()\n        for (i\
    \ <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          var prefix = string.substring(0, i + 1)\n            result = result.append(prefix)\n\
    \        }\n        return result", "        var result = List[String]()\n   \
    \     for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (i <- 0 until string.length) {\n  \
    \          result = result.append(string.substring(0, i + 1))\n        }\n   \
    \     return result\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            result = result.append(string.substring(string.length - i - 1))\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            for (j <- 0 until string.length)\
    \ {\n                if (i != j) {\n                    result = result.append(string.substring(i,\
    \ j) + string.substring(j, i))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string", "        var result = List[String]()\n        for (i <- 0 until\
    \ string.length) {\n            result = result.append(string.substring(0, i +\
    \ 1))\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            var\
    \ sub = string.substring(0, i)\n            var rest = string.substring(i)\n \
    \           for (j <- 0 until rest.length) {\n                var sub2 = sub.concat(rest.substring(0,\
    \ j))\n                var rest2 = rest.substring(j)\n                result =\
    \ result.append(sub2.concat(rest2))\n            }\n        }\n        return\
    \ result\n    }\n\n    // Return list of all permutations of the input string\n\
    \    // >>> allPermutations((\"abc\"))\n    // (List[String](\"abc\", \"acb\"\
    , \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string : String)\
    \ : List[String] = {\n        var result = List[String]()\n        for (i <- 0\
    \ until string.length) {\n            var sub = string.substring(0, i)\n     \
    \       var rest = string.substring(i)\n            for (j <- 0 until rest.length)\
    \ {\n                ", "        var result = List[String]()\n        for (i <-\
    \ 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations(\"abc\")\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations2(\"\
    abc\")\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"\
    ))\n    def allPermutations2(string : String) : List[String] = {\n        var\
    \ result = List[String]()\n        for (i <- 0 until string.length) {\n      \
    \      for (j <- 0 until string.length) {\n                if (i != j) {\n   \
    \                 result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string\n", "     \
    \   var result = List[String]()\n        for (var i = 0; i < string.length();\
    \ i++) {\n            result = result.append(string.substring(0, i + 1))\n   \
    \     }\n        return result\n    }\n\n    // Return list of all suffixes from\
    \ shortest to longest of the input string\n    // >>> allSuffixes((\"abc\"))\n\
    \    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String)\
    \ : List[String] = {\n        var result = List[String]()\n        for (var i\
    \ = 0; i < string.length(); i++) {\n            result = result.append(string.substring(string.length()\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (var i = 0; i < string.length(); i++) {\n    \
    \        var sub = string.substring(0, i)\n            var rest = string.substring(i)\n\
    \            for (var j = 0; j < rest.length(); j++) {\n                var sub2\
    \ = sub + rest.substring(0, j)\n                var rest2 = rest.substring(j)\n\
    \                result = result.append(sub2 + rest2)\n            }\n       \
    \ }\n        return result\n    }\n\n    // Return list of all permutations of\
    \ the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (var i = 0; i < string.length(); i++) {\n            var sub = string.substring(0,\
    \ i)\n            var rest = string.", "        val s = string.toLowerCase()\n\
    \        val result = mutable.List[String]()\n        for (i <- 0 until s.length)\
    \ {\n            val prefix = s.substring(i, s.length)\n            result.append(prefix)\n\
    \        }\n        return result", "        var result = List[String]()\n   \
    \     for (i <- 0 until string.length) {\n            result = result.append(string.substring(0,\
    \ i + 1))\n        }\n        return result\n    }\n\n    // Return list of all\
    \ suffixes from shortest to longest of the input string\n    // >>> allSuffixes((\"\
    abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def allSuffixes(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            result = result.append(string.substring(string.length\
    \ - i - 1))\n        }\n        return result\n    }\n\n    // Return list of\
    \ all permutations of the input string\n    // >>> allPermutations((\"abc\"))\n\
    \    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n\
    \    def allPermutations(string : String) : List[String] = {\n        var result\
    \ = List[String]()\n        for (i <- 0 until string.length) {\n            for\
    \ (j <- 0 until string.length) {\n                if (i != j) {\n            \
    \        result = result.append(string.substring(i, j) + string.substring(j, i))\n\
    \                }\n            }\n        }\n        return result\n    }\n\n\
    \    // Return list of all permutations of the input string\n    // >>> allPermutations((\"\
    abc\"))\n    // (List[String](\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"\
    cba\"))\n    def allPermutations2(string : String) : List[String] = {\n      \
    \  var result = List[String]()\n        for (i <- 0 until string.length) {\n \
    \           for (j <- 0 until string.length) {\n                if (i != j) {\n\
    \                    result = result.append(string.substring(i, j) + string.substring(j,\
    \ i))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Return list of all permutations of the input string", "       \
    \ var result = List[String]()\n        for (var i = 0; i < string.length(); i++)\
    \ {\n            var prefix = string.substring(0, i + 1)\n            result =\
    \ result.append(prefix)\n        }\n        return result\n    }\n\n    // Return\
    \ list of all suffixes from shortest to longest of the input string\n    // >>>\
    \ allSuffixes((\"abc\"))\n    // (List[String](\"c\", \"bc\", \"abc\"))\n    def\
    \ allSuffixes(string : String) : List[String] = {\n        var result = List[String]()\n\
    \        for (var i = 0; i < string.length(); i++) {\n            var suffix =\
    \ string.substring(i)\n            result = result.append(suffix)\n        }\n\
    \        return result\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (var i = 0; i < string.length(); i++) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (var i = 0; i < string.length(); i++) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations(", "        var result = List[String]()\n\
    \        for (i <- 0 until string.length) {\n            var prefix = string.substring(0,\
    \ i + 1)\n            result = result.append(prefix)\n        }\n        return\
    \ result\n    }\n\n    // Return list of all suffixes from shortest to longest\
    \ of the input string\n    // >>> allSuffixes((\"abc\"))\n    // (List[String](\"\
    c\", \"bc\", \"abc\"))\n    def allSuffixes(string : String) : List[String] =\
    \ {\n        var result = List[String]()\n        for (i <- 0 until string.length)\
    \ {\n            var suffix = string.substring(i)\n            result = result.append(suffix)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"))\n    def allPermutations2(string\
    \ : String) : List[String] = {\n        var result = List[String]()\n        for\
    \ (i <- 0 until string.length) {\n            var permutation = string.substring(0,\
    \ i) + string.substring(i + 1)\n            result = result.append(permutation)\n\
    \        }\n        return result\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> allPermutations((\"abc\"))\n    // (List[String](\"\
    abc\", \"acb\", \"b"]
stop_tokens:
- "\n    }\n"
