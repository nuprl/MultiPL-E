{
  "name": "HumanEval_65_circular_shift",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n",
  "completions": [
    "        if (shift > x.toString().length()) {\n            return x.toString().reverse()\n        }\n        return x.toString().substring(shift, x.toString().length()) + x.toString().substring(0, shift)",
    "        val digits = x.toString.split(\"l\")\n        val result = digits[0] + circularShift(digits[1], shift)\n        return result",
    "        val xs = x.toString\n        val shiftStr = shift.toString\n        if (shiftStr.length > xs.length) {\n            return xs.reverse\n        } else {\n            val result = xs.take(shiftStr.length)\n            result.append(xs.drop(shiftStr.length))\n            return result.reverse\n        }",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1) + circularShift(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits2(x : Long) : String = {\n        return reverseDigits(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits3(x : Long) : String = {\n        return reverseDigits2(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits4(x : Long) : String = {\n        return reverseDigits3(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits5(x : Long) : String = {\n        return reverseDigits4(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits6(x : Long) : String = {\n        return reverseDigits5(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits7(x : Long) : String = {\n        return reverseDigits6(x).to",
    "        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[(i + shift) % digits.length]\n        }\n        result",
    "        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(123)\n    // \"321\"\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt(s : String) : Long = {\n        var result = 0l\n        for (i <- 0 until s.length) {\n            result = result * 10 + s[i]\n        }\n        return result\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt2(s : String) : Long = {\n        var result = 0l\n        for (i <- 0 until s.length) {\n            result = result * 10 + s[i]\n        }\n        return result\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt3(s : String) : Long = {\n        var result = 0l\n        for (i <- 0 until s.length) {\n            result = result * 10 + s[i]\n        }\n        return result\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt4(s : String) : Long = {\n        var result = 0l\n        for (i <- 0 until s.length) {\n            result = result * 10 + s[i]\n        }\n        return result\n    }\n\n",
    "        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = digits[i] + result\n        }\n        return result",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1) + circularShift(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits2(x : Long) : String = {\n        return reverseDigits(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits3(x : Long) : String = {\n        return reverseDigits2(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits4(x : Long) : String = {\n        return reverseDigits3(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits5(x : Long) : String = {\n        return reverseDigits4(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits6(x : Long) : String = {\n        return reverseDigits5(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits7(x : Long) : String = {\n        return reverseDigits6(x).to",
    "        val digits = x.toString.split(\"l\")\n        val result = digits[0] + circularShift(digits[1], shift)\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = reverseDigits(digits[1]) + digits[0]\n        return result\n    }\n\n    // Convert the string s to a long integer.\n    // Return 0 if the string is invalid.\n    // >>> stringToLong(\"123\")\n    // 123l\n    def stringToLong(s : String) : Long = {\n        val result = s.trim().replaceAll(\"\\\\s+\", \"\")\n        if (result.length() == 0) return 0l\n        return Long.parseLong(result)\n    }\n\n    // Convert the long integer x to a string.\n    // Return \"\" if x is invalid.\n    // >>> longToString(123l)\n    // \"123\"\n    def longToString(x : Long) : String = {\n        val result = x.toString\n        if (result.length() == 0) return \"\"\n        return result\n    }\n\n    // Compute and return the circular shift of the string s.\n    // The string s is a sequence of digits 0-9 and is circularly shifted right by 1.\n    // If the string is empty, return \"0\".\n    // >>> circularShift(\"123\", 1)\n    // \"21\"\n    def circularShift(s : String, shift : Long) : String = {\n        val result = \"\"\n        for (i <- 0 until s.length) {\n            result = result + s[i]\n            if (i + shift >= s.length) break\n            result = result + s[i + shift]\n        }\n        return result\n    }\n\n    // Compute and return the reverse of the string s.\n    // The string s is a sequence of digits 0-9 and is reversed.\n    // If the string is empty, return \"0\".\n    // >>> reverse",
    "        var digits = x.toString.split(\"l\")\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        if (shift > x) {\n            return reverseDigits(x)\n        }\n        if (shift < 0) {\n            return reverseDigits(x)\n        }\n        if (shift == 0) {\n            return x.toString()\n        }\n        var result = \"\"\n        var i = shift\n        while (i < x) {\n            result = x.toString() + result\n            i = i + 1\n        }\n        return result\n    }\n\n    // Reverse digits of the integer x.\n    // >>> reverseDigits(12l)\n    // (21)\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        while (x > 0) {\n            result = x.toString() + result\n            x = x - 1\n        }\n        return result\n    }\n\n    // Reverse digits of the integer x.\n    // >>> reverseDigits(12l)\n    // (21)\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        while (x > 0) {\n            result = x.toString() + result\n            x = x - 1\n        }\n        return result\n    }\n\n    // Reverse digits of the integer x.\n    // >>> reverseDigits(12l)\n    // (21)\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        while (x > 0) {\n            result = x.toString() + result\n            x = x - 1\n        }\n        return result\n    }\n\n    // Reverse digits of the integer x.\n    // >>> reverseDigits(12l)\n    // (21)\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        while (x > 0) {\n            result = x.toString() + result\n            x = x - 1\n        }\n        return result\n    }\n\n    // Reverse digits of the integer x.\n    // >>> reverseDigits(12l)\n    // (21)\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        while (x > 0) {\n            result = x",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 1)\n    }\n\n    // Reverse the digits of the integer x, starting at the given index, and return\n    // the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, start : Int) : String = {\n        if (start > x) {\n            return reverseDigits(x, start - 1)\n        } else {\n            return reverseDigits(x, start)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 1)\n    }\n\n    // Reverse the digits of the integer x, starting at the given index, and return\n    // the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, start : Int) : String = {\n        if (start > x) {\n            return reverseDigits(x, start - 1)\n        } else {\n            return reverseDigits(x, start)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 1)\n    }\n\n    // Reverse the digits of the integer x, starting at the given index, and return\n    // the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, start :",
    "        var digits = x.toString\n        var shiftDigits = shift.toString\n        var result = \"\"\n        var i = 0\n        while (i < shiftDigits.length) {\n            result = result + digits[i]\n            i = i + 1\n        }\n        while (i < digits.length) {\n            result = result + digits[i]\n            i = i + 1\n        }\n        return result",
    "        if (shift > x.toString.length) return x.toString.reverse()\n        return x.toString.substring(shift, x.toString.length)",
    "        val xs = x.toString\n        val shift_ = shift.toString\n        val shift_len = shift_.length\n        val xs_len = xs.length\n        val shift_digits = shift_len.toInt\n        val xs_digits = xs_len.toInt\n        val shift_digits_ = shift_digits.toInt\n        val xs_digits_ = xs_digits.toInt\n        val shift_digits_ = shift_digits_.toInt\n        val xs_digits_ = xs_digits_.toInt\n        val shift_digits_ = shift_digits_.toInt\n        val xs_digits_ = xs_digits_.toInt\n        val shift_digits_ = shift_digits_.toInt\n        val xs_digits_ = xs_digits_.toInt\n        val shift_digits_ = shift_digits_.toInt\n        val xs_digits_ = xs_digits_.toInt\n        val shift_digits_ = shift_digits_.toInt\n        val xs_digits_ = xs_digits_.toInt\n        val shift_digits_ = shift_digits_.toInt\n        val xs_digits_ = xs_digits_.toInt\n        val shift_digits_ = shift_digits_.toInt\n        val xs_digits_ = xs_digits_.toInt\n        val shift_digits_ = shift_digits_.toInt\n        val xs_digits_ = xs_digits_.toInt\n        val shift_digits_ = shift_digits_.toInt\n        val xs_digits_ = xs_digits_.toInt\n        val shift_digits_ = shift_digits_.toInt\n        val xs_digits_ = xs_digits_.toInt\n        val shift_digits_ = shift_digits_.toInt\n        val xs_digits_ = xs_digits_.toInt\n        val shift_digits_ = shift_digits_.toInt\n        val xs_digits_ = xs_digits_.to",
    "        val digits = x.toString().split(\"l\")\n        val result = digits[0]\n        for (i <- 1) {\n            result = result + digits[i]\n            if (i < shift) {\n                result = result + digits[i]\n            }\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"321\")\n    def reverseDigits(x : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = digits[0]\n        for (i <- 1) {\n            result = digits[i] + result\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"321\")\n    def reverseDigits2(x : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = digits[0]\n        for (i <- 1) {\n            result = digits[i] + result\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"321\")\n    def reverseDigits3(x : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = digits[0]\n        for (i <- 1) {\n            result = digits[i] + result\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"321\")\n    def reverseDigits4(x : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = digits[0]\n        for (i <- 1) {\n            result = digits[i] + result\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 1)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x, shift - 1)\n        } else {\n            return reverseDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x, shift - 1)\n        } else {\n            return reverseDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x, shift - 1)\n        } else {\n            return reverseDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x, shift - 1)\n        } else {\n            return reverseDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the",
    "        val digits = x.toString.split(\"l\")\n        val result = digits[0] + circularShift(digits[1], shift)\n        result",
    "        if (shift > x.toString.length) return x.toString.reverse()\n        return circularShift(x.toString.reverse().replaceAll(\"[0-9]\", \"\"), shift)",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits2(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits3(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits4(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits5(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits6(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits7(x : Long) : String = {\n        return circularShift(x,",
    "        if (shift > x.toString.length) {\n            return x.toString.reverse()\n        } else {\n            return circularShift(x.toString.substring(1), shift).concat(x.toString.substring(0, 1))\n        }",
    "        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        if (shift > x.toString.length) {\n            return x.toString.reverse()\n        } else {\n            return x.toString.substring(shift, x.toString.length) + x.toString.substring(0, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"321\")\n    def reverseDigits(x : Long) : String = {\n        return x.toString.substring(x.toString.length - 1, x.toString.length) + x.toString.substring(0, x.toString.length - 1)\n    }\n\n    // Convert the string s to a long integer and return the result.\n    // If s is empty, return 0.\n    // If s contains non-digits, return 0.\n    // If s is not a valid decimal representation of a long integer, return 0.\n    // >>> stringToLong(\"123\")\n    // 123l\n    def stringToLong(s : String) : Long = {\n        if (s.length == 0) {\n            return 0l\n        }\n        if (!s.matches(\"[0-9]+\")) {\n            return 0l\n        }\n        return Long.parseLong(s)\n    }\n\n    // Convert the string s to a long integer and return the result.\n    // If s is empty, return 0.\n    // If s contains non-digits, return 0.\n    // If s is not a valid decimal representation of a long integer, return 0.\n    // >>> stringToLong(\"123\")\n    // 123l\n    def stringToLong2(s : String) : Long = {\n        if (s.length == 0) {\n            return 0l\n        }\n        if (!s.matches(\"[0-9]+\")) {\n            return 0l\n        }\n        return Long.parseLong(s)\n    }\n\n    // Convert the string s to a long integer and return the result.\n    // If s is empty, return 0.\n    // If s contains non-digits, return 0.\n    // If s is not a valid decimal representation",
    "        if (shift > x) {\n            return reverseDigits(x)\n        }\n        else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        }\n        else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and",
    "        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        val digits = x.toString.split(\"l\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits2(x : Long) : String = {\n        return reverseDigits(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits3(x : Long) : String = {\n        return reverseDigits2(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits4(x : Long) : String = {\n        return reverseDigits3(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits5(x : Long) : String = {\n        return reverseDigits4(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits6(x : Long) : String = {\n        return reverseDigits5(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits7(x : Long) : String = {\n        return reverseDigits6(x).toString()\n    }\n\n    //",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1) + circularShift(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits2(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits3(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits4(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits5(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits6(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits7(x : Long) : String = {",
    "        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits((12l))\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Convert a string of digits into an integer and return the result.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt(s : String) : Long = {\n        return Long.parseLong(s)\n    }\n\n    // Convert an integer into a string of digits and return the result.\n    // >>> intToString(123)\n    // \"123\"\n    def intToString(x : Long) : String = {\n        return x.toString\n    }\n\n    // Convert a string of digits into an integer and return the result.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt2(s : String) : Long = {\n        return Long.parseLong(s)\n    }\n\n    // Convert an integer into a string of digits and return the result.\n    // >>> intToString(123)\n    // \"123\"\n    def intToString2(x : Long) : String = {\n        return x.toString\n    }\n\n    // Convert a string of digits into an integer and return the result.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt3(s : String) : Long = {\n        return Long.parseLong(s)\n    }\n\n    // Convert an integer into a string of digits and return the result.\n    // >>> intToString(123)\n    // \"123\"\n    def intToString3(x : Long)",
    "        if (shift > x.toString.length) {\n            return x.toString.reverse()\n        } else {\n            return circularShift(x.toString.reverse().replaceAll(\"[0-9]\", \"\"), shift)\n        }",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var y = x\n        var s = \"\"\n        while (y != 0) {\n            s = (char)(y % 10 + 48) + s\n            y /= 10\n        }\n        return s",
    "        val xs = x.toString\n        val shift_str = shift.toString\n        val shift_int = shift_str.length\n        val shift_digits = shift_str.substring(shift_int - 1, shift_int)\n        val x_digits = xs.substring(shift_int - 1, xs.length)\n        val result = x_digits + x_digits.substring(0, shift_digits)\n        return result",
    "        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until (digits.length - shift)) {\n            result = result + digits[i + shift]\n        }\n        result",
    "        val xs = x.toString\n        val shift_str = shift.toString\n        val shift_int = shift.toInt\n        val shift_long = shift.toLong\n        val shift_bigInt = shift.toBigInt\n        val shift_bigDec = shift.toBigDecimal\n        val shift_bigDecimal = shift.toBigDecimal\n        val shift_bigInteger = shift.toBigInteger\n        val shift_int_array = shift.toIntArray\n        val shift_long_array = shift.toLongArray\n        val shift_bigInt_array = shift.toBigIntArray\n        val shift_bigDecimal_array = shift.toBigDecimalArray\n        val shift_bigDecimal_array_array = shift.toBigDecimalArrayArray\n        val shift_bigInteger_array = shift.toBigIntegerArray\n        val shift_int_array_array = shift.toIntArrayArray\n        val shift_long_array_array = shift.toLongArrayArray\n        val shift_bigInt_array_array = shift.toBigIntArrayArray\n        val shift_bigDecimal_array_array_array = shift.toBigDecimalArrayArrayArray\n        val shift_bigInteger_array_array = shift.toBigIntegerArrayArray\n        val shift_int_array_array_array = shift.toIntArrayArrayArray\n        val shift_long_array_array_array = shift.toLongArrayArrayArray\n        val shift_bigInt_array_array_array = shift.toBigIntArrayArrayArray\n        val shift_bigDecimal_array_array_array_array = shift.toBigDecimalArrayArrayArrayArray\n        val shift_bigInteger_array_array_array = shift.toBigIntegerArrayArrayArray\n        val shift_int_array_array_array_array = shift.toIntArrayArrayArrayArray\n        val shift_long_array_array_array_array = shift.toLongArrayArrayArrayArray\n        val shift_bigInt_array_array_array_array = shift.toBigIntArrayArrayArrayArray\n        val shift_bigDecimal_array_array_array_array_array = shift.toBigDecimalArrayArrayArrayArrayArray\n        val shift_bigInteger_",
    "        val digits = x.toString.split(\"l\")\n        val result = digits[0].concat(digits[1].substring(shift.toString.length()))\n        return result",
    "        var digits = x.toString\n        var shiftDigits = shift.toString\n        var result = \"\"\n        var i = 0\n        while (i < shiftDigits.length) {\n            result = result + digits[i]\n            i = i + 1\n        }\n        for (i = shiftDigits.length; i < digits.length; i = i + 1) {\n            result = result + digits[i]\n        }\n        return result",
    "        if (shift > x) {\n            return reverseDigits(x)\n        }\n        var result = \"\"\n        for (i <- 0 until (shift - 1)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        result = result + (x % 10)\n        return result\n    }\n\n    // Reverse digits of the integer x and return as a string.\n    // >>> reverseDigits(123)\n    // \"321\"\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (x % 10)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        result = result + (x % 10)\n        return result\n    }\n\n    // Reverse digits of the integer x and return as a string.\n    // >>> reverseDigits(123)\n    // \"321\"\n    def reverseDigits2(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (x % 10)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        result = result + (x % 10)\n        return result\n    }\n\n    // Reverse digits of the integer x and return as a string.\n    // >>> reverseDigits(123)\n    // \"321\"\n    def reverseDigits3(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (x % 10)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        result = result + (x % 10)\n        return result\n    }\n\n    // Reverse digits of the integer x and return as a string.\n    // >>> reverseDigits(123)\n    // \"321\"\n    def reverseDigits4(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (x % 10)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        result = result + (x % 10)\n        return result\n    }\n\n    // Reverse digits of the integer x and",
    "        var result = \"\"\n        var x_int = x.toInt\n        var shift_int = shift.toInt\n        var digits = x_int.toString\n        var shift_digits = shift_int.toString\n        var len = digits.length\n        var shift_len = shift_digits.length\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < len) {\n            var digit = digits.charAt(i)\n            var shift_digit = shift_digits.charAt(j)\n            if (j < shift_len) {\n                result = result + shift_digit\n                j = j + 1\n            } else {\n                result = result + digit\n                i = i + 1\n                j = 0\n            }\n        }\n        return result",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1) + x.toString()\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 1) + x.toString()\n    }\n\n    // Reverse the digits of the integer x, starting at the given index, and return\n    // the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, start : Int) : String = {\n        if (start > x) {\n            return reverseDigits(x, start - 1) + x.toString()\n        } else {\n            return reverseDigits(x, start) + x.toString()\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 1) + x.toString()\n    }\n\n    // Reverse the digits of the integer x, starting at the given index, and return\n    // the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, start : Int) : String = {\n        if (start > x) {\n            return reverseDigits(x, start - 1) + x.toString()\n        } else {\n            return reverseDigits(x, start) + x.toString()\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 1) + x.toString()\n    }\n\n    // Reverse the digits of the integer x, starting",
    "        val digits = x.toString.split(\"l\")\n        val result = digits[0].concat(digits[1].substring(shift.toInt))\n        return result",
    "        val digits = x.toString().split(\"l\")\n        val result = digits[0].concat(digits[1].substring(shift.toString().length()))\n        return result\n    }\n\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift2(x : Long, shift : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = digits[0].concat(digits[1].substring(shift.toString().length()))\n        return result\n    }\n\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift3(x : Long, shift : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = digits[0].concat(digits[1].substring(shift.toString().length()))\n        return result\n    }\n\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift4(x : Long, shift : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = digits[0].concat(digits[1].substring(shift.toString().length()))\n        return result\n    }\n\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift5(x : Long, shift : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = digits[0].concat(digits[1].substring(shift.toString().length()))\n        return result\n    }\n\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2",
    "        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until (digits.length - shift)) {\n            result = result + digits[i]\n        }\n        for (i <- (digits.length - shift) until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x < 0) {\n            return reverseDigits(-x)\n        } else {\n            return reverseDigits(x % 10l) + (x / 10l)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x < 0) {\n            return reverseDigits(-x)\n        } else {\n            return reverseDigits(x % 10l) + (x / 10l)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x < 0) {\n            return reverseDigits(-x)\n        } else {\n            return reverseDigits(x % 10l) + (x / 10l)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x < 0) {\n            return reverseDigits(-x)\n        } else {\n            return reverseDigits(x % 10l) + (x / 10l)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x < 0) {\n            return reverseDigits(-x)\n        } else {\n            return reverseDigits(",
    "        val digits = x.toString.split(\"l\")\n        val result = digits[0].concat(digits[1].substring(0, shift - 1))\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits[0].concat(digits[1].substring(0, digits[1].length() - 1))\n        return result\n    }\n\n    // Convert the integer x to a string and return the result as a string.\n    // >>> convertToString(12l)\n    // (\"12\")\n    def convertToString(x : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits[0].concat(digits[1])\n        return result\n    }\n\n    // Convert the integer x to a string and return the result as a string.\n    // >>> convertToString(12l)\n    // (\"12\")\n    def convertToString(x : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits[0].concat(digits[1])\n        return result\n    }\n\n    // Convert the integer x to a string and return the result as a string.\n    // >>> convertToString(12l)\n    // (\"12\")\n    def convertToString(x : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits[0].concat(digits[1])\n        return result\n    }\n\n    // Convert the integer x to a string and return the result as a string.\n    // >>> convertToString(12l)\n    // (\"12\")\n    def convertToString(x : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits[0].concat(digits[1])\n        return result\n    }\n\n    // Convert the integer x to a string and return",
    "        if (shift > x.toString.length) return x.toString.reverse()\n        return x.toString.substring(shift, x.toString.length)\n    }\n\n    // Returns the sum of the digits of the integer x.\n    // >>> sumDigits(12l)\n    // (3)\n    def sumDigits(x : Long) : Long = {\n        return x.toString.reduce(_.sum)\n    }\n\n    // Returns the product of the digits of the integer x.\n    // >>> productDigits(12l)\n    // (2)\n    def productDigits(x : Long) : Long = {\n        return x.toString.reduce(_.product)\n    }\n\n    // Returns the sum of the digits of the integer x.\n    // >>> sumDigits(12l)\n    // (3)\n    def sumDigits(x : Long) : Long = {\n        return x.toString.reduce(_.sum)\n    }\n\n    // Returns the product of the digits of the integer x.\n    // >>> productDigits(12l)\n    // (2)\n    def productDigits(x : Long) : Long = {\n        return x.toString.reduce(_.product)\n    }\n\n    // Returns the sum of the digits of the integer x.\n    // >>> sumDigits(12l)\n    // (3)\n    def sumDigits(x : Long) : Long = {\n        return x.toString.reduce(_.sum)\n    }\n\n    // Returns the product of the digits of the integer x.\n    // >>> productDigits(12l)\n    // (2)\n    def productDigits(x : Long) : Long = {\n        return x.toString.reduce(_.product)\n    }\n\n    // Returns the sum of the digits of the integer x.\n    // >>> sumDigits(12l)\n    // (3)\n    def sumDigits(x : Long) : Long = {\n        return x.toString.reduce(_.sum)\n    }\n\n    // Returns the product of the digits of the integer x.\n    // >>> productDigits(12l)\n    //",
    "        var digits = x.toString\n        var result = \"\"\n        var i = 0\n        while (i < shift) {\n            result = result + digits[i]\n            i = i + 1\n        }\n        for (i = shift; i < digits.length; i = i + 1) {\n            result = result + digits[i]\n        }\n        return result",
    "        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until (digits.length - shift)) {\n            result = result + digits[i]\n        }\n        for (i <- (digits.length - shift) until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        if (shift > x.toString.length) return x.toString.reverse()\n        return x.toString.substring(shift) + x.toString.substring(0, shift)",
    "        val xs = x.toString\n        val shift_str = shift.toString\n        val shift_int = shift.toInt\n        if (shift_int > xs.length()) {\n            return xs.reverse\n        } else {\n            return xs.substring(shift_int) + xs.substring(0, xs.length() - shift_int)\n        }",
    "        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(123)\n    // (\"321\")\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Convert the string s to a non-negative integer and return it as a long value.\n    // If s is not a valid integer, it will be rejected and -1L will be returned.\n    // >>> stringToLong(\"123\")\n    // 123L\n    def stringToLong(s : String) : Long = {\n        var result = 0L\n        var i = 0\n        while (i < s.length && Character.isDigit(s.charAt(i))) {\n            result = result * 10 + Character.digit(s.charAt(i), 10)\n            i += 1\n        }\n        if (i == s.length) {\n            return result\n        } else {\n            return -1L\n        }\n    }\n\n    // Convert the non-negative integer x to a string and append it to the string s.\n    // If x is less than zero, the string \"ERROR\" will be appended to s.\n    // >>> longToString(123, \"\")\n    // (\"123\")\n    def longToString(x : Long, s : String) : String = {\n        if (x < 0) {\n            s += \"ERROR\"\n        } else {\n            s += x.toString\n        }\n        return s\n    }\n\n    // Convert the non-negative integer x to a string and prepend it to the string s.\n    // If x is less than zero, the string \"ERROR\" will be prepended to s.\n    // >>> longToString(123",
    "        val digits = x.toString().split(\"l\")\n        val shifted = circularShift(digits, shift)\n        shifted.mkString(\"l\")\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : scala.math.BigInt, shift : scala.math.BigInt) : scala.collection.immutable.String = {\n        val digits = x.toString().split(\"l\")\n        val shifted = circularShift(digits, shift)\n        shifted.mkString(\"l\")\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : scala.collection.immutable.Vector[Long], shift : scala.collection.immutable.Vector[Long]) : scala.collection.immutable.Vector[Long] = {\n        val digits = x.toSeq().toList()\n        val shifted = circularShift(digits, shift)\n        shifted.toSeq().toList()\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : scala.collection.immutable.Vector[scala.math.BigInt], shift : scala.collection.immutable.Vector[scala.math.BigInt]) : scala.collection.",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x == 0) {\n            return \"\"\n        } else {\n            return reverseDigits(x / 10) + (x % 10)\n        }\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits",
    "        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        val s = x.toString\n        val s2 = s.substring(shift, s.length)\n        val s3 = s2.substring(0, s2.length - shift)\n        val s4 = s3 + s2\n        return s4",
    "        if (shift > x.toString.length) {\n            return x.toString.reverse()\n        } else {\n            return x.toString.substring(shift, x.toString.length)\n        }",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1) + String.valueOf(x % 10)\n        }",
    "        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until (digits.length - shift)) {\n            result = result + digits[i]\n        }\n        result",
    "        if (shift > x) {\n            return reverseDigits(x)\n        }\n        var digits = x.toString().split(\"\")\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString().split(\"\")\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString().split(\"\")\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString().split(\"\")\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString().split(\"\")\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the",
    "        if (shift > x.toString.length) {\n            return x.toString.reverse()\n        }\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + x.toString[i]\n        }\n        for (i <- shift until x.toString.length) {\n            result = result + x.toString[i]\n        }\n        return result",
    "        val digits = x.toString().split(\"l\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"321\")\n    def reverseDigits(x : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Convert the string s to a non-negative integer and return it as a long.\n    // The string may contain an optional minus sign followed by only the ten\n    // digits 0 through 9.\n    // >>> stringToLong(\"123\")\n    // 123l\n    def stringToLong(s : String) : Long = {\n        val result = 0l\n        for (i <- 0 until s.length) {\n            val digit = s.charAt(i)\n            if (digit.toString() == \"0\") {\n                result = result + 0l\n            } else if (digit.toString() == \"1\") {\n                result = result + 1l\n            } else if (digit.toString() == \"2\") {\n                result = result + 2l\n            } else if (digit.toString() == \"3\") {\n                result = result + 3l\n            } else if (digit.toString() == \"4\") {\n                result = result + 4l\n            } else if (digit.toString() == \"5\") {\n                result = result + 5l\n            } else if (digit.toString() == \"6\") {\n                result = result + 6l\n            } else if (digit.toString() == \"7\") {\n                result = result + 7l\n            } else if (digit.toString() == \"8\") {\n                result = result + 8l\n            } else if (digit.toString() == \"",
    "        if (shift > x.toString.length) {\n            return x.toString.reverse()\n        }\n        return x.toString.substring(shift, x.toString.length)",
    "        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until (digits.length - shift)) {\n            result = result + digits[i]\n        }\n        result",
    "        if (shift > x.toString.length) {\n            return x.toString.reverse()\n        } else {\n            return circularShift(x.toString.reverse().toLong, shift).reverse()\n        }",
    "        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        var digits = x.toString\n        var shiftDigits = digits.substring(shift)\n        var shiftedDigits = digits.substring(0, shift) + shiftDigits\n        return shiftedDigits",
    "        val digits = x.toString.split(\"l\")\n        val result = digits[0].toString + circularShift(digits[1], shift)\n        return result",
    "        val xs = x.toString\n        val shiftStr = shift.toString\n        val shiftDigits = shiftStr.split(\"l\")\n        val shiftDigitsLength = shiftDigits.length\n        val shiftDigitsInt = shiftDigits.map(Long::parseLong).toList\n        val shiftDigitsIntLength = shiftDigitsInt.length\n        val result = xs.substring(shiftDigitsIntLength)\n        if (shiftDigitsLength > shiftDigitsIntLength) {\n            val reversed = xs.substring(0, shiftDigitsIntLength)\n            return reversed\n        } else {\n            return result\n        }",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 1)\n    }\n\n    // Reverse the digits of the integer x, starting from the given position, and\n    // return the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"32\")\n    def reverseDigits(x : Long, start : Long) : String = {\n        if (start > x) {\n            return reverseDigits(x)\n        } else {\n            return reverseDigits(x, start + 1)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 1)\n    }\n\n    // Reverse the digits of the integer x, starting from the given position, and\n    // return the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"32\")\n    def reverseDigits(x : Long, start : Long) : String = {\n        if (start > x) {\n            return reverseDigits(x)\n        } else {\n            return reverseDigits(x, start + 1)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 1)\n    }\n\n    // Reverse the digits of the integer x, starting from the given position, and\n    // return the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"32\")\n    def reverseDigits(x : Long, start : Long) : String",
    "        val digits = x.toString().split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        if (shift > x.toString.length) return x.toString.reverse()\n        return x.toString.substring(shift, x.toString.length)",
    "        val digits = x.toString.split(\"l\")\n        val result = digits[0] + circularShift(digits[1], shift)\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits((12l))\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = reverseDigits(digits[1]) + digits[0]\n        return result\n    }\n\n    // Convert the string s to a long integer and return the result as a string.\n    // >>> stringToLong(\"1234\")\n    // (\"1234\")\n    def stringToLong(s : String) : String = {\n        val result = s.replaceAll(\"[^0-9]\", \"\")\n        return result\n    }\n\n    // Convert the long integer x to a string and return the result as a string.\n    // >>> longToString(1234l)\n    // (\"1234\")\n    def longToString(x : Long) : String = {\n        val result = x.toString\n        return result\n    }\n\n    // Compute the sum of the digits of the integer x and return the result as a string.\n    // >>> sumDigits(1234l)\n    // (\"4\")\n    def sumDigits(x : Long) : String = {\n        val result = x.toString.replaceAll(\"[^0-9]\", \"\")\n        return result\n    }\n\n    // Compute the product of the digits of the integer x and return the result as a string.\n    // >>> productDigits(1234l)\n    // (\"2468\")\n    def productDigits(x : Long) : String = {\n        val result = x.toString.replaceAll(\"[^0-9]\", \"\")\n        return result\n    }\n\n    // Compute the sum of the digits of the integer x and return the result as a string.\n    // >>> sumDigits(1234l)\n    // (\"4\")\n    def sumDigits(x : Long) : String = {\n        val result = x.toString.replace",
    "        if (shift > x) {\n            return reverseDigits(x)\n        }\n        var result = \"\"\n        for (i <- 0 until x.toString().length) {\n            result = result + x.toString().charAt(i)\n            if (i + shift < x.toString().length) {\n                result = result + x.toString().charAt(i + shift)\n            }\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until x.toString().length) {\n            result = result + x.toString().charAt(x.toString().length - 1 - i)\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits2(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until x.toString().length) {\n            result = result + x.toString().charAt(x.toString().length - 1 - i)\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits3(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until x.toString().length) {\n            result = result + x.toString().charAt(x.toString().length - 1 - i)\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits4(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until x.toString().length) {\n            result = result + x.toString().",
    "        var digits = x.toString\n        var result = \"\"\n        var i = 0\n        while (i < shift) {\n            result = digits[i] + result\n            i = i + 1\n        }\n        result = digits[i] + result\n        return result",
    "        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = digits[i] + result\n        }\n        return result",
    "        val xs = x.toString\n        val shift_ = shift.toString\n        val shift_len = shift_.length\n        val xs_len = xs.length\n        val result = \"\"\n        for (i <- 0 until xs_len) {\n            val digit = xs.substring(i, i + 1)\n            val shift_digit = shift_\n            if (shift_len > i) {\n                shift_digit = shift_.substring(shift_len - i)\n            }\n            result += shift_digit + digit\n        }\n        return result",
    "        val digits = x.toString.split(\"l\")\n        val result = digits.map(d -> {\n            val shifted = circularShiftDigits(d, shift)\n            return shifted\n        }).mkString(\"l\")\n        return result\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits.map(d -> {\n            val shifted = circularShiftDigits(d, shift)\n            return shifted\n        }).mkString(\"l\")\n        return result\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = digits.map(d -> {\n            val shifted = circularShiftDigits(d, shift)\n            return shifted\n        }).mkString(\"l\")\n        return result\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"l\")\n",
    "        val xs = x.toString\n        val shiftStr = shift.toString\n        val shiftDigits = shiftStr.split(\"l\")\n        val shiftDigitsLength = shiftDigits.length\n        val shiftDigitsInt = shiftDigits.map(Integer.parseInt)\n        val shiftDigitsIntLength = shiftDigitsInt.length\n        val shiftDigitsIntLengthInt = shiftDigitsIntLength.toInt\n        val shiftDigitsIntLengthIntPlusOne = shiftDigitsIntLengthInt + 1\n        val shiftDigitsIntLengthIntPlusOneInt = shiftDigitsIntLengthInt + 1\n        val shiftDigitsIntLengthIntPlusOneIntPlusOne = shiftDigitsIntLengthInt + 1 + 1\n        val shiftDigitsIntLengthIntPlusOneIntPlusOneInt = shiftDigitsIntLengthInt + 1 + 1 + 1\n        val shiftDigitsIntLengthIntPlusOneIntPlusOneIntPlusOne = shiftDigitsIntLengthInt + 1 + 1 + 1 + 1 + 1\n        val shiftDigitsIntLengthIntPlusOneIntPlusOneIntPlusOneIntPlusOne = shiftDigitsIntLengthInt + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        val shiftDigitsIntLengthIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne = shiftDigitsIntLengthInt + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        val shiftDigitsIntLengthIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne = shiftDigitsIntLengthInt + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        val shiftDigitsIntLengthIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne = shiftDigitsIntLengthInt + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        val shiftDigitsIntLengthIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne = shiftDigitsIntLengthInt + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        val shiftDigitsIntLengthIntPlusOne",
    "        if (shift > x.toString.length) {\n            return x.toString.reverse()\n        } else {\n            return x.toString.substring(shift, x.toString.length) + x.toString.substring(0, shift)\n        }",
    "        if (shift > x) {\n            return reverseDigits(x)\n        }\n        var digits = x.toString().split(\"\")\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString().split(\"\")\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Return the sum of the digits of the integer x.\n    // >>> sumDigits(12l)\n    // (3)\n    def sumDigits(x : Long) : Long = {\n        var digits = x.toString().split(\"\")\n        var result = 0l\n        for (i <- 0 until digits.length) {\n            result = result + Long(digits[i])\n        }\n        return result\n    }\n\n    // Return the product of the digits of the integer x.\n    // >>> productDigits(12l)\n    // (2)\n    def productDigits(x : Long) : Long = {\n        var digits = x.toString().split(\"\")\n        var result = 1l\n        for (i <- 0 until digits.length) {\n            result = result * Long(digits[i])\n        }\n        return result\n    }\n\n    // Return the sum of the digits of the integer x,\n    // but if the sum is 10, return \"X\".\n    // >>> sumDigits10(12l)\n    // (\"X\")\n    def sumDigits10(x : Long) : String = {\n        var digits = x.toString().split(\"\")\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        if",
    "        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(123l)\n    // (\"321\")\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt(s : String) : Long = {\n        var digits = s.toString\n        var result = 0l\n        for (i <- 0 until digits.length) {\n            result = result * 10 + digits[i]\n        }\n        return result\n    }\n\n    // Convert an integer into a string of digits.\n    // >>> intToString(123)\n    // \"123\"\n    def intToString(x : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Convert a string of digits into a string of words.\n    // >>> stringToWords(\"123\")\n    // \"one, two, three\"\n    def stringToWords(s : String) : String = {\n        var digits = s.toString\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + words[digits[i]]\n        }\n        return result\n    }\n\n    // Convert a string of words into a string of digits.\n    // >>> wordsToString(\"one, two, three\")\n    // \"123\"\n    def wordsToString(s : String) : String = {\n        var words = s.toString\n        ",
    "        if (shift > x.toString.length) return x.toString.reverse()\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + x.toString[i]\n        }\n        return result",
    "        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until (digits.length - shift)) {\n            result = result + digits[i]\n        }\n        for (i <- (digits.length - shift) until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        if (shift > x.toString.length) {\n            return x.toString.reverse()\n        }\n        return x.toString.substring(shift, x.toString.length)",
    "        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        if (shift > x.toString.length) {\n            return x.toString.reverse()\n        } else {\n            return x.toString.substring(shift, x.toString.length) + x.toString.substring(0, shift)\n        }",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1) + x.toString()\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Convert the string s to a long integer.\n    // >>> stringToLong(\"1234\")\n    // 1234l\n    def stringToLong(s : String) : Long = {\n        return Long.parseLong(s)\n    }\n\n    // Convert the long integer x to a string.\n    // >>> longToString(1234l)\n    // \"1234\"\n    def longToString(x : Long) : String = {\n        return x.toString()\n    }\n\n    // Compute the circular shift of the string s.\n    // >>> circularShift(\"abc\", 1)\n    // (\"bac\")\n    def circularShift(s : String, shift : Long) : String = {\n        return circularShift(stringToLong(s), shift)\n    }\n\n    // Compute the reverse of the string s.\n    // >>> reverse(\"abc\")\n    // (\"cba\")\n    def reverse(s : String) : String = {\n        return circularShift(s, s.length())\n    }\n\n    // Compute the circular shift of the string s.\n    // >>> circularShift(\"abc\", -1)\n    // (\"cba\")\n    def circularShift(s : String, shift : Long) : String = {\n        return circularShift(stringToLong(s), shift)\n    }\n\n    // Compute the reverse of the string s.\n    // >>> reverse(\"abc\")\n    // (\"cba\")\n    def reverse(s : String) : String = {\n        return circularShift(s, s.length())\n    }\n\n    // Compute the circular shift of the string s.\n    // >>> circularShift(\"abc\", -1)\n    // (\"cba\")\n    def circularShift(s : String",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1) + reverseDigits(x)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 0)\n    }\n\n    // Reverse the digits of the integer x, starting at the given index, and return\n    // the result as a string.\n    // >>> reverseDigits(12l, 1)\n    // (\"21\")\n    def reverseDigits(x : Long, start : Int) : String = {\n        if (start > x) {\n            return reverseDigits(x, 0)\n        } else {\n            return reverseDigits(x, start + 1) + reverseDigits(x, 0)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 0)\n    }\n\n    // Reverse the digits of the integer x, starting at the given index, and return\n    // the result as a string.\n    // >>> reverseDigits(12l, 1)\n    // (\"21\")\n    def reverseDigits(x : Long, start : Int) : String = {\n        if (start > x) {\n            return reverseDigits(x, 0)\n        } else {\n            return reverseDigits(x, start + 1) + reverseDigits(x, 0)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 0)\n    }\n\n    // Reverse the digits of the integer x, starting at the given index, and return\n    // the result as a string.\n    // >>> reverseDigits",
    "        if (shift > x) {\n            return reverseDigits(x)\n        }\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        for (i <- 0 until shift) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Reverse digits of the integer x and return as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until x) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Compute the circular shift of the digits of the integer x,\n    // shift the digits right by shift and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftRight((12l), (1l))\n    // (\"12\")\n    // >>> circularShiftRight((12l), (2l))\n    // (\"21\")\n    def circularShiftRight(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        }\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        for (i <- 0 until shift) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Compute the circular shift of the digits of the integer x,\n    // shift the digits right by shift and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftLeft((12l), (1l))\n    // (\"21\")\n    // >>> circularShiftLeft((12l), (2l))\n    // (\"12\")\n    def circularShiftLeft(x : Long, shift : Long) : String = {\n        if (shift > x) {",
    "        var digits = x.toString\n        var result = \"\"\n        var i = 0\n        while (i < shift) {\n            result = digits[i] + result\n            i = i + 1\n        }\n        result = digits[i] + result\n        return result",
    "        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift2(x : Long, shift : Long) : String = {\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift3(x : Long, shift : Long) : String = {\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift4(x : Long, shift : Long) : String = {\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2",
    "        val digits = x.toString().split(\"l\")\n        val result = digits[0].concat(digits[1].substring(shift.toString().length()))\n        return result",
    "        val digits = x.toString().split(\"l\")\n        val result = digits[0] + circularShift(digits[1], shift)\n        return result",
    "        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result += digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result += digits[i]\n        }\n        return result",
    "        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        if (shift > x.toString().length()) {\n            return reverseDigits(x.toString())\n        } else {\n            return x.toString().substring(shift, x.toString().length()) + x.toString().substring(0, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(123)\n    // (\"321\")\n    def reverseDigits(x : Long) : String = {\n        return x.toString().replaceAll(\"(\\\\d)\", \"$1l\")\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt(s : String) : Long = {\n        return _.toLong(s)\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt2(s : String) : Long = {\n        return _.toLong(s)\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt3(s : String) : Long = {\n        return _.toLong(s)\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt4(s : String) : Long = {\n        return _.toLong(s)\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt5(s : String) : Long = {\n        return _.toLong(s)\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt6(s : String) : Long = {\n        return _.toLong(s)\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt7(s : String) : Long = {\n",
    "        val digits = x.toString.split(\"l\")\n        val result = digits[0] + circularShift(digits[1], shift)\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        val digits = x.toString.split(\"l\")\n        val result = reverseDigits(digits[1]) + digits[0]\n        return result\n    }\n\n    // Convert the string s to a long value and return the result.\n    // >>> stringToLong(\"12\")\n    // (12l)\n    def stringToLong(s : String) : Long = {\n        val result = s.toLong\n        return result\n    }\n\n    // Convert the long value x to a string and return the result.\n    // >>> longToString(12l)\n    // (\"12\")\n    def longToString(x : Long) : String = {\n        val result = x.toString\n        return result\n    }\n\n    // Convert the string s to a double value and return the result.\n    // >>> stringToDouble(\"12.3\")\n    // (12.3)\n    def stringToDouble(s : String) : Double = {\n        val result = s.toDouble\n        return result\n    }\n\n    // Convert the double value x to a string and return the result.\n    // >>> doubleToString(12.3)\n    // (\"12.3\")\n    def doubleToString(x : Double) : String = {\n        val result = x.toString\n        return result\n    }\n\n    // Convert the string s to a float value and return the result.\n    // >>> stringToFloat(\"12.3\")\n    // (12.3f)\n    def stringToFloat(s : String) : Float = {\n        val result = s.toFloat\n        return result\n    }\n\n    // Convert the float value x to a string and return the result.\n    // >>> floatToString(12.3f)\n    // (\"12.3\")\n    def floatToString(x : Float) : String = {",
    "        var digits = x.toString\n        var result = \"\"\n        var i = 0\n        while (i < shift) {\n            result = digits[i] + result\n            i = i + 1\n        }\n        result = digits[i] + result\n        return result",
    "        var digits = x.toString\n        var result = \"\"\n        var i = 0\n        while (i < shift) {\n            result = digits[i] + result\n            i = i + 1\n        }\n        while (i < digits.length) {\n            result = digits[i] + result\n            i = i + 1\n        }\n        return result",
    "        val xs = x.toString\n        val shift_str = shift.toString\n        val shift_int = shift_str.toInt\n        val shift_int_str = shift_int.toString\n        val shift_int_str_len = shift_int_str.length\n        val shift_int_str_len_minus_1 = shift_int_str_len - 1\n        val shift_int_str_len_minus_2 = shift_int_str_len - 2\n        val shift_int_str_len_minus_3 = shift_int_str_len - 3\n        val shift_int_str_len_minus_4 = shift_int_str_len - 4\n        val shift_int_str_len_minus_5 = shift_int_str_len - 5\n        val shift_int_str_len_minus_6 = shift_int_str_len - 6\n        val shift_int_str_len_minus_7 = shift_int_str_len - 7\n        val shift_int_str_len_minus_8 = shift_int_str_len - 8\n        val shift_int_str_len_minus_9 = shift_int_str_len - 9\n        val shift_int_str_len_minus_10 = shift_int_str_len - 10\n        val shift_int_str_len_minus_11 = shift_int_str_len - 11\n        val shift_int_str_len_minus_12 = shift_int_str_len - 12\n        val shift_int_str_len_minus_13 = shift_int_str_len - 13\n        val shift_int_str_len_minus_14 = shift_int_str_len - 14\n        val shift_int_str_len_minus_15 = shift_int_str_len - 15\n        val shift_int_str_len_minus_16 = shift_int_str_len - 16\n        val shift_int_str_len_minus_17 = shift_int_str_len - 17\n        val shift_int_str_len_minus_18 = shift_int_str_len - 18\n        val shift_int_str_len_minus_19",
    "        if (shift > x.toString().length()) {\n            return x.toString().reverse()\n        } else {\n            return x.toString().substring(shift.toString().length(), x.toString().length()) + x.toString().substring(0, shift.toString().length())\n        }",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            var result = \"\"\n            for (i <- 0 until shift) {\n                result = result + (x % 10)\n                x = x / 10\n            }\n            return result\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until x) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until x) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until x) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until x) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <-",
    "        if (shift > x.toString.length) return x.toString.reverse()\n        return circularShift(x.toString.substring(1), shift) + x.toString.charAt(0)",
    "        if (shift > x) {\n            return reverseDigits(x)\n        }\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 to (digits.length - shift)) {\n            result += digits[i]\n        }\n        for (i <- (digits.length - shift) to digits.length) {\n            result += digits[i]\n        }\n        return result\n    }\n\n    // Reverse digits of the integer x and return as a string.\n    // >>> reverseDigits(12l)\n    // \"21\"\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 to digits.length - 1) {\n            result += digits[i]\n        }\n        return result\n    }\n\n    // Reverse digits of the integer x and return as a string.\n    // >>> reverseDigits(12l)\n    // \"21\"\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 to digits.length - 1) {\n            result += digits[i]\n        }\n        return result\n    }\n\n    // Reverse digits of the integer x and return as a string.\n    // >>> reverseDigits(12l)\n    // \"21\"\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 to digits.length - 1) {\n            result += digits[i]\n        }\n        return result\n    }\n\n    // Reverse digits of the integer x and return as a string.\n    // >>> reverseDigits(12l)\n    // \"21\"\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 to digits.length - 1) {\n            result += digits[i]\n        }\n        return result\n    }\n\n    // Reverse digits of the integer x and return",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1) + x.toString()\n        }",
    "        if (shift > x.toString.length) return x.toString.reverse()\n        return x.toString.substring(shift, x.toString.length)",
    "        val xs = x.toString\n        val shift_str = shift.toString\n        val shift_int = shift.toInt\n        if (shift_int > xs.length()) {\n            return xs.reverse()\n        } else {\n            val result = xs.substring(shift_int)\n            val result_str = result.reverse()\n            return result_str\n        }",
    "        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[(i + shift) % digits.length]\n        }\n        result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[(digits.length - 1 - i)]\n        }\n        result\n    }\n\n    // Convert the integer x to a string and reverse the digits of the string.\n    // >>> reverseDigitsToString(12l)\n    // (\"21\")\n    def reverseDigitsToString(x : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[(digits.length - 1 - i)]\n        }\n        result\n    }\n\n    // Convert the integer x to a string and reverse the digits of the string.\n    // >>> reverseDigitsToString(12l)\n    // (\"21\")\n    def reverseDigitsToString2(x : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[(digits.length - 1 - i)]\n        }\n        result\n    }\n\n    // Convert the integer x to a string and reverse the digits of the string.\n    // >>> reverseDigitsToString(12l)\n    // (\"21\")\n    def reverseDigitsToString3(x : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[(digits.length - 1 - i)]\n        }\n        result\n    }\n\n    // Convert the integer",
    "        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits2(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits3(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits4(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits5(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits6(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits7(x : Long) : String = {\n        return circularShift(x,",
    "        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until (digits.length - shift)) {\n            result = result + digits[i]\n        }\n        result",
    "        val digits = x.toString.split(\"l\")\n        val result = digits[0].concat(digits[1].substring(shift.toString.length()))\n        return result",
    "        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        val xs = x.toString\n        val shiftStr = shift.toString\n        if (shiftStr.length > xs.length()) {\n            return xs.reverse()\n        }\n        val result = xs.substring(shiftStr.length, xs.length)\n        return result",
    "        if (shift > x) {\n            return reverseDigits(x)\n        }\n        if (shift < 0) {\n            return reverseDigits(x)\n        }\n        if (shift == 0) {\n            return x.toString()\n        }\n        return circularShift(x, shift - 1) + x.toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, n : Int) : String = {\n        if (n == 0) {\n            return \"\"\n        }\n        if (n == 1) {\n            return x.toString()\n        }\n        return reverseDigits(x, n - 1) + x.toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, n : Int) : String = {\n        if (n == 0) {\n            return \"\"\n        }\n        if (n == 1) {\n            return x.toString()\n        }\n        return reverseDigits(x, n - 1) + x.toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, n : Int) : String = {\n        if (n == 0) {\n            return \"\"\n        }\n        if (n == 1) {\n            return x.toString()\n        }\n        return reverseDigits(x, n - 1) + x.toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n",
    "        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Convert the integer x to a string and return the string.\n    // >>> toString(12l)\n    // (\"12\")\n    def toString(x : Long) : String = {\n        return x.toString\n    }\n\n    // Convert the string s to an integer and return the result.\n    // If s is empty, return 0.\n    // >>> toInt(\"12\")\n    // 12\n    def toInt(s : String) : Int = {\n        if (s.isEmpty) {\n            return 0\n        } else {\n            return Integer.parseInt(s)\n        }\n    }\n\n    // Convert the string s to a long and return the result.\n    // If s is empty, return 0.\n    // >>> toLong(\"12\")\n    // 12l\n    def toLong(s : String) : Long = {\n        if (s.isEmpty) {\n            return 0l\n        } else {\n            return Long.parseLong(s)\n        }\n    }\n\n    // Convert the string s to a float and return the result.\n    // If s is empty, return 0.0.\n    // >>> toFloat(\"12\")\n    // 12.0\n    def toFloat(s : String) : Float = {\n        if (s.isEmpty) {\n            return 0.0\n        } else {\n            return Float.parseFloat(s)\n        }\n    }\n\n    // Convert the string s to",
    "        if (shift > x.toString.length) return x.toString.reverse()\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + x.toString[i]\n        }\n        for (i <- shift until x.toString.length) {\n            result = result + x.toString[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(123l)\n    // (\"321\")\n    def reverseDigits(x : Long) : String = {\n        return x.toString.reverse()\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"123\")\n    // 123\n    def stringToInt(s : String) : Long = {\n        return s.toLong\n    }\n\n    // Convert an integer into a string of digits.\n    // >>> intToString(123)\n    // \"123\"\n    def intToString(x : Long) : String = {\n        return x.toString\n    }\n\n    // Compute the sum of the digits of the integer x.\n    // >>> sumDigits(123)\n    // 3\n    def sumDigits(x : Long) : Long = {\n        return x.toString.reduce(_.sum)\n    }\n\n    // Compute the product of the digits of the integer x.\n    // >>> productDigits(123)\n    // 2\n    def productDigits(x : Long) : Long = {\n        return x.toString.reduce(_.product)\n    }\n\n    // Compute the sum of the digits of the integer x.\n    // >>> sumDigits(123)\n    // 3\n    def sumDigits(x : Long) : Long = {\n        return x.toString.reduce(_.sum)\n    }\n\n    // Compute the product of the digits of the integer x.\n    // >>> productDigits(123)\n    // 2\n    def productDigits(x : Long) : Long = {\n        return x.toString.reduce(_.product)\n    }\n\n    // Compute the sum of the",
    "        val digits = x.toString().split(\"l\")\n        val result = digits[0].concat(digits[1].substring(shift, digits[1].length()))\n        return result",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            var result = \"\"\n            for (i <- 0 until (x - shift)) {\n                result = result + (x % 10)\n                x = x / 10\n            }\n            return result\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (x - 1)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12)\n    // (\"21\")\n    def reverseDigits2(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (x - 1)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12)\n    // (\"21\")\n    def reverseDigits3(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (x - 1)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12)\n    // (\"21\")\n    def reverseDigits4(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (x - 1)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12)\n    // (\"21\")\n    def reverseDigits5(x : Long) : String",
    "        val digits = x.toString().split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[(i + shift) % digits.length]\n        }\n        result",
    "        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length",
    "        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until (digits.length - shift)) {\n            result = result + digits[i + shift]\n        }\n        result",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x < 0) {\n            return reverseDigits(-x)\n        } else {\n            return reverseDigits(x)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x < 0) {\n            return reverseDigits(-x)\n        } else {\n            return reverseDigits(x)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x < 0) {\n            return reverseDigits(-x)\n        } else {\n            return reverseDigits(x)\n        }\n    ",
    "        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        val digits = x.toString().split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        if (shift > x.toString.length) return x.toString.reverse()\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + x.toString[i]\n        }\n        return result",
    "        val digits = x.toString().split(\"l\")\n        val result = \"\"\n        for (i <- 0 until digits.length - 1) {\n            result += digits[(i + shift) % digits.length]\n        }\n        return result",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            var result = \"\"\n            for (i <- 0 until (x - shift)) {\n                result = result + (x % 10)\n                x = x / 10\n            }\n            return result\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (x - 1)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (x - 1)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (x - 1)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (x - 1)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) :",
    "        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[(i + shift) % digits.length]\n        }\n        result",
    "        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        val digits = x.toString.split(\"l\")\n        val result = digits[0] + circularShift(digits[1], shift)\n        return result",
    "        val digits = x.toString.split(\"l\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[(i + shift) % digits.length]\n        }\n        result",
    "        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until (digits.length - shift)) {\n            result = result + digits[i]\n        }\n        result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until (digits.length - 1)) {\n            result = result + digits[i]\n        }\n        result\n    }\n\n    // Convert the string s to a long and return the result.\n    // >>> stringToLong(\"1234\")\n    // 1234l\n    def stringToLong(s : String) : Long = {\n        var result = 0l\n        for (i <- 0 until (s.length - 1)) {\n            result = result * 10 + s[i].charCodeAt(0) - 48\n        }\n        result\n    }\n\n    // Convert the long l to a string and return the result.\n    // >>> longToString(1234l)\n    // \"1234\"\n    def longToString(l : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (l.toString().length - 1)) {\n            result = result + l.toString()[i]\n        }\n        result\n    }\n\n    // Compute the sum of the digits of the integer x and return the result as a string.\n    // >>> sumDigits(1234l)\n    // \"4\"\n    def sumDigits(x : Long) : String = {\n        var result = 0l\n        for (i <- 0 until (x.toString().length - 1)) {\n            result = result + x.toString()[i]\n        }\n        result\n    }\n\n    // Compute the product of the digits of the integer x and return the result as a string.\n    // >>> productDigits(1234l)\n    // \"1234\"\n    def productDigits(x : Long) : String = {\n        var result =",
    "        if (shift > x.toString.length) {\n            return x.toString.reverse()\n        }\n        var digits = x.toString.toCharArray\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result += digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result += digits[i]\n        }\n        return result",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x == 0) {\n            return \"\"\n        } else {\n            return reverseDigits(x / 10) + (x % 10)\n        }\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits",
    "        var digits = x.toString\n        var result = \"\"\n        var i = 0\n        while (i < shift) {\n            result = result + digits[i]\n            i = i + 1\n        }\n        while (i < digits.length) {\n            result = result + digits[i]\n            i = i + 1\n        }\n        return result",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1)\n        }",
    "        val xs = x.toString\n        val shift_ = shift.toString\n        val shift_len = shift_.length\n        val x_len = xs.length\n        val result = \"\"\n        for (i <- 0 until (x_len - shift_len)) {\n            result = result + xs[(i + shift_len) % x_len]\n        }\n        result",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            var result = \"\"\n            for (i <- 0 until (x - shift)) {\n                result = result + (x % 10)\n                x = x / 10\n            }\n            result = result + (x % 10)\n            return result\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until (x - 1)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        result = result + (x % 10)\n        return result\n    }\n\n    // Return the sum of the digits of the integer x.\n    // >>> sumDigits(12l)\n    // (3)\n    def sumDigits(x : Long) : Long = {\n        var result = 0l\n        for (i <- 0 until (x - 1)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        result = result + (x % 10)\n        return result\n    }\n\n    // Return the product of the digits of the integer x.\n    // >>> productDigits(12l)\n    // (2)\n    def productDigits(x : Long) : Long = {\n        var result = 1l\n        for (i <- 0 until (x - 1)) {\n            result = result * (x % 10)\n            x = x / 10\n        }\n        result = result * (x % 10)\n        return result\n    }\n\n    // Return the sum of the digits of the integer x.\n    // >>> sumDigits(12l)\n    // (3)\n    def sumDigits(x : Long) : Long = {\n        var result = 0l\n        for (i <- 0 until (x - 1)) {\n            result = result + (x % 10)\n            x = x / 10\n        }\n        result = result + (x % 10)\n        return result\n    }\n\n",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1) + String.valueOf(x % 10)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits2(x : Long) : String = {\n        return reverseDigits(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits3(x : Long) : String = {\n        return reverseDigits2(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits4(x : Long) : String = {\n        return reverseDigits3(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits5(x : Long) : String = {\n        return reverseDigits4(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits6(x : Long) : String = {\n        return reverseDigits5(x).toString()\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits7(x : Long) : String = {\n        return reverseDigits6(x",
    "        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        var digits = x.toString\n        var result = \"\"\n        var i = 0\n        while (i < shift) {\n            result = digits[i] + result\n            i = i + 1\n        }\n        result = digits[i] + result\n        return result",
    "        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result += digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result += digits[i]\n        }\n        return result",
    "        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        var digits = x.toString\n        var result = \"\"\n        var i = 0\n        while (i < shift) {\n            result = digits[i] + result\n            i = i + 1\n        }\n        for (i = shift; i < digits.length; i = i + 1) {\n            result = digits[i] + result\n        }\n        return result",
    "        if (shift > x.toString().length()) {\n            return x.toString().reverse()\n        }\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + x.toString().charAt(i)\n        }\n        for (i <- shift until x.toString().length()) {\n            result = result + x.toString().charAt(i)\n        }\n        return result\n    }\n\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift2(x : Long, shift : Long) : String = {\n        if (shift > x.toString().length()) {\n            return x.toString().reverse()\n        }\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + x.toString().charAt(i)\n        }\n        for (i <- shift until x.toString().length()) {\n            result = result + x.toString().charAt(i)\n        }\n        return result\n    }\n\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift3(x : Long, shift : Long) : String = {\n        if (shift > x.toString().length()) {\n            return x.toString().reverse()\n        }\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + x.toString().charAt(i)\n        }\n        for (i <- shift until x.toString().length()) {\n            result = result + x.toString().charAt(i)\n        }\n        return result\n    }\n\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift4(x : Long, shift : Long) : String = {\n        if (shift > x.toString().length()) {\n            return x.toString",
    "        val digits = x.toString().split(\"l\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = digits[i] + result\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return as a string.\n    // >>> reverseDigits(123)\n    // \"321\"\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = digits[i] + result\n        }\n        return result\n    }\n\n    // Convert the string s to a non-negative integer and return as a string.\n    // The string may contain letters and/or digits.\n    // >>> stringToInt(\"123\")\n    // \"123\"\n    // >>> stringToInt(\"abc\")\n    // \"0\"\n    // >>> stringToInt(\"1abc\")\n    // \"0\"\n    // >>> stringToInt(\"abc1\")\n    // \"0\"\n    // >>> stringToInt(\"abc1def\")\n    // \"0\"\n    // >>> stringToInt(\"abc1def12\")\n    // \"0\"\n    def stringToInt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            var c = s[i]\n            if (c >= '0' && c <= '9') {\n                result = c + result\n            } else {\n                break\n            }\n        }\n        if (result == \"\") {\n            result = \"0\"\n        }\n        return result\n    }\n\n    // Convert the non-negative integer x to a string and return as a string.\n    // The string may contain letters and/or digits.\n    // >>> intToString(123)\n    // \"123\"\n    // >>> intToString(0)\n    // \"0\"\n    // >>> intToString(-1)\n    // \"-1\"\n    def intToString(x : Long) : String = {\n        var result = \"\"\n        for (",
    "        if (shift > x.toString.length) return x.toString.reverse()\n        return x.toString.substring(shift) + x.toString.substring(0, shift)",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1) + x.toString()\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 1) + x.toString()\n    }\n\n    // Reverse the digits of the integer x, starting from the given index, and\n    // return the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, from : Long) : String = {\n        if (from > x) {\n            return reverseDigits(x)\n        } else {\n            return reverseDigits(x, from + 1) + x.toString()\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 1) + x.toString()\n    }\n\n    // Reverse the digits of the integer x, starting from the given index, and\n    // return the result as a string.\n    // >>> reverseDigits(12l, 2)\n    // (\"12\")\n    def reverseDigits(x : Long, from : Long) : String = {\n        if (from > x) {\n            return reverseDigits(x)\n        } else {\n            return reverseDigits(x, from + 1) + x.toString()\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x, 1) + x.toString()\n    }\n\n    // Reverse the digits of the integer x, starting from the given index, and\n    // return the result as a string.",
    "        val digits = x.toString().split(\"l\")\n        val result = \"\"\n        for (i <- 0 until (digits.length - shift)) {\n            result += digits[i + shift]\n        }\n        result",
    "        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        val digits = x.toString().split(\"l\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result += digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result += digits[i]\n        }\n        return result",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1) + x.toString()\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Convert the string s to a long integer and return the result.\n    // >>> stringToLong(\"1234\")\n    // 1234l\n    def stringToLong(s : String) : Long = {\n        return _.toLong(s)\n    }\n\n    // Convert the long integer x to a string and return the result.\n    // >>> longToString(1234l)\n    // \"1234\"\n    def longToString(x : Long) : String = {\n        return x.toString()\n    }\n\n    // Compute and return the circular shift of the string s by the integer shift.\n    // >>> circularShift(\"1234\", 1)\n    // \"4321\"\n    def circularShiftString(s : String, shift : Long) : String = {\n        return circularShift(stringToLong(s), shift)\n    }\n\n    // Compute and return the circular shift of the string s by the integer shift.\n    // >>> circularShift(\"1234\", -1)\n    // \"4321\"\n    def circularShiftStringReverse(s : String, shift : Long) : String = {\n        return circularShift(stringToLong(s), shift)\n    }\n\n    // Compute and return the circular shift of the string s by the integer shift.\n    // >>> circularShift(\"1234\", 2)\n    // \"2341\"\n    def circularShiftString2(s : String, shift : Long) : String = {\n        return circularShift(stringToLong(s), shift)\n    }\n\n    // Compute and return the circular shift of the string s by the integer shift.\n    // >>> circularShift(\"1234\", -2)\n    // \"2341\"\n    def circularShiftString2Reverse",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x < 0) {\n            return reverseDigits(-x)\n        } else {\n            return reverseDigits(x)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x < 0) {\n            return reverseDigits(-x)\n        } else {\n            return reverseDigits(x)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x < 0) {\n            return reverseDigits(-x)\n        } else {\n            return reverseDigits(x)\n        }\n    ",
    "        if (shift > x.toString().length()) {\n            return x.toString().reverse()\n        }\n        return x.toString().substring(shift.toString().length()) + x.toString().substring(0, shift.toString().length())",
    "        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits2(x : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits3(x : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits4(x : Long) : String = {\n        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(",
    "        val digits = x.toString.split(\"l\")\n        val result = digits[0] + circularShift(digits[1], shift)\n        return result",
    "        val xs = x.toString\n        val shiftStr = shift.toString\n        if (shiftStr.length > xs.length()) {\n            return xs.reverse.mkString(\"\")\n        } else {\n            return xs.slice(shiftStr.length, xs.length())\n        }",
    "        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var digits = x.toString.split(\"\")\n        var result = \"\"\n        for (i <- 0 until digits.length) {\n            result = result + digits[i]\n        }\n        return result\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"12\")\n    // 12\n    def stringToInt(s : String) : Long = {\n        var result = 0l\n        for (i <- 0 until s.length) {\n            result = result * 10 + s[i]\n        }\n        return result\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"12\")\n    // 12\n    def stringToInt2(s : String) : Long = {\n        var result = 0l\n        for (i <- 0 until s.length) {\n            result = result * 10 + s[i]\n        }\n        return result\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"12\")\n    // 12\n    def stringToInt3(s : String) : Long = {\n        var result = 0l\n        for (i <- 0 until s.length) {\n            result = result * 10 + s[i]\n        }\n        return result\n    }\n\n    // Convert a string of digits into an integer.\n    // >>> stringToInt(\"12\")\n    // 12\n    def stringToInt4(s : String) : Long = {\n        var result = 0l\n        for (i <- 0 until s.length) {\n            result = result * 10 + s[i]\n        }\n        return result\n    }\n\n",
    "        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        val digits = x.toString.split(\"l\")\n        val result = digits[0].concat(digits[1].substring(shift))\n        return result",
    "        val digits = x.toString.split(\"l\")\n        val result = digits[0].substring(0, shift) + digits[0].substring(shift)\n        val reversed = digits[0].substring(0, shift).reverse().mkString(\"l\")\n        return result + reversed",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        if (x == 0) {\n            return \"\"\n        } else {\n            return reverseDigits(x / 10) + (x % 10)\n        }\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftDigits(12l, 1l)\n    // (\"21\")\n    // >>> circularShiftDigits(12l, 2l)\n    // (\"12\")\n    def circularShiftDigits(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShiftDigits(x, shift)\n        }\n    }\n\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the",
    "        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until (digits.length - shift)) {\n            result = result + digits[i + shift]\n        }\n        result",
    "        val digits = x.toString().split(\"l\")\n        val result = digits[0] + circularShift(digits[1], shift)\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits((12l))\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = reverseDigits(digits[1]) + digits[0]\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits((12l))\n    // (\"21\")\n    def reverseDigits2(x : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = reverseDigits2(digits[1]) + digits[0]\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits((12l))\n    // (\"21\")\n    def reverseDigits3(x : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = reverseDigits3(digits[1]) + digits[0]\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits((12l))\n    // (\"21\")\n    def reverseDigits4(x : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = reverseDigits4(digits[1]) + digits[0]\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits((12l))\n    // (\"21\")\n    def reverseDigits5(x : Long) : String = {\n        val digits = x.toString().split(\"l\")\n        val result = reverseDigits5(digits[1]) + digits[0]\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result",
    "        val digits = x.toString.split(\"l\")\n        val result = digits[0] + circularShift(digits[1], shift)\n        return result",
    "        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result += digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result += digits[i]\n        }\n        return result",
    "        if (shift > x) {\n            return reverseDigits(x)\n        }\n        var result = \"\"\n        for (i <- 0 until x.toString().length) {\n            result = result + x.toString().charAt(i)\n            x = x - 1\n            if (x < 0) {\n                x = x + 10\n            }\n        }\n        return result\n    }\n\n    // Reverse digits of the integer x and return as a string.\n    // >>> reverseDigits(12)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        for (i <- 0 until x.toString().length) {\n            result = result + x.toString().charAt(i)\n        }\n        return result\n    }\n\n    // Convert the string s to a non-negative integer and return as a string.\n    // The string may contain an optional sign character '-' or '+'.\n    // If the string is not a valid integer, return \"0\".\n    // >>> stringToInt(\"-123\")\n    // (-123)\n    // >>> stringToInt(\"+123\")\n    // (123)\n    // >>> stringToInt(\"-123.5\")\n    // (0)\n    // >>> stringToInt(\"123.5\")\n    // (123)\n    def stringToInt(s : String) : String = {\n        if (s.startsWith(\"+\")) {\n            return s.substring(1)\n        }\n        if (s.startsWith(\"-\")) {\n            return \"-\" + s.substring(1)\n        }\n        return s\n    }\n\n    // Convert the string s to a non-negative integer and return as a string.\n    // If the string is not a valid integer, return \"0\".\n    // >>> stringToInt(\"-123\")\n    // (-123)\n    // >>> stringToInt(\"+123\")\n    // (123)\n    // >>> stringToInt(\"-123.5\")\n    // (0)\n    // >>> stringToInt(\"123.5\")\n    // (123)\n    def stringToInt2(s : String) : String = {\n        ",
    "        val digits = x.toString().split(\"l\")\n        val result = digits[0] + circularShift(digits[1], shift)\n        return result",
    "        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until (digits.length - shift)) {\n            result = result + digits[i]\n        }\n        result",
    "        val xs = x.toString\n        val shift_ = shift.toString\n        val shift_len = shift_.length\n        val xs_len = xs.length\n        val result = \"\"\n        for (i <- 0 until (xs_len - shift_len)) {\n            result = result + xs[(i + shift_len)]\n        }\n        result",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1) + x.toString()\n        }",
    "        if (shift > x.toString.length) return x.toString.reverse()\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + x.toString[i]\n        }\n        for (i <- shift until x.toString.length) {\n            result = result + x.toString[i]\n        }\n        return result",
    "        if (shift > x.toString.length) {\n            return x.toString.reverse()\n        }\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + x.toString[i]\n        }\n        for (i <- shift until x.toString.length) {\n            result = result + x.toString[i]\n        }\n        return result",
    "        var digits = x.toString\n        var shiftDigits = digits.substring(shift)\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + shiftDigits[i]\n        }\n        result",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1) + x.toString()\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, x.toString().length())\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits2(x : Long) : String = {\n        return reverseDigits(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits3(x : Long) : String = {\n        return reverseDigits2(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits4(x : Long) : String = {\n        return reverseDigits3(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits5(x : Long) : String = {\n        return reverseDigits4(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits6(x : Long) : String = {\n        return reverseDigits5(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits7(x : Long) : String = {\n        return reverseDigits6(x)\n    }\n\n    // Reverse the digits of the integer x and return the result as",
    "        var digits = x.toString\n        var result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = digits[i] + result\n        }\n        return result",
    "        val xs = x.toString\n        val shiftStr = shift.toString\n        val shiftDigits = shiftStr.split(\"l\")[0]\n        val shiftLen = shiftStr.length() - shiftDigits.length()\n        val shiftDigitsArray = shiftDigits.toCharArray\n        val shiftDigitsArrayLen = shiftDigitsArray.length\n        val shiftDigitsArrayLenMinusOne = shiftDigitsArrayLen - 1\n        val shiftDigitsArrayLenMinusTwo = shiftDigitsArrayLen - 2\n        val shiftDigitsArrayLenMinusThree = shiftDigitsArrayLen - 3\n        val shiftDigitsArrayLenMinusFour = shiftDigitsArrayLen - 4\n        val shiftDigitsArrayLenMinusFive = shiftDigitsArrayLen - 5\n        val shiftDigitsArrayLenMinusSix = shiftDigitsArrayLen - 6\n        val shiftDigitsArrayLenMinusSeven = shiftDigitsArrayLen - 7\n        val shiftDigitsArrayLenMinusEight = shiftDigitsArrayLen - 8\n        val shiftDigitsArrayLenMinusNine = shiftDigitsArrayLen - 9\n        val shiftDigitsArrayLenMinusTen = shiftDigitsArrayLen - 10\n        val shiftDigitsArrayLenMinusEleven = shiftDigitsArrayLen - 11\n        val shiftDigitsArrayLenMinusTwelve = shiftDigitsArrayLen - 12\n        val shiftDigitsArrayLenMinusThirteen = shiftDigitsArrayLen - 13\n        val shiftDigitsArrayLenMinusFourteen = shiftDigitsArrayLen - 14\n        val shiftDigitsArrayLenMinusFifteen = shiftDigitsArrayLen - 15\n        val shiftDigitsArrayLenMinusSixteen = shiftDigitsArrayLen - 16\n        val shiftDigitsArrayLenMinusSeventeen = shiftDigitsArrayLen - 17\n        val shiftDigitsArrayLenMinusEighteen = shiftDigitsArrayLen - 18\n        val shiftDigitsArrayLenMinusNineteen = shiftDigitsArrayLen - 19\n        val shiftDigitsArrayLenMinusTwenty = shiftDigitsArrayLen - 20\n        val shiftDigitsArrayLenMinusTwentyOne = shiftDigitsArrayLen - 21\n        val shiftDigitsArrayLenMinusTwentyTwo = shiftDigitsArrayLen",
    "        if (shift > x) {\n            return reverseDigits(x)\n        }\n        var result = \"\"\n        var i = 0\n        while (i < shift) {\n            result = result + x % 10\n            x /= 10\n            i += 1\n        }\n        result = result + x\n        return result\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        var result = \"\"\n        while (x > 0) {\n            result = result + x % 10\n            x /= 10\n        }\n        return result\n    }\n\n    // Compute the circular shift of the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftRight((12l), (1l))\n    // (\"21\")\n    // >>> circularShiftRight((12l), (2l))\n    // (\"12\")\n    def circularShiftRight(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        }\n        var result = \"\"\n        var i = 0\n        while (i < shift) {\n            result = result + x % 10\n            x /= 10\n            i += 1\n        }\n        result = result + x\n        return result\n    }\n\n    // Compute the circular shift of the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShiftLeft((12l), (1l))\n    // (\"21\")\n    // >>> circularShiftLeft((12l), (2l))\n    // (\"12\")\n    def circularShiftLeft(x : Long, shift : Long) : String = {\n        if (shift > x) {\n            return reverseDigits(x)\n        }\n        var result = \"\"\n        var i = 0\n        while (i < shift) {\n            result = result + x",
    "        val s = scala.math.BigInt(x)\n        val m = scala.math.BigInt(shift)\n        val n = scala.math.BigInt(10)\n        val r = scala.math.BigInt.pow(n, m.subtract(1))\n        val t = scala.math.BigInt.pow(n, m)\n        val y = s.multiply(r).divide(t)\n        y.toString",
    "        if (shift > x.toString.length) return x.toString.reverse()\n        else return circularShift(x.toString.substring(1), shift).concat(x.toString.substring(0, 1))",
    "        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result += digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result += digits[i]\n        }\n        return result",
    "        val digits = x.toString.split(\"l\")\n        val result = digits[0].concat(digits[1].substring(shift.toString.length()))\n        return result",
    "        val xs = x.toString\n        val shift_ = shift.toString\n        val shift_len = shift_.length\n        val x_len = xs.length\n        if (shift_len > x_len) {\n            return xs\n        }\n        val result = xs.substring(shift_len)\n        val result_len = result.length\n        if (result_len > 0) {\n            return result.substring(0, result_len)\n        } else {\n            return \"\"\n        }",
    "        val digits = x.toString().split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[(i + shift) % digits.length]\n        }\n        result",
    "        if (shift > x) {\n            return reverseDigits(x)\n        } else {\n            return circularShift(x, shift + 1)\n        }\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, 0)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, 0)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, 0)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, 0)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, 0)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, 0)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    // (\"21\")\n    def reverseDigits(x : Long) : String = {\n        return circularShift(x, 0)\n    }\n\n    // Reverse the digits of the integer x and return the result as a string.\n    // >>> reverseDigits(12l)\n    ",
    "        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result",
    "        val digits = x.toString().split(\"l\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result += digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result += digits[i]\n        }\n        return result",
    "        if (shift > x.toString().length()) {\n            return x.toString().reverse()\n        } else {\n            return x.toString().substring(shift.toString().length(), x.toString().length()) + x.toString().substring(0, shift.toString().length())\n        }",
    "        val digits = x.toString.split(\"l\")\n        val result = digits[0] + circularShift(digits[1], shift)\n        result",
    "        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result += digits[(i + shift) % digits.length]\n        }\n        result",
    "        val digits = x.toString.split(\"\")\n        val result = \"\"\n        for (i <- 0 until shift) {\n            result = result + digits[i]\n        }\n        for (i <- shift until digits.length) {\n            result = result + digits[i]\n        }\n        return result"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}