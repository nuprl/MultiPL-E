{
  "name": "HumanEval_117_select_words",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns a list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s : String, n : Long) : List[String] = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n    }\n\n}\n",
  "completions": [
    "        if (s.length() == 0) {\n            return List()\n        }\n        var words = List.empty()\n        var i = 0\n        while (i < s.length()) {\n            var j = i\n            while (j < s.length() && s.charAt(j) != ' ') {\n                j += 1\n            }\n            var word = s.substring(i, j)\n            if (word.length() == n) {\n                words = words.append(word)\n            }\n            i = j + 1\n        }\n        return words",
    "        if (s.length() == 0) {\n            return List[String]()\n        }\n        var words = List[String]()\n        for (var i = 0; i < s.length(); i++) {\n            var c = s.charAt(i)\n            if (c.isLetter()) {\n                words = words.append(s.substring(i, i + 1))\n            }\n        }\n        var result = List[String]()\n        for (var word : words) {\n            var count = 0\n            for (var c : word) {\n                if (c.isLetter()) {\n                    count += 1\n                }\n            }\n            if (count == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) {\n                continue\n            }\n            val count = mutable.List[String]()\n            for (j <- 0 until word.length()) {\n                val c = word.charAt(j)\n                if (c.isLetter()) {\n                    count = count.append(c)\n                }\n            }\n            if (count.length() == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        var words = List.empty[String]\n        var word = \"\"\n        var i = 0\n        while (i < s.length) {\n            if (s[i] == ' ') {\n                if (word.length() > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n            } else {\n                word = word + s[i]\n            }\n            i = i + 1\n        }\n        if (word.length() > 0) {\n            words = words.append(word)\n        }\n        words = words.filter(w -> w.length() == n)\n        return words",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List()\n        var word = \"\"\n        var count = 0\n        for (var i = 0; i < s.length(); i++) {\n            var c = s.charAt(i)\n            if (c.isLetter()) {\n                word += c\n                count += 1\n                if (count == n) {\n                    words += List(word)\n                    word = \"\"\n                    count = 0\n                }\n            } else if (c == ' ') {\n                if (count > 0) {\n                    words += List(word)\n                    word = \"\"\n                    count = 0\n                }\n            }\n        }\n        if (count > 0) {\n            words += List(word)\n        }\n        return words",
    "        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) {\n                continue\n            }\n            val count = countConsonants(word)\n            if (count == n) {\n                result.append(word)\n            }\n        }\n        return result\n    }\n\n    // Returns the number of consonants in the given word.\n    def countConsonants(word : String) : Long = {\n        val result = mutable.Long()\n        for (i <- 0 until word.length) {\n            if (isConsonant(word[i])) {\n                result += 1\n            }\n        }\n        return result\n    }\n\n    // Returns true if the given character is a consonant.\n    def isConsonant(c : String) : Boolean = {\n        return !(c == \"a\" || c == \"e\" || c == \"i\" || c == \"o\" || c == \"u\")",
    "        var words = mutable.List[String]()\n        var word = mutable.StringBuilder()\n        var count = mutable.Long()\n        var i = mutable.Int()\n        var j = mutable.Int()\n        var k = mutable.Int()\n        var l = mutable.Int()\n        var m = mutable.Int()\n        var nl = mutable.Int()\n        var nl1 = mutable.Int()\n        var nl2 = mutable.Int()\n        var nl3 = mutable.Int()\n        var nl4 = mutable.Int()\n        var nl5 = mutable.Int()\n        var nl6 = mutable.Int()\n        var nl7 = mutable.Int()\n        var nl8 = mutable.Int()\n        var nl9 = mutable.Int()\n        var nl10 = mutable.Int()\n        var nl11 = mutable.Int()\n        var nl12 = mutable.Int()\n        var nl13 = mutable.Int()\n        var nl14 = mutable.Int()\n        var nl15 = mutable.Int()\n        var nl16 = mutable.Int()\n        var nl17 = mutable.Int()\n        var nl18 = mutable.Int()\n        var nl19 = mutable.Int()\n        var nl20 = mutable.Int()\n        var nl21 = mutable.Int()\n        var nl22 = mutable.Int()\n        var nl23 = mutable.Int()\n        var nl24 = mutable.Int()\n        var nl25 = mutable.Int()\n        var nl26 = mutable.Int()\n        var nl27 = mutable.Int()\n        var nl28 = mutable.Int()\n        var nl29 = mutable.Int()\n        var nl30 = mutable.Int()\n        var nl31 = mutable.Int()\n        var nl32 = mutable.Int()\n        var nl33 = mutable.Int()\n        var nl34 = mutable.Int()\n        var nl35 = mutable.",
    "        if (s.length() == 0) {\n            return List[String]()\n        }\n        var words = List[String]()\n        var word = \"\"\n        var count = 0\n        var i = 0\n        while (i < s.length()) {\n            var c = s.charAt(i)\n            if (c == ' ') {\n                if (count == n) {\n                    words = words.append(word)\n                    word = \"\"\n                    count = 0\n                }\n                i++\n            } else {\n                if (count < n) {\n                    count++\n                    word = word + c\n                } else {\n                    i++\n                }\n            }\n        }\n        if (count == n) {\n            words = words.append(word)\n        }\n        return words",
    "        var words = s.split(\" \")\n        var result = mutable.List[String]()\n        for(var i = 0; i < words.length; i++) {\n            var word = words[i]\n            var count = 0\n            for(var j = 0; j < word.length(); j++) {\n                if(word.charAt(j) == ' ') {\n                    continue\n                }\n                count += 1\n                if(count == n) {\n                    result.append(word)\n                    break\n                }\n            }\n        }\n        return result",
    "        if (s.length() == 0) {\n            return List[String]()\n        }\n        var words = List[String]()\n        var word = \"\"\n        var i = 0\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n            } else {\n                word = word + s.charAt(i)\n            }\n            i = i + 1\n        }\n        if (word.length() > 0) {\n            words = words.append(word)\n        }\n        var result = List[String]()\n        for (var word : words) {\n            var count = 0\n            for (var c : word) {\n                if (c == ' ') {\n                    continue\n                }\n                count = count + 1\n            }\n            if (count == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        var words = List.empty()\n        var word = \"\"\n        var i = 0\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            ",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List.empty[String]\n        var word = \"\"\n        var i = 0\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n            } else {\n                word = word + s.charAt(i)\n            }\n            i = i + 1\n        }\n        if (word.length() > 0) {\n            words = words.append(word)\n        }\n        var result = List.empty[String]\n        for (var word : words) {\n            if (word.length() == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) {\n                continue\n            }\n            val count = mutable.List[String]()\n            for (j <- 0 until word.length()) {\n                val c = word.charAt(j)\n                if (c.isLetter()) {\n                    count = count.append(c)\n                }\n            }\n            if (count.length() == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        if (s.length() == 0) {\n            return List[String]()\n        }\n        var words = List[String]()\n        var word = \"\"\n        var i = 0\n        while (i < s.length()) {\n            var c = s.charAt(i)\n            if (c.isLetter()) {\n                word += c\n                i += 1\n            } else {\n                if (word.length() == n) {\n                    words += word\n                }\n                word = \"\"\n                i += 1\n            }\n        }\n        if (word.length() == n) {\n            words += word\n        }\n        return words",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        var words = s.split(\" \")\n        var cons = scala.collection.mutable.ListBuffer[String]()\n        for (i <- 0 until words.length) {\n            if (words[i].length() > n) {\n                continue\n            }\n            var consCount = 0\n            for (j <- 0 until words[i].length()) {\n                if (consCount == n) {\n                    cons.append(words[i].substring(j, words[i].length()))\n                    break\n                }\n                if (consCount < n && consCount + 1 < n && words[i].charAt(j) == ' ') {\n                    continue\n                }\n                if (consCount < n && consCount + 1 < n && words[i].charAt(j) != ' ') {\n                    consCount += 1\n                }\n            }\n        }\n        return cons.toList",
    "        var words = s.split(\" \")\n        var result = mutable.List[String]()\n        for (var i = 0; i < words.length; i++) {\n            var word = words[i]\n            var count = 0\n            for (var j = 0; j < word.length(); j++) {\n                if (word.charAt(j) == ' ') continue\n                count += 1\n                if (count == n) {\n                    result.append(word)\n                    break\n                }\n            }\n        }\n        return result",
    "        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) {\n                continue\n            }\n            val count = countConsonants(word)\n            if (count == n) {\n                result.append(word)\n            }\n        }\n        return result\n    }\n\n    // Counts the number of consonants in a string\n    def countConsonants(s : String) : Long = {\n        val result = 0l\n        for (i <- 0 until s.length) {\n            if (s[i].isLetter()) {\n                if (s[i].isUpperCase()) {\n                    result += 1\n                } else {\n                    result += 1\n                }\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List[String]()\n        }\n        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        var words = s.split(\" \")\n        var result = mutable.List[String]()\n        for (var i = 0; i < words.length; i++) {\n            var word = words[i]\n            var count = 0\n            for (var j = 0; j < word.length(); j++) {\n                if (word.charAt(j) == ' ') continue\n                count += 1\n                if (count == n) {\n                    result.append(word)\n                    break\n                }\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List.empty[String]\n        var word = \"\"\n        var i = 0\n        while (i < s.length) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n            } else {\n                word = word + s.charAt(i)\n            }\n            i = i + 1\n        }\n        if (word.length() > 0) {\n            words = words.append(word)\n        }\n        var result = List.empty[String]\n        for (var word : words) {\n            var count = 0\n            for (var c : word) {\n                if (c == ' ') {\n                    continue\n                }\n                count = count + 1\n            }\n            if (count == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        if (s.length() == 0) {\n            return List()\n        }\n        val words = mutable.ListBuffer[String]()\n        var i = 0\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            var j = i\n            while (j < s.length() && s.charAt(j) != ' ') {\n                j += 1\n            }\n            if (j - i == n) {\n                words.append(s.substring(i, j))\n            }\n            i = j\n        }\n        return words.toList()",
    "        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) {\n                continue\n            }\n            val count = countConsonants(word)\n            if (count == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            if (words[i].length() == n) {\n                result.append(words[i])\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List()\n        var word = \"\"\n        var i = 0\n        while (i < s.length) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n            } else {\n                word = word + s.charAt(i)\n            }\n            i = i + 1\n        }\n        if (word.length() > 0) {\n            words = words.append(word)\n        }\n        var result = List()\n        for (var word : words) {\n            var count = 0\n            for (var c : word) {\n                if (c == ' ') {\n                    continue\n                }\n                count = count + 1\n            }\n            if (count == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        val words = mutable.List[String]()\n        for (i <- 0 until s.length) {\n            val word = s.substring(i, i + n)\n            if (word.length() == n) {\n                words.append(word)\n            }\n        }\n        words",
    "        if (s.length() == 0) {\n            return List()\n        }\n        var words = List.empty()\n        var i = 0\n        while (i < s.length()) {\n            var j = i\n            while (j < s.length() && s.charAt(j) != ' ') {\n                j += 1\n            }\n            var word = s.substring(i, j)\n            if (word.length() == n) {\n                words = words.append(word)\n            }\n            i = j + 1\n        }\n        return words",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List.empty[String]\n        var i = 0\n        while (i < s.length) {\n            var j = i\n            while (j < s.length && s.charAt(j) != ' ') {\n                j += 1\n            }\n            var word = s.substring(i, j)\n            if (n == word.length()) {\n                words = words.append(word)\n            }\n            i = j + 1\n        }\n        return words",
    "        if (s.length() == 0) {\n            return List[String]()\n        }\n        var words = List[String]()\n        var word = \"\"\n        var i = 0\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n            } else {\n                word = word + s.charAt(i)\n            }\n            i = i + 1\n        }\n        if (word.length() > 0) {\n            words = words.append(word)\n        }\n        var result = List[String]()\n        for (var word : words) {\n            if (word.length() == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        val words = mutable.List[String]()\n        for (i <- 0 until s.length) {\n            val word = s.substring(i, i + 1)\n            if (word.length() == 1) {\n                words.append(word)\n            } else if (word.length() > 1) {\n                val count = countConsonants(word)\n                if (count == n) {\n                    words.append(word)\n                }\n            }\n        }\n        return words",
    "        if (s.isEmpty()) {\n            return List[String]()\n        }\n        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            if (words.length - i >= n) {\n                result.append(words[i])\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List.empty[String]\n        var i = 0\n        while (i < s.length) {\n            var j = i\n            while (j < s.length && s.charAt(j) != ' ') {\n                j += 1\n            }\n            var word = s.substring(i, j)\n            if (word.length() == n) {\n                words = words.append(word)\n            }\n            i = j + 1\n        }\n        return words",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List.empty[String]\n        var word = \"\"\n        var i = 0\n        while (i < s.length) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n            } else {\n                word = word + s.charAt(i)\n            }\n            i = i + 1\n        }\n        if (word.length() > 0) {\n            words = words.append(word)\n        }\n        var result = List.empty[String]\n        for (var word : words) {\n            if (word.length() == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) {\n                continue\n            }\n            val count = countConsonants(word)\n            if (count == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List[String]()\n        }\n        val words = s.split(\" \")\n        val result = List[String]()\n        for (i <- words.size()) {\n            if (words.size() - i < n) {\n                break\n            }\n            val word = words[i]\n            if (word.length() == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        if (s.length() == 0) {\n            return List[String]()\n        }\n        var words = List[String]()\n        var word = \"\"\n        var i = 0\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n            } else {\n                word = word + s.charAt(i)\n            }\n            i = i + 1\n        }\n        if (word.length() > 0) {\n            words = words.append(word)\n        }\n        var result = List[String]()\n        for (var word : words) {\n            var count = 0\n            for (var i = 0; i < word.length(); i++) {\n                if (word.charAt(i) == ' ') {\n                    count = count + 1\n                }\n            }\n            if (count == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = s.split(\" \")\n        var result = List()\n        for (var word : words) {\n            var count = 0\n            for (var c : word.toCharArray()) {\n                if (c.isLetter()) {\n                    count += 1\n                }\n            }\n            if (count == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) continue\n            val count = countConsonants(word)\n            if (count == n) result += word\n        }\n        return result\n    }\n\n    // Counts the number of consonants in a word\n    def countConsonants(word : String) : Long = {\n        val result = 0l\n        for (i <- 0 until word.length) {\n            if (isConsonant(word[i])) result += 1\n        }\n        return result\n    }\n\n    // Returns true if the character is a consonant\n    def isConsonant(c : String) : Boolean = {\n        return !(c.equals(\"a\") || c.equals(\"e\") || c.equals(\"i\") || c.equals(\"o\") || c.equals(\"u\"))",
    "        var result = List[String]()\n        var words = s.split(\" \")\n        for (var i = 0; i < words.length; i++) {\n            var word = words[i]\n            var count = 0\n            for (var j = 0; j < word.length(); j++) {\n                if (word.charAt(j) == ' ') {\n                    continue\n                }\n                count += 1\n            }\n            if (count == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        var words = s.split(\" \")\n        var result = List.empty()\n        for (var word : words) {\n            if (word.length() == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List[String]()\n        }\n        val words = mutable.List[String]()\n        val word = mutable.StringBuilder()\n        for (i <- 0 until s.length()) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words += word.toString()\n                    word = mutable.StringBuilder()\n                }\n            } else {\n                word.append(s.charAt(i))\n            }\n        }\n        if (word.length() > 0) {\n            words += word.toString()\n        }\n        words.foreach(w => {\n            if (w.length() == n) {\n                words.foreach(w2 => {\n                    if (w.equals(w2)) {\n                        words.remove(w2)\n                    }\n                })\n            }\n        })\n        return words",
    "        if (s.length() == 0) {\n            return List()\n        }\n        var words = s.split(\" \")\n        var result = List()\n        for (var word : words) {\n            if (word.length() == 0) {\n                continue\n            }\n            var count = 0\n            for (var c : word.toCharArray()) {\n                if (c == ' ') {\n                    continue\n                }\n                count += 1\n            }\n            if (count == n) {\n                result += word\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List.empty[String]\n        var word = \"\"\n        var i = 0\n        while (i < s.length) {\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (i == s.length) {\n                break\n            }\n            if (n == 0) {\n                break\n            }\n            if (n > 0) {\n                n -= 1\n                i += 1\n                continue\n            }\n            if (n < 0) {\n                n += 1\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n            if (s.charAt(i) == ' ') {\n                i += 1\n                continue\n            }\n",
    "        if (s.length() == 0) {\n            return List()\n        }\n        var words = List.empty[String]\n        var word = \"\"\n        var i = 0\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n            } else {\n                word = word + s.charAt(i)\n            }\n            i = i + 1\n        }\n        if (word.length() > 0) {\n            words = words.append(word)\n        }\n        var result = List.empty[String]\n        for (var word : words) {\n            if (word.length() == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) {\n                continue\n            }\n            val count = mutable.List[String]()\n            for (j <- 0 until word.length()) {\n                val c = word.charAt(j)\n                if (c.isLetter()) {\n                    count = count.append(c)\n                }\n            }\n            if (count.length() == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        var words = s.split(\" \")\n        var cons = new mutable.List[String]()\n        for (var word : words) {\n            if (word.length() == 0) {\n                continue\n            }\n            var consCount = 0l\n            for (var i = 0; i < word.length(); i++) {\n                if (word.charAt(i) == ' ') {\n                    continue\n                }\n                consCount += 1l\n                if (consCount == n) {\n                    cons.append(word.substring(0, i))\n                    break\n                }\n            }\n        }\n        return cons.toList()",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        val words = s.split(\" \")\n        val result = words.map(word -> word.split(\"\")).flatMap(List::toList).filter(word -> word.length() == n).toList\n        return result",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List.empty()\n        var word = \"\"\n        var wordIndex = 0\n        var wordCount = 0\n        var wordCountIndex = 0\n        var wordCountIndex2 = 0\n        var wordCountIndex3 = 0\n        var wordCountIndex4 = 0\n        var wordCountIndex5 = 0\n        var wordCountIndex6 = 0\n        var wordCountIndex7 = 0\n        var wordCountIndex8 = 0\n        var wordCountIndex9 = 0\n        var wordCountIndex10 = 0\n        var wordCountIndex11 = 0\n        var wordCountIndex12 = 0\n        var wordCountIndex13 = 0\n        var wordCountIndex14 = 0\n        var wordCountIndex15 = 0\n        var wordCountIndex16 = 0\n        var wordCountIndex17 = 0\n        var wordCountIndex18 = 0\n        var wordCountIndex19 = 0\n        var wordCountIndex20 = 0\n        var wordCountIndex21 = 0\n        var wordCountIndex22 = 0\n        var wordCountIndex23 = 0\n        var wordCountIndex24 = 0\n        var wordCountIndex25 = 0\n        var wordCountIndex26 = 0\n        var wordCountIndex27 = 0\n        var wordCountIndex28 = 0\n        var wordCountIndex29 = 0\n        var wordCountIndex30 = 0\n        var wordCountIndex31 = 0\n        var wordCountIndex32 = 0\n        var wordCountIndex33 = 0\n        var wordCountIndex34 = 0\n        var wordCountIndex35 = 0\n        var wordCountIndex36 = 0\n        var wordCountIndex37 = 0\n        var wordCountIndex38 = 0\n        var wordCountIndex39 = 0\n        var wordCountIndex40 = 0\n        var wordCountIndex41 = 0\n        var wordCountIndex42 = 0\n        var wordCountIndex43 = 0\n        var wordCountIndex44 = 0\n        var wordCountIndex45 = 0\n        var wordCountIndex46 = 0\n        var wordCountIndex47 = 0\n        var wordCountIndex48 = 0\n        var wordCountIndex49 = 0\n        var wordCountIndex50 = 0\n        var wordCountIndex51 = 0\n        var wordCountIndex52 =",
    "        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            val count = countConsonants(word)\n            if (count == n) {\n                result.append(word)\n            }\n        }\n        return result\n    }\n\n    // Counts the number of consonants in a word\n    def countConsonants(word : String) : Long = {\n        val result = 0l\n        for (i <- 0 until word.length) {\n            if (isConsonant(word[i])) {\n                result += 1l\n            }\n        }\n        return result\n    }\n\n    // Returns true if the character is a consonant\n    def isConsonant(c : String) : Boolean = {\n        return !(c == \"a\" || c == \"e\" || c == \"i\" || c == \"o\" || c == \"u\")",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List.empty[String]\n        var word = \"\"\n        var i = 0\n        while (i < s.length) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n            } else {\n                word = word + s.charAt(i)\n            }\n            i = i + 1\n        }\n        if (word.length() > 0) {\n            words = words.append(word)\n        }\n        var result = List.empty[String]\n        for (var word : words) {\n            if (word.length() == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = s.split(\" \")\n        var cons = scala.collection.mutable.ListBuffer[String]()\n        for (var word : words) {\n            var cnt = 0l\n            for (var c : word.toCharArray()) {\n                if (c == ' ') {\n                    continue\n                }\n                cnt += 1l\n                if (cnt == n) {\n                    cons.append(word)\n                }\n            }\n        }\n        return cons.toList",
    "        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) continue\n            val count = countConsonants(word)\n            if (count == n) result.append(word)\n        }\n        return result",
    "        if (s.length() == 0) {\n            return List()\n        }\n        var words = List.empty[String]\n        var word = \"\"\n        var count = 0\n        var i = 0\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                if (count == n) {\n                    words = words.append(word)\n                    word = \"\"\n                    count = 0\n                }\n                i += 1\n            } else {\n                word = word + s.charAt(i)\n                count += 1\n                i += 1\n            }\n        }\n        if (count == n) {\n            words = words.append(word)\n        }\n        return words",
    "        val words = mutable.List[String]()\n        for (i <- 0 until s.length) {\n            val word = s.substring(i, i + 1)\n            if (word.length == 1) {\n                words.append(word)\n            } else if (word.length == 2 && word.toLowerCase() == \" \") {\n                words.append(word)\n            } else if (word.length == 2 && word.toLowerCase() == \".\") {\n                words.append(word)\n            } else if (word.length == 2 && word.toLowerCase() == \",\") {\n                words.append(word)\n            } else if (word.length == 2 && word.toLowerCase() == \"!\") {\n                words.append(word)\n            } else if (word.length == 2 && word.toLowerCase() == \"?\") {\n                words.append(word)\n            } else if (word.length == 2 && word.toLowerCase() == \";\") {\n                words.append(word)\n            } else if (word.length == 2 && word.toLowerCase() == \":\") {\n                words.append(word)\n            } else if (word.length == 2 && word.toLowerCase() == \"\\\"\") {\n                words.append(word)\n            } else if (word.length == 2 && word.toLowerCase() == \"'\") {\n                words.append(word)\n            } else if (word.length == 2 && word.toLowerCase() == \"(\" || word.toLowerCase() == \")\") {\n                words.append(word)\n            } else if (word.length == 2 && word.toLowerCase() == \"{\" || word.toLowerCase() == \"}\") {\n                words.append(word)\n            } else if (word.length == 2 && word.toLowerCase() == \"[\" || word.toLowerCase() == \"]\") {\n                words.append(word)\n            } else if (word.length == 2 && word.toLowerCase() == \"{\" || word.toLowerCase() == \"}\") {\n                words.append(word)\n            } else if (word.length == 2",
    "        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) {\n                continue\n            }\n            val count = countConsonants(word)\n            if (count == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        var words = List.empty()\n        for (var i = 0; i < s.length(); i++) {\n            var c = s.charAt(i)\n            if (c.isLetter()) {\n                words = words.append(s.substring(i, i + 1))\n            }\n            if (words.length() == n) {\n                return words\n            }\n        }\n        return words",
    "        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) {\n                continue\n            }\n            val count = countConsonants(word)\n            if (count == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        val words = mutable.List[String]()\n        for (i <- 0 until s.length) {\n            val word = s.substring(i, i + 1)\n            if (word.length == 1 && word.toUpperCase() == word) {\n                words.append(word)\n            }\n        }\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.take(n)",
    "        if (s.length() == 0) {\n            return List[String]()\n        }\n        var words = List[String]()\n        var word = \"\"\n        var i = 0\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n            } else {\n                word = word + s.charAt(i)\n            }\n            i = i + 1\n        }\n        if (word.length() > 0) {\n            words = words.append(word)\n        }\n        var result = List[String]()\n        for (var word : words) {\n            var count = 0\n            for (var c : word) {\n                if (c == ' ') {\n                    count = count + 1\n                }\n            }\n            if (count == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        val words = mutable.List[String]()\n        val sb = mutable.StringBuilder()\n        for (i <- 0 until s.length) {\n            if (n.isZero()) {\n                break\n            }\n            if (s.charAt(i) == ' ') {\n                if (n.isZero()) {\n                    break\n                }\n                continue\n            }\n            sb.append(s.charAt(i))\n            if (n.isZero()) {\n                break\n            }\n            n -= 1\n        }\n        if (n.isZero()) {\n            words.append(sb.toString())\n        }\n        return words",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        val words = s.split(\" \")\n        val result = mutable.List.empty()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        val words = s.split(\" \")\n        val result = List.empty()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            val count = countConsonants(word)\n            if (count == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) {\n                continue\n            }\n            val count = countConsonants(word)\n            if (count == n) {\n                result.append(word)\n            }\n        }\n        return result\n    }\n\n    // Returns the number of consonants in the given word.\n    def countConsonants(word : String) : Long = {\n        val result = mutable.Long()\n        for (i <- 0 until word.length()) {\n            if (isConsonant(word[i])) {\n                result += 1\n            }\n        }\n        return result\n    }\n\n    // Returns true if the given character is a consonant.\n    def isConsonant(c : String) : Boolean = {\n        return !Character.isLetter(c)",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List()\n        var word = \"\"\n        var count = 0\n        var i = 0\n        while (i < s.length) {\n            if (s.charAt(i) == ' ') {\n                if (count == n) {\n                    words = words.append(word)\n                    word = \"\"\n                    count = 0\n                }\n                i += 1\n            } else {\n                word = word + s.charAt(i)\n                count += 1\n                i += 1\n            }\n        }\n        if (count == n) {\n            words = words.append(word)\n        }\n        return words",
    "        val words = mutable.List[String]()\n        for (i <- 0 until s.length) {\n            val word = s.substring(i, i + 1)\n            if (word.length() == 1 && word.toUpperCase() == word) {\n                words.append(word)\n            }\n        }\n        words.sort(Comparator.comparing(String::toUpperCase))\n        words.take(n)",
    "        if (s.isEmpty()) {\n            return List[String]()\n        }\n        var words = List[String]()\n        var word = \"\"\n        var count = 0\n        for (var i = 0; i < s.length(); i++) {\n            var c = s.charAt(i)\n            if (c.isLetter()) {\n                word += c\n                count += 1\n                if (count == n) {\n                    words += List[String](word)\n                    word = \"\"\n                    count = 0\n                }\n            } else if (c == ' ') {\n                if (count > 0) {\n                    words += List[String](word)\n                    word = \"\"\n                    count = 0\n                }\n            }\n        }\n        if (count > 0) {\n            words += List[String](word)\n        }\n        return words",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        val words = s.split(\" \")\n        val result = List.empty()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) {\n                continue\n            }\n            val count = countConsonants(word)\n            if (count == n) {\n                result = result.append(word)\n            }\n        }\n        return result\n    }\n\n    def countConsonants(s : String) : Long = {\n        val result = 0l\n        for (i <- 0 until s.length) {\n            if (isConsonant(s[i])) {\n                result += 1\n            }\n        }\n        return result\n    }\n\n    def isConsonant(c : String) : Boolean = {\n        return c.isLetter() && !c.isSpace()",
    "        if (s.length() == 0) {\n            return List[String]()\n        }\n        var words = List[String]()\n        var word = \"\"\n        var i = 0\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n            } else {\n                word = word + s.charAt(i)\n            }\n            i = i + 1\n        }\n        if (word.length() > 0) {\n            words = words.append(word)\n        }\n        var result = List[String]()\n        for (var word : words) {\n            var count = 0\n            for (var c : word) {\n                if (c == ' ') {\n                    count = count + 1\n                }\n            }\n            if (count == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        if (s.length() == 0) {\n            return List[String]()\n        }\n        val words = mutable.List[String]()\n        for (i <- 0 until s.length()) {\n            if (s.charAt(i).isLetter()) {\n                words.append(s.substring(i, i + 1))\n            }\n        }\n        for (i <- 0 until words.length()) {\n            if (words.length() - i >= n) {\n                words.remove(i)\n            }\n        }\n        return words",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            if (words[i].length() == n) {\n                result.append(words[i])\n            }\n        }\n        return result",
    "        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) continue\n            val count = countConsonants(word)\n            if (count == n) result += word\n        }\n        return result",
    "        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) {\n                continue\n            }\n            val count = countConsonants(word)\n            if (count == n) {\n                result.append(word)\n            }\n        }\n        return result\n    }\n\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns a list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords2(s : String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) {\n                continue\n            }\n            val count = countConsonants(word)\n            if (count == n) {\n                result.append(word)\n            }\n        }\n        return result\n    }\n\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns a list of all words from string s that contain exactly \n    //",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        val words = s.split(\" \")\n        val result = List()\n        for (i <- 0 until words.length) {\n            if (words[i].length() == n) {\n                result.append(words[i])\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List.empty()\n        } else {\n            var words = List.empty()\n            var word = \"\"\n            var count = 0\n            var i = 0\n            while (i < s.length()) {\n                if (s.charAt(i) == ' ') {\n                    if (count == n) {\n                        words = words.append(word)\n                        word = \"\"\n                        count = 0\n                    }\n                } else {\n                    count += 1\n                    word += s.charAt(i)\n                }\n                i += 1\n            }\n            if (count == n) {\n                words = words.append(word)\n            }\n            return words\n        }",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        var words = s.split(\" \")\n        var result = List.empty()\n        for (var word : words) {\n            if (word.length() == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        if (s.length() == 0) {\n            return List()\n        }\n        var words = List()\n        var word = \"\"\n        var i = 0\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n            } else {\n                word = word + s.charAt(i)\n            }\n            i = i + 1\n        }\n        if (word.length() > 0) {\n            words = words.append(word)\n        }\n        var result = List()\n        for (var word : words) {\n            var count = 0\n            for (var i = 0; i < word.length(); i++) {\n                if (word.charAt(i) == ' ') {\n                    count = count + 1\n                }\n            }\n            if (count == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        var words = s.split(\" \")\n        var result = List[String]()\n        for (var i = 0; i < words.length; i++) {\n            var word = words[i]\n            var count = 0\n            for (var j = 0; j < word.length(); j++) {\n                if (word.charAt(j) == ' ') continue\n                count += 1\n                if (count == n) {\n                    result = result.append(word)\n                    break\n                }\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        val words = s.split(\" \")\n        val result = List.empty()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            val count = countConsonants(word)\n            if (count == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        var words = s.split(\" \")\n        var result = mutable.List[String]()\n        for (var i = 0; i < words.length; i++) {\n            var word = words[i]\n            var count = 0\n            for (var j = 0; j < word.length(); j++) {\n                if (word.charAt(j) == ' ') continue\n                count += 1\n                if (count == n) {\n                    result.append(word)\n                    break\n                }\n            }\n        }\n        return result",
    "        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) {\n                continue\n            }\n            val count = countConsonants(word)\n            if (count == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        val words = mutable.ListBuffer[String]()\n        val word = mutable.StringBuffer()\n        for (i <- 0 until s.length) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() == n) {\n                    words.append(word.toString())\n                }\n                word.clear()\n            } else {\n                word.append(s.charAt(i))\n            }\n        }\n        if (word.length() == n) {\n            words.append(word.toString())\n        }\n        return words.toList",
    "        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) {\n                continue\n            }\n            val count = countConsonants(word)\n            if (count == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        if (s.length() == 0) {\n            return List()\n        }\n        val words = mutable.ListBuffer[String]()\n        val word = mutable.StringBuffer()\n        var i = 0\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words.append(word.toString())\n                    word.clear()\n                }\n                i += 1\n            } else {\n                word.append(s.charAt(i))\n                i += 1\n            }\n        }\n        if (word.length() > 0) {\n            words.append(word.toString())\n        }\n        val result = mutable.List[String]()\n        for (i <- words.toList.map(s => s.split(\" \")).toList) {\n            if (i.length() == n) {\n                result.append(i.head)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        if (s.length() == 0) {\n            return List[String]()\n        }\n        val words = s.split(\" \")\n        val result = List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) {\n                continue\n            }\n            val count = countConsonants(word)\n            if (count == n) {\n                result = result.append(word)\n            }\n        }\n        return result\n    }\n\n    // Returns the number of consonants in the given word.\n    def countConsonants(word : String) : Long = {\n        val result = 0l\n        for (i <- 0 until word.length) {\n            if (isConsonant(word[i])) {\n                result += 1\n            }\n        }\n        return result\n    }\n\n    // Returns true if the given character is a consonant.\n    def isConsonant(c : String) : Boolean = {\n        return !(c.equals(\"a\") || c.equals(\"e\") || c.equals(\"i\") || c.equals(\"o\") || c.equals(\"u\"))",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List.empty[String]\n        var i = 0\n        while (i < s.length) {\n            var j = i\n            while (j < s.length && s.charAt(j) != ' ') {\n                j += 1\n            }\n            var word = s.substring(i, j)\n            if (n == word.length()) {\n                words = words.append(word)\n            }\n            i = j + 1\n        }\n        return words",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            if (words[i].length() == n) {\n                result.append(words[i])\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List.empty[String]\n        var word = \"\"\n        var wordIndex = 0\n        var wordLength = 0\n        var wordCount = 0\n        var wordCountIndex = 0\n        var wordCountLength = 0\n        var wordCountLengthIndex = 0\n        var wordCountLengthIndex2 = 0\n        var wordCountLengthIndex3 = 0\n        var wordCountLengthIndex4 = 0\n        var wordCountLengthIndex5 = 0\n        var wordCountLengthIndex6 = 0\n        var wordCountLengthIndex7 = 0\n        var wordCountLengthIndex8 = 0\n        var wordCountLengthIndex9 = 0\n        var wordCountLengthIndex10 = 0\n        var wordCountLengthIndex11 = 0\n        var wordCountLengthIndex12 = 0\n        var wordCountLengthIndex13 = 0\n        var wordCountLengthIndex14 = 0\n        var wordCountLengthIndex15 = 0\n        var wordCountLengthIndex16 = 0\n        var wordCountLengthIndex17 = 0\n        var wordCountLengthIndex18 = 0\n        var wordCountLengthIndex19 = 0\n        var wordCountLengthIndex20 = 0\n        var wordCountLengthIndex21 = 0\n        var wordCountLengthIndex22 = 0\n        var wordCountLengthIndex23 = 0\n        var wordCountLengthIndex24 = 0\n        var wordCountLengthIndex25 = 0\n        var wordCountLengthIndex26 = 0\n        var wordCountLengthIndex27 = 0\n        var wordCountLengthIndex28 = 0\n        var wordCountLengthIndex29 = 0\n        var wordCountLengthIndex30 = 0\n        var wordCountLengthIndex31 = 0\n        var wordCountLengthIndex32 = 0\n        var wordCountLengthIndex33 = 0\n        var wordCountLengthIndex34 = 0\n        var wordCountLengthIndex35 = 0\n        var wordCountLengthIndex36 = 0\n        var wordCountLengthIndex37 = 0\n        var wordCountLengthIndex38 = 0\n        var wordCountLengthIndex39 = 0\n        var wordCountLengthIndex40 = 0\n        var wordCountLengthIndex41 = 0\n        var wordCountLengthIndex42 = 0\n        var wordCountLengthIndex43 = 0\n        var wordCountLengthIndex44 = 0\n        ",
    "        var words = s.split(\" \")\n        var result = mutable.List[String]()\n        for(var i = 0; i < words.length; i++) {\n            var word = words[i]\n            var count = 0\n            for(var j = 0; j < word.length(); j++) {\n                if(word.charAt(j) == ' ') continue\n                count += 1\n                if(count == n) {\n                    result.append(word)\n                    break\n                }\n            }\n        }\n        return result",
    "        var words = s.split(\" \")\n        var result = mutable.List[String]()\n        for (var i = 0; i < words.length; i++) {\n            var word = words[i]\n            var count = 0\n            for (var j = 0; j < word.length(); j++) {\n                if (word.charAt(j) == ' ') {\n                    continue\n                }\n                count += 1\n            }\n            if (count == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List[String]()\n        }\n        var words = List[String]()\n        var word = \"\"\n        var i = 0\n        var j = 0\n        var k = 0\n        var count = 0\n        while (i < s.length) {\n            if (s[i] == ' ') {\n                if (count == n) {\n                    words = words.append(word)\n                    word = \"\"\n                    count = 0\n                }\n                i += 1\n                continue\n            }\n            if (s[i] == '\\n') {\n                i += 1\n                continue\n            }\n            if (s[i] == '\\r') {\n                i += 1\n                continue\n            }\n            if (s[i] == '\\t') {\n                i += 1\n                continue\n            }\n            if (s[i] == '\\b') {\n                i += 1\n                continue\n            }\n            if (s[i] == '\\f') {\n                i += 1\n                continue\n            }\n            if (s[i] == '\\u00A0') {\n                i += 1\n                continue\n            }\n            if (s[i] == '\\u3000') {\n                i += 1\n                continue\n            }\n            if (s[i] == '\\u0085') {\n                i += 1\n                continue\n            }\n            if (s[i] == '\\u2028') {\n                i += 1\n                continue\n            }\n            if (s[i] == '\\u2029') {\n                i += 1\n                continue\n            }\n            if (s[i] == '\\u0009') {\n                i += 1\n                continue\n            }\n            if (s[i] == '\\u000A') {\n                i += 1\n                continue\n            }\n            if (s[i] == '\\u000B') {\n                i += 1\n                continue\n            }\n            if (s[i] == '\\u000C') {\n                i += 1\n                continue\n            }\n            if (s[i] == '\\u000D') {\n",
    "        if (s.length() == 0) {\n            return List.empty()\n        }\n        val words = mutable.List[String]()\n        val words2 = mutable.List[String]()\n        val words3 = mutable.List[String]()\n        val words4 = mutable.List[String]()\n        val words5 = mutable.List[String]()\n        val words6 = mutable.List[String]()\n        val words7 = mutable.List[String]()\n        val words8 = mutable.List[String]()\n        val words9 = mutable.List[String]()\n        val words10 = mutable.List[String]()\n        val words11 = mutable.List[String]()\n        val words12 = mutable.List[String]()\n        val words13 = mutable.List[String]()\n        val words14 = mutable.List[String]()\n        val words15 = mutable.List[String]()\n        val words16 = mutable.List[String]()\n        val words17 = mutable.List[String]()\n        val words18 = mutable.List[String]()\n        val words19 = mutable.List[String]()\n        val words20 = mutable.List[String]()\n        val words21 = mutable.List[String]()\n        val words22 = mutable.List[String]()\n        val words23 = mutable.List[String]()\n        val words24 = mutable.List[String]()\n        val words25 = mutable.List[String]()\n        val words26 = mutable.List[String]()\n        val words27 = mutable.List[String]()\n        val words28 = mutable.List[String]()\n        val words29 = mutable.List[String]()\n        val words30 = mutable.List[String]()\n        val words31 = mutable.List[String]()\n        val words32 = mutable.List[String]()\n        val words33 = mutable.List[String]()\n        val words34 = mutable.List[String]()\n        val words35 = mutable.List[String]()\n        ",
    "        val words = mutable.List[String]()\n        for (i <- 0 until s.length) {\n            if (s.charAt(i) == ' ') {\n                if (words.length() == n) {\n                    words.append(s.substring(i + 1, s.length))\n                }\n            } else {\n                words.append(s.substring(i, i + 1))\n            }\n        }\n        return words",
    "        if (s.isEmpty()) {\n            return List[String]()\n        }\n        var words = List[String]()\n        var word = \"\"\n        var wordCount = 0\n        var wordIndex = 0\n        var wordIndexEnd = 0\n        var wordIndexStart = 0\n        var wordLength = 0\n        var wordLengthEnd = 0\n        var wordLengthStart = 0\n        var wordStart = 0\n        var wordStartEnd = 0\n        var wordStartStart = 0\n        var wordStartStartEnd = 0\n        var wordStartStartEndEnd = 0\n        var wordStartStartEndEnd = 0\n        var wordStartStartEndEndEnd = 0\n        var wordStartStartEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n        var wordStartStartEndEndEndEnd = 0\n",
    "        if (s.length() == 0) {\n            return List[String]()\n        }\n        var words = List[String]()\n        var word = \"\"\n        var consonants = 0l\n        var i = 0\n        while (i < s.length()) {\n            if (consonants < n) {\n                if (s.charAt(i) == ' ') {\n                    if (word.length() > 0) {\n                        words = words.append(word)\n                        word = \"\"\n                    }\n                } else {\n                    word = word + s.charAt(i)\n                    consonants = consonants + 1l\n                }\n            } else {\n                if (word.length() > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n            }\n            i = i + 1\n        }\n        if (word.length() > 0) {\n            words = words.append(word)\n        }\n        return words",
    "        val words = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List[String]()\n        val words_ = mutable.List",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        val words = s.split(\" \")\n        val result = List.empty()\n        for (i <- 0 until words.length) {\n            if (words[i].length() == n) {\n                result = result.append(words[i])\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        var words = List.empty()\n        var word = \"\"\n        var i = 0\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n            } else {\n                word = word + s.charAt(i)\n            }\n            i = i + 1\n        }\n        if (word.length() > 0) {\n            words = words.append(word)\n        }\n        var result = List.empty()\n        for (var word : words) {\n            var count = 0\n            for (var c : word.toCharArray()) {\n                if (c == ' ') {\n                    continue\n                }\n                count = count + 1\n            }\n            if (count == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List.empty[String]\n        var word = \"\"\n        var index = 0\n        var i = 0\n        while (i < s.length) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n            } else {\n                word = word + s.charAt(i)\n            }\n            i = i + 1\n        }\n        if (word.length() > 0) {\n            words = words.append(word)\n        }\n        var result = List.empty[String]\n        for (var word : words) {\n            if (word.length() == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        var words = s.split(\" \")\n        var result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            if (words[i].length() == n) {\n                result.append(words[i])\n            }\n        }\n        return result",
    "        var words = s.split(\" \")\n        var result = mutable.List[String]()\n        for (var i = 0; i < words.length; i++) {\n            var word = words[i]\n            var count = 0\n            for (var j = 0; j < word.length(); j++) {\n                if (word.charAt(j) == ' ') continue\n                count += 1\n                if (count == n) {\n                    result.append(word)\n                    break\n                }\n            }\n        }\n        return result",
    "        val words = mutable.List[String]()\n        val word = mutable.StringBuilder()\n        for (i <- 0 until s.length) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words += word.toString()\n                    word = mutable.StringBuilder()\n                }\n            } else {\n                word += s.charAt(i)\n            }\n        }\n        if (word.length() > 0) {\n            words += word.toString()\n        }\n        words.filter(w -> w.length() == n)",
    "        if (s.isEmpty()) {\n            return List[String]()\n        }\n        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            if (words[i].length() == n) {\n                result.append(words[i])\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        var words = s.split(\" \")\n        var result = List.empty()\n        for (var word : words) {\n            if (word.length() == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) {\n                continue\n            }\n            val count = mutable.List[String]()\n            for (j <- 0 until word.length()) {\n                val c = word.charAt(j)\n                if (c.isLetter()) {\n                    count.append(c)\n                }\n            }\n            if (count.length() == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        if (s.length() == 0) {\n            return List[String]()\n        }\n        var words = List[String]()\n        var word = \"\"\n        var count = 0\n        var i = 0\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                if (count == n) {\n                    words = words.append(word)\n                    word = \"\"\n                    count = 0\n                }\n                i = i + 1\n            } else {\n                if (count < n) {\n                    count = count + 1\n                    word = word + s.charAt(i)\n                } else {\n                    i = i + 1\n                }\n            }\n        }\n        if (count == n) {\n            words = words.append(word)\n        }\n        return words",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List.empty[String]\n        var i = 0\n        while (i < s.length()) {\n            var j = i\n            while (j < s.length() && n > 0) {\n                if (s.charAt(j) == ' ') {\n                    j += 1\n                } else {\n                    n -= 1\n                }\n            }\n            if (n == 0) {\n                words = words.append(s.substring(i, j))\n            }\n            i = j\n        }\n        return words",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List.empty[String]\n        var word = \"\"\n        var i = 0\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n            } else {\n                word = word + s.charAt(i)\n            }\n            i = i + 1\n        }\n        if (word.length() > 0) {\n            words = words.append(word)\n        }\n        var result = List.empty[String]\n        for (var word : words) {\n            if (word.length() == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            if (words[i].length() == n) {\n                result.append(words[i])\n            }\n        }\n        return result",
    "        if (s.length() == 0) {\n            return List()\n        }\n        var words = List()\n        var consonants = List()\n        var consonantCount = 0l\n        var word = \"\"\n        var i = 0\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                if (consonantCount == n) {\n                    words.append(word)\n                }\n                word = \"\"\n                consonantCount = 0l\n            } else {\n                if (consonantCount < n) {\n                    consonants.append(s.charAt(i))\n                    consonantCount += 1l\n                } else {\n                    word += s.charAt(i)\n                }\n            }\n            i += 1\n        }\n        if (consonantCount == n) {\n            words.append(word)\n        }\n        return words",
    "        val words = mutable.List[String]()\n        if (s.isEmpty()) {\n            return words\n        }\n        val word = mutable.StringBuilder()\n        var count = 0\n        for (i <- 0 until s.length) {\n            if (s.charAt(i) == ' ') {\n                if (count == n) {\n                    words.append(word.toString())\n                    count = 0\n                    word.clear()\n                }\n            } else {\n                word.append(s.charAt(i))\n                count += 1\n            }\n        }\n        if (count == n) {\n            words.append(word.toString())\n        }\n        return words",
    "        var words = s.split(\" \")\n        var result = List[String]()\n        for(var i = 0; i < words.length; i++) {\n            var word = words[i]\n            var count = 0\n            for(var j = 0; j < word.length(); j++) {\n                if(word.charAt(j) == ' ') {\n                    continue\n                }\n                count += 1\n            }\n            if(count == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List[String]()\n        }\n        val words = s.split(\" \")\n        val result = List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List[String]()\n        }\n        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        if (s.length() == 0) {\n            return List()\n        }\n        val words = mutable.ListBuffer[String]()\n        val word = mutable.StringBuffer()\n        var i = 0\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words.append(word.toString())\n                    word.clear()\n                }\n            } else {\n                word.append(s.charAt(i))\n            }\n            i = i + 1\n        }\n        if (word.length() > 0) {\n            words.append(word.toString())\n        }\n        words.foreach(x => {\n            if (x.length() == n) {\n                return\n            }\n            val vowels = mutable.ListBuffer[String]()\n            for (i = 0; i < x.length(); i++) {\n                if (x.charAt(i) == 'a' || x.charAt(i) == 'e' || x.charAt(i) == 'i' || x.charAt(i) == 'o' || x.charAt(i) == 'u') {\n                    vowels.append(x.charAt(i))\n                }\n            }\n            if (vowels.length() == n) {\n                words.append(x)\n            }\n        })\n        return words.toList()",
    "        if (s.length() == 0) {\n            return List()\n        }\n        val words = mutable.ListBuffer[String]()\n        var i = 0\n        while (i < s.length()) {\n            var j = i\n            while (j < s.length() && s.charAt(j) != ' ') {\n                j += 1\n            }\n            val word = s.substring(i, j)\n            if (word.length() == n) {\n                words.append(word)\n            }\n            i = j + 1\n        }\n        return words.toList()",
    "        if (s.isEmpty()) {\n            return List.empty()\n        } else {\n            var words = List.empty()\n            for (var i = 0; i < s.length(); i++) {\n                var c = s.charAt(i)\n                if (c.isLetter()) {\n                    words = words.append(s.substring(i, i + 1))\n                }\n                if (words.length() == n) {\n                    return words\n                }\n            }\n            return words\n        }",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List.empty[String]\n        var i = 0\n        while (i < s.length) {\n            var c = s.charAt(i)\n            if (c.isLetter()) {\n                var j = i + 1\n                while (j < s.length && s.charAt(j).isLetter()) {\n                    j += 1\n                }\n                words = words.append(s.substring(i, j))\n                i = j\n            } else {\n                i += 1\n            }\n        }\n        var result = List.empty[String]\n        for (var word : words) {\n            if (word.length() == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        val words = s.split(\" \")\n        val result = List()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == n) {\n                result += word\n            }\n        }\n        return result",
    "        var words = s.split(\" \")\n        var result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            var word = words[i]\n            if (word.length == 0) {\n                continue\n            }\n            var count = 0\n            for (j <- 0 until word.length) {\n                if (word[j].isLetter()) {\n                    count += 1\n                }\n            }\n            if (count == n) {\n                result += word\n            }\n        }\n        return result",
    "        if (s.length() == 0) {\n            return List[String]()\n        }\n        var words = List[String]()\n        var word = \"\"\n        var i = 0\n        while (i < s.length()) {\n            var c = s.charAt(i)\n            if (c == ' ') {\n                if (word.length() > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n            } else {\n                word = word + c\n            }\n            i = i + 1\n        }\n        if (word.length() > 0) {\n            words = words.append(word)\n        }\n        var result = List[String]()\n        for (var word : words) {\n            var count = 0\n            for (var c : word) {\n                if (c == ' ') {\n                    count = count + 1\n                }\n            }\n            if (count == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        val words = s.split(\" \")\n        val result = mutable.List.empty()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) {\n                continue\n            }\n            val count = countConsonants(word)\n            if (count == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        var words = s.split(\" \")\n        var result = mutable.List[String]()\n        for (var i = 0; i < words.length; i++) {\n            if (words[i].length() == 0) continue\n            var count = 0\n            for (var j = 0; j < words[i].length(); j++) {\n                if (words[i].charAt(j) == ' ') continue\n                count += 1\n            }\n            if (count == n) result.append(words[i])\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        val words = mutable.ListBuffer[String]()\n        val word = mutable.StringBuffer()\n        var count = 0\n        for (i <- 0 until s.length) {\n            if (count == n) {\n                words.add(word.toString())\n                count = 0\n                word.clear()\n            }\n            if (s.charAt(i) == ' ') {\n                count += 1\n            } else {\n                count += 1\n                word.append(s.charAt(i))\n            }\n        }\n        if (count == n) {\n            words.add(word.toString())\n        }\n        return words.toList()",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List.empty[String]\n        var word = \"\"\n        var i = 0\n        while (i < s.length) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n            } else {\n                word = word + s.charAt(i)\n            }\n            i = i + 1\n        }\n        if (word.length() > 0) {\n            words = words.append(word)\n        }\n        var result = List.empty[String]\n        for (var word : words) {\n            if (word.length() == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        if (s.length() == 0) {\n            return List[String]()\n        }\n        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            if (words[i].length() == 0) {\n                continue\n            }\n            val count = mutable.List[String]()\n            for (j <- 0 until words[i].length()) {\n                if (words[i][j].isLetter()) {\n                    count.append(words[i][j])\n                }\n            }\n            if (count.length() == n) {\n                result.append(words[i])\n            }\n        }\n        return result",
    "        if (s.length() == 0) {\n            return List[String]()\n        }\n        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) {\n                continue\n            }\n            val count = countConsonants(word)\n            if (count == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        val words = mutable.List[String]()\n        if (s.isEmpty()) {\n            return words\n        }\n        val word = mutable.StringBuilder()\n        var count = 0\n        for (i <- 0 until s.length) {\n            if (s.charAt(i) == ' ') {\n                if (count == n) {\n                    words.append(word.toString())\n                    count = 0\n                    word = mutable.StringBuilder()\n                }\n            } else {\n                count += 1\n                word.append(s.charAt(i))\n            }\n        }\n        if (count == n) {\n            words.append(word.toString())\n        }\n        return words",
    "        val words = mutable.List[String]()\n        for (i <- 0 until s.length) {\n            val word = s.substring(i, i + n)\n            if (word.length() == n) {\n                words.append(word)\n            }\n        }\n        words",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        val words = s.split(\" \")\n        val result = mutable.List.empty()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            val count = countConsonants(word)\n            if (count == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        var words = mutable.List[String]()\n        var i = 0\n        var j = 0\n        var word = \"\"\n        while (i < s.length) {\n            if (s[i] == ' ') {\n                if (j - i + 1 == n) {\n                    words.append(word)\n                    word = \"\"\n                }\n                i += 1\n            } else {\n                word += s[i]\n                i += 1\n            }\n        }\n        if (j - i + 1 == n) {\n            words.append(word)\n        }\n        return words",
    "        if (s.length() == 0) {\n            return List[String]()\n        }\n        var words = List[String]()\n        var word = \"\"\n        var consonants = 0l\n        var i = 0l\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                if (consonants == n) {\n                    words = words.append(word)\n                }\n                word = \"\"\n                consonants = 0l\n            } else {\n                consonants += 1l\n                word += s.charAt(i)\n            }\n            i += 1l\n        }\n        if (consonants == n) {\n            words = words.append(word)\n        }\n        return words",
    "        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) continue\n            val count = countConsonants(word)\n            if (count == n) result += word\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List[String]()\n        }\n        val words = List[String]()\n        val word = \"\"\n        for (i <- 0 until s.length) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() == n) {\n                    words.append(word)\n                }\n                word = \"\"\n            } else {\n                word += s.charAt(i)\n            }\n        }\n        if (word.length() == n) {\n            words.append(word)\n        }\n        return words",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List.empty[String]\n        var word = \"\"\n        var i = 0\n        while (i < s.length()) {\n            var c = s.charAt(i)\n            if (c.isLetter()) {\n                word += c\n                i += 1\n            } else {\n                if (word.length() == n) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n                i += 1\n            }\n        }\n        if (word.length() == n) {\n            words = words.append(word)\n        }\n        return words",
    "        val words = mutable.List[String]()\n        if (s.isEmpty()) {\n            return words\n        }\n        val word = mutable.StringBuilder()\n        for (i <- 0 until s.length) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() == n) {\n                    words.append(word.toString())\n                    word.clear()\n                }\n            } else {\n                word.append(s.charAt(i))\n            }\n        }\n        if (word.length() == n) {\n            words.append(word.toString())\n        }\n        return words",
    "        var words = List.empty[String]\n        for (var i = 0; i < s.length(); i++) {\n            var c = s.charAt(i)\n            if (c.isLetter()) {\n                words = words.append(s.substring(i, i + 1))\n            }\n            if (words.length() == n) {\n                break\n            }\n        }\n        return words",
    "        var result = mutable.List[String]()\n        var count = 0\n        var index = 0\n        while (index < s.length) {\n            var c = s.charAt(index)\n            if (c == ' ') {\n                index += 1\n                continue\n            }\n            if (count == n) {\n                result.append(s.substring(index, index + 1))\n                index += 1\n                count = 0\n                continue\n            }\n            count += 1\n            index += 1\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        var words = s.split(\" \")\n        var result = List.empty()\n        for (var word : words) {\n            if (word.length() == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        var words = s.split(\" \")\n        var result = mutable.List[String]()\n        for (var i = 0; i < words.length; i++) {\n            var word = words[i]\n            var count = 0\n            for (var j = 0; j < word.length(); j++) {\n                if (word.charAt(j) == ' ') {\n                    continue\n                }\n                count += 1\n            }\n            if (count == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List[String]()\n        }\n        var words = List[String]()\n        var word = \"\"\n        var index = 0\n        var count = 0\n        while (index < s.length) {\n            if (s[index] == ' ') {\n                if (count == n) {\n                    words = words.append(word)\n                    word = \"\"\n                    count = 0\n                }\n                index += 1\n            } else {\n                word = word + s[index]\n                count += 1\n                index += 1\n            }\n        }\n        if (count == n) {\n            words = words.append(word)\n        }\n        return words",
    "        if (s.length() == 0) {\n            return List()\n        }\n        var words = List.empty[String]\n        var word = \"\"\n        var i = 0\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n            } else {\n                word = word + s.charAt(i)\n            }\n            i = i + 1\n        }\n        if (word.length() > 0) {\n            words = words.append(word)\n        }\n        var result = List.empty[String]\n        for (var word : words) {\n            if (word.length() == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) continue\n            val count = countConsonants(word)\n            if (count == n) result += word\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List()\n        var word = \"\"\n        var count = 0\n        var index = 0\n        while (index < s.length()) {\n            var c = s.charAt(index)\n            if (c.isLetter()) {\n                word += c\n                count += 1\n                if (count == n) {\n                    words += List(word)\n                    word = \"\"\n                    count = 0\n                }\n            } else {\n                if (count > 0) {\n                    words += List(word)\n                    word = \"\"\n                    count = 0\n                }\n            }\n            index += 1\n        }\n        if (count > 0) {\n            words += List(word)\n        }\n        return words",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        val words = s.split(\" \")\n        val result = List.empty()\n        for (i <- words.size()) {\n            if (words.size() - i < n) {\n                break\n            }\n            val word = words.slice(i, i + n).mkString(\"\")\n            if (word.length() > 0) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        val words = s.split(\" \")\n        val result = List()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List.empty[String]\n        var i = 0\n        while (i < s.length) {\n            var j = i\n            while (j < s.length && s.charAt(j) != ' ') {\n                j += 1\n            }\n            var word = s.substring(i, j)\n            if (n == word.length()) {\n                words = words.append(word)\n            }\n            i = j + 1\n        }\n        return words",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        var words = s.split(\" \")\n        var result = List.empty()\n        for (var word : words) {\n            if (word.length() == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        if (s.length() == 0) {\n            return List[String]()\n        }\n        val words = mutable.List[String]()\n        for (i <- 0 until s.length()) {\n            if (s.charAt(i).isLetter()) {\n                words.append(s.substring(i, i + 1))\n            }\n        }\n        words.foreach(w => {\n            if (n == 0) {\n                return\n            }\n            val count = mutable.List[String]()\n            for (i <- 0 until w.length()) {\n                if (w.charAt(i).isLetter()) {\n                    count.append(w.substring(i, i + 1))\n                }\n            }\n            if (count.length() == n) {\n                words.append(w)\n            }\n        })\n        return words",
    "        if (s.length() == 0) {\n            return List[String]()\n        }\n        var words = List[String]()\n        var word = \"\"\n        var count = 0\n        for (var i = 0; i < s.length(); i++) {\n            var c = s.charAt(i)\n            if (c.isLetter()) {\n                word += c\n                count += 1\n                if (count == n) {\n                    words += List[String](word)\n                    word = \"\"\n                    count = 0\n                }\n            } else if (c == ' ') {\n                if (count > 0) {\n                    words += List[String](word)\n                    word = \"\"\n                    count = 0\n                }\n            }\n        }\n        if (count > 0) {\n            words += List[String](word)\n        }\n        return words",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List()\n        var word = \"\"\n        var i = 0\n        while (i < s.length()) {\n            var c = s.charAt(i)\n            if (c.isLetter()) {\n                word += c\n                i += 1\n            } else {\n                if (word.length() == n) {\n                    words += word\n                }\n                word = \"\"\n                i += 1\n            }\n        }\n        if (word.length() == n) {\n            words += word\n        }\n        return words",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        val words = mutable.ListBuffer[String]()\n        for (i <- 0 until s.length) {\n            val word = s.substring(i, i + 1)\n            if (word.isEmpty()) {\n                continue\n            }\n            val count = countConsonants(word)\n            if (count == n) {\n                words.append(word)\n            }\n        }\n        return words.toList",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List.empty[String]\n        var word = \"\"\n        var i = 0\n        while (i < s.length) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n                i += 1\n            } else {\n                word = word + s.charAt(i)\n                i += 1\n            }\n        }\n        if (word.length() > 0) {\n            words = words.append(word)\n        }\n        var result = List.empty[String]\n        for (var word : words) {\n            if (word.length() == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) {\n                continue\n            }\n            val count = countConsonants(word)\n            if (count == n) {\n                result.append(word)\n            }\n        }\n        return result\n    }\n\n    // Counts the number of consonants in a word\n    def countConsonants(word : String) : Long = {\n        val result = mutable.Long()\n        for (i <- 0 until word.length) {\n            val c = word[i]\n            if (c.isLetter()) {\n                result += 1\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List.empty()\n        var word = \"\"\n        var count = 0\n        var index = 0\n        while (index < s.length()) {\n            var c = s.charAt(index)\n            if (c.isLetter()) {\n                word += c\n                count += 1\n                if (count == n) {\n                    words = words.append(word)\n                    word = \"\"\n                    count = 0\n                }\n            } else {\n                if (count > 0) {\n                    word += c\n                    count += 1\n                } else {\n                    index++\n                }\n            }\n        }\n        if (count > 0) {\n            words = words.append(word)\n        }\n        return words",
    "        var words = s.split(\" \")\n        var result = List[String]()\n        for (var i = 0; i < words.length; i++) {\n            var word = words[i]\n            var count = 0\n            for (var j = 0; j < word.length(); j++) {\n                if (word.charAt(j) == ' ') {\n                    continue\n                }\n                count += 1\n                if (count == n) {\n                    result = result.append(word)\n                    break\n                }\n            }\n        }\n        return result",
    "        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        if (s.length() == 0) {\n            return List[String]()\n        }\n        var words = List[String]()\n        var word = \"\"\n        var wordCount = 0\n        var i = 0\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                if (wordCount == n) {\n                    words = words.append(word)\n                    word = \"\"\n                    wordCount = 0\n                }\n            } else {\n                word = word + s.charAt(i)\n                wordCount = wordCount + 1\n            }\n            i = i + 1\n        }\n        if (wordCount == n) {\n            words = words.append(word)\n        }\n        return words",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List.empty[String]\n        var i = 0\n        while (i < s.length()) {\n            var c = s.charAt(i)\n            if (c.isLetter()) {\n                var j = i + 1\n                while (j < s.length() && s.charAt(j).isLetter()) {\n                    j += 1\n                }\n                words = words.append(s.substring(i, j))\n                i = j\n            } else {\n                i += 1\n            }\n        }\n        var result = List.empty[String]\n        for (var word : words) {\n            if (word.length() == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        var words = s.split(\" \")\n        var result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            if (words[i].length() == n) {\n                result.append(words[i])\n            }\n        }\n        return result",
    "        var words = s.split(\" \")\n        var result = mutable.List[String]()\n        for (var i = 0; i < words.length; i++) {\n            var word = words[i]\n            var count = 0\n            for (var j = 0; j < word.length(); j++) {\n                if (word.charAt(j) == ' ') {\n                    continue\n                }\n                count += 1\n            }\n            if (count == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        var words = s.split(\" \")\n        var result = mutable.List[String]()\n        for (var i = 0; i < words.length; i++) {\n            var word = words[i]\n            var count = 0\n            for (var j = 0; j < word.length(); j++) {\n                if (word.charAt(j) == ' ') {\n                    continue\n                }\n                count += 1\n            }\n            if (count == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        var words = s.split(\" \")\n        var result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            var word = words[i]\n            if (word.length() == 0) {\n                continue\n            }\n            var count = 0\n            for (j <- 0 until word.length()) {\n                if (word.charAt(j) == ' ') {\n                    continue\n                }\n                count += 1\n                if (count == n) {\n                    result.append(word)\n                    break\n                }\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List.empty[String]\n        var word = \"\"\n        var i = 0\n        while (i < s.length) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n            } else {\n                word = word + s.charAt(i)\n            }\n            i = i + 1\n        }\n        if (word.length() > 0) {\n            words = words.append(word)\n        }\n        var result = List.empty[String]\n        for (var word : words) {\n            if (word.length() == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            if (words[i].length() == n) {\n                result.append(words[i])\n            }\n        }\n        return result",
    "        val words = mutable.List[String]()\n        val word = mutable.StringBuilder()\n        var i = 0\n        for (i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words.append(word.toString())\n                    word.clear()\n                }\n            } else {\n                word.append(s.charAt(i))\n            }\n        }\n        if (word.length() > 0) {\n            words.append(word.toString())\n            word.clear()\n        }\n        words.foreach(w => {\n            if (w.length() == n) {\n                words.foreach(w2 => {\n                    if (w2.startsWith(w)) {\n                        words.append(w2)\n                    }\n                })\n            }\n        })\n        return words",
    "        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            val count = countConsonants(word)\n            if (count == n) {\n                result.append(word)\n            }\n        }\n        return result\n    }\n\n    // Returns the number of consonants in the given word.\n    def countConsonants(word : String) : Long = {\n        val result = 0l\n        for (i <- 0 until word.length) {\n            if (isConsonant(word[i])) {\n                result += 1l\n            }\n        }\n        return result\n    }\n\n    // Returns true if the given character is a consonant.\n    def isConsonant(c : String) : Boolean = {\n        val result = c.equals(\"a\") || c.equals(\"e\") || c.equals(\"i\") || c.equals(\"o\") || c.equals(\"u\")\n        return result",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        var words = List.empty()\n        var word = \"\"\n        var i = 0\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n            } else {\n                word = word + s.charAt(i)\n            }\n            i = i + 1\n        }\n        if (word.length() > 0) {\n            words = words.append(word)\n        }\n        var result = List.empty()\n        for (var word : words) {\n            if (word.length() == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List.empty[String]\n        var word = \"\"\n        var i = 0\n        while (i < s.length) {\n            if (s.charAt(i) == ' ') {\n                if (word.isEmpty()) {\n                    i++\n                } else {\n                    words = words.append(word)\n                    word = \"\"\n                }\n            } else {\n                word = word + s.charAt(i)\n                i++\n            }\n        }\n        if (word.isEmpty()) {\n            words = words.append(word)\n        }\n        words = words.filter(w -> w.length() == n)\n        return words",
    "        if (s.length() == 0) {\n            return List[String]()\n        }\n        var words = List[String]()\n        var word = \"\"\n        var count = 0\n        for (var i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') {\n                if (count == n) {\n                    words = words.append(word)\n                    word = \"\"\n                    count = 0\n                }\n            } else {\n                count += 1\n                word = word + s.charAt(i)\n            }\n        }\n        if (count == n) {\n            words = words.append(word)\n        }\n        return words",
    "        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        var words = s.split(\" \")\n        var result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            var word = words[i]\n            var count = 0\n            for (j <- 0 until word.length) {\n                if (word[j].isLetter()) {\n                    count += 1\n                }\n            }\n            if (count == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        val words = mutable.List[String]()\n        if (s.length() == 0) {\n            return words\n        }\n        val sb = mutable.StringBuilder()\n        for (i <- 0 until s.length()) {\n            if (n > 0) {\n                if (n == 1) {\n                    sb.append(s.charAt(i))\n                    n -= 1\n                } else {\n                    sb.append(s.charAt(i))\n                    n -= 1\n                    if (n == 0) {\n                        words.append(sb.toString())\n                        sb.clear()\n                        n = 0\n                    }\n                }\n            } else {\n                sb.append(s.charAt(i))\n            }\n        }\n        words.append(sb.toString())\n        return words",
    "        if (s.length() == 0) {\n            return List()\n        }\n        var words = List.empty[String]\n        var word = \"\"\n        var i = 0\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n            } else {\n                word = word + s.charAt(i)\n            }\n            i = i + 1\n        }\n        if (word.length() > 0) {\n            words = words.append(word)\n        }\n        var result = List.empty[String]\n        for (var word : words) {\n            if (word.length() == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        var words = List.empty()\n        var word = \"\"\n        var wordIndex = 0\n        var wordCount = 0\n        var wordLength = 0\n        var wordLengthIndex = 0\n        var wordLengthCount = 0\n        var wordLengthCountIndex = 0\n        var wordLengthCountIndex2 = 0\n        var wordLengthCountIndex3 = 0\n        var wordLengthCountIndex4 = 0\n        var wordLengthCountIndex5 = 0\n        var wordLengthCountIndex6 = 0\n        var wordLengthCountIndex7 = 0\n        var wordLengthCountIndex8 = 0\n        var wordLengthCountIndex9 = 0\n        var wordLengthCountIndex10 = 0\n        var wordLengthCountIndex11 = 0\n        var wordLengthCountIndex12 = 0\n        var wordLengthCountIndex13 = 0\n        var wordLengthCountIndex14 = 0\n        var wordLengthCountIndex15 = 0\n        var wordLengthCountIndex16 = 0\n        var wordLengthCountIndex17 = 0\n        var wordLengthCountIndex18 = 0\n        var wordLengthCountIndex19 = 0\n        var wordLengthCountIndex20 = 0\n        var wordLengthCountIndex21 = 0\n        var wordLengthCountIndex22 = 0\n        var wordLengthCountIndex23 = 0\n        var wordLengthCountIndex24 = 0\n        var wordLengthCountIndex25 = 0\n        var wordLengthCountIndex26 = 0\n        var wordLengthCountIndex27 = 0\n        var wordLengthCountIndex28 = 0\n        var wordLengthCountIndex29 = 0\n        var wordLengthCountIndex30 = 0\n        var wordLengthCountIndex31 = 0\n        var wordLengthCountIndex32 = 0\n        var wordLengthCountIndex33 = 0\n        var wordLengthCountIndex34 = 0\n        var wordLengthCountIndex35 = 0\n        var wordLengthCountIndex36 = 0\n        var wordLengthCountIndex37 = 0\n        var wordLengthCountIndex38 = 0\n        var wordLengthCountIndex39 = 0\n        var wordLengthCountIndex40 = 0\n        var wordLengthCountIndex41 = 0\n        var wordLengthCountIndex42 = 0\n        var wordLengthCountIndex43 = 0\n        var wordLengthCountIndex44 = 0\n        ",
    "        if (s.length() == 0) {\n            return List[String]()\n        }\n        var words = s.split(\" \")\n        var result = List[String]()\n        for (var word : words) {\n            if (word.length() == 0) {\n                continue\n            }\n            var count = 0\n            for (var c : word.toCharArray()) {\n                if (c == ' ') {\n                    continue\n                }\n                count += 1\n            }\n            if (count == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        var words = mutable.List[String]()\n        var i = 0\n        while (i < s.length) {\n            var j = i\n            while (j < s.length && s.charAt(j) != ' ') {\n                j += 1\n            }\n            var word = s.substring(i, j)\n            if (n == 0) {\n                words.append(word)\n            } else if (n > 0 && word.length() == n) {\n                words.append(word)\n            }\n            i = j + 1\n        }\n        return words",
    "        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() > 0 && word.length() == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) {\n                continue\n            }\n            val count = countConsonants(word)\n            if (count == n) {\n                result.append(word)\n            }\n        }\n        return result\n    }\n\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns a list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords2(s : String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) {\n                continue\n            }\n            val count = countConsonants(word)\n            if (count == n) {\n                result.append(word)\n            }\n        }\n        return result\n    }\n\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns a list of all words from string s that contain exactly \n    //",
    "        if (s.isEmpty()) {\n            return List[String]()\n        }\n        var words = List[String]()\n        var word = \"\"\n        var count = 0\n        for (var i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == ' ') {\n                if (count == n) {\n                    words = words.append(word)\n                    word = \"\"\n                    count = 0\n                }\n            } else {\n                word = word + s.charAt(i)\n                count = count + 1\n            }\n        }\n        if (count == n) {\n            words = words.append(word)\n        }\n        return words",
    "        if (s.length() == 0) {\n            return List()\n        }\n        val words = mutable.ListBuffer[String]()\n        val word = mutable.StringBuffer()\n        var i = 0\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words.append(word.toString())\n                    word.clear()\n                }\n            } else {\n                word.append(s.charAt(i))\n            }\n            i += 1\n        }\n        if (word.length() > 0) {\n            words.append(word.toString())\n        }\n        val result = mutable.ListBuffer[String]()\n        for (i <- words.toList.map(_.toString).toIterator) {\n            if (n == 0) {\n                result.append(i)\n            } else if (n > 0) {\n                val count = mutable.StringBuffer()\n                for (j <- i.toIterator) {\n                    count.append(j)\n                    count.append(\" \")\n                }\n                if (count.toString().contains(n.toString())) {\n                    result.append(i)\n                }\n            }\n        }\n        return result.toList",
    "        if (s.isEmpty()) {\n            return List.empty()\n        } else {\n            var words = List.empty()\n            var word = \"\"\n            var wordCount = 0\n            var wordCounts = List.empty()\n            var wordCountsIterator = List.empty()\n            var wordCountsIteratorIterator = List.empty()\n            var wordCountsIteratorIteratorIterator = List.empty()\n            var wordCountsIteratorIteratorIteratorIterator = List.empty()\n            var wordCountsIteratorIteratorIteratorIteratorIterator = List.empty()\n            var wordCountsIteratorIteratorIteratorIteratorIteratorIterator = List.empty()\n            var wordCountsIteratorIteratorIteratorIteratorIteratorIteratorIterator = List.empty()\n            var wordCountsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = List.empty()\n            var wordCountsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = List.empty()\n            var wordCountsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = List.empty()\n            var wordCountsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = List.empty()\n            var wordCountsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = List.empty()\n            var wordCountsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = List.empty()\n            var wordCountsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = List.empty()\n            var wordCountsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = List.empty()\n            var wordCountsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = List.empty()\n            var wordCountsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = List.empty()\n            var wordCountsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = List.empty()\n            var wordCountsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = List.empty()\n            var wordCountsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = List.empty()\n            var wordCountsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = List.empty()\n            var wordCountsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = List.empty()\n            var wordCountsIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = List.empty()\n            var wordCountsIterator",
    "        if (s.length() == 0) {\n            return List[String]()\n        }\n        var words = List[String]()\n        var i = 0\n        while (i < s.length()) {\n            var j = i\n            while (j < s.length() && s.charAt(j) != ' ') {\n                j += 1\n            }\n            var word = s.substring(i, j)\n            if (n == word.length()) {\n                words = words.append(word)\n            }\n            i = j + 1\n        }\n        return words",
    "        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        if (s.length() == 0) {\n            return List[String]()\n        }\n        var words = List[String]()\n        var word = \"\"\n        var i = 0\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n            } else {\n                word = word + s.charAt(i)\n            }\n            i = i + 1\n        }\n        if (word.length() > 0) {\n            words = words.append(word)\n        }\n        var result = List[String]()\n        for (var word : words) {\n            var count = 0\n            for (var c : word) {\n                if (c == ' ') {\n                    continue\n                }\n                count = count + 1\n            }\n            if (count == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        var words = List.empty[String]\n        var word = \"\"\n        var i = 0\n        while (i < s.length) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                }\n            } else {\n                word = word + s.charAt(i)\n            }\n            i = i + 1\n        }\n        if (word.length() > 0) {\n            words = words.append(word)\n        }\n        var result = List.empty[String]\n        for (var word : words) {\n            var count = 0\n            for (var c : word) {\n                if (c == ' ') {\n                    continue\n                }\n                count = count + 1\n            }\n            if (count == n) {\n                result = result.append(word)\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List()\n        }\n        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == n) {\n                result.append(word)\n            }\n        }\n        return result",
    "        if (s.length() == 0) {\n            return List.empty()\n        }\n        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            if (words[i].length() == n) {\n                result.append(words[i])\n            }\n        }\n        return result",
    "        val words = mutable.List[String]()\n        for (i <- 0 until s.length) {\n            val word = s.substring(i, i + 1)\n            if (word.length() == 1) {\n                words.append(word)\n            } else if (word.length() == 2 && word.toLowerCase() == \" \") {\n                words.append(word)\n            } else if (word.length() == 2 && word.toLowerCase() == \".\") {\n                words.append(word)\n            } else if (word.length() == 2 && word.toLowerCase() == \",\") {\n                words.append(word)\n            } else if (word.length() == 2 && word.toLowerCase() == \"!\") {\n                words.append(word)\n            } else if (word.length() == 2 && word.toLowerCase() == \"?\") {\n                words.append(word)\n            } else if (word.length() == 2 && word.toLowerCase() == \";\") {\n                words.append(word)\n            } else if (word.length() == 2 && word.toLowerCase() == \":\") {\n                words.append(word)\n            } else if (word.length() == 2 && word.toLowerCase() == \"\\\"\") {\n                words.append(word)\n            } else if (word.length() == 2 && word.toLowerCase() == \"'\") {\n                words.append(word)\n            } else if (word.length() == 2 && word.toLowerCase() == \"(\" || word.toLowerCase() == \")\") {\n                words.append(word)\n            } else if (word.length() == 2 && word.toLowerCase() == \"{\" || word.toLowerCase() == \"}\") {\n                words.append(word)\n            } else if (word.length() == 2 && word.toLowerCase() == \"[\" || word.toLowerCase() == \"]\") {\n                words.append(word)\n            } else if (word.length() == 2 && word.toLowerCase() == \"{\" || word.toLowerCase() == \"}\") {\n                words.append",
    "        var words = s.split(\" \")\n        var result = List[String]()\n        for (var i = 0; i < words.length; i++) {\n            var word = words[i]\n            if (word.length() == 0) continue\n            var count = 0\n            for (var j = 0; j < word.length(); j++) {\n                if (word.charAt(j) == ' ') continue\n                count += 1\n            }\n            if (count == n) result = result.append(word)\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        val words = mutable.ListBuffer[String]()\n        val word = mutable.StringBuffer()\n        for (i <- 0 until s.length()) {\n            if (s.charAt(i) == ' ') {\n                if (word.length() > 0) {\n                    words.append(word.toString())\n                    word.clear()\n                }\n            } else {\n                word.append(s.charAt(i))\n            }\n        }\n        if (word.length() > 0) {\n            words.append(word.toString())\n        }\n        val result = mutable.ListBuffer[String]()\n        for (word <- words.toList) {\n            if (word.length() == n) {\n                result.append(word)\n            }\n        }\n        return result.toList",
    "        if (s.length() == 0) {\n            return List[String]()\n        }\n        val words = List[String]()\n        for (i <- 0 until s.length()) {\n            if (s.charAt(i) == ' ') {\n                continue\n            }\n            val word = s.substring(i, i + 1)\n            if (word.length() == 1) {\n                words.append(word)\n                continue\n            }\n            val count = countConsonants(word)\n            if (count == n) {\n                words.append(word)\n            }\n        }\n        return words\n    }\n\n    def countConsonants(s : String) : Long = {\n        val count = 0l\n        for (i <- 0 until s.length()) {\n            if (s.charAt(i) == ' ') {\n                continue\n            }\n            val word = s.substring(i, i + 1)\n            if (word.length() == 1) {\n                continue\n            }\n            count += word.length() - word.replaceAll(\"[aeiou]\", \"\").length()\n        }\n        return count",
    "        if (s.isEmpty()) {\n            return List.empty()\n        }\n        var words = s.split(\" \")\n        var cons = new mutable.List[String]()\n        for (var i = 0; i < words.length; i++) {\n            var word = words[i]\n            var count = 0\n            for (var j = 0; j < word.length(); j++) {\n                if (word.charAt(j) == ' ') {\n                    continue\n                }\n                count += 1\n                if (count == n) {\n                    cons.append(word)\n                }\n            }\n        }\n        return cons.toList",
    "        if (s.length() == 0) {\n            return List[String]()\n        }\n        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            if (words[i].length() == 0) {\n                continue\n            }\n            val count = mutable.List[String]()\n            for (j <- 0 until words[i].length()) {\n                if (words[i].charAt(j) == ' ') {\n                    continue\n                }\n                count.append(words[i].substring(j, j + 1))\n            }\n            if (count.length() == n) {\n                result.append(words[i])\n            }\n        }\n        return result",
    "        if (s.isEmpty()) {\n            return List[String]()\n        }\n        var words = List[String]()\n        var word = \"\"\n        var count = 0\n        var i = 0\n        while (i < s.length) {\n            if (s[i].isLetter()) {\n                word += s[i]\n                count += 1\n                if (count == n) {\n                    words = words.append(word)\n                    word = \"\"\n                    count = 0\n                }\n            } else {\n                if (count > 0) {\n                    words = words.append(word)\n                    word = \"\"\n                    count = 0\n                }\n            }\n            i += 1\n        }\n        if (count > 0) {\n            words = words.append(word)\n        }\n        return words",
    "        if (s.isEmpty()) {\n            return List[String]()\n        }\n        val words = s.split(\" \")\n        val result = mutable.List[String]()\n        for (i <- 0 until words.length) {\n            val word = words[i]\n            if (word.length() == 0) {\n                continue\n            }\n            val count = mutable.List[String]()\n            for (j <- 0 until word.length()) {\n                val c = word.charAt(j)\n                if (c.isLetter()) {\n                    count.append(c)\n                }\n            }\n            if (count.length() == n) {\n                result.append(word)\n            }\n        }\n        return result"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}