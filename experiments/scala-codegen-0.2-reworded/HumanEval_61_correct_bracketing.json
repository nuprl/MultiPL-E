{
  "name": "HumanEval_61_correct_bracketing",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\")(()\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n    }\n\n}\n",
  "completions": [
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBracketCount = 0\n        var closeBracketCount = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBracketCount += 1\n            } else if (brackets[i] == \")\") {\n                closeBracketCount += 1\n            }\n        }\n        return openBracketCount == closeBracketCount",
    "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == \"(\" || brackets.charAt(i) == \")\") {\n                stack.push(brackets.charAt(i))\n            } else {\n                if (stack.isEmpty()) {\n                    return false\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        return stack.isEmpty()",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else if (brackets[i] == \")\") {\n                closeBrackets += 1\n            }\n            i += 1\n        }\n        return openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openingBracket = brackets.charAt(0)\n        var closingBracket = brackets.charAt(brackets.length - 1)\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n        if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n            return false\n        }\n        return openingBracketIndex == closingBracketIndex - 1",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets.charAt(i) == \"(\" && openBrackets == 0) {\n                openBrackets += 1\n            } else if (brackets.charAt(i) == \")\" && openBrackets > 0) {\n                openBrackets -= 1\n            }\n            i += 1\n        }\n        return openBrackets == 0",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBracket = brackets.charAt(0)\n        var closeBracket = brackets.charAt(brackets.length - 1)\n        var openBracketIndex = 0\n        var closeBracketIndex = brackets.length - 1\n        var openBracketFound = false\n        var closeBracketFound = false\n        while (openBracketIndex < brackets.length) {\n            if (brackets.charAt(openBracketIndex) == openBracket) {\n                openBracketFound = true\n            }\n            if (openBracketFound) {\n                if (brackets.charAt(closeBracketIndex) == closeBracket) {\n                    closeBracketFound = true\n                }\n                if (closeBracketFound) {\n                    openBracketIndex++\n                    closeBracketIndex--\n                } else {\n                    openBracketIndex++\n                }\n            } else {\n                openBracketIndex++\n            }\n        }\n        return openBracketFound && closeBracketFound",
    "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == \"(\" ) {\n                stack.push(\"(\")\n            } else {\n                if (stack.isEmpty()) {\n                    return false\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        return stack.isEmpty()",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else if (brackets[i] == \")\") {\n                closeBrackets += 1\n            }\n        }\n        return openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        if (brackets.length == 1) {\n            return false\n        }\n        if (brackets.charAt(0) != \"(\" || brackets.charAt(brackets.length - 1) != \")\") {\n            return false\n        }\n        var openBrackets = 0\n        var i = 1\n        while (i < brackets.length) {\n            if (brackets.charAt(i) == \"(\") {\n                openBrackets += 1\n            } else if (brackets.charAt(i) == \")\") {\n                openBrackets -= 1\n            }\n            i += 1\n        }\n        return openBrackets == 0",
    "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == \"(\" || brackets.charAt(i) == \")\") {\n                stack.push(brackets.charAt(i))\n            } else {\n                if (stack.isEmpty()) {\n                    return false\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        return stack.isEmpty()",
    "        if (brackets.length == 0) {\n            return true\n        }\n        if (brackets.charAt(0) != \"(\" || brackets.charAt(brackets.length - 1) != \")\") {\n            return false\n        }\n        var i = 1\n        while (i < brackets.length - 1) {\n            if (brackets.charAt(i) != \"(\" || brackets.charAt(brackets.length - 1 - i) != \")\") {\n                return false\n            }\n            i += 1\n        }\n        return true",
    "        var openingBrackets = 0\n        var closingBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openingBrackets += 1\n            } else {\n                assert brackets[i] == \")\"\n                closingBrackets += 1\n            }\n            if (openingBrackets == 0) {\n                return false\n            }\n            if (closingBrackets == 0) {\n                return false\n            }\n        }\n        return true",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets[i] == \"(\" && openBrackets == 0) {\n                openBrackets += 1\n            } else if (brackets[i] == \")\" && openBrackets > 0) {\n                openBrackets -= 1\n            } else if (brackets[i] == \"(\" && openBrackets > 0) {\n                return false\n            }\n            i += 1\n        }\n        return openBrackets == 0",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openingBracket = brackets.charAt(0)\n        var closingBracket = brackets.charAt(brackets.length - 1)\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n        if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n            return false\n        }\n        var openingBracketCount = 1\n        var closingBracketCount = 1\n        for (var i = 1; i < brackets.length - 1; i++) {\n            if (brackets.charAt(i) == openingBracket) {\n                openingBracketCount += 1\n            } else if (brackets.charAt(i) == closingBracket) {\n                closingBracketCount += 1\n            }\n            if (openingBracketCount == closingBracketCount) {\n                openingBracketCount = 0\n                closingBracketCount = 0\n            }\n        }\n        return openingBracketCount == 0",
    "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == '(') {\n                stack.push(brackets.substring(i, i + 1))\n            } else {\n                if (stack.isEmpty()) {\n                    return false\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        return stack.isEmpty()",
    "        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") openBrackets += 1\n            if (brackets[i] == \")\") closeBrackets += 1\n            if (openBrackets == 0 && closeBrackets == 0) return false\n            if (openBrackets == 0 && closeBrackets > 0) return false\n            if (openBrackets > 0 && closeBrackets == 0) return false\n        }\n        return true",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else if (brackets[i] == \")\") {\n                closeBrackets += 1\n            }\n        }\n        return openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        if (brackets.charAt(0) != \"(\" || brackets.charAt(brackets.length - 1) != \")\") {\n            return false\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (var i = 0; i < brackets.length; i++) {\n            if (brackets.charAt(i) == \"(\") {\n                openBrackets += 1\n            } else if (brackets.charAt(i) == \")\") {\n                closeBrackets += 1\n            }\n        }\n        return openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openingBracket = brackets.charAt(0)\n        var closingBracket = brackets.charAt(brackets.length - 1)\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n        if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n            return false\n        }\n        var openingBracketCount = 1\n        var closingBracketCount = 1\n        for (var i = openingBracketIndex + 1; i < brackets.length - 1; i++) {\n            if (brackets.charAt(i) == openingBracket) {\n                openingBracketCount += 1\n            } else {\n                break\n            }\n        }\n        for (var i = closingBracketIndex - 1; i >= 0; i--) {\n            if (brackets.charAt(i) == closingBracket) {\n                closingBracketCount += 1\n            } else {\n                break\n            }\n        }\n        return openingBracketCount == closingBracketCount",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openingBracket = brackets.charAt(0)\n        var closingBracket = brackets.charAt(brackets.length - 1)\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n        if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n            return false\n        }\n        var openingBracketIndex2 = brackets.indexOf(openingBracket, openingBracketIndex + 1)\n        var closingBracketIndex2 = brackets.lastIndexOf(closingBracket, closingBracketIndex - 1)\n        if (openingBracketIndex2 == -1 || closingBracketIndex2 == -1) {\n            return false\n        }\n        if (openingBracketIndex2 < closingBracketIndex2) {\n            return false\n        }\n        return true",
    "        if (brackets.isEmpty()) {\n            return true\n        }\n        if (brackets.charAt(0) == '(') {\n            return correctBracketing(brackets.substring(1))\n        } else {\n            return correctBracketing(brackets.substring(0)) && correctBracketing(brackets.substring(1))\n        }",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBracket = brackets.charAt(0)\n        var closeBracket = brackets.charAt(brackets.length - 1)\n        var openBracketIndex = brackets.indexOf(openBracket)\n        var closeBracketIndex = brackets.lastIndexOf(closeBracket)\n        if (openBracketIndex == -1 || closeBracketIndex == -1) {\n            return false\n        }\n        var openBracketCount = 1\n        var closeBracketCount = 0\n        for (var i = 1; i < brackets.length - 1; i++) {\n            var c = brackets.charAt(i)\n            if (c == openBracket) {\n                openBracketCount += 1\n            } else if (c == closeBracket) {\n                closeBracketCount += 1\n            }\n            if (openBracketCount == closeBracketCount) {\n                openBracketCount = 0\n                closeBracketCount = 0\n            }\n        }\n        return openBracketCount == closeBracketCount",
    "        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == '(') {\n                openBrackets += 1\n            } else {\n                closeBrackets += 1\n            }\n            if (openBrackets == closeBrackets) {\n                return true\n            }\n        }\n        return false",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else {\n                closeBrackets += 1\n            }\n            if (openBrackets == closeBrackets) {\n                return true\n            }\n        }\n        return false",
    "        if (brackets.length == 0) {\n            return true\n        }\n        if (brackets.charAt(0) != \"(\" || brackets.charAt(brackets.length - 1) != \")\") {\n            return false\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets.charAt(i) == \"(\") {\n                openBrackets += 1\n            } else if (brackets.charAt(i) == \")\") {\n                closeBrackets += 1\n            }\n            i += 1\n        }\n        return openBrackets == closeBrackets",
    "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == '(') {\n                stack.push(brackets.substring(i, i + 1))\n            } else {\n                if (stack.isEmpty()) {\n                    return false\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        return stack.isEmpty()",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets[i] == '(') {\n                openBrackets += 1\n            } else {\n                closeBrackets += 1\n            }\n            i += 1\n        }\n        if (openBrackets == closeBrackets) {\n            return true\n        } else {\n            return false\n        }",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets[i] == '(') {\n                openBrackets += 1\n            } else if (brackets[i] == ')') {\n                closeBrackets += 1\n            }\n            i += 1\n        }\n        return openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openingBracket = brackets.charAt(0)\n        var closingBracket = brackets.charAt(brackets.length - 1)\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n        if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n            return false\n        }\n        var openingBracketCount = 1\n        var closingBracketCount = 1\n        for (var i = 1; i < brackets.length - 1; i++) {\n            if (brackets.charAt(i) == openingBracket) {\n                openingBracketCount += 1\n            } else if (brackets.charAt(i) == closingBracket) {\n                closingBracketCount += 1\n            }\n            if (openingBracketCount == closingBracketCount) {\n                openingBracketCount = 1\n                closingBracketCount = 1\n            }\n        }\n        return openingBracketCount == closingBracketCount",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openingBrackets = 0\n        var closingBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\" && openingBrackets == 0) {\n                openingBrackets += 1\n            } else if (brackets[i] == \")\" && openingBrackets > 0) {\n                openingBrackets -= 1\n            } else if (brackets[i] == \")\" && openingBrackets == 0) {\n                closingBrackets += 1\n            } else if (brackets[i] == \"(\" && openingBrackets > 0) {\n                closingBrackets -= 1\n            }\n        }\n        return openingBrackets == 0 && closingBrackets == 0",
    "        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) != '(') {\n                return false\n            }\n            if (i + 1 < brackets.length && brackets.charAt(i + 1) != ')') {\n                return false\n            }\n        }\n        return true",
    "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == '(') {\n                stack.push(brackets.substring(i, i + 1))\n            } else {\n                if (stack.isEmpty()) {\n                    return false\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        return stack.isEmpty()",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else {\n                closeBrackets += 1\n            }\n            if (openBrackets == closeBrackets) {\n                return true\n            }\n        }\n        return false",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openingBracket = brackets.charAt(0)\n        var closingBracket = brackets.charAt(brackets.length - 1)\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n        if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n            return false\n        }\n        if (openingBracketIndex > closingBracketIndex) {\n            return false\n        }\n        var openingBracketCount = 1\n        var closingBracketCount = 1\n        for (i <- brackets.range(openingBracketIndex + 1, brackets.length - 1)) {\n            if (brackets.charAt(i) == openingBracket) {\n                openingBracketCount += 1\n            } else {\n                openingBracketCount -= 1\n            }\n            if (brackets.charAt(i) == closingBracket) {\n                closingBracketCount += 1\n            } else {\n                closingBracketCount -= 1\n            }\n            if (openingBracketCount == 0 || closingBracketCount == 0) {\n                return false\n            }\n        }\n        return true",
    "        var openingBrackets = 0\n        var closingBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == '(') {\n                openingBrackets += 1\n            } else {\n                assert brackets[i] == ')'\n                closingBrackets += 1\n            }\n            if (openingBrackets == 0) {\n                return false\n            }\n            if (closingBrackets == 0) {\n                return false\n            }\n        }\n        return true",
    "        var openingBrackets = 0\n        var closingBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == '(') {\n                openingBrackets += 1\n            } else {\n                assert brackets[i] == ')'\n                closingBrackets += 1\n            }\n            if (openingBrackets == 0) {\n                return false\n            }\n            if (closingBrackets == 0) {\n                return false\n            }\n        }\n        return true",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else if (brackets[i] == \")\") {\n                closeBrackets += 1\n            }\n        }\n        return openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets[i] == \"(\" || brackets[i] == \"[\" || brackets[i] == \"{\") {\n                openBrackets += 1\n            } else if (brackets[i] == \")\" || brackets[i] == \"]\" || brackets[i] == \"}\") {\n                closeBrackets += 1\n            }\n            i += 1\n        }\n        return openBrackets == closeBrackets",
    "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == \"(\") {\n                stack.push(brackets.substring(i, i + 1))\n            } else {\n                if (stack.isEmpty()) {\n                    return false\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        return stack.isEmpty()",
    "        var openingBrackets = 0\n        var closingBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == '(') {\n                openingBrackets += 1\n            } else {\n                assert brackets[i] == ')'\n                closingBrackets += 1\n            }\n            if (openingBrackets == 0 || closingBrackets == 0) {\n                return false\n            }\n        }\n        return true",
    "        var openingBrackets = 0\n        var closingBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\" && openingBrackets == 0) {\n                openingBrackets += 1\n            } else if (brackets[i] == \")\" && openingBrackets > 0) {\n                openingBrackets -= 1\n            } else if (brackets[i] == \")\" && openingBrackets == 0) {\n                closingBrackets += 1\n            } else if (brackets[i] == \"(\" && openingBrackets > 0) {\n                closingBrackets -= 1\n            }\n        }\n        openingBrackets == 0 && closingBrackets == 0",
    "        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) != '(') {\n                return false\n            }\n        }\n        for (i <- brackets.length - 1 until 0) {\n            if (brackets.charAt(i) != ')') {\n                return false\n            }\n        }\n        return true",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else {\n                closeBrackets += 1\n            }\n            if (openBrackets == closeBrackets) {\n                return true\n            }\n        }\n        return false",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBracket = brackets.charAt(0)\n        var closeBracket = brackets.charAt(brackets.length - 1)\n        var openBracketIndex = brackets.indexOf(openBracket)\n        var closeBracketIndex = brackets.lastIndexOf(closeBracket)\n        var isCorrect = openBracketIndex != -1 && closeBracketIndex != -1 && openBracketIndex < closeBracketIndex\n        if (isCorrect) {\n            var i = 0\n            while (i < brackets.length - 1) {\n                var nextOpenBracket = brackets.charAt(i + 1)\n                var nextCloseBracket = brackets.charAt(brackets.length - 1 - i)\n                if (nextOpenBracket != openBracket || nextCloseBracket != closeBracket) {\n                    isCorrect = false\n                    break\n                }\n                i += 1\n            }\n        }\n        return isCorrect",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openingBracket = brackets.charAt(0)\n        var closingBracket = brackets.charAt(brackets.length - 1)\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n        if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n            return false\n        }\n        var openingBracketCount = 1\n        var closingBracketCount = 1\n        for (var i = openingBracketIndex + 1; i < brackets.length; i++) {\n            if (brackets.charAt(i) == openingBracket) {\n                openingBracketCount += 1\n            } else {\n                break\n            }\n        }\n        for (var i = closingBracketIndex - 1; i >= 0; i--) {\n            if (brackets.charAt(i) == closingBracket) {\n                closingBracketCount += 1\n            } else {\n                break\n            }\n        }\n        return openingBracketCount == closingBracketCount",
    "        if (brackets.length == 0) {\n            return true\n        } else {\n            return correctBracketing(brackets.substring(1, brackets.length - 1)) && brackets.charAt(0) == \"(\" && brackets.charAt(brackets.length - 1) == \")\"\n        }",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBracketIndex = 0\n        var closeBracketIndex = 0\n        var openBracket = true\n        for (var i = 0; i < brackets.length; i++) {\n            if (brackets[i] == \"(\") {\n                openBracket = true\n                openBracketIndex = i\n            } else if (brackets[i] == \")\") {\n                if (openBracket) {\n                    openBracket = false\n                    closeBracketIndex = i\n                } else {\n                    return false\n                }\n            }\n        }\n        return openBracket && closeBracketIndex == brackets.length - 1",
    "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == '(') {\n                stack.push(brackets.substring(i, i + 1))\n            } else {\n                if (stack.isEmpty()) {\n                    return false\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        return stack.isEmpty()",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets.charAt(i) == '(') {\n                openBrackets += 1\n            } else {\n                closeBrackets += 1\n            }\n            i += 1\n        }\n        if (openBrackets == closeBrackets) {\n            return true\n        } else {\n            return false\n        }",
    "        if (brackets.length == 0) {\n            return true\n        }\n        if (brackets.charAt(0) == '(') {\n            return correctBracketing(brackets.substring(1))\n        }\n        if (brackets.charAt(brackets.length - 1) == ')') {\n            return correctBracketing(brackets.substring(0, brackets.length - 1))\n        }\n        return false",
    "        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else {\n                assert(brackets[i] == \")\")\n                closeBrackets += 1\n            }\n            if (openBrackets == closeBrackets) {\n                return true\n            }\n        }\n        return false",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else {\n                closeBrackets += 1\n            }\n            if (openBrackets == closeBrackets) {\n                return true\n            }\n        }\n        return false",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else if (brackets[i] == \")\") {\n                closeBrackets += 1\n            }\n        }\n        return openBrackets == closeBrackets",
    "        var openingBrackets = 0\n        var closingBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openingBrackets += 1\n            } else if (brackets[i] == \")\") {\n                closingBrackets += 1\n            }\n            if (openingBrackets == 0 || closingBrackets == 0) {\n                return false\n            }\n        }\n        return openingBrackets == closingBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openingBracket = brackets.charAt(0)\n        var closingBracket = brackets.charAt(brackets.length - 1)\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n        if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n            return false\n        }\n        if (openingBracketIndex > closingBracketIndex) {\n            return false\n        }\n        var i = openingBracketIndex + 1\n        while (i < brackets.length - 1) {\n            if (brackets.charAt(i) != closingBracket) {\n                return false\n            }\n            i = i + 1\n        }\n        return true",
    "        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else {\n                assert brackets[i] == \")\"\n                closeBrackets += 1\n            }\n            if (openBrackets == closeBrackets) {\n                return true\n            }\n        }\n        return false",
    "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == '(') {\n                stack.push(brackets.substring(i, i + 1))\n            } else {\n                if (stack.isEmpty()) {\n                    return false\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        return stack.isEmpty()",
    "        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) != '(') {\n                return false\n            }\n        }\n        return true",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openingBracket = brackets.charAt(0)\n        var closingBracket = brackets.charAt(brackets.length - 1)\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n        if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n            return false\n        }\n        var openingBracketIndex2 = brackets.indexOf(openingBracket, openingBracketIndex + 1)\n        var closingBracketIndex2 = brackets.lastIndexOf(closingBracket, closingBracketIndex - 1)\n        if (openingBracketIndex2 == -1 || closingBracketIndex2 == -1) {\n            return false\n        }\n        if (openingBracketIndex2 < openingBracketIndex) {\n            return false\n        }\n        if (closingBracketIndex2 > closingBracketIndex) {\n            return false\n        }\n        return true",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBracket = 0\n        var closeBracket = 0\n        var openBracketIndex = 0\n        var closeBracketIndex = 0\n        var openBracketStack = List.empty[String]\n        var closeBracketStack = List.empty[String]\n        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == \"(\" || brackets.charAt(i) == \"[\" || brackets.charAt(i) == \"{\") {\n                openBracketStack = openBracketStack.prepend(brackets.charAt(i))\n                openBracket += 1\n            } else if (brackets.charAt(i) == \")\" || brackets.charAt(i) == \"]\" || brackets.charAt(i) == \"}\") {\n                closeBracketStack = closeBracketStack.prepend(brackets.charAt(i))\n                closeBracket += 1\n            }\n            if (openBracket > 0 && closeBracket > 0) {\n                if (openBracketStack.head != brackets.charAt(i) || closeBracketStack.head != brackets.charAt(i)) {\n                    return false\n                }\n                openBracketStack = openBracketStack.tail\n                closeBracketStack = closeBracketStack.tail\n                openBracket -= 1\n                closeBracket -= 1\n            }\n        }\n        return openBracket == 0 && closeBracket == 0",
    "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == \"(\" || brackets.charAt(i) == \")\") {\n                stack.push(brackets.charAt(i))\n            } else {\n                if (stack.isEmpty()) {\n                    return false\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        return stack.isEmpty()",
    "        if (brackets.length == 0) {\n            return true\n        } else {\n            return correctBracketing(brackets.substring(1, brackets.length - 1)) && brackets.charAt(0) == \"(\" && brackets.charAt(brackets.length - 1) == \")\"\n        }",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == '(') {\n                openBrackets += 1\n            } else if (brackets[i] == ')') {\n                closeBrackets += 1\n            }\n        }\n        return openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openingBrackets = 0\n        var closingBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets[i] == \"(\" && openingBrackets == 0) {\n                openingBrackets += 1\n            } else if (brackets[i] == \")\" && openingBrackets > 0) {\n                openingBrackets -= 1\n            } else if (brackets[i] == \")\" && openingBrackets == 0) {\n                closingBrackets += 1\n            }\n            i += 1\n        }\n        return openingBrackets == closingBrackets",
    "        if (brackets.isEmpty()) {\n            return true\n        } else {\n            return correctBracketing(brackets.substring(1, brackets.length() - 1)) && brackets.charAt(0) == '(' && brackets.charAt(brackets.length() - 1) == ')'\n        }",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBracket = 0\n        var closeBracket = 0\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets[i] == \"(\" && openBracket == 0) {\n                openBracket = 1\n                openBrackets += 1\n            } else if (brackets[i] == \")\" && closeBracket == 0) {\n                closeBracket = 1\n                closeBrackets += 1\n            } else if (brackets[i] == \"(\" && closeBracket == 1) {\n                openBracket = 0\n                openBrackets -= 1\n            } else if (brackets[i] == \")\" && openBracket == 1) {\n                closeBracket = 0\n                closeBrackets -= 1\n            }\n            i += 1\n        }\n        return openBrackets == 0 && closeBrackets == 0",
    "        var openingBrackets = 0\n        var closingBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openingBrackets += 1\n            } else {\n                assert brackets[i] == \")\"\n                closingBrackets += 1\n            }\n            if (openingBrackets == 0) {\n                return false\n            }\n            if (closingBrackets == 0) {\n                return false\n            }\n        }\n        return true",
    "        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == '(') openBrackets += 1\n            if (brackets[i] == ')') closeBrackets += 1\n            if (openBrackets == closeBrackets) {\n                openBrackets = 0\n                closeBrackets = 0\n            }\n        }\n        openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else {\n                closeBrackets += 1\n            }\n            if (openBrackets == closeBrackets) {\n                return true\n            }\n        }\n        return false",
    "        if (brackets.length == 0) {\n            return true\n        }\n        if (brackets.charAt(0) != '(') {\n            return false\n        }\n        if (brackets.charAt(brackets.length - 1) != ')') {\n            return false\n        }\n        var i = 1\n        while (i < brackets.length - 1) {\n            if (brackets.charAt(i) != '(') {\n                return false\n            }\n            if (brackets.charAt(i + 1) != ')') {\n                return false\n            }\n            i += 2\n        }\n        return true",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\" && openBrackets == 0) {\n                openBrackets += 1\n            }\n            if (brackets[i] == \")\" && openBrackets > 0) {\n                openBrackets -= 1\n            }\n            if (brackets[i] == \")\" && closeBrackets == 0) {\n                closeBrackets += 1\n            }\n        }\n        return openBrackets == 0 && closeBrackets == 0",
    "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == \"(\" || brackets.charAt(i) == \"{\" || brackets.charAt(i) == \"[\") {\n                stack.push(brackets.charAt(i))\n            } else {\n                if (stack.isEmpty()) {\n                    return false\n                } else {\n                    if (brackets.charAt(i) != stack.pop()) {\n                        return false\n                    }\n                }\n            }\n        }\n        return stack.isEmpty()",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\" && openBrackets == 0) {\n                openBrackets += 1\n            }\n            if (brackets[i] == \")\" && openBrackets > 0) {\n                openBrackets -= 1\n            }\n            if (brackets[i] == \")\" && openBrackets == 0) {\n                closeBrackets += 1\n            }\n        }\n        return openBrackets == closeBrackets",
    "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == '(') {\n                stack.push(brackets.substring(i, i + 1))\n            } else {\n                if (stack.isEmpty()) {\n                    return false\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        return stack.isEmpty()",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets[i] == '(') {\n                openBrackets += 1\n            } else if (brackets[i] == ')') {\n                closeBrackets += 1\n            }\n            i += 1\n        }\n        return openBrackets == closeBrackets",
    "        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == '(') openBrackets += 1\n            if (brackets[i] == ')') closeBrackets += 1\n        }\n        openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openingBracket = brackets.charAt(0)\n        var closingBracket = brackets.charAt(brackets.length - 1)\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n        var isCorrect = openingBracketIndex == closingBracketIndex\n        if (isCorrect) {\n            return correctBracketing(brackets.substring(1, brackets.length - 1))\n        } else {\n            return false\n        }",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets[i] == \"(\" && openBrackets == 0) {\n                openBrackets += 1\n            } else if (brackets[i] == \")\" && openBrackets > 0) {\n                openBrackets -= 1\n            } else if (brackets[i] == \")\" && openBrackets == 0) {\n                closeBrackets += 1\n            }\n            i += 1\n        }\n        return openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\" && openBrackets == 0) {\n                openBrackets += 1\n            } else if (brackets[i] == \")\" && openBrackets > 0) {\n                openBrackets -= 1\n            } else if (brackets[i] == \"(\" && openBrackets > 0) {\n                return false\n            }\n        }\n        return openBrackets == 0",
    "        if (brackets.length == 0) {\n            return true\n        }\n        if (brackets.charAt(0) != '(') {\n            return false\n        }\n        if (brackets.charAt(brackets.length - 1) != ')') {\n            return false\n        }\n        var openBrackets = 0\n        var i = 0\n        while (i < brackets.length - 1) {\n            if (brackets.charAt(i) == '(') {\n                openBrackets += 1\n            }\n            if (brackets.charAt(i) == ')') {\n                openBrackets -= 1\n            }\n            i += 1\n        }\n        return openBrackets == 0",
    "        if (brackets.isEmpty()) {\n            return true\n        }\n        var openingBracket = brackets.charAt(0)\n        var closingBracket = brackets.charAt(brackets.length - 1)\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n        if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n            return false\n        }\n        var openingBracketCount = 1\n        var closingBracketCount = 1\n        for (i <- openingBracketIndex + 1 to brackets.length - 1) {\n            if (brackets.charAt(i) == openingBracket) {\n                openingBracketCount += 1\n            } else {\n                break\n            }\n        }\n        for (i <- closingBracketIndex - 1 to 0) {\n            if (brackets.charAt(i) == closingBracket) {\n                closingBracketCount += 1\n            } else {\n                break\n            }\n        }\n        return openingBracketCount == closingBracketCount",
    "        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == '(') {\n                openBrackets += 1\n            } else {\n                closeBrackets += 1\n            }\n            if (openBrackets == closeBrackets) {\n                return true\n            }\n        }\n        return false",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else {\n                closeBrackets += 1\n            }\n            if (openBrackets == closeBrackets) {\n                return true\n            }\n        }\n        return false",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else {\n                closeBrackets += 1\n            }\n            if (openBrackets == closeBrackets) {\n                return true\n            }\n        }\n        return false",
    "        if (brackets.length == 0) {\n            return true\n        }\n        if (brackets.charAt(0) != '(') {\n            return false\n        }\n        if (brackets.charAt(brackets.length - 1) != ')') {\n            return false\n        }\n        var i = 1\n        while (i < brackets.length - 1) {\n            if (brackets.charAt(i) != '(') {\n                return false\n            }\n            if (brackets.charAt(i + 1) != ')') {\n                return false\n            }\n            i += 2\n        }\n        return true",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBracket = brackets.charAt(0)\n        var closeBracket = brackets.charAt(brackets.length - 1)\n        var openBracketIndex = brackets.indexOf(openBracket)\n        var closeBracketIndex = brackets.lastIndexOf(closeBracket)\n        if (openBracketIndex == -1 || closeBracketIndex == -1) {\n            return false\n        }\n        if (openBracketIndex > closeBracketIndex) {\n            return false\n        }\n        var i = openBracketIndex + 1\n        while (i < brackets.length - 1) {\n            if (brackets.charAt(i) != openBracket) {\n                return false\n            }\n            i = i + 1\n        }\n        return true",
    "        if (brackets.length == 0) {\n            return true\n        }\n        if (brackets.length == 1) {\n            return false\n        }\n        if (brackets.charAt(0) == '(' && brackets.charAt(brackets.length - 1) == ')') {\n            return true\n        }\n        if (brackets.charAt(0) == '(' && brackets.charAt(brackets.length - 1) == ')') {\n            return true\n        }\n        return false",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else {\n                closeBrackets += 1\n            }\n            if (openBrackets == closeBrackets) {\n                return true\n            }\n        }\n        return false",
    "        if (brackets.length == 0) {\n            return true\n        }\n        if (brackets.charAt(0) != '(') {\n            return false\n        }\n        if (brackets.charAt(brackets.length - 1) != ')') {\n            return false\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (var i = 1; i < brackets.length - 1; i++) {\n            if (brackets.charAt(i) == '(') {\n                openBrackets += 1\n            } else if (brackets.charAt(i) == ')') {\n                closeBrackets += 1\n            }\n        }\n        if (openBrackets != closeBrackets) {\n            return false\n        }\n        return correctBracketing(brackets.substring(1, brackets.length - 1))",
    "        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else if (brackets[i] == \")\") {\n                closeBrackets += 1\n            }\n        }\n        return openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openingBracket = brackets.charAt(0)\n        var closingBracket = brackets.charAt(brackets.length - 1)\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n        if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n            return false\n        }\n        var openingBracketCount = 1\n        var closingBracketCount = 1\n        for (i <- brackets.length - 1) {\n            if (brackets.charAt(i) == openingBracket) {\n                openingBracketCount += 1\n            } else if (brackets.charAt(i) == closingBracket) {\n                closingBracketCount += 1\n            }\n            if (openingBracketCount == closingBracketCount) {\n                openingBracketCount = 0\n                closingBracketCount = 0\n            }\n        }\n        return openingBracketCount == 0",
    "        if (brackets.length == 0) {\n            return true\n        }\n        if (brackets.length == 1) {\n            return false\n        }\n        if (brackets.charAt(0) != \"(\" || brackets.charAt(brackets.length - 1) != \")\") {\n            return false\n        }\n        var openBrackets = 0\n        var i = 0\n        while (i < brackets.length - 1) {\n            if (brackets.charAt(i) == \"(\" && brackets.charAt(i + 1) == \")\") {\n                openBrackets += 1\n                i += 2\n            } else {\n                i += 1\n            }\n        }\n        return openBrackets == 0",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openingBracket = brackets.charAt(0)\n        var closingBracket = brackets.charAt(brackets.length - 1)\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n        if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n            return false\n        }\n        if (openingBracketIndex > closingBracketIndex) {\n            return false\n        }\n        var openingBracketCount = 1\n        var closingBracketCount = 1\n        for (var i = 1; i < brackets.length - 1; i++) {\n            if (brackets.charAt(i) == openingBracket) {\n                openingBracketCount += 1\n            }\n            if (brackets.charAt(i) == closingBracket) {\n                closingBracketCount += 1\n            }\n            if (openingBracketCount == closingBracketCount) {\n                openingBracketCount = 1\n                closingBracketCount = 1\n            }\n        }\n        return openingBracketCount == closingBracketCount",
    "        if (brackets.length == 0) {\n            return true\n        } else {\n            return (brackets.charAt(0) == '(') && correctBracketing(brackets.substring(1))\n        }",
    "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\" || brackets[i] == \"{\" || brackets[i] == \"[\") {\n                stack.push(brackets[i])\n            } else if (brackets[i] == \")\" || brackets[i] == \"}\" || brackets[i] == \"]\") {\n                if (stack.isEmpty()) {\n                    return false\n                } else if (brackets[i] != stack.pop()) {\n                    return false\n                }\n            }\n        }\n        return stack.isEmpty()",
    "        var openingBrackets = 0\n        var closingBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openingBrackets += 1\n            } else if (brackets[i] == \")\") {\n                closingBrackets += 1\n            }\n        }\n        openingBrackets == closingBrackets",
    "        if (brackets.length == 0) {\n            return true\n        } else {\n            return brackets.substring(0, 1) == \"(\" && brackets.substring(brackets.length - 1) == \")\" && correctBracketing(brackets.substring(1, brackets.length - 1))\n        }",
    "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == \"(\" || brackets.charAt(i) == \"{\" || brackets.charAt(i) == \"[\") {\n                stack.push(brackets.charAt(i))\n            } else if (brackets.charAt(i) == \")\" || brackets.charAt(i) == \"}\" || brackets.charAt(i) == \"]\") {\n                if (stack.isEmpty()) {\n                    return false\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        return stack.isEmpty()",
    "        if (brackets.length == 0) {\n            return true\n        }\n        if (brackets.charAt(0) != '(') {\n            return false\n        }\n        if (brackets.charAt(brackets.length - 1) != ')') {\n            return false\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (var i = 1; i < brackets.length - 1; i++) {\n            if (brackets.charAt(i) == '(') {\n                openBrackets += 1\n            } else if (brackets.charAt(i) == ')') {\n                closeBrackets += 1\n            }\n        }\n        if (openBrackets != closeBrackets) {\n            return false\n        }\n        return correctBracketing(brackets.substring(1, brackets.length - 1))",
    "        if (brackets.length == 0) {\n            return true\n        } else {\n            var openingBracket = brackets.charAt(0)\n            var closingBracket = brackets.charAt(brackets.length - 1)\n            var openingBracketIndex = brackets.indexOf(openingBracket)\n            var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n            if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n                return false\n            } else {\n                return correctBracketing(brackets.substring(openingBracketIndex + 1, closingBracketIndex))\n            }\n        }",
    "        var openingBrackets = 0\n        var closingBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == '(') {\n                openingBrackets += 1\n            } else {\n                assert brackets[i] == ')'\n                closingBrackets += 1\n            }\n            if (openingBrackets == 0 || closingBrackets == 0) {\n                return false\n            }\n        }\n        return true",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openingBracket = brackets.charAt(0)\n        var closingBracket = brackets.charAt(brackets.length - 1)\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n        if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n            return false\n        }\n        var openingBracketCount = 1\n        var closingBracketCount = 1\n        for (i <- openingBracketIndex + 1 to brackets.length - 1) {\n            if (brackets.charAt(i) == openingBracket) {\n                openingBracketCount += 1\n            } else {\n                break\n            }\n        }\n        for (i <- closingBracketIndex - 1 to 0) {\n            if (brackets.charAt(i) == closingBracket) {\n                closingBracketCount += 1\n            } else {\n                break\n            }\n        }\n        return openingBracketCount == closingBracketCount",
    "        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else {\n                assert(brackets[i] == \")\")\n                closeBrackets += 1\n            }\n            if (openBrackets == closeBrackets) {\n                return true\n            }\n        }\n        return false",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else if (brackets[i] == \")\") {\n                closeBrackets += 1\n            }\n        }\n        return openBrackets == closeBrackets",
    "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == \"(\") {\n                stack.push(brackets.substring(i, i + 1))\n            } else {\n                if (stack.isEmpty()) {\n                    return false\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        return stack.isEmpty()",
    "        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else {\n                closeBrackets += 1\n            }\n            if (openBrackets == closeBrackets) {\n                return true\n            }\n        }\n        return false",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var stack = mutable.Stack[String]()\n        var openBrackets = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\" || brackets[i] == \"[\" || brackets[i] == \"{\") {\n                openBrackets.push(brackets[i])\n            } else {\n                if (openBrackets.isEmpty()) {\n                    return false\n                }\n                var top = openBrackets.pop()\n                if (top != brackets[i]) {\n                    return false\n                }\n            }\n        }\n        return true",
    "        var openingBrackets = 0\n        var closingBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openingBrackets += 1\n            } else if (brackets[i] == \")\") {\n                closingBrackets += 1\n            }\n        }\n        openingBrackets == closingBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == '(') {\n                stack.push(brackets.substring(0, i))\n            } else {\n                if (stack.isEmpty()) {\n                    return false\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        return stack.isEmpty()",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else if (brackets[i] == \")\") {\n                closeBrackets += 1\n            }\n            i += 1\n        }\n        return openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBracket = brackets.charAt(0)\n        var closeBracket = brackets.charAt(brackets.length - 1)\n        var openBracketIndex = brackets.indexOf(openBracket)\n        var closeBracketIndex = brackets.lastIndexOf(closeBracket)\n        if (openBracketIndex == -1 || closeBracketIndex == -1) {\n            return false\n        }\n        if (openBracketIndex > closeBracketIndex) {\n            return false\n        }\n        var i = 0\n        while (i < brackets.length - 1) {\n            var nextOpenBracket = brackets.charAt(i + 1)\n            var nextCloseBracket = brackets.charAt(i + brackets.length - 1)\n            if (nextOpenBracket == openBracket && nextCloseBracket == closeBracket) {\n                i += 2\n            } else {\n                return false\n            }\n        }\n        return true",
    "        if (brackets.length == 0) {\n            return true\n        }\n        if (brackets.length == 1) {\n            return false\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\" && openBrackets == 0) {\n                openBrackets += 1\n            } else if (brackets[i] == \")\" && openBrackets > 0) {\n                openBrackets -= 1\n            } else if (brackets[i] == \"(\" && openBrackets > 0) {\n                return false\n            }\n        }\n        return openBrackets == 0",
    "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == \"(\") {\n                stack.push(\"(\")\n            } else {\n                if (stack.isEmpty()) {\n                    return false\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        return stack.isEmpty()",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openingBrackets = 0\n        var closingBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\" && openingBrackets == 0) {\n                openingBrackets += 1\n            } else if (brackets[i] == \")\" && openingBrackets > 0) {\n                openingBrackets -= 1\n            } else if (brackets[i] == \")\" && openingBrackets == 0) {\n                closingBrackets += 1\n            } else if (brackets[i] == \"(\" && openingBrackets > 0) {\n                closingBrackets -= 1\n            }\n        }\n        return openingBrackets == 0 && closingBrackets == 0",
    "        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else {\n                assert(brackets[i] == \")\")\n                closeBrackets += 1\n            }\n            if (openBrackets == closeBrackets) {\n                return true\n            }\n        }\n        return false",
    "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == '(') {\n                stack.push(brackets.substring(i, i + 1))\n            } else {\n                if (stack.isEmpty()) {\n                    return false\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        return stack.isEmpty()",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openingBracket = brackets.charAt(0)\n        var closingBracket = brackets.charAt(brackets.length - 1)\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n        if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n            return false\n        }\n        if (openingBracketIndex == closingBracketIndex) {\n            return false\n        }\n        if (openingBracketIndex > closingBracketIndex) {\n            return false\n        }\n        if (openingBracketIndex == 0) {\n            return false\n        }\n        return true",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openingBracket = brackets.charAt(0)\n        var closingBracket = brackets.charAt(brackets.length - 1)\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n        if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n            return false\n        }\n        if (openingBracketIndex > closingBracketIndex) {\n            return false\n        }\n        var i = openingBracketIndex + 1\n        while (i < brackets.length - 1) {\n            if (brackets.charAt(i) != '(') {\n                return false\n            }\n            i = i + 1\n        }\n        return true",
    "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == \"(\" || brackets.charAt(i) == \"{\") {\n                stack.push(brackets.charAt(i))\n            } else {\n                if (brackets.charAt(i) == \")\" || brackets.charAt(i) == \"}\") {\n                    if (stack.isEmpty()) {\n                        return false\n                    } else {\n                        stack.pop()\n                    }\n                }\n            }\n        }\n        return stack.isEmpty()",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openingBracket = brackets.charAt(0)\n        var closingBracket = brackets.charAt(brackets.length - 1)\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n        var isCorrect = openingBracketIndex == closingBracketIndex\n        if (isCorrect) {\n            return correctBracketing(brackets.substring(1, brackets.length - 1))\n        } else {\n            return false\n        }",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else if (brackets[i] == \")\") {\n                closeBrackets += 1\n            }\n        }\n        if (openBrackets != closeBrackets) {\n            return false\n        }\n        for (i <- 0 until brackets.length - 1) {\n            if (brackets[i] == \"(\" && brackets[i + 1] != \")\") {\n                return false\n            }\n        }\n        return true",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets[i] == \"(\" && openBrackets == 0) {\n                openBrackets += 1\n            } else if (brackets[i] == \")\" && openBrackets > 0) {\n                openBrackets -= 1\n            } else if (brackets[i] == \"(\" && openBrackets > 0) {\n                return false\n            }\n            i += 1\n        }\n        return openBrackets == 0",
    "        var openingBrackets = 0\n        var closingBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\" && openingBrackets == 0) {\n                openingBrackets += 1\n            } else if (brackets[i] == \")\" && openingBrackets > 0) {\n                openingBrackets -= 1\n            } else if (brackets[i] == \")\" && openingBrackets == 0) {\n                closingBrackets += 1\n            } else if (brackets[i] == \"(\" && openingBrackets > 0) {\n                closingBrackets -= 1\n            }\n        }\n        openingBrackets == 0 && closingBrackets == 0",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\" || brackets[i] == \"[\" || brackets[i] == \"{\") {\n                stack.push(brackets[i])\n            } else {\n                if (stack.isEmpty()) {\n                    return false\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        return stack.isEmpty()",
    "        if (brackets.length == 0) {\n            return true\n        } else {\n            return (brackets.charAt(0) == '(') && correctBracketing(brackets.substring(1))\n        }",
    "        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == '(') {\n                openBrackets += 1\n            } else {\n                closeBrackets += 1\n            }\n            if (openBrackets == closeBrackets) {\n                return true\n            }\n        }\n        return false",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets.charAt(i) == \"(\" || brackets.charAt(i) == \"[\" || brackets.charAt(i) == \"{\") {\n                openBrackets += 1\n            } else if (brackets.charAt(i) == \")\" || brackets.charAt(i) == \"]\" || brackets.charAt(i) == \"}\") {\n                closeBrackets += 1\n            }\n            i += 1\n        }\n        return openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        if (brackets.charAt(0) == '(') {\n            return correctBracketing(brackets.substring(1))\n        }\n        if (brackets.charAt(brackets.length - 1) == ')') {\n            return correctBracketing(brackets.substring(0, brackets.length - 1))\n        }\n        return false",
    "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == \"(\" || brackets.charAt(i) == \")\") {\n                stack.push(brackets.charAt(i))\n            } else if (brackets.charAt(i) == \")\") {\n                if (stack.isEmpty()) {\n                    return false\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        return stack.isEmpty()",
    "        if (brackets.isEmpty()) {\n            return true\n        } else {\n            return correctBracketing(brackets.substring(1, brackets.length() - 1)) && brackets.charAt(0) == \"(\" && brackets.charAt(brackets.length() - 1) == \")\"\n        }",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets[i] == '(') {\n                openBrackets += 1\n            } else {\n                closeBrackets += 1\n            }\n            i += 1\n        }\n        return openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets[i] == '(') {\n                openBrackets += 1\n            } else {\n                closeBrackets += 1\n            }\n            i += 1\n        }\n        if (openBrackets == closeBrackets) {\n            return true\n        } else {\n            return false\n        }",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets[i] == \"(\" && openBrackets == 0) {\n                openBrackets += 1\n            } else if (brackets[i] == \")\" && openBrackets > 0) {\n                openBrackets -= 1\n            } else if (brackets[i] == \")\" && openBrackets == 0) {\n                closeBrackets += 1\n            }\n            i += 1\n        }\n        return openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openingBracket = brackets.charAt(0)\n        var closingBracket = brackets.charAt(brackets.length - 1)\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n        if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n            return false\n        }\n        var openingBracketCount = 1\n        var closingBracketCount = 1\n        for (i <- openingBracketIndex + 1 to brackets.length - 1) {\n            if (brackets.charAt(i) == openingBracket) {\n                openingBracketCount += 1\n            } else {\n                openingBracketCount = 1\n            }\n            if (brackets.charAt(i) == closingBracket) {\n                closingBracketCount += 1\n            } else {\n                closingBracketCount = 1\n            }\n            if (openingBracketCount == closingBracketCount) {\n                continue\n            } else {\n                return false\n            }\n        }\n        return true",
    "        if (brackets.length == 0) {\n            return true\n        }\n        if (brackets.length == 1) {\n            return false\n        }\n        if (brackets.charAt(0) == '(' && brackets.charAt(brackets.length - 1) == ')') {\n            return true\n        }\n        if (brackets.charAt(0) == '(' && brackets.charAt(brackets.length - 1) != ')') {\n            return false\n        }\n        if (brackets.charAt(0) != '(' && brackets.charAt(brackets.length - 1) == ')') {\n            return false\n        }\n        return correctBracketing(brackets.substring(1, brackets.length - 1)) && correctBracketing(brackets.substring(0, 1))",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets[i] == \"(\" && openBrackets == 0) {\n                openBrackets += 1\n            } else if (brackets[i] == \")\" && openBrackets > 0) {\n                openBrackets -= 1\n            } else if (brackets[i] == \")\" && openBrackets == 0) {\n                closeBrackets += 1\n            }\n            i += 1\n        }\n        return openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        if (brackets.length == 1) {\n            return false\n        }\n        if (brackets.charAt(0) == '(' && brackets.charAt(brackets.length - 1) == ')') {\n            return true\n        }\n        if (brackets.charAt(0) == '(' && brackets.charAt(brackets.length - 1) == ')') {\n            return true\n        }\n        return false",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets.charAt(i) == '(') {\n                openBrackets += 1\n            } else {\n                closeBrackets += 1\n            }\n            i += 1\n        }\n        return openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else {\n                closeBrackets += 1\n            }\n            if (openBrackets == closeBrackets) {\n                return true\n            }\n        }\n        return false",
    "        if (brackets.isEmpty()) {\n            return true\n        }\n        var openingBracket = brackets.charAt(0)\n        var closingBracket = brackets.charAt(brackets.length - 1)\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n        if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n            return false\n        }\n        var openingBracketCount = 1\n        var closingBracketCount = 1\n        for (var i = openingBracketIndex + 1; i < brackets.length - 1; i++) {\n            if (brackets.charAt(i) == openingBracket) {\n                openingBracketCount += 1\n            } else {\n                break\n            }\n        }\n        for (var i = closingBracketIndex - 1; i >= 0; i--) {\n            if (brackets.charAt(i) == closingBracket) {\n                closingBracketCount += 1\n            } else {\n                break\n            }\n        }\n        return openingBracketCount == closingBracketCount",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openingBracket = brackets.charAt(0)\n        var closingBracket = brackets.charAt(brackets.length - 1)\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n        if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n            return false\n        }\n        var openingBracketCount = 1\n        var closingBracketCount = 1\n        for (var i = 1; i < brackets.length - 1; i++) {\n            if (brackets.charAt(i) == openingBracket) {\n                openingBracketCount += 1\n            } else if (brackets.charAt(i) == closingBracket) {\n                closingBracketCount += 1\n            }\n            if (openingBracketCount == closingBracketCount) {\n                openingBracketCount = 1\n                closingBracketCount = 1\n            }\n        }\n        return openingBracketCount == closingBracketCount",
    "        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else if (brackets[i] == \")\") {\n                closeBrackets += 1\n            }\n        }\n        openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else if (brackets[i] == \")\") {\n                closeBrackets += 1\n            }\n            i += 1\n        }\n        if (openBrackets == closeBrackets) {\n            return true\n        } else {\n            return false\n        }",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else {\n                closeBrackets += 1\n            }\n            if (openBrackets == closeBrackets) {\n                return true\n            }\n        }\n        return false",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openingBracket = brackets.charAt(0)\n        var closingBracket = brackets.charAt(brackets.length - 1)\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n        if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n            return false\n        }\n        if (openingBracketIndex > closingBracketIndex) {\n            return false\n        }\n        if (openingBracketIndex == 0 && closingBracketIndex == brackets.length - 1) {\n            return true\n        }\n        return correctBracketing(brackets.substring(openingBracketIndex + 1, closingBracketIndex))",
    "        if (brackets.length == 0) {\n            return true\n        }\n        if (brackets.length == 1) {\n            return false\n        }\n        if (brackets.charAt(0) != \"(\" || brackets.charAt(brackets.length - 1) != \")\") {\n            return false\n        }\n        var openBrackets = 0\n        var i = 0\n        while (i < brackets.length - 1) {\n            if (brackets.charAt(i) == \"(\" && brackets.charAt(i + 1) == \")\") {\n                openBrackets += 1\n                i += 2\n            } else {\n                i += 1\n            }\n        }\n        return openBrackets == 0",
    "        if (brackets.length == 0) {\n            return true\n        }\n        if (brackets.length == 1) {\n            return false\n        }\n        if (brackets.charAt(0) == '(' && brackets.charAt(brackets.length - 1) == ')') {\n            return true\n        }\n        if (brackets.charAt(0) == '(' && brackets.charAt(brackets.length - 1) == ')') {\n            return true\n        }\n        return false",
    "        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets.charAt(i) == '(') {\n                openBrackets += 1\n            } else {\n                closeBrackets += 1\n            }\n            i += 1\n        }\n        return openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        if (brackets.charAt(0) == '(') {\n            return correctBracketing(brackets.substring(1))\n        }\n        if (brackets.charAt(brackets.length - 1) == ')') {\n            return correctBracketing(brackets.substring(0, brackets.length - 1))\n        }\n        return false",
    "        if (brackets.isEmpty()) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets[i] == '(') {\n                openBrackets += 1\n            } else if (brackets[i] == ')') {\n                closeBrackets += 1\n            }\n            i += 1\n        }\n        return openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets[i] == '(') {\n                openBrackets += 1\n            } else if (brackets[i] == ')') {\n                closeBrackets += 1\n            }\n            i += 1\n        }\n        return openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else {\n                closeBrackets += 1\n            }\n            i += 1\n        }\n        return openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        } else {\n            return correctBracketing(brackets.substring(1, brackets.length - 1)) && brackets.charAt(0) == \"(\" && brackets.charAt(brackets.length - 1) == \")\"\n        }",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets[i] == \"(\" && openBrackets == 0) {\n                openBrackets += 1\n            } else if (brackets[i] == \")\" && openBrackets > 0) {\n                openBrackets -= 1\n            } else if (brackets[i] == \")\" && openBrackets == 0) {\n                closeBrackets += 1\n            }\n            i += 1\n        }\n        return openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\" && openBrackets == 0) {\n                openBrackets += 1\n            } else if (brackets[i] == \")\" && openBrackets > 0) {\n                openBrackets -= 1\n            } else if (brackets[i] == \")\" && openBrackets == 0) {\n                closeBrackets += 1\n            } else if (brackets[i] == \"(\" && openBrackets > 0) {\n                closeBrackets -= 1\n            }\n        }\n        return openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\" && !stack.isEmpty()) {\n                return false\n            }\n            if (brackets[i] == \")\" && stack.isEmpty()) {\n                return false\n            }\n            if (brackets[i] == \"(\" || brackets[i] == \")\") {\n                stack.push(brackets[i])\n            }\n        }\n        return stack.isEmpty()",
    "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == '(') {\n                stack.push(brackets.substring(i, i + 1))\n            } else {\n                if (stack.isEmpty()) {\n                    return false\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        return stack.isEmpty()",
    "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == \"(\") {\n                stack.push(brackets.substring(i, i + 1))\n            } else {\n                if (stack.isEmpty()) {\n                    return false\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        return stack.isEmpty()",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBracketIndex = 0\n        var closeBracketIndex = 0\n        var openBracket = false\n        var closeBracket = false\n        while (openBracketIndex < brackets.length) {\n            if (brackets[openBracketIndex] == '(') {\n                openBracket = true\n            } else if (brackets[openBracketIndex] == ')') {\n                openBracket = false\n            }\n            if (openBracket) {\n                openBracketIndex += 1\n            } else {\n                closeBracketIndex += 1\n            }\n        }\n        return openBracketIndex == closeBracketIndex",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else {\n                closeBrackets += 1\n            }\n            if (openBrackets == closeBrackets) {\n                return true\n            }\n        }\n        return false",
    "        if (brackets.length == 0) {\n            return true\n        }\n        if (brackets.length == 1) {\n            return false\n        }\n        if (brackets.charAt(0) == '(') {\n            return correctBracketing(brackets.substring(1))\n        }\n        if (brackets.charAt(brackets.length - 1) == ')') {\n            return correctBracketing(brackets.substring(0, brackets.length - 1))\n        }\n        return false",
    "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == '(') {\n                stack.push(brackets.substring(i, i + 1))\n            } else {\n                if (stack.isEmpty()) {\n                    return false\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        return stack.isEmpty()",
    "        if (brackets.length == 0) {\n            return true\n        } else {\n            return correctBracketing(brackets.substring(1, brackets.length - 1)) && brackets.charAt(0) == \"(\" && brackets.charAt(brackets.length - 1) == \")\"\n        }",
    "        if (brackets.length == 0) {\n            return true\n        } else {\n            return correctBracketing(brackets.substring(1, brackets.length - 1)) && brackets.charAt(0) == '(' && brackets.charAt(brackets.length - 1) == ')'\n        }",
    "        if (brackets.length == 0) {\n            return true\n        }\n        if (brackets.charAt(0) != '(') {\n            return false\n        }\n        if (brackets.charAt(brackets.length - 1) != ')') {\n            return false\n        }\n        var openBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets.charAt(i) == '(') {\n                openBrackets += 1\n            } else if (brackets.charAt(i) == ')') {\n                openBrackets -= 1\n            }\n            i += 1\n        }\n        return openBrackets == 0",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var stack = mutable.Stack[String]()\n        var openBrackets = mutable.Stack[String]()\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets.charAt(i) == '(') {\n                openBrackets.push(\"(\" + i)\n            } else {\n                if (openBrackets.isEmpty()) {\n                    return false\n                }\n                var open = openBrackets.pop()\n                var close = brackets.charAt(i) + i\n                if (open != close) {\n                    return false\n                }\n            }\n            i += 1\n        }\n        return true",
    "        if (brackets.length == 0) {\n            return true\n        }\n        if (brackets.charAt(0) != '(') {\n            return false\n        }\n        if (brackets.charAt(brackets.length - 1) != ')') {\n            return false\n        }\n        var openBrackets = 0\n        var i = 0\n        while (i < brackets.length - 1) {\n            if (brackets.charAt(i) == '(') {\n                openBrackets += 1\n            }\n            if (brackets.charAt(i) == ')') {\n                openBrackets -= 1\n            }\n            i += 1\n        }\n        return openBrackets == 0",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var stack = mutable.Stack[String]()\n        var openBrackets = mutable.Stack[String]()\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets.charAt(i) == '(') {\n                stack.push(\"(\")\n                openBrackets.push(\"(\")\n            } else if (brackets.charAt(i) == ')') {\n                if (stack.isEmpty()) {\n                    return false\n                }\n                if (openBrackets.isEmpty()) {\n                    return false\n                }\n                if (stack.peek() != openBrackets.peek()) {\n                    return false\n                }\n                stack.pop()\n                openBrackets.pop()\n            }\n            i = i + 1\n        }\n        if (!stack.isEmpty()) {\n            return false\n        }\n        if (!openBrackets.isEmpty()) {\n            return false\n        }\n        return true",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openingBracket = brackets.charAt(0)\n        var closingBracket = brackets.charAt(brackets.length - 1)\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n        if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n            return false\n        }\n        var openingBracketCount = 1\n        var closingBracketCount = 1\n        for (var i = openingBracketIndex + 1; i < brackets.length; i++) {\n            if (brackets.charAt(i) == openingBracket) {\n                openingBracketCount += 1\n            } else {\n                break\n            }\n        }\n        for (var i = closingBracketIndex - 1; i >= 0; i--) {\n            if (brackets.charAt(i) == closingBracket) {\n                closingBracketCount += 1\n            } else {\n                break\n            }\n        }\n        return openingBracketCount == closingBracketCount",
    "        if (brackets.length == 0) {\n            return true\n        } else {\n            var openBracket = brackets.charAt(0)\n            var closeBracket = brackets.charAt(brackets.length - 1)\n            var openBracketIndex = brackets.indexOf(openBracket)\n            var closeBracketIndex = brackets.lastIndexOf(closeBracket)\n            if (openBracketIndex == closeBracketIndex) {\n                return correctBracketing(brackets.substring(1, brackets.length - 1))\n            } else {\n                return false\n            }\n        }",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openingBracket = brackets.charAt(0)\n        var closingBracket = brackets.charAt(brackets.length - 1)\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n        if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n            return false\n        }\n        if (openingBracketIndex > closingBracketIndex) {\n            return false\n        }\n        if (openingBracketIndex == 0 && closingBracketIndex == brackets.length - 1) {\n            return true\n        }\n        return correctBracketing(brackets.substring(0, openingBracketIndex) + brackets.substring(openingBracketIndex + 1, closingBracketIndex)) &&\n            correctBracketing(brackets.substring(closingBracketIndex + 1))",
    "        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else {\n                assert(brackets[i] == \")\")\n                closeBrackets += 1\n            }\n            if (openBrackets == closeBrackets) {\n                return true\n            }\n        }\n        return false",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets.charAt(i) == '(') {\n                openBrackets += 1\n            } else if (brackets.charAt(i) == ')') {\n                closeBrackets += 1\n            }\n            i += 1\n        }\n        return openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets[i] == \"(\" && openBrackets == 0) {\n                openBrackets += 1\n            } else if (brackets[i] == \")\" && openBrackets > 0) {\n                openBrackets -= 1\n            } else if (brackets[i] == \")\" && openBrackets == 0) {\n                closeBrackets += 1\n            }\n            i += 1\n        }\n        return openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        } else {\n            var openBracket = brackets.charAt(0)\n            var closeBracket = brackets.charAt(brackets.length - 1)\n            var openBracketIndex = brackets.indexOf(openBracket)\n            var closeBracketIndex = brackets.lastIndexOf(closeBracket)\n            if (openBracketIndex == -1 || closeBracketIndex == -1) {\n                return false\n            } else {\n                return correctBracketing(brackets.substring(0, openBracketIndex) + brackets.substring(closeBracketIndex + 1))\n            }\n        }",
    "        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else if (brackets[i] == \")\") {\n                closeBrackets += 1\n            }\n        }\n        openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openingBracket = brackets[0]\n        var closingBracket = brackets[1]\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.indexOf(closingBracket)\n        if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n            return false\n        }\n        var openingBracketCount = 1\n        var closingBracketCount = 1\n        for (var i = openingBracketIndex + 1; i < brackets.length; i++) {\n            if (brackets[i] == openingBracket) {\n                openingBracketCount += 1\n            } else if (brackets[i] == closingBracket) {\n                closingBracketCount += 1\n            }\n            if (openingBracketCount == closingBracketCount) {\n                openingBracketCount = 0\n                closingBracketCount = 0\n            }\n        }\n        return openingBracketCount == 0",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets[i] == \"(\" && openBrackets == 0) {\n                openBrackets += 1\n            } else if (brackets[i] == \")\" && openBrackets > 0) {\n                openBrackets -= 1\n            } else if (brackets[i] == \")\" && openBrackets == 0) {\n                closeBrackets += 1\n            }\n            i += 1\n        }\n        return openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        if (brackets.length == 1) {\n            return false\n        }\n        if (brackets.charAt(0) != \"(\" || brackets.charAt(brackets.length - 1) != \")\") {\n            return false\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (var i = 0; i < brackets.length; i++) {\n            if (brackets.charAt(i) == \"(\") {\n                openBrackets += 1\n            } else {\n                closeBrackets += 1\n            }\n        }\n        if (openBrackets != closeBrackets) {\n            return false\n        }\n        var openBrackets2 = 0\n        var closeBrackets2 = 0\n        for (var i = 0; i < brackets.length - 1; i++) {\n            if (brackets.charAt(i) == \"(\" && brackets.charAt(i + 1) == \")\") {\n                openBrackets2 += 1\n            } else {\n                closeBrackets2 += 1\n            }\n        }\n        if (openBrackets2 != closeBrackets2) {\n            return false\n        }\n        var openBrackets3 = 0\n        var closeBrackets3 = 0\n        for (var i = 0; i < brackets.length - 2; i++) {\n            if (brackets.charAt(i) == \"(\" && brackets.charAt(i + 1) == \")\" && brackets.charAt(i + 2) == \")\") {\n                openBrackets3 += 1\n            } else {\n                closeBrackets3 += 1\n            }\n        }\n        if (openBrackets3 != closeBrackets3) {\n            return false\n        }\n        return true",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets[i] == \"(\" || brackets[i] == \"[\" || brackets[i] == \"{\") {\n                openBrackets += 1\n            } else if (brackets[i] == \")\" || brackets[i] == \"]\" || brackets[i] == \"}\") {\n                closeBrackets += 1\n            }\n            i += 1\n        }\n        return openBrackets == closeBrackets",
    "        var stack = mutable.Stack[String]()\n        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) == '(') {\n                stack.push(brackets.substring(i, i + 1))\n            } else {\n                if (stack.isEmpty()) {\n                    return false\n                } else {\n                    stack.pop()\n                }\n            }\n        }\n        return stack.isEmpty()",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets.charAt(i) == '(') {\n                openBrackets += 1\n            } else if (brackets.charAt(i) == ')') {\n                closeBrackets += 1\n            }\n            i += 1\n        }\n        if (openBrackets == closeBrackets) {\n            return true\n        } else {\n            return false\n        }",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBracket = 0\n        var closeBracket = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBracket += 1\n            } else if (brackets[i] == \")\") {\n                closeBracket += 1\n            }\n            i += 1\n        }\n        return openBracket == closeBracket",
    "        if (brackets.length == 0) {\n            return true\n        }\n        if (brackets.charAt(0) == '(') {\n            return correctBracketing(brackets.substring(1))\n        }\n        if (brackets.charAt(brackets.length - 1) == ')') {\n            return correctBracketing(brackets.substring(0, brackets.length - 1))\n        }\n        return false",
    "        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == '(') {\n                openBrackets += 1\n            } else {\n                closeBrackets += 1\n            }\n            if (openBrackets == closeBrackets) {\n                return true\n            }\n        }\n        return false",
    "        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) != '(') {\n                return false\n            }\n        }\n        for (i <- brackets.length - 1 until 0) {\n            if (brackets.charAt(i) != ')') {\n                return false\n            }\n        }\n        return true",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets[i] == \"(\" && openBrackets == 0) {\n                openBrackets += 1\n            } else if (brackets[i] == \")\" && openBrackets > 0) {\n                openBrackets -= 1\n            } else if (brackets[i] == \"(\" && openBrackets > 0) {\n                return false\n            }\n            i += 1\n        }\n        return openBrackets == 0",
    "        var openingBrackets = 0\n        var closingBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == '(') {\n                openingBrackets += 1\n            } else {\n                assert(brackets[i] == ')')\n                closingBrackets += 1\n            }\n            if (openingBrackets == 0) {\n                return false\n            }\n            if (closingBrackets == 0) {\n                return false\n            }\n        }\n        return true",
    "        var openingBrackets = 0\n        var closingBrackets = 0\n        var i = 0\n        while (i < brackets.length) {\n            if (brackets.charAt(i) == '(') {\n                openingBrackets += 1\n            } else {\n                assert(brackets.charAt(i) == ')')\n                closingBrackets += 1\n            }\n            i += 1\n        }\n        return openingBrackets == closingBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        if (brackets.length == 1) {\n            return false\n        }\n        var openingBracket = brackets.charAt(0)\n        var closingBracket = brackets.charAt(brackets.length - 1)\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.lastIndexOf(closingBracket)\n        if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n            return false\n        }\n        if (openingBracketIndex == closingBracketIndex) {\n            return false\n        }\n        if (openingBracketIndex > closingBracketIndex) {\n            return false\n        }\n        if (openingBracketIndex == 0) {\n            return false\n        }\n        if (closingBracketIndex == brackets.length - 1) {\n            return false\n        }\n        if (closingBracketIndex == brackets.length - 2) {\n            return false\n        }\n        return true",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBracket = brackets.charAt(0)\n        var closeBracket = brackets.charAt(brackets.length - 1)\n        var openBracketIndex = 0\n        var closeBracketIndex = brackets.length - 1\n        var isOpenBracket = true\n        while (openBracketIndex < brackets.length) {\n            if (isOpenBracket) {\n                if (brackets.charAt(openBracketIndex) != openBracket) {\n                    return false\n                }\n                openBracketIndex += 1\n            } else {\n                if (brackets.charAt(closeBracketIndex) != closeBracket) {\n                    return false\n                }\n                closeBracketIndex -= 1\n            }\n            isOpenBracket = !isOpenBracket\n        }\n        return true",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\" && openBrackets == 0) {\n                openBrackets += 1\n            } else if (brackets[i] == \")\" && openBrackets > 0) {\n                openBrackets -= 1\n            } else if (brackets[i] == \")\" && openBrackets == 0) {\n                closeBrackets += 1\n            }\n        }\n        return openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        } else {\n            return correctBracketing(brackets.substring(1, brackets.length - 1)) && brackets.charAt(0) == '(' && brackets.charAt(brackets.length - 1) == ')'\n        }",
    "        if (brackets.length == 0) {\n            return true\n        }\n        if (brackets.length == 1) {\n            return false\n        }\n        if (brackets.charAt(0) != '(' || brackets.charAt(brackets.length - 1) != ')') {\n            return false\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (var i = 0; i < brackets.length; i++) {\n            if (brackets.charAt(i) == '(') {\n                openBrackets += 1\n            } else {\n                closeBrackets += 1\n            }\n        }\n        if (openBrackets != closeBrackets) {\n            return false\n        }\n        var openBrackets2 = 0\n        var closeBrackets2 = 0\n        for (var i = 0; i < brackets.length - 1; i++) {\n            if (brackets.charAt(i) == '(') {\n                openBrackets2 += 1\n            } else {\n                closeBrackets2 += 1\n            }\n        }\n        if (openBrackets2 != closeBrackets2) {\n            return false\n        }\n        var openBrackets3 = 0\n        var closeBrackets3 = 0\n        for (var i = 0; i < brackets.length - 2; i++) {\n            if (brackets.charAt(i) == '(') {\n                openBrackets3 += 1\n            } else {\n                closeBrackets3 += 1\n            }\n        }\n        if (openBrackets3 != closeBrackets3) {\n            return false\n        }\n        return true",
    "        var openingBrackets = 0\n        var closingBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openingBrackets += 1\n            } else {\n                assert brackets[i] == \")\"\n                closingBrackets += 1\n            }\n            if (openingBrackets == 0) {\n                return false\n            }\n            if (closingBrackets == 0) {\n                return false\n            }\n        }\n        return true",
    "        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == '(') openBrackets += 1\n            if (brackets[i] == ')') closeBrackets += 1\n        }\n        return openBrackets == closeBrackets",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else {\n                closeBrackets += 1\n            }\n            if (openBrackets == closeBrackets) {\n                return true\n            }\n        }\n        return false",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openingBracket = brackets[0]\n        var closingBracket = brackets[1]\n        var openingBracketIndex = brackets.indexOf(openingBracket)\n        var closingBracketIndex = brackets.indexOf(closingBracket)\n        if (openingBracketIndex == -1 || closingBracketIndex == -1) {\n            return false\n        }\n        if (openingBracketIndex > closingBracketIndex) {\n            return false\n        }\n        var i = openingBracketIndex + 1\n        while (i < brackets.length) {\n            if (brackets[i] == openingBracket) {\n                i += 1\n            } else {\n                return false\n            }\n        }\n        return true",
    "        for (i <- 0 until brackets.length) {\n            if (brackets.charAt(i) != '(') {\n                return false\n            }\n            if (brackets.charAt(i + 1) != ')') {\n                return false\n            }\n        }\n        return true",
    "        if (brackets.length == 0) {\n            return true\n        }\n        var openBrackets = 0\n        var closeBrackets = 0\n        for (i <- 0 until brackets.length) {\n            if (brackets[i] == \"(\") {\n                openBrackets += 1\n            } else {\n                closeBrackets += 1\n            }\n            if (openBrackets == closeBrackets) {\n                return true\n            }\n        }\n        return false"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}