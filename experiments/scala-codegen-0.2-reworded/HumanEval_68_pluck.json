{
  "name": "HumanEval_68_pluck",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // \"Given a list representing a branch of a tree that has non-negative integer nodes\n    // your task is to pluck one of the nodes and return it.\n    // The plucked node should be the node with the smallest even value.\n    // If multiple nodes with the same smallest even value are found return the node that has smallest index.\n    // The plucked node should be returned in a list, [ smalest_value, its index ],\n    // If there are no even values or the given list is empty, return [].\n    // Example 1:\n    // >>> pluck((List[Long](4l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 1l.toLong))\n    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> pluck((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 1l.toLong))\n    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n    // >>> pluck((List[Long]()))\n    // (List[Long]())\n    // Example 4:\n    // >>> pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong, 0l.toLong, 4l.toLong, 2l.toLong)))\n    // (List[Long](0l.toLong, 1l.toLong))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n    // so we will choose the first zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    def pluck(arr : List[Long]) : List[Long] = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(pluck((List[Long](4l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long]())).equals((List[Long]())));\n    assert(pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong, 0l.toLong, 4l.toLong, 2l.toLong))).equals((List[Long](0l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 0l.toLong, 5l.toLong, 3l.toLong))).equals((List[Long](0l.toLong, 3l.toLong))));\n    assert(pluck((List[Long](5l.toLong, 4l.toLong, 8l.toLong, 4l.toLong, 8l.toLong))).equals((List[Long](4l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](7l.toLong, 6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](6l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](7l.toLong, 9l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long]())));\n    }\n\n}\n",
  "completions": [
    "        if (arr.isEmpty()) return arr\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        var index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < smallest_even_value) {\n                    smallest_even_value = i\n                    smallest_index = index\n                }\n            }\n            index += 1\n        }\n        return arr.map(x => [x, smallest_index])",
    "        val result = mutable.List[Long]()\n        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty()) {\n            return result\n        }\n        val smallest = evens.minBy(x => x)\n        val index = arr.indexOf(smallest)\n        result = result.append(smallest)\n        result = result.append(index)\n        return result",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        var min_even_index = 0\n        var even_count = 0\n        for(i <- arr.size) {\n            if(arr.apply(i).toLong % 2 == 0) {\n                even_count += 1\n                if(even_count == 1) {\n                    min_even = arr.apply(i)\n                    min_even_index = i\n                } else if(even_count > 1) {\n                    if(arr.apply(i).toLong < min_even.toLong) {\n                        min_even = arr.apply(i)\n                        min_even_index = i\n                    }\n                }\n            }\n        }\n        if(even_count == 0) {\n            return res\n        }\n        for(i <- arr.size) {\n            if(arr.apply(i).toLong == min_even.toLong) {\n                res = res.append(arr.apply(i))\n                res = res.append(i)\n                return res\n            }\n        }\n        return res",
    "        var res = List[Long]()\n        var smallest_value = arr.head\n        var smallest_index = 0\n        for (i <- arr.tail) {\n            if (arr.head.toLong % 2 == 0) {\n                if (arr.head.toLong < smallest_value) {\n                    smallest_value = arr.head.toLong\n                    smallest_index = i\n                }\n            }\n        }\n        res = res.append(smallest_value)\n        res = res.append(smallest_index)\n        return res",
    "        var res = List[Long]()\n        var min_even = arr.minBy(x => x % 2 == 0)._1\n        var min_index = arr.indexOf(min_even)\n        if (min_even == 0) {\n            res = List[Long](min_even, min_index)\n        } else {\n            res = List[Long](min_even)\n        }\n        return res",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        var min_even_index = 0\n        for (i <- arr.size - 1) {\n            if (arr.apply(i).toLong % 2 == 0) {\n                if (arr.apply(i).toLong < min_even) {\n                    min_even = arr.apply(i).toLong\n                    min_even_index = i\n                }\n            }\n        }\n        if (min_even_index == 0) {\n            res = arr.apply(min_even_index)\n        } else {\n            res = arr.apply(min_even_index).toLong\n        }\n        return res",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < min_even) {\n                    min_even = i\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        res = res.append(min_even)\n        res = res.append(min_index)\n        return res",
    "        var res = List[Long]()\n        var min_even_value = arr.head\n        var min_index = 0\n        for(i <- arr.size - 1) {\n            if(arr.apply(i).toLong % 2 == 0) {\n                if(arr.apply(i).toLong < min_even_value) {\n                    min_even_value = arr.apply(i).toLong\n                    min_index = i\n                }\n            }\n        }\n        res = List[Long](min_even_value, min_index)\n        return res",
    "        var res = List[Long]()\n        var min_even = arr.head.toLong\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i.toLong % 2 == 0) {\n                if (i.toLong < min_even) {\n                    min_even = i.toLong\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        if (min_even == 0) {\n            res = arr.take(min_index)\n        } else {\n            res = arr.take(min_index).append(min_even)\n        }\n        return res",
    "        var result = List[Long]()\n        var smallest_even_value = arr.head()\n        var smallest_index = 0\n        for (i <- arr.tail()) {\n            if (i % 2 == 0) {\n                if (i < smallest_even_value) {\n                    smallest_even_value = i\n                    smallest_index = arr.indexOf(i)\n                }\n            }\n        }\n        result = result.append(smallest_even_value)\n        result = result.append(smallest_index)\n        return result",
    "        var result = List[Long]()\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        for(i <- arr.tail) {\n            if(i % 2 == 0) {\n                if(i < smallest_even_value) {\n                    smallest_even_value = i\n                    smallest_index = arr.indexOf(i)\n                }\n            }\n        }\n        result = result.append(smallest_even_value)\n        result = result.append(smallest_index)\n        return result",
    "        var smallest_value = arr.head\n        var smallest_index = 0\n        var index = 0\n        for(i <- arr.tail) {\n            if(arr.head.even()) {\n                if(arr.head.value < smallest_value.value) {\n                    smallest_value = arr.head\n                    smallest_index = index\n                }\n            }\n            index += 1\n        }\n        return smallest_value, smallest_index",
    "        val result = mutable.List[Long]()\n        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty()) {\n            return result\n        }\n        val smallestEven = evens.minBy(x => x)\n        val index = arr.indexOf(smallestEven)\n        result = result.append(smallestEven)\n        result = result.append(index)\n        return result",
    "        val res = mutable.List[Long]()\n        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty()) {\n            return res\n        }\n        val smallest_even = evens.minBy(x => x)\n        val smallest_index = evens.indexOf(smallest_even)\n        res.append(smallest_even)\n        res.append(smallest_index)\n        return res",
    "        var res = List[Long]()\n        var min_even = arr.minBy(x => x % 2 == 0)._1\n        var min_index = arr.indexOf(min_even)\n        if (min_even == 0) {\n            res = arr.take(min_index)\n        } else {\n            res = arr.take(min_index + 1)\n        }\n        return res",
    "        var result = List[Long]()\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        var i = 0\n        while(i < arr.size) {\n            if(arr.apply(i).toLong % 2 == 0) {\n                if(arr.apply(i).toLong < smallest_even_value) {\n                    smallest_even_value = arr.apply(i).toLong\n                    smallest_index = i\n                }\n            }\n            i = i + 1\n        }\n        result = result.append(smallest_even_value)\n        result = result.append(smallest_index)\n        return result",
    "        if (arr.isEmpty()) return arr\n        var smallest_value = arr.head\n        var smallest_index = 0\n        var index = 0\n        for (i <- arr.tail) {\n            if (arr.head.toLong % 2 == 0 && arr.head.toLong < i.toLong) {\n                smallest_value = arr.head\n                smallest_index = index\n            }\n            if (arr.head.toLong < i.toLong) {\n                smallest_value = i\n                smallest_index = index\n            }\n            index += 1\n        }\n        return (List[Long](smallest_value, smallest_index))",
    "        if (arr.isEmpty()) {\n            return arr\n        }\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        for (i <- arr.tail) {\n            if (i.toLong % 2 == 0) {\n                if (i.toLong < smallest_even_value) {\n                    smallest_even_value = i.toLong\n                    smallest_index = arr.indexOf(i)\n                }\n            }\n        }\n        return (List[Long](smallest_even_value, smallest_index))",
    "        val result = mutable.List[Long]()\n        val smallest_even = arr.filter(x => x % 2 == 0).minBy[Long](x => x)\n        if (smallest_even != null) {\n            result.append(smallest_even)\n            result.append(arr.indexOf(smallest_even))\n        }\n        return result",
    "        var res = List[Long]()\n        var min_even = Long.MAX_VALUE\n        var min_index = -1\n        for (i <- 0 until arr.length) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_index = i\n                }\n            }\n        }\n        if (min_index != -1) {\n            res = List[Long](min_even, min_index)\n        }\n        return res",
    "        if (arr.isEmpty()) {\n            return List[Long]()\n        }\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        var index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < smallest_even_value) {\n                    smallest_even_value = i\n                    smallest_index = index\n                }\n            }\n            index += 1\n        }\n        return List[Long](smallest_even_value, smallest_index)",
    "        if (arr.isEmpty()) {\n            return arr\n        }\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < smallest_even_value) {\n                    smallest_even_value = i\n                    smallest_index = arr.indexOf(i)\n                }\n            }\n        }\n        return arr.take(smallest_index)",
    "        var result = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < min_even) {\n                    min_even = i\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        result = List[Long](min_even, min_index)\n        return result",
    "        var result = List[Long](arr.size)\n        var min_even = -1\n        var min_index = -1\n        for (i <- 0 until arr.size) {\n            if (arr[i] % 2 == 0) {\n                if (min_even == -1) {\n                    min_even = arr[i]\n                    min_index = i\n                } else if (arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_index = i\n                }\n            }\n        }\n        if (min_even == -1) {\n            result = List[Long]()\n        } else {\n            result = List[Long](min_even, min_index)\n        }\n        return result",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        var min_even_index = 0\n        for (i <- arr.size - 1) {\n            if (arr.apply(i).toLong % 2 == 0) {\n                if (arr.apply(i).toLong < min_even) {\n                    min_even = arr.apply(i).toLong\n                    min_even_index = i\n                }\n            } else {\n                if (arr.apply(i).toLong < min_even) {\n                    min_even = arr.apply(i).toLong\n                    min_even_index = i\n                }\n            }\n        }\n        if (min_even_index == 0) {\n            res = List[Long](min_even, min_index)\n        } else {\n            res = List[Long](min_even, min_even_index)\n        }\n        return res",
    "        var result = List[Long]()\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        var i = 0\n        while(i < arr.size) {\n            if(arr.apply(i).toInt % 2 == 0) {\n                if(arr.apply(i).toInt < smallest_even_value.toInt) {\n                    smallest_even_value = arr.apply(i)\n                    smallest_index = i\n                }\n            }\n            i = i + 1\n        }\n        result = result.append(smallest_even_value)\n        result = result.append(smallest_index)\n        return result",
    "        val result = mutable.List[Long]()\n        val evens = arr.filter(x -> x % 2 == 0)\n        if (evens.isEmpty()) {\n            return result\n        }\n        val smallestEven = evens.minBy(x -> x)\n        val smallestEvenIndex = evens.indexOf(smallestEven)\n        result.append(smallestEven)\n        result.append(smallestEvenIndex)\n        return result",
    "        var result = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i.toLong % 2 == 0) {\n                if (i.toLong < min_even) {\n                    min_even = i.toLong\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        result = result.append(min_even)\n        result = result.append(min_index)\n        return result",
    "        val res = mutable.List[Long]()\n        val evens = arr.filter(x -> x % 2 == 0)\n        if (evens.isEmpty()) {\n            return res\n        }\n        val smallest_even = evens.minBy(x -> x)\n        val smallest_index = arr.indexOf(smallest_even)\n        res.append(smallest_even)\n        res.append(smallest_index)\n        return res",
    "        var result = List[Long]()\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        var i = 0\n        while (i < arr.size) {\n            if (arr.apply(i).toLong % 2 == 0) {\n                if (arr.apply(i).toLong < smallest_even_value) {\n                    smallest_even_value = arr.apply(i).toLong\n                    smallest_index = i\n                }\n            }\n            i = i + 1\n        }\n        result = result.append(smallest_even_value)\n        result = result.append(smallest_index)\n        return result",
    "        if (arr.isEmpty()) return arr\n        val smalest_value = arr.head()\n        val smalest_index = 0\n        for (i <- arr.tail()) {\n            if (i % 2 == 0) {\n                if (i < smalest_value) {\n                    smalest_value = i\n                    smalest_index = arr.indexOf(i)\n                }\n            }\n        }\n        return arr.take(smalest_index)",
    "        var result = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i.toLong % 2 == 0) {\n                if (i.toLong < min_even) {\n                    min_even = i.toLong\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        if (min_even == 0) {\n            result = arr.take(min_index)\n        } else {\n            result = arr.take(min_index).append(min_even)\n        }\n        return result",
    "        var res = List[Long]()\n        var min_even = Long.MAX_VALUE\n        var min_index = 0\n        for (i <- 0 until arr.length) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_index = i\n                }\n            }\n        }\n        if (min_even == Long.MAX_VALUE) {\n            return res\n        } else {\n            res = List[Long](min_even, min_index)\n            return res\n        }",
    "        var res = List[Long]()\n        var min_even_value = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < min_even_value) {\n                    min_even_value = i\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        res = res.append(min_even_value)\n        res = res.append(min_index)\n        return res",
    "        var res = List[Long]()\n        var min_even_value = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < min_even_value) {\n                    min_even_value = i\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        res = List[Long](min_even_value, min_index)\n        return res",
    "        if (arr.length == 0) return []\n        var smalest_value = arr[0]\n        var smalest_index = 0\n        for (i <- 1 to arr.length - 1) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < smalest_value) {\n                    smalest_value = arr[i]\n                    smalest_index = i\n                }\n            }\n        }\n        return [smalest_value, smalest_index]",
    "        var res = List[Long]()\n        var min_even_value = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i.toLong % 2 == 0) {\n                if (i.toLong < min_even_value) {\n                    min_even_value = i.toLong\n                    min_index = i\n                }\n            }\n        }\n        res = res.append(min_even_value)\n        res = res.append(min_index)\n        return res",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < min_even) {\n                    min_even = i\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        res = res.append(min_even)\n        res = res.append(min_index)\n        return res",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < min_even) {\n                    min_even = i\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        res = res.append(min_even)\n        res = res.append(min_index)\n        return res",
    "        var res = List[Long]()\n        var min_even = arr.head.toLong\n        var min_index = 0\n        for (i <- arr.tail.toList) {\n            if (i.toLong % 2 == 0) {\n                if (i.toLong < min_even) {\n                    min_even = i.toLong\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        if (min_even == 0) {\n            res = arr.take(min_index + 1)\n        } else {\n            res = arr.take(min_index)\n        }\n        return res",
    "        var result = List[Long]()\n        var min_even = Long.MAX_VALUE\n        var min_index = 0\n        var min_value = Long.MAX_VALUE\n        var min_index_value = 0\n        for(i <- 0 until arr.length) {\n            if(arr[i] % 2 == 0) {\n                if(arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_index = i\n                    min_value = arr[i]\n                    min_index_value = i\n                }\n            }\n        }\n        result = List[Long](min_value, min_index_value)\n        return result",
    "        if (arr.isEmpty()) {\n            return arr\n        }\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        for (i <- arr.tail) {\n            if (i.toLong % 2 == 0) {\n                if (i.toLong < smallest_even_value) {\n                    smallest_even_value = i.toLong\n                    smallest_index = arr.indexOf(i)\n                }\n            }\n        }\n        return (List[Long](smallest_even_value, smallest_index))",
    "        if (arr.length == 0) {\n            return []\n        }\n        var smallest_value = arr[0]\n        var smallest_index = 0\n        for (i <- 1 to arr.length - 1) {\n            if (arr[i] < smallest_value) {\n                smallest_value = arr[i]\n                smallest_index = i\n            }\n        }\n        return [smallest_value, smallest_index]",
    "        if (arr.length == 0) {\n            return []\n        }\n        var smallest_even_value = arr[0]\n        var smallest_index = 0\n        for (i <- 1 to arr.length - 1) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < smallest_even_value) {\n                    smallest_even_value = arr[i]\n                    smallest_index = i\n                }\n            }\n        }\n        return [smallest_even_value, smallest_index]",
    "        if (arr.isEmpty()) return arr\n        var smallest_value = arr.head()\n        var smallest_index = 0\n        var index = 0\n        for (i <- arr.tail()) {\n            if (i % 2 == 0) {\n                if (i < smallest_value) {\n                    smallest_value = i\n                    smallest_index = index\n                }\n            }\n            index += 1\n        }\n        return arr.take(smallest_index)",
    "        var res = List[Long]().toList\n        var min_even = -1\n        var min_index = -1\n        for(i <- 0 until arr.length) {\n            if(arr[i] % 2 == 0) {\n                if(min_even == -1) {\n                    min_even = arr[i]\n                    min_index = i\n                } else if(arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_index = i\n                }\n            }\n        }\n        if(min_even == -1) {\n            return res\n        } else {\n            res = res.append(min_even)\n            res = res.append(min_index)\n            return res\n        }",
    "        if (arr.isEmpty()) {\n            return arr\n        }\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        for (i <- arr.tail) {\n            if (arr.head % 2 == 0 && arr.head < i) {\n                smallest_even_value = arr.head\n                smallest_index = i\n                break\n            }\n        }\n        return (List[Long](smallest_even_value, smallest_index))",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        for(i <- arr.tail) {\n            if(arr.head.even()) {\n                if(arr.head.value < min_even.value) {\n                    min_even = arr.head\n                    min_index = i\n                }\n            } else {\n                if(arr.head.value < min_even.value) {\n                    min_even = arr.head\n                    min_index = i\n                }\n            }\n        }\n        res = res.append(min_even)\n        res = res.append(min_index)\n        return res",
    "        var result = List[Long]()\n        var smallest_value = arr.head\n        var smallest_index = 0\n        var i = 1\n        while(i < arr.size) {\n            var even_value = arr.apply(i).toLong % 2\n            if(even_value == 0 && even_value < smallest_value) {\n                smallest_value = even_value\n                smallest_index = i\n            }\n            i = i + 1\n        }\n        result = result.append(smallest_value)\n        result = result.append(smallest_index)\n        return result",
    "        if (arr.isEmpty()) {\n            return []\n        }\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < smallest_even_value) {\n                    smallest_even_value = i\n                    smallest_index = arr.indexOf(i)\n                }\n            }\n        }\n        return (List[Long](smallest_even_value, smallest_index))",
    "        if (arr.isEmpty()) return arr\n        var smallest_value = arr.head()\n        var smallest_index = 0\n        var index = 0\n        while (index < arr.size()) {\n            if (arr.apply(index).toLong % 2 == 0) {\n                if (arr.apply(index).toLong < smallest_value) {\n                    smallest_value = arr.apply(index).toLong\n                    smallest_index = index\n                }\n            }\n            index += 1\n        }\n        return arr.apply(smallest_index)",
    "        var res = List[Long]()\n        var min_even = arr.minBy(x => x % 2 == 0)._1\n        var min_index = arr.indexOf(min_even)\n        if (min_even == 0) {\n            res = List[Long](min_even, min_index)\n        } else {\n            res = List[Long](min_even)\n        }\n        return res",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        var min_even_index = 0\n        for (i <- arr.size) {\n            if (arr.apply(i).toLong % 2 == 0) {\n                if (arr.apply(i).toLong < min_even) {\n                    min_even = arr.apply(i).toLong\n                    min_even_index = i\n                }\n            } else {\n                if (arr.apply(i).toLong < min_even) {\n                    min_even = arr.apply(i).toLong\n                    min_even_index = i\n                }\n            }\n        }\n        if (min_even_index == 0) {\n            res = List[Long](min_even, min_index)\n        } else {\n            res = List[Long](min_even, min_even_index)\n        }\n        return res",
    "        if (arr.length == 0) {\n            return List[Long]()\n        }\n        var smalest_value = arr.head\n        var smalest_index = 0\n        var index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < smalest_value) {\n                    smalest_value = i\n                    smalest_index = index\n                }\n            }\n            index += 1\n        }\n        return List[Long](smalest_value, smalest_index)",
    "        var smallest_even_value = arr.head\n        var smallest_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < smallest_even_value) {\n                    smallest_even_value = i\n                    smallest_index = arr.indexOf(i)\n                }\n            }\n        }\n        if (smallest_even_value == arr.head) {\n            return arr\n        } else {\n            return arr.take(smallest_index)\n        }",
    "        var result = List[Long]()\n        var min_even_value = arr.head\n        var min_even_index = 0\n        var min_index = 0\n        var min_value = arr.head\n        var min_index = 0\n        var min_value = arr.head\n        var min_index = 0\n        for (i <- arr.size - 1) {\n            if (arr.apply(i).toLong % 2 == 0) {\n                if (arr.apply(i).toLong < min_even_value) {\n                    min_even_value = arr.apply(i).toLong\n                    min_even_index = i\n                }\n            } else {\n                if (arr.apply(i).toLong < min_value) {\n                    min_value = arr.apply(i).toLong\n                    min_index = i\n                }\n            }\n        }\n        if (min_even_value == 0) {\n            result = List[Long](min_even_index, min_even_index)\n        } else {\n            result = List[Long](min_index, min_index)\n        }\n        return result",
    "        var result = List[Long]()\n        var min_even = arr.minBy[0](_ => arr.filter(x => x % 2 == 0).length)._1\n        var min_index = arr.indexOf(min_even)\n        if (min_even == 0) {\n            result = arr.filter(x => x % 2 == 0).take(1)\n        } else {\n            result = arr.filter(x => x % 2 == 0).take(1).append(arr.indexOf(min_even))\n        }\n        return result",
    "        val res = mutable.List[Long]()\n        for (i <- 0 until arr.length) {\n            if (arr.apply(i).toLong % 2 == 0) {\n                res.append(arr.apply(i))\n                res.append(i)\n                break\n            }\n        }\n        if (res.isEmpty()) {\n            return res\n        } else {\n            val smallest_value = res.head().toLong\n            val smallest_index = res.tail().head().toInt\n            for (i <- 0 until arr.length) {\n                if (arr.apply(i).toLong == smallest_value) {\n                    if (i < smallest_index) {\n                        res.update(i, smallest_index)\n                    }\n                }\n            }\n            return res\n        }",
    "        var res = List[Long]()\n        var min_even_value = arr.head\n        var min_index = 0\n        var min_even_index = 0\n        for (i <- arr.size) {\n            if (arr.apply(i).even()) {\n                if (arr.apply(i).toLong() < min_even_value.toLong()) {\n                    min_even_value = arr.apply(i)\n                    min_even_index = i\n                }\n            } else {\n                if (arr.apply(i).toLong() < min_even_value.toLong()) {\n                    min_even_value = arr.apply(i)\n                    min_even_index = i\n                }\n            }\n        }\n        if (min_even_value.toLong() == 0) {\n            res = List[Long](min_even_value, min_even_index)\n        } else {\n            res = List[Long](min_even_value, min_index)\n        }\n        return res",
    "        var result = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < min_even) {\n                    min_even = i\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        result = List[Long](min_even, min_index)\n        return result",
    "        if (arr.isEmpty()) {\n            return arr\n        }\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < smallest_even_value) {\n                    smallest_even_value = i\n                    smallest_index = arr.indexOf(i)\n                }\n            }\n        }\n        return arr.take(smallest_index)",
    "        var res = List[Long]()\n        var min_even = arr.minBy[Long](_ => _ % 2 == 0)._1\n        var min_index = arr.minBy[Long](_ => _)._1\n        if (min_even == null) {\n            return res\n        }\n        var even_index = arr.indexOf(min_even)\n        res = res.append(min_even)\n        res = res.append(even_index)\n        return res",
    "        var result = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        var min_even_index = 0\n        for (i <- arr.length) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_even_index = i\n                }\n            } else {\n                if (arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_even_index = i\n                }\n                if (arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_even_index = i\n                }\n            }\n        }\n        result = List[Long](min_even, min_index)\n        return result",
    "        var result = List[Long]()\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        for (i <- arr.tail) {\n            if (arr.head % 2 == 0 && arr.head < smallest_even_value) {\n                smallest_even_value = arr.head\n                smallest_index = i\n            }\n        }\n        result = result.append(smallest_even_value)\n        result = result.append(smallest_index)\n        return result",
    "        var smallest_even_value = arr.head\n        var smallest_index = 0\n        var index = 0\n        for (i <- arr.tail) {\n            if (arr.head % 2 == 0) {\n                if (arr.head < smallest_even_value) {\n                    smallest_even_value = arr.head\n                    smallest_index = index\n                }\n            }\n            index += 1\n        }\n        if (smallest_even_value == arr.head) {\n            return arr.tail.take(smallest_index)\n        } else {\n            return []\n        }",
    "        var result = List[Long]()\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < smallest_even_value) {\n                    smallest_even_value = i\n                    smallest_index = arr.indexOf(i)\n                }\n            }\n        }\n        result = result.append(smallest_even_value)\n        result = result.append(smallest_index)\n        return result",
    "        var result = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        var min_even_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < min_even) {\n                    min_even = i\n                    min_even_index = i\n                }\n            } else {\n                if (i < min_even) {\n                    min_even = i\n                    min_even_index = i\n                }\n                if (i < min_even) {\n                    min_even = i\n                    min_even_index = i\n                }\n            }\n        }\n        result = result.append(min_even)\n        result = result.append(min_index)\n        return result",
    "        var result = List[Long]()\n        var smallest_value = arr.head\n        var smallest_index = 0\n        var i = 1\n        while (i < arr.size) {\n            if (arr.apply(i).toInt % 2 == 0) {\n                if (arr.apply(i).toInt < smallest_value.toInt) {\n                    smallest_value = arr.apply(i)\n                    smallest_index = i\n                }\n            }\n            i = i + 1\n        }\n        result = List[Long](smallest_value, smallest_index)\n        return result",
    "        var result = List[Long]()\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        var i = 0\n        while (i < arr.length) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < smallest_even_value) {\n                    smallest_even_value = arr[i]\n                    smallest_index = i\n                }\n            }\n            i = i + 1\n        }\n        if (smallest_even_value == 0) {\n            result = arr.take(smallest_index)\n        } else {\n            result = arr.take(smallest_index)\n        }\n        return result",
    "        var result = List[Long]()\n        var min_even = arr.head.toLong\n        var min_index = 0\n        for (i <- arr.tail.toList) {\n            if (i.toLong % 2 == 0) {\n                if (i.toLong < min_even) {\n                    min_even = i.toLong\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        result = result.append(min_even)\n        result = result.append(min_index)\n        return result",
    "        var result = List[Long](arr.size)\n        var index = 0\n        var smallest_value = arr.head\n        var smallest_index = 0\n        for(i <- 0 until arr.size) {\n            if(arr[i] % 2 == 0) {\n                if(arr[i] < smallest_value) {\n                    smallest_value = arr[i]\n                    smallest_index = i\n                }\n            }\n        }\n        result[index] = smallest_value\n        index += 1\n        for(i <- 0 until arr.size) {\n            if(arr[i] % 2 == 0 && arr[i] != smallest_value) {\n                result[index] = arr[i]\n                index += 1\n            }\n        }\n        return result",
    "        var res = List[Long]()\n        var min_even = arr.minBy[Int](_ => _ % 2 == 0)._1\n        var min_index = arr.indexOf(min_even)\n        if (min_even == 0) {\n            res = List[Long](min_even, min_index)\n        } else {\n            res = List[Long](min_even, min_index)\n        }\n        return res",
    "        if (arr.isEmpty()) {\n            return []\n        }\n        var smallest_value = arr.head\n        var smallest_index = 0\n        var index = 0\n        for (i <- arr.tail) {\n            if (arr.head.toLong % 2 == 0) {\n                if (arr.head.toLong < smallest_value.toLong) {\n                    smallest_value = arr.head\n                    smallest_index = index\n                }\n            }\n            index += 1\n        }\n        return [smallest_value, smallest_index]",
    "        if (arr.isEmpty()) {\n            return arr\n        }\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        var index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < smallest_even_value) {\n                    smallest_even_value = i\n                    smallest_index = index\n                }\n            }\n            index += 1\n        }\n        return arr.map(x => (x, smallest_index))",
    "        var smallest_even_value : Long = _\n        var smallest_index : Int = _\n        for (i <- 0 until arr.length) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < smallest_even_value) {\n                    smallest_even_value = arr[i]\n                    smallest_index = i\n                }\n            }\n        }\n        if (smallest_even_value == _) {\n            return List[Long]()\n        } else {\n            return List[Long](smallest_even_value, smallest_index)\n        }",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        var i = 0\n        for(i = 0; i < arr.length; i++) {\n            if(arr[i] % 2 == 0) {\n                if(arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_index = i\n                }\n            }\n        }\n        if(min_even == 0) {\n            res = arr.take(min_index)\n        } else {\n            res = arr.take(min_index)\n        }\n        return res",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        var min_even_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < min_even) {\n                    min_even = i\n                    min_even_index = i\n                }\n            } else {\n                if (i < min_even) {\n                    min_even = i\n                    min_even_index = i\n                }\n            }\n        }\n        if (min_even_index != 0) {\n            res = res.append(min_even)\n            res = res.append(min_even_index)\n        }\n        return res",
    "        var result = List[Long]()\n        var smallest_value = arr.head\n        var smallest_index = 0\n        var index = 0\n        for(i <- arr.tail) {\n            if(arr.head.even()) {\n                if(arr.head.value < smallest_value) {\n                    smallest_value = arr.head.value\n                    smallest_index = index\n                }\n            }\n            index += 1\n        }\n        result = result.append(smallest_value)\n        result = result.append(smallest_index)\n        return result",
    "        if (arr.isEmpty()) return arr\n        var smalest_value = arr.head\n        var smalest_index = 0\n        var index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < smalest_value) {\n                    smalest_value = i\n                    smalest_index = index\n                }\n            }\n            index += 1\n        }\n        return (List[Long](smalest_value, smalest_index))",
    "        var result = List[Long]()\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < smallest_even_value) {\n                    smallest_even_value = i\n                    smallest_index = arr.indexOf(i)\n                }\n            }\n        }\n        result = result.append(smallest_even_value)\n        result = result.append(smallest_index)\n        return result",
    "        if (arr.isEmpty()) {\n            return arr\n        }\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < smallest_even_value) {\n                    smallest_even_value = i\n                    smallest_index = arr.indexOf(i)\n                }\n            }\n        }\n        return (List[Long](smallest_even_value, smallest_index))",
    "        var result = List[Long]()\n        var smallest_value = arr.head\n        var smallest_index = 0\n        for (i <- arr.tail) {\n            if (arr.head.toLong % 2 == 0) {\n                if (arr.head.toLong < smallest_value.toLong) {\n                    smallest_value = arr.head\n                    smallest_index = i\n                }\n            }\n        }\n        result = result.append(smallest_value)\n        result = result.append(smallest_index)\n        return result",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i.toLong % 2 == 0) {\n                if (i.toLong < min_even) {\n                    min_even = i.toLong\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        res = res.append(min_even)\n        res = res.append(min_index)\n        return res",
    "        var result = List[Long]()\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < smallest_even_value) {\n                    smallest_even_value = i\n                    smallest_index = arr.indexOf(i)\n                }\n            }\n        }\n        result = List[Long](smallest_even_value, smallest_index)\n        return result",
    "        if (arr.length == 0) {\n            return []\n        }\n        var smallest_even_value = arr[0]\n        var smallest_index = 0\n        for (i <- 1 to arr.length - 1) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < smallest_even_value) {\n                    smallest_even_value = arr[i]\n                    smallest_index = i\n                }\n            }\n        }\n        return [smallest_even_value, smallest_index]",
    "        if (arr.isEmpty()) return arr\n        var min_even = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (arr.head.even) {\n                if (arr.head.value < min_even.value) {\n                    min_even = arr.head\n                    min_index = i\n                }\n            } else {\n                if (arr.head.value < min_even.value) {\n                    min_even = arr.head\n                    min_index = i\n                }\n            }\n        }\n        return (min_even, min_index)",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i.toLong % 2 == 0) {\n                if (i.toLong < min_even) {\n                    min_even = i.toLong\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        res = res.append(min_even)\n        res = res.append(min_index)\n        return res",
    "        var result = List[Long](arr.size)\n        var min_index = 0\n        var min_value = arr[0]\n        for (i <- 0 until arr.size) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < min_value) {\n                    min_value = arr[i]\n                    min_index = i\n                }\n            }\n        }\n        result[0] = min_value\n        result[1] = min_index\n        return result",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i.toLong % 2 == 0) {\n                if (i.toLong < min_even) {\n                    min_even = i.toLong\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        if (min_even == 0) {\n            res = arr.take(min_index + 1)\n        } else {\n            res = arr.take(min_index)\n        }\n        return res",
    "        var result = List[Long]()\n        var min_even = arr.minBy[Long](_ => _ % 2 == 0)\n        var min_index = arr.indexOf(min_even)\n        if (min_even != null) {\n            result = List[Long](min_even, min_index)\n        }\n        return result",
    "        var result = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i.toLong % 2 == 0) {\n                if (i.toLong < min_even) {\n                    min_even = i.toLong\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        result = result.append(min_even)\n        result = result.append(min_index)\n        return result",
    "        var result = List[Long]()\n        var min_even = arr.minBy(x => x % 2 == 0)._1\n        var min_index = arr.indexOf(min_even)\n        if (min_even == 0) {\n            result = arr.take(min_index)\n        } else {\n            result = arr.take(min_index + 1)\n        }\n        return result",
    "        val res = mutable.List[Long]()\n        for (i <- 0 until arr.length) {\n            if (arr[i] % 2 == 0) {\n                res = res.append(arr[i])\n                res = res.append(i)\n                break\n            }\n        }\n        return res",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        var min_even_index = 0\n        for (i <- arr.size - 1) {\n            if (arr.apply(i).toLong % 2 == 0) {\n                if (arr.apply(i).toLong < min_even) {\n                    min_even = arr.apply(i).toLong\n                    min_even_index = i\n                }\n            }\n        }\n        if (min_even_index == 0) {\n            res = arr.apply(min_even_index)\n        } else {\n            res = arr.apply(min_even_index).toLong\n        }\n        return res",
    "        if (arr.isEmpty()) return arr\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < smallest_even_value) {\n                    smallest_even_value = i\n                    smallest_index = arr.indexOf(i)\n                }\n            }\n        }\n        return arr.take(smallest_index)",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i.toLong % 2 == 0) {\n                if (i.toLong < min_even) {\n                    min_even = i.toLong\n                    min_index = i.toLong\n                }\n            }\n        }\n        if (min_even == 0) {\n            for (i <- arr) {\n                if (i.toLong == min_index) {\n                    res = res.append(i)\n                }\n            }\n        }\n        return res",
    "        var result = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < min_even) {\n                    min_even = i\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        result = result.append(min_even)\n        result = result.append(min_index)\n        return result",
    "        var res = List[Long]().toLong\n        var min_even = arr.head.toLong\n        var min_index = 0\n        for (i <- arr.tail.toLong) {\n            if (arr.head.toLong % 2 == 0) {\n                if (arr.head.toLong < min_even) {\n                    min_even = arr.head.toLong\n                    min_index = i\n                }\n            }\n            arr = arr.tail\n        }\n        res = res.append(min_even)\n        res = res.append(min_index)\n        return res",
    "        var result = List[Long]()\n        var smallest_value = arr.head\n        var smallest_index = 0\n        var index = 0\n        for(i <- arr.tail) {\n            if(arr.head == i) {\n                result = append(result, arr.head)\n                arr = arr.tail\n                break\n            }\n            if(smallest_value == i) {\n                smallest_index = index\n            }\n            index += 1\n        }\n        return result",
    "        var result = List[Long]()\n        var smallest_value = arr.head\n        var smallest_index = 0\n        for (i <- arr.tail) {\n            if (i.toLong % 2 == 0) {\n                if (i.toLong < smallest_value) {\n                    smallest_value = i.toLong\n                    smallest_index = i.toLong\n                }\n            }\n        }\n        result = List[Long](smallest_value, smallest_index)\n        return result",
    "        var res = List[Long]()\n        var min_even_value = arr.head\n        var min_index = 0\n        for(i <- arr.tail) {\n            if(i % 2 == 0) {\n                if(i < min_even_value) {\n                    min_even_value = i\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        res = res.append(min_even_value)\n        res = res.append(min_index)\n        return res",
    "        var result = List[Long]()\n        var smallest_value = arr.head()\n        var smallest_index = 0\n        var index = 0\n        for(i <- arr.size - 1) {\n            if(arr.apply(i).toLong % 2 == 0) {\n                if(arr.apply(i).toLong < smallest_value) {\n                    smallest_value = arr.apply(i).toLong\n                    smallest_index = index\n                }\n            }\n            index += 1\n        }\n        result = List[Long](smallest_value, smallest_index)\n        return result",
    "        var result = List[Long]()\n        var smallest_value = arr.head\n        var smallest_index = 0\n        for (i <- arr.tail) {\n            if (i.toLong % 2 == 0) {\n                if (i.toLong < smallest_value) {\n                    smallest_value = i.toLong\n                    smallest_index = i.toLong\n                }\n            }\n        }\n        result = result.append(smallest_value)\n        result = result.append(smallest_index)\n        return result",
    "        var result = List[Long]()\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < smallest_even_value) {\n                    smallest_even_value = i\n                    smallest_index = arr.indexOf(i)\n                }\n            }\n        }\n        result = result.append(smallest_even_value)\n        result = result.append(smallest_index)\n        return result",
    "        var result = List[Long]()\n        var min_even = Long.MAX_VALUE\n        var min_index = -1\n        var min_value = Long.MAX_VALUE\n        for (i <- 0 until arr.length) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_index = i\n                }\n            } else {\n                if (arr[i] < min_value) {\n                    min_value = arr[i]\n                    min_index = i\n                }\n            }\n        }\n        if (min_index == -1) {\n            result = List[Long](min_value)\n        } else {\n            result = List[Long](min_value, min_index)\n        }\n        return result",
    "        var result = List[Long]()\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < smallest_even_value) {\n                    smallest_even_value = i\n                    smallest_index = arr.indexOf(i)\n                }\n            }\n        }\n        result = List[Long](smallest_even_value, smallest_index)\n        return result",
    "        var result = List[Long]()\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < smallest_even_value) {\n                    smallest_even_value = i\n                    smallest_index = arr.indexOf(i)\n                }\n            }\n        }\n        result = result.append(smallest_even_value)\n        result = result.append(smallest_index)\n        return result",
    "        var result = List[Long]()\n        var min_even_value = arr.head\n        var min_index = 0\n        var min_even_index = 0\n        for (i <- arr.size) {\n            if (arr.apply(i).mod(2) == 0) {\n                if (arr.apply(i) < min_even_value) {\n                    min_even_value = arr.apply(i)\n                    min_even_index = i\n                }\n            } else {\n                if (arr.apply(i) < min_even_value) {\n                    min_even_value = arr.apply(i)\n                    min_even_index = i\n                }\n            }\n        }\n        if (min_even_index == 0) {\n            result = List[Long](min_even_value, min_index)\n        } else {\n            result = List[Long](min_even_value, min_even_index)\n        }\n        return result",
    "        if (arr.length == 0) {\n            return []\n        }\n        var min_even_value = arr[0]\n        var min_index = 0\n        for (i <- 1 to arr.length - 1) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < min_even_value) {\n                    min_even_value = arr[i]\n                    min_index = i\n                }\n            }\n        }\n        return (List[Long](min_even_value, min_index))",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        var min_even_index = 0\n        for (i <- arr.size - 1) {\n            if (arr.apply(i).toLong % 2 == 0) {\n                if (arr.apply(i).toLong < min_even) {\n                    min_even = arr.apply(i).toLong\n                    min_even_index = i\n                }\n            } else {\n                if (arr.apply(i).toLong < min_even) {\n                    min_even = arr.apply(i).toLong\n                    min_even_index = i\n                }\n            }\n        }\n        if (min_even_index == 0) {\n            res = List[Long](min_even, min_index)\n        } else {\n            res = List[Long](min_even, min_even_index)\n        }\n        return res",
    "        var result = List[Long]()\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        var i = 0\n        while (i < arr.size) {\n            if (arr.apply(i).toLong % 2 == 0) {\n                if (arr.apply(i).toLong < smallest_even_value) {\n                    smallest_even_value = arr.apply(i).toLong\n                    smallest_index = i\n                }\n            }\n            i = i + 1\n        }\n        result = result.append(smallest_even_value)\n        result = result.append(smallest_index)\n        return result",
    "        if (arr.isEmpty()) return arr\n        var smalest_value = arr.head\n        var smalest_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < smalest_value) {\n                    smalest_value = i\n                    smalest_index = arr.indexOf(i)\n                }\n            }\n        }\n        return (List[Long](smalest_value, smalest_index))",
    "        var res = List[Long](arr.size)\n        var i = 0\n        while (i < arr.size) {\n            var smallest_even_value = arr[i]\n            var smallest_index = i\n            var j = i + 1\n            while (j < arr.size && arr[j] % 2 == 0) {\n                if (arr[j] < smallest_even_value) {\n                    smallest_even_value = arr[j]\n                    smallest_index = j\n                }\n                j = j + 1\n            }\n            if (smallest_index != i) {\n                arr[i] = arr[smallest_index]\n                arr[smallest_index] = smallest_even_value\n                res[i] = smallest_index\n                res[smallest_index] = i\n            }\n            i = i + 1\n        }\n        return res",
    "        var result = List[Long]()\n        var min_even = Long.MAX_VALUE\n        var min_index = 0\n        for (i <- 0 until arr.length) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_index = i\n                }\n            }\n        }\n        result = arr.take(min_index)\n        return result",
    "        val result = mutable.List[Long]()\n        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty()) {\n            return result\n        }\n        val smallestEven = evens.minBy(x => x)\n        val smallestEvenIndex = evens.indexOf(smallestEven)\n        result.append(smallestEven)\n        result.append(smallestEvenIndex)\n        return result",
    "        var result = List[Long]()\n        var min_even = Long.MAX_VALUE\n        var min_index = -1\n        for (i <- 0 until arr.length) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_index = i\n                }\n            }\n        }\n        if (min_index == -1) {\n            result = List[Long](min_even)\n        } else {\n            result = List[Long](min_even, min_index)\n        }\n        return result",
    "        var res = List[Long]()\n        var min_even = arr.minBy[0](_ => arr.filter(x => x % 2 == 0).head())\n        var min_index = arr.indexOf(min_even)\n        var min_value = min_even\n        var min_index_arr = List[Long](min_index)\n        for (i <- arr.range(1, arr.length)) {\n            if (arr[i] == min_even) {\n                min_index_arr = List[Long](i)\n            }\n        }\n        res = List[Long](min_value, min_index_arr)\n        return res",
    "        var result = List[Long]()\n        var min_even = arr.head.toLong\n        var min_index = 0\n        var index = 0\n        for(i <- arr.tail) {\n            if(i.toLong % 2 == 0) {\n                if(i.toLong < min_even) {\n                    min_even = i.toLong\n                    min_index = index\n                }\n            }\n            index += 1\n        }\n        if(min_even == 0) {\n            result = arr.tail.takeWhile(i -> i.toLong != 0)\n        } else {\n            result = List[Long](min_even, min_index)\n        }\n        return result",
    "        var res = List[Long]()\n        var min_even = Long.MAX_VALUE\n        var min_index = -1\n        for (i <- 0 until arr.length) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_index = i\n                }\n            }\n        }\n        if (min_index != -1) {\n            res = List[Long](min_even, min_index)\n        }\n        return res",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        var min_even_index = 0\n        var even_count = 0\n        for(i <- arr.length) {\n            if(arr[i] % 2 == 0) {\n                even_count += 1\n                if(arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_even_index = i\n                }\n            }\n        }\n        if(even_count > 0) {\n            res = List[Long](min_even, min_even_index)\n        }\n        return res",
    "        var smallest_even_value = arr.head\n        var smallest_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < smallest_even_value) {\n                    smallest_even_value = i\n                    smallest_index = arr.indexOf(i)\n                }\n            }\n        }\n        return (List[Long](smallest_even_value, smallest_index))",
    "        if (arr.length == 0) {\n            return []\n        }\n        var smallest_value = arr[0]\n        var smallest_index = 0\n        var smallest_even_index = 0\n        var even_index = 0\n        for (i <- 0 until arr.length) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < smallest_value) {\n                    smallest_value = arr[i]\n                    smallest_index = i\n                    smallest_even_index = even_index\n                }\n                even_index = i\n            }\n        }\n        if (smallest_even_index == 0) {\n            return arr\n        }\n        return [smallest_value, smallest_index]",
    "        var result = List[Long]()\n        var min_even = Long.MAX_VALUE\n        var min_index = -1\n        for (i <- 0 until arr.length) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_index = i\n                }\n            }\n        }\n        if (min_index == -1) {\n            result = List[Long](min_even)\n        } else {\n            result = List[Long](min_even, min_index)\n        }\n        return result",
    "        var result = List[Long]()\n        var min_even = Long.MAX_VALUE\n        var min_index = -1\n        for(i <- 0 until arr.length) {\n            if(arr[i] % 2 == 0) {\n                if(arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_index = i\n                }\n            }\n        }\n        if(min_index != -1) {\n            result = List[Long](min_even, min_index)\n        }\n        return result",
    "        if (arr.isEmpty()) {\n            return arr\n        }\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        var index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < smallest_even_value) {\n                    smallest_even_value = i\n                    smallest_index = index\n                }\n            }\n            index += 1\n        }\n        return arr.take(smallest_index)",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < min_even) {\n                    min_even = i\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        res = res.append(min_even)\n        res = res.append(min_index)\n        return res",
    "        var result = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < min_even) {\n                    min_even = i\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        result = List[Long](min_even, min_index)\n        return result",
    "        val res = new ArrayList[Long]()\n        val min_even = arr.head\n        val min_index = 0\n        val min_even_index = 0\n        val min_index_arr = new ArrayList[Long]()\n        val even_arr = arr.filter(x -> x % 2 == 0)\n        for (i <- even_arr.size) {\n            val even = even_arr.apply(i)\n            if (even < min_even) {\n                min_even = even\n                min_even_index = i\n            }\n            val index = arr.indexOf(even)\n            if (index < min_index) {\n                min_index = index\n                min_index_arr = new ArrayList[Long]()\n                min_index_arr.add(even)\n                min_index_arr.add(index)\n            } else if (index == min_index) {\n                min_index_arr.add(even)\n                min_index_arr.add(index)\n            }\n        }\n        if (min_index_arr.size == 0) {\n            res.add(min_even)\n        } else {\n            res.add(min_even_index)\n            res.add(min_index_arr.get(1))\n        }\n        return res",
    "        if (arr.isEmpty()) return arr\n        var smallest_value = arr.head\n        var smallest_index = 0\n        for (i <- arr.tail) {\n            if (arr.head.toLong % 2 == 0 && arr.head.toLong < smallest_value) {\n                smallest_value = arr.head.toLong\n                smallest_index = i\n            }\n        }\n        return arr.update(smallest_index, arr.head)",
    "        var res = List[Long]()\n        var smallest_value = arr.head\n        var smallest_index = 0\n        for(i <- arr.tail) {\n            if(arr.head.even()) {\n                if(arr.head.value < smallest_value.value) {\n                    smallest_value = arr.head\n                    smallest_index = i\n                }\n            }\n        }\n        res = res.append(smallest_value)\n        res = res.append(smallest_index)\n        return res",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        for(i <- arr.tail) {\n            if(arr.head.even) {\n                if(arr.head.value < min_even.value) {\n                    min_even = arr.head\n                    min_index = i\n                }\n            } else {\n                if(arr.head.value < min_even.value) {\n                    min_even = arr.head\n                    min_index = i\n                }\n            }\n        }\n        res = res.append(min_even)\n        res = res.append(min_index)\n        return res",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < min_even) {\n                    min_even = i\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        res = res.append(min_even)\n        res = res.append(min_index)\n        return res",
    "        if (arr.isEmpty()) {\n            return arr\n        }\n        var smallest_value = arr.head\n        var smallest_index = 0\n        for (i <- arr.tail) {\n            if (arr.head.toLong % 2 == 0) {\n                if (arr.head.toLong < smallest_value.toLong) {\n                    smallest_value = arr.head\n                    smallest_index = i\n                }\n            }\n        }\n        return (List[Long](smallest_value, smallest_index))",
    "        var result = List[Long](arr.size)\n        var min_even_value = arr.size\n        var min_index = 0\n        for(i <- 0 until arr.size) {\n            if(arr[i] % 2 == 0) {\n                if(arr[i] < min_even_value) {\n                    min_even_value = arr[i]\n                    min_index = i\n                }\n            }\n        }\n        result[0] = min_even_value\n        result[1] = min_index\n        return result",
    "        var result = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i.toLong % 2 == 0) {\n                if (i.toLong < min_even) {\n                    min_even = i.toLong\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        if (min_even != 0) {\n            result = List[Long](min_even, min_index)\n        }\n        return result",
    "        var result = List[Long]()\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        var i = 0\n        while (i < arr.size) {\n            if (arr.apply(i).toLong % 2 == 0) {\n                if (arr.apply(i).toLong < smallest_even_value) {\n                    smallest_even_value = arr.apply(i).toLong\n                    smallest_index = i\n                }\n            }\n            i = i + 1\n        }\n        if (smallest_even_value == 0) {\n            result = arr.apply(smallest_index)\n        }\n        return result",
    "        val result = mutable.List[Long]()\n        val min_even = arr.minBy[Long](_ => _ % 2 == 0)\n        val min_index = arr.indexOf(min_even)\n        if (min_even == None) {\n            return result\n        }\n        result.append(min_even)\n        result.append(min_index)\n        return result",
    "        var result = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        var min_value = 0\n        var min_index_even = 0\n        var min_value_even = 0\n        var i = 0\n        for (i = 0; i < arr.size; i++) {\n            if (arr.apply(i) % 2 == 0) {\n                if (arr.apply(i) < min_even) {\n                    min_even = arr.apply(i)\n                    min_index_even = i\n                }\n            } else {\n                if (arr.apply(i) < min_value) {\n                    min_value = arr.apply(i)\n                    min_index = i\n                }\n            }\n        }\n        if (min_even == 0) {\n            result = List[Long](min_value, min_index)\n        } else {\n            result = List[Long](min_even, min_index_even)\n        }\n        return result",
    "        var result = List[Long]()\n        var min_even_value = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < min_even_value) {\n                    min_even_value = i\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        result = result.append(min_even_value)\n        result = result.append(min_index)\n        return result",
    "        var result = List[Long]().toLong\n        var smallest_even_value = arr.head.toLong\n        var smallest_index = 0\n        for(i <- arr.tail.toLong) {\n            if(arr.head.toLong % 2 == 0) {\n                if(arr.head.toLong < smallest_even_value) {\n                    smallest_even_value = arr.head.toLong\n                    smallest_index = i\n                }\n            }\n        }\n        result = result.append(smallest_even_value)\n        result = result.append(smallest_index)\n        return result",
    "        var res = List[Long]()\n        var min_even = Long.MAX_VALUE\n        var min_index = 0\n        for (i <- 0 until arr.length) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_index = i\n                }\n            }\n        }\n        if (min_even == Long.MAX_VALUE) {\n            return res\n        } else {\n            res = List[Long](min_even, min_index)\n        }\n        return res",
    "        var result = List[Long]()\n        var min_index = -1\n        var min_value = -1\n        for (i <- 0 until arr.length) {\n            if (arr[i] % 2 == 0) {\n                if (min_value == -1) {\n                    min_value = arr[i]\n                    min_index = i\n                } else if (arr[i] < min_value) {\n                    min_value = arr[i]\n                    min_index = i\n                }\n            }\n        }\n        if (min_value == -1) {\n            return result\n        } else {\n            result = List[Long](min_value, min_index)\n        }\n        return result",
    "        var result = List[Long]()\n        var min_even_value = arr.head.toLong\n        var min_index = 0\n        var min_even_index = 0\n        var min_index_index = 0\n        for (i <- 0 until arr.length) {\n            if (arr[i].toLong % 2 == 0) {\n                if (arr[i].toLong < min_even_value) {\n                    min_even_value = arr[i].toLong\n                    min_even_index = i\n                }\n            } else {\n                if (arr[i].toLong < min_even_value) {\n                    min_even_value = arr[i].toLong\n                    min_even_index = i\n                }\n                if (arr[i].toLong < min_index_value) {\n                    min_index_value = arr[i].toLong\n                    min_index_index = i\n                }\n            }\n        }\n        if (min_even_value == 0) {\n            result = arr.take(min_index_index)\n        } else {\n            result = arr.take(min_even_index)\n        }\n        return result",
    "        var result = List[Long]().toSeq()\n        for (i <- 0 until arr.length) {\n            if (arr[i] % 2 == 0) {\n                result = result.append(arr[i])\n            }\n        }\n        return result",
    "        if (arr.isEmpty()) {\n            return arr\n        }\n        var min_even_value = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < min_even_value) {\n                    min_even_value = i\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        return (List[Long](min_even_value, min_index))",
    "        var res = List[Long]()\n        var min_even = Long.MAX_VALUE\n        var min_index = -1\n        for(i <- 0 until arr.length) {\n            if(arr[i] % 2 == 0) {\n                if(arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_index = i\n                }\n            }\n        }\n        if(min_index == -1) {\n            return res\n        } else {\n            res = List[Long](min_even, min_index)\n        }\n        return res",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i.toLong % 2 == 0) {\n                if (i.toLong < min_even) {\n                    min_even = i.toLong\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        if (min_even == 0) {\n            res = arr.take(min_index)\n        }\n        return res",
    "        var smallest_even_value = arr.filter(x => x % 2 == 0).minBy[Long](_ => x)\n        var smallest_index = arr.indexOf(smallest_even_value)\n        var plucked_node = arr.take(smallest_index)\n        return plucked_node",
    "        var result = List[Long]()\n        var smallest_value = arr.head\n        var smallest_index = 0\n        for (i <- arr.tail) {\n            if (arr.head.toLong % 2 == 0) {\n                if (arr.head.toLong < smallest_value.toLong) {\n                    smallest_value = arr.head\n                    smallest_index = i\n                }\n            }\n        }\n        result = List[Long](smallest_value, smallest_index)\n        return result",
    "        val res = mutable.List[Long]()\n        for (i <- 0 until arr.length) {\n            val cur = arr[i]\n            if (cur % 2 == 0) {\n                res.append(cur)\n                res.append(i)\n                break\n            }\n        }\n        return res",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        var min_even_index = 0\n        for (i <- arr.size - 1) {\n            if (arr.apply(i).toLong % 2 == 0) {\n                if (arr.apply(i).toLong < min_even) {\n                    min_even = arr.apply(i).toLong\n                    min_even_index = i\n                }\n            }\n        }\n        if (min_even_index != 0) {\n            res = res.append(min_even)\n            res = res.append(min_even_index)\n        }\n        return res",
    "        val res = mutable.List[Long]()\n        val min_even = arr.minBy[Int](_ => _ % 2 == 0)._1\n        val min_index = arr.minBy[Int](_ => _ % 2 == 0)._2\n        val min_value = arr.minBy[Int](_ => _ % 2 == 0)._3\n        val min_index_value = arr.minBy[Int](_ => _ % 2 == 0)._4\n        val min_index_value_index = arr.minBy[Int](_ => _ % 2 == 0)._5\n        val min_index_value_index_value = arr.minBy[Int](_ => _ % 2 == 0)._6\n        if (min_even == null) {\n            return res\n        }\n        if (min_index == null) {\n            return res\n        }\n        if (min_value == null) {\n            return res\n        }\n        if (min_index_value == null) {\n            return res\n        }\n        if (min_index_value_index == null) {\n            return res\n        }\n        if (min_index_value_index_value == null) {\n            return res\n        }\n        res.append(min_even)\n        res.append(min_index)\n        return res",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        var min_even_index = 0\n        for(i <- arr.size) {\n            if(arr.apply(i).toLong % 2 == 0) {\n                if(arr.apply(i).toLong < min_even) {\n                    min_even = arr.apply(i).toLong\n                    min_even_index = i\n                }\n            } else {\n                if(arr.apply(i).toLong < min_even) {\n                    min_even = arr.apply(i).toLong\n                    min_even_index = i\n                }\n            }\n        }\n        if(min_even_index == 0) {\n            res = List[Long](min_even, min_index)\n        } else {\n            res = List[Long](min_even, min_even_index)\n        }\n        return res",
    "        var result = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i.toLong % 2 == 0) {\n                if (i.toLong < min_even) {\n                    min_even = i.toLong\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        if (min_even == 0) {\n            result = arr.take(min_index)\n        }\n        return result",
    "        var result = List[Long]()\n        var min_even = Long.MAX_VALUE\n        var min_index = -1\n        var i = 0\n        for (i < arr.length) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_index = i\n                }\n            }\n            i = i + 1\n        }\n        if (min_index != -1) {\n            result = List[Long](min_even, min_index)\n        }\n        return result",
    "        var res = List[Long]()\n        var min_even = arr.minBy[0](_ => _.toLong % 2 == 0).toLong\n        var min_index = arr.minBy[1](_ => _.toLong).toLong\n        var min_value = arr.minBy[0](_ => _.toLong).toLong\n        var min_index_value = arr.minBy[1](_ => _.toLong).toLong\n        if (min_even == 0 && min_index == 0) {\n            res = arr.takeWhile[1](_ => _.toLong != min_value).toList\n        } else if (min_even == 0) {\n            res = arr.takeWhile[1](_ => _.toLong != min_value).toList\n        } else if (min_index == 0) {\n            res = arr.takeWhile[1](_ => _.toLong != min_index_value).toList\n        } else {\n            res = arr.takeWhile[1](_ => _.toLong != min_index_value).toList\n        }\n        return res",
    "        var smallest_value = arr.head\n        var smallest_index = 0\n        var index = 0\n        for(i <- arr.tail) {\n            if(arr.head == arr.tail.head) {\n                smallest_value = arr.head\n                smallest_index = index\n            } else if(arr.head < arr.tail.head) {\n                smallest_value = arr.head\n                smallest_index = index\n            } else if(arr.head > arr.tail.head) {\n                smallest_value = arr.tail.head\n                smallest_index = index + 1\n            }\n            index += 1\n        }\n        return (smallest_value, smallest_index)",
    "        if (arr.length == 0) {\n            return []\n        } else {\n            var smallest_even_value = arr[0]\n            var smallest_index = 0\n            for (i <- 1 to arr.length - 1) {\n                if (arr[i] % 2 == 0) {\n                    if (arr[i] < smallest_even_value) {\n                        smallest_even_value = arr[i]\n                        smallest_index = i\n                    }\n                }\n            }\n            return [smallest_even_value, smallest_index]\n        }",
    "        val res = new ArrayList[Long]()\n        val min_even = arr.minBy(x -> x % 2 == 0)\n        val min_index = arr.indexOf(min_even)\n        if (min_even == null) {\n            return res\n        }\n        val min_even_index = arr.indexOf(min_even)\n        res.add(min_even)\n        res.add(min_index)\n        return res",
    "        var result = List[Long]()\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        var i = 0\n        while (i < arr.length) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < smallest_even_value) {\n                    smallest_even_value = arr[i]\n                    smallest_index = i\n                }\n            }\n            i = i + 1\n        }\n        if (smallest_even_value == 0) {\n            result = arr.take(smallest_index)\n        } else {\n            result = arr.take(smallest_index).append(smallest_even_value)\n        }\n        return result",
    "        var res = List[Long]()\n        var min_even = Long.MAX_VALUE\n        var min_index = 0\n        var min_value = Long.MAX_VALUE\n        for (i <- 0 until arr.length) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_index = i\n                }\n            } else {\n                if (arr[i] < min_value) {\n                    min_value = arr[i]\n                    min_index = i\n                }\n            }\n        }\n        res = List[Long](min_even, min_index)\n        return res",
    "        var res = List[Long]()\n        var min = arr.head\n        var min_index = 0\n        for(i <- arr.tail) {\n            if(min.even) {\n                if(i.even) {\n                    if(i.value < min.value) {\n                        min = i\n                        min_index = arr.indexOf(i)\n                    }\n                } else {\n                    if(i.value < min.value) {\n                        min = i\n                        min_index = arr.indexOf(i)\n                    }\n                }\n            } else {\n                if(i.even) {\n                    if(i.value < min.value) {\n                        min = i\n                        min_index = arr.indexOf(i)\n                    }\n                } else {\n                    if(i.value < min.value) {\n                        min = i\n                        min_index = arr.indexOf(i)\n                    }\n                }\n            }\n        }\n        res = List[Long](min.value, min_index)\n        return res",
    "        var result = List[Long]()\n        var min_even = Long.MAX_VALUE\n        var min_index = -1\n        for (i <- 0 until arr.length) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_index = i\n                }\n            }\n        }\n        if (min_index != -1) {\n            result = List[Long](min_even, min_index)\n        }\n        return result",
    "        val res = mutable.List[Long]()\n        if (arr.isEmpty()) {\n            return res\n        }\n        val min_even = arr.minBy(x => x % 2 == 0)\n        val min_index = arr.indexOf(min_even)\n        res.append(min_even)\n        res.append(min_index)\n        return res",
    "        var result = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i.toLong % 2 == 0) {\n                if (i.toLong < min_even) {\n                    min_even = i.toLong\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        result = result.append(min_even)\n        result = result.append(min_index)\n        return result",
    "        if (arr.isEmpty()) return arr\n        var smallest_value = arr.head\n        var smallest_index = 0\n        var index = 0\n        for (i <- arr.tail) {\n            if (arr.head == i) {\n                arr = arr.tail\n                return arr\n            }\n            if (arr.head % 2 == 0 && arr.head < i) {\n                smallest_value = arr.head\n                smallest_index = index\n            }\n            if (arr.head % 2 != 0 && arr.head < i) {\n                smallest_value = arr.head\n                smallest_index = index\n            }\n            index += 1\n        }\n        arr = arr.tail\n        return arr",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        var min_even_index = 0\n        for(i <- arr.length - 1) {\n            if(arr[i] % 2 == 0) {\n                if(arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_even_index = i\n                }\n            } else {\n                if(arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_even_index = i\n                }\n                if(arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_even_index = i\n                }\n            }\n        }\n        if(min_even_index == 0) {\n            res = arr\n        } else {\n            res = List[Long](min_even, min_even_index)\n        }\n        return res",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < min_even) {\n                    min_even = i\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        res = res.append(min_even)\n        res = res.append(min_index)\n        return res",
    "        if (arr.isEmpty()) return arr\n        var min_even = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i.toLong % 2 == 0) {\n                if (i.toLong < min_even) {\n                    min_even = i.toLong\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        return (min_even, min_index)",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        for(i <- arr.tail) {\n            if(i.mod(2) == 0) {\n                if(i < min_even) {\n                    min_even = i\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        res = res.append(min_even)\n        res = res.append(min_index)\n        return res",
    "        if (arr.isEmpty()) {\n            return []\n        }\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        var index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < smallest_even_value) {\n                    smallest_even_value = i\n                    smallest_index = index\n                }\n            }\n            index += 1\n        }\n        return [smallest_even_value, smallest_index]",
    "        var result = List[Long]()\n        var smallest_value = arr.head\n        var smallest_index = 0\n        var i = 0\n        while (i < arr.size) {\n            if (arr.apply(i).toLong % 2 == 0) {\n                if (arr.apply(i).toLong < smallest_value) {\n                    smallest_value = arr.apply(i).toLong\n                    smallest_index = i\n                }\n            }\n            i = i + 1\n        }\n        if (smallest_value == 0) {\n            result = arr.apply(smallest_index)\n        }\n        return result",
    "        var result = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        var min_even_index = 0\n        var min_even_value = 0\n        for (i <- 0 until arr.length) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < min_even_value) {\n                    min_even_value = arr[i]\n                    min_even_index = i\n                }\n            } else {\n                if (arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_even_index = i\n                }\n            }\n        }\n        if (min_even_value != 0) {\n            result = List[Long](min_even_value, min_even_index)\n        }\n        return result",
    "        var result = List[Long]()\n        var min_even = Long.MAX_VALUE\n        var min_index = 0\n        for (i <- 0 until arr.length) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_index = i\n                }\n            }\n        }\n        result = List[Long](min_even, min_index)\n        return result",
    "        var result = List[Long]()\n        var min_even = Long.MAX_VALUE\n        var min_index = -1\n        for (i <- 0 until arr.length) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_index = i\n                }\n            }\n        }\n        if (min_index != -1) {\n            result = List[Long](min_even, min_index)\n        }\n        return result",
    "        var result = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        var min_even_index = 0\n        var min_index_index = 0\n        var i = 0\n        while (i < arr.length) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_even_index = i\n                }\n            } else {\n                if (arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_even_index = i\n                }\n                if (arr[i] < min_index) {\n                    min_index = arr[i]\n                    min_index_index = i\n                }\n            }\n            i = i + 1\n        }\n        if (min_even_index == 0) {\n            result = List[Long](min_index, min_index_index)\n        } else {\n            result = List[Long](min_even, min_even_index)\n        }\n        return result",
    "        var res = List[Long]()\n        var min_even = Long.MAX_VALUE\n        var min_index = -1\n        for (i <- 0 until arr.length) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_index = i\n                }\n            }\n        }\n        if (min_index != -1) {\n            res = List[Long](min_even, min_index)\n        }\n        return res",
    "        var smallest_even_value = arr.head\n        var smallest_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < smallest_even_value) {\n                    smallest_even_value = i\n                    smallest_index = arr.indexOf(i)\n                }\n            }\n        }\n        return (List[Long](smallest_even_value, smallest_index))",
    "        var res = List[Long]()\n        var min_even = arr.head.toLong\n        var min_index = 0\n        for (i <- arr.size - 1) {\n            if (arr.apply(i).toLong % 2 == 0) {\n                if (arr.apply(i).toLong < min_even) {\n                    min_even = arr.apply(i).toLong\n                    min_index = i\n                }\n            }\n        }\n        if (min_even == 0) {\n            res = arr.apply(min_index)\n        }\n        return res",
    "        var result = List[Long]()\n        var smallest_even_value = arr.head\n        var smallest_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < smallest_even_value) {\n                    smallest_even_value = i\n                    smallest_index = arr.indexOf(i)\n                }\n            }\n        }\n        result = result.append(smallest_even_value)\n        result = result.append(smallest_index)\n        return result",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        var min_even_index = 0\n        var i = 0\n        for(i = 0; i < arr.size; i++) {\n            if(arr.apply(i) % 2 == 0) {\n                if(arr.apply(i) < min_even) {\n                    min_even = arr.apply(i)\n                    min_even_index = i\n                }\n            }\n        }\n        if(min_even_index != 0) {\n            res = List[Long](min_even, min_even_index)\n        }\n        return res",
    "        var res = List[Long]()\n        var min_even_value = arr.head\n        var min_index = 0\n        var i = 0\n        while (i < arr.length) {\n            var curr_even_value = arr[i]\n            if (curr_even_value % 2 == 0) {\n                if (curr_even_value < min_even_value) {\n                    min_even_value = curr_even_value\n                    min_index = i\n                }\n            }\n            i = i + 1\n        }\n        if (min_index == 0) {\n            res = res.append(min_even_value)\n        } else {\n            res = res.append(arr[min_index])\n        }\n        return res",
    "        var res = List[Long]()\n        var min_even_value = arr.head\n        var min_index = 0\n        for (i <- arr.size - 1) {\n            if (arr.apply(i).mod(2) == 0) {\n                if (arr.apply(i) < min_even_value) {\n                    min_even_value = arr.apply(i)\n                    min_index = i\n                }\n            }\n        }\n        res = res.append(min_even_value)\n        res = res.append(min_index)\n        return res",
    "        var res = List[Long]()\n        var min_even = arr.minBy[Int](_ => _ % 2 == 0)\n        var min_index = arr.indexOf(min_even)\n        if (min_even != null) {\n            res = List[Long](min_even, min_index)\n        }\n        return res",
    "        var result = List[Long]()\n        var min_even = arr.head.toLong\n        var min_index = 0\n        for (i <- arr) {\n            if (i.toLong % 2 == 0) {\n                if (i.toLong < min_even) {\n                    min_even = i.toLong\n                    min_index = i.toLong\n                }\n            }\n        }\n        result = result.append(min_even)\n        result = result.append(min_index)\n        return result",
    "        var result = List[Long]()\n        var smallest_value = arr.head\n        var smallest_index = 0\n        var index = 0\n        for(i <- arr.tail) {\n            if(arr.head == i) {\n                result = append(result, arr.head)\n                arr = arr.tail\n            } else if(arr.head % 2 == 0 && arr.head < i) {\n                result = append(result, arr.head)\n                arr = arr.tail\n            } else if(arr.head % 2 == 0 && arr.head > i) {\n                result = append(result, arr.head)\n                arr = arr.tail\n            } else if(arr.head < i) {\n                result = append(result, arr.head)\n                arr = arr.tail\n            } else if(arr.head > i) {\n                result = append(result, arr.head)\n                arr = arr.tail\n            }\n        }\n        return result",
    "        var res = List[Long]()\n        var min_index = -1\n        var min_value = -1\n        for (i <- 0 until arr.length) {\n            if (arr[i] % 2 == 0) {\n                if (min_value == -1) {\n                    min_value = arr[i]\n                    min_index = i\n                } else if (arr[i] < min_value) {\n                    min_value = arr[i]\n                    min_index = i\n                }\n            }\n        }\n        if (min_value == -1) {\n            return res\n        } else {\n            res = List[Long](min_value, min_index)\n        }\n        return res",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        var min_even_index = 0\n        for (i <- arr.size) {\n            if (arr.apply(i).toInt % 2 == 0) {\n                if (arr.apply(i).toInt < min_even) {\n                    min_even = arr.apply(i).toInt\n                    min_even_index = i\n                }\n            }\n        }\n        if (min_even_index == 0) {\n            res = List[Long](min_even, min_index)\n        } else {\n            res = List[Long](min_even, min_even_index)\n        }\n        return res",
    "        val res = List[Long]()\n        val evens = arr.filter(x -> x % 2 == 0)\n        if (evens.isEmpty()) {\n            return res\n        }\n        val smallest = evens.minBy(x -> x)\n        val index = arr.indexOf(smallest)\n        res = res.append(smallest)\n        res = res.append(index)\n        return res",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        for(i <- arr.tail) {\n            if(arr.head.even()) {\n                if(arr.head.value < min_even.value) {\n                    min_even = arr.head\n                    min_index = i\n                }\n            } else {\n                if(arr.head.value < min_even.value) {\n                    min_even = arr.head\n                    min_index = i\n                }\n            }\n        }\n        res = res.append(min_even)\n        res = res.append(min_index)\n        return res",
    "        var result = List[Long]()\n        var smallest_value = arr.head\n        var smallest_index = 0\n        for (i <- arr.tail) {\n            if (arr.head.even()) {\n                if (arr.head.value < smallest_value) {\n                    smallest_value = arr.head.value\n                    smallest_index = i\n                }\n            } else {\n                result = append(result, arr.head)\n            }\n        }\n        result = append(result, smallest_index)\n        return result",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        var min_even_index = 0\n        for (i <- arr.length - 1) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_even_index = i\n                }\n            } else {\n                if (arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_even_index = i\n                }\n            }\n        }\n        if (min_even_index == 0) {\n            res = List[Long](min_even, min_index)\n        } else {\n            res = List[Long](min_even, min_even_index)\n        }\n        return res",
    "        val res = mutable.List[Long]()\n        if (arr.isEmpty()) {\n            return res\n        }\n        val smalest_value = arr.head()\n        val smalest_index = arr.indexOf(smalest_value)\n        for (i <- arr.tail()) {\n            if (i % 2 == 0) {\n                if (i < smalest_value) {\n                    smalest_value = i\n                    smalest_index = arr.indexOf(i)\n                }\n            }\n        }\n        res.append(smalest_value)\n        res.append(smalest_index)\n        return res",
    "        var result = List[Long]()\n        var min_even = Long.MAX_VALUE\n        var min_index = 0\n        for(i <- 0 until arr.length) {\n            if(arr[i] % 2 == 0) {\n                if(arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_index = i\n                }\n            }\n        }\n        if(min_even == Long.MAX_VALUE) {\n            return result\n        }\n        result = List[Long](min_even, min_index)\n        return result",
    "        var res = List[Long]().toLong\n        var min_index = -1\n        var min_value = -1\n        for (i <- 0 until arr.length) {\n            if (arr[i] % 2 == 0) {\n                if (min_value == -1) {\n                    min_value = arr[i]\n                    min_index = i\n                } else if (arr[i] < min_value) {\n                    min_value = arr[i]\n                    min_index = i\n                }\n            }\n        }\n        if (min_value == -1) {\n            return res\n        } else {\n            return res.update(min_index).update(min_value)\n        }",
    "        var res = List[Long]()\n        var min_even = arr.head\n        var min_index = 0\n        for (i <- arr.tail) {\n            if (i % 2 == 0) {\n                if (i < min_even) {\n                    min_even = i\n                    min_index = arr.indexOf(i)\n                }\n            }\n        }\n        res = List[Long](min_even, min_index)\n        return res",
    "        var result = List[Long]()\n        var smallest_value = arr.head\n        var smallest_index = 0\n        var i = 0\n        while(i < arr.size) {\n            if(arr.apply(i).toLong % 2 == 0) {\n                if(arr.apply(i).toLong < smallest_value) {\n                    smallest_value = arr.apply(i).toLong\n                    smallest_index = i\n                }\n            }\n            i = i + 1\n        }\n        result = result.append(smallest_value)\n        result = result.append(smallest_index)\n        return result",
    "        if (arr.isEmpty()) return arr\n        val smallest_value = arr.head()\n        val smallest_index = 0\n        for (i <- arr.tail()) {\n            if (i % 2 == 0) {\n                if (i < smallest_value) {\n                    smallest_value = i\n                    smallest_index = arr.indexOf(i)\n                }\n            }\n        }\n        return arr.take(smallest_index)",
    "        var result = List[Long]()\n        var min_even = Long.MAX_VALUE\n        var min_index = 0\n        var min_value = Long.MAX_VALUE\n        for (i <- 0 until arr.length) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_index = i\n                }\n            }\n        }\n        if (min_even == Long.MAX_VALUE) {\n            result = List[Long](arr)\n        } else {\n            result = List[Long](min_even, min_index)\n        }\n        return result",
    "        var res = List[Long]()\n        var min_even = Long.MAX_VALUE\n        var min_index = -1\n        for (i <- 0 until arr.length) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < min_even) {\n                    min_even = arr[i]\n                    min_index = i\n                }\n            }\n        }\n        if (min_index == -1) {\n            return res\n        } else {\n            res = List[Long](min_even, min_index)\n        }\n        return res"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}