{
  "name": "HumanEval_131_digits",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            var x = n\n            var y = 0\n            while (x > 0) {\n                y = y * 10 + x % 10\n                x /= 10\n            }\n            y\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8ducl5mn.scala:20:20 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                y = y * \u001b[31m10\u001b[0m + x % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Found:    Long\n\u001b[31m   |\u001b[0m                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val s = nn.substring(1, nn.length)\n        val d = s.split(\"\")\n        val result = 0l\n        for (i <- 1 to d.length) {\n            val dn = d(i)\n            if (dn.toInt % 2 == 1) {\n                result = result * dn\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293227,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpdbyk_ti0.scala:21:32 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                result = result * dn\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m*\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mLong\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double): Double\n\u001b[31m   |\u001b[0m (x: Float): Float\n\u001b[31m   |\u001b[0m (x: Long): Long\n\u001b[31m   |\u001b[0m (x: Int): Long\n\u001b[31m   |\u001b[0m (x: Char): Long\n\u001b[31m   |\u001b[0m (x: Short): Long\n\u001b[31m   |\u001b[0m (x: Byte): Long\n\u001b[31m   |\u001b[0mmatch arguments ((dn : String))\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val s = nn.substring(2, nn.length)\n        val r = s.split(\"\")\n        val r2 = r.map(_.toInt)\n        val r3 = r2.filter(_.%2 == 1)\n        val r4 = r3.map(_.toInt)\n        val r5 = r4.reduce(_.times)\n        r5\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293227,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp79i4syy2.scala:18:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mr3\u001b[0m = r2.filter(_.%\u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              ')' expected, but integer literal found\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp79i4syy2.scala:20:27 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mr5\u001b[0m = r4.reduce(_.times)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Wrong number of parameters, expected: 2\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n\n        val nb = nn.toBigInteger()\n        val nb2 = nb.shiftRight(1)\n        val nb3 = nb2.and(new scala.math.Numeric$Bitmask().setBit(0))\n        val nb4 = nb3.shiftRight(1)\n        val nb5 = nb4.and(new scala.math.Numeric$Bitmask().setBit(0))\n        val nb6 = nb5.shiftRight(1)\n        val nb7 = nb6.and(new scala.math.Numeric$Bitmask().setBit(0))\n        val nb8 = nb7.shiftRight(1)\n        val nb9 = nb8.and(new scala.math.Numeric$Bitmask().setBit(0))\n        val nb10 = nb9.shiftRight(1)\n        val nb11 = nb10.and(new scala.math.Numeric$Bitmask().setBit(0))\n        val nb12 = nb11.shiftRight(1)\n        val nb13 = nb12.and(new scala.math.Numeric$Bitmask().setBit(0))\n        val nb14 = nb13.shiftRight(1)\n        val nb15 = nb14.and(new scala.math.Numeric$Bitmask().setBit(0))\n        val nb16 = nb15.shiftRight(1)\n        val nb17 = nb16.and(new scala.math.Numeric$Bitmask().setBit(0))\n        val nb18 = nb17.shiftRight(1)\n        val nb19 = nb18.and(new scala.math.Numeric$Bitmask().setBit(0))\n        val nb20 = nb19.shiftRight(1)\n        val nb21 = nb20.and(new scala.math.Numeric$Bitmask().setBit(0))\n        val nb22 = nb21.shiftRight(1)\n        val nb23 = nb22.and(new scala.math\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpb6afgwxk.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb6afgwxk.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnb\u001b[0m = nn.toBigInteger()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value toBigInteger is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb6afgwxk.scala:38:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n\n        if (nn % 2 == 0) {\n            return 0l\n        } else {\n            val nn2 = nn / 2\n            val nn3 = nn2 / 2\n            val nn4 = nn3 / 2\n            val nn5 = nn4 / 2\n            val nn6 = nn5 / 2\n            val nn7 = nn6 / 2\n            val nn8 = nn7 / 2\n            val nn9 = nn8 / 2\n            val nn10 = nn9 / 2\n            val nn11 = nn10 / 2\n            val nn12 = nn11 / 2\n            val nn13 = nn12 / 2\n            val nn14 = nn13 / 2\n            val nn15 = nn14 / 2\n            val nn16 = nn15 / 2\n            val nn17 = nn16 / 2\n            val nn18 = nn17 / 2\n            val nn19 = nn18 / 2\n            val nn20 = nn19 / 2\n            val nn21 = nn20 / 2\n            val nn22 = nn21 / 2\n            val nn23 = nn22 / 2\n            val nn24 = nn23 / 2\n            val nn25 = nn24 / 2\n            val nn26 = nn25 / 2\n            val nn27 = nn26 / 2\n            val nn28 = nn27 / 2\n            val nn29 = nn28 / 2\n            val nn30 = nn29 / 2\n            val nn31 = nn30 / 2\n            val nn32 = nn31 / 2\n            val nn33 = nn32 / 2\n            val nn34 = nn33 / 2\n            val nn35 = nn34 / 2\n            val nn36 = nn35 / 2\n            val nn37 = nn36 / 2\n            val nn38 = nn37 / 2\n            val nn39 = nn38 / 2\n            val nn40 = nn39 / 2\n            val nn41 = nn40 / 2\n            val nn42\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdvu6w06r.scala:59:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdvu6w06r.scala:71:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdvu6w06r.scala:70:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpdvu6w06r.scala:60:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        val result = 0l\n        for (i <- 0 until digits.length) {\n            if (digits(i) % 2 == 1) {\n                result = result * digits(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgw2iyc5z.scala:21:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                result = result * digits(i)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val s = nn.substring(1, nn.length)\n        val r = s.split(\"\")\n        val m = mutable.List[Long]()\n        for (i <- 0 until len(r)) {\n            m:=m + (r(i) % 2 == 1 ? r(i) : 0)\n        }\n        m.reduce(0l)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqtzfdg44.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mm\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqtzfdg44.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until len(r)) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: len\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            n % 2 == 0 ? 0 : (n % 10 * 9)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuyxxzj8z.scala:17:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (\u001b[35mn\u001b[0m \u001b[35m%\u001b[0m \u001b[31m10\u001b[0m \u001b[35m*\u001b[0m \u001b[31m9\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type *\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuyxxzj8z.scala:17:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (\u001b[35mn\u001b[0m \u001b[35m%\u001b[0m \u001b[31m10\u001b[0m \u001b[35m*\u001b[0m \u001b[31m9\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value ? is not a member of Int\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 0) {\n                digits(i) = 0\n            }\n        }\n        digits(n.toString().length() - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk9yt3shw.scala:27)\n\tat Problem.main(tmpk9yt3shw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = mutable.List[Long]()\n        while (n > 0) {\n            digits.append(n % 10)\n            n /= 10\n        }\n        digits.reverse()\n        val result = mutable.List[Long]()\n        for (i <- 0 until digits.size) {\n            result.append(digits.apply(i) * 2 - 1)\n        }\n        result.reverse()\n        result.foreach(x -> {\n            if (x % 2 == 1) {\n                result.append(x)\n            }\n        })\n        result.foreach(x -> {\n            if (x == 0) {\n                return\n            }\n            if (x % 2 == 1) {\n                result.append(x)\n            }\n        })\n        result.foreach(x -> {\n            if (x == 0) {\n                return\n            }\n            if (x % 2 == 1) {\n                result.append(x)\n            }\n        })\n        result.foreach(x -> {\n            if (x == 0) {\n                return\n            }\n            if (x % 2 == 1) {\n                result.append(x)\n            }\n        })\n        result.foreach(x -> {\n            if (x == 0) {\n                return\n            }\n            if (x % 2 == 1) {\n                result.append(x)\n            }\n        })\n        result.foreach(x -> {\n            if (x == 0) {\n                return\n            }\n            if (x % 2 == 1) {\n                result.append(x)\n            }\n        })\n        result.foreach(x -> {\n            if (x == 0) {\n                return\n            }\n            if (x % 2 == 1) {\n                result.append(x)\n            }\n        })\n        result.foreach(x -> {\n            if (x == 0) {\n                return\n            }\n            if (x % 2 == 1) {\n                result.append(x)\n            }\n        })\n        result.foreach(x -> {\n            if (x == 0) {\n                return\n            }\n\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbneg5x3c.scala:92:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m92 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbneg5x3c.scala:103:0 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m103 |\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m^\u001b[0m\n\u001b[31m    |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbneg5x3c.scala:14:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbneg5x3c.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n /= \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbneg5x3c.scala:20:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val d = n.toString().split(\"\")\n        val result = 0l\n        for (i <- 0 until d.length) {\n            if (d(i).toInt % 2 == 1) {\n                result = result * d(i).toInt\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293227,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpbn40ucn5.scala:18:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                result = result * d(i).toInt\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        var x = n\n        while (x > 0) {\n            var y = x % 10\n            if (y % 2 == 1) {\n                x = x / 10\n            } else {\n                x = x / 10\n            }\n        }\n        x\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpozyzsmjv.scala:26)\n\tat Problem.main(tmpozyzsmjv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            return 0l\n        } else {\n            return (n % 2l) * digits(n / 2l)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp25k_8xc5.scala:21)\n\tat Problem.main(tmp25k_8xc5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        digits.reduce(_.times)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp9nvoly44.scala:18:22 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        digits.reduce(_.times)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Wrong number of parameters, expected: 2\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        val result = 0l\n        for (i <- 0 until digits.length) {\n            result = result * digits(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp93okvt8y.scala:20:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            result = result * digits(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            n % 2 == 0 ? 0 : n\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp01x0524d.scala:17:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type n\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp01x0524d.scala:17:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value ? is not a member of Int\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n % 2 == 0) {\n            return 0l\n        } else {\n            return n / 2l\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppfkkns34.scala:21)\n\tat Problem.main(tmppfkkns34.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            n % 2 == 0 ? 0 : (n * digits(n - 1))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9nw_xsn2.scala:17:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (\u001b[35mn\u001b[0m \u001b[35m*\u001b[0m \u001b[35mdigits\u001b[0m(n - \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        ')' expected, but '(' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9nw_xsn2.scala:17:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (\u001b[35mn\u001b[0m \u001b[35m*\u001b[0m \u001b[35mdigits\u001b[0m(n - \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: type *\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9nw_xsn2.scala:17:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (\u001b[35mn\u001b[0m \u001b[35m*\u001b[0m \u001b[35mdigits\u001b[0m(n - \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value ? is not a member of Int\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            n % 2 == 0 ? 0 : n\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp01x0524d.scala:17:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type n\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp01x0524d.scala:17:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value ? is not a member of Int\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            return 0l\n        } else {\n            return (n % 2l) * digits(n / 2l)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293228,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp25k_8xc5.scala:21)\n\tat Problem.main(tmp25k_8xc5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            n % 2 == 0 ? 0 : n\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp01x0524d.scala:17:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type n\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp01x0524d.scala:17:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value ? is not a member of Int\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        digits(n.toString().length() - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj1_gna9n.scala:22)\n\tat Problem.main(tmpj1_gna9n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 0) {\n                digits(i) = 0\n            }\n        }\n        digits\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6jsumb7f.scala:23:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        digits\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (digits : Array[Long])\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        var digits = new Array[Long](n.toString().length)\n        for (i <- 0 until n.toString().length) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length) {\n            if (digits(i) % 2 == 0) {\n                digits(i) = 0\n            }\n        }\n        digits(0)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293230,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgmsx9ndf.scala:30)\n\tat Problem.main(tmpgmsx9ndf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            var x = n\n            var y = 1l\n            while (x > 0) {\n                if (x % 2 == 1) {\n                    y *= x\n                }\n                x /= 2\n            }\n            y\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkmpr7qjg.scala:30)\n\tat Problem.main(tmpkmpr7qjg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n % 2 == 0) return 0l\n        return (n / 2) * (n / 2 + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg4hjo820.scala:19)\n\tat Problem.main(tmpg4hjo820.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n % 2 == 0) return 0l\n        return n % 2l\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293236,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpp8bwb28m.scala:19)\n\tat Problem.main(tmpp8bwb28m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val n2 = n.toString\n        val s = n2.substring(2, n2.length)\n        val s2 = s.replaceAll(\"0\", \"\")\n        val s3 = s2.replaceAll(\"1\", \"\")\n        val s4 = s3.replaceAll(\"2\", \"\")\n        val s5 = s4.replaceAll(\"3\", \"\")\n        val s6 = s5.replaceAll(\"4\", \"\")\n        val s7 = s6.replaceAll(\"5\", \"\")\n        val s8 = s7.replaceAll(\"6\", \"\")\n        val s9 = s8.replaceAll(\"7\", \"\")\n        val s10 = s9.replaceAll(\"8\", \"\")\n        val s11 = s10.replaceAll(\"9\", \"\")\n        val s12 = s11.replaceAll(\"0\", \"\")\n        val s13 = s12.replaceAll(\"1\", \"\")\n        val s14 = s13.replaceAll(\"2\", \"\")\n        val s15 = s14.replaceAll(\"3\", \"\")\n        val s16 = s15.replaceAll(\"4\", \"\")\n        val s17 = s16.replaceAll(\"5\", \"\")\n        val s18 = s17.replaceAll(\"6\", \"\")\n        val s19 = s18.replaceAll(\"7\", \"\")\n        val s20 = s19.replaceAll(\"8\", \"\")\n        val s21 = s20.replaceAll(\"9\", \"\")\n        val s22 = s21.replaceAll(\"0\", \"\")\n        val s23 = s22.replaceAll(\"1\", \"\")\n        val s24 = s23.replaceAll(\"2\", \"\")\n        val s25 = s24.replaceAll(\"3\", \"\")\n        val s26 = s25.replaceAll(\"4\", \"\")\n        val s27 = s26.replaceAll(\"5\", \"\")\n        val s28 = s27.replaceAll(\"6\", \"\")\n        val s29 = s28.replaceAll(\"7\", \"\")\n        val s30 = s29.replaceAll(\"8\", \"\")\n        val s31 = s30.replaceAll(\"9\", \"\")\n        val s32 =\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293236,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpu11_o0tu.scala:46:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ms32\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu11_o0tu.scala:47:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        digits(n.toString().length() - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj1_gna9n.scala:22)\n\tat Problem.main(tmpj1_gna9n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n % 2 == 0) return 0l\n        return n % 2l\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293236,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpp8bwb28m.scala:19)\n\tat Problem.main(tmpp8bwb28m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n < 0) return 0l\n        if (n == 1) return 1l\n        if (n % 2 == 0) return 0l\n        return n % 2l\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293236,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw9cvgyrj.scala:21)\n\tat Problem.main(tmpw9cvgyrj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        val result = 0l\n        for (i <- 0 until digits.length) {\n            result = result * digits(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp93okvt8y.scala:20:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            result = result * digits(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n % 2 == 0) return 0l\n        return n / 2\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293237,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc68pbpwd.scala:19)\n\tat Problem.main(tmpc68pbpwd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val s = nn.substring(2, nn.length)\n        val s2 = s.replaceAll(\"[0-9]\", \"\")\n        val s3 = s2.replaceAll(\"[^0-9]\", \"\")\n        val s4 = s3.replaceAll(\"^0+\", \"\")\n        val s5 = s4.replaceAll(\"^1+\", \"\")\n        val s6 = s5.replaceAll(\"^2+\", \"\")\n        val s7 = s6.replaceAll(\"^3+\", \"\")\n        val s8 = s7.replaceAll(\"^4+\", \"\")\n        val s9 = s8.replaceAll(\"^5+\", \"\")\n        val s10 = s9.replaceAll(\"^6+\", \"\")\n        val s11 = s10.replaceAll(\"^7+\", \"\")\n        val s12 = s11.replaceAll(\"^8+\", \"\")\n        val s13 = s12.replaceAll(\"^9+\", \"\")\n        val s14 = s13.replaceAll(\"^0+\", \"\")\n        val s15 = s14.replaceAll(\"^1+\", \"\")\n        val s16 = s15.replaceAll(\"^2+\", \"\")\n        val s17 = s16.replaceAll(\"^3+\", \"\")\n        val s18 = s17.replaceAll(\"^4+\", \"\")\n        val s19 = s18.replaceAll(\"^5+\", \"\")\n        val s20 = s19.replaceAll(\"^6+\", \"\")\n        val s21 = s20.replaceAll(\"^7+\", \"\")\n        val s22 = s21.replaceAll(\"^8+\", \"\")\n        val s23 = s22.replaceAll(\"^9+\", \"\")\n        val s24 = s23.replaceAll(\"^0+\", \"\")\n        val s25 = s24.replaceAll(\"^1+\", \"\")\n        val s26 = s25.replaceAll(\"^2+\", \"\")\n        val s27 = s26.replaceAll(\"^3+\", \"\")\n        val s28 = s27.replaceAll(\"^\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293237,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp2srcp27q.scala:42:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ms28\u001b[0m = s27.replaceAll(\"^\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2srcp27q.scala:44:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2srcp27q.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2srcp27q.scala:44:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: ^def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val s = nn.substring(1, nn.length)\n        val r = s.split(\"\")\n        val rr = new ArrayList<Long>()\n        for (i <- 0 until r.length) {\n            val rr1 = r.get(i).toLong\n            rr.append(rr1)\n        }\n        val rr2 = rr.map(_.toLong)\n        val rr3 = rr2.reduce(_.times)\n        return rr3\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293236,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfr5zaxun.scala:17:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mrr\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArrayList\u001b[0m<Long>()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: type ArrayList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfr5zaxun.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mrr1\u001b[0m = r.get(i).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value get is not a member of Array[String]\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 0) {\n                digits(i) = 0\n            }\n        }\n        digits(0)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293237,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptp1hg3dw.scala:30)\n\tat Problem.main(tmptp1hg3dw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 0) {\n                digits(i) = 0\n            }\n        }\n        digits(n.toString().length())\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1\n\tat Problem$.digits(tmpx6o0zchm.scala:23)\n\tat Problem$.main(tmpx6o0zchm.scala:26)\n\tat Problem.main(tmpx6o0zchm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n % 2 == 0) {\n            return 0l\n        } else {\n            return n % 10\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293237,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp28waqtl9.scala:22)\n\tat Problem.main(tmp28waqtl9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        val result = 0l\n        for (i <- 0 until digits.length) {\n            result = result * digits(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp93okvt8y.scala:20:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            result = result * digits(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n % 2 == 0) return 0l\n        return n % 10\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293238,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo_pxq71v.scala:20)\n\tat Problem.main(tmpo_pxq71v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            n % 2 == 0 ? 0 : n\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp01x0524d.scala:17:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type n\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp01x0524d.scala:17:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value ? is not a member of Int\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val nn2 = nn.replaceAll(\"0\", \"\")\n        val nn3 = nn2.replaceAll(\"1\", \"\")\n        val nn4 = nn3.replaceAll(\"2\", \"\")\n        val nn5 = nn4.replaceAll(\"3\", \"\")\n        val nn6 = nn5.replaceAll(\"4\", \"\")\n        val nn7 = nn6.replaceAll(\"5\", \"\")\n        val nn8 = nn7.replaceAll(\"6\", \"\")\n        val nn9 = nn8.replaceAll(\"7\", \"\")\n        val nn10 = nn9.replaceAll(\"8\", \"\")\n        val nn11 = nn10.replaceAll(\"9\", \"\")\n        val nn12 = nn11.replaceAll(\"0\", \"\")\n        val nn13 = nn12.replaceAll(\"1\", \"\")\n        val nn14 = nn13.replaceAll(\"2\", \"\")\n        val nn15 = nn14.replaceAll(\"3\", \"\")\n        val nn16 = nn15.replaceAll(\"4\", \"\")\n        val nn17 = nn16.replaceAll(\"5\", \"\")\n        val nn18 = nn17.replaceAll(\"6\", \"\")\n        val nn19 = nn18.replaceAll(\"7\", \"\")\n        val nn20 = nn19.replaceAll(\"8\", \"\")\n        val nn21 = nn20.replaceAll(\"9\", \"\")\n        val nn22 = nn21.replaceAll(\"0\", \"\")\n        val nn23 = nn22.replaceAll(\"1\", \"\")\n        val nn24 = nn23.replaceAll(\"2\", \"\")\n        val nn25 = nn24.replaceAll(\"3\", \"\")\n        val nn26 = nn25.replaceAll(\"4\", \"\")\n        val nn27 = nn26.replaceAll(\"5\", \"\")\n        val nn28 = nn27.replaceAll(\"6\", \"\")\n        val nn29 = nn28.replaceAll(\"7\", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2gfb8fs8.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 0) {\n                digits(i) = 0\n            }\n        }\n        digits(n.toString().length())\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1\n\tat Problem$.digits(tmpx6o0zchm.scala:23)\n\tat Problem$.main(tmpx6o0zchm.scala:26)\n\tat Problem.main(tmpx6o0zchm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n % 2 == 0) {\n            return 0l\n        } else {\n            return n % 10\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293237,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp28waqtl9.scala:22)\n\tat Problem.main(tmp28waqtl9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n % 2 == 0) return 0l\n        return n % 10\n    }\n\n    // Given a positive integer n, return the product of the even digits.\n    // Return 0 if all digits are odd.\n    // For example:\n    // >>> evenDigits((1l))\n    // (1l)\n    // >>> evenDigits((4l))\n    // (0l)\n    // >>> evenDigits((235l))\n    // (0l)\n    def evenDigits(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n % 2 == 1) return 0l\n        return n % 10\n    }\n\n    // Given a positive integer n, return the product of the digits\n    // in the number.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digitsInNumber((1l))\n    // (1l)\n    // >>> digitsInNumber((4l))\n    // (4l)\n    // >>> digitsInNumber((235l))\n    // (235l)\n    def digitsInNumber(n : Long) : Long = {\n        if (n == 0) return 0l\n        return n * digits(n)\n    }\n\n    // Given a positive integer n, return the product of the digits\n    // in the number.\n    // Return 0 if all digits are odd.\n    // For example:\n    // >>> evenDigitsInNumber((1l))\n    // (1l)\n    // >>> evenDigitsInNumber((4l))\n    // (0l)\n    // >>> evenDigitsInNumber((235l))\n    // (0l)\n    def evenDigitsInNumber(n : Long) : Long = {\n        if (n == 0) return 0l\n        return n * evenDigits(n)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293238,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0hyxfh19.scala:65)\n\tat Problem.main(tmp0hyxfh19.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val s = nn.substring(1, nn.length)\n        val s2 = s.replaceAll(\"l\", \"\")\n        val s3 = s2.replaceAll(\"o\", \"\")\n        val s4 = s3.replaceAll(\"d\", \"\")\n        val s5 = s4.replaceAll(\"e\", \"\")\n        val s6 = s5.replaceAll(\"f\", \"\")\n        val s7 = s6.replaceAll(\"g\", \"\")\n        val s8 = s7.replaceAll(\"h\", \"\")\n        val s9 = s8.replaceAll(\"i\", \"\")\n        val s10 = s9.replaceAll(\"j\", \"\")\n        val s11 = s10.replaceAll(\"k\", \"\")\n        val s12 = s11.replaceAll(\"l\", \"\")\n        val s13 = s12.replaceAll(\"m\", \"\")\n        val s14 = s13.replaceAll(\"n\", \"\")\n        val s15 = s14.replaceAll(\"o\", \"\")\n        val s16 = s15.replaceAll(\"p\", \"\")\n        val s17 = s16.replaceAll(\"q\", \"\")\n        val s18 = s17.replaceAll(\"r\", \"\")\n        val s19 = s18.replaceAll(\"s\", \"\")\n        val s20 = s19.replaceAll(\"t\", \"\")\n        val s21 = s20.replaceAll(\"u\", \"\")\n        val s22 = s21.replaceAll(\"v\", \"\")\n        val s23 = s22.replaceAll(\"w\", \"\")\n        val s24 = s23.replaceAll(\"x\", \"\")\n        val s25 = s24.replaceAll(\"y\", \"\")\n        val s26 = s25.replaceAll(\"z\", \"\")\n        val s27 = s26.replaceAll(\"0\", \"\")\n        val s28 = s27.replaceAll(\"1\", \"\")\n        val s29 = s28.replaceAll(\"2\", \"\")\n        val s30 = s29.replaceAll(\"3\", \"\")\n        val s31 = s30.replaceAll(\"4\", \"\")\n        val s32 =\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293238,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmplp48nxnx.scala:46:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ms32\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplp48nxnx.scala:47:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        digits(0)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsg4j3qqz.scala:25)\n\tat Problem.main(tmpsg4j3qqz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            return 0l\n        }\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        var result = 0l\n        while (n > 0) {\n            var digit = n % 10\n            if (digit % 2 == 1) {\n                result = result * digit\n            }\n            n = n / 10\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293235,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpihebhwid.scala:26:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            n = n / \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val n\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val nn_len = nn.length\n        val nn_digits = new Array[Long](nn_len)\n        for (i <- 0 until nn_len) {\n            nn_digits(i) = nn(i)\n        }\n        val nn_digits_odd = nn_digits.filter(x -> x % 2 != 0)\n        val nn_digits_odd_len = nn_digits_odd.length\n        val nn_digits_odd_prod = nn_digits_odd.foldLeft(1l, (x, y) -> x * y)\n        if (nn_digits_odd_len == 0) {\n            0l\n        } else {\n            nn_digits_odd_prod\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdzdkch_8.scala:20:45 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnn_digits_odd\u001b[0m = nn_digits.filter(x -> x % \u001b[31m2\u001b[0m != \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdzdkch_8.scala:22:61 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnn_digits_odd_prod\u001b[0m = nn_digits_odd.foldLeft(\u001b[31m1l\u001b[0m, (x, y) -> x * y)\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                            Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdzdkch_8.scala:22:64 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnn_digits_odd_prod\u001b[0m = nn_digits_odd.foldLeft(\u001b[31m1l\u001b[0m, (x, y) -> x * y)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                            Not found: y\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdzdkch_8.scala:22:70 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnn_digits_odd_prod\u001b[0m = nn_digits_odd.foldLeft(\u001b[31m1l\u001b[0m, (x, y) -> x * y)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                            Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdzdkch_8.scala:26:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            nn_digits_odd_prod\n\u001b[31m\u001b[31m   |\u001b[0m            ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 0) {\n                digits(i) = 0\n            }\n        }\n        digits(0)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293237,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptp1hg3dw.scala:30)\n\tat Problem.main(tmptp1hg3dw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        digits(0)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsg4j3qqz.scala:25)\n\tat Problem.main(tmpsg4j3qqz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 1) {\n                return digits(i)\n            }\n        }\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293240,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_eupweg_.scala:30)\n\tat Problem.main(tmp_eupweg_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n % 2 == 0) return 0l\n        return n % 2\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293238,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt46ul2_a.scala:19)\n\tat Problem.main(tmpt46ul2_a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        val oddDigits = digits.filter(d -> d % 2 != 0)\n        val result = oddDigits.reduce(1l, (a, b) -> a * b)\n        if (oddDigits.length() == 0) {\n            result = 0l\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293237,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp14y18ieb.scala:18:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moddDigits\u001b[0m = digits.filter(d -> d % \u001b[31m2\u001b[0m != \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp14y18ieb.scala:19:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = oddDigits.reduce(\u001b[31m1l\u001b[0m, (a, b) -> a * b)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: a\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp14y18ieb.scala:19:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = oddDigits.reduce(\u001b[31m1l\u001b[0m, (a, b) -> a * b)\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Not found: b\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp14y18ieb.scala:19:52 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = oddDigits.reduce(\u001b[31m1l\u001b[0m, (a, b) -> a * b)\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Not found: a\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp14y18ieb.scala:20:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mif\u001b[0m (oddDigits.length() == \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            \u001b[33mmethod\u001b[0m \u001b[35mlength\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArray\u001b[0m does not take parameters\n\u001b[31m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        var result = 0l\n        while (n > 0) {\n            result = result * 10 + n % 10\n            n /= 10\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293238,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbadftz4s.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n /= \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value /= is not a member of Long - did you mean n.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            return 0l\n        } else {\n            return (n % 2 == 0) ? 0l : (n % 3 == 0) ? 0l : (n % 5 == 0) ? 0l : (n % 7 == 0) ? 0l : (n % 11 == 0) ? 0l : (n % 13 == 0) ? 0l : (n % 17 == 0) ? 0l : (n % 19 == 0) ? 0l : (n % 23 == 0) ? 0l : (n % 29 == 0) ? 0l : (n % 31 == 0) ? 0l : (n % 37 == 0) ? 0l : (n % 41 == 0) ? 0l : (n % 43 == 0) ? 0l : (n % 47 == 0) ? 0l : (n % 53 == 0) ? 0l : (n % 59 == 0) ? 0l : (n % 61 == 0) ? 0l : (n % 67 == 0) ? 0l : (n % 71 == 0) ? 0l : (n % 73 == 0) ? 0l : (n % 79 == 0) ? 0l : (n % 83 == 0) ? 0l : (n % 89 == 0) ? 0l : (n % 97 == 0) ? 0l : (n % 101 == 0) ? 0l : (n % 103 == 0) ? 0l : (n % 107 == 0) ? 0l : (n % 109 == 0) ? 0l : (n % 113 == 0) ? 0l : (n % 127 == 0) ? 0l : (n % 131 == 0) ? 0l : (n % 137 == 0) ? 0l : (n % 139 == 0) ? 0l : (n % 149 == 0) ? 0l : (n % 151 == 0) ? 0l : (n % 157 == 0) ? 0l : (n % 163 == 0) ? 0l : (n % 167 == 0) ? 0l : (n % 173 == 0) ? 0l : (n % 179 == 0) ? 0l : (n % 181 == 0) ? 0l : (n % 191 == 0) ? 0l : (n % 193 == 0) ? 0l : (n % 197 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp53aoxuhl.scala:17:57 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mreturn\u001b[0m (n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (\u001b[35mn\u001b[0m \u001b[35m%\u001b[0m \u001b[31m3\u001b[0m \u001b[35m==\u001b[0m \u001b[31m0\u001b[0m) \u001b[35m?\u001b[0m \u001b[31m0l\u001b[0m : (n % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m149\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31m0l\u001b[0m : (n % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m) ? \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val s = \"\"\n        while (n > 0) {\n            s = s + (n % 2)\n            n /= 2\n        }\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpfpb2rol9.scala:16:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            s = s + (n % \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val s\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfpb2rol9.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n /= \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfpb2rol9.scala:19:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        s\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (s : String)\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        digits(n.toString().length())\n    }\n\n    // Given a positive integer n, return the product of the digits in the\n    // number.\n    // For example:\n    // >>> digits2((1l))\n    // (1l)\n    // >>> digits2((4l))\n    // (4l)\n    // >>> digits2((235l))\n    // (235l)\n    def digits2(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        digits(n.toString().length())\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293241,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1\n\tat Problem$.digits(tmpvfe0n3ii.scala:18)\n\tat Problem$.main(tmpvfe0n3ii.scala:38)\n\tat Problem.main(tmpvfe0n3ii.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val n2 = n.toString.replaceAll(\"[^0-9]\", \"\")\n        val n3 = n2.toInt\n        if (n3 % 2 == 0)\n            0l\n        else\n            n3\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293247,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4lx14696.scala:23)\n\tat Problem.main(tmp4lx14696.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val odd = nn.filter(_.isOdd).toList\n        val even = nn.filter(_.isEven).toList\n        val result = odd.map(_.toLong).reduce(_.times)\n        if (even.isEmpty) {\n            return result\n        } else {\n            return 0l\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293247,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3lipaux.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36modd\u001b[0m = nn.filter(_.isOdd).toList\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value isOdd is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr3lipaux.scala:16:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36meven\u001b[0m = nn.filter(_.isEven).toList\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             value isEven is not a member of Char\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpr3lipaux.scala:17:46 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = odd.map(_.toLong).reduce(_.times)\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 2\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val s = nn.substring(1, nn.length)\n        val s2 = s.replaceAll(\"0\", \"\")\n        val s3 = s2.replaceAll(\"1\", \"\")\n        val s4 = s3.replaceAll(\"2\", \"\")\n        val s5 = s4.replaceAll(\"3\", \"\")\n        val s6 = s5.replaceAll(\"4\", \"\")\n        val s7 = s6.replaceAll(\"5\", \"\")\n        val s8 = s7.replaceAll(\"6\", \"\")\n        val s9 = s8.replaceAll(\"7\", \"\")\n        val s10 = s9.replaceAll(\"8\", \"\")\n        val s11 = s10.replaceAll(\"9\", \"\")\n        val s12 = s11.replaceAll(\"0\", \"\")\n        val s13 = s12.replaceAll(\"1\", \"\")\n        val s14 = s13.replaceAll(\"2\", \"\")\n        val s15 = s14.replaceAll(\"3\", \"\")\n        val s16 = s15.replaceAll(\"4\", \"\")\n        val s17 = s16.replaceAll(\"5\", \"\")\n        val s18 = s17.replaceAll(\"6\", \"\")\n        val s19 = s18.replaceAll(\"7\", \"\")\n        val s20 = s19.replaceAll(\"8\", \"\")\n        val s21 = s20.replaceAll(\"9\", \"\")\n        val s22 = s21.replaceAll(\"0\", \"\")\n        val s23 = s22.replaceAll(\"1\", \"\")\n        val s24 = s23.replaceAll(\"2\", \"\")\n        val s25 = s24.replaceAll(\"3\", \"\")\n        val s26 = s25.replaceAll(\"4\", \"\")\n        val s27 = s26.replaceAll(\"5\", \"\")\n        val s28 = s27.replaceAll(\"6\", \"\")\n        val s29 = s28.replaceAll(\"7\", \"\")\n        val s30 = s29.replaceAll(\"8\", \"\")\n        val s31 = s30.replaceAll(\"9\", \"\")\n        val s32 =\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293245,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpevq5qdwl.scala:46:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ms32\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpevq5qdwl.scala:47:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val s = nn.substring(1, nn.length)\n        val ss = s.split(\"\")\n        val result = 0l\n        for (i <- 0 until (ss.length - 1)) {\n            val digit = ss[i].toLong\n            if (digit % 2 == 1) {\n                result = result * digit\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293243,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxg4a6dkw.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mdigit\u001b[0m = ss[\u001b[35mi\u001b[0m].toLong\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpxg4a6dkw.scala:21:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                result = result * digit\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val s = nn.substring(2, nn.length)\n        val s2 = s.replaceAll(\"l\", \"\")\n        val s3 = s2.replaceAll(\"o\", \"\")\n        val s4 = s3.replaceAll(\"d\", \"\")\n        val s5 = s4.replaceAll(\"e\", \"\")\n        val s6 = s5.replaceAll(\"f\", \"\")\n        val s7 = s6.replaceAll(\"g\", \"\")\n        val s8 = s7.replaceAll(\"h\", \"\")\n        val s9 = s8.replaceAll(\"i\", \"\")\n        val s10 = s9.replaceAll(\"j\", \"\")\n        val s11 = s10.replaceAll(\"k\", \"\")\n        val s12 = s11.replaceAll(\"l\", \"\")\n        val s13 = s12.replaceAll(\"m\", \"\")\n        val s14 = s13.replaceAll(\"n\", \"\")\n        val s15 = s14.replaceAll(\"o\", \"\")\n        val s16 = s15.replaceAll(\"p\", \"\")\n        val s17 = s16.replaceAll(\"q\", \"\")\n        val s18 = s17.replaceAll(\"r\", \"\")\n        val s19 = s18.replaceAll(\"s\", \"\")\n        val s20 = s19.replaceAll(\"t\", \"\")\n        val s21 = s20.replaceAll(\"u\", \"\")\n        val s22 = s21.replaceAll(\"v\", \"\")\n        val s23 = s22.replaceAll(\"w\", \"\")\n        val s24 = s23.replaceAll(\"x\", \"\")\n        val s25 = s24.replaceAll(\"y\", \"\")\n        val s26 = s25.replaceAll(\"z\", \"\")\n        val s27 = s26.replaceAll(\"0\", \"\")\n        val s28 = s27.replaceAll(\"1\", \"\")\n        val s29 = s28.replaceAll(\"2\", \"\")\n        val s30 = s29.replaceAll(\"3\", \"\")\n        val s31 = s30.replaceAll(\"4\", \"\")\n        val s32 =\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293247,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpfei24lri.scala:46:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ms32\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfei24lri.scala:47:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 0) {\n                digits(i) = 0\n            }\n        }\n        val result = 0l\n        for (i <- 0 until n.toString().length()) {\n            result = result * digits(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293244,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpu_813pyr.scala:25:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            result = result * digits(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val n2 = n.toString.replaceAll(\"0\", \"\").toLong\n        val n3 = n2.toString.replaceAll(\"1\", \"\").toLong\n        val n4 = n3.toString.replaceAll(\"2\", \"\").toLong\n        val n5 = n4.toString.replaceAll(\"3\", \"\").toLong\n        val n6 = n5.toString.replaceAll(\"4\", \"\").toLong\n        val n7 = n6.toString.replaceAll(\"5\", \"\").toLong\n        val n8 = n7.toString.replaceAll(\"6\", \"\").toLong\n        val n9 = n8.toString.replaceAll(\"7\", \"\").toLong\n        val n10 = n9.toString.replaceAll(\"8\", \"\").toLong\n        val n11 = n10.toString.replaceAll(\"9\", \"\").toLong\n        val n12 = n11.toString.replaceAll(\"0\", \"\").toLong\n        val n13 = n12.toString.replaceAll(\"1\", \"\").toLong\n        val n14 = n13.toString.replaceAll(\"2\", \"\").toLong\n        val n15 = n14.toString.replaceAll(\"3\", \"\").toLong\n        val n16 = n15.toString.replaceAll(\"4\", \"\").toLong\n        val n17 = n16.toString.replaceAll(\"5\", \"\").toLong\n        val n18 = n17.toString.replaceAll(\"6\", \"\").toLong\n        val n19 = n18.toString.replaceAll(\"7\", \"\").toLong\n        val n20 = n19.toString.replaceAll(\"8\", \"\").toLong\n        val n21 = n20.toString.replaceAll(\"9\", \"\").toLong\n        val n22 = n21.toString.replaceAll(\"0\", \"\").toLong\n        val n23 = n22.toString.replaceAll(\"1\", \"\").toLong\n        val n24 = n23.toString.replaceAll(\"2\", \"\").toLong\n        val n25 = n24.toString.replaceAll(\"3\", \"\").toLong\n        val n26 = n25.to\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293246,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E051] Reference Error: /tmp/tmptcay3v14.scala:38:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn26\u001b[0m = n25.to\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mAmbiguous overload. The overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mto\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mIntegralProxy\u001b[0m with types\n\u001b[31m   |\u001b[0m (end: Long, step: Long): scala.collection.immutable.NumericRange.Inclusive[Long]\n\u001b[31m   |\u001b[0m (end: Long): scala.collection.immutable.NumericRange.Inclusive[Long]\n\u001b[31m   |\u001b[0mboth match expected type <?>\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptcay3v14.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n\n        val nb = nn.toBigInteger()\n        val nb2 = nb.shiftRight(1)\n        val nb3 = nb2.and(BigInteger.valueOf(3))\n        val nb4 = nb3.and(BigInteger.valueOf(3))\n        val nb5 = nb4.and(BigInteger.valueOf(3))\n        val nb6 = nb5.and(BigInteger.valueOf(3))\n        val nb7 = nb6.and(BigInteger.valueOf(3))\n        val nb8 = nb7.and(BigInteger.valueOf(3))\n        val nb9 = nb8.and(BigInteger.valueOf(3))\n        val nb10 = nb9.and(BigInteger.valueOf(3))\n        val nb11 = nb10.and(BigInteger.valueOf(3))\n        val nb12 = nb11.and(BigInteger.valueOf(3))\n        val nb13 = nb12.and(BigInteger.valueOf(3))\n        val nb14 = nb13.and(BigInteger.valueOf(3))\n        val nb15 = nb14.and(BigInteger.valueOf(3))\n        val nb16 = nb15.and(BigInteger.valueOf(3))\n        val nb17 = nb16.and(BigInteger.valueOf(3))\n        val nb18 = nb17.and(BigInteger.valueOf(3))\n        val nb19 = nb18.and(BigInteger.valueOf(3))\n        val nb20 = nb19.and(BigInteger.valueOf(3))\n        val nb21 = nb20.and(BigInteger.valueOf(3))\n        val nb22 = nb21.and(BigInteger.valueOf(3))\n        val nb23 = nb22.and(BigInteger.valueOf(3))\n        val nb24 = nb23.and(BigInteger.valueOf(3))\n        val nb25 = nb24.and(BigInteger.\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293248,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplezh9edu.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplezh9edu.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnb\u001b[0m = nn.toBigInteger()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value toBigInteger is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplezh9edu.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 0) {\n                digits(i) = 0\n            }\n        }\n        digits(n.toString().length())\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1\n\tat Problem$.digits(tmpx6o0zchm.scala:23)\n\tat Problem$.main(tmpx6o0zchm.scala:26)\n\tat Problem.main(tmpx6o0zchm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val nn2 = nn.substring(1, nn.length)\n        val nn3 = nn2.replaceAll(\"0\", \"\")\n        val nn4 = nn3.replaceAll(\"1\", \"\")\n        val nn5 = nn4.replaceAll(\"2\", \"\")\n        val nn6 = nn5.replaceAll(\"3\", \"\")\n        val nn7 = nn6.replaceAll(\"4\", \"\")\n        val nn8 = nn7.replaceAll(\"5\", \"\")\n        val nn9 = nn8.replaceAll(\"6\", \"\")\n        val nn10 = nn9.replaceAll(\"7\", \"\")\n        val nn11 = nn10.replaceAll(\"8\", \"\")\n        val nn12 = nn11.replaceAll(\"9\", \"\")\n        val nn13 = nn12.replaceAll(\"0\", \"\")\n        val nn14 = nn13.replaceAll(\"1\", \"\")\n        val nn15 = nn14.replaceAll(\"2\", \"\")\n        val nn16 = nn15.replaceAll(\"3\", \"\")\n        val nn17 = nn16.replaceAll(\"4\", \"\")\n        val nn18 = nn17.replaceAll(\"5\", \"\")\n        val nn19 = nn18.replaceAll(\"6\", \"\")\n        val nn20 = nn19.replaceAll(\"7\", \"\")\n        val nn21 = nn20.replaceAll(\"8\", \"\")\n        val nn22 = nn21.replaceAll(\"9\", \"\")\n        val nn23 = nn22.replaceAll(\"0\", \"\")\n        val nn24 = nn23.replaceAll(\"1\", \"\")\n        val nn25 = nn24.replaceAll(\"2\", \"\")\n        val nn26 = nn25.replaceAll(\"3\", \"\")\n        val nn27 = nn26.replaceAll(\"4\", \"\")\n        val nn28 = nn27.replaceAll(\"5\", \"\")\n        val nn29 = nn28.replaceAll(\"6\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293248,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpdba1z808.scala:42:35 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnn29\u001b[0m = nn28.replaceAll(\"6\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdba1z808.scala:44:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdba1z808.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdba1z808.scala:44:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: 6def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        val result = 0l\n        for (i <- 0 until digits.length) {\n            result = result * digits(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp93okvt8y.scala:20:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            result = result * digits(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n % 2 == 0) return 0l\n        return n * (n - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293248,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3sllfcq6.scala:19)\n\tat Problem.main(tmp3sllfcq6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 1) {\n                return digits(i)\n            }\n        }\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293240,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_eupweg_.scala:30)\n\tat Problem.main(tmp_eupweg_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val s = nn.substring(2, nn.length)\n        val r = s.split(\"\")\n        val r2 = r.map(_.toInt)\n        val r3 = r2.filter(i -> i % 2 != 0)\n        val r4 = r3.map(i -> i * 2)\n        val r5 = r4.reduce(_.times)\n        val r6 = r5.toInt\n        val r7 = r6.toInt\n        val r8 = r7.toInt\n        val r9 = r8.toInt\n        val r10 = r9.toInt\n        val r11 = r10.toInt\n        val r12 = r11.toInt\n        val r13 = r12.toInt\n        val r14 = r13.toInt\n        val r15 = r14.toInt\n        val r16 = r15.toInt\n        val r17 = r16.toInt\n        val r18 = r17.toInt\n        val r19 = r18.toInt\n        val r20 = r19.toInt\n        val r21 = r20.toInt\n        val r22 = r21.toInt\n        val r23 = r22.toInt\n        val r24 = r23.toInt\n        val r25 = r24.toInt\n        val r26 = r25.toInt\n        val r27 = r26.toInt\n        val r28 = r27.toInt\n        val r29 = r28.toInt\n        val r30 = r29.toInt\n        val r31 = r30.toInt\n        val r32 = r31.toInt\n        val r33 = r32.toInt\n        val r34 = r33.toInt\n        val r35 = r34.toInt\n        val r36 = r35.toInt\n        val r37 = r36.toInt\n        val r38 = r37.toInt\n        val r39 = r38.toInt\n        val r40 = r39.toInt\n        val r41 = r40.toInt\n        val r42 = r41.toInt\n        val\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293250,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpwqhygmzw.scala:58:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m        \u001b[33mval\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwqhygmzw.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mr3\u001b[0m = r2.filter(i -> i % \u001b[31m2\u001b[0m != \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwqhygmzw.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mr4\u001b[0m = r3.map(i -> i * \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpwqhygmzw.scala:19:35 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mr4\u001b[0m = r3.map(i -> i * \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                   where:    B is a type variable\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwqhygmzw.scala:59:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 0) {\n                digits(i) = 0\n            }\n        }\n        digits\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6jsumb7f.scala:23:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        digits\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (digits : Array[Long])\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val n2 = n.toString.replaceAll(\"[^0-9]\", \"\")\n        val n3 = n2.toInt\n        val n4 = n3.toInt\n        val n5 = n4.toInt\n        val n6 = n5.toInt\n        val n7 = n6.toInt\n        val n8 = n7.toInt\n        val n9 = n8.toInt\n        val n10 = n9.toInt\n        val n11 = n10.toInt\n        val n12 = n11.toInt\n        val n13 = n12.toInt\n        val n14 = n13.toInt\n        val n15 = n14.toInt\n        val n16 = n15.toInt\n        val n17 = n16.toInt\n        val n18 = n17.toInt\n        val n19 = n18.toInt\n        val n20 = n19.toInt\n        val n21 = n20.toInt\n        val n22 = n21.toInt\n        val n23 = n22.toInt\n        val n24 = n23.toInt\n        val n25 = n24.toInt\n        val n26 = n25.toInt\n        val n27 = n26.toInt\n        val n28 = n27.toInt\n        val n29 = n28.toInt\n        val n30 = n29.toInt\n        val n31 = n30.toInt\n        val n32 = n31.toInt\n        val n33 = n32.toInt\n        val n34 = n33.toInt\n        val n35 = n34.toInt\n        val n36 = n35.toInt\n        val n37 = n36.toInt\n        val n38 = n37.toInt\n        val n39 = n38.toInt\n        val n40 = n39.toInt\n        val n41 = n40.toInt\n        val n42 = n41.toInt\n        val n43 = n42.toInt\n        val n44 = n43.toInt\n        val n45 = n44.toInt\n        val n46 = n45.toInt\n        val n47 =\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293248,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmphunwyf17.scala:59:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn47\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphunwyf17.scala:60:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val s = nn.substring(1, nn.length)\n        val m = s.match(\"(\\\\d+)(\\\\d)\")\n        val d = m.group(1)\n        val o = m.group(2)\n        if (o.equals(\"0\")) {\n            return 0l\n        } else {\n            return d.toLong * o.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293249,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp489_j07k.scala:16:23 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mm\u001b[0m = s.\u001b[33mmatch\u001b[0m(\u001b[31m\"(\\\\d+)(\\\\d)\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       '{' expected, but '(' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp489_j07k.scala:36:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp489_j07k.scala:17:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36md\u001b[0m = m.group(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mm\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp489_j07k.scala:18:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mo\u001b[0m = m.group(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mm\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp489_j07k.scala:35:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        val result = 0l\n        for (i <- 0 until digits.length) {\n            if (digits(i) % 2 == 1) {\n                result = result * digits(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgw2iyc5z.scala:21:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                result = result * digits(i)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 0) {\n                digits(i) = 0\n            }\n        }\n        digits(n.toString().length() - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk9yt3shw.scala:27)\n\tat Problem.main(tmpk9yt3shw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        val result = 0l\n        for (i <- 0 until digits.length) {\n            result = result * digits(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp93okvt8y.scala:20:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            result = result * digits(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            n % 2 == 0 ? 0 : (n % 3 == 0 ? 0 : (n % 5 == 0 ? 0 : (n % 7 == 0 ? 0 : (n % 11 == 0 ? 0 : (n % 13 == 0 ? 0 : (n % 17 == 0 ? 0 : (n % 19 == 0 ? 0 : (n % 23 == 0 ? 0 : (n % 29 == 0 ? 0 : (n % 31 == 0 ? 0 : (n % 37 == 0 ? 0 : (n % 41 == 0 ? 0 : (n % 43 == 0 ? 0 : (n % 47 == 0 ? 0 : (n % 53 == 0 ? 0 : (n % 59 == 0 ? 0 : (n % 61 == 0 ? 0 : (n % 67 == 0 ? 0 : (n % 71 == 0 ? 0 : (n % 73 == 0 ? 0 : (n % 79 == 0 ? 0 : (n % 83 == 0 ? 0 : (n % 89 == 0 ? 0 : (n % 97 == 0 ? 0 : (n % 101 == 0 ? 0 : (n % 103 == 0 ? 0 : (n % 107 == 0 ? 0 : (n % 109 == 0 ? 0 : (n % 113 == 0 ? 0 : (n % 127 == 0 ? 0 : (n % 131 == 0 ? 0 : (n % 137 == 0 ? 0 : (n % 139 == 0 ? 0 : (n % 149 == 0 ? 0 : (n % 151 == 0 ? 0 : (n % 157 == 0 ? 0 : (n % 163 == 0 ? 0 : (n % 167 == 0 ? 0 : (n % 173 == 0 ? 0 : (n % 179 == 0 ? 0 : (n % 181 == 0 ? 0 : (n % 191 == 0 ? 0 : (n % 193 == 0 ? 0 : (n % 197 == 0 ? 0 : (n % 199 == 0 ? 0 : (n % 211 == 0 ? 0 : (n % 223 == 0 ? 0 : (n % 227 == 0 ? 0 : (n % 229 == 0 ? 0 : (n % 233 == 0 ? 0 : (n % 239 == 0 ? 0 : (n % 241 == 0 ? 0 : (n % 251 == 0 ? 0 : (n % 257 == 0 ? 0 :\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293248,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8mpviaup.scala:17:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (\u001b[35mn\u001b[0m \u001b[35m%\u001b[0m \u001b[31m3\u001b[0m \u001b[35m==\u001b[0m \u001b[31m0\u001b[0m \u001b[35m?\u001b[0m \u001b[31m0\u001b[0m : (n % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m149\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            n % 2 == 0 ? 0 : n\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp01x0524d.scala:17:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type n\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp01x0524d.scala:17:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value ? is not a member of Int\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val s = nn.substring(1, nn.length)\n        val r = s.split(\"\")\n        val rr = scala.collection.mutable.ListBuffer[Long]()\n        for (i <- 0 until r.length) {\n            val rr$i = r(i).toLong\n            rr.append(rr$i)\n        }\n        val rr$ = rr.toList\n        val rr$i = rr$.map(x => x.toLong)\n        val rr$i$ = rr$i.filter(x => x % 2 == 1)\n        val rr$i$i = rr$i$\n        val rr$i$i$ = rr$i$i.map(x => x * 2)\n        val rr$i$i$i = rr$i$i$i.reduceLeft(0l, (x, y) => x * y)\n        val rr$i$i$i$ = rr$i$i$i.toLong\n        if (rr$i$i$i == 0) {\n            return 0l\n        } else {\n            return rr$i$i$i\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293247,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpbzsx6m86.scala:27:23 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mrr$i$i$i\u001b[0m = rr$i$i$i.reduceLeft(\u001b[31m0l\u001b[0m, (\u001b[36mx\u001b[0m, \u001b[36my\u001b[0m) => x * y)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Recursive \u001b[33mvalue\u001b[0m \u001b[35mrr$i$i$i\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        digits(n.toString().length() - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj1_gna9n.scala:22)\n\tat Problem.main(tmpj1_gna9n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val s = nn.substring(1, nn.length)\n        val s2 = s.substring(0, s.length() / 2)\n        val s3 = s2.substring(0, s2.length() / 2)\n        val s4 = s3.substring(0, s3.length() / 2)\n        val s5 = s4.substring(0, s4.length() / 2)\n        val s6 = s5.substring(0, s5.length() / 2)\n        val s7 = s6.substring(0, s6.length() / 2)\n        val s8 = s7.substring(0, s7.length() / 2)\n        val s9 = s8.substring(0, s8.length() / 2)\n        val s10 = s9.substring(0, s9.length() / 2)\n        val s11 = s10.substring(0, s10.length() / 2)\n        val s12 = s11.substring(0, s11.length() / 2)\n        val s13 = s12.substring(0, s12.length() / 2)\n        val s14 = s13.substring(0, s13.length() / 2)\n        val s15 = s14.substring(0, s14.length() / 2)\n        val s16 = s15.substring(0, s15.length() / 2)\n        val s17 = s16.substring(0, s16.length() / 2)\n        val s18 = s17.substring(0, s17.length() / 2)\n        val s19 = s18.substring(0, s18.length() / 2)\n        val s20 = s19.substring(0, s19.length() / 2)\n        val s21 = s20.substring(0, s20.length() / 2)\n        val s22 = s21.substring(0, s21.length() / 2)\n        val s23 = s22.substring(0, s22.length() / 2)\n        val\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293249,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpnte08a5y.scala:38:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnte08a5y.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n < 0) return 0l\n        if (n % 2 == 0) return 0l\n        return n % 2\n    }\n\n    // Given a positive integer n, return the product of the digits in the\n    // number.\n    // Return 0 if the number is 0.\n    // For example:\n    // >>> digits_product((1l))\n    // (1l)\n    // >>> digits_product((4l))\n    // (4l)\n    // >>> digits_product((235l))\n    // (235l)\n    def digits_product(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n < 0) return 0l\n        return n * digits(n)\n    }\n\n    // Given a positive integer n, return the product of the digits in the\n    // number.\n    // Return 0 if the number is 0.\n    // For example:\n    // >>> digits_product_rec((1l))\n    // (1l)\n    // >>> digits_product_rec((4l))\n    // (4l)\n    // >>> digits_product_rec((235l))\n    // (235l)\n    def digits_product_rec(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n < 0) return 0l\n        if (n % 2 == 0) return 0l\n        return n * digits_product_rec(n / 2)\n    }\n\n    // Given a positive integer n, return the product of the digits in the\n    // number.\n    // Return 0 if the number is 0.\n    // For example:\n    // >>> digits_product_iter((1l))\n    // (1l)\n    // >>> digits_product_iter((4l))\n    // (4l)\n    // >>> digits_product_iter((235l))\n    // (235l)\n    def digits_product_iter(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n < 0) return 0l\n        if (n % 2 == 0) return 0l\n        return n * digits_\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293246,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8w1sruk_.scala:67:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m        \u001b[33mreturn\u001b[0m n * digits_\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: digits_\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n % 2 == 0) return 0l\n        return n % 2l\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293236,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpp8bwb28m.scala:19)\n\tat Problem.main(tmpp8bwb28m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val s = \"\"\n        while (n > 0) {\n            s = s + (n % 2)\n            n /= 2\n        }\n        if (s.length == 0) return 0l\n        return s.charAt(0)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293250,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpugfzea63.scala:16:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            s = s + (n % \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val s\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpugfzea63.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n /= \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value /= is not a member of Long - did you mean n.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n < 0) return 0l\n        if (n == 1) return 1l\n        if (n == 2) return 2l\n        if (n == 3) return 3l\n        if (n == 4) return 4l\n        if (n == 5) return 5l\n        if (n == 6) return 6l\n        if (n == 7) return 7l\n        if (n == 8) return 8l\n        if (n == 9) return 9l\n        if (n % 2 == 0) return 0l\n        return n % 2\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293250,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7y7vj013.scala:30)\n\tat Problem.main(tmp7y7vj013.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            n % 2 == 0 ? 0 : n\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp01x0524d.scala:17:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type n\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp01x0524d.scala:17:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value ? is not a member of Int\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = mutable.List[Long]()\n        while (n > 0) {\n            digits.append(n % 10)\n            n /= 10\n        }\n        return digits.foldLeft(0l)((acc, x) => acc * x)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeb_23oft.scala:14:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeb_23oft.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n /= \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value /= is not a member of Long - did you mean n.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) return 0l\n        else {\n            var result = 1l\n            var i = 2l\n            while (i <= n) {\n                if (n % i == 0) {\n                    result *= i\n                    n /= i\n                } else {\n                    i += 2l\n                }\n            }\n            return result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293252,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptv2sgbph.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                    n /= i\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value /= is not a member of Long - did you mean n.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val nn_len = nn.length\n        val nn_digits = nn.substring(nn_len - 1, nn_len)\n        val nn_digits_int = Integer.parseInt(nn_digits)\n        nn_digits_int % 2 == 0 ? 0 : nn_digits_int\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293252,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz22qjtks.scala:18:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        nn_digits_int % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mnn_digits_int\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type nn_digits_int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpz22qjtks.scala:18:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        nn_digits_int % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mnn_digits_int\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             value ? is not a member of Int\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n < 0) return 0l\n        if (n == 1) return 1l\n        if (n % 2 == 0) return 0l\n        return n % 2l\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293236,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw9cvgyrj.scala:21)\n\tat Problem.main(tmpw9cvgyrj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            n % 2 == 0 ? 0 : (n % 3 == 0 ? 0 : (n % 5 == 0 ? 0 : (n % 7 == 0 ? 0 : (n % 11 == 0 ? 0 : (n % 13 == 0 ? 0 : (n % 17 == 0 ? 0 : (n % 19 == 0 ? 0 : (n % 23 == 0 ? 0 : (n % 29 == 0 ? 0 : (n % 31 == 0 ? 0 : (n % 37 == 0 ? 0 : (n % 41 == 0 ? 0 : (n % 43 == 0 ? 0 : (n % 47 == 0 ? 0 : (n % 53 == 0 ? 0 : (n % 59 == 0 ? 0 : (n % 61 == 0 ? 0 : (n % 67 == 0 ? 0 : (n % 71 == 0 ? 0 : (n % 73 == 0 ? 0 : (n % 79 == 0 ? 0 : (n % 83 == 0 ? 0 : (n % 89 == 0 ? 0 : (n % 97 == 0 ? 0 : (n % 101 == 0 ? 0 : (n % 103 == 0 ? 0 : (n % 107 == 0 ? 0 : (n % 109 == 0 ? 0 : (n % 113 == 0 ? 0 : (n % 127 == 0 ? 0 : (n % 131 == 0 ? 0 : (n % 137 == 0 ? 0 : (n % 139 == 0 ? 0 : (n % 149 == 0 ? 0 : (n % 151 == 0 ? 0 : (n % 157 == 0 ? 0 : (n % 163 == 0 ? 0 : (n % 167 == 0 ? 0 : (n % 173 == 0 ? 0 : (n % 179 == 0 ? 0 : (n % 181 == 0 ? 0 : (n % 191 == 0 ? 0 : (n % 193 == 0 ? 0 : (n % 197 == 0 ? 0 : (n % 199 == 0 ? 0 : (n % 211 == 0 ? 0 : (n % 223 == 0 ? 0 : (n % 227 == 0 ? 0 : (n % 229 == 0 ? 0 : (n % 233 == 0 ? 0 : (n % 239 == 0 ? 0 : (n % 241 == 0 ? 0 : (n % 251 == 0 ? 0 : (n % 257 == 0 ? 0 :\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293248,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8mpviaup.scala:17:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (\u001b[35mn\u001b[0m \u001b[35m%\u001b[0m \u001b[31m3\u001b[0m \u001b[35m==\u001b[0m \u001b[31m0\u001b[0m \u001b[35m?\u001b[0m \u001b[31m0\u001b[0m : (n % \u001b[31m5\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m7\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m11\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m13\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m17\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m19\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m23\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m29\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m31\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m37\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m41\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m43\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m47\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m53\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m59\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m61\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m67\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m71\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m73\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m79\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m83\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m89\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m97\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m101\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m103\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m107\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m109\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m113\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m127\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m131\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m137\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m139\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m149\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m151\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m157\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m163\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m167\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m173\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (n % \u001b[31m179\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val s = nn.substring(1, nn.length)\n        val r = s.split(\"\")\n        val r2 = r.map(Long.parseLong)\n        val r3 = r2.filter(x => x % 2 == 1)\n        val r4 = r3.map(x => x * x)\n        val r5 = r4.reduce(0, (x, y) => x + y)\n        return r5\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7fqkeh0o.scala:17:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mr2\u001b[0m = r.map(Long.parseLong)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value parseLong is not a member of object Long\n\u001b[31m\u001b[31m-- Error: /tmp/tmp7fqkeh0o.scala:17:38 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mr2\u001b[0m = r.map(Long.parseLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                      where:    B is a type variable\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        val result = 0l\n        for (i <- 0 until digits.length) {\n            result = result * digits(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp93okvt8y.scala:20:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            result = result * digits(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        var x = n\n        while(x > 0) {\n            var y = x % 10\n            if(y % 2 == 1) {\n                return x * y\n            }\n            x = x / 10\n        }\n        return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293254,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsep609mw.scala:25)\n\tat Problem.main(tmpsep609mw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        digits(n.toString().length() - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj1_gna9n.scala:22)\n\tat Problem.main(tmpj1_gna9n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n\n        if (nn % 2 == 0) {\n            return 0l\n        }\n        val nn2 = nn / 2\n        val nn3 = nn2 / 3\n        val nn4 = nn2 / 4\n        val nn5 = nn2 / 5\n        val nn6 = nn2 / 6\n        val nn7 = nn2 / 7\n        val nn8 = nn2 / 8\n        val nn9 = nn2 / 9\n        val nn10 = nn3 / 10\n        val nn11 = nn3 / 11\n        val nn12 = nn3 / 12\n        val nn13 = nn3 / 13\n        val nn14 = nn3 / 14\n        val nn15 = nn3 / 15\n        val nn16 = nn4 / 16\n        val nn17 = nn4 / 17\n        val nn18 = nn4 / 18\n        val nn19 = nn4 / 19\n        val nn20 = nn5 / 20\n        val nn21 = nn5 / 21\n        val nn22 = nn5 / 22\n        val nn23 = nn5 / 23\n        val nn24 = nn5 / 24\n        val nn25 = nn6 / 25\n        val nn26 = nn6 / 26\n        val nn27 = nn6 / 27\n        val nn28 = nn6 / 28\n        val nn29 = nn6 / 29\n        val nn30 = nn7 / 30\n        val nn31 = nn7 / 31\n        val nn32 = nn7 / 32\n        val nn33 = nn7 / 33\n        val nn34 = nn7 / 34\n        val nn35 = nn7 / 35\n        val nn36 = nn8 / 36\n        val nn37 = nn8 / 37\n        val nn38 = nn8 / 38\n        val nn39 = nn8 / 39\n        val nn40 = nn9 / 40\n        val nn41 = nn9 / 41\n        val nn42 = n\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp70ebzo7f.scala:59:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n % 2 == 0) {\n            return 0l\n        } else {\n            return n % 10l\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293256,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3lnfdhao.scala:22)\n\tat Problem.main(tmp3lnfdhao.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val s = nn.substring(1, nn.length)\n        val r = s.split(\"\")\n        val rr = r.map(_.toInt)\n        val rr2 = rr.filter(_.mod(2) == 1)\n        val rr3 = rr2.map(_ * 2)\n        val rr4 = rr3.filter(_ < n)\n        val rr5 = rr4.map(_ + 1)\n        val rr6 = rr5.filter(_ < n)\n        val rr7 = rr6.map(_ + 1)\n        val rr8 = rr7.filter(_ < n)\n        val rr9 = rr8.map(_ + 1)\n        val rr10 = rr9.filter(_ < n)\n        val rr11 = rr10.map(_ + 1)\n        val rr12 = rr11.filter(_ < n)\n        val rr13 = rr12.map(_ + 1)\n        val rr14 = rr13.filter(_ < n)\n        val rr15 = rr14.map(_ + 1)\n        val rr16 = rr15.filter(_ < n)\n        val rr17 = rr16.map(_ + 1)\n        val rr18 = rr17.filter(_ < n)\n        val rr19 = rr18.map(_ + 1)\n        val rr20 = rr19.filter(_ < n)\n        val rr21 = rr20.map(_ + 1)\n        val rr22 = rr21.filter(_ < n)\n        val rr23 = rr22.map(_ + 1)\n        val rr24 = rr23.filter(_ < n)\n        val rr25 = rr24.map(_ + 1)\n        val rr26 = rr25.filter(_ < n)\n        val rr27 = rr26.map(_ + 1)\n        val rr28 = rr27.filter(_ < n)\n        val rr29 = rr28.map(_ + 1)\n        val rr30 = rr\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293259,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpphcui425.scala:18:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mrr2\u001b[0m = rr.filter(_.mod(\u001b[31m2\u001b[0m) == \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue mod is not a member of Int, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.BigInt.int2bigInt\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpphcui425.scala:47:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            n % 2 == 0 ? 0 : n\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp01x0524d.scala:17:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type n\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp01x0524d.scala:17:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value ? is not a member of Int\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 0) {\n                digits(i) = 0\n            }\n        }\n        digits(n.toString().length())\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1\n\tat Problem$.digits(tmpx6o0zchm.scala:23)\n\tat Problem$.main(tmpx6o0zchm.scala:26)\n\tat Problem.main(tmpx6o0zchm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        digits(n.toString().length())\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293259,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1\n\tat Problem$.digits(tmps27ujhlg.scala:18)\n\tat Problem$.main(tmps27ujhlg.scala:21)\n\tat Problem.main(tmps27ujhlg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val n_ = n\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        \n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293257,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxyxqopop.scala:15:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_\u001b[0m = n_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mn_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mn_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxyxqopop.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_\u001b[0m = n_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mn_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mn_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxyxqopop.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_\u001b[0m = n_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mn_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mn_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxyxqopop.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_\u001b[0m = n_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mn_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mn_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxyxqopop.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_\u001b[0m = n_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mn_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mn_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxyxqopop.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_\u001b[0m = n_\n\u001b[31m\u001b[31m   |\u001b[0m     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n == 1) return 1l\n        if (n % 2 == 0) return 0l\n        return (n % 2) * digits(n / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293257,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz81fsv9o.scala:20)\n\tat Problem.main(tmpz81fsv9o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val n2 = n.toString.replaceAll(\"[^0-9]\", \"\")\n        val n3 = n2.toInt\n        if (n3 % 2 == 0) {\n            return 0l\n        } else {\n            return n3.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293258,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0iif7mdw.scala:24)\n\tat Problem.main(tmp0iif7mdw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            var x = n\n            var y = 1l\n            while (x > 0) {\n                y = y * x % 10\n                x = x / 10\n            }\n            y\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293258,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgp9cl2a_.scala:28)\n\tat Problem.main(tmpgp9cl2a_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            var i = 0\n            while (i < n) {\n                if (n % 2 == 1) {\n                    n = n / 2\n                } else {\n                    n = n / 2\n                    i = i + 1\n                }\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmprguiufda.scala:20:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                    n = n / \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val n\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmprguiufda.scala:22:22 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                    n = n / \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val n\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 0) {\n                digits(i) = 0\n            }\n        }\n        val result = 0l\n        for (i <- 0 until n.toString().length()) {\n            result = result * digits(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293244,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpu_813pyr.scala:25:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            result = result * digits(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val n2 = n.toString\n        val s = n2.substring(1, n2.length)\n        val s2 = s.replaceAll(\"l\", \"\")\n        val s3 = s2.replaceAll(\"o\", \"\")\n        val s4 = s3.replaceAll(\"d\", \"\")\n        val s5 = s4.replaceAll(\"e\", \"\")\n        val s6 = s5.replaceAll(\"s\", \"\")\n        val s7 = s6.replaceAll(\"f\", \"\")\n        val s8 = s7.replaceAll(\"g\", \"\")\n        val s9 = s8.replaceAll(\"h\", \"\")\n        val s10 = s9.replaceAll(\"i\", \"\")\n        val s11 = s10.replaceAll(\"j\", \"\")\n        val s12 = s11.replaceAll(\"k\", \"\")\n        val s13 = s12.replaceAll(\"l\", \"\")\n        val s14 = s13.replaceAll(\"m\", \"\")\n        val s15 = s14.replaceAll(\"n\", \"\")\n        val s16 = s15.replaceAll(\"o\", \"\")\n        val s17 = s16.replaceAll(\"p\", \"\")\n        val s18 = s17.replaceAll(\"q\", \"\")\n        val s19 = s18.replaceAll(\"r\", \"\")\n        val s20 = s19.replaceAll(\"s\", \"\")\n        val s21 = s20.replaceAll(\"t\", \"\")\n        val s22 = s21.replaceAll(\"u\", \"\")\n        val s23 = s22.replaceAll(\"v\", \"\")\n        val s24 = s23.replaceAll(\"w\", \"\")\n        val s25 = s24.replaceAll(\"x\", \"\")\n        val s26 = s25.replaceAll(\"y\", \"\")\n        val s27 = s26.replaceAll(\"z\", \"\")\n        val s28 = s27.replaceAll(\"0\", \"\")\n        val s29 = s28.replaceAll(\"1\", \"\")\n        val s30 = s29.replaceAll(\"2\", \"\")\n        val s31 = s30.replaceAll(\"3\", \"\")\n        val s32 =\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293259,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp332jxgo8.scala:46:17 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ms32\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp332jxgo8.scala:47:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val nn2 = nn.replaceAll(\"0\", \"\")\n        val nn3 = nn2.replaceAll(\"1\", \"\")\n        val nn4 = nn3.replaceAll(\"2\", \"\")\n        val nn5 = nn4.replaceAll(\"3\", \"\")\n        val nn6 = nn5.replaceAll(\"4\", \"\")\n        val nn7 = nn6.replaceAll(\"5\", \"\")\n        val nn8 = nn7.replaceAll(\"6\", \"\")\n        val nn9 = nn8.replaceAll(\"7\", \"\")\n        val nn10 = nn9.replaceAll(\"8\", \"\")\n        val nn11 = nn10.replaceAll(\"9\", \"\")\n        val nn12 = nn11.replaceAll(\"0\", \"\")\n        val nn13 = nn12.replaceAll(\"1\", \"\")\n        val nn14 = nn13.replaceAll(\"2\", \"\")\n        val nn15 = nn14.replaceAll(\"3\", \"\")\n        val nn16 = nn15.replaceAll(\"4\", \"\")\n        val nn17 = nn16.replaceAll(\"5\", \"\")\n        val nn18 = nn17.replaceAll(\"6\", \"\")\n        val nn19 = nn18.replaceAll(\"7\", \"\")\n        val nn20 = nn19.replaceAll(\"8\", \"\")\n        val nn21 = nn20.replaceAll(\"9\", \"\")\n        val nn22 = nn21.replaceAll(\"0\", \"\")\n        val nn23 = nn22.replaceAll(\"1\", \"\")\n        val nn24 = nn23.replaceAll(\"2\", \"\")\n        val nn25 = nn24.replaceAll(\"3\", \"\")\n        val nn26 = nn25.replaceAll(\"4\", \"\")\n        val nn27 = nn26.replaceAll(\"5\", \"\")\n        val nn28 = nn27.replaceAll(\"6\", \"\")\n        val nn29 = nn28.replaceAll(\"7\", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2gfb8fs8.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n\n        val nb = nn.bitLength()\n        val nb2 = nb / 2\n        val nb3 = nb / 3\n        val nb4 = nb / 4\n        val nb5 = nb / 5\n        val nb6 = nb / 6\n        val nb7 = nb / 7\n        val nb8 = nb / 8\n        val nb9 = nb / 9\n        val nb10 = nb / 10\n        val nb11 = nb / 11\n        val nb12 = nb / 12\n        val nb13 = nb / 13\n        val nb14 = nb / 14\n        val nb15 = nb / 15\n        val nb16 = nb / 16\n        val nb17 = nb / 17\n        val nb18 = nb / 18\n        val nb19 = nb / 19\n        val nb20 = nb / 20\n        val nb21 = nb / 21\n        val nb22 = nb / 22\n        val nb23 = nb / 23\n        val nb24 = nb / 24\n        val nb25 = nb / 25\n        val nb26 = nb / 26\n        val nb27 = nb / 27\n        val nb28 = nb / 28\n        val nb29 = nb / 29\n        val nb30 = nb / 30\n        val nb31 = nb / 31\n        val nb32 = nb / 32\n        val nb33 = nb / 33\n        val nb34 = nb / 34\n        val nb35 = nb / 35\n        val nb36 = nb / 36\n        val nb37 = nb / 37\n        val nb38 = nb / 38\n        val nb39 = nb / 39\n        val nb40 = nb / 40\n        val nb41 = nb / 41\n        val nb42 = nb / 42\n        val nb43 = nb / 43\n        val nb44 = nb / 44\n        val nb45 = nb / 45\n        val nb46 = nb /\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293260,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpv2e3ankt.scala:60:23 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnb46\u001b[0m = nb /\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpv2e3ankt.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnb\u001b[0m = nn.bitLength()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue bitLength is not a member of Long, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.BigInt.long2bigInt\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv2e3ankt.scala:61:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            n % 2 == 0 ? 0 : n\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp01x0524d.scala:17:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type n\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp01x0524d.scala:17:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value ? is not a member of Int\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n % 2 == 0) return 0l\n        return n * (n - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293248,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3sllfcq6.scala:19)\n\tat Problem.main(tmp3sllfcq6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n\n        val n2 = nn.toString.replaceAll(\"[0-9]\", \"\")\n        val n3 = n2.toString.replaceAll(\"[0-9]\", \"\")\n        val n4 = n3.toString.replaceAll(\"[0-9]\", \"\")\n        val n5 = n4.toString.replaceAll(\"[0-9]\", \"\")\n        val n6 = n5.toString.replaceAll(\"[0-9]\", \"\")\n        val n7 = n6.toString.replaceAll(\"[0-9]\", \"\")\n        val n8 = n7.toString.replaceAll(\"[0-9]\", \"\")\n        val n9 = n8.toString.replaceAll(\"[0-9]\", \"\")\n        val n10 = n9.toString.replaceAll(\"[0-9]\", \"\")\n        val n11 = n10.toString.replaceAll(\"[0-9]\", \"\")\n        val n12 = n11.toString.replaceAll(\"[0-9]\", \"\")\n        val n13 = n12.toString.replaceAll(\"[0-9]\", \"\")\n        val n14 = n13.toString.replaceAll(\"[0-9]\", \"\")\n        val n15 = n14.toString.replaceAll(\"[0-9]\", \"\")\n        val n16 = n15.toString.replaceAll(\"[0-9]\", \"\")\n        val n17 = n16.toString.replaceAll(\"[0-9]\", \"\")\n        val n18 = n17.toString.replaceAll(\"[0-9]\", \"\")\n        val n19 = n18.toString.replaceAll(\"[0-9]\", \"\")\n        val n20 = n19.toString.replaceAll(\"[0-9]\", \"\")\n        val n21 = n20.toString.replaceAll(\"[0-9]\", \"\")\n        val n22 = n21.toString.replaceAll(\"[0-9]\", \"\")\n        val n23 = n22.toString.replaceAll(\"[0-9]\", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293260,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfevtxp55.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            n % 2 == 0 ? 0 : n\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp01x0524d.scala:17:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type n\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp01x0524d.scala:17:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value ? is not a member of Int\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val d = n.toString().toCharArray\n        val s = new StringBuilder()\n        for (i <- 0 until d.length) {\n            if (d[i].toCharCode() % 2 == 1) {\n                s.append(d[i])\n            }\n        }\n        if (s.length == 0) {\n            return 0l\n        } else {\n            return Long.parseLong(s.toString())\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293260,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu_vghwrd.scala:17:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mif\u001b[0m (d[\u001b[35mi\u001b[0m].toCharCode() % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu_vghwrd.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                s.append(d[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu_vghwrd.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mreturn\u001b[0m Long.parseLong(s.toString())\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value parseLong is not a member of object Long\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val s = \"\"\n        while (n > 0) {\n            s = (n % 2).toString() + s\n            n /= 2\n        }\n        s.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293259,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp56fgmiys.scala:16:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            s = (n % \u001b[31m2\u001b[0m).toString() + s\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val s\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp56fgmiys.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n /= \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value /= is not a member of Long - did you mean n.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            n % 2 == 0 ? 0 : n\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp01x0524d.scala:17:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type n\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp01x0524d.scala:17:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value ? is not a member of Int\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n % 2 == 0) return 0l\n        return (n / 2) * (n / 2 + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg4hjo820.scala:19)\n\tat Problem.main(tmpg4hjo820.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n % 2 == 0) {\n            return 0l\n        } else {\n            return n % 10l\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293256,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3lnfdhao.scala:22)\n\tat Problem.main(tmp3lnfdhao.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val s = nn.substring(2, nn.length)\n        val s2 = s.substring(1, s.length - 1)\n        val s3 = s2.substring(0, s2.length - 1)\n        val s4 = s3.substring(0, s3.length - 1)\n        val s5 = s4.substring(0, s4.length - 1)\n        val s6 = s5.substring(0, s5.length - 1)\n        val s7 = s6.substring(0, s6.length - 1)\n        val s8 = s7.substring(0, s7.length - 1)\n        val s9 = s8.substring(0, s8.length - 1)\n        val s10 = s9.substring(0, s9.length - 1)\n        val s11 = s10.substring(0, s10.length - 1)\n        val s12 = s11.substring(0, s11.length - 1)\n        val s13 = s12.substring(0, s12.length - 1)\n        val s14 = s13.substring(0, s13.length - 1)\n        val s15 = s14.substring(0, s14.length - 1)\n        val s16 = s15.substring(0, s15.length - 1)\n        val s17 = s16.substring(0, s16.length - 1)\n        val s18 = s17.substring(0, s17.length - 1)\n        val s19 = s18.substring(0, s18.length - 1)\n        val s20 = s19.substring(0, s19.length - 1)\n        val s21 = s20.substring(0, s20.length - 1)\n        val s22 = s21.substring(0, s21.length - 1)\n        val s23 = s22.substring(0, s22.length - 1)\n        val s24 = s23.substring(0, s23.length - 1)\n        val s\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293260,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvzl4r1f8.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvzl4r1f8.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val s = nn.substring(2, nn.length)\n        val r = s.split(\"\")\n        val r2 = r.map(_.toInt)\n        val r3 = r2.filter(i -> i % 2 != 0)\n        val r4 = r3.map(i -> i * 2)\n        val r5 = r4.reduce(_.times)\n        r5\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293262,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpknrik1x8.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mr3\u001b[0m = r2.filter(i -> i % \u001b[31m2\u001b[0m != \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpknrik1x8.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mr4\u001b[0m = r3.map(i -> i * \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpknrik1x8.scala:19:35 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mr4\u001b[0m = r3.map(i -> i * \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                   where:    B is a type variable\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        val result = 0l\n        for (i <- 0 until digits.length) {\n            result = result * digits(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp93okvt8y.scala:20:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            result = result * digits(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        digits(0)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsg4j3qqz.scala:25)\n\tat Problem.main(tmpsg4j3qqz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        val result = 0l\n        for (i <- 0 until digits.length) {\n            result = result * digits(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp93okvt8y.scala:20:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            result = result * digits(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 0) {\n                digits(i) = 0\n            }\n        }\n        digits(n.toString().length())\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1\n\tat Problem$.digits(tmpx6o0zchm.scala:23)\n\tat Problem$.main(tmpx6o0zchm.scala:26)\n\tat Problem.main(tmpx6o0zchm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        val result = 0l\n        for (i <- 0 until digits.length) {\n            result = result * digits(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp93okvt8y.scala:20:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            result = result * digits(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            n % 2 == 0 ? 0 : n\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp01x0524d.scala:17:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type n\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp01x0524d.scala:17:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value ? is not a member of Int\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val s = nn.substring(2, nn.length)\n        val r = s.split(\"\")\n        val r2 = r.map(Long.parseLong)\n        val r3 = r2.filter(x => x % 2 == 1)\n        val r4 = r3.map(x => x * x)\n        val r5 = r4.reduce(0l, (x, y) => x * y)\n        return r5\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293262,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp46qpk8by.scala:17:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mr2\u001b[0m = r.map(Long.parseLong)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value parseLong is not a member of object Long\n\u001b[31m\u001b[31m-- Error: /tmp/tmp46qpk8by.scala:17:38 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mr2\u001b[0m = r.map(Long.parseLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                      where:    B is a type variable\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val s = nn.substring(1, nn.length)\n        val r = s.split(\"\")\n        val r2 = r.map(_.toInt)\n        val r3 = r2.filter(_.mod(2) == 1)\n        val r4 = r3.map(_.toInt)\n        val r5 = r4.reduce(_.times)\n        val r6 = r5.toInt\n        if (r6 == 0) {\n            return 0\n        } else {\n            return r6\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293262,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp5by_bfy.scala:18:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mr3\u001b[0m = r2.filter(_.mod(\u001b[31m2\u001b[0m) == \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue mod is not a member of Int, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.BigInt.int2bigInt\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpp5by_bfy.scala:20:27 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mr5\u001b[0m = r4.reduce(_.times)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Wrong number of parameters, expected: 2\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 0) {\n                digits(i) = 0\n            }\n        }\n        digits\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6jsumb7f.scala:23:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        digits\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (digits : Array[Long])\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val d = new java.math.BigInteger(n.toString())\n        val odd = d.mod(new java.math.BigInteger(\"3\"))\n        if (odd.equals(java.math.BigInteger.ZERO)) {\n            return 0l\n        } else {\n            return odd.longValue()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293262,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprc09k6pd.scala:23)\n\tat Problem.main(tmprc09k6pd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val s = nn.substring(2, nn.length)\n        val s2 = s.substring(1, s.length - 1)\n        val s3 = s2.substring(0, s2.length - 1)\n        val s4 = s3.substring(0, s3.length - 1)\n        val s5 = s4.substring(0, s4.length - 1)\n        val s6 = s5.substring(0, s5.length - 1)\n        val s7 = s6.substring(0, s6.length - 1)\n        val s8 = s7.substring(0, s7.length - 1)\n        val s9 = s8.substring(0, s8.length - 1)\n        val s10 = s9.substring(0, s9.length - 1)\n        val s11 = s10.substring(0, s10.length - 1)\n        val s12 = s11.substring(0, s11.length - 1)\n        val s13 = s12.substring(0, s12.length - 1)\n        val s14 = s13.substring(0, s13.length - 1)\n        val s15 = s14.substring(0, s14.length - 1)\n        val s16 = s15.substring(0, s15.length - 1)\n        val s17 = s16.substring(0, s16.length - 1)\n        val s18 = s17.substring(0, s17.length - 1)\n        val s19 = s18.substring(0, s18.length - 1)\n        val s20 = s19.substring(0, s19.length - 1)\n        val s21 = s20.substring(0, s20.length - 1)\n        val s22 = s21.substring(0, s21.length - 1)\n        val s23 = s22.substring(0, s22.length - 1)\n        val s24 = s23.substring(0, s23.length - 1)\n        val s\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293260,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvzl4r1f8.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvzl4r1f8.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val d = n.toString\n        val s = d.split(\"\")\n        val odd = s.filter(x => x % 2 == 1).toList\n        val even = s.filter(x => x % 2 == 0).toList\n        val oddDigits = odd.map(x => x.toInt).toList\n        val evenDigits = even.map(x => x.toInt).toList\n        oddDigits.foreach(x => {\n            if (x % 2 == 1) {\n                val prod = x * oddDigits.head\n                oddDigits = oddDigits.tail\n                oddDigits.foreach(y => {\n                    if (y % 2 == 1) {\n                        prod *= y\n                    }\n                })\n                return prod\n            }\n        })\n        evenDigits.foreach(x => {\n            if (x % 2 == 0) {\n                return 0\n            }\n        })\n        return oddDigits.head\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293265,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpd7jm4ayj.scala:16:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36modd\u001b[0m = s.filter(\u001b[36mx\u001b[0m => x % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue % is not a member of String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpd7jm4ayj.scala:17:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36meven\u001b[0m = s.filter(\u001b[36mx\u001b[0m => x % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue % is not a member of String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpd7jm4ayj.scala:23:26 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                oddDigits = oddDigits.tail\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val oddDigits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpd7jm4ayj.scala:26:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m                        prod *= y\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value *= is not a member of Int - did you mean prod.!=?\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n < 0) return 0l\n        if (n == 1) return 1l\n        if (n % 2 == 0) return 0l\n        return n % 2l\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293236,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw9cvgyrj.scala:21)\n\tat Problem.main(tmpw9cvgyrj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val nn2 = nn.replaceAll(\"0\", \"\")\n        val nn3 = nn2.replaceAll(\"1\", \"\")\n        val nn4 = nn3.replaceAll(\"2\", \"\")\n        val nn5 = nn4.replaceAll(\"3\", \"\")\n        val nn6 = nn5.replaceAll(\"4\", \"\")\n        val nn7 = nn6.replaceAll(\"5\", \"\")\n        val nn8 = nn7.replaceAll(\"6\", \"\")\n        val nn9 = nn8.replaceAll(\"7\", \"\")\n        val nn10 = nn9.replaceAll(\"8\", \"\")\n        val nn11 = nn10.replaceAll(\"9\", \"\")\n        val nn12 = nn11.replaceAll(\"0\", \"\")\n        val nn13 = nn12.replaceAll(\"1\", \"\")\n        val nn14 = nn13.replaceAll(\"2\", \"\")\n        val nn15 = nn14.replaceAll(\"3\", \"\")\n        val nn16 = nn15.replaceAll(\"4\", \"\")\n        val nn17 = nn16.replaceAll(\"5\", \"\")\n        val nn18 = nn17.replaceAll(\"6\", \"\")\n        val nn19 = nn18.replaceAll(\"7\", \"\")\n        val nn20 = nn19.replaceAll(\"8\", \"\")\n        val nn21 = nn20.replaceAll(\"9\", \"\")\n        val nn22 = nn21.replaceAll(\"0\", \"\")\n        val nn23 = nn22.replaceAll(\"1\", \"\")\n        val nn24 = nn23.replaceAll(\"2\", \"\")\n        val nn25 = nn24.replaceAll(\"3\", \"\")\n        val nn26 = nn25.replaceAll(\"4\", \"\")\n        val nn27 = nn26.replaceAll(\"5\", \"\")\n        val nn28 = nn27.replaceAll(\"6\", \"\")\n        val nn29 = nn28.replaceAll(\"7\", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2gfb8fs8.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 0) {\n                return 0l\n            }\n        }\n        return reduce(digits)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293260,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3cx477s9.scala:23:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mreturn\u001b[0m reduce(digits)\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               Not found: reduce\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            var m = n\n            var i = 0\n            while (m > 0) {\n                i = i + 1\n                m = m / 10\n            }\n            var result = 1l\n            for (i <- 1 to i - 1) {\n                result = result * (m % 10)\n                m = m / 10\n            }\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293266,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn4opnenp.scala:32)\n\tat Problem.main(tmpn4opnenp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 0) {\n                digits(i) = 0\n            }\n        }\n        val result = 0l\n        for (i <- 0 until n.toString().length()) {\n            result = result * digits(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293244,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpu_813pyr.scala:25:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            result = result * digits(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 0) {\n                digits(i) = 0\n            }\n        }\n        digits(n.toString().length())\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1\n\tat Problem$.digits(tmpx6o0zchm.scala:23)\n\tat Problem$.main(tmpx6o0zchm.scala:26)\n\tat Problem.main(tmpx6o0zchm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n % 2 == 0) {\n            return 0l\n        } else {\n            return n / 2\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293265,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmnnpgyqo.scala:21)\n\tat Problem.main(tmpmnnpgyqo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            n % 2 == 0 ? 0 : n\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp01x0524d.scala:17:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type n\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp01x0524d.scala:17:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value ? is not a member of Int\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            n % 2 == 0 ? 0 : (n % 2 == 1 ? 1 : 0)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293265,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6iqx6om6.scala:17:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (\u001b[35mn\u001b[0m \u001b[35m%\u001b[0m \u001b[31m2\u001b[0m \u001b[35m==\u001b[0m \u001b[31m1\u001b[0m \u001b[35m?\u001b[0m \u001b[31m1\u001b[0m : \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             ')' expected, but ':' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6iqx6om6.scala:17:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (\u001b[35mn\u001b[0m \u001b[35m%\u001b[0m \u001b[31m2\u001b[0m \u001b[35m==\u001b[0m \u001b[31m1\u001b[0m \u001b[35m?\u001b[0m \u001b[31m1\u001b[0m : \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Not found: type ==\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6iqx6om6.scala:17:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : (\u001b[35mn\u001b[0m \u001b[35m%\u001b[0m \u001b[31m2\u001b[0m \u001b[35m==\u001b[0m \u001b[31m1\u001b[0m \u001b[35m?\u001b[0m \u001b[31m1\u001b[0m : \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value ? is not a member of Int\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 0) {\n                digits(i) = 0\n            }\n        }\n        digits\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6jsumb7f.scala:23:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        digits\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (digits : Array[Long])\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 1) {\n                return digits(i)\n            }\n        }\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293240,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_eupweg_.scala:30)\n\tat Problem.main(tmp_eupweg_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        digits(0)\n    }\n\n    // Given a positive integer n, return the product of the even digits.\n    // Return 0 if all digits are odd.\n    // For example:\n    // >>> evenDigits((1l))\n    // (1l)\n    // >>> evenDigits((4l))\n    // (0l)\n    // >>> evenDigits((235l))\n    // (0l)\n    def evenDigits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        digits(0)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293268,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4ilibxde.scala:42)\n\tat Problem.main(tmp4ilibxde.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val d = new java.math.BigInteger(n.toString())\n        val odd = d.mod(new java.math.BigInteger(\"3\"))\n        val result = odd.multiply(new java.math.BigInteger(\"1\"))\n        if (odd.equals(new java.math.BigInteger(\"0\")))\n            return result\n        else\n            return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293268,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0mx5s8ve.scala:18:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mreturn\u001b[0m result\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    (result : java.math.BigInteger)\n\u001b[31m   |\u001b[0m                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        digits(digits.length - 1)\n    }\n\n    // Given a positive integer n, return the product of the even digits.\n    // Return 0 if all digits are odd.\n    // For example:\n    // >>> evenDigits((1l))\n    // (0l)\n    // >>> evenDigits((4l))\n    // (4l)\n    // >>> evenDigits((235l))\n    // (0l)\n    def evenDigits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        digits(digits.length - 1)\n    }\n\n    // Given a positive integer n, return the product of the digits\n    // in the number.\n    // For example:\n    // >>> digitsProduct((1l))\n    // (1l)\n    // >>> digitsProduct((4l))\n    // (4l)\n    // >>> digitsProduct((235l))\n    // (235l)\n    def digitsProduct(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        digits(digits.length - 1)\n    }\n\n    // Given a positive integer n, return the product of the digits\n    // in the number.\n    // For example:\n    // >>> digitsProduct((1l))\n    // (1l)\n    // >>> digitsProduct((4l))\n    // (4l)\n    // >>> digitsProduct((235l))\n    // (235l)\n    def digitsProduct2(n : Long) : Long = {\n        val digits\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293269,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkxa8k7u5.scala:66:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkxa8k7u5.scala:66:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 0) {\n                digits(i) = 0\n            }\n        }\n        digits(n.toString().length())\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1\n\tat Problem$.digits(tmpx6o0zchm.scala:23)\n\tat Problem$.main(tmpx6o0zchm.scala:26)\n\tat Problem.main(tmpx6o0zchm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0l\n        } else {\n            n % 2 == 0l ? 0l : n\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293268,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplkkvuk16.scala:17:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0l\u001b[0m ? \u001b[31m0l\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: type n\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplkkvuk16.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0l\u001b[0m ? \u001b[31m0l\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value ? is not a member of Long\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val d = n.toString\n        val s = d.split(\"\")\n        val odd = s.filter(d -> d % 2 != 0).toList\n        val result = odd.map(d -> d.toLong)\n        if (odd.size == 0) {\n            return 0l\n        } else {\n            return result.reduce(_.times)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpml5pa3fg.scala:16:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36modd\u001b[0m = s.filter(d -> d % \u001b[31m2\u001b[0m != \u001b[31m0\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue % is not a member of String, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpml5pa3fg.scala:17:29 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = odd.map(d -> d.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Found:    (String, Long)\n\u001b[31m   |\u001b[0m                             Required: String => Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpml5pa3fg.scala:21:33 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mreturn\u001b[0m result.reduce(_.times)\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 2\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        digits(n.toString().length())\n    }\n\n    // Given a positive integer n, return the product of the even digits.\n    // Return 0 if all digits are odd.\n    // For example:\n    // >>> evenDigits((1l))\n    // (1l)\n    // >>> evenDigits((4l))\n    // (0l)\n    // >>> evenDigits((235l))\n    // (0l)\n    def evenDigits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        digits(n.toString().length())\n    }\n\n    // Given a positive integer n, return the product of the digits in the\n    // number.\n    // For example:\n    // >>> digitsProduct((1l))\n    // (1l)\n    // >>> digitsProduct((4l))\n    // (4l)\n    // >>> digitsProduct((235l))\n    // (235l)\n    def digitsProduct(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        digits(n.toString().length())\n    }\n\n    // Given a positive integer n, return the product of the digits in the\n    // number.\n    // For example:\n    // >>> digitsProduct((1l))\n    // (1l)\n    // >>> digitsProduct((4l))\n    // (4l)\n    // >>> digitsProduct((235l))\n    // (235l)\n    def digitsProduct2(n : Long) : Long = {\n        val digits\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293269,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpq601t76i.scala:66:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq601t76i.scala:66:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        digits.reduce((x, y) -> x * y)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293268,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8ut7j3qp.scala:18:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        digits.reduce((x, y) -> x * y)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8ut7j3qp.scala:18:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        digits.reduce((x, y) -> x * y)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: y\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8ut7j3qp.scala:18:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        digits.reduce((x, y) -> x * y)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: x\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n % 2 == 0) return 0l\n        return n % 2\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293238,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt46ul2_a.scala:19)\n\tat Problem.main(tmpt46ul2_a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            var x = n\n            var y = 1l\n            while (x > 0) {\n                y = y * x % 10\n                x = x / 10\n            }\n            y\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293258,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgp9cl2a_.scala:28)\n\tat Problem.main(tmpgp9cl2a_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n\n        val nb = nn.toBigInteger()\n        val nb2 = nb.shiftRight(1)\n        val nb3 = nb2.and(BigInteger.valueOf(3))\n        val nb4 = nb3.and(BigInteger.valueOf(7))\n        val nb5 = nb4.and(BigInteger.valueOf(15))\n        val nb6 = nb5.and(BigInteger.valueOf(31))\n        val nb7 = nb6.and(BigInteger.valueOf(63))\n        val nb8 = nb7.and(BigInteger.valueOf(127))\n        val nb9 = nb8.and(BigInteger.valueOf(255))\n        val nb10 = nb9.and(BigInteger.valueOf(511))\n        val nb11 = nb10.and(BigInteger.valueOf(1023))\n        val nb12 = nb11.and(BigInteger.valueOf(2047))\n        val nb13 = nb12.and(BigInteger.valueOf(4095))\n        val nb14 = nb13.and(BigInteger.valueOf(8191))\n        val nb15 = nb14.and(BigInteger.valueOf(16383))\n        val nb16 = nb15.and(BigInteger.valueOf(32767))\n        val nb17 = nb16.and(BigInteger.valueOf(65535))\n        val nb18 = nb17.and(BigInteger.valueOf(131071))\n        val nb19 = nb18.and(BigInteger.valueOf(262143))\n        val nb20 = nb19.and(BigInteger.valueOf(524287))\n        val nb21 = nb20.and(BigInteger.valueOf(1048575))\n        val nb22 = nb21.and(BigInteger.valueOf(2097151))\n        val nb23 = nb22.and(BigInteger.valueOf(4194303))\n        val nb24 = nb23.and(BigInteger.valueOf(8\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3v64elwg.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3v64elwg.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnb\u001b[0m = nn.toBigInteger()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value toBigInteger is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3v64elwg.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val n2 = n.toString.replaceAll(\"0\", \"\").toLong\n        if (n2 % 2 == 0)\n            0l\n        else\n            n2\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293271,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxbsz_9ay.scala:22)\n\tat Problem.main(tmpxbsz_9ay.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val s = \"\"\n        while (n > 0) {\n            s = (n % 2l).toString() + s\n            n /= 2l\n        }\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpbkpponxw.scala:16:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            s = (n % \u001b[31m2l\u001b[0m).toString() + s\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val s\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbkpponxw.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n /= \u001b[31m2l\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbkpponxw.scala:19:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        s\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (s : String)\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            var _$1 = n\n            while (_$1 > 0) {\n                var _$2 = _$1 % 10\n                if (_$2 % 2 == 1) {\n                    _$1 = _$1 / 10\n                    return _$1\n                } else {\n                    _$1 = _$1 / 10\n                }\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ih3uggg.scala:18:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mwhile\u001b[0m (_$1 > \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m            ^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    Unit\n\u001b[31m   |\u001b[0m            Required: Long\n\u001b[31m19 |\u001b[0m                \u001b[33mvar\u001b[0m \u001b[36m_$2\u001b[0m = _$1 % \u001b[31m10\u001b[0m\n\u001b[31m20 |\u001b[0m                \u001b[33mif\u001b[0m (_$2 % \u001b[31m2\u001b[0m == \u001b[31m1\u001b[0m) {\n\u001b[31m21 |\u001b[0m                    _$1 = _$1 / \u001b[31m10\u001b[0m\n\u001b[31m22 |\u001b[0m                    \u001b[33mreturn\u001b[0m _$1\n\u001b[31m23 |\u001b[0m                } \u001b[33melse\u001b[0m {\n\u001b[31m24 |\u001b[0m                    _$1 = _$1 / \u001b[31m10\u001b[0m\n\u001b[31m25 |\u001b[0m                }\n\u001b[31m26 |\u001b[0m            }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            if (n % 2 == 0) {\n                0\n            } else {\n                n % 2\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293270,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpneh6w7sa.scala:25)\n\tat Problem.main(tmpneh6w7sa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 0) {\n                digits(i) = 0\n            }\n        }\n        digits(n.toString().length() - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk9yt3shw.scala:27)\n\tat Problem.main(tmpk9yt3shw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        val result = 0l\n        for (i <- 0 until digits.length) {\n            result = result * digits(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp93okvt8y.scala:20:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            result = result * digits(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        digits.reduce(_.times(_.toLong)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293269,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjkb7kejp.scala:19:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpjkb7kejp.scala:18:22 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        digits.reduce(_.times(_.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Wrong number of parameters, expected: 2\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 0) {\n                digits(i) = 0\n            }\n        }\n        digits(0)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293237,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptp1hg3dw.scala:30)\n\tat Problem.main(tmptp1hg3dw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        var i = 0l\n        while (i < n) {\n            i = i + 1l\n            if (i % 2l == 0l) {\n                i = i / 2l\n            } else {\n                i = i * 3l\n            }\n        }\n        return i\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293271,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj433ea78.scala:26)\n\tat Problem.main(tmpj433ea78.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        digits(0)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsg4j3qqz.scala:25)\n\tat Problem.main(tmpsg4j3qqz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            n % 2 == 0 ? 0 : n\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp01x0524d.scala:17:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type n\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp01x0524d.scala:17:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value ? is not a member of Int\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        val result = 0l\n        for (i <- 0 until digits.length) {\n            result = result * digits(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp93okvt8y.scala:20:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            result = result * digits(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        val oddDigits = digits.filter(d -> d % 2 != 0)\n        val result = 0l\n        for (i <- 0 until oddDigits.length) {\n            result = result * oddDigits(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293269,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9vb_q61j.scala:18:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moddDigits\u001b[0m = digits.filter(d -> d % \u001b[31m2\u001b[0m != \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: d\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp9vb_q61j.scala:21:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            result = result * oddDigits(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        digits(n.toString().length() - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj1_gna9n.scala:22)\n\tat Problem.main(tmpj1_gna9n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        digits(n.toString().length())\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293259,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1\n\tat Problem$.digits(tmps27ujhlg.scala:18)\n\tat Problem$.main(tmps27ujhlg.scala:21)\n\tat Problem.main(tmps27ujhlg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            var result = 1l\n            while (n > 0) {\n                result *= n % 10\n                n /= 10\n            }\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8xcbshqf.scala:20:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                n /= \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value /= is not a member of Long - did you mean n.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 0) {\n                digits(i) = 0\n            }\n        }\n        val result = 0l\n        for (i <- 0 until n.toString().length()) {\n            result = result * digits(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293244,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpu_813pyr.scala:25:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            result = result * digits(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n % 2 == 0) {\n            return 0l\n        } else {\n            return n % 10\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293237,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp28waqtl9.scala:22)\n\tat Problem.main(tmp28waqtl9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n % 2 == 0) return 0l\n        return n % 2\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293238,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt46ul2_a.scala:19)\n\tat Problem.main(tmpt46ul2_a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            var x = n\n            var y = 0\n            while (x > 0) {\n                y = y * 10 + x % 10\n                x /= 10\n            }\n            y\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8ducl5mn.scala:20:20 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                y = y * \u001b[31m10\u001b[0m + x % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Found:    Long\n\u001b[31m   |\u001b[0m                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val n_ = n.toString\n        val n_len = n_().length\n        val n_digits = n_().substring(n_len - 1, n_len)\n        val n_digits_ = n_digits.toString\n        val n_digits_len = n_digits_().length\n        val n_digits_digits = n_digits_().substring(n_digits_len - 1, n_digits_len)\n        val n_digits_digits_ = n_digits_digits.toString\n        val n_digits_digits_len = n_digits_digits_().length\n        val n_digits_digits_digits = n_digits_digits_().substring(n_digits_digits_len - 1, n_digits_digits_len)\n        val n_digits_digits_digits_ = n_digits_digits_digits.toString\n        val n_digits_digits_digits_len = n_digits_digits_digits_().length\n        val n_digits_digits_digits_digits = n_digits_digits_digits_().substring(n_digits_digits_digits_len - 1, n_digits_digits_digits_len)\n        val n_digits_digits_digits_digits_ = n_digits_digits_digits_digits.toString\n        val n_digits_digits_digits_digits_len = n_digits_digits_digits_digits_().length\n        val n_digits_digits_digits_digits_digits = n_digits_digits_digits_digits_().substring(n_digits_digits_digits_digits_len - 1, n_digits_digits_digits_digits_len)\n        val n_digits_digits_digits_digits_digits_ = n_digits_digits_digits_digits_digits.toString\n        val n_digits_\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzgvaieqk.scala:31:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzgvaieqk.scala:15:22 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_len\u001b[0m = n_().length\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzgvaieqk.scala:16:25 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_digits\u001b[0m = n_().substring(n_len - \u001b[31m1\u001b[0m, n_len)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter i of \u001b[33mmethod\u001b[0m \u001b[35mapply\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mStringOps\u001b[0m: (i: Int): Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgvaieqk.scala:31:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n % 2 == 0) return 0l\n        return n * (n - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293248,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3sllfcq6.scala:19)\n\tat Problem.main(tmp3sllfcq6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 0) {\n                digits(i) = 0\n            }\n        }\n        digits(n.toString().length())\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293239,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1\n\tat Problem$.digits(tmpx6o0zchm.scala:23)\n\tat Problem$.main(tmpx6o0zchm.scala:26)\n\tat Problem.main(tmpx6o0zchm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n\n        val nn2 = nn / 2\n        val nn3 = nn2 / 2\n        val nn4 = nn3 / 2\n        val nn5 = nn4 / 2\n        val nn6 = nn5 / 2\n        val nn7 = nn6 / 2\n        val nn8 = nn7 / 2\n        val nn9 = nn8 / 2\n        val nn10 = nn9 / 2\n        val nn11 = nn10 / 2\n        val nn12 = nn11 / 2\n        val nn13 = nn12 / 2\n        val nn14 = nn13 / 2\n        val nn15 = nn14 / 2\n        val nn16 = nn15 / 2\n        val nn17 = nn16 / 2\n        val nn18 = nn17 / 2\n        val nn19 = nn18 / 2\n        val nn20 = nn19 / 2\n        val nn21 = nn20 / 2\n        val nn22 = nn21 / 2\n        val nn23 = nn22 / 2\n        val nn24 = nn23 / 2\n        val nn25 = nn24 / 2\n        val nn26 = nn25 / 2\n        val nn27 = nn26 / 2\n        val nn28 = nn27 / 2\n        val nn29 = nn28 / 2\n        val nn30 = nn29 / 2\n        val nn31 = nn30 / 2\n        val nn32 = nn31 / 2\n        val nn33 = nn32 / 2\n        val nn34 = nn33 / 2\n        val nn35 = nn34 / 2\n        val nn36 = nn35 / 2\n        val nn37 = nn36 / 2\n        val nn38 = nn37 / 2\n        val nn39 = nn38 / 2\n        val nn40 = nn39 / 2\n        val nn41 = nn40 / 2\n        val nn42 = nn41 / 2\n        val nn43 = nn42 / 2\n        val\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp3gbvv15u.scala:57:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m        \u001b[33mval\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3gbvv15u.scala:58:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        val result = 0l\n        for (i <- 0 until digits.length) {\n            result = result * digits(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293226,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp93okvt8y.scala:20:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            result = result * digits(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val nn_ = nn.replaceAll(\"0\", \"\")\n        val nn_ = nn_.replaceAll(\"1\", \"1l\")\n        val nn_ = nn_.replaceAll(\"2\", \"2l\")\n        val nn_ = nn_.replaceAll(\"3\", \"3l\")\n        val nn_ = nn_.replaceAll(\"4\", \"4l\")\n        val nn_ = nn_.replaceAll(\"5\", \"5l\")\n        val nn_ = nn_.replaceAll(\"6\", \"6l\")\n        val nn_ = nn_.replaceAll(\"7\", \"7l\")\n        val nn_ = nn_.replaceAll(\"8\", \"8l\")\n        val nn_ = nn_.replaceAll(\"9\", \"9l\")\n        val nn_ = nn_.replaceAll(\"l\", \"\")\n        val nn_ = nn_.replaceAll(\"0l\", \"\")\n        val nn_ = nn_.replaceAll(\"1l\", \"1\")\n        val nn_ = nn_.replaceAll(\"2l\", \"2\")\n        val nn_ = nn_.replaceAll(\"3l\", \"3\")\n        val nn_ = nn_.replaceAll(\"4l\", \"4\")\n        val nn_ = nn_.replaceAll(\"5l\", \"5\")\n        val nn_ = nn_.replaceAll(\"6l\", \"6\")\n        val nn_ = nn_.replaceAll(\"7l\", \"7\")\n        val nn_ = nn_.replaceAll(\"8l\", \"8\")\n        val nn_ = nn_.replaceAll(\"9l\", \"9\")\n        val nn_ = nn_.replaceAll(\"l\", \"\")\n        nn_\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293273,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm74reh5b.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnn_\u001b[0m = nn_.replaceAll(\u001b[31m\"1\"\u001b[0m, \u001b[31m\"1l\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnn_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnn_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm74reh5b.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnn_\u001b[0m = nn_.replaceAll(\u001b[31m\"2\"\u001b[0m, \u001b[31m\"2l\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnn_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnn_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm74reh5b.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnn_\u001b[0m = nn_.replaceAll(\u001b[31m\"3\"\u001b[0m, \u001b[31m\"3l\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnn_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnn_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm74reh5b.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnn_\u001b[0m = nn_.replaceAll(\u001b[31m\"4\"\u001b[0m, \u001b[31m\"4l\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnn_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnn_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpm74reh5b.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnn_\u001b[0m = nn_.replaceAll(\u001b[31m\"5\"\u001b[0m, \u001b[31m\"5l\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnn_ i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val nn_len = nn.length\n        val nn_digits = nn.substring(nn_len - 1, nn_len)\n        val nn_digits_len = nn_digits.length\n        val nn_digits_int = nn_digits.toInt\n        val nn_digits_int_len = nn_digits_int.length\n        val nn_digits_int_digits = nn_digits_int.substring(nn_digits_int_len - 1, nn_digits_int_len)\n        val nn_digits_int_digits_len = nn_digits_int_digits.length\n        val nn_digits_int_digits_int = nn_digits_int_digits.toInt\n        val nn_digits_int_digits_int_len = nn_digits_int_digits_int.length\n        val nn_digits_int_digits_int_digits = nn_digits_int_digits_int.substring(nn_digits_int_digits_int_len - 1, nn_digits_int_digits_int_len)\n        val nn_digits_int_digits_int_digits_len = nn_digits_int_digits_int_digits.length\n        val nn_digits_int_digits_int_digits_int = nn_digits_int_digits_int_digits_int.toInt\n        val nn_digits_int_digits_int_digits_int_len = nn_digits_int_digits_int_digits_int.length\n        val nn_digits_int_digits_int_digits_int_digits = nn_digits_int_digits_int_digits_int_digits.toInt\n        val nn_digits_int_digits_int_digits_int_digits_len = nn_digits_int_digits_\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293274,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprauixm05.scala:19:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnn_digits_int_len\u001b[0m = nn_digits_int.length\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                value length is not a member of Int\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprauixm05.scala:20:49 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnn_digits_int_digits\u001b[0m = nn_digits_int.substring(nn_digits_int_len - \u001b[31m1\u001b[0m, nn_digits_int_len)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  value substring is not a member of Int\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmprauixm05.scala:26:50 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnn_digits_int_digits_int_digits_int\u001b[0m = nn_digits_int_digits_int_digits_int.toInt\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m          Recursive \u001b[33mvalue\u001b[0m \u001b[35mnn_digits_int_digits_int_digits_int\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmprauixm05.scala:28:57 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnn_digits_int_digits_int_digits_int_digits\u001b[0m = nn_digits_int_digits_int_digits_int_digits.toInt\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m   Recursive \u001b[33mvalue\u001b[0m \u001b[35mnn_digits_int_digits_int_digits_int_digits\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprauixm05.scala:29:61 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnn_digits_int_digits_int_digits_int_digits_len\u001b[0m = nn_digits_int_digits_\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val n_ = n\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        \n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293257,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxyxqopop.scala:15:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_\u001b[0m = n_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mn_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mn_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxyxqopop.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_\u001b[0m = n_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mn_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mn_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxyxqopop.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_\u001b[0m = n_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mn_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mn_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxyxqopop.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_\u001b[0m = n_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mn_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mn_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxyxqopop.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_\u001b[0m = n_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mn_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mn_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxyxqopop.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_\u001b[0m = n_\n\u001b[31m\u001b[31m   |\u001b[0m     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 0) {\n                digits(i) = 0\n            }\n        }\n        val result = 0l\n        for (i <- 0 until n.toString().length()) {\n            result = result * digits(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293244,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpu_813pyr.scala:25:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            result = result * digits(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        digits(n.toString().length())\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293259,
      "stdout": "",
      "stderr": "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1\n\tat Problem$.digits(tmps27ujhlg.scala:18)\n\tat Problem$.main(tmps27ujhlg.scala:21)\n\tat Problem.main(tmps27ujhlg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n.toString\n        val s = nn.substring(1, nn.length)\n        val i = 0l\n        while (i < s.length) {\n            val d = s.substring(i, i + 1)\n            if (d.toInt % 2 == 1) {\n                return i\n            }\n            i = i + 1\n        }\n        return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293274,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7yz_g83c.scala:18:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36md\u001b[0m = s.substring(i, i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (i : Long)\n\u001b[31m   |\u001b[0m                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7yz_g83c.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36md\u001b[0m = s.substring(i, i + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp7yz_g83c.scala:22:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            i = i + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val n_ = n\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        val n_ = n_\n        \n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293257,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxyxqopop.scala:15:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_\u001b[0m = n_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mn_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mn_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxyxqopop.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_\u001b[0m = n_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mn_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mn_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxyxqopop.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_\u001b[0m = n_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mn_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mn_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxyxqopop.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_\u001b[0m = n_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mn_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mn_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxyxqopop.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_\u001b[0m = n_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mn_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mn_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxyxqopop.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn_\u001b[0m = n_\n\u001b[31m\u001b[31m   |\u001b[0m     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val nn = n\n        val nb = nn.toByte\n        val nb2 = nb / 2\n        val nb3 = nb2 / 2\n        val nb4 = nb3 / 2\n        val nb5 = nb4 / 2\n        val nb6 = nb5 / 2\n        val nb7 = nb6 / 2\n        val nb8 = nb7 / 2\n        val nb9 = nb8 / 2\n        val nb10 = nb9 / 2\n        val nb11 = nb10 / 2\n        val nb12 = nb11 / 2\n        val nb13 = nb12 / 2\n        val nb14 = nb13 / 2\n        val nb15 = nb14 / 2\n        val nb16 = nb15 / 2\n        val nb17 = nb16 / 2\n        val nb18 = nb17 / 2\n        val nb19 = nb18 / 2\n        val nb20 = nb19 / 2\n        val nb21 = nb20 / 2\n        val nb22 = nb21 / 2\n        val nb23 = nb22 / 2\n        val nb24 = nb23 / 2\n        val nb25 = nb24 / 2\n        val nb26 = nb25 / 2\n        val nb27 = nb26 / 2\n        val nb28 = nb27 / 2\n        val nb29 = nb28 / 2\n        val nb30 = nb29 / 2\n        val nb31 = nb30 / 2\n        val nb32 = nb31 / 2\n        val nb33 = nb32 / 2\n        val nb34 = nb33 / 2\n        val nb35 = nb34 / 2\n        val nb36 = nb35 / 2\n        val nb37 = nb36 / 2\n        val nb38 = nb37 / 2\n        val nb39 = nb38 / 2\n        val nb40 = nb39 / 2\n        val nb41 = nb40 / 2\n        val nb42 = nb41 / 2\n        val n\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293274,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8ys2inw4.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8ys2inw4.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnb\u001b[0m = nn.toByte\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue toByte is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\u001b[31m   |\u001b[0m  import math.BigInt.javaBigInteger2bigInt\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8ys2inw4.scala:58:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            n % 2 == 0 ? 0 : n\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293229,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp01x0524d.scala:17:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type n\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp01x0524d.scala:17:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n % \u001b[31m2\u001b[0m == \u001b[31m0\u001b[0m ? \u001b[31m0\u001b[0m : \u001b[35mn\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value ? is not a member of Int\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n < 0) return 0l\n        if (n == 1) return 1l\n        if (n % 2 == 0) return 0l\n        return n % 2l\n    }\n\n    // Given a positive integer n, return the product of the even digits.\n    // Return 0 if all digits are odd.\n    // For example:\n    // >>> evenDigits((1l))\n    // (1l)\n    // >>> evenDigits((4l))\n    // (0l)\n    // >>> evenDigits((235l))\n    // (0l)\n    def evenDigits(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n < 0) return 0l\n        if (n == 1) return 1l\n        if (n % 2 == 1) return 0l\n        return n % 2l\n    }\n\n    // Given a positive integer n, return the product of the digits in the\n    // number.\n    // For example:\n    // >>> digitsProduct((1l))\n    // (1l)\n    // >>> digitsProduct((4l))\n    // (4l)\n    // >>> digitsProduct((235l))\n    // (235l)\n    def digitsProduct(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n < 0) return 0l\n        if (n == 1) return 1l\n        return n * digits(n)\n    }\n\n    // Given a positive integer n, return the product of the digits in the\n    // number.\n    // For example:\n    // >>> digitsProduct((1l))\n    // (1l)\n    // >>> digitsProduct((4l))\n    // (4l)\n    // >>> digitsProduct((235l))\n    // (235l)\n    def evenDigitsProduct(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n < 0) return 0l\n        if (n == 1) return 1l\n        return n * evenDigits(n)\n    }\n\n    // Given a positive integer n, return the product of the digits in the\n\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpebgmag6k.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpebgmag6k.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(digits((\u001b[31m5l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: digits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpebgmag6k.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(digits((\u001b[31m54l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: digits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpebgmag6k.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(digits((\u001b[31m120l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: digits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpebgmag6k.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(digits((\u001b[31m5014l\u001b[0m)) == (\u001b[31m5l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: digits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpebgmag6k.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(digits((\u001b[31m98765l\u001b[0m)) == (\u001b[31m315l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: digits\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpebgmag6k.scala:79:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m    assert(digits((\u001b[31m5576543l\u001b[0m)) == (\u001b[31m2625l\u001b[0m));\n\u001b[31m\u001b[31m   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val s = \"\"\n        while (n > 0) {\n            s = s + (n % 2)\n            n /= 2\n        }\n        if (s.length == 0)\n            0l\n        else\n            s.substring(1)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293275,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp9uht9t8x.scala:16:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            s = s + (n % \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val s\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9uht9t8x.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n /= \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value /= is not a member of Long - did you mean n.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9uht9t8x.scala:22:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            s.substring(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    String\n\u001b[31m   |\u001b[0m            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val n2 = n.toString.replaceAll(\"0\", \"\").toLong\n        val n3 = n2.toString.replaceAll(\"1\", \"\").toLong\n        val n4 = n3.toString.replaceAll(\"2\", \"\").toLong\n        val n5 = n4.toString.replaceAll(\"3\", \"\").toLong\n        val n6 = n5.toString.replaceAll(\"4\", \"\").toLong\n        val n7 = n6.toString.replaceAll(\"5\", \"\").toLong\n        val n8 = n7.toString.replaceAll(\"6\", \"\").toLong\n        val n9 = n8.toString.replaceAll(\"7\", \"\").toLong\n        val n10 = n9.toString.replaceAll(\"8\", \"\").toLong\n        val n11 = n10.toString.replaceAll(\"9\", \"\").toLong\n        val n12 = n11.toString.replaceAll(\"0\", \"\").toLong\n        val n13 = n12.toString.replaceAll(\"1\", \"\").toLong\n        val n14 = n13.toString.replaceAll(\"2\", \"\").toLong\n        val n15 = n14.toString.replaceAll(\"3\", \"\").toLong\n        val n16 = n15.toString.replaceAll(\"4\", \"\").toLong\n        val n17 = n16.toString.replaceAll(\"5\", \"\").toLong\n        val n18 = n17.toString.replaceAll(\"6\", \"\").toLong\n        val n19 = n18.toString.replaceAll(\"7\", \"\").toLong\n        val n20 = n19.toString.replaceAll(\"8\", \"\").toLong\n        val n21 = n20.toString.replaceAll(\"9\", \"\").toLong\n        val n22 = n21.toString.replaceAll(\"0\", \"\").toLong\n        val n23 = n22.toString.replaceAll(\"1\", \"\").toLong\n        val n24 = n23.toString.replaceAll(\"2\", \"\").toLong\n        val n25 = n24.toString.replaceAll(\"3\", \"\").toLong\n        val n26 = n25.to\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293246,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E051] Reference Error: /tmp/tmptcay3v14.scala:38:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn26\u001b[0m = n25.to\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mAmbiguous overload. The overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mto\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mIntegralProxy\u001b[0m with types\n\u001b[31m   |\u001b[0m (end: Long, step: Long): scala.collection.immutable.NumericRange.Inclusive[Long]\n\u001b[31m   |\u001b[0m (end: Long): scala.collection.immutable.NumericRange.Inclusive[Long]\n\u001b[31m   |\u001b[0mboth match expected type <?>\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptcay3v14.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        digits(n.toString().length() - 1)\n    }\n\n    // Given a positive integer n, return the product of the digits of n.\n    // Return 0 if n is 0.\n    // For example:\n    // >>> digits2((1l))\n    // (1l)\n    // >>> digits2((4l))\n    // (4l)\n    // >>> digits2((235l))\n    // (235l)\n    def digits2(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        digits(n.toString().length() - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293275,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp051okjoe.scala:39)\n\tat Problem.main(tmp051okjoe.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 0) {\n                digits(i) = 0\n            }\n        }\n        val result = 0l\n        for (i <- 0 until n.toString().length()) {\n            result = result * digits(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293244,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpu_813pyr.scala:25:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            result = result * digits(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val n2 = n.toString.replaceAll(\"[^0-9]\", \"\")\n        val n3 = n2.toInt\n        if (n3 % 2 == 0) {\n            return 0l\n        } else {\n            return n3\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293275,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp15mspl16.scala:24)\n\tat Problem.main(tmp15mspl16.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        if (n == 0) return 0l\n        if (n % 2 == 0) return 0l\n        return n % 10\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293238,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo_pxq71v.scala:20)\n\tat Problem.main(tmpo_pxq71v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = new Array[Long](n.toString().length())\n        for (i <- 0 until n.toString().length()) {\n            digits(i) = n.toString().charAt(i) - '0'\n        }\n        for (i <- 0 until n.toString().length()) {\n            if (digits(i) % 2 == 0) {\n                digits(i) = 0\n            }\n        }\n        val result = 0l\n        for (i <- 0 until n.toString().length()) {\n            result = result * digits(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293244,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpu_813pyr.scala:25:19 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            result = result * digits(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val result\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = mutable.List[Long]()\n        while (n > 0) {\n            digits.append(n % 10)\n            n /= 10\n        }\n        for (i <- 0 until digits.size - 1) {\n            if (digits.get(i) % 2 == 1) {\n                digits.set(i, digits.get(i) * 2)\n            }\n        }\n        digits.reverse()\n        return digits.foldLeft(0l)((a, b) => a * b)\n    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n",
      "timestamp": 1664293275,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp01odo335.scala:14:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = mutable.List[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp01odo335.scala:17:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            n /= \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value /= is not a member of Long - did you mean n.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}