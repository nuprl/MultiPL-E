{
  "name": "HumanEval_139_special_factorial",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3atboln_.scala:77:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3atboln_.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3atboln_.scala:85:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp3atboln_.scala:78:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m78 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return brazilianFactorial2(n - 1) * n\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return brazilianFactorial3(n - 1) * (n + 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return brazilianFactorial4(n - 1) * (n + 1) * (n + 2)\n    }\n\n    // The function will receive an integer\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_s2yh937.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_s2yh937.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_s2yh937.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_s2yh937.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_s2yh937.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(specialFactorial((\u001b[31m1l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7xbwqeio.scala:46)\n\tat Problem.main(tmp7xbwqeio.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        val n = n.toLong\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpf9yo_qxj.scala:13:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = n.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf9yo_qxj.scala:22:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            result *= i\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean result.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphz5e0e0m.scala:34)\n\tat Problem.main(tmphz5e0e0m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt_9yk87n.scala:34)\n\tat Problem.main(tmpt_9yk87n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7g1ol9jc.scala:20)\n\tat Problem.main(tmp7g1ol9jc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.product(range(1, n + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp3pua3cf_.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(range(\u001b[31m1\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(range(1, n + 1)).\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfcufhv9t.scala:46)\n\tat Problem.main(tmpfcufhv9t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsykhtf2z.scala:20)\n\tat Problem.main(tmpsykhtf2z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / specialFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp612gr5qu.scala:34)\n\tat Problem.main(tmp612gr5qu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293351,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp_czmo8wo.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n.toSeq.map(_.toLong).toSeq)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(n.toSeq.map(_$2 => _$2.toLong).toSeq).\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return brazilianFactorial2(n - 1) * n\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return brazilianFactorial3(n - 1) * (n + 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return brazilianFactorial4(n - 1) * (n + 1) * (n + 2)\n    }\n\n    // The function will receive an integer\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpv1hxbzzs.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1hxbzzs.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1hxbzzs.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1hxbzzs.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1hxbzzs.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(specialFactorial((\u001b[31m1l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / (n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr8627t_d.scala:34)\n\tat Problem.main(tmpr8627t_d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9u0ue416.scala:22)\n\tat Problem.main(tmp9u0ue416.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _.product(range(1, n + 1))\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _.product(range(1, n + 1))\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _.product(range(1, n + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpc0_5_fvo.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(range(\u001b[31m1\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(range(1, n + 1)).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpc0_5_fvo.scala:25:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(range(\u001b[31m1\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.product(range(1, n + 1)).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpc0_5_fvo.scala:34:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(range(\u001b[31m1\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$3 of expanded function:\n\u001b[31m   |\u001b[0m   _$3 => _$3.product(range(1, n + 1)).\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.product(1 until n)\n    }\n\n    // The sum of the first n natural numbers is defined as:\n    // sum(1 until n) = 1 + 2 + ... + n\n    // For example:\n    // >>> sum(1 until 5)\n    // 15\n    // The function will receive an integer as input and should return the sum of\n    // the first n natural numbers.\n    def sum(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.sum(1 until n)\n    }\n\n    // The sum of the first n even numbers is defined as:\n    // sum(2 until n) = 2 + 4 + ... + 2n\n    // For example:\n    // >>> sum(2 until 10)\n    // 30\n    // The function will receive an integer as input and should return the sum of\n    // the first n even numbers.\n    def sumEven(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.sum(2 until n)\n    }\n\n    // The sum of the first n odd numbers is defined as:\n    // sum(1 until n) = 1 + 3 + ... + 2n - 1\n    // For example:\n    // >>> sum(1 until 10)\n    // 55\n    // The function will receive an integer as input and should return the sum of\n    // the first n odd numbers.\n    def sumOdd(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.sum(1 until n)\n    }\n\n    // The product of the first n natural numbers is defined as:\n    // product(1 until n) = 1 * 2 * ... * n\n    // For example:\n    // >>> product(1 until 5)\n    // 120\n    // The function will receive an integer as input and should\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplde26q5z.scala:75:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmplde26q5z.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(\u001b[31m1\u001b[0m until n)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(1 until n).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmplde26q5z.scala:30:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mreturn\u001b[0m _.sum(\u001b[31m1\u001b[0m until n)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.sum(1 until n).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmplde26q5z.scala:44:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mreturn\u001b[0m _.sum(\u001b[31m2\u001b[0m until n)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$3 of expanded function:\n\u001b[31m   |\u001b[0m   _$3 => _$3.sum(2 until n).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmplde26q5z.scala:58:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m        \u001b[33mreturn\u001b[0m _.sum(\u001b[31m1\u001b[0m until n)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$4 of expanded function:\n\u001b[31m   |\u001b[0m   _$4 => _$4.sum(1 until n).\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplde26q5z.scala:69:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation avai",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.product(range(1, n + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp0it5yra3.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(range(\u001b[31m1\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(range(1, n + 1)).\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / specialFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmps776qzep.scala:34)\n\tat Problem.main(tmps776qzep.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial4(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial5(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSe\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxmgthz1z.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpxmgthz1z.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n.toSeq.map(_.toLong).toSeq)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(n.toSeq.map(_$2 => _$2.toLong).toSeq).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpxmgthz1z.scala:25:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n.toSeq.map(_.toLong).toSeq)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$3 of expanded function:\n\u001b[31m   |\u001b[0m   _$3 => _$3.product(n.toSeq.map(_$4 => _$4.toLong).toSeq).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpxmgthz1z.scala:34:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n.toSeq.map(_.toLong).toSeq)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$5 of expanded function:\n\u001b[31m   |\u001b[0m   _$5 => _$5.product(n.toSeq.map(_$6 => _$6.toLong).toSeq).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpxmgthz1z.scala:43:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n.toSeq.map(_.toLong).toSeq)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$7 of expanded function:\n\u001b[31m   |\u001b[0m   _$7 => _$7.product(n.toSeq.map(_$8 => _$8.toLong).toSeq).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpxmgthz1z.scala:52:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n.t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * brazilianFactorial2(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * brazilianFactorial3(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * brazilianFactorial4(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1gc9fr9s.scala:80:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1gc9fr9s.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1gc9fr9s.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1gc9fr9s.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1gc9fr9s.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(specialFactorial((\u001b[31m1l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293351,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E019] Syntax Error: /tmp/tmpdqe8ewji.scala:72:27 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mbrazilianFactorial4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Missing return type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdqe8ewji.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdqe8ewji.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdqe8ewji.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdqe8ewji.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdqe8ewji.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(specialFactorial((\u001b[31m1l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n6 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return brazilianFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return brazilianFactorial2(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzbmtnq73.scala:80:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzbmtnq73.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzbmtnq73.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzbmtnq73.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzbmtnq73.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(specialFactorial((\u001b[31m1l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpy0keftu4.scala:46)\n\tat Problem.main(tmpy0keftu4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return brazilianFactorial2(n - 1) * n\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return brazilianFactorial3(n - 1) * (n + 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return brazilianFactorial4(n - 1) * (n + 1) * (n + 2)\n    }\n\n    // The\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjfgw1cdt.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjfgw1cdt.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjfgw1cdt.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjfgw1cdt.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjfgw1cdt.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(specialFactorial((\u001b[31m1l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1l\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1l\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqpi4h7y7.scala:30)\n\tat Problem.main(tmpqpi4h7y7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return brazilianFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return brazilianFactorial2(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def b\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E019] Syntax Error: /tmp/tmp2k7elupq.scala:72:9 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mb\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0m         Missing return type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2k7elupq.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2k7elupq.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2k7elupq.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2k7elupq.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2k7elupq.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(specialFactorial((\u001b[31m1l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n6 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        val n_ = n.toLong\n        if (n_ < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n_ == 0) {\n            return 1L\n        }\n        return n_ * specialFactorial(n_ - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpe9absi67.scala:23)\n\tat Problem.main(tmpe9absi67.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvnviouhj.scala:46)\n\tat Problem.main(tmpvnviouhj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return scala.math.factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial2(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return scala.math.factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial3(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return scala.math.factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial4(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return scala.math.factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial5(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return scala.math.factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial6(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293356,
      "stdout": "error while checking \u001b[33mnew \u001b[0m\u001b[35mIllegalArgumentException\u001b[0m(\u001b[31mnull\u001b[0m)\nerror while checking \u001b[33mthrow \u001b[0m\u001b[33mnew \u001b[0m\u001b[35mIllegalArgumentException\u001b[0m(\u001b[31mnull\u001b[0m)\nerror while checking {\n  \u001b[33mthrow \u001b[0m\u001b[33mnew \u001b[0m\u001b[35mIllegalArgumentException\u001b[0m(\u001b[31mnull\u001b[0m)\n}\nerror while checking \u001b[33mif \u001b[0m(n <= 0) \n  {\n    \u001b[33mthrow \u001b[0m\u001b[33mnew \u001b[0m\u001b[35mIllegalArgumentException\u001b[0m(\u001b[31mnull\u001b[0m)\n  }\nerror while checking {\n  \u001b[33mif \u001b[0m(n <= 0) \n    {\n      \u001b[33mthrow \u001b[0m\u001b[33mnew \u001b[0m\u001b[35mIllegalArgumentException\u001b[0m(\u001b[31mnull\u001b[0m)\n    }\n  n should be > 0def main (args:\u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m])\n}\nerror while checking \u001b[33mdef\u001b[0m \u001b[36mfactorial6\u001b[0m(\u001b[36mn\u001b[0m: \u001b[35mLong\u001b[0m): \u001b[35mLong\u001b[0m = \n  {\n    \u001b[33mif \u001b[0m(n <= 0) \n      {\n        \u001b[33mthrow \u001b[0m\u001b[33mnew \u001b[0m\u001b[35mIllegalArgumentException\u001b[0m(\u001b[31mnull\u001b[0m)\n      }\n    n should be > 0def main (args:\u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m])\n  }\nerror while checking  {\n  \u001b[33mdef\u001b[0m \u001b[36mspecialFactorial\u001b[0m(\u001b[36mn\u001b[0m: \u001b[35mLong\u001b[0m): \u001b[35mLong\u001b[0m = \n    {\n      \u001b[33mif \u001b[0m(n <= 0) \n        {\n          \u001b[33mthrow \u001b[0m\u001b[33mnew \u001b[0m\u001b[35mIllegalArgumentException\u001b[0m(\u001b[32m\"n should be > 0\"\u001b[0m)\n        }\n      \u001b[33mreturn\u001b[0m n * factorial(n - 1)\n    }\n  \u001b[33mdef\u001b[0m \u001b[36mfactorial\u001b[0m(\u001b[36mn\u001b[0m: \u001b[35mLong\u001b[0m): \u001b[35mLong\u001b[0m = \n    {\n      \u001b[33mif \u001b[0m(n <= 0) \n        {\n          \u001b[33mthrow \u001b[0m\u001b[33mnew \u001b[0m\u001b[35mIllegalArgumentException\u001b[0m(\u001b[32m\"n should be > 0\"\u001b[0m)\n        }\n      \u001b[33mreturn\u001b[0m scala.math.factorial(n)\n    }\n  \u001b[33mdef\u001b[0m \u001b[36mfactorial2\u001b[0m(\u001b[36mn\u001b[0m: \u001b[35mLong\u001b[0m): \u001b[35mLong\u001b[0m = \n    {\n      \u001b[33mif \u001b[0m(n <= 0) \n        {\n          \u001b[33mthrow \u001b[0m\u001b[33mnew \u001b[0m\u001b[35mIllegalArgumentException\u001b[0m(\u001b[32m\"n should be > 0\"\u001b[0m)\n        }\n      \u001b[33mreturn\u001b[0m scala.math.factorial(n)\n    }\n  \u001b[33mdef\u001b[0m \u001b[36mfactorial3\u001b[0m(\u001b[36mn\u001b[0m: \u001b[35mLong\u001b[0m): \u001b[35mLong\u001b[0m = \n    {\n      \u001b[33mif \u001b[0m(n <= 0) \n        {\n          \u001b[33mthrow \u001b[0m\u001b[33mnew \u001b[0m\u001b[35mIllegalArgumentException\u001b[0m(\u001b[32m\"n should be > 0\"\u001b[0m)\n        }\n   ",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp2owo8q7o.scala:68:47 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m            \u001b[33mthrow\u001b[0m \u001b[33mnew\u001b[0m \u001b[35mIllegalArgumentException\u001b[0m(\"n should be > 0\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2owo8q7o.scala:70:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2owo8q7o.scala:78:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\nexception occurred while parser /tmp/tmp2owo8q7o.scala\nexception occurred while compiling /tmp/tmp2owo8q7o.scala\nException in thread \"main\" java.lang.AssertionError: assertion failed: position error, parent span does not contain child span\nparent      = \u001b[33mnew \u001b[0m\u001b[35mIllegalArgumentException\u001b[0m(\u001b[31mnull\u001b[0m) # -1,\nparent span = <2225..2270>,\nchild       = \u001b[31mnull\u001b[0m # -1,\nchild span  = [2254..2275..2275]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\tat dotty.tools.dotc",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.product(1 until n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.product(1 until n)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293357,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp3to_gs_p.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(\u001b[31m1\u001b[0m until n)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(1 until n).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp3to_gs_p.scala:25:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(\u001b[31m1\u001b[0m until n)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.product(1 until n).\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3atboln_.scala:77:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3atboln_.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3atboln_.scala:85:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp3atboln_.scala:78:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m78 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial6(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp372nlewd.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp372nlewd.scala:85:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp372nlewd.scala:78:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m78 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbgw1clam.scala:34)\n\tat Problem.main(tmpbgw1clam.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293358,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpd07xwbwv.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n.toSeq.map(_.toLong).toSeq)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(n.toSeq.map(_$2 => _$2.toLong).toSeq).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpd07xwbwv.scala:25:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n.toSeq.map(_.toLong).toSeq)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$3 of expanded function:\n\u001b[31m   |\u001b[0m   _$3 => _$3.product(n.toSeq.map(_$4 => _$4.toLong).toSeq).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpd07xwbwv.scala:34:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n.toSeq.map(_.toLong).toSeq)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$5 of expanded function:\n\u001b[31m   |\u001b[0m   _$5 => _$5.product(n.toSeq.map(_$6 => _$6.toLong).toSeq).\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return brazilianFactorial2(n - 1) * n\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return brazilianFactorial3(n - 1) * (n + 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return brazilianFactorial4(n - 1) * (n + 1) * (n + 2)\n    }\n\n    // The function will receive an integer\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293359,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2vdtqjtc.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2vdtqjtc.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2vdtqjtc.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2vdtqjtc.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2vdtqjtc.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(specialFactorial((\u001b[31m1l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293362,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp91blq59f.scala:46)\n\tat Problem.main(tmp91blq59f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3atboln_.scala:77:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3atboln_.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3atboln_.scala:85:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp3atboln_.scala:78:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m78 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpv4wu24af.scala:84:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv4wu24af.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv4wu24af.scala:79:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv4wu24af.scala:80:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv4wu24af.scala:81:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m    assert(specialFactorial((\u001b[31m1l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be > 0\")\n        }\n        return _.product(1 until n)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293359,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpitp973or.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(\u001b[31m1\u001b[0m until n)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(1 until n).\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphz5e0e0m.scala:34)\n\tat Problem.main(tmphz5e0e0m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpecjgrsyk.scala:34)\n\tat Problem.main(tmpecjgrsyk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial6(n : Long) : Long = {\n        \n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx1nfwfi0.scala:72:47 --------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mbrazilianFactorial6\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mLong\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Found:    Unit\n\u001b[31m   |\u001b[0m                                               Required: Long\n\u001b[31m73 |\u001b[0m        \n\u001b[31m74 |\u001b[0m    }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * brazilianFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293362,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpl18hp51t.scala:40)\n\tat Problem.main(tmpl18hp51t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpecjgrsyk.scala:34)\n\tat Problem.main(tmpecjgrsyk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial6(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp372nlewd.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp372nlewd.scala:85:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp372nlewd.scala:78:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m78 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def b\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E019] Syntax Error: /tmp/tmpadlkttiy.scala:72:9 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mb\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0m         Missing return type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpadlkttiy.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpadlkttiy.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpadlkttiy.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpadlkttiy.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpadlkttiy.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(specialFactorial((\u001b[31m1l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n6 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial2(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial3(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial4(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial5(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial6(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial7(n : Long) : Long = {\n        val\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293364,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp3tk87fnc.scala:83:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m        \u001b[33mval\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3tk87fnc.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3tk87fnc.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result *= i\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3tk87fnc.scala:24:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3tk87fnc.scala:25:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            result *= i\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3tk87fnc.scala:34:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling wit",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz3g7jlhf.scala:30)\n\tat Problem.main(tmpz3g7jlhf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpptzdmuv1.scala:22)\n\tat Problem.main(tmpptzdmuv1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpefc1lglo.scala:40)\n\tat Problem.main(tmpefc1lglo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfcufhv9t.scala:46)\n\tat Problem.main(tmpfcufhv9t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293365,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprq3rjwif.scala:23)\n\tat Problem.main(tmprq3rjwif.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.product(range(1, n + 1))\n    }\n\n    // The sum of the first n natural numbers is defined as:\n    // sum(n) = n * (n + 1) / 2\n    // For example:\n    // >>> sum(5)\n    // 30\n    // The function will receive an integer as input and should return the sum of the\n    // first n natural numbers.\n    def sum(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.sum(range(1, n + 1))\n    }\n\n    // The sum of the squares of the first n natural numbers is defined as:\n    // sum_of_squares(n) = n * (n + 1) * (2n + 1) / 6\n    // For example:\n    // >>> sum_of_squares(5)\n    // 55\n    // The function will receive an integer as input and should return the sum of the\n    // squares of the first n natural numbers.\n    def sum_of_squares(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.sum(range(1, n + 1).map(_ * _).toSeq())\n    }\n\n    // The sum of the cubes of the first n natural numbers is defined as:\n    // sum_of_cubes(n) = n * (n + 1) * (2n + 1) * (3n + 1) / 24\n    // For example:\n    // >>> sum_of_cubes(5)\n    // 55\n    // The function will receive an integer as input and should return the sum of the\n    // cubes of the first n natural numbers.\n    def sum_of_cubes(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.sum(range\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpde8aptd1.scala:59:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpde8aptd1.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(range(\u001b[31m1\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(range(1, n + 1)).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpde8aptd1.scala:30:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mreturn\u001b[0m _.sum(range(\u001b[31m1\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.sum(range(1, n + 1)).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpde8aptd1.scala:44:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mreturn\u001b[0m _.sum(range(\u001b[31m1\u001b[0m, n + \u001b[31m1\u001b[0m).map(_ * _).toSeq())\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$3 of expanded function:\n\u001b[31m   |\u001b[0m   _$3 => _$3.sum(range(1, n + 1).map((_$4, _$5) => _$4 * _$5).toSeq()).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpde8aptd1.scala:58:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m        \u001b[33mreturn\u001b[0m _.sum(range\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$6 of expanded function:\n\u001b[31m   |\u001b[0m   _$6 => _$6.sum(range).\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpddnbxsyf.scala:22)\n\tat Problem.main(tmpddnbxsyf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.product(range(1, n + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp01ci1mrd.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(range(\u001b[31m1\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(range(1, n + 1)).\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0i5mbv3t.scala:22)\n\tat Problem.main(tmp0i5mbv3t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293365,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpin6gg4x3.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n.toSeq.map(_.toLong).toSeq)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(n.toSeq.map(_$2 => _$2.toLong).toSeq).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpin6gg4x3.scala:25:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n.toSeq.map(_.toLong).toSeq)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$3 of expanded function:\n\u001b[31m   |\u001b[0m   _$3 => _$3.product(n.toSeq.map(_$4 => _$4.toLong).toSeq).\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3atboln_.scala:77:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3atboln_.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3atboln_.scala:85:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp3atboln_.scala:78:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m78 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be greater than 0\")\n        }\n        return _.product(1 until n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be greater than 0\")\n        }\n        return _.product(1 until n) * specialFactorial(n)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpdo51p2pv.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(\u001b[31m1\u001b[0m until n)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(1 until n).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpdo51p2pv.scala:25:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(\u001b[31m1\u001b[0m until n) * specialFactorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.product(1 until n) * specialFactorial(n).\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7g1ol9jc.scala:20)\n\tat Problem.main(tmp7g1ol9jc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _.product(n, n - 1, n - 2, n - 3, n - 4, n - 5, n - 6, n - 7, n - 8, n - 9, n - 10, n - 11, n - 12, n - 13, n - 14, n - 15, n - 16, n - 17, n - 18, n - 19, n - 20, n - 21, n - 22, n - 23, n - 24, n - 25, n - 26, n - 27, n - 28, n - 29, n - 30, n - 31, n - 32, n - 33, n - 34, n - 35, n - 36, n - 37, n - 38, n - 39, n - 40, n - 41, n - 42, n - 43, n - 44, n - 45, n - 46, n - 47, n - 48, n - 49, n - 50, n - 51, n - 52, n - 53, n - 54, n - 55, n - 56, n - 57, n - 58, n - 59, n - 60, n - 61, n - 62, n - 63, n - 64, n - 65, n - 66, n - 67, n - 68, n - 69, n - 70, n - 71, n - 72, n - 73, n - 74, n - 75, n - 76, n - 77, n - 78, n - 79, n - 80, n - 81, n - 82, n - 83, n - 84, n - 85, n - 86, n - 87, n - 88, n - 89, n - 90, n - 91, n - 92, n - 93, n - 94, n - 95, n - 96, n - 97, n - 98, n - 99, n - 100, n - 101, n - 102, n - 103, n - 104, n - 105, n - 106, n - 107, n - 108, n - 109, n - 110, n - 111, n - 112, n - 113, n - 114, n - 115, n - 116, n - 117, n - 118, n - 119, n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkvj17ol_.scala:17:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpkvj17ol_.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n, n - \u001b[31m1\u001b[0m, n - \u001b[31m2\u001b[0m, n - \u001b[31m3\u001b[0m, n - \u001b[31m4\u001b[0m, n - \u001b[31m5\u001b[0m, n - \u001b[31m6\u001b[0m, n - \u001b[31m7\u001b[0m, n - \u001b[31m8\u001b[0m, n - \u001b[31m9\u001b[0m, n - \u001b[31m10\u001b[0m, n - \u001b[31m11\u001b[0m, n - \u001b[31m12\u001b[0m, n - \u001b[31m13\u001b[0m, n - \u001b[31m14\u001b[0m, n - \u001b[31m15\u001b[0m, n - \u001b[31m16\u001b[0m, n - \u001b[31m17\u001b[0m, n - \u001b[31m18\u001b[0m, n - \u001b[31m19\u001b[0m, n - \u001b[31m20\u001b[0m, n - \u001b[31m21\u001b[0m, n - \u001b[31m22\u001b[0m, n - \u001b[31m23\u001b[0m, n - \u001b[31m24\u001b[0m, n - \u001b[31m25\u001b[0m, n - \u001b[31m26\u001b[0m, n - \u001b[31m27\u001b[0m, n - \u001b[31m28\u001b[0m, n - \u001b[31m29\u001b[0m, n - \u001b[31m30\u001b[0m, n - \u001b[31m31\u001b[0m, n - \u001b[31m32\u001b[0m, n - \u001b[31m33\u001b[0m, n - \u001b[31m34\u001b[0m, n - \u001b[31m35\u001b[0m, n - \u001b[31m36\u001b[0m, n - \u001b[31m37\u001b[0m, n - \u001b[31m38\u001b[0m, n - \u001b[31m39\u001b[0m, n - \u001b[31m40\u001b[0m, n - \u001b[31m41\u001b[0m, n - \u001b[31m42\u001b[0m, n - \u001b[31m43\u001b[0m, n - \u001b[31m44\u001b[0m, n - \u001b[31m45\u001b[0m, n - \u001b[31m46\u001b[0m, n - \u001b[31m47\u001b[0m, n - \u001b[31m48\u001b[0m, n - \u001b[31m49\u001b[0m, n - \u001b[31m50\u001b[0m, n - \u001b[31m51\u001b[0m, n - \u001b[31m52\u001b[0m, n - \u001b[31m53\u001b[0m, n - \u001b[31m54\u001b[0m, n - \u001b[31m55\u001b[0m, n - \u001b[31m56\u001b[0m, n - \u001b[31m57\u001b[0m, n - \u001b[31m58\u001b[0m, n - \u001b[31m59\u001b[0m, n - \u001b[31m60\u001b[0m, n - \u001b[31m61\u001b[0m, n - \u001b[31m62\u001b[0m, n - \u001b[31m63\u001b[0m, n - \u001b[31m64\u001b[0m, n - \u001b[31m65\u001b[0m, n - \u001b[31m66\u001b[0m, n - \u001b[31m67\u001b[0m, n - \u001b[31m68\u001b[0m, n - \u001b[31m69\u001b[0m, n - \u001b[31m70\u001b[0m, n - \u001b[31m71\u001b[0m, n - \u001b[31m72\u001b[0m, n - \u001b[31m73\u001b[0m, n - \u001b[31m74\u001b[0m, n - \u001b[31m75\u001b[0m, n - \u001b[31m76\u001b[0m, n - \u001b[31m77\u001b[0m, n - \u001b[31m78\u001b[0m, n - \u001b[31m79\u001b[0m, n - \u001b[31m80\u001b[0m, n - \u001b[31m81\u001b[0m, n - \u001b[31m82\u001b[0m, n - \u001b[31m83\u001b[0m, n - \u001b[31m84\u001b[0m, n - \u001b[31m85\u001b[0m, n - \u001b[31m86\u001b[0m, n - \u001b[31m87\u001b[0m, n - \u001b[31m88\u001b[0m, n - \u001b[31m89\u001b[0m, n - \u001b[31m90\u001b[0m, n - \u001b[31m91\u001b[0m, n - \u001b[31m92\u001b[0m, n - \u001b[31m93\u001b[0m, n - \u001b[31m94\u001b[0m, n - \u001b[31m95\u001b[0m, n - \u001b[31m96\u001b[0m, n - \u001b[31m97\u001b[0m, n - \u001b[31m98\u001b[0m, n - \u001b[31m99\u001b[0m, n - \u001b[31m100\u001b[0m, n - \u001b[31m101\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz3g7jlhf.scala:30)\n\tat Problem.main(tmpz3g7jlhf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpv6xoi8xo.scala:20)\n\tat Problem.main(tmpv6xoi8xo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293369,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp81h0gpqe.scala:23)\n\tat Problem.main(tmp81h0gpqe.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpefc1lglo.scala:40)\n\tat Problem.main(tmpefc1lglo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.product(range(1, n + 1))\n    }\n\n    // The sum of the special factorials of the numbers from 1 to n is defined as:\n    // sum_of_special_factorials(n) = sum(special_factorial(i) for i in range(1, n + 1))\n    // For example:\n    // >>> sum_of_special_factorials(5)\n    // 286\n    // The function will receive an integer as input and should return the sum of the\n    // special factorials of the numbers from 1 to this integer.\n    def sum_of_special_factorials(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.sum(specialFactorial(i) for i in range(1, n + 1))\n    }\n\n    // The sum of the special factorials of the numbers from 1 to n is defined as:\n    // sum_of_special_factorials(n) = sum(special_factorial(i) for i in range(1, n + 1))\n    // For example:\n    // >>> sum_of_special_factorials(5)\n    // 286\n    // The function will receive an integer as input and should return the sum of the\n    // special factorials of the numbers from 1 to this integer.\n    def sum_of_special_factorials_scala(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.sum(scala.math.factorial.special(i) for i in range(1, n + 1))\n    }\n\n    // The sum of the special factorials of the numbers from 1 to n is defined as:\n    // sum_of_special_factorials(n) = sum(special_factorial(i) for i in range(1, n + 1))\n    // For example:\n    // >>> sum_\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8la52eaq.scala:30:41 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mreturn\u001b[0m _.sum(specialFactorial(i) \u001b[33mfor\u001b[0m i in range(\u001b[31m1\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         ')' expected, but 'for' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8la52eaq.scala:44:53 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mreturn\u001b[0m _.sum(scala.math.factorial.special(i) \u001b[33mfor\u001b[0m i in range(\u001b[31m1\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           ')' expected, but 'for' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8la52eaq.scala:59:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp8la52eaq.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(range(\u001b[31m1\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(range(1, n + 1)).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp8la52eaq.scala:30:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mreturn\u001b[0m _.sum(specialFactorial(i) \u001b[33mfor\u001b[0m i in range(\u001b[31m1\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.sum(specialFactorial(i)).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp8la52eaq.scala:44:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mreturn\u001b[0m _.sum(scala.math.factorial.special(i) \u001b[33mfor\u001b[0m i in range(\u001b[31m1\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293369,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx6uvvkvc.scala:34)\n\tat Problem.main(tmpx6uvvkvc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsykhtf2z.scala:20)\n\tat Problem.main(tmpsykhtf2z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return (n * factorial(n - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg0y5173h.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m (n * factorial(n - \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: factorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be greater than 0\")\n        }\n        return _.product(range(1, n + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpb8la7nfy.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(range(\u001b[31m1\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(range(1, n + 1)).\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _.product(1 until n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _.product(1 until n)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpcae3zjyg.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(\u001b[31m1\u001b[0m until n)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(1 until n).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpcae3zjyg.scala:25:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(\u001b[31m1\u001b[0m until n)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.product(1 until n).\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293371,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpltpe4cs5.scala:46)\n\tat Problem.main(tmpltpe4cs5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return brazilianFactorial2(n - 1) * n\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return brazilianFactorial3(n - 1) * (n + 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return brazilianFactorial4(n - 1) * (n + 1) * (n + 2)\n    }\n\n    // The function will receive an integer\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293359,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2vdtqjtc.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2vdtqjtc.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2vdtqjtc.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2vdtqjtc.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2vdtqjtc.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(specialFactorial((\u001b[31m1l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpptzdmuv1.scala:22)\n\tat Problem.main(tmpptzdmuv1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be greater than 0\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be greater than 0\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be greater than 0\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be greater than 0\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial4(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be greater than 0\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial5(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be greater than 0\")\n        }\n        return _.product(n.toSeq.map(_.toLong).toSe\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293368,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi9e9ar86.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpi9e9ar86.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n.toSeq.map(_.toLong).toSeq)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(n.toSeq.map(_$2 => _$2.toLong).toSeq).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpi9e9ar86.scala:25:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n.toSeq.map(_.toLong).toSeq)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$3 of expanded function:\n\u001b[31m   |\u001b[0m   _$3 => _$3.product(n.toSeq.map(_$4 => _$4.toLong).toSeq).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpi9e9ar86.scala:34:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n.toSeq.map(_.toLong).toSeq)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$5 of expanded function:\n\u001b[31m   |\u001b[0m   _$5 => _$5.product(n.toSeq.map(_$6 => _$6.toLong).toSeq).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpi9e9ar86.scala:43:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n.toSeq.map(_.toLong).toSeq)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$7 of expanded function:\n\u001b[31m   |\u001b[0m   _$7 => _$7.product(n.toSeq.map(_$8 => _$8.toLong).toSeq).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpi9e9ar86.scala:52:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n.t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqv1ku5m2.scala:77:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqv1ku5m2.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqv1ku5m2.scala:85:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpqv1ku5m2.scala:78:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m78 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293362,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp91blq59f.scala:46)\n\tat Problem.main(tmp91blq59f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsykhtf2z.scala:20)\n\tat Problem.main(tmpsykhtf2z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfdg19l5m.scala:22)\n\tat Problem.main(tmpfdg19l5m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def b\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E019] Syntax Error: /tmp/tmpadlkttiy.scala:72:9 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mb\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0m         Missing return type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpadlkttiy.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpadlkttiy.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpadlkttiy.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpadlkttiy.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpadlkttiy.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(specialFactorial((\u001b[31m1l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n6 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1L\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1L\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfkcn5m5o.scala:30)\n\tat Problem.main(tmpfkcn5m5o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1l\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1l\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1l\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1l\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1l\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1l\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1l\n        } else {\n            n * brazilian\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp07wp1aro.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp07wp1aro.scala:76:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m            n * brazilian\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: brazilian\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp07wp1aro.scala:85:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp07wp1aro.scala:78:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m78 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n            result *= factorial(i - 1)\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n            result *= factorial(i - 1)\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n            result *= factorial(i - 1)\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n            result *= factorial(i - 1)\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long =\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpvt0bziyk.scala:76:46 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mbrazilianFactorial5\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mLong\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvt0bziyk.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvt0bziyk.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvt0bziyk.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result *= i\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvt0bziyk.scala:24:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvt0bziyk.scala:25:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            result *= i\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvt0bziyk.sc",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsykhtf2z.scala:20)\n\tat Problem.main(tmpsykhtf2z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        } else {\n            return n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        } else {\n            return n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        } else {\n            return n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        } else {\n            return n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293369,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpry14b8zr.scala:84:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpry14b8zr.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpry14b8zr.scala:79:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpry14b8zr.scala:80:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpry14b8zr.scala:81:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m    assert(specialFactorial((\u001b[31m1l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * brazilianFactorial2(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * brazilianFactorial3(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * brazilianFactorial4(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    //\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293369,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsl4dml2y.scala:80:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsl4dml2y.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsl4dml2y.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsl4dml2y.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsl4dml2y.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(specialFactorial((\u001b[31m1l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The sum of the first n natural numbers is defined as:\n    // sum(1 to n) = 1 + 2 + ... + n\n    // For example:\n    // >>> sum(1 to 5)\n    // 15\n    // The function will receive an integer as input and should return the sum of\n    // the first n natural numbers.\n    def sum(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            n * (n + 1) / 2\n        }\n    }\n\n    // The sum of the squares of the first n natural numbers is defined as:\n    // sum_of_squares(1 to n) = 1^2 + 2^2 + ... + n^2\n    // For example:\n    // >>> sum_of_squares(1 to 5)\n    // 55\n    // The function will receive an integer as input and should return the sum of\n    // the squares of the first n natural numbers.\n    def sum_of_squares(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            n * (n * n + 1) / 2\n        }\n    }\n\n    // The sum of the cubes of the first n natural numbers is defined as:\n    // sum_of_cubes(1 to n) = 1^3 + 2^3 + ... + n^3\n    // For example:\n    // >>> sum_of_cubes(1 to 5)\n    // 55\n    // The function will receive an integer as input and should return the sum of\n    // the cubes of the first n natural numbers.\n    def sum_of_cubes(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else {\n            n * (n * n * n + 1) / 2\n        }\n    }\n\n    // The sum of the first n prime numbers is defined as:\n    // sum_of_primes(1 to n) = 1 + 2 + ... + n\n    // where prime numbers\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293371,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphucy6qrm.scala:76:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphucy6qrm.scala:70:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphucy6qrm.scala:71:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphucy6qrm.scala:72:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphucy6qrm.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(specialFactorial((\u001b[31m1l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293374,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr8659sks.scala:46)\n\tat Problem.main(tmpr8659sks.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsykhtf2z.scala:20)\n\tat Problem.main(tmpsykhtf2z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return brazilianFactorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return brazilianFactorial2(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293371,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp___k1k4_.scala:73:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ':' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp___k1k4_.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp___k1k4_.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp___k1k4_.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp___k1k4_.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp___k1k4_.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(specialFactorial((\u001b[31m1l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n6 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293376,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp049yhdlm.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp049yhdlm.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result *= i\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean result.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293376,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3d1jcddy.scala:22)\n\tat Problem.main(tmp3d1jcddy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293376,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuj8zawae.scala:34)\n\tat Problem.main(tmpuj8zawae.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n            result *= factorial(i - 1)\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n            result *= factorial(i - 1)\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n            result *= factorial(i - 1)\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n            result *= factorial(i - 1)\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long =\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293379,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp2zw1auc1.scala:76:46 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mbrazilianFactorial5\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mLong\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2zw1auc1.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2zw1auc1.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2zw1auc1.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result *= i\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2zw1auc1.scala:24:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2zw1auc1.scala:25:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            result *= i\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2zw1auc1.sc",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.product(n, _.product(n - 1, _.product(n - 2, _.product(n - 3, _.product(n - 4, _.product(n - 5, _.product(n - 6, _.product(n - 7, _.product(n - 8, _.product(n - 9, _.product(n - 10, _.product(n - 11, _.product(n - 12, _.product(n - 13, _.product(n - 14, _.product(n - 15, _.product(n - 16, _.product(n - 17, _.product(n - 18, _.product(n - 19, _.product(n - 20, _.product(n - 21, _.product(n - 22, _.product(n - 23, _.product(n - 24, _.product(n - 25, _.product(n - 26, _.product(n - 27, _.product(n - 28, _.product(n - 29, _.product(n - 30, _.product(n - 31, _.product(n - 32, _.product(n - 33, _.product(n - 34, _.product(n - 35, _.product(n - 36, _.product(n - 37, _.product(n - 38, _.product(n - 39, _.product(n - 40, _.product(n - 41, _.product(n - 42, _.product(n - 43, _.product(n - 44, _.product(n - 45, _.product(n - 46, _.product(n - 47, _.product(n - 48, _.product(n - 49, _.product(n - 50, _.product(n - 51, _.product(n - 52, _.product(n - 53, _.product(n - 54, _.product(n - 55, _.product(n - 56, _.product(n - 57, _.product(n - 58, _.product(n - 59, _.product(\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293373,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpuior_bao.scala:16:1091 -------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n, _.product(n - \u001b[31m1\u001b[0m, _.product(n - \u001b[31m2\u001b[0m, _.product(n - \u001b[31m3\u001b[0m, _.product(n - \u001b[31m4\u001b[0m, _.product(n - \u001b[31m5\u001b[0m, _.product(n - \u001b[31m6\u001b[0m, _.product(n - \u001b[31m7\u001b[0m, _.product(n - \u001b[31m8\u001b[0m, _.product(n - \u001b[31m9\u001b[0m, _.product(n - \u001b[31m10\u001b[0m, _.product(n - \u001b[31m11\u001b[0m, _.product(n - \u001b[31m12\u001b[0m, _.product(n - \u001b[31m13\u001b[0m, _.product(n - \u001b[31m14\u001b[0m, _.product(n - \u001b[31m15\u001b[0m, _.product(n - \u001b[31m16\u001b[0m, _.product(n - \u001b[31m17\u001b[0m, _.product(n - \u001b[31m18\u001b[0m, _.product(n - \u001b[31m19\u001b[0m, _.product(n - \u001b[31m20\u001b[0m, _.product(n - \u001b[31m21\u001b[0m, _.product(n - \u001b[31m22\u001b[0m, _.product(n - \u001b[31m23\u001b[0m, _.product(n - \u001b[31m24\u001b[0m, _.product(n - \u001b[31m25\u001b[0m, _.product(n - \u001b[31m26\u001b[0m, _.product(n - \u001b[31m27\u001b[0m, _.product(n - \u001b[31m28\u001b[0m, _.product(n - \u001b[31m29\u001b[0m, _.product(n - \u001b[31m30\u001b[0m, _.product(n - \u001b[31m31\u001b[0m, _.product(n - \u001b[31m32\u001b[0m, _.product(n - \u001b[31m33\u001b[0m, _.product(n - \u001b[31m34\u001b[0m, _.product(n - \u001b[31m35\u001b[0m, _.product(n - \u001b[31m36\u001b[0m, _.product(n - \u001b[31m37\u001b[0m, _.product(n - \u001b[31m38\u001b[0m, _.product(n - \u001b[31m39\u001b[0m, _.product(n - \u001b[31m40\u001b[0m, _.product(n - \u001b[31m41\u001b[0m, _.product(n - \u001b[31m42\u001b[0m, _.product(n - \u001b[31m43\u001b[0m, _.product(n - \u001b[31m44\u001b[0m, _.product(n - \u001b[31m45\u001b[0m, _.product(n - \u001b[31m46\u001b[0m, _.product(n - \u001b[31m47\u001b[0m, _.product(n - \u001b[31m48\u001b[0m, _.product(n - \u001b[31m49\u001b[0m, _.product(n - \u001b[31m50\u001b[0m, _.product(n - \u001b[31m51\u001b[0m, _.product(n - \u001b[31m52\u001b[0m, _.product(n - \u001b[31m53\u001b[0m, _.product(n - \u001b[31m54\u001b[0m, _.product(n - \u001b[31m55\u001b[0m, _.product(n - \u001b[31m56\u001b[0m, _.product(n - \u001b[31m57\u001b[0m, _.product(n - \u001b[31m58\u001b[0m, _.product(n - \u001b[31m59\u001b[0m, _.product(\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n            result *= specialFactorial(i - 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293378,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_4l_6a1c.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_4l_6a1c.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result *= i\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_4l_6a1c.scala:24:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_4l_6a1c.scala:25:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            result *= i\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_4l_6a1c.scala:34:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_4l_6a1c.scala:35:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            result *= i\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E008] ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsykhtf2z.scala:20)\n\tat Problem.main(tmpsykhtf2z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        val n_ = n\n        val n_1 = n - 1\n        val n_2 = n - 2\n        val n_3 = n - 3\n        val n_4 = n - 4\n        val n_5 = n - 5\n        val n_6 = n - 6\n        val n_7 = n - 7\n        val n_8 = n - 8\n        val n_9 = n - 9\n        val n_10 = n - 10\n        val n_11 = n - 11\n        val n_12 = n - 12\n        val n_13 = n - 13\n        val n_14 = n - 14\n        val n_15 = n - 15\n        val n_16 = n - 16\n        val n_17 = n - 17\n        val n_18 = n - 18\n        val n_19 = n - 19\n        val n_20 = n - 20\n        val n_21 = n - 21\n        val n_22 = n - 22\n        val n_23 = n - 23\n        val n_24 = n - 24\n        val n_25 = n - 25\n        val n_26 = n - 26\n        val n_27 = n - 27\n        val n_28 = n - 28\n        val n_29 = n - 29\n        val n_30 = n - 30\n        val n_31 = n - 31\n        val n_32 = n - 32\n        val n_33 = n - 33\n        val n_34 = n - 34\n        val n_35 = n - 35\n        val n_36 = n - 36\n        val n_37 = n - 37\n        val n_38 = n - 38\n        val n_39 = n - 39\n        val n_40 = n - 40\n        val n_41 = n - 41\n        val n_42 = n - 42\n        val n_43 = n - 43\n        val n_44 = n - 44\n        val n_45 = n - 45\n        val n_46 = n - 46\n        val n_47 = n - 47\n        val n_48 = n - 48\n        val n_49 = n - 49\n        val n_50 = n - 50\n        val n_51\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293377,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxlq_l82p.scala:65:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxlq_l82p.scala:65:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial6(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp372nlewd.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp372nlewd.scala:85:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp372nlewd.scala:78:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m78 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * brazilianFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293377,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1qdwpx4s.scala:36)\n\tat Problem.main(tmp1qdwpx4s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 0 until n) {\n            result *= i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293378,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3hg3ov_7.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3hg3ov_7.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result *= i\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean result.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpptzdmuv1.scala:22)\n\tat Problem.main(tmpptzdmuv1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsykhtf2z.scala:20)\n\tat Problem.main(tmpsykhtf2z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.product(n.toInt.toSeq.map(_.toInt).toSeq)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp0prd1dvo.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n.toInt.toSeq.map(_.toInt).toSeq)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(n.toInt.toSeq.map(_$2 => _$2.toInt).toSeq).\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1L\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1L\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1L\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293378,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsl58u_tc.scala:40)\n\tat Problem.main(tmpsl58u_tc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293381,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphrm_977u.scala:89:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphrm_977u.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphrm_977u.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result *= i\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphrm_977u.scala:24:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphrm_977u.scala:25:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            result *= i\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphrm_977u.scala:34:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphrm_977u.scala:35:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293374,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr8659sks.scala:46)\n\tat Problem.main(tmpr8659sks.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * brazilianFactorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial6(n : Long) : Long = {\n        \n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293379,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1iy_nc8t.scala:72:47 --------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mbrazilianFactorial6\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mLong\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Found:    Unit\n\u001b[31m   |\u001b[0m                                               Required: Long\n\u001b[31m73 |\u001b[0m        \n\u001b[31m74 |\u001b[0m    }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.product(n, n - 1, n - 2, n - 3, n - 4, n - 5, n - 6, n - 7, n - 8, n - 9, n - 10, n - 11, n - 12, n - 13, n - 14, n - 15, n - 16, n - 17, n - 18, n - 19, n - 20, n - 21, n - 22, n - 23, n - 24, n - 25, n - 26, n - 27, n - 28, n - 29, n - 30, n - 31, n - 32, n - 33, n - 34, n - 35, n - 36, n - 37, n - 38, n - 39, n - 40, n - 41, n - 42, n - 43, n - 44, n - 45, n - 46, n - 47, n - 48, n - 49, n - 50, n - 51, n - 52, n - 53, n - 54, n - 55, n - 56, n - 57, n - 58, n - 59, n - 60, n - 61, n - 62, n - 63, n - 64, n - 65, n - 66, n - 67, n - 68, n - 69, n - 70, n - 71, n - 72, n - 73, n - 74, n - 75, n - 76, n - 77, n - 78, n - 79, n - 80, n - 81, n - 82, n - 83, n - 84, n - 85, n - 86, n - 87, n - 88, n - 89, n - 90, n - 91, n - 92, n - 93, n - 94, n - 95, n - 96, n - 97, n - 98, n - 99, n - 100, n - 101, n - 102, n - 103, n - 104, n - 105, n - 106, n - 107, n - 108, n - 109, n - 110, n - 111, n - 112, n - 113, n - 114, n - 115, n - 116, n - 117, n - 118, n - 119,\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293376,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxugdmpch.scala:17:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpxugdmpch.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n, n - \u001b[31m1\u001b[0m, n - \u001b[31m2\u001b[0m, n - \u001b[31m3\u001b[0m, n - \u001b[31m4\u001b[0m, n - \u001b[31m5\u001b[0m, n - \u001b[31m6\u001b[0m, n - \u001b[31m7\u001b[0m, n - \u001b[31m8\u001b[0m, n - \u001b[31m9\u001b[0m, n - \u001b[31m10\u001b[0m, n - \u001b[31m11\u001b[0m, n - \u001b[31m12\u001b[0m, n - \u001b[31m13\u001b[0m, n - \u001b[31m14\u001b[0m, n - \u001b[31m15\u001b[0m, n - \u001b[31m16\u001b[0m, n - \u001b[31m17\u001b[0m, n - \u001b[31m18\u001b[0m, n - \u001b[31m19\u001b[0m, n - \u001b[31m20\u001b[0m, n - \u001b[31m21\u001b[0m, n - \u001b[31m22\u001b[0m, n - \u001b[31m23\u001b[0m, n - \u001b[31m24\u001b[0m, n - \u001b[31m25\u001b[0m, n - \u001b[31m26\u001b[0m, n - \u001b[31m27\u001b[0m, n - \u001b[31m28\u001b[0m, n - \u001b[31m29\u001b[0m, n - \u001b[31m30\u001b[0m, n - \u001b[31m31\u001b[0m, n - \u001b[31m32\u001b[0m, n - \u001b[31m33\u001b[0m, n - \u001b[31m34\u001b[0m, n - \u001b[31m35\u001b[0m, n - \u001b[31m36\u001b[0m, n - \u001b[31m37\u001b[0m, n - \u001b[31m38\u001b[0m, n - \u001b[31m39\u001b[0m, n - \u001b[31m40\u001b[0m, n - \u001b[31m41\u001b[0m, n - \u001b[31m42\u001b[0m, n - \u001b[31m43\u001b[0m, n - \u001b[31m44\u001b[0m, n - \u001b[31m45\u001b[0m, n - \u001b[31m46\u001b[0m, n - \u001b[31m47\u001b[0m, n - \u001b[31m48\u001b[0m, n - \u001b[31m49\u001b[0m, n - \u001b[31m50\u001b[0m, n - \u001b[31m51\u001b[0m, n - \u001b[31m52\u001b[0m, n - \u001b[31m53\u001b[0m, n - \u001b[31m54\u001b[0m, n - \u001b[31m55\u001b[0m, n - \u001b[31m56\u001b[0m, n - \u001b[31m57\u001b[0m, n - \u001b[31m58\u001b[0m, n - \u001b[31m59\u001b[0m, n - \u001b[31m60\u001b[0m, n - \u001b[31m61\u001b[0m, n - \u001b[31m62\u001b[0m, n - \u001b[31m63\u001b[0m, n - \u001b[31m64\u001b[0m, n - \u001b[31m65\u001b[0m, n - \u001b[31m66\u001b[0m, n - \u001b[31m67\u001b[0m, n - \u001b[31m68\u001b[0m, n - \u001b[31m69\u001b[0m, n - \u001b[31m70\u001b[0m, n - \u001b[31m71\u001b[0m, n - \u001b[31m72\u001b[0m, n - \u001b[31m73\u001b[0m, n - \u001b[31m74\u001b[0m, n - \u001b[31m75\u001b[0m, n - \u001b[31m76\u001b[0m, n - \u001b[31m77\u001b[0m, n - \u001b[31m78\u001b[0m, n - \u001b[31m79\u001b[0m, n - \u001b[31m80\u001b[0m, n - \u001b[31m81\u001b[0m, n - \u001b[31m82\u001b[0m, n - \u001b[31m83\u001b[0m, n - \u001b[31m84\u001b[0m, n - \u001b[31m85\u001b[0m, n - \u001b[31m86\u001b[0m, n - \u001b[31m87\u001b[0m, n - \u001b[31m88\u001b[0m, n - \u001b[31m89\u001b[0m, n - \u001b[31m90\u001b[0m, n - \u001b[31m91\u001b[0m, n - \u001b[31m92\u001b[0m, n - \u001b[31m93\u001b[0m, n - \u001b[31m94\u001b[0m, n - \u001b[31m95\u001b[0m, n - \u001b[31m96\u001b[0m, n - \u001b[31m97\u001b[0m, n - \u001b[31m98\u001b[0m, n - \u001b[31m99\u001b[0m, n - \u001b[31m100\u001b[0m, n - \u001b[31m101\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        val n_ = n.toLong\n        val n_1 = n_ - 1l\n        val n_2 = n_ - 2l\n        val n_3 = n_ - 3l\n        val n_4 = n_ - 4l\n        val n_5 = n_ - 5l\n        val n_6 = n_ - 6l\n        val n_7 = n_ - 7l\n        val n_8 = n_ - 8l\n        val n_9 = n_ - 9l\n        val n_10 = n_ - 10l\n        val n_11 = n_ - 11l\n        val n_12 = n_ - 12l\n        val n_13 = n_ - 13l\n        val n_14 = n_ - 14l\n        val n_15 = n_ - 15l\n        val n_16 = n_ - 16l\n        val n_17 = n_ - 17l\n        val n_18 = n_ - 18l\n        val n_19 = n_ - 19l\n        val n_20 = n_ - 20l\n        val n_21 = n_ - 21l\n        val n_22 = n_ - 22l\n        val n_23 = n_ - 23l\n        val n_24 = n_ - 24l\n        val n_25 = n_ - 25l\n        val n_26 = n_ - 26l\n        val n_27 = n_ - 27l\n        val n_28 = n_ - 28l\n        val n_29 = n_ - 29l\n        val n_30 = n_ - 30l\n        val n_31 = n_ - 31l\n        val n_32 = n_ - 32l\n        val n_33 = n_ - 33l\n        val n_34 = n_ - 34l\n        val n_35 = n_ - 35l\n        val n_36 = n_ - 36l\n        val n_37 = n_ - 37l\n        val n_38 = n_ - 38l\n        val n_39 = n_ - 39l\n        val n_40 = n_ - 40l\n        val n_41 = n_ - 41l\n        val n_42 = n_ - 42\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293381,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmper_win3i.scala:56:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293376,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp049yhdlm.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp049yhdlm.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result *= i\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean result.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3atboln_.scala:77:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3atboln_.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3atboln_.scala:85:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp3atboln_.scala:78:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m78 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293381,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz75h18sp.scala:23)\n\tat Problem.main(tmpz75h18sp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293379,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqct93jz3.scala:84:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqct93jz3.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqct93jz3.scala:79:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqct93jz3.scala:80:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqct93jz3.scala:81:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m    assert(specialFactorial((\u001b[31m1l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.product(n.toInt.toSeq.map(_.toInt).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.product(n.toInt.toSeq.map(_.toInt).toSeq)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.product(n.toInt.toSeq.map(_.toInt).toSeq)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293379,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpj1m4k_vb.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n.toInt.toSeq.map(_.toInt).toSeq)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(n.toInt.toSeq.map(_$2 => _$2.toInt).toSeq).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpj1m4k_vb.scala:25:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n.toInt.toSeq.map(_.toInt).toSeq)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$3 of expanded function:\n\u001b[31m   |\u001b[0m   _$3 => _$3.product(n.toInt.toSeq.map(_$4 => _$4.toInt).toSeq).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpj1m4k_vb.scala:34:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n.toInt.toSeq.map(_.toInt).toSeq)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$5 of expanded function:\n\u001b[31m   |\u001b[0m   _$5 => _$5.product(n.toInt.toSeq.map(_$6 => _$6.toInt).toSeq).\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.product(range(1, n + 1))\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.product(range(1, n + 1))\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.product(range(1, n + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293379,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp9omlxe_t.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(range(\u001b[31m1\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(range(1, n + 1)).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp9omlxe_t.scala:25:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(range(\u001b[31m1\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.product(range(1, n + 1)).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp9omlxe_t.scala:34:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(range(\u001b[31m1\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$3 of expanded function:\n\u001b[31m   |\u001b[0m   _$3 => _$3.product(range(1, n + 1)).\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.product(range(1, n + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp3pua3cf_.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(range(\u001b[31m1\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(range(1, n + 1)).\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293382,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsq_ngmc4.scala:46)\n\tat Problem.main(tmpsq_ngmc4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293385,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpz6rjlfcx.scala:89:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz6rjlfcx.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpz6rjlfcx.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result *= i\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz6rjlfcx.scala:24:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpz6rjlfcx.scala:25:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            result *= i\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz6rjlfcx.scala:34:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpz6rjlfcx.scala:35:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial6(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp372nlewd.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp372nlewd.scala:85:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp372nlewd.scala:78:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m78 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsykhtf2z.scala:20)\n\tat Problem.main(tmpsykhtf2z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfcufhv9t.scala:46)\n\tat Problem.main(tmpfcufhv9t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial6(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp372nlewd.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp372nlewd.scala:85:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp372nlewd.scala:78:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m78 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293383,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpymzfehmt.scala:34)\n\tat Problem.main(tmpymzfehmt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1l\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1l\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1l\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1l\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1l\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1l\n        } else {\n            n * brazilianFactorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial6(n : Long) : Long = {\n        if (n == 0) {\n            1l\n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293384,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfgd38fhq.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfgd38fhq.scala:84:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpfgd38fhq.scala:77:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m77 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n\u001b[33m\u001b[33m-- [E129] Potential Issue Warning: /tmp/tmpfgd38fhq.scala:74:12 ----------------\u001b[0m\u001b[0m\n\u001b[33m74 |\u001b[0m            \u001b[31m1l\u001b[0m\n\u001b[33m\u001b[33m   |\u001b[0m            ^^\u001b[0m\n\u001b[33m   |\u001b[0mA pure expression does nothing in statement position; you may be omitting necessary parentheses\n\u001b[33m   |\u001b[0m\n\u001b[33m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 warnings found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return brazilianFactorial2(n - 1) * n\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return brazilianFactorial3(n - 1) * (n + 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return brazilianFactorial4(n - 1) * (n + 1) * (n + 2)\n    }\n\n    // The\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpb1zajmoj.scala:79:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb1zajmoj.scala:73:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb1zajmoj.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb1zajmoj.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb1zajmoj.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(specialFactorial((\u001b[31m1l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial6(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp372nlewd.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp372nlewd.scala:85:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp372nlewd.scala:78:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m78 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293385,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpoduar_sk.scala:46)\n\tat Problem.main(tmpoduar_sk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial6(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp372nlewd.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp372nlewd.scala:85:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp372nlewd.scala:78:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m78 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsykhtf2z.scala:20)\n\tat Problem.main(tmpsykhtf2z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // eulerian factorial of this integer.\n    def eulerianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * eulerianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // fibonacci factorial of this integer.\n    def fibonacciFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * fibonacciFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // lucas factorial of this integer.\n    def lucasFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * lucasFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // harmonic factorial of this integer.\n    def harmonicFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * harmonicFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5o22wb1z.scala:89:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5o22wb1z.scala:83:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5o22wb1z.scala:84:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5o22wb1z.scala:85:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5o22wb1z.scala:86:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m    assert(specialFactorial((\u001b[31m1l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.product(1 until n)\n    }\n\n    // The sum of the first n natural numbers is defined as:\n    // sum(1 until n) = 1 + 2 + 3 + ... + n\n    // For example:\n    // >>> sum(1 until 10)\n    // 55\n    // The function will receive an integer as input and should return the sum of the\n    // first n natural numbers.\n    def sum(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.sum(1 until n)\n    }\n\n    // The sum of the squares of the first n natural numbers is defined as:\n    // sum_of_squares(1 until n) = 1^2 + 2^2 + 3^2 + ... + n^2\n    // For example:\n    // >>> sum_of_squares(1 until 10)\n    // 385\n    // The function will receive an integer as input and should return the sum of the\n    // squares of the first n natural numbers.\n    def sum_of_squares(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.sum(1 until n) * _.sum(1 until n)\n    }\n\n    // The sum of the natural logarithms of the first n natural numbers is defined as:\n    // sum_of_logs(1 until n) = ln(1) + ln(2) + ln(3) + ... + ln(n)\n    // For example:\n    // >>> sum_of_logs(1 until 10)\n    // 2.302585\n    // The function will receive an integer as input and should return the sum of the\n    // natural logarithms of the first n natural numbers.\n    def sum_of_logs(n : Long) : Double = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293381,
      "stdout": "error while checking \u001b[33mnew \u001b[0m\u001b[35mIllegalArgumentException\u001b[0m(\u001b[31mnull\u001b[0m)\nerror while checking \u001b[33mthrow \u001b[0m\u001b[33mnew \u001b[0m\u001b[35mIllegalArgumentException\u001b[0m(\u001b[31mnull\u001b[0m)\nerror while checking {\n  \u001b[33mthrow \u001b[0m\u001b[33mnew \u001b[0m\u001b[35mIllegalArgumentException\u001b[0m(\u001b[31mnull\u001b[0m)\n}\nerror while checking \u001b[33mif \u001b[0m(n < 0) \n  {\n    \u001b[33mthrow \u001b[0m\u001b[33mnew \u001b[0m\u001b[35mIllegalArgumentException\u001b[0m(\u001b[31mnull\u001b[0m)\n  }\nerror while checking {\n  \u001b[33mif \u001b[0m(n < 0) \n    {\n      \u001b[33mthrow \u001b[0m\u001b[33mnew \u001b[0m\u001b[35mIllegalArgumentException\u001b[0m(\u001b[31mnull\u001b[0m)\n    }\n  n should bedef main (args:\u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m])\n}\nerror while checking \u001b[33mdef\u001b[0m \u001b[36msum_of_logs\u001b[0m(\u001b[36mn\u001b[0m: \u001b[35mLong\u001b[0m): \u001b[35mDouble\u001b[0m = \n  {\n    \u001b[33mif \u001b[0m(n < 0) \n      {\n        \u001b[33mthrow \u001b[0m\u001b[33mnew \u001b[0m\u001b[35mIllegalArgumentException\u001b[0m(\u001b[31mnull\u001b[0m)\n      }\n    n should bedef main (args:\u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m])\n  }\nerror while checking  {\n  \u001b[33mdef\u001b[0m \u001b[36mspecialFactorial\u001b[0m(\u001b[36mn\u001b[0m: \u001b[35mLong\u001b[0m): \u001b[35mLong\u001b[0m = \n    {\n      \u001b[33mif \u001b[0m(n < 0) \n        {\n          \u001b[33mthrow \u001b[0m\u001b[33mnew \u001b[0m\u001b[35mIllegalArgumentException\u001b[0m(\u001b[32m\"n should be a positive integer\"\u001b[0m)\n        }\n      \u001b[33mreturn\u001b[0m _$1 => _$1.product(1 until n)\n    }\n  \u001b[33mdef\u001b[0m \u001b[36msum\u001b[0m(\u001b[36mn\u001b[0m: \u001b[35mLong\u001b[0m): \u001b[35mLong\u001b[0m = \n    {\n      \u001b[33mif \u001b[0m(n < 0) \n        {\n          \u001b[33mthrow \u001b[0m\u001b[33mnew \u001b[0m\u001b[35mIllegalArgumentException\u001b[0m(\u001b[32m\"n should be a positive integer\"\u001b[0m)\n        }\n      \u001b[33mreturn\u001b[0m _$2 => _$2.sum(1 until n)\n    }\n  \u001b[33mdef\u001b[0m \u001b[36msum_of_squares\u001b[0m(\u001b[36mn\u001b[0m: \u001b[35mLong\u001b[0m): \u001b[35mLong\u001b[0m = \n    {\n      \u001b[33mif \u001b[0m(n < 0) \n        {\n          \u001b[33mthrow \u001b[0m\u001b[33mnew \u001b[0m\u001b[35mIllegalArgumentException\u001b[0m(\u001b[32m\"n should be a positive integer\"\u001b[0m)\n        }\n      \u001b[33mreturn\u001b[0m (_$3, _$4) => _$3.sum(1 until n) * _$4.sum(1 until n)\n    }\n  \u001b[33mdef\u001b[0m \u001b[36msum_of_logs\u001b[0m(\u001b[36mn\u001b[0m: \u001b[35mLong\u001b[0m): \u001b[35mDouble\u001b[0m = \n    {\n      \u001b[33mif \u001b[0m(n < 0) \n        {\n          \u001b[33mthrow \u001b[0m\u001b[33mnew \u001b[0m",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp6alyzkof.scala:56:47 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m            \u001b[33mthrow\u001b[0m \u001b[33mnew\u001b[0m \u001b[35mIllegalArgumentException\u001b[0m(\"n should be\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                               unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6alyzkof.scala:58:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6alyzkof.scala:66:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\nexception occurred while parser /tmp/tmp6alyzkof.scala\nexception occurred while compiling /tmp/tmp6alyzkof.scala\nException in thread \"main\" java.lang.AssertionError: assertion failed: position error, parent span does not contain child span\nparent      = \u001b[33mnew \u001b[0m\u001b[35mIllegalArgumentException\u001b[0m(\u001b[31mnull\u001b[0m) # -1,\nparent span = <2057..2098>,\nchild       = \u001b[31mnull\u001b[0m # -1,\nchild span  = [2086..2103..2103]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\tat dotty.tools.dotc.ast",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsykhtf2z.scala:20)\n\tat Problem.main(tmpsykhtf2z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293383,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E019] Syntax Error: /tmp/tmp9x0hxo69.scala:72:27 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mbrazilianFactorial4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Missing return type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9x0hxo69.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9x0hxo69.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9x0hxo69.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9x0hxo69.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9x0hxo69.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(specialFactorial((\u001b[31m1l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n6 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return _.product(n, n - 1, n - 2, n - 3, n - 4, n - 5, n - 6, n - 7, n - 8, n - 9, n - 10, n - 11, n - 12, n - 13, n - 14, n - 15, n - 16, n - 17, n - 18, n - 19, n - 20, n - 21, n - 22, n - 23, n - 24, n - 25, n - 26, n - 27, n - 28, n - 29, n - 30, n - 31, n - 32, n - 33, n - 34, n - 35, n - 36, n - 37, n - 38, n - 39, n - 40, n - 41, n - 42, n - 43, n - 44, n - 45, n - 46, n - 47, n - 48, n - 49, n - 50, n - 51, n - 52, n - 53, n - 54, n - 55, n - 56, n - 57, n - 58, n - 59, n - 60, n - 61, n - 62, n - 63, n - 64, n - 65, n - 66, n - 67, n - 68, n - 69, n - 70, n - 71, n - 72, n - 73, n - 74, n - 75, n - 76, n - 77, n - 78, n - 79, n - 80, n - 81, n - 82, n - 83, n - 84, n - 85, n - 86, n - 87, n - 88, n - 89, n - 90, n - 91, n - 92, n - 93, n - 94, n - 95, n - 96, n - 97, n - 98, n - 99, n - 100, n - 101, n - 102, n - 103, n - 104, n - 105, n - 106, n - 107, n - 108, n - 109, n - 110, n - 111, n - 112, n - 113, n - 114, n - 115, n - 116, n - 117, n - 118, n - 119,\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293384,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdx9ucmxb.scala:17:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpdx9ucmxb.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n, n - \u001b[31m1\u001b[0m, n - \u001b[31m2\u001b[0m, n - \u001b[31m3\u001b[0m, n - \u001b[31m4\u001b[0m, n - \u001b[31m5\u001b[0m, n - \u001b[31m6\u001b[0m, n - \u001b[31m7\u001b[0m, n - \u001b[31m8\u001b[0m, n - \u001b[31m9\u001b[0m, n - \u001b[31m10\u001b[0m, n - \u001b[31m11\u001b[0m, n - \u001b[31m12\u001b[0m, n - \u001b[31m13\u001b[0m, n - \u001b[31m14\u001b[0m, n - \u001b[31m15\u001b[0m, n - \u001b[31m16\u001b[0m, n - \u001b[31m17\u001b[0m, n - \u001b[31m18\u001b[0m, n - \u001b[31m19\u001b[0m, n - \u001b[31m20\u001b[0m, n - \u001b[31m21\u001b[0m, n - \u001b[31m22\u001b[0m, n - \u001b[31m23\u001b[0m, n - \u001b[31m24\u001b[0m, n - \u001b[31m25\u001b[0m, n - \u001b[31m26\u001b[0m, n - \u001b[31m27\u001b[0m, n - \u001b[31m28\u001b[0m, n - \u001b[31m29\u001b[0m, n - \u001b[31m30\u001b[0m, n - \u001b[31m31\u001b[0m, n - \u001b[31m32\u001b[0m, n - \u001b[31m33\u001b[0m, n - \u001b[31m34\u001b[0m, n - \u001b[31m35\u001b[0m, n - \u001b[31m36\u001b[0m, n - \u001b[31m37\u001b[0m, n - \u001b[31m38\u001b[0m, n - \u001b[31m39\u001b[0m, n - \u001b[31m40\u001b[0m, n - \u001b[31m41\u001b[0m, n - \u001b[31m42\u001b[0m, n - \u001b[31m43\u001b[0m, n - \u001b[31m44\u001b[0m, n - \u001b[31m45\u001b[0m, n - \u001b[31m46\u001b[0m, n - \u001b[31m47\u001b[0m, n - \u001b[31m48\u001b[0m, n - \u001b[31m49\u001b[0m, n - \u001b[31m50\u001b[0m, n - \u001b[31m51\u001b[0m, n - \u001b[31m52\u001b[0m, n - \u001b[31m53\u001b[0m, n - \u001b[31m54\u001b[0m, n - \u001b[31m55\u001b[0m, n - \u001b[31m56\u001b[0m, n - \u001b[31m57\u001b[0m, n - \u001b[31m58\u001b[0m, n - \u001b[31m59\u001b[0m, n - \u001b[31m60\u001b[0m, n - \u001b[31m61\u001b[0m, n - \u001b[31m62\u001b[0m, n - \u001b[31m63\u001b[0m, n - \u001b[31m64\u001b[0m, n - \u001b[31m65\u001b[0m, n - \u001b[31m66\u001b[0m, n - \u001b[31m67\u001b[0m, n - \u001b[31m68\u001b[0m, n - \u001b[31m69\u001b[0m, n - \u001b[31m70\u001b[0m, n - \u001b[31m71\u001b[0m, n - \u001b[31m72\u001b[0m, n - \u001b[31m73\u001b[0m, n - \u001b[31m74\u001b[0m, n - \u001b[31m75\u001b[0m, n - \u001b[31m76\u001b[0m, n - \u001b[31m77\u001b[0m, n - \u001b[31m78\u001b[0m, n - \u001b[31m79\u001b[0m, n - \u001b[31m80\u001b[0m, n - \u001b[31m81\u001b[0m, n - \u001b[31m82\u001b[0m, n - \u001b[31m83\u001b[0m, n - \u001b[31m84\u001b[0m, n - \u001b[31m85\u001b[0m, n - \u001b[31m86\u001b[0m, n - \u001b[31m87\u001b[0m, n - \u001b[31m88\u001b[0m, n - \u001b[31m89\u001b[0m, n - \u001b[31m90\u001b[0m, n - \u001b[31m91\u001b[0m, n - \u001b[31m92\u001b[0m, n - \u001b[31m93\u001b[0m, n - \u001b[31m94\u001b[0m, n - \u001b[31m95\u001b[0m, n - \u001b[31m96\u001b[0m, n - \u001b[31m97\u001b[0m, n - \u001b[31m98\u001b[0m, n - \u001b[31m99\u001b[0m, n - \u001b[31m100\u001b[0m, n - \u001b[31m101\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return brazilianFactorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return brazilianFactorial2(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293384,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo5l8src1.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E067] Syntax Error: /tmp/tmpo5l8src1.scala:72:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mbrazilianFactorial4\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mLong\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDeclaration of \u001b[33mmethod\u001b[0m \u001b[35mbrazilianFactorial4\u001b[0m not allowed here: only classes can have declared but undefined members\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo5l8src1.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo5l8src1.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo5l8src1.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo5l8src1.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(specialFactorial((\u001b[31m1l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n6 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293384,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzjvhi6tu.scala:84:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzjvhi6tu.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzjvhi6tu.scala:79:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzjvhi6tu.scala:80:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzjvhi6tu.scala:81:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m    assert(specialFactorial((\u001b[31m1l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293372,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfdg19l5m.scala:22)\n\tat Problem.main(tmpfdg19l5m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1L\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The sum of the first n natural numbers is defined as:\n    // sum(1 to n) = 1 + 2 + ... + n = n(n+1)/2\n    // where n > 0\n    // For example:\n    // >>> sum(1 to 4)\n    // 10\n    // The function will receive an integer as input and should return the sum of the\n    // first n natural numbers.\n    def sum(n : Long) : Long = {\n        if (n == 0) {\n            0L\n        } else {\n            n * (n + 1) / 2\n        }\n    }\n\n    // The sum of the squares of the first n natural numbers is defined as:\n    // sum_of_squares(1 to n) = 1^2 + 2^2 + ... + n^2 = n(n+1)(2n+1)/6\n    // where n > 0\n    // For example:\n    // >>> sum_of_squares(1 to 4)\n    // 30\n    // The function will receive an integer as input and should return the sum of the\n    // squares of the first n natural numbers.\n    def sum_of_squares(n : Long) : Long = {\n        if (n == 0) {\n            0L\n        } else {\n            n * (n + 1) * (2 * n + 1) / 6\n        }\n    }\n\n    // The sum of the natural logs of the first n natural numbers is defined as:\n    // sum_of_logs(1 to n) = ln(1) + ln(2) + ... + ln(n) = ln(n!)\n    // where n > 0\n    // For example:\n    // >>> sum_of_logs(1 to 4)\n    // 2.0\n    // The function will receive an integer as input and should return the sum of the\n    // natural log of the first n natural numbers.\n    def sum_of_logs(n : Long) : Double = {\n        if (n == 0) {\n            0.0\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293388,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfkxvpi8o.scala:72:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfkxvpi8o.scala:71:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Double\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpfkxvpi8o.scala:64:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m64 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n\u001b[33m\u001b[33m-- [E129] Potential Issue Warning: /tmp/tmpfkxvpi8o.scala:62:12 ----------------\u001b[0m\u001b[0m\n\u001b[33m62 |\u001b[0m            \u001b[31m0.0\u001b[0m\n\u001b[33m\u001b[33m   |\u001b[0m            ^^^\u001b[0m\n\u001b[33m   |\u001b[0mA pure expression does nothing in statement position; you may be omitting necessary parentheses\n\u001b[33m   |\u001b[0m\n\u001b[33m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 warnings found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293387,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpl8d4cpra.scala:22)\n\tat Problem.main(tmpl8d4cpra.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293389,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1j9kw2xg.scala:46)\n\tat Problem.main(tmp1j9kw2xg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsykhtf2z.scala:20)\n\tat Problem.main(tmpsykhtf2z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _.product(n, n - 1, n - 2, n - 3, n - 4, n - 5, n - 6, n - 7, n - 8, n - 9, n - 10, n - 11, n - 12, n - 13, n - 14, n - 15, n - 16, n - 17, n - 18, n - 19, n - 20, n - 21, n - 22, n - 23, n - 24, n - 25, n - 26, n - 27, n - 28, n - 29, n - 30, n - 31, n - 32, n - 33, n - 34, n - 35, n - 36, n - 37, n - 38, n - 39, n - 40, n - 41, n - 42, n - 43, n - 44, n - 45, n - 46, n - 47, n - 48, n - 49, n - 50, n - 51, n - 52, n - 53, n - 54, n - 55, n - 56, n - 57, n - 58, n - 59, n - 60, n - 61, n - 62, n - 63, n - 64, n - 65, n - 66, n - 67, n - 68, n - 69, n - 70, n - 71, n - 72, n - 73, n - 74, n - 75, n - 76, n - 77, n - 78, n - 79, n - 80, n - 81, n - 82, n - 83, n - 84, n - 85, n - 86, n - 87, n - 88, n - 89, n - 90, n - 91, n - 92, n - 93, n - 94, n - 95, n - 96, n - 97, n - 98, n - 99, n - 100, n - 101, n - 102, n - 103, n - 104, n - 105, n - 106, n - 107, n - 108, n - 109, n - 110, n - 111, n - 112, n - 113, n - 114, n - 115, n - 116, n - 117, n - 118, n - 119, n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkvj17ol_.scala:17:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpkvj17ol_.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n, n - \u001b[31m1\u001b[0m, n - \u001b[31m2\u001b[0m, n - \u001b[31m3\u001b[0m, n - \u001b[31m4\u001b[0m, n - \u001b[31m5\u001b[0m, n - \u001b[31m6\u001b[0m, n - \u001b[31m7\u001b[0m, n - \u001b[31m8\u001b[0m, n - \u001b[31m9\u001b[0m, n - \u001b[31m10\u001b[0m, n - \u001b[31m11\u001b[0m, n - \u001b[31m12\u001b[0m, n - \u001b[31m13\u001b[0m, n - \u001b[31m14\u001b[0m, n - \u001b[31m15\u001b[0m, n - \u001b[31m16\u001b[0m, n - \u001b[31m17\u001b[0m, n - \u001b[31m18\u001b[0m, n - \u001b[31m19\u001b[0m, n - \u001b[31m20\u001b[0m, n - \u001b[31m21\u001b[0m, n - \u001b[31m22\u001b[0m, n - \u001b[31m23\u001b[0m, n - \u001b[31m24\u001b[0m, n - \u001b[31m25\u001b[0m, n - \u001b[31m26\u001b[0m, n - \u001b[31m27\u001b[0m, n - \u001b[31m28\u001b[0m, n - \u001b[31m29\u001b[0m, n - \u001b[31m30\u001b[0m, n - \u001b[31m31\u001b[0m, n - \u001b[31m32\u001b[0m, n - \u001b[31m33\u001b[0m, n - \u001b[31m34\u001b[0m, n - \u001b[31m35\u001b[0m, n - \u001b[31m36\u001b[0m, n - \u001b[31m37\u001b[0m, n - \u001b[31m38\u001b[0m, n - \u001b[31m39\u001b[0m, n - \u001b[31m40\u001b[0m, n - \u001b[31m41\u001b[0m, n - \u001b[31m42\u001b[0m, n - \u001b[31m43\u001b[0m, n - \u001b[31m44\u001b[0m, n - \u001b[31m45\u001b[0m, n - \u001b[31m46\u001b[0m, n - \u001b[31m47\u001b[0m, n - \u001b[31m48\u001b[0m, n - \u001b[31m49\u001b[0m, n - \u001b[31m50\u001b[0m, n - \u001b[31m51\u001b[0m, n - \u001b[31m52\u001b[0m, n - \u001b[31m53\u001b[0m, n - \u001b[31m54\u001b[0m, n - \u001b[31m55\u001b[0m, n - \u001b[31m56\u001b[0m, n - \u001b[31m57\u001b[0m, n - \u001b[31m58\u001b[0m, n - \u001b[31m59\u001b[0m, n - \u001b[31m60\u001b[0m, n - \u001b[31m61\u001b[0m, n - \u001b[31m62\u001b[0m, n - \u001b[31m63\u001b[0m, n - \u001b[31m64\u001b[0m, n - \u001b[31m65\u001b[0m, n - \u001b[31m66\u001b[0m, n - \u001b[31m67\u001b[0m, n - \u001b[31m68\u001b[0m, n - \u001b[31m69\u001b[0m, n - \u001b[31m70\u001b[0m, n - \u001b[31m71\u001b[0m, n - \u001b[31m72\u001b[0m, n - \u001b[31m73\u001b[0m, n - \u001b[31m74\u001b[0m, n - \u001b[31m75\u001b[0m, n - \u001b[31m76\u001b[0m, n - \u001b[31m77\u001b[0m, n - \u001b[31m78\u001b[0m, n - \u001b[31m79\u001b[0m, n - \u001b[31m80\u001b[0m, n - \u001b[31m81\u001b[0m, n - \u001b[31m82\u001b[0m, n - \u001b[31m83\u001b[0m, n - \u001b[31m84\u001b[0m, n - \u001b[31m85\u001b[0m, n - \u001b[31m86\u001b[0m, n - \u001b[31m87\u001b[0m, n - \u001b[31m88\u001b[0m, n - \u001b[31m89\u001b[0m, n - \u001b[31m90\u001b[0m, n - \u001b[31m91\u001b[0m, n - \u001b[31m92\u001b[0m, n - \u001b[31m93\u001b[0m, n - \u001b[31m94\u001b[0m, n - \u001b[31m95\u001b[0m, n - \u001b[31m96\u001b[0m, n - \u001b[31m97\u001b[0m, n - \u001b[31m98\u001b[0m, n - \u001b[31m99\u001b[0m, n - \u001b[31m100\u001b[0m, n - \u001b[31m101\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.product(n, n - 1, n - 2, n - 3, n - 4, n - 5, n - 6, n - 7, n - 8, n - 9, n - 10, n - 11, n - 12, n - 13, n - 14, n - 15, n - 16, n - 17, n - 18, n - 19, n - 20, n - 21, n - 22, n - 23, n - 24, n - 25, n - 26, n - 27, n - 28, n - 29, n - 30, n - 31, n - 32, n - 33, n - 34, n - 35, n - 36, n - 37, n - 38, n - 39, n - 40, n - 41, n - 42, n - 43, n - 44, n - 45, n - 46, n - 47, n - 48, n - 49, n - 50, n - 51, n - 52, n - 53, n - 54, n - 55, n - 56, n - 57, n - 58, n - 59, n - 60, n - 61, n - 62, n - 63, n - 64, n - 65, n - 66, n - 67, n - 68, n - 69, n - 70, n - 71, n - 72, n - 73, n - 74, n - 75, n - 76, n - 77, n - 78, n - 79, n - 80, n - 81, n - 82, n - 83, n - 84, n - 85, n - 86, n - 87, n - 88, n - 89, n - 90, n - 91, n - 92, n - 93, n - 94, n - 95, n - 96, n - 97, n - 98, n - 99, n - 100, n - 101, n - 102, n - 103, n - 104, n - 105, n - 106, n - 107, n - 108, n - 109, n - 110, n - 111, n - 112, n - 113, n - 114, n - 115, n - 116, n - 117, n - 118, n - 119,\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293385,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp375iavqi.scala:17:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp375iavqi.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n, n - \u001b[31m1\u001b[0m, n - \u001b[31m2\u001b[0m, n - \u001b[31m3\u001b[0m, n - \u001b[31m4\u001b[0m, n - \u001b[31m5\u001b[0m, n - \u001b[31m6\u001b[0m, n - \u001b[31m7\u001b[0m, n - \u001b[31m8\u001b[0m, n - \u001b[31m9\u001b[0m, n - \u001b[31m10\u001b[0m, n - \u001b[31m11\u001b[0m, n - \u001b[31m12\u001b[0m, n - \u001b[31m13\u001b[0m, n - \u001b[31m14\u001b[0m, n - \u001b[31m15\u001b[0m, n - \u001b[31m16\u001b[0m, n - \u001b[31m17\u001b[0m, n - \u001b[31m18\u001b[0m, n - \u001b[31m19\u001b[0m, n - \u001b[31m20\u001b[0m, n - \u001b[31m21\u001b[0m, n - \u001b[31m22\u001b[0m, n - \u001b[31m23\u001b[0m, n - \u001b[31m24\u001b[0m, n - \u001b[31m25\u001b[0m, n - \u001b[31m26\u001b[0m, n - \u001b[31m27\u001b[0m, n - \u001b[31m28\u001b[0m, n - \u001b[31m29\u001b[0m, n - \u001b[31m30\u001b[0m, n - \u001b[31m31\u001b[0m, n - \u001b[31m32\u001b[0m, n - \u001b[31m33\u001b[0m, n - \u001b[31m34\u001b[0m, n - \u001b[31m35\u001b[0m, n - \u001b[31m36\u001b[0m, n - \u001b[31m37\u001b[0m, n - \u001b[31m38\u001b[0m, n - \u001b[31m39\u001b[0m, n - \u001b[31m40\u001b[0m, n - \u001b[31m41\u001b[0m, n - \u001b[31m42\u001b[0m, n - \u001b[31m43\u001b[0m, n - \u001b[31m44\u001b[0m, n - \u001b[31m45\u001b[0m, n - \u001b[31m46\u001b[0m, n - \u001b[31m47\u001b[0m, n - \u001b[31m48\u001b[0m, n - \u001b[31m49\u001b[0m, n - \u001b[31m50\u001b[0m, n - \u001b[31m51\u001b[0m, n - \u001b[31m52\u001b[0m, n - \u001b[31m53\u001b[0m, n - \u001b[31m54\u001b[0m, n - \u001b[31m55\u001b[0m, n - \u001b[31m56\u001b[0m, n - \u001b[31m57\u001b[0m, n - \u001b[31m58\u001b[0m, n - \u001b[31m59\u001b[0m, n - \u001b[31m60\u001b[0m, n - \u001b[31m61\u001b[0m, n - \u001b[31m62\u001b[0m, n - \u001b[31m63\u001b[0m, n - \u001b[31m64\u001b[0m, n - \u001b[31m65\u001b[0m, n - \u001b[31m66\u001b[0m, n - \u001b[31m67\u001b[0m, n - \u001b[31m68\u001b[0m, n - \u001b[31m69\u001b[0m, n - \u001b[31m70\u001b[0m, n - \u001b[31m71\u001b[0m, n - \u001b[31m72\u001b[0m, n - \u001b[31m73\u001b[0m, n - \u001b[31m74\u001b[0m, n - \u001b[31m75\u001b[0m, n - \u001b[31m76\u001b[0m, n - \u001b[31m77\u001b[0m, n - \u001b[31m78\u001b[0m, n - \u001b[31m79\u001b[0m, n - \u001b[31m80\u001b[0m, n - \u001b[31m81\u001b[0m, n - \u001b[31m82\u001b[0m, n - \u001b[31m83\u001b[0m, n - \u001b[31m84\u001b[0m, n - \u001b[31m85\u001b[0m, n - \u001b[31m86\u001b[0m, n - \u001b[31m87\u001b[0m, n - \u001b[31m88\u001b[0m, n - \u001b[31m89\u001b[0m, n - \u001b[31m90\u001b[0m, n - \u001b[31m91\u001b[0m, n - \u001b[31m92\u001b[0m, n - \u001b[31m93\u001b[0m, n - \u001b[31m94\u001b[0m, n - \u001b[31m95\u001b[0m, n - \u001b[31m96\u001b[0m, n - \u001b[31m97\u001b[0m, n - \u001b[31m98\u001b[0m, n - \u001b[31m99\u001b[0m, n - \u001b[31m100\u001b[0m, n - \u001b[31m101\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3atboln_.scala:77:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3atboln_.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3atboln_.scala:85:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp3atboln_.scala:78:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m78 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsykhtf2z.scala:20)\n\tat Problem.main(tmpsykhtf2z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293383,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpymzfehmt.scala:34)\n\tat Problem.main(tmpymzfehmt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293389,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1j9kw2xg.scala:46)\n\tat Problem.main(tmp1j9kw2xg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def _factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _factorial(n - 1) * n\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def _factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _factorial(n - 1) * n\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def _factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _factorial(n - 1) * n\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def _factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _factorial(n - 1) * n\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def _factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293386,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5rv4tviy.scala:67:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m        \u001b[33mif\u001b[0m (n <= \u001b[31m0\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m        Maybe you are missing an else part for the conditional?\n\u001b[31m68 |\u001b[0m            \u001b[33mthrow\u001b[0m \u001b[33mnew\u001b[0m \u001b[35mIllegalArgumentException\u001b[0m(\u001b[31m\"n should be > 0\"\u001b[0m)\n\u001b[31m69 |\u001b[0m        }\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp5rv4tviy.scala:39:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36m_factorial\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mLong\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef _factorial(n: Long): Long in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 30 and\n\u001b[31m   |\u001b[0mdef _factorial(n: Long): Long in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 39\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp5rv4tviy.scala:48:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36m_factorial\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mLong\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef _factorial(n: Long): Long in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 39 and\n\u001b[31m   |\u001b[0mdef _factorial(n: Long): Long in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 48\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor disambiguation.\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmp5rv4tviy.scala:57:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36m_factorial\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) : \u001b[35mLong\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphz5e0e0m.scala:34)\n\tat Problem.main(tmphz5e0e0m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial6(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial6(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial7(n : Long) :\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293385,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp187ilbrp.scala:83:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp187ilbrp.scala:91:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E067] Syntax Error: /tmp/tmp187ilbrp.scala:82:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mfactorial7\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) :\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDeclaration of \u001b[33mmethod\u001b[0m \u001b[35mfactorial7\u001b[0m not allowed here: only classes can have declared but undefined members\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp187ilbrp.scala:85:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp187ilbrp.scala:86:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp187ilbrp.scala:87:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp187ilbrp.scala:88:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m    assert(specialFactorial((\u001b[31m1l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsykhtf2z.scala:20)\n\tat Problem.main(tmpsykhtf2z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293388,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpd9vuvvvt.scala:46)\n\tat Problem.main(tmpd9vuvvvt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz3g7jlhf.scala:30)\n\tat Problem.main(tmpz3g7jlhf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return (n * factorial(n - 1))\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return scala.math.factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return (factorial(n) * factorial(n - 1) * factorial(n - 2) * ... * factorial(1))\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293388,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpgmysg130.scala:34:69 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mreturn\u001b[0m (factorial(n) * factorial(n - \u001b[31m1\u001b[0m) * factorial(n - \u001b[31m2\u001b[0m) * ... * factorial(\u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'.'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgmysg130.scala:25:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mreturn\u001b[0m scala.math.factorial(n)\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m               value factorial is not a member of math\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpgmysg130.scala:34:67 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mreturn\u001b[0m (factorial(n) * factorial(n - \u001b[31m1\u001b[0m) * factorial(n - \u001b[31m2\u001b[0m) * ... * factorial(\u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m*\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mLong\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double): Double\n\u001b[31m   |\u001b[0m (x: Float): Float\n\u001b[31m   |\u001b[0m (x: Long): Long\n\u001b[31m   |\u001b[0m (x: Int): Long\n\u001b[31m   |\u001b[0m (x: Char): Long\n\u001b[31m   |\u001b[0m (x: Short): Long\n\u001b[31m   |\u001b[0m (x: Byte): Long\n\u001b[31m   |\u001b[0mmatch arguments (Null)\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return brazilianFactorial(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return brazilianFactorial2(n) / factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def b\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293387,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E019] Syntax Error: /tmp/tmpcnqbcz4q.scala:72:9 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mb\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m         ^\u001b[0m\n\u001b[31m   |\u001b[0m         Missing return type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcnqbcz4q.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcnqbcz4q.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcnqbcz4q.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcnqbcz4q.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcnqbcz4q.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(specialFactorial((\u001b[31m1l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n6 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // eulerian factorial of this integer.\n    def eulerianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * eulerianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // fibonacci factorial of this integer.\n    def fibonacciFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * fibonacciFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // lucas factorial of this integer.\n    def lucasFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * lucasFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // harmonic factorial of this integer.\n    def harmonicFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * harmonicFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293382,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5o22wb1z.scala:89:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5o22wb1z.scala:83:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5o22wb1z.scala:84:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5o22wb1z.scala:85:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5o22wb1z.scala:86:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m    assert(specialFactorial((\u001b[31m1l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.product(range(1, n + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp01ci1mrd.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(range(\u001b[31m1\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(range(1, n + 1)).\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        return _.product(range(1, n + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293387,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp607sj7e6.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(range(\u001b[31m1\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(range(1, n + 1)).\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1L\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293390,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt_pb46ek.scala:20)\n\tat Problem.main(tmpt_pb46ek.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsykhtf2z.scala:20)\n\tat Problem.main(tmpsykhtf2z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293376,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp049yhdlm.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp049yhdlm.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result *= i\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean result.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _factorial(n)\n    }\n\n    private def _factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _factorial(n - 1) * n\n    }\n\n    // The function will receive an integer as input and should return the\n    // binomial coefficient of this integer.\n    def binomial(n : Long, k : Long) : Long = {\n        if (n < 0 || k < 0 || k > n) {\n            throw new IllegalArgumentException(\"n and k should be >= 0 and <= n\")\n        }\n        return _binomial(n, k)\n    }\n\n    private def _binomial(n : Long, k : Long) : Long = {\n        if (n < 0 || k < 0 || k > n) {\n            throw new IllegalArgumentException(\"n and k should be >= 0 and <= n\")\n        }\n        return _binomial(n - 1, k) + _binomial(n - 1, k - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293391,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: n should be > 0\n\tat Problem$._factorial(tmpizw0kt00.scala:30)\n\tat Problem$._factorial(tmpizw0kt00.scala:32)\n\tat Problem$._factorial(tmpizw0kt00.scala:32)\n\tat Problem$._factorial(tmpizw0kt00.scala:32)\n\tat Problem$.factorial(tmpizw0kt00.scala:25)\n\tat Problem$.specialFactorial(tmpizw0kt00.scala:16)\n\tat Problem$.main(tmpizw0kt00.scala:51)\n\tat Problem.main(tmpizw0kt00.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.product(n, (_.product(n - 1, (_.product(n - 2, (_.product(n - 3, (_.product(n - 4, (_.product(n - 5, (_.product(n - 6, (_.product(n - 7, (_.product(n - 8, (_.product(n - 9, (_.product(n - 10, (_.product(n - 11, (_.product(n - 12, (_.product(n - 13, (_.product(n - 14, (_.product(n - 15, (_.product(n - 16, (_.product(n - 17, (_.product(n - 18, (_.product(n - 19, (_.product(n - 20, (_.product(n - 21, (_.product(n - 22, (_.product(n - 23, (_.product(n - 24, (_.product(n - 25, (_.product(n - 26, (_.product(n - 27, (_.product(n - 28, (_.product(n - 29, (_.product(n - 30, (_.product(n - 31, (_.product(n - 32, (_.product(n - 33, (_.product(n - 34, (_.product(n - 35, (_.product(n - 36, (_.product(n - 37, (_.product(n - 38, (_.product(n - 39, (_.product(n - 40, (_.product(n - 41, (_.product(n - 42, (_.product(n - 43, (_.product(n - 44, (_.product(n - 45, (_.product(n - 46, (_.product(n - 47, (_.product(n - 48, (_.product(n - 49, (_.product(n - 50, (_.product(n - 51, (_.product(n - 52, (_.product(n - 53, (_.product(n - 54, (_.product(n - 55, (_.product(n - 56, (_.product(n - 57, (_.product(n - 58, (_.product(n - 59, (_.product(\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293389,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp3eycvltz.scala:16:1151 -------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n, (_.product(n - \u001b[31m1\u001b[0m, (_.product(n - \u001b[31m2\u001b[0m, (_.product(n - \u001b[31m3\u001b[0m, (_.product(n - \u001b[31m4\u001b[0m, (_.product(n - \u001b[31m5\u001b[0m, (_.product(n - \u001b[31m6\u001b[0m, (_.product(n - \u001b[31m7\u001b[0m, (_.product(n - \u001b[31m8\u001b[0m, (_.product(n - \u001b[31m9\u001b[0m, (_.product(n - \u001b[31m10\u001b[0m, (_.product(n - \u001b[31m11\u001b[0m, (_.product(n - \u001b[31m12\u001b[0m, (_.product(n - \u001b[31m13\u001b[0m, (_.product(n - \u001b[31m14\u001b[0m, (_.product(n - \u001b[31m15\u001b[0m, (_.product(n - \u001b[31m16\u001b[0m, (_.product(n - \u001b[31m17\u001b[0m, (_.product(n - \u001b[31m18\u001b[0m, (_.product(n - \u001b[31m19\u001b[0m, (_.product(n - \u001b[31m20\u001b[0m, (_.product(n - \u001b[31m21\u001b[0m, (_.product(n - \u001b[31m22\u001b[0m, (_.product(n - \u001b[31m23\u001b[0m, (_.product(n - \u001b[31m24\u001b[0m, (_.product(n - \u001b[31m25\u001b[0m, (_.product(n - \u001b[31m26\u001b[0m, (_.product(n - \u001b[31m27\u001b[0m, (_.product(n - \u001b[31m28\u001b[0m, (_.product(n - \u001b[31m29\u001b[0m, (_.product(n - \u001b[31m30\u001b[0m, (_.product(n - \u001b[31m31\u001b[0m, (_.product(n - \u001b[31m32\u001b[0m, (_.product(n - \u001b[31m33\u001b[0m, (_.product(n - \u001b[31m34\u001b[0m, (_.product(n - \u001b[31m35\u001b[0m, (_.product(n - \u001b[31m36\u001b[0m, (_.product(n - \u001b[31m37\u001b[0m, (_.product(n - \u001b[31m38\u001b[0m, (_.product(n - \u001b[31m39\u001b[0m, (_.product(n - \u001b[31m40\u001b[0m, (_.product(n - \u001b[31m41\u001b[0m, (_.product(n - \u001b[31m42\u001b[0m, (_.product(n - \u001b[31m43\u001b[0m, (_.product(n - \u001b[31m44\u001b[0m, (_.product(n - \u001b[31m45\u001b[0m, (_.product(n - \u001b[31m46\u001b[0m, (_.product(n - \u001b[31m47\u001b[0m, (_.product(n - \u001b[31m48\u001b[0m, (_.product(n - \u001b[31m49\u001b[0m, (_.product(n - \u001b[31m50\u001b[0m, (_.product(n - \u001b[31m51\u001b[0m, (_.product(n - \u001b[31m52\u001b[0m, (_.product(n - \u001b[31m53\u001b[0m, (_.product(n - \u001b[31m54\u001b[0m, (_.product(n - \u001b[31m55\u001b[0m, (_.product(n - \u001b[31m56\u001b[0m, (_.product(n - \u001b[31m57\u001b[0m, (_.product(n - \u001b[31m58\u001b[0m, (_.product(n - \u001b[31m59\u001b[0m, (_.product(\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1L\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1L\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1L\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293391,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpucrlcx6c.scala:40)\n\tat Problem.main(tmpucrlcx6c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsykhtf2z.scala:20)\n\tat Problem.main(tmpsykhtf2z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293369,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx6uvvkvc.scala:34)\n\tat Problem.main(tmpx6uvvkvc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return n * factorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def _factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _factorial(n - 1) * n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293391,
      "stdout": "",
      "stderr": "java.lang.IllegalArgumentException: n should be > 0\n\tat Problem$._factorial(tmpj83elmc4.scala:32)\n\tat Problem$._factorial(tmpj83elmc4.scala:34)\n\tat Problem$._factorial(tmpj83elmc4.scala:34)\n\tat Problem$._factorial(tmpj83elmc4.scala:34)\n\tat Problem$.factorial(tmpj83elmc4.scala:25)\n\tat Problem$.specialFactorial(tmpj83elmc4.scala:16)\n\tat Problem$.main(tmpj83elmc4.scala:37)\n\tat Problem.main(tmpj83elmc4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1L\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1L\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1L\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293378,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsl58u_tc.scala:40)\n\tat Problem.main(tmpsl58u_tc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293391,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpv6kepzqv.scala:34)\n\tat Problem.main(tmpv6kepzqv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293365,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprq3rjwif.scala:23)\n\tat Problem.main(tmprq3rjwif.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.product(range(1, n + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293389,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp1ffb1tao.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(range(\u001b[31m1\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(range(1, n + 1)).\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 0 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 0 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 0 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        val result = 1L\n        for (i <- 0 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        val result = 1L\n        for (i <- 0 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        val result = 1L\n        for (i <- 0 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        val result = 1L\n        for (i <- 0 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The function will receive an integer as input and should\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293393,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjkievz9j.scala:89:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjkievz9j.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjkievz9j.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result *= i\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjkievz9j.scala:24:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjkievz9j.scala:25:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            result *= i\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjkievz9j.scala:34:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjkievz9j.scala:35:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphz5e0e0m.scala:34)\n\tat Problem.main(tmphz5e0e0m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial6(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp372nlewd.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp372nlewd.scala:85:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp372nlewd.scala:78:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m78 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        val result = 1L\n        for (i <- 1 until n) {\n            result *= i\n        }\n        return result\n    }\n\n    // The sum of the first n natural numbers is defined as:\n    // sum(1 to n) = 1 + 2 + ... + n = n(n+1)/2\n    // where n > 0\n    // For example:\n    // >>> sum(1 to 5)\n    // 15\n    // The function will receive an integer as input and should return the sum of the\n    // first n natural numbers.\n    def sum(n : Long) : Long = {\n        return n * (n + 1) / 2\n    }\n\n    // The sum of the squares of the first n natural numbers is defined as:\n    // sum_of_squares(1 to n) = 1^2 + 2^2 + ... + n^2 = n(n+1)(2n+1)/6\n    // where n > 0\n    // For example:\n    // >>> sum_of_squares(1 to 5)\n    // 55\n    // The function will receive an integer as input and should return the sum of the\n    // squares of the first n natural numbers.\n    def sum_of_squares(n : Long) : Long = {\n        return n * (n + 1) * (2 * n + 1) / 6\n    }\n\n    // The sum of the natural logs of the first n natural numbers is defined as:\n    // sum_of_logs(1 to n) = ln(1) + ln(2) + ... + ln(n) = ln(n!)\n    // where n > 0\n    // For example:\n    // >>> sum_of_logs(1 to 5)\n    // 2.302585092994045\n    // The function will receive an integer as input and should return the sum of the\n    // natural log of the first n natural numbers.\n    def sum_of_logs(n : Long) : Double = {\n        return Math.log(specialFactorial(n))\n    }\n\n    // The sum of the natural logs of the first n natural numbers is defined as:\n    // sum_of_logs(1 to n) = l\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293392,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpucl2g9a4.scala:66:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpucl2g9a4.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpucl2g9a4.scala:15:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            result *= i\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value *= is not a member of Long - did you mean result.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpucl2g9a4.scala:60:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpucl2g9a4.scala:61:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpucl2g9a4.scala:62:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpucl2g9a4.scala:63:11 ------------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _.product(n.toInt.toSeq.map(_.toInt).toSeq)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293375,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmp0prd1dvo.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n.toInt.toSeq.map(_.toInt).toSeq)\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(n.toInt.toSeq.map(_$2 => _$2.toInt).toSeq).\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _.product(n, _.product(n - 1, _.product(n - 2, _.product(n - 3, _.product(n - 4, _.product(n - 5, _.product(n - 6, _.product(n - 7, _.product(n - 8, _.product(n - 9, _.product(n - 10, _.product(n - 11, _.product(n - 12, _.product(n - 13, _.product(n - 14, _.product(n - 15, _.product(n - 16, _.product(n - 17, _.product(n - 18, _.product(n - 19, _.product(n - 20, _.product(n - 21, _.product(n - 22, _.product(n - 23, _.product(n - 24, _.product(n - 25, _.product(n - 26, _.product(n - 27, _.product(n - 28, _.product(n - 29, _.product(n - 30, _.product(n - 31, _.product(n - 32, _.product(n - 33, _.product(n - 34, _.product(n - 35, _.product(n - 36, _.product(n - 37, _.product(n - 38, _.product(n - 39, _.product(n - 40, _.product(n - 41, _.product(n - 42, _.product(n - 43, _.product(n - 44, _.product(n - 45, _.product(n - 46, _.product(n - 47, _.product(n - 48, _.product(n - 49, _.product(n - 50, _.product(n - 51, _.product(n - 52, _.product(n - 53, _.product(n - 54, _.product(n - 55, _.product(n - 56, _.product(n - 57, _.product(n - 58, _.product(n - 59, _.product(n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293391,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpr7uageil.scala:17:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpr7uageil.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(n, _.product(n - \u001b[31m1\u001b[0m, _.product(n - \u001b[31m2\u001b[0m, _.product(n - \u001b[31m3\u001b[0m, _.product(n - \u001b[31m4\u001b[0m, _.product(n - \u001b[31m5\u001b[0m, _.product(n - \u001b[31m6\u001b[0m, _.product(n - \u001b[31m7\u001b[0m, _.product(n - \u001b[31m8\u001b[0m, _.product(n - \u001b[31m9\u001b[0m, _.product(n - \u001b[31m10\u001b[0m, _.product(n - \u001b[31m11\u001b[0m, _.product(n - \u001b[31m12\u001b[0m, _.product(n - \u001b[31m13\u001b[0m, _.product(n - \u001b[31m14\u001b[0m, _.product(n - \u001b[31m15\u001b[0m, _.product(n - \u001b[31m16\u001b[0m, _.product(n - \u001b[31m17\u001b[0m, _.product(n - \u001b[31m18\u001b[0m, _.product(n - \u001b[31m19\u001b[0m, _.product(n - \u001b[31m20\u001b[0m, _.product(n - \u001b[31m21\u001b[0m, _.product(n - \u001b[31m22\u001b[0m, _.product(n - \u001b[31m23\u001b[0m, _.product(n - \u001b[31m24\u001b[0m, _.product(n - \u001b[31m25\u001b[0m, _.product(n - \u001b[31m26\u001b[0m, _.product(n - \u001b[31m27\u001b[0m, _.product(n - \u001b[31m28\u001b[0m, _.product(n - \u001b[31m29\u001b[0m, _.product(n - \u001b[31m30\u001b[0m, _.product(n - \u001b[31m31\u001b[0m, _.product(n - \u001b[31m32\u001b[0m, _.product(n - \u001b[31m33\u001b[0m, _.product(n - \u001b[31m34\u001b[0m, _.product(n - \u001b[31m35\u001b[0m, _.product(n - \u001b[31m36\u001b[0m, _.product(n - \u001b[31m37\u001b[0m, _.product(n - \u001b[31m38\u001b[0m, _.product(n - \u001b[31m39\u001b[0m, _.product(n - \u001b[31m40\u001b[0m, _.product(n - \u001b[31m41\u001b[0m, _.product(n - \u001b[31m42\u001b[0m, _.product(n - \u001b[31m43\u001b[0m, _.product(n - \u001b[31m44\u001b[0m, _.product(n - \u001b[31m45\u001b[0m, _.product(n - \u001b[31m46\u001b[0m, _.product(n - \u001b[31m47\u001b[0m, _.product(n - \u001b[31m48\u001b[0m, _.product(n - \u001b[31m49\u001b[0m, _.product(n - \u001b[31m50\u001b[0m, _.product(n - \u001b[31m51\u001b[0m, _.product(n - \u001b[31m52\u001b[0m, _.product(n - \u001b[31m53\u001b[0m, _.product(n - \u001b[31m54\u001b[0m, _.product(n - \u001b[31m55\u001b[0m, _.product(n - \u001b[31m56\u001b[0m, _.product(n - \u001b[31m57\u001b[0m, _.product(n - \u001b[31m58\u001b[0m, _.product(n - \u001b[31m59\u001b[0m, _.product(n\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could no",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial6(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial6(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // factorial of this integer.\n    def factorial7(n : Long) :\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293385,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp187ilbrp.scala:83:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp187ilbrp.scala:91:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E067] Syntax Error: /tmp/tmp187ilbrp.scala:82:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mfactorial7\u001b[0m(\u001b[36mn\u001b[0m : \u001b[35mLong\u001b[0m) :\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDeclaration of \u001b[33mmethod\u001b[0m \u001b[35mfactorial7\u001b[0m not allowed here: only classes can have declared but undefined members\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp187ilbrp.scala:85:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp187ilbrp.scala:86:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp187ilbrp.scala:87:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp187ilbrp.scala:88:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m    assert(specialFactorial((\u001b[31m1l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3atboln_.scala:77:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3atboln_.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3atboln_.scala:85:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp3atboln_.scala:78:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m78 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.product(range(1, n + 1))\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        return _.product(range(1, n + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293390,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpeyha7ypz.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(range(\u001b[31m1\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(range(1, n + 1)).\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpeyha7ypz.scala:25:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(range(\u001b[31m1\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m   _$2 => _$2.product(range(1, n + 1)).\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be > 0\")\n        }\n        return (n * factorial(n - 1))\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be > 0\")\n        }\n        return _.product(range(1, n + 1))\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be > 0\")\n        }\n        return factorial(n) * factorial(n - 1) * factorial(n - 2) * ... * factorial(1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293391,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmplk217yet.scala:34:68 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mreturn\u001b[0m factorial(n) * factorial(n - \u001b[31m1\u001b[0m) * factorial(n - \u001b[31m2\u001b[0m) * ... * factorial(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'.'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmplk217yet.scala:25:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(range(\u001b[31m1\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(range(1, n + 1)).\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmplk217yet.scala:34:66 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mreturn\u001b[0m factorial(n) * factorial(n - \u001b[31m1\u001b[0m) * factorial(n - \u001b[31m2\u001b[0m) * ... * factorial(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m*\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mLong\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double): Double\n\u001b[31m   |\u001b[0m (x: Float): Float\n\u001b[31m   |\u001b[0m (x: Long): Long\n\u001b[31m   |\u001b[0m (x: Int): Long\n\u001b[31m   |\u001b[0m (x: Char): Long\n\u001b[31m   |\u001b[0m (x: Short): Long\n\u001b[31m   |\u001b[0m (x: Byte): Long\n\u001b[31m   |\u001b[0mmatch arguments (Null)\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293365,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprq3rjwif.scala:23)\n\tat Problem.main(tmprq3rjwif.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293353,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsykhtf2z.scala:20)\n\tat Problem.main(tmpsykhtf2z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293392,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_6sm_npe.scala:36)\n\tat Problem.main(tmp_6sm_npe.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293384,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzjvhi6tu.scala:84:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzjvhi6tu.scala:78:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m78 |\u001b[0m    assert(specialFactorial((\u001b[31m4l\u001b[0m)) == (\u001b[31m288l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzjvhi6tu.scala:79:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m    assert(specialFactorial((\u001b[31m5l\u001b[0m)) == (\u001b[31m34560l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzjvhi6tu.scala:80:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m    assert(specialFactorial((\u001b[31m7l\u001b[0m)) == (\u001b[31m125411328000l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzjvhi6tu.scala:81:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m    assert(specialFactorial((\u001b[31m1l\u001b[0m)) == (\u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: specialFactorial\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be > 0\")\n        }\n        return _.product(range(1, n + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293391,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpkpcvlez3.scala:16:15 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m _.product(range(\u001b[31m1\u001b[0m, n + \u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m   Missing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m   I could not infer the type of the parameter _$1 of expanded function:\n\u001b[31m   |\u001b[0m   _$1 => _$1.product(range(1, n + 1)).\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return specialFactorial(n) / (n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293393,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3qey0ove.scala:34)\n\tat Problem.main(tmp3qey0ove.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1L\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293383,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpymzfehmt.scala:34)\n\tat Problem.main(tmpymzfehmt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1L\n        } else {\n            return n * specialFactorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293393,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp631alr68.scala:23)\n\tat Problem.main(tmp631alr68.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial6(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp372nlewd.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp372nlewd.scala:85:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp372nlewd.scala:78:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m78 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be >= 0\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293393,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp10h6vjbk.scala:22)\n\tat Problem.main(tmp10h6vjbk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return (n * factorial(n - 1))\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        return _factorial(n)\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def _factorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        } else {\n            return n * _factorial(n - 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293393,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq3vot1t3.scala:41)\n\tat Problem.main(tmpq3vot1t3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n should be greater than 0\")\n        }\n        return (1l << n) * (1l << (n - 1)) * (1l << (n - 2)) * ... * (1l << 0)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293393,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpwh5o5hn8.scala:16:63 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m (\u001b[31m1l\u001b[0m << n) * (\u001b[31m1l\u001b[0m << (n - \u001b[31m1\u001b[0m)) * (\u001b[31m1l\u001b[0m << (n - \u001b[31m2\u001b[0m)) * ... * (\u001b[31m1l\u001b[0m << \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'.'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpwh5o5hn8.scala:16:61 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mreturn\u001b[0m (\u001b[31m1l\u001b[0m << n) * (\u001b[31m1l\u001b[0m << (n - \u001b[31m1\u001b[0m)) * (\u001b[31m1l\u001b[0m << (n - \u001b[31m2\u001b[0m)) * ... * (\u001b[31m1l\u001b[0m << \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m*\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mLong\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double): Double\n\u001b[31m   |\u001b[0m (x: Float): Float\n\u001b[31m   |\u001b[0m (x: Long): Long\n\u001b[31m   |\u001b[0m (x: Int): Long\n\u001b[31m   |\u001b[0m (x: Char): Long\n\u001b[31m   |\u001b[0m (x: Short): Long\n\u001b[31m   |\u001b[0m (x: Byte): Long\n\u001b[31m   |\u001b[0mmatch arguments (Null)\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        val nFactorial = 1L\n        for (i <- 1 until n) {\n            nFactorial *= i\n        }\n        return nFactorial\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293393,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx4ijwqc3.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until n) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (n : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx4ijwqc3.scala:15:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            nFactorial *= i\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          value *= is not a member of Long - did you mean nFactorial.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpptzdmuv1.scala:22)\n\tat Problem.main(tmpptzdmuv1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1\n        }\n        return n * specialFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpptzdmuv1.scala:22)\n\tat Problem.main(tmpptzdmuv1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * specialFactorial(n - 1)\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be a positive integer\")\n        }\n        if (n == 0) {\n            return 1l\n        }\n        return n * brazilianFactorial(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293369,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx6uvvkvc.scala:34)\n\tat Problem.main(tmpx6uvvkvc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * specialFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the factorial\n    // of this integer.\n    def factorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * factorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial2(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial2(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial3(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial3(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial4(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial4(n - 1)\n        }\n    }\n\n    // The function will receive an integer as input and should return the\n    // brazilian factorial of this integer.\n    def brazilianFactorial5(n : Long) : Long = {\n        if (n == 0) {\n            1\n        } else {\n            n * brazilianFactorial5(n - 1\n    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l)) == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l)) == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n",
      "timestamp": 1664293354,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3atboln_.scala:77:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3atboln_.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3atboln_.scala:85:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp3atboln_.scala:78:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m78 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}