name: HumanEval_87_get_row
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a 2 dimensional data, as a nested lists,\n    // which is\
  \ similar to matrix, however, unlike matrices,\n    // each row may contain a different\
  \ number of columns.\n    // Given lst, and integer x, find integers x in the list,\n\
  \    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    // each\
  \ tuple is a coordinate - (row, columns), starting with 0.\n    // Sort coordinates\
  \ initially by rows in ascending order.\n    // Also, sort coordinates of the row\
  \ by columns in descending order.\n    // Examples:\n    // >>> getRow((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l))\n    // (List[Tuple2[Long,\
  \ Long]]((0l, 0l), (1l, 4l), (1l, 0l), (2l, 5l), (2l, 0l)))\n    // >>> getRow((List[List[Long]]()),\
  \ (1l))\n    // (List[Tuple2[Long, Long]]())\n    // >>> getRow((List[List[Long]](List[Long](),\
  \ List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong))), (3l))\n\
  \    // (List[Tuple2[Long, Long]]((2l, 2l)))\n    def getRow(lst : List[List[Long]],\
  \ x : Long) : List[Tuple2[Long, Long]] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(getRow((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l)).equals((List[Tuple2[Long,\
  \ Long]]((0l, 0l), (1l, 4l), (1l, 0l), (2l, 5l), (2l, 0l)))));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))), (2l)).equals((List[Tuple2[Long,\
  \ Long]]((0l, 1l), (1l, 1l), (2l, 1l), (3l, 1l), (4l, 1l), (5l, 1l)))));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 1l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l)).equals((List[Tuple2[Long,\
  \ Long]]((0l, 0l), (1l, 0l), (2l, 1l), (2l, 0l), (3l, 2l), (3l, 0l), (4l, 3l), (4l,\
  \ 0l), (5l, 4l), (5l, 0l), (6l, 5l), (6l, 0l)))));\n    assert(getRow((List[List[Long]]()),\
  \ (1l)).equals((List[Tuple2[Long, Long]]())));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong))),\
  \ (2l)).equals((List[Tuple2[Long, Long]]())));\n    assert(getRow((List[List[Long]](List[Long](),\
  \ List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong))), (3l)).equals((List[Tuple2[Long,\
  \ Long]]((2l, 2l)))));\n    }\n\n}\n"
completions: ["        var coordinates = lst.map(row -> row.map(column -> Tuple2(column,\
    \ x)))\n        coordinates.sort((a, b) -> a._1 - b._1)\n        coordinates.sort((a,\
    \ b) -> a._2 - b._2)\n        return coordinates", "        var coordinates =\
    \ lst.map(row -> row.map(col -> (col, row)))\n        coordinates.sort((a, b)\
    \ -> a._1 - b._1)\n        coordinates.sort((a, b) -> b._2 - a._2)\n        var\
    \ result = List[Tuple2[Long, Long]]()\n        for (var i = 0; i < coordinates.size();\
    \ i++) {\n            if (coordinates.apply(i)._1 == x) {\n                result\
    \ = result.append(coordinates.apply(i))\n            }\n        }\n        return\
    \ result", "        var result = List[Tuple2[Long, Long]]()\n        for (var\
    \ i = 0; i < lst.size(); i++) {\n            var row = lst.apply(i)\n        \
    \    for (var j = 0; j < row.size(); j++) {\n                if (row.apply(j)\
    \ == x) {\n                    result = append(result, Tuple2(i, j))\n       \
    \         }\n            }\n        }\n        return result\n    }\n\n    //\
    \ Given a 2 dimensional data, as a nested lists,\n    // which is similar to matrix,\
    \ however, unlike matrices,\n    // each row may contain a different number of\
    \ columns.\n    // Given lst, and integer x, find integers x in the list,\n  \
    \  // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    // each\
    \ tuple is a coordinate - (row, columns), starting with 0.\n    // Sort coordinates\
    \ initially by rows in ascending order.\n    // Also, sort coordinates of the\
    \ row by columns in descending order.\n    // Examples:\n    // >>> getColumn((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (0l))\n    // (List[Tuple2[Long,\
    \ Long]]((0l, 0l), (1l, 1l), (1l, 2l), (2l, 3l), (2l, 4l), (3l, 5l)))\n    //\
    \ >>> getColumn((List[List[Long]]()), (1l))\n    // (List[Tuple2[Long, Long]]())\n\
    \    // >>> getColumn((List[List[Long]](List[Long](), List[Long](1l.toLong), List[Long](1",
  "        var result = List[Tuple2[Long, Long]]()\n        for (var i = 0; i < lst.length;\
    \ i++) {\n            var row = lst[i]\n            for (var j = 0; j < row.length;\
    \ j++) {\n                if (row[j] == x) {\n                    result = append(result,\
    \ Tuple2(i, j))\n                }\n            }\n        }\n        return result\n\
    \    }\n\n    // Given a 2 dimensional data, as a nested lists,\n    // which\
    \ is similar to matrix, however, unlike matrices,\n    // each row may contain\
    \ a different number of columns.\n    // Given lst, and integer y, find integers\
    \ y in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n\
    \    // Sort coordinates initially by columns in ascending order.\n    // Also,\
    \ sort coordinates of the column by rows in descending order.\n    // Examples:\n\
    \    // >>> getColumn((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong))), (0l))\n    // (List[Tuple2[Long, Long]]((0l,\
    \ 0l), (0l, 1l), (0l, 2l), (0l, 3l), (0l, 4l), (0l, 5l), (0l, 6l)))\n    // >>>\
    \ getColumn((List[List[Long]]()), (0l))\n    // (List[Tuple2[Long, Long]]())\n\
    \    // >>> getColumn((List[List[Long]](List[Long](), List[Long](1l.toLong), List[",
  "        var coordinates = List[Tuple2[Long, Long]]()\n        for (var i = 0; i\
    \ < lst.length; i++) {\n            var row = lst[i]\n            for (var j =\
    \ 0; j < row.length; j++) {\n                coordinates = coordinates.append(Tuple2(i,\
    \ j))\n            }\n        }\n        coordinates.sort((x1, x2) -> x1._1.compareTo(x2._1))\n\
    \        coordinates.sort((x1, x2) -> x1._2.compareTo(x2._2))\n        var result\
    \ = List[Tuple2[Long, Long]]()\n        for (var i = 0; i < coordinates.length;\
    \ i++) {\n            var coordinate = coordinates[i]\n            if (coordinate._1\
    \ == x) {\n                result = result.append(coordinate)\n            }\n\
    \        }\n        return result", "        var result = List[Tuple2[Long, Long]]()\n\
    \        for (var i = 0; i < lst.length; i++) {\n            var row = lst[i]\n\
    \            for (var j = 0; j < row.length; j++) {\n                if (row[j]\
    \ == x) {\n                    result = append(result, Tuple2(i, j))\n       \
    \         }\n            }\n        }\n        return result", "        var result\
    \ = List[Tuple2[Long, Long]]()\n        var row = lst.head\n        var col =\
    \ 0l\n        while (row != null) {\n            var cols = row.head\n       \
    \     while (cols != null) {\n                if (cols.head == x) {\n        \
    \            result = result.append(Tuple2(col, cols.tail.head))\n           \
    \     }\n                cols = cols.tail\n            }\n            row = row.tail\n\
    \            col = col + 1l\n        }\n        return result", "        var coordinates\
    \ = lst.map(row -> row.map(col -> (col, row)))\n        var sortedCoordinates\
    \ = coordinates.sort(Comparator.comparing(tuple -> tuple._1))\n        var sortedRows\
    \ = sortedCoordinates.map(tuple -> tuple._2)\n        var sortedColumns = sortedRows.map(tuple\
    \ -> tuple._1)\n        var sortedCoordinatesByColumns = sortedColumns.sort(Comparator.comparing(tuple\
    \ -> tuple._1).reversed())\n        var coordinatesByColumns = sortedCoordinatesByColumns.map(tuple\
    \ -> tuple._2)\n        var coordinatesByRows = coordinatesByColumns.map(tuple\
    \ -> tuple._1)\n        var coordinatesByRowsSorted = coordinatesByRows.sort(Comparator.comparing(tuple\
    \ -> tuple._1))\n        var coordinatesByRowsSortedByColumns = coordinatesByRowsSorted.map(tuple\
    \ -> tuple._2)\n        var coordinatesByRowsSortedByColumnsSorted = coordinatesByRowsSortedByColumns.sort(Comparator.comparing(tuple\
    \ -> tuple._1).reversed())\n        var coordinatesByRowsSortedByColumnsSortedByColumns\
    \ = coordinatesByRowsSortedByColumnsSorted.map(tuple -> tuple._2)\n        var\
    \ coordinatesByRowsSortedByColumnsSortedByColumnsSorted = coordinatesByRowsSortedByColumnsSortedByColumns.sort(Comparator.comparing(tuple\
    \ -> tuple._1).reversed())\n        var coordinatesByRowsSortedByColumnsSortedByColumnsSortedByColumns\
    \ = coordinatesByRowsSortedByColumnsSortedByColumnsSorted.map(tuple -> tuple._2)\n\
    \        var coordinatesByRowsSortedByColumnsSortedByColumnsSortedByColumnsSorted\
    \ = coordinatesByRowsSortedByColumnsSortedByColumnsSortedByColumns.sort(Comparator.comparing(tuple\
    \ -> tuple._1).reversed())\n        var coordinatesByRowsSortedByColumnsSortedByColumnsSortedByColumnsSortedByColumns\
    \ = coordinatesByRowsSorted", "        var coordinates = lst.map(row -> row.map(column\
    \ -> Tuple2(column, x)))\n        coordinates.sort(Comparator.comparingInt(c ->\
    \ c._1()))\n        coordinates.sort(Comparator.comparingLong(c -> c._2()))\n\
    \        return coordinates", "        var result = List[Tuple2[Long, Long]]()\n\
    \        var row = lst.head\n        var rowSize = row.size\n        var rowIndex\
    \ = 0\n        while (rowIndex < rowSize) {\n            var colIndex = 0\n  \
    \          while (colIndex < rowSize) {\n                if (row.apply(colIndex).equals(x))\
    \ {\n                    result = result.append(Tuple2(rowIndex, colIndex))\n\
    \                }\n                colIndex += 1\n            }\n           \
    \ rowIndex += 1\n        }\n        return result", "        var coordinates =\
    \ lst.map(row -> row.map(col -> (col, row)))\n        var sortedCoordinates =\
    \ coordinates.sort((a, b) -> a._1 - b._1)\n        var sortedRowCoordinates =\
    \ sortedCoordinates.map(coord -> coord._1)\n        var sortedColCoordinates =\
    \ sortedCoordinates.map(coord -> coord._2)\n        var sortedRowCoordinatesAndX\
    \ = sortedRowCoordinates.zip(x).sort((a, b) -> b - a)\n        var sortedColCoordinatesAndX\
    \ = sortedColCoordinates.zip(x).sort((a, b) -> b - a)\n        var sortedRowCoordinatesAndXAndSortedColCoordinates\
    \ = sortedRowCoordinatesAndX.zip(sortedColCoordinates).sort((a, b) -> b - a)\n\
    \        var sortedRowCoordinatesAndXAndSortedColCoordinatesAndSortedRowCoordinates\
    \ = sortedRowCoordinatesAndXAndSortedColCoordinates.zip(sortedRowCoordinates).sort((a,\
    \ b) -> b - a)\n        return sortedRowCoordinatesAndXAndSortedColCoordinatesAndSortedRowCoordinates",
  "        var coordinates = List[Tuple2[Long, Long]]()\n        for (var i = 0; i\
    \ < lst.size(); i++) {\n            var row = lst.apply(i)\n            for (var\
    \ j = 0; j < row.size(); j++) {\n                coordinates = coordinates.append(Tuple2(i,\
    \ j))\n            }\n        }\n        coordinates.sort((x1, x2) -> x1._1.compareTo(x2._1))\n\
    \        coordinates.sort((x1, x2) -> x1._2.compareTo(x2._2.desc()))\n       \
    \ var result = List[Tuple2[Long, Long]]()\n        for (var i = 0; i < coordinates.size();\
    \ i++) {\n            if (coordinates.apply(i)._1 == x) {\n                result\
    \ = result.append(coordinates.apply(i))\n            }\n        }\n        return\
    \ result", "        var coordinates = lst.map(row -> row.map(column -> Tuple2(column,\
    \ x)))\n        coordinates.sort((a, b) -> a._1 - b._1)\n        coordinates.sort((a,\
    \ b) -> b._2 - a._2)\n        return coordinates", "        var result = List[Tuple2[Long,\
    \ Long]]()\n        for (var i = 0; i < lst.length; i++) {\n            var row\
    \ = lst[i]\n            for (var j = 0; j < row.length; j++) {\n             \
    \   if (row[j] == x) {\n                    result = append(result, Tuple2(i,\
    \ j))\n                }\n            }\n        }\n        return result", " \
    \       var coordinates = lst.map(row -> row.map(column -> Tuple2(column, x)))\n\
    \        var sortedCoordinates = coordinates.sort((a, b) -> a._1 < b._1 ? -1 :\
    \ a._1 > b._1 ? 1 : 0)\n        var sortedRows = sortedCoordinates.map(coordinate\
    \ -> coordinate._1)\n        var sortedColumns = sortedCoordinates.map(coordinate\
    \ -> coordinate._2)\n        var sortedRowsColumns = sortedRows.zip(sortedColumns).sort((a,\
    \ b) -> a._1 < b._1 ? -1 : a._1 > b._1 ? 1 : 0)\n        return sortedRowsColumns.map(coordinate\
    \ -> Tuple2(coordinate._1, coordinate._2))", "        var coordinates = lst.map(row\
    \ -> row.map(col -> (col, row)))\n        coordinates.sort((a, b) -> a._1 - b._1)\n\
    \        coordinates.sort((a, b) -> b._2 - a._2)\n        var result = List[Tuple2[Long,\
    \ Long]]()\n        for (var coord : coordinates) {\n            if (coord._1\
    \ == x) {\n                result = result.append(coord)\n            }\n    \
    \    }\n        return result", "        var coordinates = lst.map(row -> row.map(col\
    \ -> Tuple2(col, x)))\n        var sortedCoordinates = coordinates.sort((a, b)\
    \ -> a._1 - b._1)\n        var sortedRows = sortedCoordinates.map(coord -> coord._1)\n\
    \        var sortedColumns = sortedCoordinates.map(coord -> coord._2)\n      \
    \  var sortedRowsColumns = sortedRows.zip(sortedColumns)\n        var sortedRowsColumnsTuples\
    \ = sortedRowsColumns.map(tuple -> tuple._1.map(row -> tuple._2.map(col -> Tuple2(row,\
    \ col))))\n        return sortedRowsColumnsTuples", "        var coordinates =\
    \ lst.map(row -> row.map(column -> Tuple2(column, x)))\n        var sortedCoordinates\
    \ = coordinates.sort(Comparator.comparing(tuple -> tuple._1))\n        var sortedRows\
    \ = sortedCoordinates.map(tuple -> tuple._2)\n        var sortedColumns = sortedRows.map(tuple\
    \ -> tuple._1)\n        var sortedCoordinatesByColumns = sortedColumns.sort(Comparator.comparing(column\
    \ -> column, Comparator.reverseOrder()))\n        return sortedCoordinatesByColumns.map(tuple\
    \ -> tuple)", "        var coordinates = lst.map(row -> row.map(col -> (col, row.indexOf(col))))\n\
    \        var sortedCoordinates = coordinates.sort((a, b) -> a._1 - b._1)\n   \
    \     var sortedRows = sortedCoordinates.map(coord -> coord._1)\n        var sortedCols\
    \ = sortedCoordinates.map(coord -> coord._2)\n        var sortedRowsCols = sortedRows.zip(sortedCols).sort((a,\
    \ b) -> b - a)\n        var sortedCoordinatesByRows = sortedRowsCols.map(coord\
    \ -> coord._1)\n        var sortedCoordinatesByCols = sortedRowsCols.map(coord\
    \ -> coord._2)\n        var sortedCoordinatesByRowsCols = sortedCoordinatesByRows.zip(sortedCoordinatesByCols).sort((a,\
    \ b) -> b - a)\n        var coordinatesByRows = sortedCoordinatesByRowsCols.map(coord\
    \ -> coord._1)\n        var coordinatesByCols = sortedCoordinatesByRowsCols.map(coord\
    \ -> coord._2)\n        var coordinatesByRowsCols = sortedCoordinatesByRowsCols.map(coord\
    \ -> coord._1).zip(coordinatesByCols).sort((a, b) -> b - a)\n        var coordinatesByRowsColsByCols\
    \ = coordinatesByRowsCols.zip(coordinatesByCols).sort((a, b) -> b - a)\n     \
    \   var coordinatesByRowsColsByRows = coordinatesByRowsColsByCols.map(coord ->\
    \ coord._1)\n        var coordinatesByRowsColsByCols = coordinatesByRowsColsByCols.map(coord\
    \ -> coord._2)\n        var coordinatesByRowsColsByRows = coordinatesByRowsColsByCols.zip(coordinatesByRowsColsByCols).sort((a,\
    \ b) -> b - a)\n        var coordinatesByRowsColsByRowsByRows = coordinatesByRowsColsByRows.zip(coordinatesByRowsColsByRows).sort((a,\
    \ b) -> b - a", "        var coordinates = lst.map(row -> row.map(col -> Tuple2(col,\
    \ x)))\n        var sorted = coordinates.sort(Comparator.comparing(c -> c._1()))\n\
    \        var sortedByCol = sorted.map(c -> c._2())\n        var sortedByRow =\
    \ sorted.map(c -> c._1())\n        return sortedByCol.zip(sortedByRow).map(t ->\
    \ t._1().zip(t._2()))", "        var result = List[Tuple2[Long, Long]]()\n   \
    \     var i = 0\n        var j = 0\n        for (i = 0; i < lst.length; i++) {\n\
    \            for (j = 0; j < lst[i].length; j++) {\n                if (lst[i][j]\
    \ == x) {\n                    result = result.append(Tuple2(i, j))\n        \
    \        }\n            }\n        }\n        return result", "        var coordinates\
    \ = lst.map(row -> row.map(col -> (col, row.indexOf(col))))\n        var sortedCoordinates\
    \ = coordinates.sort((a, b) -> a._1 - b._1)\n        var sortedRows = sortedCoordinates.map(coord\
    \ -> coord._1)\n        var sortedColumns = sortedCoordinates.map(coord -> coord._2)\n\
    \        var sortedRowsColumns = sortedRows.zip(sortedColumns)\n        var sortedRowsColumnsByColumns\
    \ = sortedRowsColumns.sort((a, b) -> b - a)\n        var sortedRowsColumnsByRows\
    \ = sortedRowsColumnsByColumns.map(coord -> coord._1)\n        var sortedRowsColumnsByColumnsByRows\
    \ = sortedRowsColumnsByRows.zip(sortedRowsColumnsByColumns)\n        var sortedRowsColumnsByRowsByColumns\
    \ = sortedRowsColumnsByColumnsByRows.sort((a, b) -> b - a)\n        var sortedRowsColumnsByRowsByColumnsByRows\
    \ = sortedRowsColumnsByRowsByColumns.map(coord -> coord._1)\n        var sortedRowsColumnsByRowsByColumnsByRowsByColumns\
    \ = sortedRowsColumnsByRowsByColumnsByRows.zip(sortedRowsColumnsByRowsByColumns)\n\
    \        var sortedRowsColumnsByRowsByColumnsByRowsByColumnsByRows = sortedRowsColumnsByRowsByColumnsByRowsByColumns.sort((a,\
    \ b) -> b - a)\n        var sortedRowsColumnsByRowsByColumnsByRowsByColumnsByRowsByColumns\
    \ = sortedRowsColumnsByRowsByColumnsByRowsByColumnsByRows.zip(sortedRowsColumnsByRowsByColumnsByRowsByColumns)\n\
    \        var sortedRowsColumnsByRowsByColumnsByRowsByColumnsByRowsByColumnsByRows\
    \ = sortedRowsColumnsByRowsByColumnsByRowsByColumnsByRowsByColumns.sort((a", " \
    \       var coordinates = lst.map(row -> row.map(col -> (col, row)))\n       \
    \ var sortedCoordinates = coordinates.sortBy(tuple -> tuple._1)\n        var sortedRows\
    \ = sortedCoordinates.map(tuple -> tuple._2)\n        var sortedColumns = sortedRows.sortBy(tuple\
    \ -> tuple._1)\n        var sortedColumnsAndRows = sortedColumns.map(tuple ->\
    \ tuple._2)\n        var sortedRowsAndColumns = sortedColumnsAndRows.sortBy(tuple\
    \ -> tuple._1)\n        var sortedRowsAndColumnsAndX = sortedRowsAndColumns.map(tuple\
    \ -> tuple._2)\n        var sortedRowsAndColumnsAndXAndY = sortedRowsAndColumnsAndX.sortBy(tuple\
    \ -> tuple._1)\n        var sortedRowsAndColumnsAndXAndYAndZ = sortedRowsAndColumnsAndXAndY.sortBy(tuple\
    \ -> tuple._2)\n        var sortedRowsAndColumnsAndXAndYAndZAndW = sortedRowsAndColumnsAndXAndYAndZ.sortBy(tuple\
    \ -> tuple._1)\n        var sortedRowsAndColumnsAndXAndYAndZAndWAndV = sortedRowsAndColumnsAndXAndYAndZAndW.sortBy(tuple\
    \ -> tuple._2)\n        var sortedRowsAndColumnsAndXAndYAndZAndWAndVAndU = sortedRowsAndColumnsAndXAndYAndZAndWAndV.sortBy(tuple\
    \ -> tuple._1)\n        var sortedRowsAndColumnsAndXAndYAndZAndWAndVAndUAndT =\
    \ sortedRowsAndColumnsAndXAndYAndZAndWAndVAndU.sortBy(tuple -> tuple._2)\n   \
    \     var sortedRowsAndColumnsAndXAndYAndZAndWAndVAndUAndTAndS = sortedRowsAndColumnsAndXAndYAndZAndWAndVAndUAndT.sortBy(tuple\
    \ -> tuple._1)\n        var sortedRowsAndColumnsAndXAndYAndZAndWAndVAndUAndTAndSAndQ\
    \ = sortedRowsAndColumnsAnd", "        var coordinates = lst.map(row -> row.map(col\
    \ -> (col, row)))\n        var sortedCoordinates = coordinates.sort((a, b) ->\
    \ a._1 - b._1)\n        var sortedRows = sortedCoordinates.map(coord -> coord._1)\n\
    \        var sortedColumns = sortedCoordinates.map(coord -> coord._2)\n      \
    \  var sortedRowsColumns = sortedRows.zip(sortedColumns).sort((a, b) -> b - a)\n\
    \        var sortedCoordinatesByRowsColumns = sortedRowsColumns.map(coord -> coord._1)\n\
    \        var sortedCoordinatesByRows = sortedCoordinatesByRowsColumns.zip(sortedRows).sort((a,\
    \ b) -> b - a)\n        var sortedCoordinatesByColumns = sortedCoordinatesByRows.map(coord\
    \ -> coord._2)\n        var sortedCoordinatesByColumnsRows = sortedCoordinatesByColumns.zip(sortedRows).sort((a,\
    \ b) -> b - a)\n        var sortedCoordinatesByRowsColumnsRows = sortedCoordinatesByColumnsRows.map(coord\
    \ -> coord._1)\n        var sortedCoordinatesByRowsColumnsColumns = sortedCoordinatesByRowsColumnsRows.zip(sortedColumns).sort((a,\
    \ b) -> b - a)\n        var sortedCoordinatesByRowsColumnsRowsColumns = sortedCoordinatesByRowsColumnsColumns.map(coord\
    \ -> coord._1)\n        var sortedCoordinatesByRowsColumnsRowsColumnsRows = sortedCoordinatesByRowsColumnsRowsColumns.zip(sortedRows).sort((a,\
    \ b) -> b - a)\n        var sortedCoordinatesByRowsColumnsRowsColumnsColumns =\
    \ sortedCoordinatesByRowsColumnsRowsColumnsRows.zip(sortedColumns).sort((a, b)\
    \ -> b - a)\n        var sortedCoordinatesByRowsColumnsRowsColumnsRowsColumns\
    \ = sortedCoordinatesByRowsColumnsRowsColumnsColumns.map(coord -> coord._", " \
    \       val xs = lst.map(row -> row.map(col -> (col, x)))\n        val sorted\
    \ = xs.sortBy(tuple -> tuple._1)\n        val sortedRows = sorted.map(tuple ->\
    \ tuple._2)\n        val sortedCols = sortedRows.sortBy(tuple -> tuple._1)\n \
    \       val sortedCoords = sortedCols.map(tuple -> tuple._2)\n        return sortedCoords",
  "        var result = List[Tuple2[Long, Long]]()\n        for (var i = 0; i < lst.length;\
    \ i++) {\n            var row = lst[i]\n            for (var j = 0; j < row.length;\
    \ j++) {\n                if (row[j] == x) {\n                    result = append(result,\
    \ Tuple2(i, j))\n                }\n            }\n        }\n        return result",
  "        var coordinates = lst.map(row -> row.map(column -> Tuple2(column, x)))\n\
    \        coordinates.sort((a, b) -> a._1 - b._1)\n        coordinates.sort((a,\
    \ b) -> b._2 - a._2)\n        return coordinates", "        var result = List[Tuple2[Long,\
    \ Long]]()\n        for (var i = 0; i < lst.length; i++) {\n            var row\
    \ = lst[i]\n            for (var j = 0; j < row.length; j++) {\n             \
    \   if (row[j] == x) {\n                    result = append(result, Tuple2(i,\
    \ j))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Given a 2 dimensional data, as a nested lists,\n    // which is\
    \ similar to matrix, however, unlike matrices,\n    // each row may contain a\
    \ different number of columns.\n    // Given lst, and integer x, find integers\
    \ x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n\
    \    // Sort coordinates initially by rows in ascending order.\n    // Also, sort\
    \ coordinates of the row by columns in descending order.\n    // Examples:\n \
    \   // >>> getCol((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong))), (0l))\n    // (List[Tuple2[Long, Long]]((0l,\
    \ 0l), (0l, 1l), (0l, 2l), (0l, 3l), (0l, 4l), (0l, 5l), (0l, 6l)))\n    // >>>\
    \ getCol((List[List[Long]]()), (0l))\n    // (List[Tuple2[Long, Long]]())\n  \
    \  // >>> getCol((List[List[Long]](List[Long](), List[Long](1l.toLong), List[",
  "        var result = List[Tuple2[Long, Long]]()\n        for (var i = 0; i < lst.length;\
    \ i++) {\n            var row = lst[i]\n            for (var j = 0; j < row.length;\
    \ j++) {\n                if (row[j] == x) {\n                    result = append(result,\
    \ Tuple2(i, j))\n                }\n            }\n        }\n        return result",
  "        var coordinates = lst.map(row -> row.map(column -> Tuple2(column, x)))\n\
    \        var sortedCoordinates = coordinates.sort(Comparator.comparing(tuple ->\
    \ tuple._1()))\n        var sortedRows = sortedCoordinates.map(tuple -> tuple._2())\n\
    \        var sortedColumns = sortedRows.map(tuple -> tuple._1())\n        var\
    \ sortedCoordinatesByColumns = sortedColumns.sort(Comparator.comparing(column\
    \ -> column.toLong()))\n        var sortedCoordinatesByRows = sortedCoordinatesByColumns.map(tuple\
    \ -> tuple._2())\n        return sortedCoordinatesByRows", "        var rows =\
    \ lst.map(row -> row.map(col -> (col, row.indexOf(col))))\n        rows.sort((a,\
    \ b) -> a._1 - b._1)\n        rows.sort((a, b) -> b._2 - a._2)\n        var result\
    \ = rows.map(row -> row.map(col -> (col, row.indexOf(col))))\n        result.sort((a,\
    \ b) -> a._1 - b._1)\n        result.sort((a, b) -> b._2 - a._2)\n        return\
    \ result", "        val xs = lst.map(xs => xs.map(xs => xs.map(xs => xs)))\n \
    \       val xs1 = xs.sort(Comparator.comparing(xs1 => xs1._1()))\n        val\
    \ xs2 = xs1.sort(Comparator.comparing(xs2 => xs2._2().sort(Comparator.reverseOrder())))\n\
    \        val xs3 = xs2.map(xs3 => xs3.map(xs3 => xs3))\n        val xs4 = xs3.map(xs4\
    \ => xs4.map(xs4 => xs4))\n        val xs5 = xs4.map(xs5 => xs5.map(xs5 => xs5))\n\
    \        val xs6 = xs5.map(xs6 => xs6.map(xs6 => xs6))\n        val xs7 = xs6.map(xs7\
    \ => xs7.map(xs7 => xs7))\n        val xs8 = xs7.map(xs8 => xs8.map(xs8 => xs8))\n\
    \        val xs9 = xs8.map(xs9 => xs9.map(xs9 => xs9))\n        val xs10 = xs9.map(xs10\
    \ => xs10.map(xs10 => xs10))\n        val xs11 = xs10.map(xs11 => xs11.map(xs11\
    \ => xs11))\n        val xs12 = xs11.map(xs12 => xs12.map(xs12 => xs12))\n   \
    \     val xs13 = xs12.map(xs13 => xs13.map(xs13 => xs13))\n        val xs14 =\
    \ xs13.map(xs14 => xs14.map(xs14 => xs14))\n        val xs15 = xs14.map(xs15 =>\
    \ xs15.map(xs15 => xs15))\n        val xs16 = xs15.map(xs16 => xs16.map(xs16 =>\
    \ xs16))\n        val xs17 = xs16.", "        var result = List[Tuple2[Long, Long]]()\n\
    \        var i = 0\n        while (i < lst.size) {\n            var row = lst[i]\n\
    \            var j = 0\n            while (j < row.size) {\n                var\
    \ coord = (row[j], i)\n                if (coord.y == x) {\n                 \
    \   result = result.append(coord)\n                }\n                j = j +\
    \ 1\n            }\n            i = i + 1\n        }\n        return result",
  "        var coordinates = lst.map(row -> row.map(col -> (col, row)))\n        coordinates.sort((a,\
    \ b) -> a._1 - b._1)\n        coordinates.sort((a, b) -> b._2 - a._2)\n      \
    \  var result = List[Tuple2[Long, Long]]()\n        for (var coord : coordinates)\
    \ {\n            if (coord._1 == x) {\n                result = result.append(coord)\n\
    \            }\n        }\n        return result", "        var coordinates =\
    \ lst.map(row -> row.map(col -> Tuple2(col, row.indexOf(col))))\n        var sortedCoordinates\
    \ = coordinates.sort(Comparator.comparing(tuple -> tuple._1))\n        var sortedRows\
    \ = sortedCoordinates.map(tuple -> tuple._2)\n        var sortedColumns = sortedRows.map(tuple\
    \ -> tuple._1)\n        var sortedCoordinatesByColumns = sortedColumns.sort(Comparator.comparing(tuple\
    \ -> tuple._2))\n        var sortedCoordinatesByRows = sortedCoordinatesByColumns.map(tuple\
    \ -> tuple._1)\n        var sortedCoordinatesByRowsAndColumns = sortedCoordinatesByRows.map(tuple\
    \ -> tuple._1)\n        var sortedCoordinatesByRowsAndColumnsAndRows = sortedCoordinatesByRowsAndColumns.sort(Comparator.comparing(tuple\
    \ -> tuple._2))\n        var sortedCoordinatesByRowsAndColumnsAndRowsAndColumns\
    \ = sortedCoordinatesByRowsAndColumnsAndRows.map(tuple -> tuple._1)\n        var\
    \ sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRows = sortedCoordinatesByRowsAndColumnsAndRowsAndColumns.sort(Comparator.comparing(tuple\
    \ -> tuple._2))\n        var sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumns\
    \ = sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRows.map(tuple -> tuple._1)\n\
    \        var sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumnsAndRows\
    \ = sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumns.sort(Comparator.comparing(tuple\
    \ -> tuple._2))\n        var sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumnsAndRowsAndColumns\
    \ = sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumnsAndRows.map(tuple\
    \ -> tuple", "        var result = List[Tuple2[Long, Long]]()\n        for (var\
    \ i = 0; i < lst.size(); i++) {\n            var row = lst.apply(i)\n        \
    \    for (var j = 0; j < row.size(); j++) {\n                if (row.apply(j)\
    \ == x) {\n                    result = result.append(Tuple2(i, j))\n        \
    \        }\n            }\n        }\n        return result", "        var coordinates\
    \ = lst.map(row -> row.map(col -> (col, row.indexOf(col))))\n        var sortedCoordinates\
    \ = coordinates.sortBy(tuple -> tuple._1)\n        var sortedRows = sortedCoordinates.map(tuple\
    \ -> tuple._2)\n        var sortedColumns = sortedRows.map(tuple -> tuple._1)\n\
    \        var sortedCoordinatesByColumns = sortedColumns.sortBy(tuple -> tuple._1)\n\
    \        var coordinatesByColumns = sortedCoordinatesByColumns.map(tuple -> tuple._2)\n\
    \        var coordinatesByRows = coordinatesByColumns.map(tuple -> tuple._1)\n\
    \        var coordinatesByRowsSorted = coordinatesByRows.sortBy(tuple -> tuple._1)\n\
    \        var coordinatesByRowsSortedByColumns = coordinatesByRowsSorted.map(tuple\
    \ -> tuple._2)\n        var coordinatesByRowsSortedByColumnsSorted = coordinatesByRowsSortedByColumns.sortBy(tuple\
    \ -> tuple._1)\n        var coordinatesByRowsSortedByColumnsSortedByColumns =\
    \ coordinatesByRowsSortedByColumnsSorted.map(tuple -> tuple._2)\n        var coordinatesByRowsSortedByColumnsSortedByColumnsSorted\
    \ = coordinatesByRowsSortedByColumnsSortedByColumns.sortBy(tuple -> tuple._1)\n\
    \        var coordinatesByRowsSortedByColumnsSortedByColumnsSortedByColumns =\
    \ coordinatesByRowsSortedByColumnsSortedByColumnsSorted.map(tuple -> tuple._2)\n\
    \        var coordinatesByRowsSortedByColumnsSortedByColumnsSortedByColumnsSorted\
    \ = coordinatesByRowsSortedByColumnsSortedByColumnsSortedByColumns.sortBy(tuple\
    \ -> tuple._1)\n        var coordinatesByRowsSortedByColumnsSortedByColumnsSortedByColumnsSortedByColumns\
    \ = coordinatesByRowsSortedByColumnsSortedByColumnsSortedByColumnsSorted.map(tuple\
    \ -> tuple._2)\n        var coordinatesByRowsSortedByColumnsSortedByColumn", " \
    \       var result = List[Tuple2[Long, Long]]()\n        var i = 0\n        for\
    \ (var row : List[Long]) {\n            var j = 0\n            for (var coord\
    \ : List[Long]) {\n                if (coord == x) {\n                    result\
    \ = append(result, Tuple2(i, j))\n                }\n                j += 1\n\
    \            }\n            i += 1\n        }\n        return result", "     \
    \   var result = List[Tuple2[Long, Long]]()\n        for (var i = 0; i < lst.length;\
    \ i++) {\n            var row = lst[i]\n            for (var j = 0; j < row.length;\
    \ j++) {\n                if (row[j] == x) {\n                    result = append(result,\
    \ Tuple2(i, j))\n                }\n            }\n        }\n        return result",
  "        var coordinates = lst.map(row -> row.map(col -> (col, row)))\n        var\
    \ sortedCoordinates = coordinates.sort((a, b) -> a._1 - b._1)\n        var sortedRows\
    \ = sortedCoordinates.map(coord -> coord._1)\n        var sortedColumns = sortedCoordinates.map(coord\
    \ -> coord._2)\n        var sortedRowsColumns = sortedRows.zip(sortedColumns).sort((a,\
    \ b) -> b - a)\n        var coordinatesByRows = sortedRowsColumns.map(coord ->\
    \ (coord._1, coord._2))\n        var coordinatesByColumns = sortedRowsColumns.map(coord\
    \ -> (coord._2, coord._1))\n        var coordinatesByRowsColumns = coordinatesByRows.zip(coordinatesByColumns).sort((a,\
    \ b) -> b - a)\n        var coordinatesByRowsColumnsSorted = coordinatesByRowsColumns.map(coord\
    \ -> (coord._1, coord._2))\n        var coordinatesByRowsColumnsSortedSorted =\
    \ coordinatesByRowsColumnsSorted.sort((a, b) -> a - b)\n        var coordinatesByRowsColumnsSortedSortedSorted\
    \ = coordinatesByRowsColumnsSortedSorted.map(coord -> (coord._1, coord._2))\n\
    \        var coordinatesByRowsColumnsSortedSortedSortedSorted = coordinatesByRowsColumnsSortedSortedSorted.sort((a,\
    \ b) -> b - a)\n        var coordinatesByRowsColumnsSortedSortedSortedSortedSorted\
    \ = coordinatesByRowsColumnsSortedSortedSortedSorted.map(coord -> (coord._1, coord._2))\n\
    \        var coordinatesByRowsColumnsSortedSortedSortedSortedSortedSorted = coordinatesByRowsColumnsSortedSortedSortedSortedSorted.sort((a,\
    \ b) -> b - a)\n        var coordinatesByRowsColumnsSortedSortedSortedSortedSortedSortedSorted\
    \ = coordinatesByRowsColumnsSortedSortedSortedSortedSortedSorted.map(coord ->\
    \ (coord._1, coord._2))\n        ", "        var coordinates = lst.map(row ->\
    \ row.map(col -> Tuple2(col, x)))\n        var sortedCoordinates = coordinates.sort(Comparator.comparing(tuple\
    \ -> tuple._1))\n        var sortedRows = sortedCoordinates.map(tuple -> tuple._1)\n\
    \        var sortedColumns = sortedCoordinates.map(tuple -> tuple._2)\n      \
    \  var sortedRowsAndColumns = sortedRows.zip(sortedColumns).toList\n        var\
    \ sortedRowsAndColumnsSorted = sortedRowsAndColumns.sort(Comparator.comparing(tuple\
    \ -> tuple._1))\n        var sortedRowsAndColumnsSortedSorted = sortedRowsAndColumnsSorted.map(tuple\
    \ -> tuple._1)\n        var sortedRowsAndColumnsSortedSortedSorted = sortedRowsAndColumnsSortedSorted.zip(sortedRowsAndColumnsSorted).toList\n\
    \        return sortedRowsAndColumnsSortedSorted", "        var result = List[Tuple2[Long,\
    \ Long]]()\n        for (var i = 0; i < lst.length; i++) {\n            var row\
    \ = lst[i]\n            for (var j = 0; j < row.length; j++) {\n             \
    \   if (row[j] == x) {\n                    result = append(result, Tuple2(i,\
    \ j))\n                }\n            }\n        }\n        return result", " \
    \       var coordinates = lst.map(row -> row.map(col -> (col, row)))\n       \
    \ var sortedCoordinates = coordinates.sort((a, b) -> a._1 - b._1).map(coord ->\
    \ coord._1)\n        var sortedRows = sortedCoordinates.sort((a, b) -> a - b).map(coord\
    \ -> coord._1)\n        var sortedColumns = sortedRows.sort((a, b) -> b - a).map(coord\
    \ -> coord._2)\n        var sortedCoordinatesByColumns = sortedColumns.sort((a,\
    \ b) -> b - a).map(coord -> coord._1)\n        var sortedCoordinatesByRows = sortedRows.sort((a,\
    \ b) -> a - b).map(coord -> coord._1)\n        var coordinatesByRows = sortedCoordinatesByRows.map(coord\
    \ -> (coord, x))\n        var coordinatesByColumns = sortedCoordinatesByColumns.map(coord\
    \ -> (coord, x))\n        var coordinatesByRowsAndColumns = coordinatesByRows.append(coordinatesByColumns)\n\
    \        return coordinatesByRowsAndColumns.toList", "        var coordinates\
    \ = lst.map(row -> row.map(col -> Tuple2(col, x)))\n        coordinates.sort((a,\
    \ b) -> a._1.compareTo(b._1))\n        coordinates.sort((a, b) -> a._2.compareTo(b._2))\n\
    \        return coordinates\n    }\n\n    // Given a 2 dimensional data, as a\
    \ nested lists,\n    // which is similar to matrix, however, unlike matrices,\n\
    \    // each row may contain a different number of columns.\n    // Given lst,\
    \ and integer x, find integers x in the list,\n    // and return list of tuples,\
    \ [(x1, y1), (x2, y2) ...] such that\n    // each tuple is a coordinate - (row,\
    \ columns), starting with 0.\n    // Sort coordinates initially by rows in ascending\
    \ order.\n    // Also, sort coordinates of the row by columns in descending order.\n\
    \    // Examples:\n    // >>> getColumn((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (0l))\n    // (List[Tuple2[Long,\
    \ Long]]((0l, 0l), (0l, 1l), (0l, 2l), (0l, 3l), (0l, 4l), (0l, 5l), (0l, 6l)))\n\
    \    // >>> getColumn((List[List[Long]]()), (0l))\n    // (List[Tuple2[Long, Long]]())\n\
    \    // >>> getColumn((List[List[Long]](List[Long](), List[Long](1l.toLong), List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))), (0l))\n", "        var coordinates = lst.map(row ->\
    \ row.map(col -> (col, row)))\n        coordinates.sort((a, b) -> a._1 - b._1)\n\
    \        coordinates.sort((a, b) -> b._2 - a._2)\n        var result = List[Tuple2[Long,\
    \ Long]]()\n        for (var coord : coordinates) {\n            if (coord._1\
    \ == x) {\n                result = result.append(coord)\n            }\n    \
    \    }\n        return result", "        var coordinates = lst.map(row -> row.map(col\
    \ -> (col, row.indexOf(col))))\n        var sortedCoordinates = coordinates.sort((a,\
    \ b) -> a._1 - b._1)\n        var sortedRows = sortedCoordinates.map(coord ->\
    \ coord._1)\n        var sortedColumns = sortedCoordinates.map(coord -> coord._2)\n\
    \        var sortedRowsColumns = sortedRows.zip(sortedColumns)\n        var sortedRowsColumnsTuples\
    \ = sortedRowsColumns.map(tuple -> tuple._1.map(row -> tuple._2.map(col -> (row,\
    \ col))))\n        var sortedRowsColumnsTuplesTuples = sortedRowsColumnsTuples.map(tuple\
    \ -> tuple._1.map(row -> tuple._2.map(col -> (row, col))))\n        var sortedRowsColumnsTuplesTuplesTuples\
    \ = sortedRowsColumnsTuplesTuples.map(tuple -> tuple._1.map(row -> tuple._2.map(col\
    \ -> (row, col))))\n        var sortedRowsColumnsTuplesTuplesTuplesTuples = sortedRowsColumnsTuplesTuplesTuples.map(tuple\
    \ -> tuple._1.map(row -> tuple._2.map(col -> (row, col))))\n        var sortedRowsColumnsTuplesTuplesTuplesTuplesTuples\
    \ = sortedRowsColumnsTuplesTuplesTuplesTuplesTuples.map(tuple -> tuple._1.map(row\
    \ -> tuple._2.map(col -> (row, col))))\n        var sortedRowsColumnsTuplesTuplesTuplesTuplesTuplesTuples\
    \ = sortedRowsColumnsTuplesTuplesTuplesTuplesTuplesTuplesTuples.map(tuple -> tuple._1.map(row\
    \ -> tuple._2.map(col -> (row, col))))\n        var sortedRowsColumnsTuplesTuplesTuplesTuplesTuplesTuplesTuples\
    \ = sortedRowsColumnsTuplesTuplesTuplesTuplesTuplesTuplesTuplesTuples.map(tuple\
    \ -> tuple._1.map(row -> tuple._2.map(col -> (row, col))))\n        var sortedR",
  "        var result = List[Tuple2[Long, Long]]()\n        var i = 0\n        while\
    \ (i < lst.length) {\n            var row = lst[i]\n            var j = 0\n  \
    \          while (j < row.length) {\n                if (row[j] == x) {\n    \
    \                result = append(result, Tuple2(i, j))\n                }\n  \
    \              j = j + 1\n            }\n            i = i + 1\n        }\n  \
    \      return result", "        var result = List[Tuple2[Long, Long]]()\n    \
    \    for (var i = 0; i < lst.length; i++) {\n            var row = lst[i]\n  \
    \          for (var j = 0; j < row.length; j++) {\n                if (row[j]\
    \ == x) {\n                    result = append(result, Tuple2(i, j))\n       \
    \         }\n            }\n        }\n        return result\n    }\n\n    //\
    \ Given a 2 dimensional data, as a nested lists,\n    // which is similar to matrix,\
    \ however, unlike matrices,\n    // each row may contain a different number of\
    \ columns.\n    // Given lst, and integer x, find integers x in the list,\n  \
    \  // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    // each\
    \ tuple is a coordinate - (row, columns), starting with 0.\n    // Sort coordinates\
    \ initially by rows in ascending order.\n    // Also, sort coordinates of the\
    \ row by columns in descending order.\n    // Examples:\n    // >>> getColumn((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (0l))\n    // (List[Tuple2[Long,\
    \ Long]]((0l, 0l), (0l, 1l), (0l, 2l), (0l, 3l), (0l, 4l), (0l, 5l), (0l, 6l)))\n\
    \    // >>> getColumn((List[List[Long]]()), (0l))\n    // (List[Tuple2[Long, Long]]())\n\
    \    // >>> getColumn((List[List[Long]](List[Long](), List[Long](1l.toLong), List[",
  "        var coordinates = lst.map(row -> row.map(column -> Tuple2(column, x)))\n\
    \        coordinates.sort(Comparator.comparingInt(c -> c._1()))\n        coordinates.sort(Comparator.comparingLong(c\
    \ -> c._2()))\n        return coordinates.map(c -> Tuple2(c._1(), c._2()))", " \
    \       var row = lst.head\n        var cols = lst.tail\n        var res = List[Tuple2[Long,\
    \ Long]]()\n        for (var i = 0; i < row.size(); i++) {\n            var y\
    \ = row.apply(i)\n            var x = cols.apply(i).apply(x)\n            res\
    \ = res.append(Tuple2(x, y))\n        }\n        return res", "        var result\
    \ = List[Tuple2[Long, Long]]()\n        var row = lst.head\n        while (row\
    \ != null) {\n            var cols = row.head\n            while (cols != null)\
    \ {\n                if (cols.head == x) {\n                    result = result.append(Tuple2(row.head,\
    \ cols.head))\n                }\n                cols = cols.tail\n         \
    \   }\n            row = row.tail\n        }\n        return result", "      \
    \  var coordinates = List[Tuple2[Long, Long]]()\n        for (var i = 0; i < lst.length;\
    \ i++) {\n            var row = lst[i]\n            for (var j = 0; j < row.length;\
    \ j++) {\n                coordinates = coordinates.append(Tuple2(i, j))\n   \
    \         }\n        }\n        coordinates.sort((a, b) -> a._1.compareTo(b._1))\n\
    \        coordinates.sort((a, b) -> a._2.compareTo(b._2))\n        var result\
    \ = List[Tuple2[Long, Long]]()\n        for (var i = 0; i < coordinates.length;\
    \ i++) {\n            var coord = coordinates[i]\n            if (coord._1 ==\
    \ x) {\n                result = result.append(coord)\n            }\n       \
    \ }\n        return result", "        var coordinates = lst.map(row -> row.map(col\
    \ -> Tuple2(col, x)))\n        var sortedCoordinates = coordinates.sort(Comparator.comparing(tuple\
    \ -> tuple._1()))\n        var sortedRows = sortedCoordinates.map(tuple -> tuple._2())\n\
    \        var sortedColumns = sortedRows.map(tuple -> tuple._1())\n        var\
    \ sortedCoordinatesByColumns = sortedColumns.sort(Comparator.comparing(tuple ->\
    \ tuple._2()))\n        var sortedCoordinatesByRows = sortedCoordinatesByColumns.map(tuple\
    \ -> tuple._1())\n        var coordinatesByRows = sortedCoordinatesByRows.toList()\n\
    \        var coordinatesByColumns = sortedCoordinatesByColumns.toList()\n    \
    \    var coordinatesByRowsAndColumns = coordinatesByRows.zip(coordinatesByColumns).toList()\n\
    \        return coordinatesByRowsAndColumns", "        var coordinates = lst.map(row\
    \ -> row.map(col -> (col, row)))\n        var sortedCoordinates = coordinates.sort(Comparator.comparing(tuple\
    \ -> tuple._1))\n        var sortedRows = sortedCoordinates.map(tuple -> tuple._2)\n\
    \        var sortedColumns = sortedRows.map(tuple -> tuple._1)\n        var sortedCoordinatesByColumns\
    \ = sortedColumns.sort(Comparator.comparing(tuple -> tuple._1).reversed())\n \
    \       var coordinatesByColumns = sortedCoordinatesByColumns.map(tuple -> tuple._2)\n\
    \        var coordinatesByRows = coordinatesByColumns.map(tuple -> tuple._1)\n\
    \        var coordinatesByRowsAndColumns = coordinatesByRows.map(tuple -> tuple._1).map(tuple\
    \ -> tuple._2)\n        var coordinatesByRowsAndColumnsAndX = coordinatesByRowsAndColumns.map(tuple\
    \ -> tuple._1).map(tuple -> tuple._2).map(tuple -> tuple._1)\n        var coordinatesByRowsAndColumnsAndXAndY\
    \ = coordinatesByRowsAndColumnsAndX.map(tuple -> tuple._1).map(tuple -> tuple._2).map(tuple\
    \ -> tuple._1)\n        var coordinatesByRowsAndColumnsAndXAndYAndZ = coordinatesByRowsAndColumnsAndXAndY.map(tuple\
    \ -> tuple._1).map(tuple -> tuple._2).map(tuple -> tuple._1)\n        var coordinatesByRowsAndColumnsAndXAndYAndZAndW\
    \ = coordinatesByRowsAndColumnsAndXAndYAndZ.map(tuple -> tuple._1).map(tuple ->\
    \ tuple._2).map(tuple -> tuple._1)\n        var coordinatesByRowsAndColumnsAndXAndYAndZAndWAndV\
    \ = coordinatesByRowsAndColumnsAndXAndYAndZAndW.map(tuple -> tuple._1).map(tuple\
    \ -> tuple._2).map(tuple -> tuple._1)\n        var coordinatesByRowsAndColumnsAndXAndYAndZAndWAndVAndU\
    \ = coordinatesByRowsAndColumn", "        var res = List[Tuple2[Long, Long]]()\n\
    \        for (var i = 0; i < lst.length; i++) {\n            var row = lst[i]\n\
    \            for (var j = 0; j < row.length; j++) {\n                if (row[j]\
    \ == x) {\n                    res = res.append(Tuple2(i, j))\n              \
    \  }\n            }\n        }\n        return res", "        var coordinates\
    \ = lst.map(row -> row.map(col -> (col, row)))\n        var sortedCoordinates\
    \ = coordinates.sort((a, b) -> a._1 - b._1).map(coordinate -> coordinate._1)\n\
    \        var sortedRows = sortedCoordinates.sort((a, b) -> a - b)\n        var\
    \ sortedColumns = sortedRows.map(row -> row.map(col -> col)).sort((a, b) -> b\
    \ - a)\n        var coordinatesByColumns = sortedColumns.map(row -> row.map(col\
    \ -> (col, row)))\n        var coordinatesByRows = sortedRows.map(row -> row.map(col\
    \ -> (row, col)))\n        var coordinatesByColumnsAndRows = coordinatesByRows.append(coordinatesByColumns)\n\
    \        var coordinatesByRowsAndColumns = coordinatesByColumnsAndRows.sort((a,\
    \ b) -> a._1 - b._1).map(coordinate -> coordinate._1)\n        var coordinatesByRowsAndColumnsAndRows\
    \ = coordinatesByRowsAndColumns.sort((a, b) -> b._1 - a._1).map(coordinate ->\
    \ coordinate._1)\n        var coordinatesByRowsAndColumnsAndRowsAndColumns = coordinatesByRowsAndColumnsAndRows.sort((a,\
    \ b) -> b._1 - a._1).map(coordinate -> coordinate._1)\n        var coordinatesByRowsAndColumnsAndRowsAndColumnsAndRows\
    \ = coordinatesByRowsAndColumnsAndRowsAndColumns.sort((a, b) -> b._1 - a._1).map(coordinate\
    \ -> coordinate._1)\n        var coordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumns\
    \ = coordinatesByRowsAndColumnsAndRowsAndColumnsAndRows.sort((a, b) -> b._1 -\
    \ a._1).map(coordinate -> coordinate._1)\n        var coordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumnsAndRows\
    \ = coordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumns.sort((a, b)\
    \ -> b._1 - a", "        var coordinates = lst.map(row -> row.map(col -> (col,\
    \ row)))\n        var sortedCoordinates = coordinates.sort((a, b) -> a._1 - b._1)\n\
    \        var sortedRows = sortedCoordinates.map(row -> row.map(col -> (col._1,\
    \ col._2)))\n        var sortedCols = sortedRows.map(row -> row.map(col -> (col._1,\
    \ -col._2)))\n        var sortedCoordinatesByRows = sortedCols.sort((a, b) ->\
    \ a._1 - b._1)\n        var sortedCoordinatesByCols = sortedRows.sort((a, b) ->\
    \ b._1 - a._1)\n        var coordinatesByRows = sortedCoordinatesByRows.map(row\
    \ -> row.map(col -> (col._1, col._2)))\n        var coordinatesByCols = sortedCoordinatesByCols.map(row\
    \ -> row.map(col -> (col._1, -col._2)))\n        var coordinatesByRowsByCols =\
    \ coordinatesByRows.map(row -> row.map(col -> (col._1, -col._2)))\n        var\
    \ coordinatesByColsByRows = coordinatesByCols.map(row -> row.map(col -> (col._1,\
    \ col._2)))\n        var coordinatesByRowsByColsByRows = coordinatesByRowsByCols.map(row\
    \ -> row.map(col -> (col._1, -col._2)))\n        var coordinatesByRowsByColsByCols\
    \ = coordinatesByRowsByCols.map(row -> row.map(col -> (col._1, -col._2)))\n  \
    \      var coordinatesByColsByRowsByRows = coordinatesByColsByRows.map(row ->\
    \ row.map(col -> (col._1, col._2)))\n        var coordinatesByColsByRowsByCols\
    \ = coordinatesByColsByRows.map(row -> row.map(col -> (col._1, col._2)))\n   \
    \     var coordinatesByRowsByColsByRowsByCols = coordinatesByRowsByColsByRows.map(row\
    \ -> row.map", "        var sorted = lst.sort((a, b) -> a.length > b.length ?\
    \ -1 : 1)\n        var result = new ArrayList[Tuple2[Long, Long]]\n        for\
    \ (var i = 0; i < sorted.size(); i++) {\n            var row = sorted.get(i)\n\
    \            for (var j = 0; j < row.size(); j++) {\n                if (row.get(j).equals(x))\
    \ {\n                    result.add(new Tuple2[Long, Long](i, j))\n          \
    \      }\n            }\n        }\n        return result", "        var coordinates\
    \ = lst.map(row -> row.map(col -> (col, row)))\n        coordinates.sort((a, b)\
    \ -> a._1 - b._1)\n        coordinates.sort((a, b) -> b._2 - a._2)\n        var\
    \ result = List[Tuple2[Long, Long]]()\n        for (var coord : coordinates) {\n\
    \            if (coord._1 == x) {\n                result = result.append(coord)\n\
    \            }\n        }\n        return result", "        var rows = lst.map(row\
    \ -> row.map(col -> (col, row.indexOf(col))))\n        rows.sort((a, b) -> a._1\
    \ - b._1)\n        rows.sort((a, b) -> b._2 - a._2)\n        return rows.map(row\
    \ -> (row._1, row._2))", "        var coordinates = lst.map(row -> row.map(col\
    \ -> (col, row)))\n        coordinates.sort((a, b) -> a._1 - b._1)\n        coordinates.sort((a,\
    \ b) -> b._2 - a._2)\n        var result = List[Tuple2[Long, Long]]()\n      \
    \  for (var coord : coordinates) {\n            if (coord._1 == x) {\n       \
    \         result = result.append(coord)\n            }\n        }\n        return\
    \ result", "        var coordinates = lst.map(row -> row.map(col -> (col, row.indexOf(col))))\n\
    \        coordinates.sort((a, b) -> a._1 - b._1)\n        coordinates.sort((a,\
    \ b) -> b._2 - a._2)\n        var result = List[Tuple2[Long, Long]]()\n      \
    \  for (var i = 0; i < coordinates.size(); i++) {\n            if (coordinates.apply(i)._1\
    \ == x) {\n                result = result.append(coordinates.apply(i))\n    \
    \        }\n        }\n        return result", "        var coordinates = lst.map(row\
    \ -> row.map(col -> Tuple2(col, x)))\n        coordinates.sort(Comparator.comparing(tuple\
    \ -> tuple._1()))\n        coordinates.sort(Comparator.comparing(tuple -> tuple._2().toLong()).reversed())\n\
    \        return coordinates", "        var coordinates = lst.map(row -> row.map(col\
    \ -> (col, row)))\n        var sortedCoordinates = sort(coordinates)\n       \
    \ var sortedRows = sortedCoordinates.map(coord -> coord._1)\n        var sortedColumns\
    \ = sortedCoordinates.map(coord -> coord._2)\n        var sortedRowsColumns =\
    \ sortedRows.zip(sortedColumns)\n        var sortedRowsColumnsByColumns = sort(sortedRowsColumns,\
    \ (x1, x2) -> x2 - x1)\n        var sortedRowsColumnsByRows = sort(sortedRowsColumnsByColumns,\
    \ (x1, x2) -> x1 - x2)\n        var sortedRowsColumnsByRowsAndColumns = sortedRowsColumnsByRows.zip(sortedRowsColumnsByColumns)\n\
    \        var sortedRowsColumnsByRowsAndColumnsByColumns = sort(sortedRowsColumnsByRowsAndColumns,\
    \ (x1, x2) -> x2 - x1)\n        var sortedRowsColumnsByRowsAndColumnsByRows =\
    \ sort(sortedRowsColumnsByRowsAndColumnsByColumns, (x1, x2) -> x1 - x2)\n    \
    \    var sortedRowsColumnsByRowsAndColumnsByRowsAndColumns = sortedRowsColumnsByRowsAndColumnsByRows.zip(sortedRowsColumnsByRowsAndColumnsByColumns)\n\
    \        var sortedRowsColumnsByRowsAndColumnsByRowsAndColumnsByColumns = sort(sortedRowsColumnsByRowsAndColumnsByRowsAndColumns,\
    \ (x1, x2) -> x2 - x1)\n        var sortedRowsColumnsByRowsAndColumnsByRowsAndColumnsByRows\
    \ = sort(sortedRowsColumnsByRowsAndColumnsByRowsAndColumnsByColumns, (x1, x2)\
    \ -> x1 - x2)\n        var sortedRowsColumnsByRowsAndColumnsByRowsAndColumnsByRowsAndColumns\
    \ = sortedRowsColumnsByRowsAnd", "        var result = List[Tuple2[Long, Long]]()\n\
    \        var xs = lst.map(xs => xs.map(xs => xs))\n        xs.sort(Comparator.comparing(xs\
    \ => xs.head()))\n        xs.sort(Comparator.comparing(xs => xs.tail().head()))\n\
    \        xs.foreach(xs => {\n            var x = xs.head()\n            var y\
    \ = xs.tail().head()\n            result = result.append(Tuple2(x, y))\n     \
    \   })\n        return result", "        var rows = lst.map(row -> row.map(col\
    \ -> (col, row.indexOf(col))))\n        var sortedRows = rows.sortBy(row -> row._1)\n\
    \        var sortedCols = sortedRows.map(row -> row._2).sortBy(col -> -col)\n\
    \        var result = sortedCols.map(col -> (col, sortedRows.indexOf(col)))\n\
    \        result.sortBy(tuple -> tuple._1)\n        return result", "        var\
    \ result = List[Tuple2[Long, Long]]()\n        var i = 0\n        var j = 0\n\
    \        while (i < lst.length) {\n            var row = lst[i]\n            var\
    \ j = 0\n            while (j < row.length) {\n                if (row[j] == x)\
    \ {\n                    result = append(result, Tuple2(i, j))\n             \
    \   }\n                j += 1\n            }\n            i += 1\n        }\n\
    \        return result", "        var coordinates = lst.map(row -> row.map(col\
    \ -> Tuple2(col, x)))\n        coordinates.sort((a, b) -> a._1 - b._1)\n     \
    \   coordinates.sort((a, b) -> b._2 - a._2)\n        return coordinates", "  \
    \      var coordinates = lst.map(row -> row.map(column -> Tuple2(column, x)))\n\
    \        var sortedCoordinates = coordinates.sort(Comparator.comparing(coordinate\
    \ -> coordinate._1()))\n        var sortedRows = sortedCoordinates.map(coordinate\
    \ -> coordinate._2())\n        var sortedColumns = sortedRows.map(row -> row.sort(Comparator.comparing(column\
    \ -> column)))\n        var sortedCoordinatesByColumns = sortedColumns.map(row\
    \ -> row.map(column -> Tuple2(column, x)))\n        return sortedCoordinatesByColumns",
  "        var res = List[Tuple2[Long, Long]]()\n        var i = 0\n        while\
    \ (i < lst.length && lst[i].length < x) {\n            i = i + 1\n        }\n\
    \        if (i == lst.length) {\n            return res\n        }\n        var\
    \ j = 0\n        while (j < lst[i].length && lst[i][j] < x) {\n            j =\
    \ j + 1\n        }\n        var k = 0\n        while (k < lst.length && i < lst.length)\
    \ {\n            if (lst[i][j] == x) {\n                res = res.append(Tuple2(i,\
    \ j))\n            }\n            i = i + 1\n            j = j - 1\n         \
    \   k = k + 1\n        }\n        return res", "        var result = List[Tuple2[Long,\
    \ Long]]()\n        for (var i = 0; i < lst.length; i++) {\n            var row\
    \ = lst[i]\n            for (var j = 0; j < row.length; j++) {\n             \
    \   if (row[j] == x) {\n                    result = append(result, Tuple2(i,\
    \ j))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Given a 2 dimensional data, as a nested lists,\n    // which is\
    \ similar to matrix, however, unlike matrices,\n    // each row may contain a\
    \ different number of columns.\n    // Given lst, and integer x, find integers\
    \ x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n\
    \    // Sort coordinates initially by rows in ascending order.\n    // Also, sort\
    \ coordinates of the row by columns in descending order.\n    // Examples:\n \
    \   // >>> getColumn((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong))), (0l))\n    // (List[Tuple2[Long, Long]]((0l,\
    \ 0l), (0l, 1l), (0l, 2l), (0l, 3l), (0l, 4l), (0l, 5l), (0l, 6l)))\n    // >>>\
    \ getColumn((List[List[Long]]()), (0l))\n    // (List[Tuple2[Long, Long]]())\n\
    \    // >>> getColumn((List[List[Long]](List[Long](), List[Long](1l.toLong), List[",
  "        var coordinates = lst.map(row -> row.map(col -> (col, row)))\n        coordinates.sort((a,\
    \ b) -> a._1 - b._1)\n        coordinates.sort((a, b) -> b._2 - a._2)\n      \
    \  var result = List[Tuple2[Long, Long]]()\n        for (var coordinate : coordinates)\
    \ {\n            if (coordinate._1 == x) {\n                result = result.append(coordinate)\n\
    \            }\n        }\n        return result", "        var coordinates =\
    \ lst.map(row -> row.map(col -> (col, row.indexOf(col))))\n        var sortedCoordinates\
    \ = coordinates.sort((a, b) -> a._1 - b._1)\n        var sortedRows = sortedCoordinates.map(coord\
    \ -> coord._1)\n        var sortedColumns = sortedCoordinates.map(coord -> coord._2)\n\
    \        var sortedRowsColumns = sortedRows.zip(sortedColumns)\n        var sortedRowsColumnsByColumn\
    \ = sortedRowsColumns.sort((a, b) -> b - a)\n        var sortedRowsColumnsByRow\
    \ = sortedRowsColumnsByColumn.map(coord -> coord._1)\n        var sortedRowsColumnsByColumns\
    \ = sortedRowsColumnsByRow.zip(sortedColumns)\n        var sortedRowsColumnsByRows\
    \ = sortedRowsColumnsByColumns.sort((a, b) -> a - b)\n        var sortedRowsColumnsByRowsColumns\
    \ = sortedRowsColumnsByRows.zip(sortedRowsColumnsByColumn)\n        var sortedRowsColumnsByRowsRows\
    \ = sortedRowsColumnsByRowsColumns.sort((a, b) -> a._1 - b._1)\n        var sortedRowsColumnsByRowsRowsColumns\
    \ = sortedRowsColumnsByRowsRows.zip(sortedRowsColumnsByRows)\n        var sortedRowsColumnsByRowsRowsRows\
    \ = sortedRowsColumnsByRowsRowsColumns.sort((a, b) -> b._1 - a._1)\n        var\
    \ sortedRowsColumnsByRowsRowsRowsColumns = sortedRowsColumnsByRowsRowsRows.zip(sortedRowsColumnsByRows)\n\
    \        var sortedRowsColumnsByRowsRowsRowsRows = sortedRowsColumnsByRowsRowsRowsColumns.sort((a,\
    \ b) -> b._1 - a._1)\n        var sortedRowsColumnsByRowsRowsRowsRowsColumns =\
    \ sortedRowsColumnsByRowsRowsRowsRows.zip(s", "        var coordinates = lst.map(row\
    \ -> row.map(col -> (col, row)))\n        coordinates.sort((a, b) -> a._1 - b._1)\n\
    \        coordinates.sort((a, b) -> b._2 - a._2)\n        var result = List[Tuple2[Long,\
    \ Long]]()\n        for (var i = 0; i < coordinates.size(); i++) {\n         \
    \   if (coordinates.apply(i)._1 == x) {\n                result = result.append(coordinates.apply(i))\n\
    \            }\n        }\n        return result", "        var result = List[Tuple2[Long,\
    \ Long]]()\n        for (var i = 0; i < lst.size(); i++) {\n            var row\
    \ = lst.apply(i)\n            for (var j = 0; j < row.size(); j++) {\n       \
    \         if (row.apply(j).equals(x)) {\n                    result = result.append(Tuple2(i,\
    \ j))\n                }\n            }\n        }\n        return result", " \
    \       var result = List[Tuple2[Long, Long]]()\n        var i = 0\n        for\
    \ (var row : List[Long]) {\n            var j = 0\n            for (var coord\
    \ : List[Long]) {\n                if (coord == x) {\n                    result\
    \ = append(result, Tuple2(i, j))\n                }\n                j += 1\n\
    \            }\n            i += 1\n        }\n        return result", "     \
    \   var coordinates = lst.map(row -> row.map(column -> Tuple2(column, x)))\n \
    \       var sortedCoordinates = coordinates.sort(Comparator.comparing(c -> c._1()))\n\
    \        var sortedRows = sortedCoordinates.map(c -> c._1())\n        var sortedColumns\
    \ = sortedCoordinates.map(c -> c._2())\n        var sortedRowsColumns = sortedRows.zip(sortedColumns)\n\
    \        var sortedRowsColumnsTuples = sortedRowsColumns.map(tuple -> tuple._1()._1()\
    \ + tuple._2()._1())\n        return sortedRowsColumnsTuples", "        var res\
    \ = List[Tuple2[Long, Long]]()\n        for (var i = 0; i < lst.size(); i++) {\n\
    \            var row = lst.apply(i)\n            for (var j = 0; j < row.size();\
    \ j++) {\n                if (row.apply(j) == x) {\n                    res =\
    \ res.append(Tuple2(i, j))\n                }\n            }\n        }\n    \
    \    return res", "        var coordinates = lst.map(row -> row.map(col -> (col,\
    \ row)))\n        var sortedCoordinates = coordinates.sort(Comparator.comparing(tuple\
    \ -> tuple._1))\n        var sortedRows = sortedCoordinates.map(tuple -> tuple._2)\n\
    \        var sortedColumns = sortedRows.map(tuple -> tuple._1)\n        var sortedCoordinatesByColumns\
    \ = sortedColumns.sort(Comparator.comparing(tuple -> tuple._1))\n        var sortedCoordinatesByRows\
    \ = sortedCoordinatesByColumns.map(tuple -> tuple._2)\n        var sortedCoordinatesByRowsAndColumns\
    \ = sortedCoordinatesByRows.map(tuple -> tuple._1)\n        var sortedCoordinatesByRowsAndColumnsAndRows\
    \ = sortedCoordinatesByRowsAndColumns.sort(Comparator.comparing(tuple -> tuple._1))\n\
    \        var sortedCoordinatesByRowsAndColumnsAndRowsAndColumns = sortedCoordinatesByRowsAndColumnsAndRows.map(tuple\
    \ -> tuple._1)\n        var sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRows\
    \ = sortedCoordinatesByRowsAndColumnsAndRowsAndColumns.sort(Comparator.comparing(tuple\
    \ -> tuple._1))\n        var sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumns\
    \ = sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRows.map(tuple -> tuple._1)\n\
    \        var sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumnsAndRows\
    \ = sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumns.sort(Comparator.comparing(tuple\
    \ -> tuple._1))\n        var sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumnsAndRowsAndColumns\
    \ = sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumnsAndRows.map(tuple\
    \ -> tuple._1)\n        var sortedCo", "        var result = List[Tuple2[Long,\
    \ Long]]()\n        for (var i = 0; i < lst.length; i++) {\n            var row\
    \ = lst[i]\n            for (var j = 0; j < row.length; j++) {\n             \
    \   if (row[j] == x) {\n                    result = append(result, Tuple2(i,\
    \ j))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Given a 2 dimensional data, as a nested lists,\n    // which is\
    \ similar to matrix, however, unlike matrices,\n    // each row may contain a\
    \ different number of columns.\n    // Given lst, and integer y, find integers\
    \ y in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n\
    \    // Sort coordinates initially by rows in ascending order.\n    // Also, sort\
    \ coordinates of the row by columns in descending order.\n    // Examples:\n \
    \   // >>> getColumn((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong))), (1l))\n    // (List[Tuple2[Long, Long]]((0l,\
    \ 0l), (1l, 0l), (1l, 1l), (2l, 2l), (2l, 0l)))\n    // >>> getColumn((List[List[Long]]()),\
    \ (1l))\n    // (List[Tuple2[Long, Long]]())\n    // >>> getColumn((List[List[Long]](List[Long](),\
    \ List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong,", "        var res =\
    \ List[Tuple2[Long, Long]]()\n        for (var i = 0; i < lst.size(); i++) {\n\
    \            var row = lst.apply(i)\n            for (var j = 0; j < row.size();\
    \ j++) {\n                if (row.apply(j).equals(x)) {\n                    res\
    \ = res.append(Tuple2(i, j))\n                }\n            }\n        }\n  \
    \      return res", "        var coordinates = lst.map(row -> row.map(col -> (col,\
    \ row)))\n        var sortedCoordinates = coordinates.sort((a, b) -> a._1 - b._1)\n\
    \        var sortedRows = sortedCoordinates.map(coord -> coord._1)\n        var\
    \ sortedColumns = sortedCoordinates.map(coord -> coord._2)\n        var sortedRowsColumns\
    \ = sortedRows.zip(sortedColumns).sort((a, b) -> b - a)\n        var sortedRowsColumnsTuple\
    \ = sortedRowsColumns.map(tuple -> tuple._1)\n        var sortedRowsColumnsTuple2\
    \ = sortedRowsColumnsTuple.map(tuple -> tuple._2)\n        var sortedRowsColumnsTuple3\
    \ = sortedRowsColumnsTuple2.map(tuple -> tuple._1)\n        var sortedRowsColumnsTuple4\
    \ = sortedRowsColumnsTuple3.map(tuple -> tuple._2)\n        var sortedRowsColumnsTuple5\
    \ = sortedRowsColumnsTuple4.map(tuple -> tuple._1)\n        var sortedRowsColumnsTuple6\
    \ = sortedRowsColumnsTuple5.map(tuple -> tuple._2)\n        var sortedRowsColumnsTuple7\
    \ = sortedRowsColumnsTuple6.map(tuple -> tuple._1)\n        var sortedRowsColumnsTuple8\
    \ = sortedRowsColumnsTuple7.map(tuple -> tuple._2)\n        var sortedRowsColumnsTuple9\
    \ = sortedRowsColumnsTuple8.map(tuple -> tuple._1)\n        var sortedRowsColumnsTuple10\
    \ = sortedRowsColumnsTuple9.map(tuple -> tuple._2)\n        var sortedRowsColumnsTuple11\
    \ = sortedRowsColumnsTuple10.map(tuple -> tuple._1)\n        var sortedRowsColumnsTuple12\
    \ = sortedRowsColumnsTuple11.map(tuple -> tuple._2)\n        var sortedRowsColumnsTuple13\
    \ = sortedRowsColumnsTuple12.map(tuple -> tuple._1)\n        var sortedRowsColumnsT",
  "        var result = List[Tuple2[Long, Long]]()\n        for (var i = 0; i < lst.length;\
    \ i++) {\n            var row = lst[i]\n            for (var j = 0; j < row.length;\
    \ j++) {\n                if (row[j] == x) {\n                    result = append(result,\
    \ Tuple2(i, j))\n                }\n            }\n        }\n        return result\n\
    \    }\n\n    // Given a 2 dimensional data, as a nested lists,\n    // which\
    \ is similar to matrix, however, unlike matrices,\n    // each row may contain\
    \ a different number of columns.\n    // Given lst, and integer x, find integers\
    \ x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n\
    \    // Sort coordinates initially by rows in ascending order.\n    // Also, sort\
    \ coordinates of the row by columns in descending order.\n    // Examples:\n \
    \   // >>> getCol((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong))), (1l))\n    // (List[Tuple2[Long, Long]]((0l,\
    \ 0l), (1l, 1l), (1l, 2l), (2l, 3l), (2l, 4l), (3l, 5l)))\n    // >>> getCol((List[List[Long]]()),\
    \ (1l))\n    // (List[Tuple2[Long, Long]]())\n    // >>> getCol((List[List[Long]](List[Long](),\
    \ List[Long](1l.toLong), List[Long](1l.toLong", "        var result = List[Tuple2[Long,\
    \ Long]]()\n        var row = lst.head\n        while (row != null) {\n      \
    \      var cols = row.head\n            while (cols != null) {\n             \
    \   if (cols.head == x) {\n                    result = result.append(Tuple2(row.head,\
    \ cols.head))\n                }\n                cols = cols.tail\n         \
    \   }\n            row = row.tail\n        }\n        return result", "      \
    \  var coordinates = lst.map(row -> row.map(col -> (col, row.indexOf(col))))\n\
    \        var sortedCoordinates = coordinates.sort((a, b) -> a._1 - b._1)\n   \
    \     var sortedRows = sortedCoordinates.map(coord -> coord._1)\n        var sortedColumns\
    \ = sortedCoordinates.map(coord -> coord._2)\n        var sortedRowsColumns =\
    \ sortedRows.zip(sortedColumns).sort((a, b) -> b - a)\n        var sortedCoordinatesByRowsColumns\
    \ = sortedRowsColumns.map(coord -> coord._1)\n        var sortedCoordinatesByRows\
    \ = sortedCoordinatesByRowsColumns.zip(sortedRows).sort((a, b) -> a - b)\n   \
    \     var sortedCoordinatesByColumns = sortedCoordinatesByRows.map(coord -> coord._2)\n\
    \        var sortedCoordinatesByColumnsRows = sortedCoordinatesByColumns.zip(sortedRows).sort((a,\
    \ b) -> a - b)\n        var sortedCoordinatesByColumnsRowsAndX = sortedCoordinatesByColumnsRows.zip(sortedCoordinatesByRows).map((coord,\
    \ coord2) -> (coord._2, coord2._1)).sort((a, b) -> a - b)\n        var sortedCoordinatesByColumnsRowsAndXAndY\
    \ = sortedCoordinatesByColumnsRowsAndX.zip(sortedCoordinatesByRows).map((coord,\
    \ coord2) -> (coord._2, coord2._1)).sort((a, b) -> a - b)\n        var sortedCoordinatesByColumnsRowsAndXAndYAndZ\
    \ = sortedCoordinatesByColumnsRowsAndXAndY.zip(sortedCoordinatesByRows).map((coord,\
    \ coord2) -> (coord._2, coord2._1)).sort((a, b) -> a - b)\n        var sortedCoordinatesByColumnsRowsAndXAndYAndZAndW\
    \ = sortedCoordinatesByColumnsRowsAndXAndYAndZ.zip(sortedCoordinatesByRows).map((",
  "        var coordinates = lst.map(row -> row.map(column -> Tuple2(column, x)))\n\
    \        coordinates.sort((a, b) -> a._1 - b._1)\n        coordinates.sort((a,\
    \ b) -> a._2 - b._2)\n        coordinates.sort((a, b) -> b._1 - a._1)\n      \
    \  coordinates.sort((a, b) -> b._2 - a._2)\n        return coordinates", "   \
    \     var res = List[Tuple2[Long, Long]]()\n        var i = 0\n        while (i\
    \ < lst.length) {\n            var row = lst[i]\n            var j = 0\n     \
    \       while (j < row.length) {\n                if (row[j] == x) {\n       \
    \             res = res.append(Tuple2(i, j))\n                }\n            \
    \    j = j + 1\n            }\n            i = i + 1\n        }\n        return\
    \ res", "        var sortedLst = lst.sort((a, b) -> a.length - b.length).toSeq\n\
    \        var sortedLstByCol = sortedLst.sort((a, b) -> b.length - a.length).toSeq\n\
    \        var result = List[Tuple2[Long, Long]]()\n        for (var i = 0; i <\
    \ sortedLstByCol.length; i++) {\n            var row = sortedLstByCol.apply(i)\n\
    \            for (var j = 0; j < row.length; j++) {\n                if (row[j]\
    \ == x) {\n                    result = append(result, Tuple2(i, j))\n       \
    \         }\n            }\n        }\n        return result\n    }\n\n    //\
    \ You are given a 2 dimensional data, as a nested lists,\n    // which is similar\
    \ to matrix, however, unlike matrices,\n    // each row may contain a different\
    \ number of columns.\n    // Given lst, and integer x, find integers x in the\
    \ list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
    \    // each tuple is a coordinate - (row, columns), starting with 0.\n    //\
    \ Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates\
    \ of the row by columns in descending order.\n    // Examples:\n    // >>> getCol((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (0l))\n    // (List[Tuple2[Long,\
    \ Long]]((0l, 0l), (1l, 4l), (1l, 0l), (2l, 5l), (2l, 0l)))\n    // >>> getCol((List[List",
  "        var result = List[Tuple2[Long, Long]]()\n        for (var i = 0; i < lst.length;\
    \ i++) {\n            var row = lst[i]\n            for (var j = 0; j < row.length;\
    \ j++) {\n                if (row[j] == x) {\n                    result = append(result,\
    \ Tuple2(i, j))\n                }\n            }\n        }\n        return result",
  "        var coordinates = lst.map(row -> row.map(col -> (col, row)))\n        var\
    \ sortedCoordinates = coordinates.sortBy(tuple -> tuple._1)\n        var sortedRows\
    \ = sortedCoordinates.map(tuple -> tuple._2)\n        var sortedColumns = sortedRows.sortBy(tuple\
    \ -> tuple._1)\n        var sortedCoordinatesByColumns = sortedColumns.map(tuple\
    \ -> tuple._2)\n        var coordinatesByColumns = sortedCoordinatesByColumns.map(tuple\
    \ -> tuple._1)\n        var coordinatesByRows = coordinatesByColumns.sortBy(tuple\
    \ -> tuple._1)\n        var coordinatesByRowsSorted = coordinatesByRows.map(tuple\
    \ -> tuple._2)\n        var coordinatesByRowsSortedByColumns = coordinatesByRowsSorted.sortBy(tuple\
    \ -> tuple._1)\n        var coordinatesByRowsSortedByColumnsSorted = coordinatesByRowsSortedByColumns.map(tuple\
    \ -> tuple._2)\n        var coordinatesByRowsSortedByColumnsSortedByRows = coordinatesByRowsSortedByColumnsSorted.sortBy(tuple\
    \ -> tuple._1)\n        var coordinatesByRowsSortedByColumnsSortedByRowsSorted\
    \ = coordinatesByRowsSortedByColumnsSortedByRows.map(tuple -> tuple._2)\n    \
    \    var coordinatesByRowsSortedByColumnsSortedByRowsSortedByColumns = coordinatesByRowsSortedByColumnsSortedByRowsSorted.sortBy(tuple\
    \ -> tuple._1)\n        var coordinatesByRowsSortedByColumnsSortedByRowsSortedByColumnsSorted\
    \ = coordinatesByRowsSortedByColumnsSortedByRowsSortedByColumns.map(tuple -> tuple._2)\n\
    \        var coordinatesByRowsSortedByColumnsSortedByRowsSortedByColumnsSortedByRowsSortedByColumns\
    \ = coordinatesByRowsSortedByColumnsSortedByRowsSortedByColumnsSorted.sortBy(tuple\
    \ -> tuple._1)\n        var coordinatesByRowsSortedByColumnsSortedBy", "     \
    \   var coordinates = lst.map(row -> row.map(col -> (col, row)))\n        coordinates.sort((a,\
    \ b) -> a._1 - b._1)\n        coordinates.sort((a, b) -> b._2 - a._2)\n      \
    \  var result = List[Tuple2[Long, Long]]()\n        for (var coord : coordinates)\
    \ {\n            if (coord._1 == x) {\n                result = result.append(coord)\n\
    \            }\n        }\n        return result", "        var row = lst.head\n\
    \        var cols = row.tail\n        var sortedCols = cols.sort(Comparator.comparing(col\
    \ -> col.head).reversed())\n        var sortedRows = lst.sort(Comparator.comparing(row\
    \ -> row.head).reversed())\n        var result = List.empty()\n        for (var\
    \ i = 0; i < sortedRows.length; i++) {\n            var row = sortedRows[i]\n\
    \            var col = sortedCols[i]\n            var coord = Tuple2(row.head,\
    \ col.head)\n            if (coord.head == x) {\n                result = result.append(coord)\n\
    \            }\n        }\n        return result", "        var row = lst.head\n\
    \        var cols = row.tail\n        var sortedCols = cols.sort(Comparator.comparing(col\
    \ -> col.head).reversed())\n        var sortedRows = lst.sort(Comparator.comparing(row\
    \ -> row.head))\n        var result = List.empty()\n        for (var i = 0; i\
    \ < sortedRows.size(); i++) {\n            var row = sortedRows.apply(i)\n   \
    \         var col = sortedCols.apply(i)\n            for (var j = 0; j < col.size();\
    \ j++) {\n                if (col.apply(j).equals(x)) {\n                    result\
    \ = result.append(Tuple2(row.head, col.apply(j)))\n                }\n       \
    \     }\n        }\n        return result", "        var row : List[Tuple2[Long,\
    \ Long]] = List[Tuple2[Long, Long]]()\n        var i : Long = 0\n        while\
    \ (i < lst.length) {\n            var j : Long = 0\n            while (j < lst[i].length)\
    \ {\n                if (lst[i][j] == x) {\n                    row = append(row,\
    \ Tuple2(i, j))\n                }\n                j = j + 1\n            }\n\
    \            i = i + 1\n        }\n        return row", "        var res = List[Tuple2[Long,\
    \ Long]]()\n        for (var i = 0; i < lst.length; i++) {\n            var row\
    \ = lst[i]\n            for (var j = 0; j < row.length; j++) {\n             \
    \   if (row[j] == x) {\n                    res = res.append(Tuple2(i, j))\n \
    \               }\n            }\n        }\n        return res", "        var\
    \ rows = lst.toSeq().toList()\n        var sortedRows = rows.sort(Comparator.comparing(row\
    \ -> row.head))\n        var sortedRowsByColumns = sortedRows.map(row -> row.tail.sort(Comparator.comparing(column\
    \ -> column.head).reversed()))\n        var sortedRowsByColumnsByRows = sortedRowsByColumns.map(row\
    \ -> row.head.toSeq().toList().sort(Comparator.comparing(column -> column.head).reversed()))\n\
    \        var coordinates = sortedRowsByColumnsByRows.map(row -> row.head.toSeq().toList().head).toSeq().toList()\n\
    \        var coordinatesByRows = coordinates.map(coordinate -> (coordinate.head,\
    \ coordinate.tail.head)).toSeq().toList()\n        var coordinatesByRowsByColumns\
    \ = coordinatesByRows.map(coordinate -> coordinate.tail.head).toSeq().toList()\n\
    \        var coordinatesByRowsByColumnsByRows = coordinatesByRowsByColumns.map(coordinate\
    \ -> coordinate.head).toSeq().toList()\n        var coordinatesByRowsByColumnsByRowsSorted\
    \ = coordinatesByRowsByColumnsByRows.sort(Comparator.comparing(coordinate -> coordinate.head))\n\
    \        var coordinatesByRowsByColumnsByRowsSortedByColumns = coordinatesByRowsByColumnsByRowsSorted.map(coordinate\
    \ -> coordinate.tail.head).toSeq().toList()\n        var coordinatesByRowsByColumnsByRowsSortedByColumnsSorted\
    \ = coordinatesByRowsByColumnsByRowsSortedByColumns.sort(Comparator.comparing(coordinate\
    \ -> coordinate.head))\n        var coordinatesByRowsByColumnsByRowsSortedByColumnsSortedByRows\
    \ = coordinatesByRowsByColumnsByRowsSortedByColumnsSorted.map(coordinate -> coordinate.head).toSeq().toList()\n\
    \        var coordinatesByRowsByColumnsByRowsSortedByColumnsSortedByRowsSorted\
    \ = coordinatesByRowsByColumns", "        var coordinates = lst.map(row -> row.map(col\
    \ -> (col, row.indexOf(col))))\n        coordinates.sort((a, b) -> a._1 < b._1\
    \ ? -1 : a._1 > b._1 ? 1 : 0)\n        coordinates.sort((a, b) -> a._2 < b._2\
    \ ? 1 : a._2 > b._2 ? -1 : 0)\n        coordinates.filter(coord -> coord._1 ==\
    \ x).map(coord -> (coord._1, coord._2)).toList", "        var coordinates = List[Tuple2[Long,\
    \ Long]]()\n        for (var i = 0; i < lst.size(); i++) {\n            var row\
    \ = lst.apply(i)\n            for (var j = 0; j < row.size(); j++) {\n       \
    \         coordinates = coordinates.append(Tuple2(i, j))\n            }\n    \
    \    }\n        coordinates.sort((x1, x2) -> x1._1().compareTo(x2._1()))\n   \
    \     coordinates.sort((x1, x2) -> x1._2().compareTo(x2._2()))\n        var result\
    \ = List[Tuple2[Long, Long]]()\n        for (var i = 0; i < coordinates.size();\
    \ i++) {\n            var coord = coordinates.apply(i)\n            if (coord._1()\
    \ == x) {\n                result = result.append(coord)\n            }\n    \
    \    }\n        return result", "        var coordinates = lst.map(row -> row.map(col\
    \ -> (col, row)))\n        var sortedCoordinates = coordinates.sort(Comparator.comparing(tuple\
    \ -> tuple._1))\n        var sortedRows = sortedCoordinates.map(tuple -> tuple._2)\n\
    \        var sortedColumns = sortedRows.map(tuple -> tuple._1)\n        var sortedCoordinatesByColumns\
    \ = sortedColumns.sort(Comparator.comparing(tuple -> tuple._1).reversed())\n \
    \       var sortedCoordinatesByRows = sortedCoordinatesByColumns.map(tuple ->\
    \ tuple._2)\n        var sortedCoordinatesByRowsAndColumns = sortedCoordinatesByRows.map(tuple\
    \ -> tuple._1)\n        var sortedCoordinatesByRowsAndColumnsAndRows = sortedCoordinatesByRowsAndColumns.sort(Comparator.comparing(tuple\
    \ -> tuple._1).reversed())\n        var sortedCoordinatesByRowsAndColumnsAndRowsAndColumns\
    \ = sortedCoordinatesByRowsAndColumnsAndRows.map(tuple -> tuple._1)\n        var\
    \ sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRows = sortedCoordinatesByRowsAndColumnsAndRowsAndColumns.sort(Comparator.comparing(tuple\
    \ -> tuple._1).reversed())\n        var sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumns\
    \ = sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRows.map(tuple -> tuple._1)\n\
    \        var sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumnsAndRows\
    \ = sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumns.sort(Comparator.comparing(tuple\
    \ -> tuple._1).reversed())\n        var sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumnsAndRowsAndColumns\
    \ = sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumnsAndR",
  "        var result = List[Tuple2[Long, Long]]()\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        var row = 0\n        var col = 0\n       \
    \ var rowLength = 0\n        var colLength = 0\n        var rowLengths = List[Long]()\n\
    \        var colLengths = List[Long]()\n        var rowLengthsLength = 0\n   \
    \     var colLengthsLength = 0\n        var rowLengthsLengths = List[Long]()\n\
    \        var colLengthsLengths = List[Long]()\n        var rowLengthsLengthsLength\
    \ = 0\n        var colLengthsLengthsLength = 0\n        var rowLengthsLengthsLengths\
    \ = List[Long]()\n        var colLengthsLengthsLengths = List[Long]()\n      \
    \  var rowLengthsLengthsLengthsLength = 0\n        var colLengthsLengthsLengthsLength\
    \ = 0\n        var rowLengthsLengthsLengthsLengths = List[Long]()\n        var\
    \ colLengthsLengthsLengthsLengths = List[Long]()\n        var rowLengthsLengthsLengthsLengthsLength\
    \ = 0\n        var colLengthsLengthsLengthsLengthsLength = 0\n        var rowLengthsLengthsLengthsLengthsLengths\
    \ = List[Long]()\n        var colLengthsLengthsLengthsLengthsLengths = List[Long]()\n\
    \        var rowLengthsLengthsLengthsLengthsLengthsLength = 0\n        var colLengthsLengthsLengthsLengthsLengthsLength\
    \ = 0\n        var rowLengthsLengthsLengthsLengthsLengthsLengths = List[Long]()\n\
    \        var colLengthsLengthsLengthsLengthsLengthsLengths = List[Long]()\n  \
    \      var rowLengthsLengthsLengthsLengthsLengthsLengthsLength = 0\n        var\
    \ colLengthsLengthsLengthsLengthsLengthsLengthsLength = 0\n        var rowLengthsLengthsLengthsLengthsLengthsLengthsLengths\
    \ = List[Long]()\n        var colLengthsLengthsLengthsLengthsLengthsLengthsLengths\
    \ = List[Long]()\n        var rowLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength\
    \ = 0\n        var colLengthsLengthsLengthsLengths", "        var coordinates\
    \ = lst.map(row -> row.map(col -> (col, row.indexOf(col))))\n        var sortedCoordinates\
    \ = coordinates.sort((a, b) -> a._1 < b._1 ? -1 : a._1 > b._1 ? 1 : 0)\n     \
    \   var sortedRows = sortedCoordinates.map(coord -> coord._1)\n        var sortedColumns\
    \ = sortedCoordinates.map(coord -> coord._2)\n        var sortedRowsColumns =\
    \ sortedRows.zip(sortedColumns)\n        var sortedRowsColumnsSorted = sortedRowsColumns.sort((a,\
    \ b) -> a._1 > b._1 ? -1 : a._1 < b._1 ? 1 : 0)\n        var sortedRowsColumnsSortedTuple\
    \ = sortedRowsColumnsSorted.map(coord -> (coord._1, coord._2))\n        var sortedRowsColumnsSortedTupleSorted\
    \ = sortedRowsColumnsSortedTuple.sort((a, b) -> a._1 > b._1 ? -1 : a._1 < b._1\
    \ ? 1 : 0)\n        return sortedRowsColumnsSortedTupleSorted.map(coord -> (coord._1,\
    \ coord._2))", "        var rows = lst.map(row -> row.map(col -> (col, row.indexOf(col))))\n\
    \        rows.sort((a, b) -> a._1 - b._1)\n        rows.sort((a, b) -> b._2 -\
    \ a._2)\n        var result = rows.map(row -> row.map(col -> (col, row.indexOf(col))))\n\
    \        result.sort((a, b) -> a._1 - b._1)\n        result.sort((a, b) -> b._2\
    \ - a._2)\n        return result", "        var result = List[Tuple2[Long, Long]]()\n\
    \        for (var i = 0; i < lst.length; i++) {\n            var row = lst[i]\n\
    \            for (var j = 0; j < row.length; j++) {\n                if (row[j]\
    \ == x) {\n                    result = append(result, Tuple2(i, j))\n       \
    \         }\n            }\n        }\n        return result\n    }\n\n    //\
    \ Given a 2 dimensional data, as a nested lists,\n    // which is similar to matrix,\
    \ however, unlike matrices,\n    // each row may contain a different number of\
    \ columns.\n    // Given lst, and integer y, find integers y in the list,\n  \
    \  // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    // each\
    \ tuple is a coordinate - (row, columns), starting with 0.\n    // Sort coordinates\
    \ initially by columns in ascending order.\n    // Also, sort coordinates of the\
    \ column by rows in descending order.\n    // Examples:\n    // >>> getColumn((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l))\n    // (List[Tuple2[Long,\
    \ Long]]((0l, 0l), (1l, 1l), (1l, 2l), (2l, 3l), (2l, 4l), (3l, 5l), (3l, 6l)))\n\
    \    // >>> getColumn((List[List[Long]]()), (1l))\n    // (List[Tuple2[Long, Long]]())\n\
    \    // >>> getColumn((List[List[Long]](List[Long](), List[Long](1l.toLong), List[",
  "        var coordinates = lst.map(row -> row.map(column -> Tuple2(column, x)))\n\
    \        var sorted = coordinates.sortBy(tuple -> tuple._1)\n        var sortedByColumn\
    \ = sorted.map(tuple -> tuple._2)\n        var sortedByColumnDesc = sortedByColumn.sortBy(tuple\
    \ -> tuple._1)\n        var sortedByRow = sortedByColumnDesc.map(tuple -> tuple._2)\n\
    \        return sortedByRow.toList", "        val result = List[Tuple2[Long, Long]]()\n\
    \        for (i <- 0 until lst.length) {\n            val row = lst[i]\n     \
    \       for (j <- 0 until row.length) {\n                val coord = Tuple2[Long,\
    \ Long](i, j)\n                if (coord._1 == x) {\n                    result\
    \ = result.append(coord)\n                }\n            }\n        }\n      \
    \  return result", "        var coordinates = List[Tuple2[Long, Long]]()\n   \
    \     for (var i = 0; i < lst.size(); i++) {\n            var row = lst.apply(i)\n\
    \            for (var j = 0; j < row.size(); j++) {\n                coordinates\
    \ = coordinates.append(Tuple2(i, j))\n            }\n        }\n        coordinates.sort((x1,\
    \ x2) -> x1._1.compareTo(x2._1))\n        coordinates.sort((x1, x2) -> x1._2.compareTo(x2._2.desc()))\n\
    \        var result = List[Tuple2[Long, Long]]()\n        for (var i = 0; i <\
    \ coordinates.size(); i++) {\n            if (coordinates.apply(i)._1 == x) {\n\
    \                result = result.append(coordinates.apply(i))\n            }\n\
    \        }\n        return result", "        var rows = lst.map(row -> row.sort((a,\
    \ b) -> a - b).toList()).toList()\n        var xs = rows.map(row -> row.map(col\
    \ -> col.indexOf(x)).getOrElse(-1)).toList()\n        var res = xs.map(x -> (x,\
    \ rows.indexOf(xs.filter(i -> i == x).head())))\n        return res.sort((a, b)\
    \ -> a[0] - b[0]).toList()", "        var result = List[Tuple2[Long, Long]]()\n\
    \        var xs = lst.map(xs => xs.map(xs => xs))\n        var sorted = xs.sort((a,\
    \ b) => a.row - b.row)\n        var sortedByColumns = sorted.map(xs => xs.sort((a,\
    \ b) => b - a))\n        var sortedByRows = sortedByColumns.map(xs => xs.map(xs\
    \ => xs))\n        var sortedByColumnsAndRows = sortedByRows.map(xs => xs.sort((a,\
    \ b) => b - a))\n        var sortedByRowsAndColumns = sortedByColumnsAndRows.map(xs\
    \ => xs.map(xs => xs))\n        var sortedByColumnsAndRowsAndRows = sortedByRowsAndColumns.map(xs\
    \ => xs.sort((a, b) => b - a))\n        var sortedByRowsAndColumnsAndRows = sortedByColumnsAndRowsAndRows.map(xs\
    \ => xs.map(xs => xs))\n        var sortedByRowsAndRowsAndColumns = sortedByRowsAndColumnsAndRows.map(xs\
    \ => xs.sort((a, b) => b - a))\n        var sortedByRowsAndRowsAndColumnsAndRows\
    \ = sortedByRowsAndRowsAndColumns.map(xs => xs.sort((a, b) => b - a))\n      \
    \  var sortedByRowsAndRowsAndColumnsAndRowsAndColumns = sortedByRowsAndRowsAndColumnsAndRows.map(xs\
    \ => xs.sort((a, b) => b - a))\n        var sortedByRowsAndRowsAndColumnsAndRowsAndColumnsAndRows\
    \ = sortedByRowsAndRowsAndColumnsAndRowsAndColumns.map(xs => xs.sort((a, b) =>\
    \ b - a))\n        var sortedByRowsAndRowsAndColumnsAndRowsAndColumnsAndRowsAndColumns\
    \ = sortedByRowsAndRowsAndColumnsAndRowsAndColumnsAndRows.map(xs =>", "      \
    \  val xs = lst.map(xs => xs.map(xs => xs.toLong).toSeq)\n        val xs2 = xs.sort(Comparator.comparing(xs2\
    \ => xs2.head()))\n        val xs3 = xs2.map(xs3 => xs3.tail().toSeq).toSeq\n\
    \        val xs4 = xs3.sort(Comparator.comparing(xs4 => xs4.head()))\n       \
    \ val xs5 = xs4.map(xs5 => xs5.tail().toSeq).toSeq\n        val xs6 = xs5.sort(Comparator.comparing(xs6\
    \ => xs6.head()))\n        val xs7 = xs6.map(xs7 => xs7.tail().toSeq).toSeq\n\
    \        val xs8 = xs7.sort(Comparator.comparing(xs8 => xs8.head()))\n       \
    \ val xs9 = xs8.map(xs9 => xs9.tail().toSeq).toSeq\n        val xs10 = xs9.sort(Comparator.comparing(xs10\
    \ => xs10.head()))\n        val xs11 = xs10.map(xs11 => xs11.tail().toSeq).toSeq\n\
    \        val xs12 = xs11.sort(Comparator.comparing(xs12 => xs12.head()))\n   \
    \     val xs13 = xs12.map(xs13 => xs13.tail().toSeq).toSeq\n        val xs14 =\
    \ xs13.sort(Comparator.comparing(xs14 => xs14.head()))\n        val xs15 = xs14.map(xs15\
    \ => xs15.tail().toSeq).toSeq\n        val xs16 = xs15.sort(Comparator.comparing(xs16\
    \ => xs16.head()))\n        val xs17 = xs16.map(xs17 => xs17.tail().toSeq).toSeq\n\
    \        val xs18 = xs17.sort(Comparator.comparing(", "        var result = List[Tuple2[Long,\
    \ Long]]()\n        for (var i = 0; i < lst.size(); i++) {\n            var row\
    \ = lst.apply(i)\n            var sortedRow = row.sort(Comparator.comparing(elem\
    \ -> elem._1()))\n            var sortedColumns = sortedRow.sort(Comparator.comparing(elem\
    \ -> elem._2().sort(Comparator.reverseOrder())))\n            for (var j = 0;\
    \ j < sortedColumns.size(); j++) {\n                if (sortedColumns.apply(j)._1()\
    \ == x) {\n                    result = result.append(Tuple2(i, j))\n        \
    \        }\n            }\n        }\n        return result", "        val xs\
    \ = lst.map(xs => xs.map(xs => xs.toLong).toSeq).toSeq\n        val xs2 = xs.sort(Comparator.comparing(xs2\
    \ => xs2.head))\n        val xs3 = xs2.sort(Comparator.comparing(xs3 => xs3.tail.head))\n\
    \        val xs4 = xs3.sort(Comparator.comparing(xs4 => xs4.tail.tail.head))\n\
    \        val xs5 = xs4.sort(Comparator.comparing(xs5 => xs5.tail.tail.tail.head))\n\
    \        val xs6 = xs5.sort(Comparator.comparing(xs6 => xs6.tail.tail.tail.tail.head))\n\
    \        val xs7 = xs6.sort(Comparator.comparing(xs7 => xs7.tail.tail.tail.tail.tail.head))\n\
    \        val xs8 = xs7.sort(Comparator.comparing(xs8 => xs8.tail.tail.tail.tail.tail.tail.head))\n\
    \        val xs9 = xs8.sort(Comparator.comparing(xs9 => xs9.tail.tail.tail.tail.tail.tail.tail.head))\n\
    \        val xs10 = xs9.sort(Comparator.comparing(xs10 => xs10.tail.tail.tail.tail.tail.tail.tail.tail.head))\n\
    \        val xs11 = xs10.sort(Comparator.comparing(xs11 => xs11.tail.tail.tail.tail.tail.tail.tail.tail.tail.head))\n\
    \        val xs12 = xs11.sort(Comparator.comparing(xs12 => xs12.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head))\n\
    \        val xs13 = xs12.sort(Comparator.comparing(xs13 => xs13.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head))\n\
    \        val xs14 = xs13.sort", "        var coordinates = lst.map(row -> row.map(col\
    \ -> (col, row)))\n        var sortedCoordinates = coordinates.sort(Comparator.comparing(tuple\
    \ -> tuple._1))\n        var sortedRows = sortedCoordinates.map(tuple -> tuple._2)\n\
    \        var sortedColumns = sortedRows.map(tuple -> tuple._1)\n        var sortedCoordinatesByColumns\
    \ = sortedColumns.sort(Comparator.comparing(tuple -> tuple._1).reversed())\n \
    \       var sortedCoordinatesByRows = sortedCoordinatesByColumns.map(tuple ->\
    \ tuple._2)\n        var sortedCoordinatesByRowsAndColumns = sortedCoordinatesByRows.map(tuple\
    \ -> tuple._1)\n        var sortedCoordinatesByRowsAndColumnsAndRows = sortedCoordinatesByRowsAndColumns.sort(Comparator.comparing(tuple\
    \ -> tuple._1).reversed())\n        var sortedCoordinatesByRowsAndColumnsAndRowsAndColumns\
    \ = sortedCoordinatesByRowsAndColumnsAndRows.map(tuple -> tuple._1)\n        var\
    \ sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRows = sortedCoordinatesByRowsAndColumnsAndRowsAndColumns.sort(Comparator.comparing(tuple\
    \ -> tuple._1).reversed())\n        var sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumns\
    \ = sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRows.map(tuple -> tuple._1)\n\
    \        var sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumnsAndRows\
    \ = sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumns.sort(Comparator.comparing(tuple\
    \ -> tuple._1).reversed())\n        var sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumnsAndRowsAndColumns\
    \ = sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumnsAndR",
  "        var coordinates = lst.map(row -> row.map(column -> Tuple2(column, x)))\n\
    \        var sortedCoordinates = coordinates.sort(Comparator.comparing(coordinate\
    \ -> coordinate._1))\n        var sortedRows = sortedCoordinates.map(coordinate\
    \ -> coordinate._2)\n        var sortedColumns = sortedRows.map(row -> row.sort(Comparator.comparing(column\
    \ -> column)))\n        var sortedCoordinatesByColumns = sortedColumns.map(row\
    \ -> row.map(column -> Tuple2(column, x)))\n        return sortedCoordinatesByColumns",
  "        var result = List[Tuple2[Long, Long]]()\n        for (var i = 0; i < lst.size();\
    \ i++) {\n            var row = lst.apply(i)\n            for (var j = 0; j <\
    \ row.size(); j++) {\n                if (row.apply(j) == x) {\n             \
    \       result = append(result, Tuple2(i, j))\n                }\n           \
    \ }\n        }\n        return result\n    }\n\n    // Given a 2 dimensional data,\
    \ as a nested lists,\n    // which is similar to matrix, however, unlike matrices,\n\
    \    // each row may contain a different number of columns.\n    // Given lst,\
    \ and integer x, find integers x in the list,\n    // and return list of tuples,\
    \ [(x1, y1), (x2, y2) ...] such that\n    // each tuple is a coordinate - (row,\
    \ columns), starting with 0.\n    // Sort coordinates initially by rows in ascending\
    \ order.\n    // Also, sort coordinates of the row by columns in descending order.\n\
    \    // Examples:\n    // >>> getCol((List[List[Long]](List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (0l))\n    // (List[Tuple2[Long,\
    \ Long]]((0l, 0l), (0l, 1l), (0l, 2l), (0l, 3l), (0l, 4l), (0l, 5l), (0l, 6l)))\n\
    \    // >>> getCol((List[List[Long]]()), (0l))\n    // (List[Tuple2[Long, Long]]())\n\
    \    // >>> getCol((List[List[Long]](List[Long](), List[Long](1l.to", "      \
    \  var coordinates = lst.map(row -> row.map(column -> (x, column)))\n        var\
    \ sorted = coordinates.sortBy(tuple -> tuple._1)\n        var sortedByColumn =\
    \ sorted.map(tuple -> tuple._2.sortBy(column -> -column))\n        return sortedByColumn.map(tuple\
    \ -> tuple._1)", "        var rows = lst.map(row -> row.sort(Comparator.comparing(col\
    \ -> col.get(0).toLong()))).toList()\n        var result = rows.map(row -> row.map(col\
    \ -> (col.get(0).toLong(), col.get(1).toLong())))\n        return result.sort(Comparator.comparing(tuple\
    \ -> tuple._1()))", "        var result = List[Tuple2[Long, Long]]()\n       \
    \ var xs = lst.map(xs => xs.map(xs => xs))\n        xs.sort(Comparator.comparing(xs\
    \ => xs._1()))\n        xs.sort(Comparator.comparing(xs => xs._2().reverse()))\n\
    \        xs.foreach(xs => {\n            var row = xs._1()\n            var cols\
    \ = xs._2()\n            var i = 0\n            while (i < cols.length && cols[i]\
    \ <= x) {\n                i += 1\n            }\n            if (i == 0) {\n\
    \                result = result.append(Tuple2(row, cols[0]))\n            } else\
    \ if (i == cols.length) {\n                result = result.append(Tuple2(row,\
    \ x))\n            } else {\n                result = result.append(Tuple2(row,\
    \ cols[i]))\n            }\n        })\n        return result", "        var result\
    \ = List[Tuple2[Long, Long]]()\n        for (var i = 0; i < lst.length; i++) {\n\
    \            var row = lst[i]\n            for (var j = 0; j < row.length; j++)\
    \ {\n                if (row[j] == x) {\n                    result = append(result,\
    \ Tuple2(i, j))\n                }\n            }\n        }\n        return result",
  "        var coordinates = lst.map(row -> row.map(col -> Tuple2(col, row.indexOf(col))))\n\
    \        coordinates.sort((a, b) -> a._1 - b._1)\n        coordinates.sort((a,\
    \ b) -> b._2 - a._2)\n        var result = List[Tuple2[Long, Long]]()\n      \
    \  for (var i = 0; i < coordinates.size(); i++) {\n            if (coordinates.apply(i)._1\
    \ == x) {\n                result = result.append(coordinates.apply(i))\n    \
    \        }\n        }\n        return result", "        var coordinates = lst.map(row\
    \ -> row.map(column -> (column, x)))\n        var sortedCoordinates = coordinates.sortBy(tuple\
    \ -> tuple._1)\n        var sortedRows = sortedCoordinates.map(tuple -> tuple._1)\n\
    \        var sortedColumns = sortedCoordinates.map(tuple -> tuple._2)\n      \
    \  var sortedRowsAndColumns = sortedRows.zip(sortedColumns).map(tuple -> tuple._1)\n\
    \        var sortedRowsAndColumnsAndX = sortedRowsAndColumns.zip(sortedCoordinates).map(tuple\
    \ -> tuple._1)\n        return sortedRowsAndColumnsAndX.toList", "        var\
    \ row = lst.head\n        var cols = row.tail\n        var sortedCols = cols.sort(Comparator.comparing(col\
    \ -> col.head).reversed())\n        var sortedRows = lst.sort(Comparator.comparing(row\
    \ -> row.head).reversed())\n        var result = List.empty()\n        for (var\
    \ i = 0; i < sortedRows.size(); i++) {\n            var row = sortedRows.apply(i)\n\
    \            var col = sortedCols.apply(i)\n            var y = col.head\n   \
    \         var x = row.head\n            result = result.append(Tuple2(x, y))\n\
    \        }\n        return result", "        var coordinates = lst.map(row ->\
    \ row.map(col -> Tuple2(col, x)))\n        var sortedCoordinates = coordinates.sort(Comparator.comparing(coordinate\
    \ -> coordinate._1))\n        var sortedRows = sortedCoordinates.map(coordinate\
    \ -> coordinate._2)\n        var sortedColumns = sortedRows.map(row -> row.sort(Comparator.comparing(col\
    \ -> col)))\n        var sortedCoordinatesByColumns = sortedColumns.map(row ->\
    \ row.map(col -> Tuple2(col, x)))\n        return sortedCoordinatesByColumns",
  "        var coordinates = lst.map(row -> row.map(col -> (col, row.indexOf(col))))\n\
    \        var sortedCoordinates = coordinates.sortBy(tuple -> tuple._1)\n     \
    \   var sortedRows = sortedCoordinates.map(tuple -> tuple._2)\n        var sortedColumns\
    \ = sortedRows.map(tuple -> tuple._1)\n        var sortedCoordinatesByColumns\
    \ = sortedColumns.sortBy(tuple -> tuple._1)\n        var sortedCoordinatesByRows\
    \ = sortedCoordinatesByColumns.map(tuple -> tuple._2)\n        var sortedCoordinatesByRowsAndColumns\
    \ = sortedCoordinatesByRows.map(tuple -> tuple._1)\n        var sortedCoordinatesByRowsAndColumnsAndRows\
    \ = sortedCoordinatesByRowsAndColumns.sortBy(tuple -> tuple._1)\n        var sortedCoordinatesByRowsAndColumnsAndRowsAndColumns\
    \ = sortedCoordinatesByRowsAndColumnsAndRows.sortBy(tuple -> tuple._1)\n     \
    \   var coordinatesByRowsAndColumns = sortedCoordinatesByRowsAndColumnsAndRowsAndColumns.map(tuple\
    \ -> tuple._2)\n        var coordinatesByRowsAndColumnsAndRows = sortedCoordinatesByRowsAndColumnsAndRows.map(tuple\
    \ -> tuple._2)\n        var coordinatesByRowsAndColumnsAndRowsAndColumns = sortedCoordinatesByRowsAndColumnsAndRowsAndColumns.map(tuple\
    \ -> tuple._2)\n        var coordinatesByRowsAndColumnsAndRowsAndColumnsAndRows\
    \ = sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRows.map(tuple -> tuple._2)\n\
    \        var coordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumns = sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumns.map(tuple\
    \ -> tuple._2)\n        var coordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumnsAndRows\
    \ = sortedCoordinatesByRowsAndColumnsAnd", "        var coordinates = lst.map(row\
    \ -> row.map(column -> Tuple2(column, x)))\n        var sortedCoordinates = coordinates.sortBy(tuple\
    \ -> tuple._1)\n        var sortedRows = sortedCoordinates.map(tuple -> tuple._2)\n\
    \        var sortedColumns = sortedRows.map(tuple -> tuple._1)\n        var sortedCoordinatesByColumn\
    \ = sortedColumns.sortBy(tuple -> tuple._1)\n        var sortedCoordinatesByRow\
    \ = sortedCoordinatesByColumn.map(tuple -> tuple._2)\n        return sortedCoordinatesByRow",
  "        var coordinates = lst.map(row -> row.map(col -> Tuple2(col, x)))\n    \
    \    coordinates.sort((a, b) -> a._1 - b._1)\n        coordinates.sort((a, b)\
    \ -> b._2 - a._2)\n        return coordinates", "        var result = List[Tuple2[Long,\
    \ Long]]()\n        for (var i = 0; i < lst.length; i++) {\n            var row\
    \ = lst[i]\n            for (var j = 0; j < row.length; j++) {\n             \
    \   if (row[j] == x) {\n                    result = append(result, Tuple2(i,\
    \ j))\n                }\n            }\n        }\n        return result", " \
    \       var coordinates = lst.map(row -> row.map(column -> Tuple2(column, x)))\n\
    \        var sortedCoordinates = coordinates.sort(Comparator.comparing(tuple ->\
    \ tuple._1()))\n        var sortedRows = sortedCoordinates.map(tuple -> tuple._2())\n\
    \        var sortedColumns = sortedRows.map(tuple -> tuple._1())\n        var\
    \ sortedCoordinatesByColumns = sortedColumns.sort(Comparator.comparing(column\
    \ -> column.toLong()))\n        var sortedCoordinatesByRows = sortedCoordinatesByColumns.map(tuple\
    \ -> tuple._2())\n        return sortedCoordinatesByRows", "        var coordinates\
    \ = lst.map(row -> row.map(column -> (column, x)))\n        var sorted = coordinates.sortBy(tuple\
    \ -> tuple._1)\n        var sortedByColumn = sorted.map(tuple -> tuple._2)\n \
    \       var sortedByRow = sortedByColumn.sortBy(tuple -> tuple._1)\n        return\
    \ sortedByRow.map(tuple -> tuple._2)", "        var coordinates = lst.map(row\
    \ -> row.map(col -> Tuple2(col, x)))\n        var sortedCoordinates = coordinates.sort(Comparator.comparing(Tuple2::_1))\n\
    \        var sortedRows = sortedCoordinates.map(Tuple2::_2)\n        var sortedColumns\
    \ = sortedRows.map(Tuple2::_1)\n        var sortedColumnsSorted = sortedColumns.sort(Comparator.comparing(Tuple2::_2).reversed())\n\
    \        var sortedRowsSorted = sortedRows.sort(Comparator.comparing(Tuple2::_1))\n\
    \        var coordinatesSorted = sortedCoordinates.map(Tuple2::_1)\n        var\
    \ coordinatesSortedSorted = coordinatesSorted.sort(Comparator.comparing(Tuple2::_1))\n\
    \        var coordinatesSortedRowsSorted = coordinatesSortedSorted.map(Tuple2::_2)\n\
    \        var coordinatesSortedColumnsSorted = coordinatesSortedRowsSorted.map(Tuple2::_1)\n\
    \        var coordinatesSortedColumnsSortedSorted = coordinatesSortedColumnsSorted.sort(Comparator.comparing(Tuple2::_2).reversed())\n\
    \        var coordinatesSortedRowsSortedSorted = coordinatesSortedRowsSorted.sort(Comparator.comparing(Tuple2::_1))\n\
    \        var coordinatesSortedRowsSortedSortedSorted = coordinatesSortedRowsSortedSorted.map(Tuple2::_2)\n\
    \        var coordinatesSortedRowsSortedSortedSorted = coordinatesSortedRowsSortedSorted.sort(Comparator.comparing(Tuple2::_1))\n\
    \        var coordinatesSortedRowsSortedSortedSortedSorted = coordinatesSortedRowsSortedSortedSorted.map(Tuple2::_2)\n\
    \        var coordinatesSortedRowsSortedSortedSortedSorted = coordinatesSortedRowsSortedSortedSorted.sort(Comparator.comparing(Tuple2::_1))\n\
    \        var coordinatesSortedRowsSortedSortedSortedSortedSorted = coordinatesSortedRowsSorted",
  "        var coordinates = lst.map(row -> row.map(col -> Tuple2(col, x)))\n    \
    \    var sortedCoordinates = coordinates.sort(Comparator.comparing(tuple -> tuple._1))\n\
    \        var sortedRows = sortedCoordinates.map(tuple -> tuple._2)\n        var\
    \ sortedCols = sortedRows.map(tuple -> tuple._1)\n        var sortedCoordinatesByRow\
    \ = sortedCoordinates.map(tuple -> tuple._2)\n        var sortedCoordinatesByCol\
    \ = sortedRows.map(tuple -> tuple._1)\n        var sortedCoordinatesByRowAndCol\
    \ = sortedCoordinatesByRow.zip(sortedCoordinatesByCol).map(tuple -> tuple._1)\n\
    \        var sortedCoordinatesByRowAndColAndX = sortedCoordinatesByRowAndCol.zip(sortedCoordinates).map(tuple\
    \ -> tuple._1)\n        var sortedCoordinatesByRowAndColAndXAndY = sortedCoordinatesByRowAndColAndX.zip(sortedCoordinatesByCol).map(tuple\
    \ -> tuple._1)\n        var sortedCoordinatesByRowAndColAndXAndYAndZ = sortedCoordinatesByRowAndColAndXAndY.zip(sortedCoordinatesByCol).map(tuple\
    \ -> tuple._1)\n        var sortedCoordinatesByRowAndColAndXAndYAndZAndW = sortedCoordinatesByRowAndColAndXAndYAndZ.zip(sortedCoordinatesByCol).map(tuple\
    \ -> tuple._1)\n        var sortedCoordinatesByRowAndColAndXAndYAndZAndWAndV =\
    \ sortedCoordinatesByRowAndColAndXAndYAndZAndW.zip(sortedCoordinatesByCol).map(tuple\
    \ -> tuple._1)\n        var sortedCoordinatesByRowAndColAndXAndYAndZAndWAndVAndU\
    \ = sortedCoordinatesByRowAndColAndXAndYAndZAndWAndV.zip(sortedCoordinatesByCol).map(tuple\
    \ -> tuple._1)\n        var sortedCoordinatesByRowAndColAndXAndYAndZAndWAndVAndUAndT\
    \ =", "        var coordinates = lst.map(row -> row.map(col -> (col, row.indexOf(col))))\n\
    \        coordinates.sort((a, b) -> a._1 - b._1)\n        coordinates.sort((a,\
    \ b) -> b._2 - a._2)\n        var result = List[Tuple2[Long, Long]]()\n      \
    \  for (var i = 0; i < coordinates.size(); i++) {\n            if (coordinates.apply(i)._1\
    \ == x) {\n                result = result.append(coordinates.apply(i))\n    \
    \        }\n        }\n        return result", "        var res = List[Tuple2[Long,\
    \ Long]]()\n        for (var i = 0; i < lst.length; i++) {\n            var row\
    \ = lst[i]\n            for (var j = 0; j < row.length; j++) {\n             \
    \   if (row[j] == x) {\n                    res = res.append(Tuple2(i, j))\n \
    \               }\n            }\n        }\n        return res", "        var\
    \ res = List[Tuple2[Long, Long]]()\n        for (var i = 0; i < lst.length; i++)\
    \ {\n            var row = lst[i]\n            for (var j = 0; j < row.length;\
    \ j++) {\n                if (row[j] == x) {\n                    res = res.append(Tuple2(i,\
    \ j))\n                }\n            }\n        }\n        return res", "   \
    \     var result = List[Tuple2[Long, Long]]()\n        var i = 0\n        for\
    \ (var row : List[Long]) {\n            var j = 0\n            for (var coord\
    \ : List[Long]) {\n                if (coord == x) {\n                    result\
    \ = append(result, Tuple2(i, j))\n                }\n                j += 1\n\
    \            }\n            i += 1\n        }\n        return result", "     \
    \   var coordinates = lst.map(row -> row.map(column -> Tuple2(column, x)))\n \
    \       var sortedCoordinates = coordinates.sort(Comparator.comparing(tuple ->\
    \ tuple._1()))\n        var sortedRows = sortedCoordinates.map(tuple -> tuple._2())\n\
    \        var sortedColumns = sortedRows.map(tuple -> tuple._1())\n        var\
    \ sortedCoordinatesByColumns = sortedColumns.sort(Comparator.comparing(column\
    \ -> column.toLong()))\n        var sortedCoordinatesByRows = sortedCoordinatesByColumns.map(tuple\
    \ -> tuple._2())\n        return sortedCoordinatesByRows", "        var result\
    \ = List[Tuple2[Long, Long]]()\n        for (var i = 0; i < lst.length; i++) {\n\
    \            var row = lst[i]\n            for (var j = 0; j < row.length; j++)\
    \ {\n                if (row[j] == x) {\n                    result = append(result,\
    \ Tuple2(i, j))\n                }\n            }\n        }\n        return result",
  "        var row : List[Tuple2[Long, Long]] = List[Tuple2[Long, Long]]()\n     \
    \   var i : Long = 0\n        var j : Long = 0\n        var k : Long = 0\n   \
    \     var l : Long = 0\n        var m : Long = 0\n        var n : Long = 0\n \
    \       var o : Long = 0\n        var p : Long = 0\n        var q : Long = 0\n\
    \        var r : Long = 0\n        var s : Long = 0\n        var t : Long = 0\n\
    \        var u : Long = 0\n        var v : Long = 0\n        var w : Long = 0\n\
    \        var x : Long = 0\n        var y : Long = 0\n        var z : Long = 0\n\
    \        var a : Long = 0\n        var b : Long = 0\n        var c : Long = 0\n\
    \        var d : Long = 0\n        var e : Long = 0\n        var f : Long = 0\n\
    \        var g : Long = 0\n        var h : Long = 0\n        var i : Long = 0\n\
    \        var j : Long = 0\n        var k : Long = 0\n        var l : Long = 0\n\
    \        var m : Long = 0\n        var n : Long = 0\n        var o : Long = 0\n\
    \        var p : Long = 0\n        var q : Long = 0\n        var r : Long = 0\n\
    \        var s : Long = 0\n        var t : Long = 0\n        var u : Long = 0\n\
    \        var v : Long = 0\n        var w : Long = 0\n        var x : Long = 0\n\
    \        var y : Long = 0\n        var z : Long = 0\n        var a : Long = 0\n\
    \        var b : Long = 0\n        var c : Long = 0\n        var d : Long = 0\n\
    \        var e : Long = 0\n        var f : Long = 0\n        var g : Long = 0\n\
    \        var h : Long = 0\n        var i : Long = 0\n        var j : Long = 0\n\
    \        var k : Long = 0\n        var l : Long = 0\n        var m : Long = 0\n\
    \        var n : Long = 0\n        var o : Long = 0\n        var p : Long = 0\n\
    \        var q : Long", "        var res = List[Tuple2[Long, Long]]()\n      \
    \  var i = 0\n        var j = 0\n        while (i < lst.length && j < lst[i].length)\
    \ {\n            if (lst[i][j] == x) {\n                res = res.append(Tuple2(i,\
    \ j))\n                i = i + 1\n                j = j + 1\n            } else\
    \ if (lst[i][j] > x) {\n                j = j + 1\n            } else {\n    \
    \            i = i + 1\n            }\n        }\n        return res", "     \
    \   val result = List[Tuple2[Long, Long]]()\n        for (i <- 0 until lst.length)\
    \ {\n            val row = lst[i]\n            for (j <- 0 until row.length) {\n\
    \                if (row[j] == x) {\n                    result = append(result,\
    \ Tuple2(i, j))\n                }\n            }\n        }\n        return result",
  "        var result = List[Tuple2[Long, Long]]()\n        var i = 0\n        var\
    \ j = 0\n        for (i = 0; i < lst.length; i++) {\n            for (j = 0; j\
    \ < lst[i].length; j++) {\n                if (lst[i][j] == x) {\n           \
    \         result = append(result, Tuple2(i, j))\n                }\n         \
    \   }\n        }\n        return result\n    }\n\n    // Given a 2 dimensional\
    \ data, as a nested lists,\n    // which is similar to matrix, however, unlike\
    \ matrices,\n    // each row may contain a different number of columns.\n    //\
    \ Given lst, and integer x, find integers x in the list,\n    // and return list\
    \ of tuples, [(x1, y1), (x2, y2) ...] such that\n    // each tuple is a coordinate\
    \ - (row, columns), starting with 0.\n    // Sort coordinates initially by rows\
    \ in ascending order.\n    // Also, sort coordinates of the row by columns in\
    \ descending order.\n    // Examples:\n    // >>> getCol((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (0l))\n    // (List[Tuple2[Long,\
    \ Long]]((0l, 0l), (0l, 1l), (0l, 2l), (0l, 3l), (0l, 4l), (0l, 5l), (0l, 6l)))\n\
    \    // >>> getCol((List[List[Long]]()), (0l))\n    // (List[Tuple2[Long, Long]]())\n\
    \    // >>> getCol((List[List[Long]](List[Long](), List[Long](1l", "        var\
    \ coordinates = lst.map(row -> row.map(col -> (col, row)))\n        var sortedCoordinates\
    \ = coordinates.sort((a, b) -> a._1 - b._1)\n        var sortedRows = sortedCoordinates.map(coord\
    \ -> coord._1)\n        var sortedColumns = sortedCoordinates.map(coord -> coord._2)\n\
    \        var sortedRowsColumns = sortedRows.zip(sortedColumns)\n        var sortedRowsColumnsSorted\
    \ = sortedRowsColumns.sort((a, b) -> b - a)\n        var sortedRowsColumnsSortedSorted\
    \ = sortedRowsColumnsSorted.map(coord -> coord._1)\n        var sortedRowsColumnsSortedSortedSorted\
    \ = sortedRowsColumnsSortedSorted.map(coord -> coord._2)\n        var sortedRowsColumnsSortedSortedSortedSorted\
    \ = sortedRowsColumnsSortedSortedSorted.zip(sortedRowsColumnsSortedSortedSorted)\n\
    \        var sortedRowsColumnsSortedSortedSortedSortedSorted = sortedRowsColumnsSortedSortedSortedSortedSorted.map(coord\
    \ -> coord._1)\n        var sortedRowsColumnsSortedSortedSortedSortedSortedSorted\
    \ = sortedRowsColumnsSortedSortedSortedSortedSortedSorted.map(coord -> coord._2)\n\
    \        var sortedRowsColumnsSortedSortedSortedSortedSortedSorted = sortedRowsColumnsSortedSortedSortedSortedSortedSorted.zip(sortedRowsColumnsSortedSortedSortedSortedSorted)\n\
    \        var sortedRowsColumnsSortedSortedSortedSortedSortedSortedSorted = sortedRowsColumnsSortedSortedSortedSortedSortedSortedSorted.map(coord\
    \ -> coord._1)\n        var sortedRowsColumnsSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = sortedRowsColumnsSortedSortedSortedSortedSortedSortedSortedSorted.map(coord\
    \ -> coord._2)\n        var sortedRowsColumnsSortedSortedSortedSortedS", "   \
    \     var coordinates = lst.map(row -> row.map(col -> (col, row.indexOf(col))))\n\
    \        var sortedCoordinates = coordinates.sort((a, b) -> a._1 - b._1)\n   \
    \     var sortedRows = sortedCoordinates.map(tuple -> tuple._1)\n        var sortedColumns\
    \ = sortedCoordinates.map(tuple -> tuple._2)\n        var sortedColumnsByRows\
    \ = sortedColumns.sort((a, b) -> b - a)\n        var sortedRowsByColumns = sortedRows.sort((a,\
    \ b) -> a - b)\n        var sortedCoordinatesByRows = sortedRowsByColumns.map(tuple\
    \ -> tuple._1)\n        var sortedCoordinatesByColumns = sortedRowsByColumns.map(tuple\
    \ -> tuple._2)\n        var coordinatesByRows = sortedCoordinatesByRows.map(tuple\
    \ -> tuple._1)\n        var coordinatesByColumns = sortedCoordinatesByColumns.map(tuple\
    \ -> tuple._1)\n        var coordinatesByRowsAndColumns = coordinatesByRows.zip(coordinatesByColumns).map(tuple\
    \ -> tuple._1)\n        var coordinatesByRowsAndColumnsAndX = coordinatesByRowsAndColumns.map(tuple\
    \ -> tuple._1)\n        var coordinatesByRowsAndColumnsAndXAndY = coordinatesByRowsAndColumnsAndX.zip(coordinatesByColumns).map(tuple\
    \ -> tuple._1)\n        var coordinatesByRowsAndColumnsAndXAndYAndZ = coordinatesByRowsAndColumnsAndXAndY.zip(coordinatesByColumns).map(tuple\
    \ -> tuple._1)\n        var coordinatesByRowsAndColumnsAndXAndYAndZAndW = coordinatesByRowsAndColumnsAndXAndYAndZ.zip(coordinatesByColumns).map(tuple\
    \ -> tuple._1)\n        var coordinatesByRowsAndColumnsAndXAndYAndZAndWAndV =\
    \ coordinatesByRowsAndColumnsAndXAndYAndZAndW.zip(coordinatesByColumns).map(tuple\
    \ -> tuple._1)\n        var coordinatesByRowsAndColumn", "        var result =\
    \ List[Tuple2[Long, Long]]()\n        for (var i = 0; i < lst.size(); i++) {\n\
    \            var row = lst.apply(i)\n            for (var j = 0; j < row.size();\
    \ j++) {\n                if (row.apply(j) == x) {\n                    result\
    \ = append(result, Tuple2(i, j))\n                }\n            }\n        }\n\
    \        return result", "        var coordinates = lst.map(row -> row.map(col\
    \ -> (col, row.indexOf(col))))\n        var sortedCoordinates = coordinates.sortBy(tuple\
    \ -> tuple._1)\n        var sortedRows = sortedCoordinates.map(tuple -> tuple._2)\n\
    \        var sortedColumns = sortedRows.map(tuple -> tuple._1)\n        var sortedCoordinatesByColumns\
    \ = sortedColumns.sortBy(tuple -> tuple._1)\n        var sortedCoordinatesByRows\
    \ = sortedCoordinatesByColumns.map(tuple -> tuple._2)\n        var sortedCoordinatesByRowsAndColumns\
    \ = sortedCoordinatesByRows.map(tuple -> tuple._1)\n        var sortedCoordinatesByRowsAndColumnsAndRows\
    \ = sortedCoordinatesByRowsAndColumns.sortBy(tuple -> tuple._1)\n        var sortedCoordinatesByRowsAndColumnsAndRowsAndColumns\
    \ = sortedCoordinatesByRowsAndColumnsAndRows.sortBy(tuple -> tuple._1)\n     \
    \   var sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRows = sortedCoordinatesByRowsAndColumnsAndRowsAndColumns.sortBy(tuple\
    \ -> tuple._1)\n        var sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumns\
    \ = sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRows.sortBy(tuple ->\
    \ tuple._1)\n        var sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumnsAndRows\
    \ = sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumns.sortBy(tuple\
    \ -> tuple._1)\n        var sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumnsAndRowsAndColumns\
    \ = sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumnsAndRows.sortBy(tuple\
    \ -> tuple._1)\n        var sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRows",
  "        var coordinates = lst.map(row -> row.map(col -> (col, row)))\n        var\
    \ sortedCoordinates = coordinates.sort(Comparator.comparing(tuple -> tuple._1))\n\
    \        var sortedRows = sortedCoordinates.map(tuple -> tuple._2)\n        var\
    \ sortedColumns = sortedRows.map(tuple -> tuple._1)\n        var sortedCoordinatesByColumns\
    \ = sortedColumns.sort(Comparator.comparing(tuple -> tuple._1).reversed())\n \
    \       var coordinatesByColumns = sortedCoordinatesByColumns.map(tuple -> tuple._2)\n\
    \        var coordinatesByRows = coordinatesByColumns.map(tuple -> tuple._1)\n\
    \        var coordinatesByRowsAndColumns = coordinatesByRows.map(tuple -> tuple._1)\n\
    \        var coordinatesByRowsAndColumnsAndX = coordinatesByRowsAndColumns.filter(tuple\
    \ -> tuple._1 == x)\n        var coordinatesByRowsAndColumnsAndXAndY = coordinatesByRowsAndColumnsAndX.map(tuple\
    \ -> tuple._2)\n        var coordinatesByRowsAndColumnsAndXAndYAndRow = coordinatesByRowsAndColumnsAndXAndY.map(tuple\
    \ -> tuple._1)\n        var coordinatesByRowsAndColumnsAndXAndYAndRowAndColumn\
    \ = coordinatesByRowsAndColumnsAndXAndYAndRow.map(tuple -> tuple._2)\n       \
    \ var coordinatesByRowsAndColumnsAndXAndYAndRowAndColumnAndY = coordinatesByRowsAndColumnsAndXAndYAndRowAndColumnAndY.map(tuple\
    \ -> tuple._1)\n        var coordinatesByRowsAndColumnsAndXAndYAndRowAndColumnAndYAndColumn\
    \ = coordinatesByRowsAndColumnsAndXAndYAndRowAndColumnAndYAndColumn.map(tuple\
    \ -> tuple._1)\n        var coordinatesByRowsAndColumnsAndXAndYAndRowAndColumnAndYAndColumnAndY\
    \ = coordinatesByRowsAndColumnsAndXAndYAndRowAndColumnAndYAndColumnAndY.map(tuple\
    \ -> tuple._1)\n        var coordinatesByRowsAndColumnsAndXAndYAndRow", "    \
    \    var coordinates = lst.map(row -> row.map(col -> (col, row.indexOf(col))))\n\
    \        coordinates.sortBy(tuple -> tuple._1)\n        coordinates.sortBy(tuple\
    \ -> tuple._2.desc())\n        var result = List[Tuple2[Long, Long]]()\n     \
    \   for (var i = 0; i < coordinates.size(); i++) {\n            if (coordinates.apply(i)._1\
    \ == x) {\n                result = result.append(coordinates.apply(i))\n    \
    \        }\n        }\n        return result", "        var coordinates = lst.map(row\
    \ -> row.map(col -> Tuple2(col, row.indexOf(col))))\n        var sortedCoordinates\
    \ = coordinates.sortBy(c -> c._1)\n        var sortedRows = sortedCoordinates.map(c\
    \ -> c._2)\n        var sortedColumns = sortedRows.map(r -> r.sorted().map(c ->\
    \ c._1))\n        var sortedCoordinatesByColumns = sortedColumns.sortBy(c -> c._2.reverse())\n\
    \        var coordinatesByColumns = sortedCoordinatesByColumns.map(c -> c._1)\n\
    \        var coordinatesByRows = coordinatesByColumns.map(c -> c.map(r -> r.sorted().map(c\
    \ -> c._1)))\n        var coordinatesByRowsByColumns = coordinatesByRows.map(r\
    \ -> r.sorted().map(r2 -> Tuple2(r2._1, r2._2)))\n        var coordinatesByRowsByColumnsByRows\
    \ = coordinatesByRowsByColumns.map(r -> r.sorted().map(r2 -> Tuple2(r2._1, r2._2)))\n\
    \        var coordinatesByRowsByColumnsByRowsByColumns = coordinatesByRowsByColumnsByRows.map(r\
    \ -> r.sorted().map(r2 -> Tuple2(r2._1, r2._2)))\n        var coordinatesByRowsByColumnsByRowsByColumnsByRows\
    \ = coordinatesByRowsByColumnsByRowsByColumns.map(r -> r.sorted().map(r2 -> Tuple2(r2._1,\
    \ r2._2)))\n        var coordinatesByRowsByColumnsByRowsByColumnsByRowsByColumns\
    \ = coordinatesByRowsByColumnsByRowsByColumnsByRows.map(r -> r.sorted().map(r2\
    \ -> Tuple2(r2._1, r2._2)))\n        var coordinatesByRowsByColumnsByRowsByColumnsByRowsByColumnsByRows\
    \ = coordinatesByRowsByColumnsByRowsByColumnsByRowsByColumns.map(r", "       \
    \ var res = List[Tuple2[Long, Long]]()\n        for (var i = 0; i < lst.size();\
    \ i++) {\n            var row = lst.apply(i)\n            for (var j = 0; j <\
    \ row.size(); j++) {\n                if (row.apply(j) == x) {\n             \
    \       res = res.append(Tuple2(i, j))\n                }\n            }\n   \
    \     }\n        return res", "        var row : List[Long] = lst.head\n     \
    \   var cols : List[Long] = lst.tail.head\n        var sortedCols : List[Long]\
    \ = cols.sort(Comparator.comparing(col -> -col))\n        var sortedRows : List[Long]\
    \ = row.sort(Comparator.comparing(row -> -row))\n        var sortedCoords : List[Tuple2[Long,\
    \ Long]] = sortedRows.zip(sortedCols).toList\n        var coord : Tuple2[Long,\
    \ Long] = sortedCoords.head\n        var coordIndex : Long = coord._1\n      \
    \  var coordValue : Long = coord._2\n        var coordIndexValue : Long = coordIndex\n\
    \        var coordValueValue : Long = coordValue\n        var coordIndexValueValue\
    \ : Long = coordIndexValue\n        var coordValueValueValue : Long = coordValueValue\n\
    \        var coordIndexValueValueValue : Long = coordIndexValueValue\n       \
    \ var coordValueValueValueValue : Long = coordValueValueValue\n        var coordIndexValueValueValueValue\
    \ : Long = coordIndexValueValueValue\n        var coordValueValueValueValueValue\
    \ : Long = coordValueValueValueValue\n        var coordIndexValueValueValueValueValue\
    \ : Long = coordIndexValueValueValueValue\n        var coordValueValueValueValueValueValue\
    \ : Long = coordValueValueValueValueValue\n        var coordIndexValueValueValueValueValueValue\
    \ : Long = coordIndexValueValueValueValueValue\n        var coordValueValueValueValueValueValueValue\
    \ : Long = coordValueValueValueValueValueValue\n        var coordIndexValueValueValueValueValueValueValue\
    \ : Long = coordIndexValueValueValueValueValueValue\n        var coordValueValueValueValueValueValueValueValue\
    \ : Long = coordValueValueValueValueValueValueValue\n        var coordIndexValueValueValueValueValueValueValueValue\
    \ : Long = coordIndexValueValueValueValueValueValueValue\n        var coordValueValueValueValueValueValueValueValueValue\
    \ : Long = coordValueValueValueValueValueValueValueValue\n        var coordIndexValueValueValueValueValueValueValueValueValue\
    \ : Long = coordIndexValueValueValueValueValueValueValueValue\n        var coordValueValueValueValueValueValueValueValueValueValue\
    \ : Long = coordValueValueValueValueValueValueValueValueValue\n        var coordIndexValueValueValueValueValueValueValueValue",
  "        var row : List[Tuple2[Long, Long]] = List[Tuple2[Long, Long]]()\n     \
    \   var i : Long = 0\n        while (i < lst.length) {\n            var j : Long\
    \ = 0\n            while (j < lst[i].length) {\n                if (lst[i][j]\
    \ == x) {\n                    row = append(row, Tuple2(i, j))\n             \
    \   }\n                j = j + 1\n            }\n            i = i + 1\n     \
    \   }\n        return row", "        var coordinates = lst.map(row -> row.map(column\
    \ -> (column, row.indexOf(column))))\n        var sortedCoordinates = coordinates.sort((a,\
    \ b) -> a._1 - b._1).map(tuple -> tuple._1)\n        var sortedRows = sortedCoordinates.sort((a,\
    \ b) -> a._1 - b._1).map(tuple -> tuple._2)\n        var sortedColumns = sortedRows.sort((a,\
    \ b) -> a._2 - b._2).map(tuple -> tuple._1)\n        var coordinatesByColumns\
    \ = sortedColumns.map(column -> (column, sortedRows.indexOf(column)))\n      \
    \  var coordinatesByRows = sortedRows.map(row -> (row, coordinatesByColumns.indexOf(row)))\n\
    \        var coordinatesByColumnsByRows = coordinatesByRows.map(tuple -> tuple._1).map(row\
    \ -> tuple._2).map(column -> (column, coordinatesByRows.indexOf(tuple)))\n   \
    \     var coordinatesByRowsByColumns = coordinatesByColumnsByRows.sort((a, b)\
    \ -> a._1 - b._1).map(tuple -> tuple._1)\n        var coordinatesByRowsByColumnsByRows\
    \ = coordinatesByRowsByColumns.map(tuple -> tuple._1).map(row -> tuple._2).map(column\
    \ -> tuple._3).map(coordinatesByRowsByColumns.indexOf(tuple))\n        var coordinatesByRowsByColumnsByRowsByColumns\
    \ = coordinatesByRowsByColumnsByRows.sort((a, b) -> a._1 - b._1).map(tuple ->\
    \ tuple._1)\n        var coordinatesByRowsByColumnsByRowsByColumnsByRows = coordinatesByRowsByColumnsByRowsByColumns.map(tuple\
    \ -> tuple._1).map(row -> tuple._2).map(column -> tuple._3).map(coordinatesByRowsByColumnsByRows.indexOf(tuple))\n\
    \        var coordinatesByRowsByColumnsByRowsByColumnsByRows = coordinatesByRowsByColumnsByRowsByColumnsBy",
  "        var coordinates = lst.map(row -> row.map(column -> Tuple2(column, x)))\n\
    \        var sortedCoordinates = coordinates.sort(Comparator.comparing(tuple ->\
    \ tuple._1()))\n        var sortedRows = sortedCoordinates.map(tuple -> tuple._2())\n\
    \        var sortedColumns = sortedRows.map(tuple -> tuple._1())\n        var\
    \ sortedCoordinatesByColumns = sortedColumns.sort(Comparator.comparing(column\
    \ -> column.toLong()))\n        var sortedCoordinatesByRows = sortedCoordinatesByColumns.map(tuple\
    \ -> tuple._2())\n        return sortedCoordinatesByRows", "        var result\
    \ = List[Tuple2[Long, Long]]()\n        for (var i = 0; i < lst.size(); i++) {\n\
    \            var row = lst.apply(i)\n            for (var j = 0; j < row.size();\
    \ j++) {\n                if (row.apply(j) == x) {\n                    result\
    \ = append(result, Tuple2(i, j))\n                }\n            }\n        }\n\
    \        return result\n    }\n\n    // Given a 2 dimensional data, as a nested\
    \ lists,\n    // which is similar to matrix, however, unlike matrices,\n    //\
    \ each row may contain a different number of columns.\n    // Given lst, and integer\
    \ x, find integers x in the list,\n    // and return list of tuples, [(x1, y1),\
    \ (x2, y2) ...] such that\n    // each tuple is a coordinate - (row, columns),\
    \ starting with 0.\n    // Sort coordinates initially by rows in ascending order.\n\
    \    // Also, sort coordinates of the row by columns in descending order.\n  \
    \  // Examples:\n    // >>> getColumn((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l))\n    // (List[Tuple2[Long,\
    \ Long]]((0l, 0l), (1l, 4l), (1l, 0l), (2l, 5l), (2l, 0l)))\n    // >>> getColumn((List[List[Long]]()),\
    \ (1l))\n    // (List[Tuple2[Long, Long]]())\n    // >>> getColumn((List[List[Long]](List[Long](),\
    \ List[Long](1l.toLong), List[Long](1l.toLong, 2l", "        var result = List[Tuple2[Long,\
    \ Long]]()\n        var row = lst.head\n        var col = 0l\n        while (row\
    \ != null) {\n            var cols = row.head\n            while (cols != null)\
    \ {\n                if (cols.head == x) {\n                    result = result.append(Tuple2(row.head,\
    \ cols.head))\n                }\n                cols = cols.tail\n         \
    \   }\n            row = row.tail\n            col += 1l\n        }\n        return\
    \ result", "        var sorted = lst.sort(Comparator.comparing(lst::get(0)))\n\
    \        var sortedByRow = sorted.sort(Comparator.comparing(lst::get(1), Comparator.reverseOrder()))\n\
    \        var coordinates = sortedByRow.map(lst::get).map(lst::get).filter(x::equals).toList()\n\
    \        return coordinates.map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map(lst::get).map",
  "        var coordinates = lst.map(row -> row.map(col -> (col, row.indexOf(col))))\n\
    \        coordinates.sort((a, b) -> a._1 - b._1)\n        coordinates.sort((a,\
    \ b) -> b._2 - a._2)\n        var result = List[Tuple2[Long, Long]]()\n      \
    \  for (var coord : coordinates) {\n            if (coord._1 == x) {\n       \
    \         result = result.append(coord)\n            }\n        }\n        return\
    \ result", "        var coordinates = lst.map(row -> row.map(col -> (col, row.indexOf(col))))\n\
    \        var sortedCoordinates = coordinates.sort((a, b) -> a._1 < b._1 ? -1 :\
    \ a._1 > b._1 ? 1 : 0)\n        var sortedRows = sortedCoordinates.map(coord ->\
    \ coord._1)\n        var sortedColumns = sortedCoordinates.map(coord -> coord._2)\n\
    \        var sortedRowsColumns = sortedRows.zip(sortedColumns).sort((a, b) ->\
    \ a._1 < b._1 ? -1 : a._1 > b._1 ? 1 : 0)\n        var sortedCoordinatesByRows\
    \ = sortedRowsColumns.map(coord -> coord._1)\n        var sortedCoordinatesByColumns\
    \ = sortedRowsColumns.map(coord -> coord._2)\n        var coordinatesByRows =\
    \ sortedCoordinatesByRows.map(coord -> coord._1)\n        var coordinatesByColumns\
    \ = sortedCoordinatesByColumns.map(coord -> coord._1)\n        var coordinatesByRowsColumns\
    \ = sortedCoordinatesByRowsColumns.map(coord -> coord._1)\n        var coordinatesByRowsColumnsByColumns\
    \ = coordinatesByRowsColumns.zip(coordinatesByColumns).sort((a, b) -> a._1 < b._1\
    \ ? -1 : a._1 > b._1 ? 1 : 0)\n        var coordinatesByRowsColumnsByRows = coordinatesByRowsColumnsByColumns.map(coord\
    \ -> coord._1)\n        var coordinatesByRowsColumnsByColumnsByRows = coordinatesByRowsColumnsByColumnsByRows.map(coord\
    \ -> coord._1)\n        var coordinatesByRowsColumnsByRowsByColumns = coordinatesByRowsColumnsByRowsByColumns.map(coord\
    \ -> coord._1)\n        var coordinatesByRowsColumnsByRowsByColumnsByRows = coordinatesByRowsColumnsByRowsByColumnsByRows.map(coord\
    \ -> coord._1)\n        var coordinatesByRowsColumnsByRowsByColumnsByRowsByColumns\
    \ = coordinates", "        var coordinates = lst.map(row -> row.map(col -> (col,\
    \ row.indexOf(col))))\n        var sortedCoordinates = coordinates.sort((a, b)\
    \ -> a._1 - b._1).map(coord -> coord._2)\n        var sortedRows = sortedCoordinates.sort((a,\
    \ b) -> a._1 - b._1).map(coord -> coord._1)\n        var sortedColumns = sortedRows.sort((a,\
    \ b) -> b._1 - a._1).map(coord -> coord._2)\n        var sortedCoordinatesByColumns\
    \ = sortedColumns.sort((a, b) -> b - a).map(coord -> coord._1)\n        var sortedCoordinatesByRows\
    \ = sortedCoordinatesByColumns.sort((a, b) -> a - b).map(coord -> coord._2)\n\
    \        var result = sortedCoordinatesByRows.filter(coord -> coord._1 == x).map(coord\
    \ -> (coord._1, coord._2))\n        return result", "        var result = List[Tuple2[Long,\
    \ Long]]()\n        for (var i = 0; i < lst.length; i++) {\n            var row\
    \ = lst[i]\n            for (var j = 0; j < row.length; j++) {\n             \
    \   if (row[j] == x) {\n                    result = append(result, Tuple2(i,\
    \ j))\n                }\n            }\n        }\n        return result\n  \
    \  }\n\n    // Given a 2 dimensional data, as a nested lists,\n    // which is\
    \ similar to matrix, however, unlike matrices,\n    // each row may contain a\
    \ different number of columns.\n    // Given lst, and integer x, find integers\
    \ x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n\
    \    // Sort coordinates initially by rows in ascending order.\n    // Also, sort\
    \ coordinates of the row by columns in descending order.\n    // Examples:\n \
    \   // >>> getCol((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong))), (0l))\n    // (List[Tuple2[Long, Long]]((0l,\
    \ 0l), (1l, 1l), (1l, 2l), (2l, 3l), (2l, 4l), (3l, 5l)))\n    // >>> getCol((List[List[Long]]()),\
    \ (1l))\n    // (List[Tuple2[Long, Long]]())\n    // >>> getCol((List[List[Long]](List[Long](),\
    \ List[Long](1l.toLong), List[Long](1l.toLong", "        var coordinates = lst.map(row\
    \ -> row.map(col -> (col, row.indexOf(col))))\n        var sortedCoordinates =\
    \ coordinates.sort((a, b) -> a._1 < b._1 ? -1 : 1)\n        var sortedRows = sortedCoordinates.map(coord\
    \ -> coord._1)\n        var sortedColumns = sortedCoordinates.map(coord -> coord._2)\n\
    \        var sortedCoordinatesByRow = sortedRows.map(row -> sortedColumns.sort((a,\
    \ b) -> b - a).map(col -> (col, row)))\n        var coordinatesByRow = sortedCoordinatesByRow.map(coord\
    \ -> coord._1)\n        var coordinatesByColumn = sortedCoordinatesByRow.map(coord\
    \ -> coord._2)\n        var coordinatesByRowAndColumn = coordinatesByRow.map(row\
    \ -> coordinatesByColumn.map(col -> (col, row)))\n        var coordinatesByRowAndColumnAndX\
    \ = coordinatesByRowAndColumn.map(coord -> coord._1)\n        var coordinatesByRowAndColumnAndXAndY\
    \ = coordinatesByRowAndColumnAndX.map(coord -> coord._2)\n        var coordinatesByRowAndColumnAndXAndYAndZ\
    \ = coordinatesByRowAndColumnAndXAndY.map(coord -> coord._3)\n        var coordinatesByRowAndColumnAndXAndYAndZAndW\
    \ = coordinatesByRowAndColumnAndXAndYAndZ.map(coord -> coord._4)\n        var\
    \ coordinatesByRowAndColumnAndXAndYAndZAndWAndV = coordinatesByRowAndColumnAndXAndYAndZAndW.map(coord\
    \ -> coord._5)\n        var coordinatesByRowAndColumnAndXAndYAndZAndWAndVAndU\
    \ = coordinatesByRowAndColumnAndXAndYAndZAndWAndV.map(coord -> coord._6)\n   \
    \     var coordinatesByRowAndColumnAndXAndYAndZAndWAndVAndUAndT = coordinatesByRowAndColumnAndXAndYAndZAndWAndVAndU.map(coord\
    \ -> coord._7)\n        var coordinatesByRowAndColumnAndXAndYAndZAndWAndVAndUAndTAndS\
    \ = coordinatesByRowAndColumnAndXAndYAndZAndWAndV", "        var result = List[Tuple2[Long,\
    \ Long]]()\n        for (var i = 0; i < lst.size(); i++) {\n            var row\
    \ = lst.apply(i)\n            for (var j = 0; j < row.size(); j++) {\n       \
    \         if (row.apply(j) == x) {\n                    result = append(result,\
    \ Tuple2(i, j))\n                }\n            }\n        }\n        return result\n\
    \    }\n\n    // Given a 2 dimensional data, as a nested lists,\n    // which\
    \ is similar to matrix, however, unlike matrices,\n    // each row may contain\
    \ a different number of columns.\n    // Given lst, and integer x, find integers\
    \ x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n\
    \    // Sort coordinates initially by rows in ascending order.\n    // Also, sort\
    \ coordinates of the row by columns in descending order.\n    // Examples:\n \
    \   // >>> getColumn((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong))), (0l))\n    // (List[Tuple2[Long, Long]]((0l,\
    \ 0l), (0l, 1l), (0l, 2l), (0l, 3l), (0l, 4l), (0l, 5l), (0l, 6l)))\n    // >>>\
    \ getColumn((List[List[Long]]()), (0l))\n    // (List[Tuple2[Long, Long]]())\n\
    \    // >>> getColumn((List[List[Long]](List[Long](), List[Long](1l.to", "   \
    \     var result = List[Tuple2[Long, Long]]()\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        while (i < lst.length && j < lst[i].length)\
    \ {\n            if (lst[i][j] == x) {\n                result = append(result,\
    \ Tuple2(i, j))\n                j = j + 1\n            } else if (lst[i][j] <\
    \ x) {\n                j = j + 1\n            } else {\n                i = i\
    \ + 1\n            }\n        }\n        return result", "        var coordinates\
    \ = lst.map(row -> row.map(col -> Tuple2(col, row.indexOf(col))))\n        var\
    \ sortedCoordinates = coordinates.sortBy(tuple -> tuple._1)\n        var sortedRows\
    \ = sortedCoordinates.map(tuple -> tuple._2)\n        var sortedColumns = sortedRows.map(tuple\
    \ -> tuple._1)\n        var sortedCoordinatesByColumns = sortedColumns.sortBy(col\
    \ -> col.reverse())\n        var coordinatesByColumns = sortedCoordinatesByColumns.map(tuple\
    \ -> tuple._2)\n        var coordinatesByRows = coordinatesByColumns.map(tuple\
    \ -> tuple._1)\n        var coordinatesByRowsAndColumns = coordinatesByRows.map(tuple\
    \ -> tuple._1).sortBy(col -> col.reverse())\n        var coordinatesByRowsAndColumnsAndIndex\
    \ = coordinatesByRowsAndColumns.map(tuple -> tuple._1).sortBy(col -> col.reverse())\n\
    \        var coordinatesByRowsAndColumnsAndIndexAndValue = coordinatesByRowsAndColumnsAndIndex.map(tuple\
    \ -> tuple._1).sortBy(col -> col.reverse())\n        var coordinatesByRowsAndColumnsAndIndexAndValueAndRow\
    \ = coordinatesByRowsAndColumnsAndIndexAndValue.map(tuple -> tuple._1).sortBy(col\
    \ -> col.reverse())\n        var coordinatesByRowsAndColumnsAndIndexAndValueAndRowAndColumn\
    \ = coordinatesByRowsAndColumnsAndIndexAndValueAndRow.map(tuple -> tuple._1).sortBy(col\
    \ -> col.reverse())\n        var coordinatesByRowsAndColumnsAndIndexAndValueAndRowAndColumnAndValue\
    \ = coordinatesByRowsAndColumnsAndIndexAndValueAndRowAndColumn.map(tuple -> tuple._1).sortBy(col\
    \ -> col.reverse())\n        var coordinatesByRowsAndColumnsAndIndexAndValueAndRowAndColumnAndValueAndColumn\
    \ = coordinatesByRowsAndColumnsAndIndexAndValueAndRowAndColumnAndValue.map(tuple\
    \ -> tuple._1).sortBy(col -> col.reverse())\n        var coordinatesByRowsAndColumnsAndIndexAndValueAndRowAndColumnAndValueAndColumn",
  "        var coordinates = lst.map(row -> row.map(col -> Tuple2(col, row.indexOf(col))))\n\
    \        var sortedCoordinates = coordinates.sort(Comparator.comparing(tuple ->\
    \ tuple._1()))\n        var sortedRows = sortedCoordinates.map(tuple -> tuple._2())\n\
    \        var sortedColumns = sortedRows.map(tuple -> tuple._1())\n        var\
    \ sortedCoordinatesByColumns = sortedColumns.sort(Comparator.comparing(tuple ->\
    \ tuple._2()))\n        var sortedCoordinatesByRows = sortedCoordinatesByColumns.map(tuple\
    \ -> tuple._1())\n        var sortedCoordinatesByRowsAndColumns = sortedCoordinatesByRows.map(tuple\
    \ -> tuple._1())\n        var sortedCoordinatesByRowsAndColumnsAndRows = sortedCoordinatesByRowsAndColumns.sort(Comparator.comparing(tuple\
    \ -> tuple._1()))\n        var sortedCoordinatesByRowsAndColumnsAndRowsAndColumns\
    \ = sortedCoordinatesByRowsAndColumnsAndRows.map(tuple -> tuple._1())\n      \
    \  var sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRows = sortedCoordinatesByRowsAndColumnsAndRowsAndColumns.sort(Comparator.comparing(tuple\
    \ -> tuple._1()))\n        var sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumns\
    \ = sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRows.map(tuple -> tuple._1())\n\
    \        var sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumnsAndRows\
    \ = sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumns.sort(Comparator.comparing(tuple\
    \ -> tuple._1()))\n        var sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumnsAndRowsAndColumnsAndRows\
    \ = sortedCoordinatesByRowsAndColumnsAndRowsAndColumnsAndRowsAndColumnsAndR",
  "        var coordinates = lst.map(row -> row.map(col -> Tuple2(col, x)))\n    \
    \    var sortedCoordinates = coordinates.sort(Comparator.comparing(tuple -> tuple._1()))\n\
    \        var sortedRows = sortedCoordinates.map(tuple -> tuple._2())\n       \
    \ var sortedColumns = sortedRows.map(tuple -> tuple._1())\n        var sortedCoordinatesByColumns\
    \ = sortedColumns.sort(Comparator.comparing(tuple -> tuple._1()))\n        var\
    \ sortedCoordinatesByRows = sortedCoordinatesByColumns.map(tuple -> tuple._2())\n\
    \        return sortedCoordinatesByRows", "        var coordinates = lst.map(row\
    \ -> row.map(col -> Tuple2(col, x)))\n        var sortedCoordinates = coordinates.sort((a,\
    \ b) -> a._1.compareTo(b._1))\n        var sortedRows = sortedCoordinates.map(coord\
    \ -> coord._1)\n        var sortedColumns = sortedCoordinates.map(coord -> coord._2)\n\
    \        var sortedRowsColumns = sortedRows.zip(sortedColumns).sort((a, b) ->\
    \ b.compareTo(a))\n        var sortedRowsColumnsTuple = sortedRowsColumns.map(coord\
    \ -> Tuple2(coord._1, coord._2))\n        return sortedRowsColumnsTuple", "  \
    \      var result = List[Tuple2[Long, Long]]()\n        var xs = lst.map(xs =>\
    \ xs.map(xs => (x, xs)))\n        xs.sort((x1, x2) => x1._1 - x2._1)\n       \
    \ xs.sort((x1, x2) => x2._2 - x1._2)\n        xs.foreach(x1 => {\n           \
    \ var ys = xs.filter(x2 => x1._1 == x2._1)\n            ys.foreach(y1 => {\n \
    \               result = result.append(Tuple2(x1._1, y1._1))\n            })\n\
    \        })\n        return result", "        var coordinates = lst.map(row ->\
    \ row.map(column -> Tuple2(column, x)))\n        var sortedCoordinates = coordinates.sort(Comparator.comparing(tuple\
    \ -> tuple._1()))\n        var sortedRows = sortedCoordinates.map(tuple -> tuple._2())\n\
    \        var sortedColumns = sortedRows.map(tuple -> tuple._1())\n        var\
    \ sortedCoordinatesByColumns = sortedColumns.sort(Comparator.comparing(column\
    \ -> column.toLong()))\n        var sortedCoordinatesByRows = sortedCoordinatesByColumns.map(tuple\
    \ -> tuple._2())\n        var sortedCoordinatesByRowsAndColumns = sortedCoordinatesByRows.map(tuple\
    \ -> tuple._1())\n        return sortedCoordinatesByRowsAndColumns", "       \
    \ var coordinates = lst.map(row -> row.map(column -> Tuple2(column, x)))\n   \
    \     var sortedCoordinates = coordinates.sortBy(tuple -> tuple._1)\n        var\
    \ sortedRows = sortedCoordinates.map(tuple -> tuple._2)\n        var sortedColumns\
    \ = sortedRows.sortBy(tuple -> tuple._1)\n        var sortedCoordinatesByColumns\
    \ = sortedColumns.map(tuple -> tuple._2)\n        var sortedCoordinatesByRows\
    \ = sortedCoordinatesByColumns.sortBy(tuple -> tuple._1)\n        return sortedCoordinatesByRows",
  "        var result = List[Tuple2[Long, Long]]()\n        for (var i = 0; i < lst.size();\
    \ i++) {\n            var row = lst.apply(i)\n            for (var j = 0; j <\
    \ row.size(); j++) {\n                if (row.apply(j).equals(x)) {\n        \
    \            result = result.append(Tuple2(i, j))\n                }\n       \
    \     }\n        }\n        return result", "        var coordinates = lst.map(row\
    \ -> row.map(column -> Tuple2(column, x)))\n        var sortedCoordinates = coordinates.sort(Comparator.comparing(tuple\
    \ -> tuple._1()))\n        var sortedRows = sortedCoordinates.map(tuple -> tuple._2())\n\
    \        var sortedColumns = sortedRows.map(tuple -> tuple._1())\n        var\
    \ sortedCoordinatesByColumns = sortedColumns.sort(Comparator.comparing(column\
    \ -> column.toLong()))\n        var sortedCoordinatesByRows = sortedCoordinatesByColumns.map(tuple\
    \ -> tuple._2())\n        return sortedCoordinatesByRows", "        var result\
    \ = List[Tuple2[Long, Long]]()\n        var i = 0\n        var j = 0\n       \
    \ var k = 0\n        while (i < lst.length && j < lst[i].length) {\n         \
    \   if (lst[i][j] == x) {\n                result = append(result, Tuple2(i, j))\n\
    \                i = i + 1\n                j = j + 1\n            } else if (lst[i][j]\
    \ < x) {\n                j = j + 1\n            } else {\n                i =\
    \ i + 1\n            }\n        }\n        return result", "        var coordinates\
    \ = lst.map(row -> row.map(column -> Tuple2(column, x)))\n        var sorted =\
    \ coordinates.sortBy(tuple -> tuple._1)\n        var sortedByColumn = sorted.map(tuple\
    \ -> tuple._2)\n        var sortedByColumnDesc = sortedByColumn.sortBy(tuple ->\
    \ tuple._1)\n        var coordinatesByColumn = sortedByColumnDesc.map(tuple ->\
    \ tuple._2)\n        return coordinatesByColumn", "        var coordinates = lst.map(row\
    \ -> row.map(column -> Tuple2(column, x)))\n        coordinates.sort((a, b) ->\
    \ a._1 - b._1)\n        coordinates.sort((a, b) -> a._2 - b._2)\n        return\
    \ coordinates", "        var result = List[Tuple2[Long, Long]]()\n        for\
    \ (var i = 0; i < lst.length; i++) {\n            var row = lst[i]\n         \
    \   for (var j = 0; j < row.length; j++) {\n                if (row[j] == x) {\n\
    \                    result = append(result, Tuple2(i, j))\n                }\n\
    \            }\n        }\n        return result\n    }\n\n    // Given a 2 dimensional\
    \ data, as a nested lists,\n    // which is similar to matrix, however, unlike\
    \ matrices,\n    // each row may contain a different number of columns.\n    //\
    \ Given lst, and integer x, find integers x in the list,\n    // and return list\
    \ of tuples, [(x1, y1), (x2, y2) ...] such that\n    // each tuple is a coordinate\
    \ - (row, columns), starting with 0.\n    // Sort coordinates initially by rows\
    \ in ascending order.\n    // Also, sort coordinates of the row by columns in\
    \ descending order.\n    // Examples:\n    // >>> getColumn((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l))\n    // (List[Tuple2[Long,\
    \ Long]]((0l, 0l), (1l, 4l), (1l, 0l), (2l, 5l), (2l, 0l)))\n    // >>> getColumn((List[List[Long]]()),\
    \ (1l))\n    // (List[Tuple2[Long, Long]]())\n    // >>> getColumn((List[List[Long]](List[Long](),\
    \ List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong,", "        var coordinates\
    \ = lst.map(row -> row.map(col -> (col, row)))\n        var sortedCoordinates\
    \ = coordinates.sort((a, b) -> a._1 - b._1).toList\n        var sortedRows = sortedCoordinates.map(coord\
    \ -> coord._1)\n        var sortedColumns = sortedCoordinates.map(coord -> coord._2)\n\
    \        var sortedRowsColumns = sortedRows.zip(sortedColumns).toList\n      \
    \  var sortedRowsColumnsTuples = sortedRowsColumns.map(tuple -> tuple._1.zip(tuple._2).toList)\n\
    \        var sortedRowsColumnsTuplesTuples = sortedRowsColumnsTuples.map(tuple\
    \ -> tuple._1.map(tuple2 -> tuple2._1).toList).toList\n        var sortedRowsColumnsTuplesTuplesTuples\
    \ = sortedRowsColumnsTuplesTuples.map(tuple -> tuple._1.map(tuple3 -> tuple3._1).toList).toList\n\
    \        var sortedRowsColumnsTuplesTuplesTuplesTuples = sortedRowsColumnsTuplesTuplesTuples.map(tuple\
    \ -> tuple._1.map(tuple4 -> tuple4._1).toList).toList\n        var sortedRowsColumnsTuplesTuplesTuplesTuplesTuples\
    \ = sortedRowsColumnsTuplesTuplesTuplesTuplesTuples.map(tuple -> tuple._1.map(tuple5\
    \ -> tuple5._1).toList).toList\n        var sortedRowsColumnsTuplesTuplesTuplesTuplesTuplesTuples\
    \ = sortedRowsColumnsTuplesTuplesTuplesTuplesTuplesTuplesTuples.map(tuple -> tuple._1.map(tuple6\
    \ -> tuple6._1).toList).toList\n        var sortedRowsColumnsTuplesTuplesTuplesTuplesTuplesTuplesTuples\
    \ = sortedRowsColumnsTuplesTuplesTuplesTuplesTuplesTuplesTuplesTuples.map(tuple\
    \ -> tuple._1.map(tuple7 -> tuple7._1).toList).toList\n        var sortedRowsColumnsTuplesTuplesTuplesTuplesTuplesTu",
  "        var res = List[Tuple2[Long, Long]]()\n        for (var i = 0; i < lst.length;\
    \ i++) {\n            var row = lst[i]\n            for (var j = 0; j < row.length;\
    \ j++) {\n                if (row[j] == x) {\n                    res = res.append(Tuple2(i,\
    \ j))\n                }\n            }\n        }\n        return res", "   \
    \     var coordinates = lst.map(row -> row.map(col -> (col, row.indexOf(col))))\n\
    \        coordinates.sort((a, b) -> a._1 - b._1)\n        coordinates.sort((a,\
    \ b) -> b._2 - a._2)\n        var result = List[Tuple2[Long, Long]]()\n      \
    \  for (var i = 0; i < coordinates.size(); i++) {\n            if (coordinates.apply(i)._1\
    \ == x) {\n                result = result.append(coordinates.apply(i))\n    \
    \        }\n        }\n        return result", "        var coordinates = lst.map(row\
    \ -> row.map(col -> Tuple2(col, x)))\n        var sortedCoordinates = coordinates.sort(Comparator.comparing(tuple\
    \ -> tuple._1))\n        var sortedRows = sortedCoordinates.map(tuple -> tuple._1)\n\
    \        var sortedColumns = sortedCoordinates.map(tuple -> tuple._2)\n      \
    \  var sortedRowsColumns = sortedRows.zip(sortedColumns).sort(Comparator.comparing(tuple\
    \ -> tuple._1).reversed()).map(tuple -> tuple._2)\n        return sortedRowsColumns",
  "        var coordinates = lst.map(row -> row.map(column -> (x, column)))\n    \
    \    var sortedCoordinates = coordinates.sort(Comparator.comparing(tuple -> tuple._1))\n\
    \        var sortedRows = sortedCoordinates.map(tuple -> tuple._1)\n        var\
    \ sortedColumns = sortedCoordinates.map(tuple -> tuple._2)\n        var sortedRowsAndColumns\
    \ = sortedRows.zip(sortedColumns).map(tuple -> tuple._1)\n        return sortedRowsAndColumns",
  "        var coordinates = lst.map(row -> row.map(col -> (col, row.indexOf(col))))\n\
    \        var sortedCoordinates = coordinates.sort((a, b) -> a._1 - b._1)\n   \
    \     var sortedRowCoordinates = sortedCoordinates.map(coord -> coord._1)\n  \
    \      var sortedColumnCoordinates = sortedCoordinates.map(coord -> coord._2)\n\
    \        var sortedRowCoordinatesAndColumns = sortedRowCoordinates.zip(sortedColumnCoordinates)\n\
    \        var sortedRowCoordinatesAndColumnsAndX = sortedRowCoordinatesAndColumns.map(coord\
    \ -> (coord._1, coord._2, x))\n        var sortedRowCoordinatesAndColumnsAndXAndY\
    \ = sortedRowCoordinatesAndColumnsAndX.sort((a, b) -> b._3 - a._3)\n        return\
    \ sortedRowCoordinatesAndColumnsAndXAndY.map(coord -> (coord._1, coord._2))",
  "        var result = List[Tuple2[Long, Long]]()\n        for (var i = 0; i < lst.length;\
    \ i++) {\n            var row = lst[i]\n            for (var j = 0; j < row.length;\
    \ j++) {\n                if (row[j] == x) {\n                    result = append(result,\
    \ Tuple2(i, j))\n                }\n            }\n        }\n        return result",
  "        var coordinates = lst.map(row -> row.map(column -> Tuple2(column, x)))\n\
    \        var sortedCoordinates = coordinates.sort(Comparator.comparing(tuple ->\
    \ tuple._1()))\n        var sortedRows = sortedCoordinates.map(tuple -> tuple._2())\n\
    \        var sortedColumns = sortedRows.map(tuple -> tuple._1())\n        var\
    \ sortedCoordinatesByColumn = sortedColumns.sort(Comparator.comparing(column ->\
    \ column))\n        var sortedCoordinatesByRow = sortedCoordinatesByColumn.map(tuple\
    \ -> tuple._2())\n        return sortedCoordinatesByRow", "        var result\
    \ = List[Tuple2[Long, Long]]()\n        var i = 0\n        for (var row : List[Long])\
    \ {\n            var j = 0\n            for (var coord : List[Long]) {\n     \
    \           if (coord == x) {\n                    result = append(result, Tuple2(i,\
    \ j))\n                }\n                j = j + 1\n            }\n         \
    \   i = i + 1\n        }\n        return result", "        var res = List[Tuple2[Long,\
    \ Long]]()\n        for (var i = 0; i < lst.length; i++) {\n            var row\
    \ = lst[i]\n            for (var j = 0; j < row.length; j++) {\n             \
    \   if (row[j] == x) {\n                    res = res.append(Tuple2(i, j))\n \
    \               }\n            }\n        }\n        return res", "        var\
    \ rows = lst.map(row -> row.sort((a, b) -> a - b).toList())\n        var coordinates\
    \ = rows.map(row -> row.map(col -> (row.indexOf(col), col)))\n        var sortedCoordinates\
    \ = coordinates.sort((a, b) -> a._1 - b._1).map(coord -> coord._2)\n        var\
    \ result = sortedCoordinates.map(coord -> (coord._1, coord._2))\n        return\
    \ result", "        var result = List[Tuple2[Long, Long]]()\n        for (var\
    \ i = 0; i < lst.length; i++) {\n            var row = lst[i]\n            for\
    \ (var j = 0; j < row.length; j++) {\n                if (row[j] == x) {\n   \
    \                 result = append(result, Tuple2(i, j))\n                }\n \
    \           }\n        }\n        return result", "        var coordinates = lst.map(row\
    \ -> row.map(col -> Tuple2(col, x)))\n        var sortedCoordinates = coordinates.sort(Comparator.comparing(Tuple2::_1))\n\
    \        var sortedRows = sortedCoordinates.map(Tuple2::_2)\n        var sortedColumns\
    \ = sortedRows.map(Tuple2::_1)\n        var sortedColumnsSorted = sortedColumns.sort(Comparator.comparing(Tuple2::_2).reversed())\n\
    \        var sortedRowsSorted = sortedRows.sort(Comparator.comparing(Tuple2::_1))\n\
    \        var sortedCoordinatesSorted = sortedCoordinates.sort(Comparator.comparing(Tuple2::_1).reversed())\n\
    \        var coordinatesSorted = sortedCoordinatesSorted.map(Tuple2::_1)\n   \
    \     var coordinatesSortedSorted = coordinatesSorted.sort(Comparator.comparing(Tuple2::_1).reversed())\n\
    \        var coordinatesSortedRows = coordinatesSorted.map(Tuple2::_2)\n     \
    \   var coordinatesSortedColumns = coordinatesSortedRows.map(Tuple2::_1)\n   \
    \     var coordinatesSortedColumnsSorted = coordinatesSortedColumns.sort(Comparator.comparing(Tuple2::_2).reversed())\n\
    \        var coordinatesSortedRowsSorted = coordinatesSortedRows.sort(Comparator.comparing(Tuple2::_1))\n\
    \        var coordinatesSortedRowsColumns = coordinatesSortedRows.map(Tuple2::_2)\n\
    \        var coordinatesSortedRowsColumnsSorted = coordinatesSortedRowsColumns.sort(Comparator.comparing(Tuple2::_2).reversed())\n\
    \        var coordinatesSortedRowsColumnsRows = coordinatesSortedRowsColumns.map(Tuple2::_1)\n\
    \        var coordinatesSortedRowsColumnsRowsSorted = coordinatesSortedRowsColumnsRows.sort(Comparator.comparing(Tuple2::_1).reversed())\n\
    \        var coordinatesSortedRowsColumnsRowsColumns = coordinatesSorted", " \
    \       var res = List[Tuple2[Long, Long]]()\n        for (var i = 0; i < lst.size();\
    \ i++) {\n            var row = lst.apply(i)\n            for (var j = 0; j <\
    \ row.size(); j++) {\n                if (row.apply(j) == x) {\n             \
    \       res = res.append(Tuple2(i, j))\n                }\n            }\n   \
    \     }\n        return res", "        var coordinates = lst.map(row -> row.map(col\
    \ -> Tuple2(col, x)))\n        coordinates.sort((a, b) -> a._1 - b._1)\n     \
    \   coordinates.sort((a, b) -> a._2 - b._2)\n        return coordinates", "  \
    \      var result = List[Tuple2[Long, Long]]()\n        var row = lst.head\n \
    \       var cols = row.tail\n        var i = 0\n        while (i < cols.length\
    \ && cols[i] < x) {\n            i += 1\n        }\n        var j = i\n      \
    \  while (j < cols.length && cols[j] == x) {\n            j += 1\n        }\n\
    \        var k = j\n        while (k < cols.length && cols[k] > x) {\n       \
    \     k += 1\n        }\n        var l = k\n        while (l < cols.length) {\n\
    \            result = result.append(Tuple2(cols[i], cols[j]))\n            i +=\
    \ 1\n            j += 1\n            l += 1\n        }\n        return result",
  "        var coordinates = lst.map(row -> row.map(col -> Tuple2(col, x)))\n    \
    \    var sortedCoordinates = coordinates.sort(Comparator.comparing(c -> c._1()))\n\
    \        var sortedRows = sortedCoordinates.map(c -> c._1())\n        var sortedColumns\
    \ = sortedCoordinates.map(c -> c._2())\n        var sortedRowsColumns = sortedRows.zip(sortedColumns).sort(Comparator.comparing(c\
    \ -> c._1()).reversed())\n        return sortedRowsColumns.map(c -> c._2()).toList",
  "        var coordinates = lst.map(row -> row.map(col -> Tuple2(col, row.indexOf(col))))\n\
    \        var sortedCoordinates = coordinates.sortBy(tuple -> tuple._1)\n     \
    \   var sortedRows = sortedCoordinates.map(tuple -> tuple._2)\n        var sortedColumns\
    \ = sortedRows.map(tuple -> tuple._1)\n        var sortedCoordinatesByColumns\
    \ = sortedColumns.sortBy(col -> col.indexOf(x))\n        var coordinatesByColumns\
    \ = sortedCoordinatesByColumns.map(tuple -> tuple._2)\n        return coordinatesByColumns",
  "        var coordinates = lst.map(row -> row.map(col -> (col, row)))\n        coordinates.sort((a,\
    \ b) -> a._1 - b._1)\n        coordinates.sort((a, b) -> a._2 - b._2)\n      \
    \  var result = List[Tuple2[Long, Long]]()\n        for (var coord : coordinates)\
    \ {\n            if (coord._1 == x) {\n                result = result.append(coord)\n\
    \            }\n        }\n        return result", "        var result = List[Tuple2[Long,\
    \ Long]]()\n        for (var i = 0; i < lst.size(); i++) {\n            var row\
    \ = lst.apply(i)\n            for (var j = 0; j < row.size(); j++) {\n       \
    \         if (row.apply(j) == x) {\n                    result = append(result,\
    \ Tuple2(i, j))\n                }\n            }\n        }\n        return result",
  "        var row : List[Tuple2[Long, Long]] = List[Tuple2[Long, Long]]()\n     \
    \   var i : Long = 0\n        var j : Long = 0\n        var k : Long = 0\n   \
    \     var l : Long = 0\n        var m : Long = 0\n        var n : Long = 0\n \
    \       var o : Long = 0\n        var p : Long = 0\n        var q : Long = 0\n\
    \        var r : Long = 0\n        var s : Long = 0\n        var t : Long = 0\n\
    \        var u : Long = 0\n        var v : Long = 0\n        var w : Long = 0\n\
    \        var x : Long = 0\n        var y : Long = 0\n        var z : Long = 0\n\
    \        var a : Long = 0\n        var b : Long = 0\n        var c : Long = 0\n\
    \        var d : Long = 0\n        var e : Long = 0\n        var f : Long = 0\n\
    \        var g : Long = 0\n        var h : Long = 0\n        var i : Long = 0\n\
    \        var j : Long = 0\n        var k : Long = 0\n        var l : Long = 0\n\
    \        var m : Long = 0\n        var n : Long = 0\n        var o : Long = 0\n\
    \        var p : Long = 0\n        var q : Long = 0\n        var r : Long = 0\n\
    \        var s : Long = 0\n        var t : Long = 0\n        var u : Long = 0\n\
    \        var v : Long = 0\n        var w : Long = 0\n        var x : Long = 0\n\
    \        var y : Long = 0\n        var z : Long = 0\n        var a : Long = 0\n\
    \        var b : Long = 0\n        var c : Long = 0\n        var d : Long = 0\n\
    \        var e : Long = 0\n        var f : Long = 0\n        var g : Long = 0\n\
    \        var h : Long = 0\n        var i : Long = 0\n        var j : Long = 0\n\
    \        var k : Long = 0\n        var l : Long = 0\n        var m : Long = 0\n\
    \        var n : Long = 0\n        var o : Long = 0\n        var p : Long = 0\n\
    \        var q : Long", "        var coordinates = lst.map(row -> row.map(col\
    \ -> (col, row)))\n        coordinates.sort((a, b) -> a._1 - b._1)\n        coordinates.sort((a,\
    \ b) -> b._2 - a._2)\n        var result = coordinates.filter(coord -> coord._1\
    \ == x).map(coord -> (coord._1, coord._2))\n        return result", "        var\
    \ coordinates = lst.map(row -> row.map(col -> (col, row)))\n        var sortedCoordinates\
    \ = coordinates.sort((a, b) -> a._1 - b._1)\n        var sortedRows = sortedCoordinates.map(coord\
    \ -> coord._1)\n        var sortedColumns = sortedCoordinates.map(coord -> coord._2)\n\
    \        var sortedRowsColumns = sortedRows.zip(sortedColumns).sort((a, b) ->\
    \ b - a)\n        var coordinatesByRows = sortedRowsColumns.map(coord -> coord._1)\n\
    \        var coordinatesByColumns = sortedRowsColumns.map(coord -> coord._2)\n\
    \        var coordinatesByRowsColumns = coordinatesByRows.zip(coordinatesByColumns).sort((a,\
    \ b) -> b - a)\n        var coordinatesByRowsColumnsTuple = coordinatesByRowsColumns.map(coord\
    \ -> (coord._1, coord._2))\n        var coordinatesByRowsColumnsTupleByColumns\
    \ = coordinatesByRowsColumnsTuple.groupBy(coord -> coord._2)\n        var coordinatesByRowsColumnsTupleByRows\
    \ = coordinatesByRowsColumnsTupleByColumns.map(coord -> coord._1)\n        var\
    \ coordinatesByRowsColumnsTupleByRowsTuple = coordinatesByRowsColumnsTupleByRows.map(coord\
    \ -> coord._1.map(coord2 -> (coord2._1, coord2._2)))\n        var coordinatesByRowsColumnsTupleByRowsTupleByColumns\
    \ = coordinatesByRowsColumnsTupleByRowsTuple.groupBy(coord -> coord._2)\n    \
    \    var coordinatesByRowsColumnsTupleByRowsTupleByRows = coordinatesByRowsColumnsTupleByRowsTupleByColumns.map(coord\
    \ -> coord._1)\n        var coordinatesByRowsColumnsTupleByRowsTupleByRowsTuple\
    \ = coordinatesByRowsColumnsTupleByRowsTupleByRows.map(coord -> coord._1.map(coord2\
    \ -> (coord2._1, coord2._2)))\n        var coordinatesByRowsColumnsTupleBy", " \
    \       var result = List[Tuple2[Long, Long]]()\n        for (var i = 0; i < lst.size();\
    \ i++) {\n            var row = lst.apply(i)\n            for (var j = 0; j <\
    \ row.size(); j++) {\n                if (row.apply(j).equals(x)) {\n        \
    \            result = append(result, Tuple2(i, j))\n                }\n      \
    \      }\n        }\n        return result\n    }\n\n    // Given a 2 dimensional\
    \ data, as a nested lists,\n    // which is similar to matrix, however, unlike\
    \ matrices,\n    // each row may contain a different number of columns.\n    //\
    \ Given lst, and integer x, find integers x in the list,\n    // and return list\
    \ of tuples, [(x1, y1), (x2, y2) ...] such that\n    // each tuple is a coordinate\
    \ - (row, columns), starting with 0.\n    // Sort coordinates initially by rows\
    \ in ascending order.\n    // Also, sort coordinates of the row by columns in\
    \ descending order.\n    // Examples:\n    // >>> getColumn((List[List[Long]](List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (0l))\n    // (List[Tuple2[Long,\
    \ Long]]((0l, 0l), (0l, 1l), (0l, 2l), (0l, 3l), (0l, 4l), (0l, 5l), (0l, 6l)))\n\
    \    // >>> getColumn((List[List[Long]]()), (0l))\n    // (List[Tuple2[Long, Long]]())\n\
    \    // >>> getColumn((List[List[Long]](List[Long](), List[Long](1l", "      \
    \  var coordinates = lst.map(row -> row.map(col -> (col, row.indexOf(col))))\n\
    \        var sortedCoordinates = coordinates.sortBy(tuple -> tuple._1)\n     \
    \   var sortedRowCoordinates = sortedCoordinates.map(tuple -> tuple._2)\n    \
    \    var sortedRowCoordinatesSorted = sortedRowCoordinates.sortBy(tuple -> tuple._1)\n\
    \        var sortedRowCoordinatesSortedSorted = sortedRowCoordinatesSorted.sortBy(tuple\
    \ -> tuple._2)\n        var coordinatesSorted = sortedRowCoordinatesSortedSorted.map(tuple\
    \ -> tuple._1)\n        var coordinatesSortedSorted = sortedRowCoordinatesSortedSorted.map(tuple\
    \ -> tuple._2)\n        var coordinatesSortedSortedSorted = coordinatesSortedSorted.sortBy(tuple\
    \ -> tuple._1)\n        var coordinatesSortedSortedSortedSorted = coordinatesSortedSortedSorted.sortBy(tuple\
    \ -> tuple._2)\n        var coordinatesSortedSortedSortedSorted = coordinatesSortedSortedSortedSorted.sortBy(tuple\
    \ -> tuple._1)\n        var coordinatesSortedSortedSortedSortedSorted = coordinatesSortedSortedSortedSortedSorted.sortBy(tuple\
    \ -> tuple._2)\n        var coordinatesSortedSortedSortedSortedSortedSorted =\
    \ coordinatesSortedSortedSortedSortedSortedSorted.sortBy(tuple -> tuple._1)\n\
    \        var coordinatesSortedSortedSortedSortedSortedSortedSorted = coordinatesSortedSortedSortedSortedSortedSortedSorted.sortBy(tuple\
    \ -> tuple._2)\n        var coordinatesSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = coordinatesSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(tuple ->\
    \ tuple._1)\n        var coordinatesSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ = coordinatesSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(tuple\
    \ -> tuple._2)\n        var coordinatesSortedSortedSortedSortedSorted"]
stop_tokens:
- "\n    }\n"
