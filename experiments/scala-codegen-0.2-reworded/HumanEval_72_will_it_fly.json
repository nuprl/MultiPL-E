{
  "name": "HumanEval_72_will_it_fly",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)), (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n    }\n\n}\n",
  "completions": [
    "        q.length > 0 && q.length % 2 == 0 && sum(q) <= w",
    "        q.length() <= w\n        && q.length() == q.reverse().length()\n        && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length() <= w\n        && q.length() == q.reverse().length()\n        && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.to",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        q.length == q.tail.length &&\n        q.length == q.tail.tail.length &&\n        q.tail.tail.tail.length == q.tail.tail.tail.tail.length &&\n        q.tail.tail.tail.tail.tail.length == q.tail.tail.tail.tail.tail.tail.length &&\n        q.tail.tail.tail.tail.tail.tail.tail.length == q.tail.tail.tail.tail.tail.tail.tail.tail.length &&\n        q.tail.tail.tail.tail.tail.tail.tail.tail.length == q.tail.tail.tail.tail.tail.tail.tail.tail.tail.length &&\n        q.tail.tail.tail.tail.tail.tail.tail.tail.tail.length == q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.length &&\n        q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.length == q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.length &&\n        q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.length == q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.length &&\n        q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.length == q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.length &&\n        q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.length == q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.length &&\n        q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.length == q.tail.tail.",
    "        q.length == 0 || w <= 0\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length == 0 || w <= 0",
    "        q.length > 0 && q.length == q.tail.length && q.tail.head + q.head <= w &&\n        q.tail.head + q.head == q.head + q.tail.head &&\n        q.tail.head + q.tail.tail.head + q.tail.tail.tail.head + q.tail.tail.tail.tail.head == q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head",
    "        q.length() <= w && isBalanced(q) && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length() <= w && isBalanced(q) && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))",
    "        q.length == 0 || w < 0 || w
    "        q.length > 0 && q.length % 2 == 0 && sum(q) <= w",
    "        q.length > 0 && q.length % 2 == 0 && _.sum(q) <= w",
    "        q.length > 0 && q.length == q.tail.length && q.tail.head + q.head <= w && q.tail.tail.head + q.tail.head <= w && q.tail.tail.tail.head + q.tail.tail.head <= w && q.tail.tail.tail.tail.head + q.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail",
    "        q.length > 0 && q.length % 2 == 0 &&\n        sum(q) <= w &&\n        q.length == q.length.toString.length()",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((",
    "        q.length > 0 && q.length == q.tail.length && q.length == q.init.length\n        && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length && q.length == q.init.length\n        && sum(q) <= w",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced2(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willIt",
    "        q.isEmpty() || q.length() == 1 || w <= 0\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.isEmpty() || q.length() == 1 || w <= 0\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n",
    "        if (q.length == 0) {\n            return true\n        }\n        if (q.length == 1) {\n            return q.head <= w\n        }\n        if (q.length == 2) {\n            return q.head + q.tail <= w\n        }\n        if (q.length == 3) {\n            return q.head + q.tail + q.tail.head <= w\n        }\n        if (q.length == 4) {\n            return q.head + q.tail + q.tail.head + q.tail.tail <= w\n        }\n        if (q.length == 5) {\n            return q.head + q.tail + q.tail.head + q.tail.tail + q.tail.tail.head <= w\n        }\n        if (q.length == 6) {\n            return q.head + q.tail + q.tail.head + q.tail.tail + q.tail.tail.head + q.tail.tail.tail <= w\n        }\n        if (q.length == 7) {\n            return q.head + q.tail + q.tail.head + q.tail.tail + q.tail.tail.head + q.tail.tail.tail + q.tail.tail.tail.head <= w\n        }\n        if (q.length == 8) {\n            return q.head + q.tail + q.tail.head + q.tail.tail + q.tail.tail.head + q.tail.tail.tail + q.tail.tail.tail.head + q.tail.tail.tail.tail <= w\n        }\n        if (q.length == 9) {\n            return q.head + q.tail + q.tail.head + q.tail.tail + q.tail.tail.head + q.tail.tail.tail + q.tail.tail.tail.head + q.tail.tail.tail.tail <= w\n        }\n        if (q.length == 10) {\n            return q.head + q.tail + q.tail.head + q.tail.tail + q.tail.tail.head + q.tail.tail.tail + q.tail.tail.tail.head + q.tail.tail",
    "        q.length > 0 && q.length == q.tail.length && q.length == q.init.length &&\n        q.init.sum() <= w && q.tail.sum() <= w &&\n        q.init.tail.head == q.tail.head && q.init.tail.tail == q.tail.tail &&\n        q.tail.head == q.init.head && q.tail.tail == q.init.tail\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length && q.length == q.init.length &&\n        q.init.sum() <= w && q.tail.sum() <= w &&\n        q.init.tail.head == q.tail.head && q.init.tail.tail == q.tail.tail &&\n        q.tail.head == q.init.head && q.tail.tail",
    "        q.length > 0 && q.length % 2 == 0 && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length % 2 == 0 && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l",
    "        if (q.length == 0) {\n            return true\n        }\n        if (q.length == 1) {\n            return q.head <= w\n        }\n        if (q.length == 2) {\n            return q.head + q.tail <= w\n        }\n        if (q.length == 3) {\n            return q.head + q.tail + q.tail.head <= w\n        }\n        if (q.length == 4) {\n            return q.head + q.tail + q.tail.head + q.tail.tail <= w\n        }\n        if (q.length == 5) {\n            return q.head + q.tail + q.tail.head + q.tail.tail + q.tail.tail.head <= w\n        }\n        if (q.length == 6) {\n            return q.head + q.tail + q.tail.head + q.tail.tail + q.tail.tail.head + q.tail.tail.tail <= w\n        }\n        if (q.length == 7) {\n            return q.head + q.tail + q.tail.head + q.tail.tail + q.tail.tail.head + q.tail.tail.tail + q.tail.tail.tail.head <= w\n        }\n        if (q.length == 8) {\n            return q.head + q.tail + q.tail.head + q.tail.tail + q.tail.tail.head + q.tail.tail.tail + q.tail.tail.tail.head + q.tail.tail.tail.tail <= w\n        }\n        if (q.length == 9) {\n            return q.head + q.tail + q.tail.head + q.tail.tail + q.tail.tail.head + q.tail.tail.tail + q.tail.tail.tail.head + q.tail.tail.tail.tail <= w\n        }\n        if (q.length == 10) {\n            return q.head + q.tail + q.tail.head + q.tail.tail + q.tail.tail.head + q.tail.tail.tail + q.tail.tail.tail.head + q.tail.tail",
    "        q.length > 0 && q.length % 2 == 0 && _.sum(q) <= w",
    "        q.isEmpty() || q.length() == 1 || q.length() == 2 || q.length() == 3 || q.length() == 4 || q.length() == 5 || q.length() == 6 || q.length() == 7 || q.length() == 8 || q.length() == 9 || q.length() == 10 || q.length() == 11 || q.length() == 12 || q.length() == 13 || q.length() == 14 || q.length() == 15 || q.length() == 16 || q.length() == 17 || q.length() == 18 || q.length() == 19 || q.length() == 20 || q.length() == 21 || q.length() == 22 || q.length() == 23 || q.length() == 24 || q.length() == 25 || q.length() == 26 || q.length() == 27 || q.length() == 28 || q.length() == 29 || q.length() == 30 || q.length() == 31 || q.length() == 32 || q.length() == 33 || q.length() == 34 || q.length() == 35 || q.length() == 36 || q.length() == 37 || q.length() == 38 || q.length() == 39 || q.length() == 40 || q.length() == 41 || q.length() == 42 || q.length() == 43 || q.length() == 44 || q.length() == 45 || q.length() == 46 || q.length() == 47 || q.length() == 48 || q.length() == 49 || q.length() == 50 || q.length() == 51 || q.length() == 52 || q.length() == 53 || q.length() == 54 || q.length() == 55 || q.length() == 56 || q.length() == 57 || q.length() == 58 || q.length() == 59 || q.length() == 60 || q.length() == 61 || q.length() == 62 || q.length() == 63 || q.length() == 64 || q.length() == 65 || q.length() == 66 || q.length() == 67 || q.length() == 68 || q.length() == 69 || q.length() == 70 || q.length() == 71 || q.length() == 72 || q",
    "        q.length == 0 || w < 0 || w > 9999\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length == 0 || w < 0 || w > 9999",
    "        q.length == 0 || w < 0 || w > q.length * q.length",
    "        q.length == 0 || q.length == 1 || w <= 0\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length == 0 || q.length == 1 || w <= 0\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    //",
    "        q.length > 0 && q.length == q.tail.length && q.length == q.init.length &&\n        q.init.sum() <= w && q.tail.sum() <= w &&\n        q.init.sum() + q.tail.sum() == q.init.tail.sum() + q.tail.init.sum()",
    "        q.length > 0 && q.length % 2 == 0 &&\n        sum(q) <= w &&\n        q.length == q.length.toString.toInt\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length % 2 == 0 &&\n        sum(q) <= w &&\n        q.length == q.length.toString.toInt",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((",
    "        q.length == 0 || w < 0 || w > 9999999999999999l",
    "        q.isEmpty() || q.length() == 1 || w < 0 || w > q.head()\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.isEmpty() || q.length() == 1 || w < 0 || w > q.head()",
    "        q.length() > 0 && q.length() % 2 == 0 && sum(q) <= w",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((",
    "        q.length > 0 && q.length % 2 == 0 && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length % 2 == 0 && sum(q) <= w",
    "        q.length > 0 && q.length % 2 == 0 && q.sum() <= w",
    "        q.length > 0 && q.length == q.tail.length && q.length == q.init.length &&\n        q.init.sum() <= w && q.tail.sum() <= w &&\n        q.init.tail.head == q.tail.head && q.init.tail.tail == q.tail.tail &&\n        q.tail.head == q.init.head && q.tail.tail == q.init.tail",
    "        q.length > 0 && q.length == q.tail.length && q.length == q.init.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length && q.length == q.init.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        q.length == q.tail.length &&\n        q.tail.head == q.head",
    "        q.length > 0 && q.length == q.tail.length && q.tail.head + q.head <= w && isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length && q.tail.head + q.head <= w && isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willIt",
    "        q.length > 0 && q.length % 2 == 0 && q.length <= w &&\n        sum(q) <= w",
    "        q.length > 0 && q.length == q.tail.length &&\n        q.length <= w &&\n        sum(q) <= w",
    "        q.length > 0 && q.length % 2 == 0 && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length % 2 == 0 && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q) &&\n        isPalindromic(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it",
    "        q.length == 0 || w < 0 || w > 9999\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length == 0 || w < 0 || w > 9999",
    "        q.length > 0 && q.length % 2 == 0 &&\n        sum(q) <= w &&\n        q.length == q.length.toLong",
    "        q.isEmpty() || q.length() == 1 || q.length() == 2 || w <= 0",
    "        q.length > 0 && q.length % 2 == 0 && q.sum() <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length % 2 == 0 && q.sum() <= w",
    "        q.length > 0 && q.length % 2 == 0 && q.sum() <= w &&\n        q.foldLeft(false)((acc, x) => acc || x == q.head)",
    "        q.length > 0 && q.length % 2 == 0 && q.sum() <= w",
    "        q.length == 0 || w < 0 || w > q.head.toLong\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length == 0 || w < 0 || w > q.head.toLong",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((",
    "        q.length > 0 && q.length == q.tail.length && q.length == q.tail.tail.length &&\n        q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail",
    "        q.length > 0 && q.length % 2 == 0 &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length % 2 == 0 &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](",
    "        q.length() <= w\n        && q.length() == q.reverse().length()\n        && sum(q) <= w",
    "        q.length > 0 && q.length % 2 == 0 && q.sum() <= w",
    "        q.length > 0 && q.length % 2 == 0 && q.sum() <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length % 2 == 0 && q.sum() <= w",
    "        q.length > 0 && q.length % 2 == 0 && q.sum() <= w",
    "        q.length == 0 || w < 0 || w > q.length * q.length",
    "        q.length == 0 || w < 0\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length == 0 || w < 0\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is",
    "        q.length == 0 || q.length == 1 || w <= 0\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length == 0 || q.length == 1 || w <= 0\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    //",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((",
    "        q.length > 0 && q.length % 2 == 0 && q.sum() <= w",
    "        q.length > 0 && q.length == q.tail.length && q.tail.head + q.head <= w && isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q is balanced, and false otherwise.\n    // The object q is balanced if it is a palindromic list.\n    // Example:\n    // >>> isBalanced((List[Long](1l.toLong, 2l.toLong)))\n    // (true)\n    // >>> isBalanced((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> isBalanced((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (true)\n    def isBalanced(q : List[Long]) : Boolean = {\n        q.length > 0 && q.length == q.tail.length && q.tail.head + q.head <= q.tail.tail.head && isBalanced(q.tail)",
    "        q.length == 0 || w < 0 || w > q.length",
    "        q.length > 0 && q.length % 2 == 0 && sum(q) <= w",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((",
    "        q.length > 0 && q.length % 2 == 0 && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length % 2 == 0 && sum(q) <= w",
    "        q.length > 0 && q.length % 2 == 0 && q.sum() <= w && q.forall(x => x <= w)",
    "        q.length > 0 && q.length % 2 == 0 &&\n        sum(q) <= w &&\n        all(x -> x <= w)",
    "        q.length == 0 || w < 0 || w > 9999\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length == 0 || w < 0 || w > 9999\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it",
    "        q.length == 0 || w <= 0\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length == 0 || w <= 0",
    "        q.length == 0 || w < 0 || q.length > w",
    "        q.length > 0 && q.length % 2 == 0 &&\n        sum(q) <= w &&\n        q.length == q.length.toString.toInt",
    "        q.length > 0 && q.length % 2 == 0 && q.sum() <= w",
    "        q.length > 0 && q.length % 2 == 0 && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length % 2 == 0 && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((",
    "        q.length == 0 || w < 0 || w
    "        q.length > 0 && q.length == q.tail.length && sum(q) <= w && balanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length && sum(q) <= w && balanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&",
    "        q.length == 0 || w <= 0 || q.length == 1 || q.length == 2 && q.head == q.tail",
    "        q.length > 0 && q.length == q.tail.length && q.tail.head + q.head <= w && isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q is balanced, and false otherwise.\n    // The object q is balanced if it is a palindromic list.\n    // Example:\n    // >>> isBalanced((List[Long](1l.toLong, 2l.toLong)))\n    // (true)\n    // >>> isBalanced((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> isBalanced((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong)))\n    // (true)\n    def isBalanced(q : List[Long]) : Boolean = {\n        q.length > 0 && q.length == q.tail.length && q.tail.head + q.head <= q.tail.tail && isPalindromic(q)\n    }\n\n    // Write a function that returns true if the object q is palindromic, and false otherwise.\n    // The object q is palindromic if it is a palindromic list.\n    // Example:\n    // >>> isPalindromic((List[Long](1l.toLong, 2l.toLong)))\n    // (true)\n    // >>> isPalindromic((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> isPalindromic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong)))\n    // (true)\n    def isPalindromic(q : List[Long]) : Boolean = {\n        q.length > 0 && q.length == q.tail.length && q.tail.head + q.head <= q.tail.tail && isPalindromic(q.tail)\n    }\n\n    // Write a function that returns true if the object q is a palindromic list, and false otherwise.\n    // The object q is",
    "        q.length() > 0 && q.length() % 2 == 0 && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length() > 0 && q.length() % 2 == 0 && sum(q) <= w",
    "        q.length() > 0 && q.length() % 2 == 0 && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length() > 0 && q.length() % 2 == 0 && sum(q) <= w",
    "        q.length > 0 && q.length % 2 == 0 && sum(q) <= w",
    "        q.length > 0 && q.length == q.tail.length && q.length == q.init.length &&\n        q.init.sum() <= w && q.tail.sum() <= w &&\n        q.init.sum() + q.tail.sum() == q.init.tail.sum() + q.tail.init.sum()",
    "        q.length > 0 && q.length == q.tail.length && q.length == q.init.length &&\n        sum(q) <= w && balanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length && q.length == q.init.length &&\n        sum(q) <= w && balanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it",
    "        q.length == 0 || w < 0 || w
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((",
    "        if (q.length == 0) {\n            return true\n        } else {\n            if (q.length == 1) {\n                return q.head == q.tail.head\n            } else {\n                if (q.length % 2 == 1) {\n                    return q.head == q.tail.head && q.tail.head == q.head\n                } else {\n                    return q.head == q.tail.head && q.tail.head == q.tail.tail.head && q.tail.tail.head == q.head\n                }\n            }\n        }",
    "        q.length == 0 || w < 0 || w > 9999999999999999l\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length == 0 || w < 0 || w > 9999999999999999l",
    "        q.length > 0 && q.length % 2 == 0 && q.sum() <= w",
    "        q.length == 0 || w < 0 || w > 9999999999999999l\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length == 0 || w < 0 || w > 9999999999999999l\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (",
    "        if (q.length == 0) {\n            return true\n        }\n        if (q.length == 1) {\n            return q.head <= w\n        }\n        if (q.length == 2) {\n            return q.head + q.tail <= w\n        }\n        if (q.length == 3) {\n            return q.head + q.tail + q.tail.head <= w\n        }\n        return q.head + q.tail + q.tail.head + q.tail.tail <= w",
    "        q.length > 0 && q.length % 2 == 0 && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length % 2 == 0 && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))",
    "        q.length > 0 && q.length % 2 == 0 && sum(q) <= w",
    "        q.length == 0 || w < 0\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length == 0 || w < 0\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is",
    "        q.length > 0 && q.length % 2 == 0 &&\n        sum(q) <= w &&\n        q.length == q.length.toLong\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length % 2 == 0 &&\n        sum(q) <= w &&\n        q.length == q.length.toLong\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    //",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((",
    "        q.length == 0 || w < 0 || w > q.length * q.length",
    "        q.length > 0 && q.length % 2 == 0 && _.sum(q) <= w",
    "        q.length > 0 && q.length % 2 == 0 && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length % 2 == 0 && sum(q) <= w && isPalindromic(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong,",
    "        q.length > 0 && q.length == q.tail.length && q.length == q.init.length &&\n        sum(q) <= w && isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length && q.length == q.init.length &&\n        sum(q) <= w && isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((",
    "        q.isEmpty() || q.length() == 1 && q.head() <= w",
    "        q.length == 0 || w < 0 || w > q.length * q.length",
    "        q.isEmpty() || q.length() == 1 || w < 0 || w > q.head()",
    "        q.length > 0 && q.length == q.tail.length && q.tail.head + q.head <= w && q.tail.tail.head + q.tail.head <= w && q.tail.tail.tail.head + q.tail.tail.head <= w && q.tail.tail.tail.tail.head + q.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((",
    "        q.isEmpty() || q.length() == 1 || q.length() == 2 && q.head() + q.tail().head() <= w",
    "        q.length > 0 && q.length % 2 == 0 && sum(q) <= w",
    "        q.length > 0 && q.length % 2 == 0 &&\n        sum(q) <= w &&\n        all(x -> x <= w)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length % 2 == 0 &&\n        sum(q) <= w &&\n        all(x -> x <= w)",
    "        q.length == 0 || w < 0 || q.length > w",
    "        q.length > 0 && q.length % 2 == 0 &&\n        sum(q) <= w &&\n        q.length == q.length.toLong",
    "        q.isEmpty() || q.length() == 1 || w <= 0\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.isEmpty() || q.length() == 1 || w <= 0",
    "        q.length == 0 || q.length == 1 || q.length == 2 || q.length == 3 || q.length == 4 || q.length == 5 || q.length == 6 || q.length == 7 || q.length == 8 || q.length == 9 || q.length == 10 || q.length == 11 || q.length == 12 || q.length == 13 || q.length == 14 || q.length == 15 || q.length == 16 || q.length == 17 || q.length == 18 || q.length == 19 || q.length == 20 || q.length == 21 || q.length == 22 || q.length == 23 || q.length == 24 || q.length == 25 || q.length == 26 || q.length == 27 || q.length == 28 || q.length == 29 || q.length == 30 || q.length == 31 || q.length == 32 || q.length == 33 || q.length == 34 || q.length == 35 || q.length == 36 || q.length == 37 || q.length == 38 || q.length == 39 || q.length == 40 || q.length == 41 || q.length == 42 || q.length == 43 || q.length == 44 || q.length == 45 || q.length == 46 || q.length == 47 || q.length == 48 || q.length == 49 || q.length == 50 || q.length == 51 || q.length == 52 || q.length == 53 || q.length == 54 || q.length == 55 || q.length == 56 || q.length == 57 || q.length == 58 || q.length == 59 || q.length == 60 || q.length == 61 || q.length == 62 || q.length == 63 || q.length == 64 || q.length == 65 || q.length == 66 || q.length == 67 || q.length == 68 || q.length == 69 || q.length == 70 || q.length == 71 || q.length == 72 || q.length == 73 || q.length == 74 || q.length == 75 || q.length == 76 || q.length == 77 || q.length == 78 || q.length == 79 || q.length == 80 || q.length == 81 || q.length == 82 || q.length == 83 || q.length == 84 || q",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly",
    "        q.length == 0 || w < 0 || w > 9999999999999999l\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length == 0 || w < 0 || w > 9999999999999999l",
    "        q.length > 0 && q.length % 2 == 0 && sum(q) <= w",
    "        q.length > 0 && q.length == q.tail.length && q.length == q.init.length &&\n        q.init.sum() <= w && q.tail.sum() <= w &&\n        q.init.sum() + q.tail.sum() == q.init.tail.sum() + q.tail.init.sum()",
    "        q.length() > 0 && q.length() % 2 == 0 && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length() > 0 && q.length() % 2 == 0 && sum(q) <= w",
    "        q.length > 0 && q.length % 2 == 0 &&\n        sum(q) <= w &&\n        q.toString().equals(q.reverse().toString())\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length % 2 == 0 &&\n        sum(q) <= w &&\n        q.toString().equals(q.reverse().toString())",
    "        if (q.length == 0) {\n            return true\n        } else {\n            var sum = 0l\n            for (i <- 0 until q.length - 1) {\n                sum += q[i]\n            }\n            return sum <= w\n        }",
    "        q.length > 0 && q.length % 2 == 0 &&\n        sum(q) <= w &&\n        q.length == q.length.toLong",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((",
    "        q.length == 0 || w < 0\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length == 0 || w < 0",
    "        q.isEmpty() || q.length() == 1 || w < 0 || w > q.length()\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.isEmpty() || q.length() == 1 || w < 0 || w > q.length()",
    "        if (q.length == 0) {\n            return true\n        }\n        if (q.length == 1) {\n            return q.head.toLong <= w\n        }\n        if (q.length == 2) {\n            return q.head.toLong + q.tail.head.toLong <= w\n        }\n        if (q.length == 3) {\n            return q.head.toLong + q.tail.head.toLong + q.tail.tail.head.toLong <= w\n        }\n        if (q.length == 4) {\n            return q.head.toLong + q.tail.head.toLong + q.tail.tail.head.toLong + q.tail.tail.tail.head.toLong <= w\n        }\n        if (q.length == 5) {\n            return q.head.toLong + q.tail.head.toLong + q.tail.tail.head.toLong + q.tail.tail.tail.head.toLong + q.tail.tail.tail.tail.head.toLong <= w\n        }\n        if (q.length == 6) {\n            return q.head.toLong + q.tail.head.toLong + q.tail.tail.head.toLong + q.tail.tail.tail.head.toLong + q.tail.tail.tail.tail.head.toLong + q.tail.tail.tail.tail.tail.head.toLong <= w\n        }\n        if (q.length == 7) {\n            return q.head.toLong + q.tail.head.toLong + q.tail.tail.head.toLong + q.tail.tail.tail.head.toLong + q.tail.tail.tail.tail.head.toLong + q.tail.tail.tail.tail.tail.head.toLong + q.tail.tail.tail.tail.tail.tail.head.toLong <= w\n        }\n        if (q.length == 8) {\n            return q.head.toLong + q.tail.head.toLong + q.tail.tail.head.toLong + q.tail.tail.tail.head.toLong + q.tail.tail.tail",
    "        q.length > 0 && q.length % 2 == 0 &&\n        sum(q) <= w &&\n        q.length == q.length.toLong",
    "        q.length > 0 && q.length == q.tail.length && q.length == q.tail.tail.length &&\n        q.tail.head + q.head + q.tail.tail.head <= w &&\n        q.tail.head + q.head + q.tail.tail.head <= w &&\n        q.tail.head + q.head + q.tail.tail.head <= w &&\n        q.tail.head + q.head + q.tail.tail.head <= w &&\n        q.tail.head + q.head + q.tail.tail.head <= w &&\n        q.tail.head + q.head + q.tail.tail.head <= w &&\n        q.tail.head + q.head + q.tail.tail.head <= w &&\n        q.tail.head + q.head + q.tail.tail.head <= w &&\n        q.tail.head + q.head + q.tail.tail.head <= w &&\n        q.tail.head + q.head + q.tail.tail.head <= w &&\n        q.tail.head + q.head + q.tail.tail.head <= w &&\n        q.tail.head + q.head + q.tail.tail.head <= w &&\n        q.tail.head + q.head + q.tail.tail.head <= w &&\n        q.tail.head + q.head + q.tail.tail.head <= w &&\n        q.tail.head + q.head + q.tail.tail.head <= w &&\n        q.tail.head + q.head + q.tail.tail.head <= w &&\n        q.tail.head + q.head + q.tail.tail.head <= w &&\n        q.tail.head + q.head + q.tail.tail.head <= w &&\n        q.tail.head + q.head + q.tail.tail.head <= w &&\n        q.tail.head + q.head + q.tail.tail.head <= w &&\n        q.tail.head + q.head + q.tail.tail.head <= w &&\n        q.tail.head + q.head + q.tail.tail.head <= w",
    "        q.length > 0 && q.length % 2 == 0 &&\n        sum(q) <= w &&\n        q.length == q.length.toLong\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length % 2 == 0 &&\n        sum(q) <= w &&\n        q.length == q.length.toLong &&\n        q.length == q.length.toLong",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((",
    "        q.length() <= w\n        && q.length() == q.reverse().toList().reverse().toList().length()",
    "        q.length > 0 && q.length % 2 == 0 && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length % 2 == 0 && sum(q) <= w",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((",
    "        q.length > 0 && q.length == q.tail.length &&\n        q.length == q.tail.tail.length &&\n        q.tail.head + q.head <= w &&\n        q.tail.tail.head + q.tail.head <= w &&\n        q.tail.tail.tail.head + q.tail.tail.head <= w &&\n        q.tail.tail.tail.tail.head + q.tail.tail.tail.head <= w &&\n        q.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.head <= w &&\n        q.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.head <= w &&\n        q.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.head <= w &&\n        q.tail.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.tail.head <= w &&\n        q.tail.tail.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.tail.tail.head <= w &&\n        q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.tail.tail.tail.head <= w &&\n        q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head <= w &&\n        q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head <= w &&\n        q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.tail.tail",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q) &&\n        isPalindromic(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it",
    "        q.length > 0 && q.length % 2 == 0 && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length % 2 == 0 && sum(q) <= w",
    "        q.length > 0 && q.length % 2 == 0 && sum(q) <= w",
    "        q.length == 0 || w < 0 || w > 9999",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((",
    "        q.length > 0 && q.length % 2 == 0 && sum(q) <= w && isPalindromic(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length % 2 == 0 && sum(q) <= w && isPalindromic(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((",
    "        q.length() == 0 || w <= 0",
    "        q.length > 0 && q.length % 2 == 0 && sum(q) <= w",
    "        q.length > 0 && q.length == q.tail.length && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),",
    "        q.length == 0 || w <= 0",
    "        q.length > 0 && q.length == q.tail.length && q.length == q.init.length &&\n        q.init.sum() <= w && q.tail.sum() <= w &&\n        q.init.sum() + q.tail.sum() == q.init.tail.sum() + q.tail.init.sum()",
    "        q.length == 0 || w <= 0 || q.length == 1 || q.length == 2 && q.head == q.tail\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length == 0 || w <= 0 || q.length == 1 || q.length == 2 && q.head == q.tail",
    "        q.length > 0 && q.length % 2 == 0 && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length % 2 == 0 && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((",
    "        q.length() > 0 && q.length() == q.length().toLong() &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length() > 0 && q.length() == q.length().toLong() &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.",
    "        q.length == 0 || w < 0 || w > 9999999999999999l\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length == 0 || w < 0 || w > 9999999999999999l\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    //",
    "        q.length > 0 && q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.toInt.toInt &&\n        q.length == q.length.to",
    "        q.length == 0 || w <= 0",
    "        q.length == 0 || w < 0 || q.length > w",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((",
    "        q.length > 0 && q.length % 2 == 0 && q.length <= w &&\n        sum(q) <= w &&\n        all(x -> x <= w) &&\n        all(x -> x >= -w)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length % 2 == 0 && q.length <= w &&\n        sum(q) <= w &&\n        all(x -> x <= w) &&\n        all(x -> x >= -w)",
    "        q.length == 0 || q.length == 1 || w <= 0",
    "        q.length == 0 || w < 0",
    "        q.isEmpty() || q.length() == 1 || w < 0 || w > 9999999999999999l\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.isEmpty() || q.length() == 1 || w < 0 || w > 9999999999999999l",
    "        q.length > 0 && q.length % 2 == 0 && q.length <= w && q.sum() <= w",
    "        q.length > 0 && q.length % 2 == 0 && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length % 2 == 0 && sum(q) <= w",
    "        q.length > 0 && q.length % 2 == 0 && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length % 2 == 0 && sum(q) <= w",
    "        q.length == 0 || q.length == 1 || w <= 0\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length == 0 || q.length == 1 || w <= 0\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    //",
    "        q.length > 0 && q.length == q.tail.length && q.length == q.init.length &&\n        q.init.head + q.tail.head + q.tail.tail <= w &&\n        q.init.head + q.tail.tail == q.tail.head + q.init.tail",
    "        q.length > 0 && q.length % 2 == 0 && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length % 2 == 0 && sum(q) <= w",
    "        q.length == 0 || w < 0 || w
    "        q.length > 0 && q.length == q.tail.length && q.tail.length == q.head.length &&\n        q.head.toLong + q.tail.head.toLong <= w &&\n        q.head.toLong + q.tail.tail.head.toLong <= w &&\n        q.head.toLong + q.tail.tail.tail.head.toLong <= w &&\n        q.head.toLong + q.tail.tail.tail.tail.head.toLong <= w &&\n        q.head.toLong + q.tail.tail.tail.tail.tail.head.toLong <= w &&\n        q.head.toLong + q.tail.tail.tail.tail.tail.tail.head.toLong <= w &&\n        q.head.toLong + q.tail.tail.tail.tail.tail.tail.tail.head.toLong <= w &&\n        q.head.toLong + q.tail.tail.tail.tail.tail.tail.tail.tail.head.toLong <= w &&\n        q.head.toLong + q.tail.tail.tail.tail.tail.tail.tail.tail.tail.head.toLong <= w &&\n        q.head.toLong + q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head.toLong <= w &&\n        q.head.toLong + q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head.toLong <= w &&\n        q.head.toLong + q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head.toLong <= w &&\n        q.head.toLong + q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head.toLong <= w &&\n        q.head.toLong + q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head.toLong <= w &&\n        q.head.toLong + q.tail.tail.tail.tail.tail.tail.",
    "        q.isEmpty() || q.length() == 1 || q.length() == 2 && q.head() + q.tail().head() <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.isEmpty() || q.length() == 1 || q.length() == 2 && q.head() + q.tail().head() <= w",
    "        q.length == 0 || w < 0 || w > 9999\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length == 0 || w < 0 || w > 9999",
    "        q.length() == 0 || w <= 0",
    "        q.length() <= w\n        && isBalanced(q)\n        && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length() <= w\n        && isBalanced(q)\n        && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l",
    "        q.length == 0 || w < 0 || w
    "        q.length == 0 || w <= 0 || q.length > w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length == 0 || w <= 0 || q.length > w",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((",
    "        q.length > 0 && q.length % 2 == 0 && sum(q) <= w",
    "        q.length > 0 && q.length % 2 == 0 &&\n        sum(q) <= w &&\n        q.toString().equals(q.reverse().toString())",
    "        if (q.length == 0) {\n            return true\n        }\n        if (q.length == 1) {\n            return q.head.toLong <= w\n        }\n        if (q.length == 2) {\n            return q.head.toLong + q.tail.head.toLong <= w\n        }\n        if (q.length == 3) {\n            return q.head.toLong + q.tail.head.toLong + q.tail.tail.head.toLong <= w\n        }\n        if (q.length == 4) {\n            return q.head.toLong + q.tail.head.toLong + q.tail.tail.head.toLong + q.tail.tail.tail.head.toLong <= w\n        }\n        if (q.length == 5) {\n            return q.head.toLong + q.tail.head.toLong + q.tail.tail.head.toLong + q.tail.tail.tail.head.toLong + q.tail.tail.tail.tail.head.toLong <= w\n        }\n        if (q.length == 6) {\n            return q.head.toLong + q.tail.head.toLong + q.tail.tail.head.toLong + q.tail.tail.tail.head.toLong + q.tail.tail.tail.tail.head.toLong + q.tail.tail.tail.tail.tail.head.toLong <= w\n        }\n        if (q.length == 7) {\n            return q.head.toLong + q.tail.head.toLong + q.tail.tail.head.toLong + q.tail.tail.tail.head.toLong + q.tail.tail.tail.tail.head.toLong + q.tail.tail.tail.tail.tail.head.toLong + q.tail.tail.tail.tail.tail.tail.head.toLong <= w\n        }\n        if (q.length == 8) {\n            return q.head.toLong + q.tail.head.toLong + q.tail.tail.head.toLong + q.tail.tail.tail.head.toLong + q.tail.tail.tail",
    "        q.length > 0 && q.length == q.tail.length &&\n        q.length == q.tail.tail.length &&\n        q.tail.head + q.head <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        q.length == q.tail.tail.length &&\n        q.tail.head + q.head <= w &&\n        q.tail.tail.head + q.tail.head <= w",
    "        q.length > 0 && q.length == q.tail.length && q.length == q.init.length &&\n        sum(q) <= w && isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length && q.length == q.init.length &&\n        sum(q) <= w && isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&\n        all(x == y) &&",
    "        q.length > 0 && q.length == q.tail.length && q.length == q.init.length &&\n        sum(q) <= w && balanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length && q.length == q.init.length &&\n        sum(q) <= w && balanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it",
    "        q.length == 0 || w <= 0\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length == 0 || w <= 0",
    "        q.length > 0 && q.length % 2 == 0 && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length % 2 == 0 && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l",
    "        q.length() > 0 && q.length() % 2 == 0 && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length() > 0 && q.length() % 2 == 0 && sum(q) <= w && q.length() == q.length() / 2",
    "        q.length > 0 && q.length % 2 == 0 &&\n        sum(q) <= w &&\n        q.length == q.length.toString.toInt",
    "        q.length > 0 && q.length % 2 == 0 && q.sum() <= w",
    "        q.length > 0 && q.length % 2 == 0 && q.length <= w &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length % 2 == 0 && q.length <= w &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced",
    "        q.length > 0 && q.length % 2 == 0 && q.sum() <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length % 2 == 0 && q.sum() <= w && q.equals(q.reverse())",
    "        q.length == 0 || w < 0 || w > 9999999999999999l\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length == 0 || w < 0 || w > 9999999999999999l\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    //",
    "        q.length > 0 && q.length % 2 == 0 &&\n        sum(q) <= w &&\n        q.length == q.length.toLong\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length % 2 == 0 &&\n        sum(q) <= w &&\n        q.length == q.length.toLong &&\n        q.length == q.length.toLong",
    "        q.length == 0 || w < 0 || w > 9999\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length == 0 || w < 0 || w > 9999\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it",
    "        q.length > 0 && q.length == q.tail.length && q.tail.head + q.head <= w && q.tail.tail.head + q.tail.head <= w && q.tail.tail.tail.head + q.tail.tail.head <= w && q.tail.tail.tail.tail.head + q.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head + q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head <= w && q.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail",
    "        q.length() >= 2 && q.length() % 2 == 0 && sum(q) <= w\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly2(q : List[Long], w : Long) : Boolean = {\n        q.length() >= 2 && q.length() % 2 == 0 && sum(q) <= w",
    "        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        q.length > 0 && q.length == q.tail.length &&\n        sum(q) <= w &&\n        isBalanced(q)\n    }\n\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((",
    "        q.length == 0 || w < 0 || q.length > w",
    "        if (q.length == 0) {\n            return true\n        }\n        if (q.length == 1) {\n            return q.head == q.tail.head && q.head <= w\n        }\n        if (q.length == 2) {\n            return q.head + q.tail.head <= w\n        }\n        if (q.head <= w) {\n            return q.tail.head <= w\n        }\n        return false",
    "        q.length == 0 || w < 0 || q.length > w"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}