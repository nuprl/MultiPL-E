name: HumanEval_114_minSubArraySum
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
  \    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
  \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    // (-6l)\n\
  \    def minSubArraySum(nums : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
  \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
  \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
  \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong, 10l.toLong,\
  \ 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
  \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
  \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n   \
  \ assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
  \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
  \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n  \
  \  assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
  \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) == (-1l));\n\
  \    }\n\n}\n"
completions: ["        var sum = 0l\n        var min = nums.head\n        for(i <-\
    \ nums.size - 1) {\n            sum += nums.get(i)\n            if(sum < min)\
    \ {\n                min = sum\n            }\n            sum -= nums.get(i)\n\
    \        }\n        return min", "        var sum = 0l\n        var min = nums.head\n\
    \        for(i <- nums.size - 1) {\n            sum += nums.get(i)\n         \
    \   if(sum < min) min = sum\n            sum -= nums.get(i)\n        }\n     \
    \   return min", "        var result = nums.foldLeft(0l)\n        for (i <- nums.size\
    \ - 1) {\n            result = result + nums[i]\n            if (i > 0) {\n  \
    \              result = result + nums[i - 1]\n            }\n        }\n     \
    \   return result", "        val sum = nums.foldLeft(0l)\n        val result =\
    \ sum.min()\n        return result", "        val result = nums.foldLeft(0l)\n\
    \        val result2 = nums.foldLeft(0l)\n        val result3 = nums.foldLeft(0l)\n\
    \        val result4 = nums.foldLeft(0l)\n        val result5 = nums.foldLeft(0l)\n\
    \        val result6 = nums.foldLeft(0l)\n        val result7 = nums.foldLeft(0l)\n\
    \        val result8 = nums.foldLeft(0l)\n        val result9 = nums.foldLeft(0l)\n\
    \        val result10 = nums.foldLeft(0l)\n        val result11 = nums.foldLeft(0l)\n\
    \        val result12 = nums.foldLeft(0l)\n        val result13 = nums.foldLeft(0l)\n\
    \        val result14 = nums.foldLeft(0l)\n        val result15 = nums.foldLeft(0l)\n\
    \        val result16 = nums.foldLeft(0l)\n        val result17 = nums.foldLeft(0l)\n\
    \        val result18 = nums.foldLeft(0l)\n        val result19 = nums.foldLeft(0l)\n\
    \        val result20 = nums.foldLeft(0l)\n        val result21 = nums.foldLeft(0l)\n\
    \        val result22 = nums.foldLeft(0l)\n        val result23 = nums.foldLeft(0l)\n\
    \        val result24 = nums.foldLeft(0l)\n        val result25 = nums.foldLeft(0l)\n\
    \        val result26 = nums.foldLeft(0l)\n        val result27 = nums.foldLeft(0l)\n\
    \        val result28 = nums.foldLeft(0l)\n        val result29 = nums.foldLeft(0l)\n\
    \        val result30 = nums.foldLeft(0l)\n        val result31 = nums.foldLeft(0l)\n\
    \        val result32 = nums.foldLeft(0l)\n        val result33 = nums.foldLeft(0l)\n\
    \        val result34 = nums.foldLeft(0l)\n        val result", "        var sum\
    \ = 0l\n        var min = nums.head\n        for(i <- nums.size - 1) {\n     \
    \       sum += nums.get(i)\n            min = min(min, sum)\n            sum -=\
    \ nums.get(i)\n        }\n        return min", "        var sum = 0l\n       \
    \ var min = nums.head\n        var max = nums.head\n        for(i <- nums.size\
    \ - 1) {\n            sum += nums.get(i)\n            if(sum < min) min = sum\n\
    \            if(sum > max) max = sum\n            if(sum == 0l) {\n          \
    \      sum = 0l\n                min = nums.head\n                max = nums.head\n\
    \            }\n        }\n        return min", "        var sum = 0l\n      \
    \  var min = nums.head\n        for(var i = 1; i < nums.size(); i++) {\n     \
    \       sum += nums.apply(i)\n            if(sum < min) min = sum\n        }\n\
    \        return min", "        var sum = 0l\n        for(var i = 0; i < nums.length;\
    \ i++) {\n            sum += nums[i]\n            if(sum < 0) {\n            \
    \    sum = 0l\n            }\n        }\n        return sum", "        var sum\
    \ = 0l\n        var min = nums.head\n        for(var i = 1; i < nums.size(); i++)\
    \ {\n            sum += nums.apply(i)\n            if(sum < min) min = sum\n \
    \       }\n        return min", "        var sum = 0l\n        var min = nums.head\n\
    \        for(i <- nums.size - 1) {\n            sum += nums.get(i)\n         \
    \   if(sum < min) min = sum\n            sum -= nums.get(i)\n        }\n     \
    \   return min", "        var sum = 0l\n        for(var i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.apply(i)\n            if(sum < 0) {\n      \
    \          sum = 0l\n            }\n        }\n        return sum", "        var\
    \ sum = 0l\n        var min = nums.head\n        for(i <- nums.size - 1) {\n \
    \           sum += nums.get(i)\n            if(sum < min) min = sum\n        \
    \    sum -= nums.get(i)\n        }\n        return min", "        var sum = 0l\n\
    \        var min = nums.head\n        for(i <- nums.size - 1) {\n            sum\
    \ += nums.get(i)\n            if(sum < min) min = sum\n            sum -= nums.get(i)\n\
    \        }\n        return min", "        var sum = 0l\n        var min = nums.head\n\
    \        for(i <- nums.size - 1) {\n            sum += nums.get(i)\n         \
    \   if(sum < min) min = sum\n            if(sum > 0l) sum = 0l\n        }\n  \
    \      return min", "        var sum = 0l\n        var min = nums.head\n     \
    \   var max = nums.head\n        for(i <- nums.size - 1) {\n            sum +=\
    \ nums.get(i)\n            if(sum < min) min = sum\n            if(sum > max)\
    \ max = sum\n        }\n        return max - min", "        var sum = 0l\n   \
    \     var min = nums.head\n        for(var i = 1; i < nums.size; i++) {\n    \
    \        sum += nums.apply(i)\n            if(sum < min) min = sum\n        }\n\
    \        return min", "        var sum = 0l\n        var min = nums.head\n   \
    \     for(i <- nums.size - 1) {\n            sum += nums.get(i)\n            if(sum\
    \ < min) min = sum\n            if(sum > 0l) sum = 0l\n        }\n        return\
    \ min", "        var sum = 0l\n        for (i <- 0 until nums.length) {\n    \
    \        sum += nums[i]\n            if (sum < 0) {\n                sum = 0\n\
    \            }\n            if (i == nums.length - 1) {\n                return\
    \ sum\n            }\n            var j = i + 1\n            while (j < nums.length\
    \ && nums[j] >= 0) {\n                sum += nums[j]\n                j += 1\n\
    \            }\n            i = j - 1\n        }", "        var sum = 0l\n   \
    \     var min = nums.head\n        for(var i = 1; i < nums.size(); i++) {\n  \
    \          sum += nums.apply(i)\n            if(sum < min) {\n               \
    \ min = sum\n            }\n        }\n        return min", "        var sum =\
    \ 0l\n        for(var i = 0; i < nums.size(); i++) {\n            sum += nums[i]\n\
    \            if(sum < 0) {\n                sum = 0l\n            }\n        \
    \    if(i == nums.size() - 1 || nums[i + 1] > 0) {\n                sum += nums[i\
    \ + 1]\n            }\n        }\n        return sum", "        var sum = 0l\n\
    \        var min = nums.head\n        for (i <- nums.size - 1) {\n           \
    \ sum += nums.get(i)\n            if (sum < min) {\n                min = sum\n\
    \            }\n            sum -= nums.get(i)\n        }\n        return min",
  "        var sum = 0l\n        for(var i = 0; i < nums.length; i++) {\n        \
    \    sum += nums[i]\n            if(sum < 0) {\n                sum = 0l\n   \
    \         }\n        }\n        return sum", "        var sum = 0l\n        var\
    \ min = nums.head\n        for (var i = 1; i < nums.size(); i++) {\n         \
    \   sum += nums.apply(i)\n            if (sum < min) min = sum\n        }\n  \
    \      return min", "        var sum = 0l\n        for (i <- 0 until nums.length)\
    \ {\n            sum += nums[i]\n            if (sum < 0) {\n                sum\
    \ = 0l\n            }\n            if (i + 1 == nums.length) {\n             \
    \   return sum\n            }\n            sum += nums[i + 1]\n        }", " \
    \       var result = nums.reduce(0l)\n        for (i <- 0 until nums.size) {\n\
    \            var sum = nums.apply(i).toLong\n            if (sum < 0) {\n    \
    \            result = result + sum\n            } else {\n                result\
    \ = result + nums.apply(i).toLong\n                break\n            }\n    \
    \    }\n        return result", "        var sum = 0l\n        var min = nums.head\n\
    \        for(i <- nums.size - 1) {\n            sum += nums.get(i)\n         \
    \   if(sum < min) min = sum\n            sum -= nums.get(i)\n        }\n     \
    \   return min", "        var sum = 0l\n        var min = nums.head\n        for(i\
    \ <- nums.size - 1) {\n            sum += nums.get(i)\n            if(sum < min)\
    \ {\n                min = sum\n            }\n            sum -= nums.get(i)\n\
    \        }\n        return min", "        var sum = 0l\n        var min = nums.head\n\
    \        for(i <- nums.size - 1) {\n            sum += nums.get(i)\n         \
    \   if(sum < min) min = sum\n            sum -= nums.get(i)\n        }\n     \
    \   return min", "        val result = nums.foldLeft(0l)\n        val result2\
    \ = nums.foldLeft(0l)\n        return result2", "        var sum = 0l\n      \
    \  for(var i = 0; i < nums.size(); i++) {\n            sum += nums[i]\n      \
    \      if(sum < 0) {\n                sum = 0l\n            }\n        }\n   \
    \     return sum", "        var sum = 0l\n        var min = nums.head\n      \
    \  for(i <- nums.size - 1) {\n            sum += nums.get(i)\n            if(sum\
    \ < min) min = sum\n            sum -= nums.get(i)\n        }\n        return\
    \ min", "        val sum = 0l\n        for(i <- nums.size) {\n            sum\
    \ += nums.get(i)\n            if(sum < 0) {\n                sum = 0l\n      \
    \      }\n            if(i == nums.size - 1) {\n                val min = sum\n\
    \                for(j <- nums.size - 1) {\n                    min = min(min,\
    \ nums.get(j))\n                }\n                return min\n            }\n\
    \        }", "        var sum = 0l\n        for(var i = 0; i < nums.size(); i++)\
    \ {\n            sum += nums.apply(i)\n            if(sum < 0) {\n           \
    \     sum = 0l\n            }\n        }\n        return sum", "        var sum\
    \ = 0l\n        for(var i = 0; i < nums.size(); i++) {\n            sum += nums[i]\n\
    \            if(sum < 0) {\n                sum = 0l\n            }\n        \
    \    if(i == nums.size() - 1) {\n                return sum\n            }\n \
    \           var j = i + 1\n            while(j < nums.size() && nums[j] >= 0)\
    \ {\n                sum += nums[j]\n                j += 1\n            }\n \
    \           i = j - 1\n        }", "        var sum = 0l\n        var min = nums.head\n\
    \        for(i <- nums.tail) {\n            sum += nums.head\n            min\
    \ = _.min(min, nums.head + i)\n            nums = nums.tail\n        }\n     \
    \   return sum + min", "        var sum = 0l\n        for(i <- 0 until nums.size)\
    \ {\n            sum += nums[i]\n            if(sum < 0) {\n                sum\
    \ = 0l\n            }\n            if(i == nums.size - 1) {\n                return\
    \ sum\n            }\n            var j = i + 1\n            while(j < nums.size\
    \ && nums[j] == nums[i]) {\n                j += 1\n            }\n          \
    \  sum += nums[j] - nums[i]\n            if(sum < 0) {\n                sum =\
    \ 0l\n            }\n        }", "        val sum = 0l\n        for(i <- 0 until\
    \ nums.size) {\n            val sum_i = nums.get(i)\n            if(sum_i < 0)\
    \ {\n                sum = -sum\n            } else {\n                sum +=\
    \ sum_i\n            }\n            if(sum < 0) {\n                return -sum\n\
    \            }\n        }\n        return sum", "        var sum = 0l\n      \
    \  var min = nums.head\n        for(var i = 1; i < nums.size(); i++) {\n     \
    \       sum += nums.apply(i)\n            if(sum < min) {\n                min\
    \ = sum\n            }\n            sum -= nums.apply(i - 1)\n        }\n    \
    \    return min", "        var sum = 0l\n        for (i <- 0 until nums.length)\
    \ {\n            sum += nums[i]\n            if (sum < 0) {\n                sum\
    \ = 0\n            }\n            if (i + 1 < nums.length) {\n               \
    \ sum += nums[i + 1]\n            }\n        }\n        return sum", "       \
    \ var sum = 0l\n        var min = nums.head\n        for(var i = 1; i < nums.size();\
    \ i++) {\n            sum += nums.get(i)\n            if(sum < min) {\n      \
    \          min = sum\n            }\n            sum -= nums.get(i - 1)\n    \
    \    }\n        return min", "        var sum = 0l\n        var min = nums.head\n\
    \        for(var i = 1; i < nums.size(); i++) {\n            sum += nums.get(i)\n\
    \            if(sum < min) {\n                min = sum\n            }\n     \
    \   }\n        return min", "        var sum = 0l\n        var min = nums.head\n\
    \        for (i <- nums.size - 1) {\n            sum += nums.get(i)\n        \
    \    if (sum < min) min = sum\n            sum -= nums.get(i)\n        }\n   \
    \     return min", "        var result = nums.foldLeft(0l)\n        for (i <-\
    \ 0 until nums.size - 1) {\n            result = result + nums.get(i)\n      \
    \      if (result < 0) {\n                result = 0l\n            }\n       \
    \ }\n        return result", "        var sum = 0l\n        for (i <- 0 until\
    \ nums.length) {\n            sum += nums[i]\n            if (sum < 0) {\n   \
    \             sum = 0l\n            }\n            if (i == nums.length - 1) {\n\
    \                return sum\n            }\n            var j = i + 1\n      \
    \      while (j < nums.length && nums[j] < 0) {\n                j += 1\n    \
    \        }\n            if (j == nums.length) {\n                break\n     \
    \       }\n            sum += nums[j]\n        }", "        var sum = 0l\n   \
    \     var min = nums.head\n        for(i <- nums.size - 1) {\n            sum\
    \ += nums.get(i)\n            if(sum < min) {\n                min = sum\n   \
    \         }\n            sum -= nums.get(i)\n        }\n        return min", " \
    \       var sum = 0l\n        var min = nums.head\n        for(i <- nums.size\
    \ - 1) {\n            sum += nums.get(i)\n            if(sum < min) min = sum\n\
    \            if(sum > 0) sum = 0l\n        }\n        return min", "        var\
    \ sum = 0l\n        var min = nums.head\n        var max = nums.head\n       \
    \ for(i <- nums.size - 1) {\n            sum += nums.get(i)\n            if(sum\
    \ < min) min = sum\n            if(sum > max) max = sum\n        }\n        return\
    \ max - min", "        var result = nums.foldLeft(0l, (x, y) => x + y)\n     \
    \   if (result == 0) {\n            return -1l\n        } else {\n           \
    \ return result\n        }", "        var sum = 0l\n        for(var i = 0; i <\
    \ nums.size(); i++) {\n            var num = nums.apply(i)\n            if(num\
    \ == -1l) {\n                sum = -1l\n                break\n            } else\
    \ {\n                sum += num\n            }\n        }\n        if(sum == -1l)\
    \ {\n            return -1l\n        } else {\n            return sum\n      \
    \  }", "        var sum = 0l\n        for (var i = 0; i < nums.length; i++) {\n\
    \            sum += nums[i]\n            if (sum < 0) {\n                sum =\
    \ 0l\n            }\n            if (i == 0) {\n                continue\n   \
    \         }\n            var j = i - 1\n            while (j >= 0 && nums[j] <\
    \ 0) {\n                j--\n            }\n            if (j < 0) {\n       \
    \         sum = 0l\n            } else {\n                sum -= nums[j]\n   \
    \         }\n        }\n        return sum", "        var sum = 0l\n        var\
    \ min = nums.head\n        for(i <- nums.size - 1) {\n            sum += nums.get(i)\n\
    \            if(sum < min) min = sum\n            if(sum > 0) sum = 0\n      \
    \  }\n        return min", "        var sum = 0l\n        for(var i = 0; i < nums.size();\
    \ i++) {\n            var j = i\n            while(j < nums.size() && nums[j]\
    \ >= 0) {\n                sum += nums[j]\n                j += 1\n          \
    \  }\n        }\n        return sum", "        var sum = 0l\n        for (i <-\
    \ 0 until nums.length) {\n            sum = _.add(sum, nums[i])\n            if\
    \ (sum < 0) {\n                sum = 0l\n            }\n        }\n        return\
    \ sum", "        var sum = 0l\n        var min = nums.head\n        for(i <- nums.size\
    \ - 1) {\n            sum += nums.get(i)\n            if(sum < min) min = sum\n\
    \            if(sum > 0) sum = 0l\n        }\n        return min", "        var\
    \ sum = 0l\n        var min = nums.head\n        for(i <- nums.size - 1) {\n \
    \           sum += nums.get(i)\n            if(sum < min) min = sum\n        }\n\
    \        return min", "        var sum = 0l\n        for(var i = 0; i < nums.length;\
    \ i++) {\n            sum += nums[i]\n            if(sum < 0) {\n            \
    \    sum = 0l\n            }\n        }\n        return sum", "        var sum\
    \ = 0l\n        var min = nums.head\n        for(var i = 1; i < nums.size; i++)\
    \ {\n            sum += nums.get(i)\n            if(sum < min) min = sum\n   \
    \     }\n        return min", "        var sum = 0l\n        for (i <- 0 until\
    \ nums.length) {\n            sum = if (i == 0) {\n                sum(nums(i))\n\
    \            } else {\n                sum(nums(i)) + sum(nums(i - 1))\n     \
    \       }\n        }\n        return sum", "        var result = nums.foldLeft(0l)\n\
    \        for (i <- nums.size - 1) {\n            result = result + nums.get(i)\n\
    \            if (result < 0) {\n                result = 0l\n            }\n \
    \       }\n        return result", "        var sum = 0l\n        var min = nums.head\n\
    \        for (i <- nums.tail) {\n            sum += i\n            if (sum < min)\
    \ {\n                min = sum\n            }\n            sum -= nums.head\n\
    \        }\n        return min", "        var result = nums.foldLeft(0l, (x, y)\
    \ => x + y)\n        return result", "        var result = nums.foldLeft(0l, (acc,\
    \ x) => acc + x)\n        if (result == 0) {\n            return -1l\n       \
    \ } else {\n            return result\n        }", "        var sum = 0l\n   \
    \     var min = nums.head\n        for (i <- nums.size - 1) {\n            sum\
    \ += nums.get(i)\n            min = if (sum < min) min else sum\n            sum\
    \ -= nums.get(i)\n        }\n        return min", "        var result = nums.reduce(0l)\n\
    \        for (i <- 0 until nums.size - 1) {\n            var sum = nums.slice(i,\
    \ nums.size).reduce(0l)\n            if (sum < result) {\n                result\
    \ = sum\n            }\n        }\n        return result", "        var sum =\
    \ 0l\n        var min = nums.head\n        for (i <- nums.size - 1) {\n      \
    \      sum += nums.get(i)\n            if (sum < min) {\n                min =\
    \ sum\n            }\n            sum -= nums.get(i)\n        }\n        return\
    \ min", "        var sum = 0l\n        for (i <- 0 until nums.length) {\n    \
    \        sum += nums[i]\n            if (sum < 0) {\n                sum = 0l\n\
    \            }\n            if (i == nums.length - 1) {\n                return\
    \ sum\n            }\n            sum += nums[i + 1]\n        }", "        var\
    \ sum = 0l\n        for (i <- 0 until nums.length) {\n            sum += nums[i]\n\
    \            if (sum < 0) {\n                sum = 0\n            }\n        \
    \    if (i == nums.length - 1) {\n                return sum\n            }\n\
    \            var j = i + 1\n            while (j < nums.length && nums[j] >= 0)\
    \ {\n                sum += nums[j]\n                j += 1\n            }\n \
    \           i = j\n        }", "        var sum = 0l\n        for (var i = 0;\
    \ i < nums.size(); i++) {\n            sum = _.add(sum, nums.apply(i))\n     \
    \       if (sum < 0l) {\n                sum = 0l\n            }\n        }\n\
    \        return sum", "        var sum = 0l\n        var min = nums.head\n   \
    \     for(var i = 1; i < nums.size; i++) {\n            sum += nums.apply(i)\n\
    \            if(sum < min) min = sum\n        }\n        return min", "      \
    \  var result = nums.reduce(0l)\n        for (i <- 0 until nums.size - 1) {\n\
    \            var sum = nums.slice(i, nums.size).reduce(0l)\n            if (sum\
    \ < result) {\n                result = sum\n            }\n        }\n      \
    \  result", "        var sum = 0l\n        var min = nums.head\n        var max\
    \ = nums.head\n        for(i <- nums.size - 1) {\n            sum += nums.get(i)\n\
    \            if(sum < min) {\n                min = sum\n            }\n     \
    \       if(sum > max) {\n                max = sum\n            }\n        }\n\
    \        return max - min", "        var sum = 0l\n        var min = nums.head\n\
    \        for(i <- nums.tail) {\n            sum += nums.head\n            min\
    \ = if (sum < 0l) {\n                sum\n            } else {\n             \
    \   sum + nums.head\n            }\n            nums = nums.tail\n        }\n\
    \        sum", "        var sum = 0l\n        var min = nums.head\n        for\
    \ (i <- nums.size - 1) {\n            sum += nums.get(i)\n            if (sum\
    \ < min) min = sum\n            if (sum > 0l) sum = 0l\n        }\n        return\
    \ min", "        var sum = 0l\n        for(var i = 0; i < nums.length; i++) {\n\
    \            sum += nums[i]\n            if(sum < 0) {\n                sum =\
    \ 0l\n            }\n        }\n        return sum", "        var result = nums.foldLeft(0l)\n\
    \        for (i <- 0 until nums.length) {\n            result = result + nums[i]\n\
    \            if (i + 1 < nums.length) {\n                result = result + nums[i\
    \ + 1]\n            }\n        }\n        return result", "        var sum = 0l\n\
    \        var min = nums.head\n        for(i <- nums.size - 1) {\n            sum\
    \ += nums.get(i)\n            min = min(min, sum)\n            sum -= nums.get(i)\n\
    \        }\n        return min", "        var sum = 0l\n        for (i <- 0 until\
    \ nums.length) {\n            sum += nums[i]\n            if (sum < 0) {\n   \
    \             sum = 0l\n            }\n            if (i + 1 < nums.length) {\n\
    \                sum += nums[i + 1]\n            }\n        }\n        return\
    \ sum", "        var sum = 0l\n        for(var i = 0; i < nums.size(); i++) {\n\
    \            sum += nums[i]\n            if(sum < 0) {\n                sum =\
    \ 0l\n            }\n            if(i == nums.size() - 1) {\n                return\
    \ sum\n            }\n            var j = i + 1\n            while(j < nums.size()\
    \ && nums[j] >= 0) {\n                sum += nums[j]\n                j += 1\n\
    \            }\n            i = j - 1\n        }", "        var sum = 0l\n   \
    \     var min = nums.head\n        for(i <- nums.size - 1) {\n            sum\
    \ += nums.get(i)\n            if(sum < min) min = sum\n            sum -= nums.get(i)\n\
    \        }\n        return min", "        var sum = 0l\n        var min = nums.head\n\
    \        for(i <- nums.size - 1) {\n            sum += nums.get(i)\n         \
    \   if(sum < min) min = sum\n            sum -= nums.get(i)\n        }\n     \
    \   return min", "        var result = nums.foldLeft(0l)\n        for (i <- 1\
    \ to nums.size) {\n            result = result + nums.get(i)\n            if (i\
    \ < nums.size - 1) {\n                result = result + nums.get(i + 1)\n    \
    \        }\n        }\n        return result", "        var sum = 0l\n       \
    \ for (var i = 0; i < nums.length; i++) {\n            sum += nums[i]\n      \
    \      if (sum < 0) {\n                sum = 0l\n            }\n        }\n  \
    \      return sum", "        var sum = 0l\n        for (i <- 0 until nums.size)\
    \ {\n            sum += nums.get(i)\n            if (sum < 0) {\n            \
    \    sum = 0l\n            }\n            if (i == nums.size - 1) {\n        \
    \        return sum\n            }\n            sum += nums.get(i + 1)\n     \
    \   }", "        var sum = 0l\n        for(var i = 0; i < nums.length; i++) {\n\
    \            sum += nums[i]\n            if(sum < 0) {\n                sum =\
    \ 0l\n            }\n        }\n        return sum", "        var sum = 0l\n \
    \       var min = nums.head\n        for(i <- nums.size - 1) {\n            sum\
    \ += nums.get(i)\n            if(sum < min) min = sum\n            sum -= nums.get(i)\n\
    \        }\n        return min", "        val result = nums.foldLeft(0l)\n   \
    \     val result2 = nums.foldLeft(0l)\n        val result3 = nums.foldLeft(0l)\n\
    \        val result4 = nums.foldLeft(0l)\n        val result5 = nums.foldLeft(0l)\n\
    \        val result6 = nums.foldLeft(0l)\n        val result7 = nums.foldLeft(0l)\n\
    \        val result8 = nums.foldLeft(0l)\n        val result9 = nums.foldLeft(0l)\n\
    \        val result10 = nums.foldLeft(0l)\n        val result11 = nums.foldLeft(0l)\n\
    \        val result12 = nums.foldLeft(0l)\n        val result13 = nums.foldLeft(0l)\n\
    \        val result14 = nums.foldLeft(0l)\n        val result15 = nums.foldLeft(0l)\n\
    \        val result16 = nums.foldLeft(0l)\n        val result17 = nums.foldLeft(0l)\n\
    \        val result18 = nums.foldLeft(0l)\n        val result19 = nums.foldLeft(0l)\n\
    \        val result20 = nums.foldLeft(0l)\n        val result21 = nums.foldLeft(0l)\n\
    \        val result22 = nums.foldLeft(0l)\n        val result23 = nums.foldLeft(0l)\n\
    \        val result24 = nums.foldLeft(0l)\n        val result25 = nums.foldLeft(0l)\n\
    \        val result26 = nums.foldLeft(0l)\n        val result27 = nums.foldLeft(0l)\n\
    \        val result28 = nums.foldLeft(0l)\n        val result29 = nums.foldLeft(0l)\n\
    \        val result30 = nums.foldLeft(0l)\n        val result31 = nums.foldLeft(0l)\n\
    \        val result32 = nums.foldLeft(0l)\n        val result33 = nums.foldLeft(0l)\n\
    \        val result34 = nums.foldLeft(0l)\n        val result", "        var result\
    \ = nums.foldLeft(0l)\n        for (i <- 1 until nums.length) {\n            var\
    \ sum = nums.slice(i, nums.length).foldLeft(0l)\n            result = result +\
    \ sum\n            if (sum < 0) {\n                result = result + sum\n   \
    \         }\n        }\n        return result", "        var sum = 0l\n      \
    \  var min = nums.head\n        for(i <- nums.size - 1) {\n            sum +=\
    \ nums.get(i)\n            if(sum < min) min = sum\n            sum -= nums.get(i)\n\
    \        }\n        return min", "        var sum = 0l\n        var min = nums.head\n\
    \        for (i <- nums.size - 1) {\n            sum += nums.apply(i)\n      \
    \      if (sum < min) {\n                min = sum\n            }\n          \
    \  sum -= nums.apply(i)\n        }\n        return min", "        var sum = 0l\n\
    \        for (i <- 0 until nums.length) {\n            sum += nums[i]\n      \
    \      if (sum < 0) {\n                sum = 0l\n            }\n            if\
    \ (i + 1 < nums.length) {\n                sum += nums[i + 1]\n            }\n\
    \        }\n        return sum", "        var sum = 0l\n        var min = nums.head\n\
    \        for(i <- nums.size - 1) {\n            sum += nums.get(i)\n         \
    \   if(sum < min) min = sum\n            sum -= nums.get(i)\n        }\n     \
    \   return min", "        var result = nums.foldLeft(0l)\n        for (i <- 0\
    \ until nums.size - 1) {\n            var sum = nums.get(i)\n            for (j\
    \ <- i + 1 until nums.size) {\n                sum += nums.get(j)\n          \
    \      if (sum < 0) {\n                    sum = 0\n                }\n      \
    \          result = min(result, sum)\n            }\n        }\n        return\
    \ result", "        var result = nums.foldLeft(0l)\n        for (i <- 1 until\
    \ nums.length) {\n            result = result + nums[i]\n            if (i < nums.length\
    \ - 1) {\n                result = result + nums[i] - nums[i + 1]\n          \
    \  }\n        }\n        return result", "        var sum = 0l\n        for (i\
    \ <- 0 until nums.length) {\n            sum = _.max(sum, _.sum(nums.takeWhile(_\
    \ < i)))\n            i += 1\n        }\n        return sum", "        var sum\
    \ = 0l\n        for (var i = 0; i < nums.length; i++) {\n            sum += nums[i]\n\
    \            if (sum < 0) {\n                sum = 0l\n            }\n       \
    \ }\n        return sum", "        var result = nums.foldLeft(0l)\n        for\
    \ (i <- 0 until nums.size) {\n            var sum = nums.get(i)\n            var\
    \ j = i + 1\n            while (j < nums.size && nums.get(j) >= 0) {\n       \
    \         sum += nums.get(j)\n                j += 1\n            }\n        \
    \    result = min(result, sum)\n        }\n        return result", "        var\
    \ sum = 0l\n        var min = nums.head\n        for(i <- nums.tail) {\n     \
    \       sum += nums.head\n            min = min(min, nums.head)\n            nums\
    \ = nums.tail\n        }\n        sum += min\n        return sum", "        var\
    \ result = nums.foldLeft(0l)\n        for (i <- 1 to nums.size) {\n          \
    \  result = nums.slice(i).foldLeft(result)\n        }\n        return result",
  "        var sum = 0l\n        var min = nums.head\n        for(i <- nums.size -\
    \ 1) {\n            sum += nums.get(i)\n            if(sum < min) min = sum\n\
    \            sum -= nums.get(i)\n        }\n        return min", "        var\
    \ result = nums.foldLeft(0l)\n        for (i <- 0 until nums.length) {\n     \
    \       result = result + nums[i]\n            if (i + 1 < nums.length) {\n  \
    \              result = result + nums[i + 1]\n            }\n        }\n     \
    \   return result", "        var sum = 0l\n        var min = nums.head\n     \
    \   for(var i = 1; i < nums.size(); i++) {\n            sum += nums.get(i)\n \
    \           if(sum < min) min = sum\n        }\n        return min", "       \
    \ var sum = 0l\n        var min = nums.head\n        for (i <- nums.size - 1)\
    \ {\n            sum += nums.get(i)\n            if (sum < min) {\n          \
    \      min = sum\n            }\n            sum -= nums.get(i)\n        }\n \
    \       return min", "        var result = nums.foldLeft(0l, (acc, x) -> acc +\
    \ x)\n        return result", "        var sum = 0l\n        var min = nums.head\n\
    \        for(i <- nums.tail) {\n            sum += nums.head\n            min\
    \ = min(min, nums.head)\n            nums = nums.tail\n        }\n        return\
    \ sum + min", "        var sum = 0l\n        var min = nums.head\n        for(i\
    \ <- nums.size - 1) {\n            sum += nums.get(i)\n            if(sum < min)\
    \ min = sum\n            sum -= nums.get(i)\n        }\n        return min", " \
    \       var sum = 0l\n        var min = nums.head\n        for (i <- nums.tail)\
    \ {\n            sum += i\n            if (sum < min) {\n                min =\
    \ sum\n            }\n            sum -= nums.head\n        }\n        return\
    \ min", "        var sum = 0l\n        for (i <- 0 until nums.length) {\n    \
    \        sum += nums[i]\n            if (sum < 0) {\n                sum = 0l\n\
    \            }\n            if (i > 0 && nums[i] < 0) {\n                sum =\
    \ 0l\n            }\n            if (i == nums.length - 1 && nums[i] < 0) {\n\
    \                sum = 0l\n            }\n        }\n        return sum", "  \
    \      val result = nums.foldLeft(0l)\n        val result2 = nums.foldLeft(0l)\n\
    \        val result3 = nums.foldLeft(0l)\n        val result4 = nums.foldLeft(0l)\n\
    \        val result5 = nums.foldLeft(0l)\n        val result6 = nums.foldLeft(0l)\n\
    \        val result7 = nums.foldLeft(0l)\n        val result8 = nums.foldLeft(0l)\n\
    \        val result9 = nums.foldLeft(0l)\n        val result10 = nums.foldLeft(0l)\n\
    \        val result11 = nums.foldLeft(0l)\n        val result12 = nums.foldLeft(0l)\n\
    \        val result13 = nums.foldLeft(0l)\n        val result14 = nums.foldLeft(0l)\n\
    \        val result15 = nums.foldLeft(0l)\n        val result16 = nums.foldLeft(0l)\n\
    \        val result17 = nums.foldLeft(0l)\n        val result18 = nums.foldLeft(0l)\n\
    \        val result19 = nums.foldLeft(0l)\n        val result20 = nums.foldLeft(0l)\n\
    \        val result21 = nums.foldLeft(0l)\n        val result22 = nums.foldLeft(0l)\n\
    \        val result23 = nums.foldLeft(0l)\n        val result24 = nums.foldLeft(0l)\n\
    \        val result25 = nums.foldLeft(0l)\n        val result26 = nums.foldLeft(0l)\n\
    \        val result27 = nums.foldLeft(0l)\n        val result28 = nums.foldLeft(0l)\n\
    \        val result29 = nums.foldLeft(0l)\n        val result30 = nums.foldLeft(0l)\n\
    \        val result31 = nums.foldLeft(0l)\n        val result32 = nums.foldLeft(0l)\n\
    \        val result33 = nums.foldLeft(0l)\n        val result34 = nums.foldLeft(0l)\n\
    \        val result", "        var result = nums.foldLeft(0l)\n        for (i\
    \ <- 1 to nums.size - 1) {\n            var sum = nums.slice(i, nums.size).foldLeft(0l)\n\
    \            result = result + sum\n            if (sum < 0) {\n             \
    \   result = result + sum\n            }\n        }\n        return result", " \
    \       var sum = 0l\n        var min = nums.head\n        for(i <- nums.size\
    \ - 1) {\n            sum += nums.get(i)\n            if(sum < min) min = sum\n\
    \            sum -= nums.get(i)\n        }\n        return min", "        val\
    \ result = nums.foldLeft(0l)\n        val sum = nums.foldLeft(0l)\n        if\
    \ (sum < 0) {\n            result = -result\n        }\n        return result",
  "        var sum = 0l\n        var min = nums.head\n        for(i <- nums.size -\
    \ 1) {\n            sum += nums.get(i)\n            if(sum < min) min = sum\n\
    \            sum -= nums.get(i)\n        }\n        return min", "        var\
    \ result = nums.foldLeft(0l)\n        for (i <- 1 until nums.size) {\n       \
    \     var sum = nums.slice(i).foldLeft(0l)\n            result = if (sum < result)\
    \ result else sum\n        }\n        result", "        var result = nums.foldLeft(0l)\n\
    \        for (i <- 1 to nums.size - 1) {\n            var sum = nums.apply(i).toLong\n\
    \            var j = i + 1\n            while (j < nums.size) {\n            \
    \    sum = nums.apply(j).toLong + sum\n                j += 1\n            }\n\
    \            result = min(result, sum)\n        }\n        return result", " \
    \       var sum = 0l\n        var min = nums.head\n        for(i <- nums.size\
    \ - 1) {\n            sum += nums.get(i)\n            if(sum < min) min = sum\n\
    \            sum -= nums.get(i)\n        }\n        return min", "        var\
    \ result = nums.foldLeft(0l)\n        for (i <- nums.size - 1) {\n           \
    \ result = result + nums[i]\n            if (result < 0) {\n                result\
    \ = 0\n            }\n        }\n        return result", "        val result =\
    \ nums.foldLeft(0l)\n        if (result == 0) {\n            throw new RuntimeException(\"\
    Empty list\")\n        }\n        return result", "        var result = nums.foldLeft(0l)\n\
    \        for (i <- 1 to nums.size - 1) {\n            var sum = nums.slice(i,\
    \ nums.size).foldLeft(0l)\n            result = result + sum\n        }\n    \
    \    return result", "        val result = nums.foldLeft(0l)\n        result",
  "        var result = 0l\n        for (var i = 0; i < nums.length; i++) {\n    \
    \        var sum = nums[i]\n            for (var j = i + 1; j < nums.length; j++)\
    \ {\n                sum = _.min(sum, nums[j] + sum)\n            }\n        \
    \    result = _.max(result, sum)\n        }\n        return result", "       \
    \ var sum = 0l\n        var min = nums.head\n        for(i <- nums.size - 1) {\n\
    \            sum += nums.get(i)\n            if(sum < min) min = sum\n       \
    \     sum -= nums.get(i)\n        }\n        return min", "        var sum = 0l\n\
    \        for (i <- 0 until nums.length) {\n            sum += nums[i]\n      \
    \      if (sum < 0) {\n                sum = 0l\n            }\n            if\
    \ (i == nums.length - 1) {\n                return sum\n            }\n      \
    \      sum += nums[i + 1]\n        }", "        var sum = 0l\n        var min\
    \ = nums.head\n        for(i <- nums.size - 1) {\n            sum += nums.get(i)\n\
    \            if(sum < min) min = sum\n            sum -= nums.get(i)\n       \
    \ }\n        return min", "        var result = nums.foldLeft(0l, (x, y) => x\
    \ + y)\n        return result", "        var result = nums.foldLeft(0l)\n    \
    \    for (i <- 1 to nums.size) {\n            var sum = nums.slice(i, nums.size).foldLeft(0l)\n\
    \            if (sum < result) {\n                result = sum\n            }\n\
    \        }\n        result", "        var sum = 0l\n        var min = nums.head\n\
    \        for (i <- nums.size - 1) {\n            sum += nums.get(i)\n        \
    \    if (sum < min) {\n                min = sum\n            }\n            sum\
    \ -= nums.get(i)\n        }\n        return min", "        var sum = 0l\n    \
    \    for (i <- 0 until nums.length) {\n            sum += nums[i]\n          \
    \  if (sum < 0) {\n                sum = 0l\n            }\n            if (i\
    \ + 1 < nums.length) {\n                sum += nums[i + 1]\n            }\n  \
    \      }\n        return sum", "        var sum = 0l\n        var min = nums.head\n\
    \        for(var i = 1; i < nums.size; i++) {\n            sum += nums.apply(i)\n\
    \            if(sum < min) {\n                min = sum\n            }\n     \
    \   }\n        return min", "        var sum = 0l\n        for (var i = 0; i <\
    \ nums.size(); i++) {\n            sum += nums.apply(i)\n            if (sum <\
    \ 0) {\n                sum = 0\n            }\n        }\n        return sum",
  "        var sum = 0l\n        var min = nums.head\n        for(i <- nums.size -\
    \ 1) {\n            sum += nums.get(i)\n            min = min(min, sum)\n    \
    \        sum -= nums.get(i)\n        }\n        return min", "        var sum\
    \ = 0l\n        var min = nums.head\n        for(var i = 1; i < nums.size; i++)\
    \ {\n            sum += nums.apply(i)\n            if(sum < min) min = sum\n \
    \       }\n        return min", "        var result = nums.reduce(_.sum)\n   \
    \     if (result == 0) {\n            return -1l\n        } else {\n         \
    \   return result\n        }", "        var result = 0l\n        var sum = 0l\n\
    \        for(var i = 0; i < nums.size(); i++) {\n            sum += nums[i]\n\
    \            if(sum < 0) {\n                sum = 0l\n            }\n        \
    \    result = _.max(result, sum)\n        }\n        return result", "       \
    \ var sum = 0l\n        var min = nums.head\n        for (i <- nums.size - 1)\
    \ {\n            sum += nums.get(i)\n            if (sum < min) {\n          \
    \      min = sum\n            }\n            sum -= nums.get(i)\n        }\n \
    \       return min", "        var sum = 0l\n        var min = nums.head\n    \
    \    var max = nums.head\n        for(i <- nums.size - 1) {\n            sum +=\
    \ nums.apply(i)\n            if(sum < min) min = sum\n            if(sum > max)\
    \ max = sum\n        }\n        return min + max", "        var sum = 0l\n   \
    \     for (i <- 0 until nums.length) {\n            sum += nums[i]\n         \
    \   if (sum < 0) {\n                sum = 0l\n            }\n            if (i\
    \ == nums.length - 1) {\n                return sum\n            }\n         \
    \   var j = i + 1\n            while (j < nums.length && nums[j] >= 0) {\n   \
    \             sum += nums[j]\n                j += 1\n            }\n        \
    \    i = j\n        }", "        val sum = 0l\n        for (i <- 0 until nums.length)\
    \ {\n            val sum_i = sum + nums[i]\n            if (sum_i < 0) {\n   \
    \             sum = 0l\n            } else {\n                sum = sum_i\n  \
    \          }\n        }\n        return sum", "        var sum = 0l\n        var\
    \ min = nums.head\n        for(i <- nums.size - 1) {\n            sum += nums.get(i)\n\
    \            if(sum < min) min = sum\n            sum -= nums.get(i)\n       \
    \ }\n        return min", "        val sum = nums.foldLeft(0l)\n        val result\
    \ = nums.foldLeft(0l)\n        if (nums.isEmpty()) {\n            return result\n\
    \        }\n        val min = nums.head\n        val max = nums.last\n       \
    \ val sumOfSubArray = nums.foldLeft(0l)\n        for (i <- nums.size - 1) {\n\
    \            val subArray = nums.slice(i, nums.size)\n            val subArraySum\
    \ = subArray.foldLeft(0l)\n            if (subArray.size > 1) {\n            \
    \    val subArrayMin = subArray.head\n                val subArrayMax = subArray.last\n\
    \                val subArraySumOfSubArray = subArray.foldLeft(0l)\n         \
    \       val subArraySumOfSubArrayMin = subArraySumOfSubArray.min\n           \
    \     val subArraySumOfSubArrayMax = subArraySumOfSubArray.max\n             \
    \   val subArraySumOfSubArraySum = subArraySumOfSubArray.sum\n               \
    \ val subArraySumOfSubArraySumOfSubArray = subArraySumOfSubArraySum.sum\n    \
    \            val subArraySumOfSubArraySumOfSubArrayMin = subArraySumOfSubArraySumOfSubArray.min\n\
    \                val subArraySumOfSubArraySumOfSubArrayMax = subArraySumOfSubArraySumOfSubArray.max\n\
    \                val subArraySumOfSubArraySumOfSubArraySumOfSubArray = subArraySumOfSubArraySumOfSubArray.sum\n\
    \                val subArraySumOfSubArraySumOfSubArraySumOfSubArrayMin = subArraySumOfSubArraySumOfSubArraySumOfSubArray.min\n\
    \                val subArraySumOfSubArraySumOfSubArraySumOfSubArrayMax = subArraySumOfSubArraySumOfSubArraySumOfSubArray.max\n\
    \                val subArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArray\
    \ = subArraySumOfSubArraySumOfSubArraySumOfSubArray.sum\n                val subArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArrayMin\
    \ = subArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArray.min\n       \
    \         val subArraySumOfSubArraySumOfSubArraySumOfSub", "        var result\
    \ = nums.foldLeft(0l)\n        for (i <- nums.size - 1) {\n            result\
    \ = result + nums.get(i)\n            if (result < 0) {\n                result\
    \ = 0\n            }\n        }\n        return result", "        var sum = 0l\n\
    \        var min = nums.head\n        for(i <- nums.size - 1) {\n            sum\
    \ += nums.get(i)\n            if(sum < min) min = sum\n            sum -= nums.get(i)\n\
    \        }\n        return min", "        var sum = 0l\n        for(var i = 0;\
    \ i < nums.size(); i++) {\n            var num = nums.apply(i)\n            if(num\
    \ > 0) {\n                sum += num\n            }\n        }\n        var min\
    \ = sum\n        for(var i = 0; i < nums.size(); i++) {\n            var num =\
    \ nums.apply(i)\n            if(num > 0) {\n                var subSum = 0l\n\
    \                for(var j = i; j < nums.size(); j++) {\n                    subSum\
    \ += nums.apply(j)\n                    if(subSum < min) {\n                 \
    \       min = subSum\n                    }\n                }\n            }\n\
    \        }\n        return min", "        var sum = 0l\n        var min = nums.head\n\
    \        for(var i = 1; i < nums.size; i++) {\n            sum += nums.get(i)\n\
    \            if(sum < min) min = sum\n        }\n        return min", "      \
    \  var sum = 0l\n        var min = nums.head\n        for(i <- nums.size - 1)\
    \ {\n            sum += nums[i]\n            if(sum < min) {\n               \
    \ min = sum\n            }\n            sum -= nums[i]\n        }\n        return\
    \ min", "        val result = nums.foldLeft(0l)\n        result", "        val\
    \ sum = 0l\n        for (i <- 0 until nums.size()) {\n            sum += nums.get(i)\n\
    \            if (sum < 0) {\n                sum = 0l\n            }\n       \
    \     if (i == nums.size() - 1) {\n                return sum\n            }\n\
    \            for (j <- i + 1 until nums.size()) {\n                sum += nums.get(j)\n\
    \                if (sum < 0) {\n                    sum = 0l\n              \
    \  }\n                if (sum > 0) {\n                    break\n            \
    \    }\n            }\n        }", "        var sum = 0l\n        var min = nums.head\n\
    \        for(i <- nums.size - 1) {\n            sum += nums.get(i)\n         \
    \   if(sum < min) min = sum\n            sum -= nums.get(i)\n        }\n     \
    \   return min", "        var sum = 0l\n        var min = nums.head\n        for(i\
    \ <- nums.size - 1) {\n            sum += nums.get(i)\n            if(sum < min)\
    \ min = sum\n            if(sum > 0l) sum = 0l\n        }\n        return min",
  "        var sum = 0l\n        var min = nums.head\n        for(i <- nums.tail)\
    \ {\n            sum += nums.head\n            min = if (sum < 0l) {\n       \
    \         sum\n            } else {\n                sum + nums.head\n       \
    \     }\n        }\n        min", "        var result = nums.foldLeft(0l)\n  \
    \      for (i <- 1 to nums.size - 1) {\n            var sum = nums.apply(i).toLong\n\
    \            var left = nums.apply(i - 1).toLong\n            var right = nums.apply(i\
    \ + 1).toLong\n            result = result + Math.min(sum, left, right)\n    \
    \    }\n        return result", "        var sum = 0l\n        var min = nums.head\n\
    \        for(i <- nums.size - 1) {\n            sum += nums.get(i)\n         \
    \   if(sum < min) {\n                min = sum\n            }\n            sum\
    \ -= nums.get(i)\n        }\n        return min", "        var sum = 0l\n    \
    \    var min = nums.head\n        for(i <- nums.size - 1) {\n            sum +=\
    \ nums.get(i)\n            if(sum < min) min = sum\n            sum -= nums.get(i)\n\
    \        }\n        return min", "        var sum = 0l\n        var min = nums.head\n\
    \        for (i <- nums.size - 1) {\n            sum += nums.get(i)\n        \
    \    if (sum < min) {\n                min = sum\n            }\n            if\
    \ (sum > 0) {\n                sum = 0l\n            }\n        }\n        return\
    \ min", "        val result = nums.foldLeft(0l)\n        if (result == 0) {\n\
    \            return 0l\n        } else {\n            return result\n        }",
  "        var sum = 0l\n        for(var i = 0; i < nums.length; i++) {\n        \
    \    sum += nums[i]\n            if(sum < 0) {\n                sum = 0l\n   \
    \         }\n        }\n        return sum", "        val result = nums.foldLeft(0l)\n\
    \        val result2 = nums.foldLeft(0l)\n        return result2", "        var\
    \ sum = 0l\n        for (i <- 0 until nums.length) {\n            sum += nums[i]\n\
    \            if (sum < 0) {\n                sum = 0l\n            }\n       \
    \     if (i == nums.length - 1) {\n                return sum\n            }\n\
    \            sum += nums[i + 1]\n        }", "        var sum = 0l\n        var\
    \ min = nums.head\n        for(i <- nums.size - 1) {\n            sum += nums.apply(i)\n\
    \            if(sum < min) min = sum\n        }\n        return min", "      \
    \  var sum = 0l\n        for (var i = 0; i < nums.length; i++) {\n           \
    \ sum += nums[i]\n            if (sum < 0) {\n                sum = 0l\n     \
    \       }\n        }\n        return sum", "        var sum = 0l\n        for\
    \ (var i = 0; i < nums.size(); i++) {\n            sum += nums[i]\n          \
    \  if (sum < 0) {\n                sum = 0l\n            }\n            if (i\
    \ == nums.size() - 1) {\n                return sum\n            }\n         \
    \   var j = i + 1\n            for (; j < nums.size(); j++) {\n              \
    \  sum += nums[j]\n                if (sum < 0) {\n                    sum = 0l\n\
    \                }\n                if (sum == 0) {\n                    break\n\
    \                }\n            }\n            i = j - 1\n        }", "      \
    \  var sum = 0l\n        for(var i = 0; i < nums.size(); i++) {\n            sum\
    \ += nums[i]\n            if(sum < 0) {\n                sum = 0l\n          \
    \  }\n        }\n        return sum", "        var sum = 0l\n        for (var\
    \ i = 0; i < nums.length; i++) {\n            sum += nums[i]\n            if (sum\
    \ < 0) {\n                sum = 0l\n            }\n        }\n        return sum",
  "        var sum = 0l\n        var min = nums.head\n        for(i <- nums.size -\
    \ 1) {\n            sum += nums.get(i)\n            if(sum < min) min = sum\n\
    \            sum -= nums.get(i)\n        }\n        return min", "        var\
    \ sum = 0l\n        var min = nums.head\n        for(i <- nums.tail) {\n     \
    \       sum += nums.head\n            min = nums.head if nums.head < min else\
    \ min\n            nums = nums.tail\n        }\n        return sum + min", " \
    \       val sum = 0l\n        for (i <- 0 until nums.length) {\n            val\
    \ sum_i = sum + nums[i]\n            if (sum_i < 0) {\n                sum = 0l\n\
    \            } else {\n                sum = sum_i\n            }\n        }\n\
    \        return sum", "        var result = nums.reduce(_.sum)\n        if (result.isZero)\
    \ {\n            result = nums.reduce(_.sum)\n        }\n        return result",
  "        var sum = 0l\n        var min = nums.head\n        for(var i = 1; i < nums.size;\
    \ i++) {\n            sum += nums.apply(i)\n            if(sum < min) {\n    \
    \            min = sum\n            }\n            sum -= nums.apply(i)\n    \
    \    }\n        return min", "        var sum = 0l\n        for (var i = 0; i\
    \ < nums.length; i++) {\n            sum += nums[i]\n            if (sum < 0)\
    \ {\n                sum = 0l\n            }\n        }\n        return sum",
  "        var result = nums.foldLeft(0l, (x, y) => x + y)\n        return result",
  "        var sum = 0l\n        for(var i = 0; i < nums.size(); i++) {\n        \
    \    sum += nums.apply(i)\n            if(sum < 0) {\n                sum = 0l\n\
    \            }\n        }\n        return sum", "        var sum = 0l\n      \
    \  var min = nums.head\n        for (i <- nums.size - 1) {\n            sum +=\
    \ nums.get(i)\n            if (sum < min) {\n                min = sum\n     \
    \       }\n            sum -= nums.get(i)\n        }\n        return min", " \
    \       var sum = 0l\n        for (var i = 0; i < nums.size(); i++) {\n      \
    \      sum += nums.get(i)\n            if (sum < 0) {\n                sum = 0l\n\
    \            }\n            if (i == nums.size() - 1) {\n                return\
    \ sum\n            }\n            var j = i + 1\n            while (j < nums.size()\
    \ && nums.get(j) >= 0) {\n                sum += nums.get(j)\n               \
    \ j += 1\n            }\n            i = j - 1\n        }", "        var sum =\
    \ 0l\n        for (i <- 0 until nums.length) {\n            sum += nums[i]\n \
    \           if (sum < 0) {\n                sum = 0\n            }\n         \
    \   if (i == nums.length - 1) {\n                return sum\n            }\n \
    \           var j = i + 1\n            while (j < nums.length && nums[j] == nums[i])\
    \ {\n                j += 1\n            }\n            sum += nums[j] - nums[i]\n\
    \            i = j\n        }", "        var sum = 0l\n        var min = nums.head\n\
    \        var max = nums.head\n        for(i <- nums.size - 1) {\n            sum\
    \ += nums.get(i)\n            if(sum < min) {\n                min = sum\n   \
    \         }\n            if(sum > max) {\n                max = sum\n        \
    \    }\n        }\n        return max - min", "        var result = 0l\n     \
    \   for (var i = 0; i < nums.length; i++) {\n            var sum = nums[i]\n \
    \           for (var j = i + 1; j < nums.length; j++) {\n                sum +=\
    \ nums[j]\n                if (sum < 0) {\n                    sum = 0l\n    \
    \            }\n                if (sum > result) {\n                    result\
    \ = sum\n                }\n            }\n        }\n        return result",
  "        val result = nums.foldLeft(0l)\n        val sum = nums.foldLeft(0l)\n \
    \       if (sum == 0l) {\n            result\n        } else {\n            result\
    \ = result + nums.head\n            nums.tail.foreach(x -> {\n               \
    \ result = result + x\n                if (result < 0l) {\n                  \
    \  result = 0l\n                }\n            })\n        }\n        result",
  "        var sum = 0l\n        var min = nums.head\n        for(var i = 1; i < nums.size;\
    \ i++) {\n            sum += nums.apply(i)\n            if(sum < min) min = sum\n\
    \        }\n        return min", "        var sum = 0l\n        var min = nums.head\n\
    \        for(var i = 1; i < nums.size(); i++) {\n            sum += nums.apply(i)\n\
    \            if(sum < min) min = sum\n        }\n        return min", "      \
    \  var sum = 0l\n        var min = nums.head\n        for(i <- nums.size - 1)\
    \ {\n            sum += nums.get(i)\n            min = if (sum < min) min else\
    \ sum\n            sum -= nums.get(i)\n        }\n        return min", "     \
    \   var result = nums.reduce(0l)\n        for (i <- 0 until nums.size) {\n   \
    \         var sum = nums.slice(i, nums.size).reduce(0l)\n            if (sum <\
    \ result) {\n                result = sum\n            }\n        }\n        result",
  "        val result = nums.foldLeft(0l)\n        if (result == 0) {\n          \
    \  throw new IllegalArgumentException(\"List is empty\")\n        }\n        return\
    \ result", "        var sum = 0l\n        var min = nums.head\n        for(var\
    \ i = 1; i < nums.size(); i++) {\n            sum += nums.get(i)\n           \
    \ if(sum < min) {\n                min = sum\n            }\n        }\n     \
    \   return min", "        var sum = 0l\n        for(var i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.apply(i)\n            if(sum < 0) {\n      \
    \          sum = 0l\n            }\n        }\n        return sum", "        var\
    \ result = nums.foldLeft(0l)\n        for (i <- nums.size - 1) {\n           \
    \ result = result + nums.get(i)\n            if (result < 0) {\n             \
    \   result = 0l\n            }\n        }\n        return result", "        var\
    \ sum = 0l\n        var min = nums.head\n        for (i <- nums.size - 1) {\n\
    \            sum += nums.get(i)\n            min = min(min, sum)\n           \
    \ sum -= nums.get(i)\n        }\n        return min", "        var sum = 0l\n\
    \        var min = nums.head\n        for(i <- nums.size - 1) {\n            sum\
    \ += nums.get(i)\n            if(sum < min) min = sum\n            if(sum > 0)\
    \ sum = 0l\n        }\n        return min", "        var sum = 0l\n        var\
    \ min = nums.head\n        for(i <- nums.size - 1) {\n            sum += nums.get(i)\n\
    \            if(sum < min) min = sum\n            sum -= nums.get(i)\n       \
    \ }\n        return min", "        var sum = 0l\n        for(i <- 0 until nums.size)\
    \ {\n            sum += nums.get(i)\n            if(sum < 0) {\n             \
    \   sum = 0l\n            }\n            if(i == nums.size - 1) {\n          \
    \      return sum\n            }\n            sum += nums.get(i + 1)\n       \
    \ }", "        var sum = 0l\n        var min = nums.head\n        for(i <- nums.tail)\
    \ {\n            sum += nums.head\n            min = if (sum < 0l) {\n       \
    \         sum\n            } else {\n                sum + nums.head\n       \
    \     }\n            nums = nums.tail\n        }\n        sum", "        var sum\
    \ = 0l\n        var min = nums.head\n        var max = nums.head\n        for(i\
    \ <- nums.size - 1) {\n            sum += nums.get(i)\n            if(sum < min)\
    \ {\n                min = sum\n            }\n            if(sum > max) {\n \
    \               max = sum\n            }\n        }\n        return max - min",
  "        val result = nums.foldLeft(0l, (x, y) -> x + y)\n        if (result ==\
    \ 0) {\n            throw new RuntimeException(\"Empty list\")\n        }\n  \
    \      return result", "        var sum = 0l\n        var min = nums.head\n  \
    \      for(var i = 1; i < nums.size(); i++) {\n            sum += nums.apply(i)\n\
    \            if(sum < min) min = sum\n        }\n        return min", "      \
    \  var result = nums.reduce(0l)\n        for (i <- 0 until nums.size - 1) {\n\
    \            var sum = nums.apply(i).toLong\n            var j = i + 1\n     \
    \       while (j < nums.size) {\n                sum += nums.apply(j).toLong\n\
    \                j += 1\n            }\n            result = min(result, sum)\n\
    \        }\n        return result", "        val sum = nums.foldLeft(0l)\n   \
    \     val result = nums.foldLeft(0l)\n        if (nums.isEmpty()) {\n        \
    \    result\n        } else {\n            val min = nums.head\n            val\
    \ max = nums.tail.head\n            val sum = nums.foldLeft(0l)\n            val\
    \ result = nums.foldLeft(0l)\n            val minSum = nums.foldLeft(0l)\n   \
    \         val maxSum = nums.foldLeft(0l)\n            val minSum = nums.foldLeft(0l)\n\
    \            val maxSum = nums.foldLeft(0l)\n            val minSum = nums.foldLeft(0l)\n\
    \            val maxSum = nums.foldLeft(0l)\n            val minSum = nums.foldLeft(0l)\n\
    \            val maxSum = nums.foldLeft(0l)\n            val minSum = nums.foldLeft(0l)\n\
    \            val maxSum = nums.foldLeft(0l)\n            val minSum = nums.foldLeft(0l)\n\
    \            val maxSum = nums.foldLeft(0l)\n            val minSum = nums.foldLeft(0l)\n\
    \            val maxSum = nums.foldLeft(0l)\n            val minSum = nums.foldLeft(0l)\n\
    \            val maxSum = nums.foldLeft(0l)\n            val minSum = nums.foldLeft(0l)\n\
    \            val maxSum = nums.foldLeft(0l)\n            val minSum = nums.foldLeft(0l)\n\
    \            val maxSum = nums.foldLeft(0l)\n            val minSum = nums.foldLeft(0l)\n\
    \            val maxSum = nums.foldLeft(0l)\n            val minSum = nums.foldLeft(0l)\n\
    \            val maxSum = nums.foldLeft(0l)\n            val minSum = nums.foldLeft(0l)\n\
    \            val maxSum = nums.foldLeft(0l)\n            val minSum = nums.foldLeft(0l)\n\
    \            val maxSum = nums.foldLeft(0", "        var sum = 0l\n        var\
    \ min = nums.head\n        for(i <- nums.size - 1) {\n            sum += nums.get(i)\n\
    \            if(sum < min) min = sum\n            sum -= nums.get(i)\n       \
    \ }\n        return min", "        var sum = 0l\n        var min = nums.head\n\
    \        for (i <- nums.size - 1) {\n            sum += nums.get(i)\n        \
    \    if (sum < min) min = sum\n            sum -= nums.get(i)\n        }\n   \
    \     return min", "        var sum = 0l\n        for (i <- 0 until nums.length)\
    \ {\n            sum += nums[i]\n            if (sum < 0) {\n                sum\
    \ = 0\n            }\n            if (i == nums.length - 1) {\n              \
    \  return sum\n            }\n            sum += nums[i + 1]\n        }", "  \
    \      val sum = nums.foldLeft(0l)\n        val result = nums.foldLeft(0l, (acc,\
    \ x) => acc + x)\n        return result + sum", "        val result = nums.foldLeft(0l)\n\
    \        val result2 = nums.foldLeft(0l)\n        val result3 = nums.foldLeft(0l)\n\
    \        val result4 = nums.foldLeft(0l)\n        val result5 = nums.foldLeft(0l)\n\
    \        val result6 = nums.foldLeft(0l)\n        val result7 = nums.foldLeft(0l)\n\
    \        val result8 = nums.foldLeft(0l)\n        val result9 = nums.foldLeft(0l)\n\
    \        val result10 = nums.foldLeft(0l)\n        val result11 = nums.foldLeft(0l)\n\
    \        val result12 = nums.foldLeft(0l)\n        val result13 = nums.foldLeft(0l)\n\
    \        val result14 = nums.foldLeft(0l)\n        val result15 = nums.foldLeft(0l)\n\
    \        val result16 = nums.foldLeft(0l)\n        val result17 = nums.foldLeft(0l)\n\
    \        val result18 = nums.foldLeft(0l)\n        val result19 = nums.foldLeft(0l)\n\
    \        val result20 = nums.foldLeft(0l)\n        val result21 = nums.foldLeft(0l)\n\
    \        val result22 = nums.foldLeft(0l)\n        val result23 = nums.foldLeft(0l)\n\
    \        val result24 = nums.foldLeft(0l)\n        val result25 = nums.foldLeft(0l)\n\
    \        val result26 = nums.foldLeft(0l)\n        val result27 = nums.foldLeft(0l)\n\
    \        val result28 = nums.foldLeft(0l)\n        val result29 = nums.foldLeft(0l)\n\
    \        val result30 = nums.foldLeft(0l)\n        val result31 = nums.foldLeft(0l)\n\
    \        val result32 = nums.foldLeft(0l)\n        val result33 = nums.foldLeft(0l)\n\
    \        val result34 = nums.foldLeft(0l)\n        val result"]
stop_tokens:
- "\n    }\n"
