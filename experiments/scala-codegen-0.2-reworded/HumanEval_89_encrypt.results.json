{
  "name": "HumanEval_89_encrypt",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s6 = s5.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s25 = s24.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpopg0xkp1.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            var c = s.charAt(i)\n            result = result + c\n            if (i + 2 < s.length) {\n                result = result + s.charAt(i + 2)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293026,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbxri78gg.scala:29)\n\tat Problem.main(tmpbxri78gg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[^a-z]\",\"\")\n        var s6 = s5.replaceAll(\"[^a-z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-z]\",\"\")\n        var s25 = s24.replaceAll(\"[^a-z]\",\"\")\n        var s26 = s25.replaceAll(\"[^a-z]\",\"\")\n        var s27 = s26.replaceAll(\"[^a-z]\",\"\")\n        var s28 = s27.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpujf0jfvv.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[^a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[aeiou]\", \"\")\n        var s5 = s4.replaceAll(\"[aeiou]\", \"\")\n        var s6 = s5.replaceAll(\"[aeiou]\", \"\")\n        var s7 = s6.replaceAll(\"[aeiou]\", \"\")\n        var s8 = s7.replaceAll(\"[aeiou]\", \"\")\n        var s9 = s8.replaceAll(\"[aeiou]\", \"\")\n        var s10 = s9.replaceAll(\"[aeiou]\", \"\")\n        var s11 = s10.replaceAll(\"[aeiou]\", \"\")\n        var s12 = s11.replaceAll(\"[aeiou]\", \"\")\n        var s13 = s12.replaceAll(\"[aeiou]\", \"\")\n        var s14 = s13.replaceAll(\"[aeiou]\", \"\")\n        var s15 = s14.replaceAll(\"[aeiou]\", \"\")\n        var s16 = s15.replaceAll(\"[aeiou]\", \"\")\n        var s17 = s16.replaceAll(\"[aeiou]\", \"\")\n        var s18 = s17.replaceAll(\"[aeiou]\", \"\")\n        var s19 = s18.replaceAll(\"[aeiou]\", \"\")\n        var s20 = s19.replaceAll(\"[aeiou]\", \"\")\n        var s21 = s20.replaceAll(\"[aeiou]\", \"\")\n        var s22 = s21.replaceAll(\"[aeiou]\", \"\")\n        var s23 = s22.replaceAll(\"[aeiou]\", \"\")\n        var s24 = s23.replaceAll(\"[aeiou]\", \"\")\n        var s25 = s24.replaceAll(\"[aeiou]\", \"\")\n        var s26 = s25.replaceAll(\"[aeiou]\", \"\")\n        var s27 = s26.replaceAll(\"[aeiou]\", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk1psboi8.scala:44:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        var s4 = \"\"\n        var s5 = \"\"\n        var s6 = \"\"\n        var s7 = \"\"\n        var s8 = \"\"\n        var s9 = \"\"\n        var s10 = \"\"\n        var s11 = \"\"\n        var s12 = \"\"\n        var s13 = \"\"\n        var s14 = \"\"\n        var s15 = \"\"\n        var s16 = \"\"\n        var s17 = \"\"\n        var s18 = \"\"\n        var s19 = \"\"\n        var s20 = \"\"\n        var s21 = \"\"\n        var s22 = \"\"\n        var s23 = \"\"\n        var s24 = \"\"\n        var s25 = \"\"\n        var s26 = \"\"\n        var s27 = \"\"\n        var s28 = \"\"\n        var s29 = \"\"\n        var s30 = \"\"\n        var s31 = \"\"\n        var s32 = \"\"\n        var s33 = \"\"\n        var s34 = \"\"\n        var s35 = \"\"\n        var s36 = \"\"\n        var s37 = \"\"\n        var s38 = \"\"\n        var s39 = \"\"\n        var s40 = \"\"\n        var s41 = \"\"\n        var s42 = \"\"\n        var s43 = \"\"\n        var s44 = \"\"\n        var s45 = \"\"\n        var s46 = \"\"\n        var s47 = \"\"\n        var s48 = \"\"\n        var s49 = \"\"\n        var s50 = \"\"\n        var s51 = \"\"\n        var s52 = \"\"\n        var s53 = \"\"\n        var s54 = \"\"\n        var s55 = \"\"\n        var s56 = \"\"\n        var s57 = \"\"\n        var s58 = \"\"\n        var s59 = \"\"\n        var s60 = \"\"\n        var s61 = \"\"\n        var s62 = \"\"\n        var s63 = \"\"\n        var s64 = \"\"\n        var s65 = \"\"\n        var s66 = \"\"\n        var s67 = \"\"\n        var s68 = \"\"\n        var s69 = \"\"\n        var s70 = \"\"\n        var s71 = \"\"\n        var s72 = \"\"\n        var s73 = \"\"\n        var s\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9mne5sgs.scala:91:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9mne5sgs.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms2\u001b[0m = s.toLowerCase()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value toLowerCase is not a member of Null\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9mne5sgs.scala:91:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"a\",\"z\")\n        var s5 = s4.replaceAll(\"b\",\"y\")\n        var s6 = s5.replaceAll(\"c\",\"x\")\n        var s7 = s6.replaceAll(\"d\",\"w\")\n        var s8 = s7.replaceAll(\"e\",\"v\")\n        var s9 = s8.replaceAll(\"f\",\"u\")\n        var s10 = s9.replaceAll(\"g\",\"t\")\n        var s11 = s10.replaceAll(\"h\",\"s\")\n        var s12 = s11.replaceAll(\"i\",\"r\")\n        var s13 = s12.replaceAll(\"j\",\"q\")\n        var s14 = s13.replaceAll(\"k\",\"p\")\n        var s15 = s14.replaceAll(\"l\",\"o\")\n        var s16 = s15.replaceAll(\"m\",\"n\")\n        var s17 = s16.replaceAll(\"n\",\"m\")\n        var s18 = s17.replaceAll(\"o\",\"l\")\n        var s19 = s18.replaceAll(\"p\",\"k\")\n        var s20 = s19.replaceAll(\"q\",\"j\")\n        var s21 = s20.replaceAll(\"r\",\"i\")\n        var s22 = s21.replaceAll(\"s\",\"h\")\n        var s23 = s22.replaceAll(\"t\",\"g\")\n        var s24 = s23.replaceAll(\"u\",\"f\")\n        var s25 = s24.replaceAll(\"v\",\"e\")\n        var s26 = s25.replaceAll(\"w\",\"d\")\n        var s27 = s26.replaceAll(\"x\",\"c\")\n        var s28 = s27.replaceAll(\"y\",\"b\")\n        var s29 = s28.replaceAll(\"z\",\"a\")\n        return s29\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5h5fv9_g.scala:49)\n\tat Problem.main(tmp5h5fv9_g.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[^a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[^a-z]\", \"\")\n        var s5 = s4.replaceAll(\"[^a-z]\", \"\")\n        var s6 = s5.replaceAll(\"[^a-z]\", \"\")\n        var s7 = s6.replaceAll(\"[^a-z]\", \"\")\n        var s8 = s7.replaceAll(\"[^a-z]\", \"\")\n        var s9 = s8.replaceAll(\"[^a-z]\", \"\")\n        var s10 = s9.replaceAll(\"[^a-z]\", \"\")\n        var s11 = s10.replaceAll(\"[^a-z]\", \"\")\n        var s12 = s11.replaceAll(\"[^a-z]\", \"\")\n        var s13 = s12.replaceAll(\"[^a-z]\", \"\")\n        var s14 = s13.replaceAll(\"[^a-z]\", \"\")\n        var s15 = s14.replaceAll(\"[^a-z]\", \"\")\n        var s16 = s15.replaceAll(\"[^a-z]\", \"\")\n        var s17 = s16.replaceAll(\"[^a-z]\", \"\")\n        var s18 = s17.replaceAll(\"[^a-z]\", \"\")\n        var s19 = s18.replaceAll(\"[^a-z]\", \"\")\n        var s20 = s19.replaceAll(\"[^a-z]\", \"\")\n        var s21 = s20.replaceAll(\"[^a-z]\", \"\")\n        var s22 = s21.replaceAll(\"[^a-z]\", \"\")\n        var s23 = s22.replaceAll(\"[^a-z]\", \"\")\n        var s24 = s23.replaceAll(\"[^a-z]\", \"\")\n        var s25 = s24.replaceAll(\"[^a-z]\", \"\")\n        var s26 = s25.replaceAll(\"[^a-z]\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293021,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpel8foncj.scala:42:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms26\u001b[0m = s25.replaceAll(\"[^a-z]\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpel8foncj.scala:44:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpel8foncj.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpel8foncj.scala:44:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: [^a-z]def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"/\",\"\")\n        var s6 = s5.replaceAll(\"\\\\.\",\"\")\n        var s7 = s6.replaceAll(\"\\\\,\",\"\")\n        var s8 = s7.replaceAll(\"\\\\:\",\"\")\n        var s9 = s8.replaceAll(\"\\\\;\",\"\")\n        var s10 = s9.replaceAll(\"\\\\?\",\"\")\n        var s11 = s10.replaceAll(\"\\\\!\",\"\")\n        var s12 = s11.replaceAll(\"\\\\(\",\"\")\n        var s13 = s12.replaceAll(\"\\\\)\",\"\")\n        var s14 = s13.replaceAll(\"\\\\+\",\"\")\n        var s15 = s14.replaceAll(\"\\\\-\",\"\")\n        var s16 = s15.replaceAll(\"\\\\*\",\"\")\n        var s17 = s16.replaceAll(\"\\\\/\",\"\")\n        var s18 = s17.replaceAll(\"\\\\^\",\"\")\n        var s19 = s18.replaceAll(\"\\\\%\",\"\")\n        var s20 = s19.replaceAll(\"\\\\$\",\"\")\n        var s21 = s20.replaceAll(\"\\\\&\",\"\")\n        var s22 = s21.replaceAll(\"\\\\#\",\"\")\n        var s23 = s22.replaceAll(\"\\\\@\",\"\")\n        var s24 = s23.replaceAll(\"\\\\$\",\"\")\n        var s25 = s24.replaceAll(\"\\\\_\",\"\")\n        var s26 = s25.replaceAll(\"\\\\-\",\"\")\n        var s27 = s26.replaceAll(\"\\\\+\",\"\")\n        var s28 = s27.replaceAll(\"\\\\=\",\"\")\n        var s29 = s28.replaceAll(\"\\\\<\",\"\")\n        var s30 = s29.replaceAll(\"\\\\>\",\"\")\n        var s31 = s30.replaceAll(\"\\\\;\",\"\")\n        var s32 = s31.replaceAll(\"\\\\,\",\"\")\n        var s33 = s32.replaceAll(\"\\\\:\",\"\")\n        var s34 = s33.\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi7y5gw47.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi7y5gw47.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\"\")\n    }\n\n    // Create a function decrypt that takes a string as an argument and\n    // returns a string decrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift up by two multiplied to two places.\n    // For example:\n    // >>> decrypt((\"lm\"))\n    // (\"hi\")\n    // >>> decrypt((\"ewhjklnop\"))\n    // (\"asdfghjkl\")\n    // >>> decrypt((\"kj\"))\n    // (\"gf\")\n    // >>> decrypt((\"ix\"))\n    // (\"et\")\n    def decrypt(s : String) : String = {\n        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\"\")\n    }\n\n    // Create a function rotates that takes a string as an argument and\n    // returns a string rotated by a number of places.\n    // For example:\n    // >>> rotates((\"hi\"))\n    // (\"hi\")\n    // >>> rotates((\"asdfghjkl\"))\n    // (\"asdfghjkl\")\n    // >>> rotates((\"gf\"))\n    // (\"gf\")\n    // >>> rotates((\"et\"))\n    // (\"et\")\n    def rotates(s : String) : String = {\n        s.map(_.toCharArray).map(Problem.rotate).mkString(\"\")\n    }\n\n    // Create a function rotates that takes a string as an argument and\n    // returns a string rotated by a number of places.\n    // For example:\n    // >>> rotates((\"hi\"))\n    // (\"hi\")\n    // >>> rotates((\"asdfghjkl\"))\n    // (\"asdfghjkl\")\n    // >>> rotates((\"gf\"))\n    // (\"gf\")\n    // >>> rotates((\"et\"))\n    // (\"et\")\n    def rotates(s : String) : String = {\n        s.map(_.toCharArray).map(Problem.rotate).mkString(\"\")\n    }\n\n    // Create a\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293025,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdw4hgarj.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdw4hgarj.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m              ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value toCharArray is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdw4hgarj.scala:35:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m              ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value toCharArray is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdw4hgarj.scala:50:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        s.map(_.toCharArray).map(Problem.rotate).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m              ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value toCharArray is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdw4hgarj.scala:65:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m        s.map(_.toCharArray).map(Problem.rotate).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m              ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value toCharArray is not a member of Char\n\u001b[31m\u001b[31m-- [E120] Naming Error: /tmp/tmpdw4hgarj.scala:64:8 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mrotates\u001b[0m(\u001b[36ms\u001b[0m : \u001b[35mString\u001b[0m) : \u001b[35mString\u001b[0m = {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mDouble definition:\n\u001b[31m   |\u001b[0mdef rotates(s: String): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 49 and\n\u001b[31m   |\u001b[0mdef rotates(s: String): String in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m at line 64\n\u001b[31m   |\u001b[0mhave the same type after erasure.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mConsider adding a @targetName annotation to one of the conflicting definitions\n\u001b[31m   |\u001b[0mfor",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[^a-z]\",\"\")\n        var s6 = s5.replaceAll(\"[^a-z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-z]\",\"\")\n        var s25 = s24.replaceAll(\"[^a-z]\",\"\")\n        var s26 = s25.replaceAll(\"[^a-z]\",\"\")\n        var s27 = s26.replaceAll(\"[^a-z]\",\"\")\n        var s28 = s27.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpujf0jfvv.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        s.map(c => c.toLowerCase()).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c +\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmppyymvj3d.scala:18:1031 -------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        s.map(\u001b[36mc\u001b[0m => c.toLowerCase()).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c +\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"_\",\"\")\n        var s6 = s5.replaceAll(\"'\",\"\")\n        var s7 = s6.replaceAll(\"\\\"\",\"\")\n        var s8 = s7.replaceAll(\"/\",\"\")\n        var s9 = s8.replaceAll(\"\\\\\",\"\")\n        var s10 = s9.replaceAll(\"\\\\.\",\"\")\n        var s11 = s10.replaceAll(\"\\\\,\",\"\")\n        var s12 = s11.replaceAll(\"\\\\:\",\"\")\n        var s13 = s12.replaceAll(\"\\\\;\",\"\")\n        var s14 = s13.replaceAll(\"\\\\?\",\"\")\n        var s15 = s14.replaceAll(\"\\\\!\",\"\")\n        var s16 = s15.replaceAll(\"\\\\$\",\"\")\n        var s17 = s16.replaceAll(\"\\\\%\",\"\")\n        var s18 = s17.replaceAll(\"\\\\^\",\"\")\n        var s19 = s18.replaceAll(\"\\\\&\",\"\")\n        var s20 = s19.replaceAll(\"\\\\*\",\"\")\n        var s21 = s20.replaceAll(\"\\\\(\",\"\")\n        var s22 = s21.replaceAll(\"\\\\)\",\"\")\n        var s23 = s22.replaceAll(\"\\\\+\",\"\")\n        var s24 = s23.replaceAll(\"\\\\-\",\"\")\n        var s25 = s24.replaceAll(\"\\\\=\",\"\")\n        var s26 = s25.replaceAll(\"\\\\>\",\"\")\n        var s27 = s26.replaceAll(\"\\\\<\",\"\")\n        var s28 = s27.replaceAll(\"\\\\@\",\"\")\n        var s29 = s28.replaceAll(\"\\\\#\",\"\")\n        var s30 = s29.replaceAll(\"\\\\$\",\"\")\n        var s31 = s30.replaceAll(\"\\\\%\",\"\")\n        var s32 = s31.replaceAll(\"\\\\^\",\"\")\n        var s33 = s32.replaceAll(\"\\\\&\",\"\")\n        var s34 = s33.replaceAll(\"\\\\\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmppnwjestz.scala:50:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms34\u001b[0m = s33.replaceAll(\"\\\\\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmppnwjestz.scala:52:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppnwjestz.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppnwjestz.scala:52:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: \\def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[^a-z]\",\"\")\n        var s6 = s5.replaceAll(\"[^a-z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-z]\",\"\")\n        var s25 = s24.replaceAll(\"[^a-z]\",\"\")\n        var s26 = s25.replaceAll(\"[^a-z]\",\"\")\n        var s27 = s26.replaceAll(\"[^a-z]\",\"\")\n        var s28 = s27.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpujf0jfvv.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8qjps38h.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m              ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value toCharArray is not a member of Char\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var a = \"abcdefghijklmnopqrstuvwxyz\"\n        var b = \"zyxwvutsrqponmlkjihgfedcba\"\n        var c = \"\"\n        for (i <- 0 until s.length) {\n            c = c + a[(a.length - 1 - i) % 26]\n        }\n        return c\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293017,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvqw3mx8a.scala:22:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            c = c + a[(a.length \u001b[35m-\u001b[0m \u001b[31m1\u001b[0m \u001b[35m-\u001b[0m \u001b[35mi\u001b[0m) \u001b[35m%\u001b[0m \u001b[31m26\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: type %\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[^a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[^a-z]\", \"\")\n        var s5 = s4.replaceAll(\"[^a-z]\", \"\")\n        var s6 = s5.replaceAll(\"[^a-z]\", \"\")\n        var s7 = s6.replaceAll(\"[^a-z]\", \"\")\n        var s8 = s7.replaceAll(\"[^a-z]\", \"\")\n        var s9 = s8.replaceAll(\"[^a-z]\", \"\")\n        var s10 = s9.replaceAll(\"[^a-z]\", \"\")\n        var s11 = s10.replaceAll(\"[^a-z]\", \"\")\n        var s12 = s11.replaceAll(\"[^a-z]\", \"\")\n        var s13 = s12.replaceAll(\"[^a-z]\", \"\")\n        var s14 = s13.replaceAll(\"[^a-z]\", \"\")\n        var s15 = s14.replaceAll(\"[^a-z]\", \"\")\n        var s16 = s15.replaceAll(\"[^a-z]\", \"\")\n        var s17 = s16.replaceAll(\"[^a-z]\", \"\")\n        var s18 = s17.replaceAll(\"[^a-z]\", \"\")\n        var s19 = s18.replaceAll(\"[^a-z]\", \"\")\n        var s20 = s19.replaceAll(\"[^a-z]\", \"\")\n        var s21 = s20.replaceAll(\"[^a-z]\", \"\")\n        var s22 = s21.replaceAll(\"[^a-z]\", \"\")\n        var s23 = s22.replaceAll(\"[^a-z]\", \"\")\n        var s24 = s23.replaceAll(\"[^a-z]\", \"\")\n        var s25 = s24.replaceAll(\"[^a-z]\", \"\")\n        var s26 = s25.replaceAll(\"[^a-z]\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293021,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpel8foncj.scala:42:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms26\u001b[0m = s25.replaceAll(\"[^a-z]\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpel8foncj.scala:44:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpel8foncj.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpel8foncj.scala:44:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: [^a-z]def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            result += s[i]\n            if (i + 2 < s.length) {\n                result += s[i + 2]\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpk4zes3q_.scala:20:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            result += s[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk4zes3q_.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            result += s[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpk4zes3q_.scala:22:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                result += s[\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[31m2\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk4zes3q_.scala:22:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                result += s[\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[31m2\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: type +\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[^a-z]\",\"\")\n        var s6 = s5.replaceAll(\"[^a-z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-z]\",\"\")\n        var s25 = s24.replaceAll(\"[^a-z]\",\"\")\n        var s26 = s25.replaceAll(\"[^a-z]\",\"\")\n        var s27 = s26.replaceAll(\"[^a-z]\",\"\")\n        var s28 = s27.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpujf0jfvv.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[0-9]\", \"\")\n        var s5 = s4.replaceAll(\"[^a-z0-9]\", \"\")\n        var s6 = s5.replaceAll(\"[^a-z0-9]\", \"\")\n        var s7 = s6.replaceAll(\"[^a-z0-9]\", \"\")\n        var s8 = s7.replaceAll(\"[^a-z0-9]\", \"\")\n        var s9 = s8.replaceAll(\"[^a-z0-9]\", \"\")\n        var s10 = s9.replaceAll(\"[^a-z0-9]\", \"\")\n        var s11 = s10.replaceAll(\"[^a-z0-9]\", \"\")\n        var s12 = s11.replaceAll(\"[^a-z0-9]\", \"\")\n        var s13 = s12.replaceAll(\"[^a-z0-9]\", \"\")\n        var s14 = s13.replaceAll(\"[^a-z0-9]\", \"\")\n        var s15 = s14.replaceAll(\"[^a-z0-9]\", \"\")\n        var s16 = s15.replaceAll(\"[^a-z0-9]\", \"\")\n        var s17 = s16.replaceAll(\"[^a-z0-9]\", \"\")\n        var s18 = s17.replaceAll(\"[^a-z0-9]\", \"\")\n        var s19 = s18.replaceAll(\"[^a-z0-9]\", \"\")\n        var s20 = s19.replaceAll(\"[^a-z0-9]\", \"\")\n        var s21 = s20.replaceAll(\"[^a-z0-9]\", \"\")\n        var s22 = s21.replaceAll(\"[^a-z0-9]\", \"\")\n        var s23 = s22.replaceAll(\"[^a-z0-9]\", \"\")\n        var s24\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpikvt6wan.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpikvt6wan.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[^a-z]\",\"\")\n        var s6 = s5.replaceAll(\"[^a-z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-z]\",\"\")\n        var s25 = s24.replaceAll(\"[^a-z]\",\"\")\n        var s26 = s25.replaceAll(\"[^a-z]\",\"\")\n        var s27 = s26.replaceAll(\"[^a-z]\",\"\")\n        var s28 = s27.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpujf0jfvv.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            result += s.charAt(i)\n            if (i % 2 == 0) {\n                result += s.charAt(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293025,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3atw7p54.scala:28)\n\tat Problem.main(tmp3atw7p54.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"/\",\"\")\n        var s6 = s5.replaceAll(\"\\\\.\",\"\")\n        var s7 = s6.replaceAll(\"\\\\,\",\"\")\n        var s8 = s7.replaceAll(\"\\\\:\",\"\")\n        var s9 = s8.replaceAll(\"\\\\;\",\"\")\n        var s10 = s9.replaceAll(\"\\\\?\",\"\")\n        var s11 = s10.replaceAll(\"\\\\!\",\"\")\n        var s12 = s11.replaceAll(\"\\\\@\",\"\")\n        var s13 = s12.replaceAll(\"\\\\#\",\"\")\n        var s14 = s13.replaceAll(\"\\\\$\",\"\")\n        var s15 = s14.replaceAll(\"\\\\%\",\"\")\n        var s16 = s15.replaceAll(\"\\\\^\",\"\")\n        var s17 = s16.replaceAll(\"\\\\&\",\"\")\n        var s18 = s17.replaceAll(\"\\\\*\",\"\")\n        var s19 = s18.replaceAll(\"\\\\(\",\"\")\n        var s20 = s19.replaceAll(\"\\\\)\",\"\")\n        var s21 = s20.replaceAll(\"\\\\+\",\"\")\n        var s22 = s21.replaceAll(\"\\\\-\",\"\")\n        var s23 = s22.replaceAll(\"\\\\=\",\"\")\n        var s24 = s23.replaceAll(\"\\\\_\",\"\")\n        var s25 = s24.replaceAll(\"\\\\$\",\"\")\n        var s26 = s25.replaceAll(\"\\\\%\",\"\")\n        var s27 = s26.replaceAll(\"\\\\^\",\"\")\n        var s28 = s27.replaceAll(\"\\\\&\",\"\")\n        var s29 = s28.replaceAll(\"\\\\*\",\"\")\n        var s30 = s29.replaceAll(\"\\\\(\",\"\")\n        var s31 = s30.replaceAll(\"\\\\)\",\"\")\n        var s32 = s31.replaceAll(\"\\\\+\",\"\")\n        var s33 = s32.replaceAll(\"\\\\-\",\"\")\n        var s34 = s33.\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3fr580hu.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3fr580hu.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[^a-z]\",\"\")\n        var s6 = s5.replaceAll(\"[^a-z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-z]\",\"\")\n        var s25 = s24.replaceAll(\"[^a-z]\",\"\")\n        var s26 = s25.replaceAll(\"[^a-z]\",\"\")\n        var s27 = s26.replaceAll(\"[^a-z]\",\"\")\n        var s28 = s27.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpujf0jfvv.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase()\n        var s2 = s1.replaceAll(\" \",\"\")\n        var s3 = s2.replaceAll(\"-\",\"\")\n        var s4 = s3.replaceAll(\"/\",\"\")\n        var s5 = s4.replaceAll(\"\\\\.\",\"\")\n        var s6 = s5.replaceAll(\"\\\\,\",\"\")\n        var s7 = s6.replaceAll(\"\\\\:\",\"\")\n        var s8 = s7.replaceAll(\"\\\\;\",\"\")\n        var s9 = s8.replaceAll(\"\\\\?\",\"\")\n        var s10 = s9.replaceAll(\"\\\\!\",\"\")\n        var s11 = s10.replaceAll(\"\\\\-\",\"\")\n        var s12 = s11.replaceAll(\"\\\\+\",\"\")\n        var s13 = s12.replaceAll(\"\\\\*\",\"\")\n        var s14 = s13.replaceAll(\"\\\\(\",\"\")\n        var s15 = s14.replaceAll(\"\\\\)\",\"\")\n        var s16 = s15.replaceAll(\"\\\\[\",\"\")\n        var s17 = s16.replaceAll(\"\\\\]\",\"\")\n        var s18 = s17.replaceAll(\"\\\\{\",\"\")\n        var s19 = s18.replaceAll(\"\\\\}\",\"\")\n        var s20 = s19.replaceAll(\"\\\\|\",\"\")\n        var s21 = s20.replaceAll(\"\\\\^\",\"\")\n        var s22 = s21.replaceAll(\"\\\\&\",\"\")\n        var s23 = s22.replaceAll(\"\\\\%\",\"\")\n        var s24 = s23.replaceAll(\"\\\\$\",\"\")\n        var s25 = s24.replaceAll(\"\\\\#\",\"\")\n        var s26 = s25.replaceAll(\"\\\\@\",\"\")\n        var s27 = s26.replaceAll(\"\\\\$\",\"\")\n        var s28 = s27.replaceAll(\"\\\\%\",\"\")\n        var s29 = s28.replaceAll(\"\\\\^\",\"\")\n        var s30 = s29.replaceAll(\"\\\\&\",\"\")\n        var s31 = s30.replaceAll(\"\\\\*\",\"\")\n        var s32 = s31.replaceAll(\"\\\\(\",\"\")\n        var s33 = s32.\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgx1n4ov3.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgx1n4ov3.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase\n        var s2 = s1.replaceAll(\" \",\"\")\n        var s3 = s2.replaceAll(\"-\",\"\")\n        var s4 = s3.replaceAll(\"_\",\"\")\n        var s5 = s4.replaceAll(\"'\",\"\")\n        var s6 = s5.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s25\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpz3c9swar.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz3c9swar.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase\n        var s2 = s1.replaceAll(\" \",\"\")\n        var s3 = s2.replaceAll(\"-\",\"\")\n        var s4 = s3.replaceAll(\"_\",\"\")\n        var s5 = s4.replaceAll(\"'\",\"\")\n        var s6 = s5.replaceAll(\"/\",\"\")\n        var s7 = s6.replaceAll(\"\\\\.\",\"\")\n        var s8 = s7.replaceAll(\"\\\\,\",\"\")\n        var s9 = s8.replaceAll(\"\\\\:\",\"\")\n        var s10 = s9.replaceAll(\"\\\\;\",\"\")\n        var s11 = s10.replaceAll(\"\\\\?\",\"\")\n        var s12 = s11.replaceAll(\"\\\\!\",\"\")\n        var s13 = s12.replaceAll(\"\\\\(\",\"\")\n        var s14 = s13.replaceAll(\"\\\\)\",\"\")\n        var s15 = s14.replaceAll(\"\\\\+\",\"\")\n        var s16 = s15.replaceAll(\"\\\\-\",\"\")\n        var s17 = s16.replaceAll(\"\\\\*\",\"\")\n        var s18 = s17.replaceAll(\"\\\\/\",\"\")\n        var s19 = s18.replaceAll(\"\\\\%\",\"\")\n        var s20 = s19.replaceAll(\"\\\\$\",\"\")\n        var s21 = s20.replaceAll(\"\\\\@\",\"\")\n        var s22 = s21.replaceAll(\"\\\\#\",\"\")\n        var s23 = s22.replaceAll(\"\\\\$\",\"\")\n        var s24 = s23.replaceAll(\"\\\\&\",\"\")\n        var s25 = s24.replaceAll(\"\\\\%\",\"\")\n        var s26 = s25.replaceAll(\"\\\\^\",\"\")\n        var s27 = s26.replaceAll(\"\\\\&\",\"\")\n        var s28 = s27.replaceAll(\"\\\\*\",\"\")\n        var s29 = s28.replaceAll(\"\\\\+\",\"\")\n        var s30 = s29.replaceAll(\"\\\\-\",\"\")\n        var s31 = s30.replaceAll(\"\\\\/\",\"\")\n        var s32 = s31.replaceAll(\"\\\\=\",\"\")\n        var s33 = s32.replaceAll(\"\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp3yx4edhe.scala:50:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms33\u001b[0m = s32.replaceAll(\"\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3yx4edhe.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            var c = s.charAt(i)\n            result = result + (c + (c + 2))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293025,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsgahb6gq.scala:26)\n\tat Problem.main(tmpsgahb6gq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        s.toLowerCase.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\"\")\n    }\n\n    // Create a function decrypt that takes a string as an argument and\n    // returns a string decrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift up by two multiplied to two places.\n    // For example:\n    // >>> decrypt((\"lm\"))\n    // (\"hi\")\n    // >>> decrypt((\"ewhjklnop\"))\n    // (\"asdfghjkl\")\n    // >>> decrypt((\"kj\"))\n    // (\"gf\")\n    // >>> decrypt((\"ix\"))\n    // (\"et\")\n    def decrypt(s : String) : String = {\n        s.toLowerCase.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\"\")\n    }\n\n    // Create a function rotates that takes a string as an argument and\n    // returns a string rotated by a given number of places.\n    // For example:\n    // >>> rotates((\"hi\"))\n    // (\"hi\")\n    // >>> rotates((\"asdfghjkl\"))\n    // (\"asdfghjkl\")\n    // >>> rotates((\"gf\"))\n    // (\"gf\")\n    // >>> rotates((\"et\"))\n    // (\"et\")\n    def rotates(s : String) : String = {\n        s.toCharArray.map(Problem.rotate).mkString(\"\")\n    }\n\n    // Create a function rotates that takes a string as an argument and\n    // returns a string rotated by a given number of places.\n    // For example:\n    // >>> rotates((\"hi\"))\n    // (\"hi\")\n    // >>> rotates((\"asdfghjkl\"))\n    // (\"asdfghjkl\")\n    // >>> rotates((\"gf\"))\n    // (\"gf\")\n    // >>> rotates((\"et\"))\n    // (\"et\")\n    def rotates(s : String) : String = {\n        s.toCharArray.map(Problem.rotate).mkString(\"\")\n    }\n\n\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293025,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpadqafjrg.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpadqafjrg.scala:18:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        s.toLowerCase.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value toCharArray is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpadqafjrg.scala:35:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        s.toLowerCase.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value toCharArray is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpadqafjrg.scala:50:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        s.toCharArray.map(Problem.rotate).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue rotate is not a member of object Problem - did you mean Problem.rotates?\n\u001b[31m\u001b[31m-- Error: /tmp/tmpadqafjrg.scala:50:41 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        s.toCharArray.map(Problem.rotate).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                         where:    B is a type variable\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpadqafjrg.scala:65:34 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m        s.toCharArray.map(Problem.rotate).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue rotate is not a member of object Problem - did you mean Problem.rotates?\n\u001b[31m\u001b[31m-- Error: /tmp/tmpadqafjrg.scala:65:41 ----------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var result = \"\"\n        var alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        var alphabet_rotated = \"zyxwvutsrqponmlkjihgfedcba\"\n        for (i <- 0 until s.length) {\n            var index = alphabet.indexOf(s[i])\n            result += alphabet_rotated[index]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiwmnj8ze.scala:22:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mindex\u001b[0m = alphabet.indexOf(s[\u001b[35mi\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpiwmnj8ze.scala:23:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            result += alphabet_rotated[\u001b[35mindex\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiwmnj8ze.scala:23:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            result += alphabet_rotated[\u001b[35mindex\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Not found: type index\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7166le1b.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString)\n\u001b[31m\u001b[31m   |\u001b[0m              ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value toCharArray is not a member of Char\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        var s4 = \"\"\n        var s5 = \"\"\n        var s6 = \"\"\n        var s7 = \"\"\n        var s8 = \"\"\n        var s9 = \"\"\n        var s10 = \"\"\n        var s11 = \"\"\n        var s12 = \"\"\n        var s13 = \"\"\n        var s14 = \"\"\n        var s15 = \"\"\n        var s16 = \"\"\n        var s17 = \"\"\n        var s18 = \"\"\n        var s19 = \"\"\n        var s20 = \"\"\n        var s21 = \"\"\n        var s22 = \"\"\n        var s23 = \"\"\n        var s24 = \"\"\n        var s25 = \"\"\n        var s26 = \"\"\n        var s27 = \"\"\n        var s28 = \"\"\n        var s29 = \"\"\n        var s30 = \"\"\n        var s31 = \"\"\n        var s32 = \"\"\n        var s33 = \"\"\n        var s34 = \"\"\n        var s35 = \"\"\n        var s36 = \"\"\n        var s37 = \"\"\n        var s38 = \"\"\n        var s39 = \"\"\n        var s40 = \"\"\n        var s41 = \"\"\n        var s42 = \"\"\n        var s43 = \"\"\n        var s44 = \"\"\n        var s45 = \"\"\n        var s46 = \"\"\n        var s47 = \"\"\n        var s48 = \"\"\n        var s49 = \"\"\n        var s50 = \"\"\n        var s51 = \"\"\n        var s52 = \"\"\n        var s53 = \"\"\n        var s54 = \"\"\n        var s55 = \"\"\n        var s56 = \"\"\n        var s57 = \"\"\n        var s58 = \"\"\n        var s59 = \"\"\n        var s60 = \"\"\n        var s61 = \"\"\n        var s62 = \"\"\n        var s63 = \"\"\n        var s64 = \"\"\n        var s65 = \"\"\n        var s66 = \"\"\n        var s67 = \"\"\n        var s68 = \"\"\n        var s69 = \"\"\n        var s70 = \"\"\n        var s71 = \"\"\n        var s72 = \"\"\n        var s73 = \"\"\n        var s\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9mne5sgs.scala:91:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9mne5sgs.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms2\u001b[0m = s.toLowerCase()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value toLowerCase is not a member of Null\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9mne5sgs.scala:91:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            result += s.substring(i, i + 1)\n            i = i + 2\n        }\n        return result\n    }\n\n    // Create a function decrypt that takes a string as an argument and\n    // returns a string decrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift up by two multiplied to two places.\n    // For example:\n    // >>> decrypt((\"lm\"))\n    // (\"hi\")\n    // >>> decrypt((\"ewhjklnop\"))\n    // (\"asdfghjkl\")\n    // >>> decrypt((\"kj\"))\n    // (\"gf\")\n    // >>> decrypt((\"ix\"))\n    // (\"et\")\n    def decrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            result += s.substring(i, i + 1)\n            i = i - 2\n        }\n        return result\n    }\n\n    // Create a function encrypt_rotate that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt_rotate((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt_rotate((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt_rotate((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt_rotate((\"et\"))\n    // (\"ix\")\n    def encrypt_rotate(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            result += s.substring(i, i + 1)\n            i = i + 2\n        }\n        return result\n    }\n\n    // Create a function decrypt_rotate that takes a string as an argument and\n    // returns a string decrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcntz10mt.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpcntz10mt.scala:21:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            i = i + \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpcntz10mt.scala:43:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            i = i - \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpcntz10mt.scala:65:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m            i = i + \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcntz10mt.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(encrypt((\u001b[31m\"hi\"\u001b[0m)).equals((\u001b[31m\"lm\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: encrypt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcntz10mt.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(encrypt((\u001b[31m\"asdfghjkl\"\u001b[0m)).equals((\u001b[31m\"ewhjklnop\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: encrypt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcntz10mt.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(encrypt((\u001b[31m\"gf\"\u001b[0m)).equals((\u001b[31m\"kj\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase()\n        var s2 = s1.replaceAll(\" \",\"\")\n        var s3 = s2.replaceAll(\"-\",\"\")\n        var s4 = s3.replaceAll(\"_\",\"\")\n        var s5 = s4.replaceAll(\"/\",\"\")\n        var s6 = s5.replaceAll(\"\\\\.\",\"\")\n        var s7 = s6.replaceAll(\"\\\\,\",\"\")\n        var s8 = s7.replaceAll(\"\\\\:\",\"\")\n        var s9 = s8.replaceAll(\"\\\\;\",\"\")\n        var s10 = s9.replaceAll(\"\\\\?\",\"\")\n        var s11 = s10.replaceAll(\"\\\\!\",\"\")\n        var s12 = s11.replaceAll(\"\\\\$\",\"\")\n        var s13 = s12.replaceAll(\"\\\\%\",\"\")\n        var s14 = s13.replaceAll(\"\\\\^\",\"\")\n        var s15 = s14.replaceAll(\"\\\\&\",\"\")\n        var s16 = s15.replaceAll(\"\\\\*\",\"\")\n        var s17 = s16.replaceAll(\"\\\\(\",\"\")\n        var s18 = s17.replaceAll(\"\\\\)\",\"\")\n        var s19 = s18.replaceAll(\"\\\\+\",\"\")\n        var s20 = s19.replaceAll(\"\\\\-\",\"\")\n        var s21 = s20.replaceAll(\"\\\\=\",\"\")\n        var s22 = s21.replaceAll(\"\\\\>\",\"\")\n        var s23 = s22.replaceAll(\"\\\\<\",\"\")\n        var s24 = s23.replaceAll(\"\\\\@\",\"\")\n        var s25 = s24.replaceAll(\"\\\\#\",\"\")\n        var s26 = s25.replaceAll(\"\\\\$\",\"\")\n        var s27 = s26.replaceAll(\"\\\\%\",\"\")\n        var s28 = s27.replaceAll(\"\\\\^\",\"\")\n        var s29 = s28.replaceAll(\"\\\\&\",\"\")\n        var s30 = s29.replaceAll(\"\\\\*\",\"\")\n        var s31 = s30.replaceAll(\"\\\\(\",\"\")\n        var s32 = s31.replaceAll(\"\\\\)\",\"\")\n        var s33 = s32.replace\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293042,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E051] Reference Error: /tmp/tmpetm93uls.scala:50:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms33\u001b[0m = s32.replace\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mAmbiguous overload. The overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mreplace\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: CharSequence, x$1: CharSequence): String\n\u001b[31m   |\u001b[0m (x$0: Char, x$1: Char): String\n\u001b[31m   |\u001b[0mboth match expected type <?>\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpetm93uls.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[0-9]\", \"\")\n        var s5 = s4.replaceAll(\"[^a-z0-9]\", \"\")\n        var s6 = s5.replaceAll(\"[^a-z0-9]\", \"\")\n        var s7 = s6.replaceAll(\"[^a-z0-9]\", \"\")\n        var s8 = s7.replaceAll(\"[^a-z0-9]\", \"\")\n        var s9 = s8.replaceAll(\"[^a-z0-9]\", \"\")\n        var s10 = s9.replaceAll(\"[^a-z0-9]\", \"\")\n        var s11 = s10.replaceAll(\"[^a-z0-9]\", \"\")\n        var s12 = s11.replaceAll(\"[^a-z0-9]\", \"\")\n        var s13 = s12.replaceAll(\"[^a-z0-9]\", \"\")\n        var s14 = s13.replaceAll(\"[^a-z0-9]\", \"\")\n        var s15 = s14.replaceAll(\"[^a-z0-9]\", \"\")\n        var s16 = s15.replaceAll(\"[^a-z0-9]\", \"\")\n        var s17 = s16.replaceAll(\"[^a-z0-9]\", \"\")\n        var s18 = s17.replaceAll(\"[^a-z0-9]\", \"\")\n        var s19 = s18.replaceAll(\"[^a-z0-9]\", \"\")\n        var s20 = s19.replaceAll(\"[^a-z0-9]\", \"\")\n        var s21 = s20.replaceAll(\"[^a-z0-9]\", \"\")\n        var s22 = s21.replaceAll(\"[^a-z0-9]\", \"\")\n        var s23 = s22.replaceAll(\"[^a-z0-9]\", \"\")\n        var s24\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpikvt6wan.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpikvt6wan.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[^a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[a-z]\", \"\")\n        var s5 = s4.replaceAll(\"[a-z]\", \"\")\n        var s6 = s5.replaceAll(\"[a-z]\", \"\")\n        var s7 = s6.replaceAll(\"[a-z]\", \"\")\n        var s8 = s7.replaceAll(\"[a-z]\", \"\")\n        var s9 = s8.replaceAll(\"[a-z]\", \"\")\n        var s10 = s9.replaceAll(\"[a-z]\", \"\")\n        var s11 = s10.replaceAll(\"[a-z]\", \"\")\n        var s12 = s11.replaceAll(\"[a-z]\", \"\")\n        var s13 = s12.replaceAll(\"[a-z]\", \"\")\n        var s14 = s13.replaceAll(\"[a-z]\", \"\")\n        var s15 = s14.replaceAll(\"[a-z]\", \"\")\n        var s16 = s15.replaceAll(\"[a-z]\", \"\")\n        var s17 = s16.replaceAll(\"[a-z]\", \"\")\n        var s18 = s17.replaceAll(\"[a-z]\", \"\")\n        var s19 = s18.replaceAll(\"[a-z]\", \"\")\n        var s20 = s19.replaceAll(\"[a-z]\", \"\")\n        var s21 = s20.replaceAll(\"[a-z]\", \"\")\n        var s22 = s21.replaceAll(\"[a-z]\", \"\")\n        var s23 = s22.replaceAll(\"[a-z]\", \"\")\n        var s24 = s23.replaceAll(\"[a-z]\", \"\")\n        var s25 = s24.replaceAll(\"[a-z]\", \"\")\n        var s26 = s25.replaceAll(\"[a-z]\", \"\")\n        var s27 = s26.replaceAll(\"[a-z]\", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293042,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsztz_uos.scala:44:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[^a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[^a-z]\", \"\")\n        var s5 = s4.replaceAll(\"[^a-z]\", \"\")\n        var s6 = s5.replaceAll(\"[^a-z]\", \"\")\n        var s7 = s6.replaceAll(\"[^a-z]\", \"\")\n        var s8 = s7.replaceAll(\"[^a-z]\", \"\")\n        var s9 = s8.replaceAll(\"[^a-z]\", \"\")\n        var s10 = s9.replaceAll(\"[^a-z]\", \"\")\n        var s11 = s10.replaceAll(\"[^a-z]\", \"\")\n        var s12 = s11.replaceAll(\"[^a-z]\", \"\")\n        var s13 = s12.replaceAll(\"[^a-z]\", \"\")\n        var s14 = s13.replaceAll(\"[^a-z]\", \"\")\n        var s15 = s14.replaceAll(\"[^a-z]\", \"\")\n        var s16 = s15.replaceAll(\"[^a-z]\", \"\")\n        var s17 = s16.replaceAll(\"[^a-z]\", \"\")\n        var s18 = s17.replaceAll(\"[^a-z]\", \"\")\n        var s19 = s18.replaceAll(\"[^a-z]\", \"\")\n        var s20 = s19.replaceAll(\"[^a-z]\", \"\")\n        var s21 = s20.replaceAll(\"[^a-z]\", \"\")\n        var s22 = s21.replaceAll(\"[^a-z]\", \"\")\n        var s23 = s22.replaceAll(\"[^a-z]\", \"\")\n        var s24 = s23.replaceAll(\"[^a-z]\", \"\")\n        var s25 = s24.replaceAll(\"[^a-z]\", \"\")\n        var s26 = s25.replaceAll(\"[^a-z]\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293021,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpel8foncj.scala:42:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms26\u001b[0m = s25.replaceAll(\"[^a-z]\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpel8foncj.scala:44:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpel8foncj.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpel8foncj.scala:44:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: [^a-z]def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"[^a-z]\",\"\")\n        var s5 = s4.replaceAll(\"[a-z]\",\"\")\n        var s6 = s5.replaceAll(\"[a-z]\",\"\")\n        var s7 = s6.replaceAll(\"[a-z]\",\"\")\n        var s8 = s7.replaceAll(\"[a-z]\",\"\")\n        var s9 = s8.replaceAll(\"[a-z]\",\"\")\n        var s10 = s9.replaceAll(\"[a-z]\",\"\")\n        var s11 = s10.replaceAll(\"[a-z]\",\"\")\n        var s12 = s11.replaceAll(\"[a-z]\",\"\")\n        var s13 = s12.replaceAll(\"[a-z]\",\"\")\n        var s14 = s13.replaceAll(\"[a-z]\",\"\")\n        var s15 = s14.replaceAll(\"[a-z]\",\"\")\n        var s16 = s15.replaceAll(\"[a-z]\",\"\")\n        var s17 = s16.replaceAll(\"[a-z]\",\"\")\n        var s18 = s17.replaceAll(\"[a-z]\",\"\")\n        var s19 = s18.replaceAll(\"[a-z]\",\"\")\n        var s20 = s19.replaceAll(\"[a-z]\",\"\")\n        var s21 = s20.replaceAll(\"[a-z]\",\"\")\n        var s22 = s21.replaceAll(\"[a-z]\",\"\")\n        var s23 = s22.replaceAll(\"[a-z]\",\"\")\n        var s24 = s23.replaceAll(\"[a-z]\",\"\")\n        var s25 = s24.replaceAll(\"[a-z]\",\"\")\n        var s26 = s25.replaceAll(\"[a-z]\",\"\")\n        var s27 = s26.replaceAll(\"[a-z]\",\"\")\n        var s28 = s27.replaceAll(\"[a-z]\",\"\")\n        var s29 = s28.replace\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293042,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E051] Reference Error: /tmp/tmp0fsxh6bp.scala:45:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms29\u001b[0m = s28.replace\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mAmbiguous overload. The overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mreplace\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: CharSequence, x$1: CharSequence): String\n\u001b[31m   |\u001b[0m (x$0: Char, x$1: Char): String\n\u001b[31m   |\u001b[0mboth match expected type <?>\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0fsxh6bp.scala:46:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase()\n        var s2 = s1.replaceAll(\"[^a-z]\", \"\")\n        var s3 = s2.replaceAll(\"[^a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[^a-z]\", \"\")\n        var s5 = s4.replaceAll(\"[^a-z]\", \"\")\n        var s6 = s5.replaceAll(\"[^a-z]\", \"\")\n        var s7 = s6.replaceAll(\"[^a-z]\", \"\")\n        var s8 = s7.replaceAll(\"[^a-z]\", \"\")\n        var s9 = s8.replaceAll(\"[^a-z]\", \"\")\n        var s10 = s9.replaceAll(\"[^a-z]\", \"\")\n        var s11 = s10.replaceAll(\"[^a-z]\", \"\")\n        var s12 = s11.replaceAll(\"[^a-z]\", \"\")\n        var s13 = s12.replaceAll(\"[^a-z]\", \"\")\n        var s14 = s13.replaceAll(\"[^a-z]\", \"\")\n        var s15 = s14.replaceAll(\"[^a-z]\", \"\")\n        var s16 = s15.replaceAll(\"[^a-z]\", \"\")\n        var s17 = s16.replaceAll(\"[^a-z]\", \"\")\n        var s18 = s17.replaceAll(\"[^a-z]\", \"\")\n        var s19 = s18.replaceAll(\"[^a-z]\", \"\")\n        var s20 = s19.replaceAll(\"[^a-z]\", \"\")\n        var s21 = s20.replaceAll(\"[^a-z]\", \"\")\n        var s22 = s21.replaceAll(\"[^a-z]\", \"\")\n        var s23 = s22.replaceAll(\"[^a-z]\", \"\")\n        var s24 = s23.replaceAll(\"[^a-z]\", \"\")\n        var s25 = s24.replaceAll(\"[^a-z]\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293042,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpj_hq6rn9.scala:42:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms25\u001b[0m = s24.replaceAll(\"[^a-z]\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj_hq6rn9.scala:44:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj_hq6rn9.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj_hq6rn9.scala:44:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: [^a-z]def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase\n        var s2 = s1.replaceAll(\" \",\"\")\n        var s3 = s2.replaceAll(\"-\",\"\")\n        var s4 = s3.replaceAll(\"'\",\"\")\n        var s5 = s4.replaceAll(\"\\\\.\",\"\")\n        var s6 = s5.replaceAll(\"\\\\,\",\"\")\n        var s7 = s6.replaceAll(\"\\\\:\",\"\")\n        var s8 = s7.replaceAll(\"\\\\;\",\"\")\n        var s9 = s8.replaceAll(\"\\\\?\",\"\")\n        var s10 = s9.replaceAll(\"\\\\!\",\"\")\n        var s11 = s10.replaceAll(\"\\\\(\",\"\")\n        var s12 = s11.replaceAll(\"\\\\)\",\"\")\n        var s13 = s12.replaceAll(\"\\\\+\",\"\")\n        var s14 = s13.replaceAll(\"\\\\-\",\"\")\n        var s15 = s14.replaceAll(\"\\\\/\",\"\")\n        var s16 = s15.replaceAll(\"\\\\*\",\"\")\n        var s17 = s16.replaceAll(\"\\\\%\",\"\")\n        var s18 = s17.replaceAll(\"\\\\$\",\"\")\n        var s19 = s18.replaceAll(\"\\\\@\",\"\")\n        var s20 = s19.replaceAll(\"\\\\#\",\"\")\n        var s21 = s20.replaceAll(\"\\\\$\",\"\")\n        var s22 = s21.replaceAll(\"\\\\&\",\"\")\n        var s23 = s22.replaceAll(\"\\\\^\",\"\")\n        var s24 = s23.replaceAll(\"\\\\|\",\"\")\n        var s25 = s24.replaceAll(\"\\\\=\",\"\")\n        var s26 = s25.replaceAll(\"\\\\>\",\"\")\n        var s27 = s26.replaceAll(\"\\\\<\",\"\")\n        var s28 = s27.replaceAll(\"\\\\;\",\"\")\n        var s29 = s28.replaceAll(\"\\\\,\",\"\")\n        var s30 = s29.replaceAll(\"\\\\:\",\"\")\n        var s31 = s30.replaceAll(\"\\\\?\",\"\")\n        var s32 = s31.replaceAll(\"\\\\!\",\"\")\n        var s33 = s32.replace\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293042,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E051] Reference Error: /tmp/tmpjizs26ry.scala:50:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms33\u001b[0m = s32.replace\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mAmbiguous overload. The overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mreplace\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: CharSequence, x$1: CharSequence): String\n\u001b[31m   |\u001b[0m (x$0: Char, x$1: Char): String\n\u001b[31m   |\u001b[0mboth match expected type <?>\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjizs26ry.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[0-9]\", \"\")\n        var s5 = s4.replaceAll(\"[^a-z0-9]\", \"\")\n        var s6 = s5.replaceAll(\"[^a-z0-9]\", \"\")\n        var s7 = s6.replaceAll(\"[^a-z0-9]\", \"\")\n        var s8 = s7.replaceAll(\"[^a-z0-9]\", \"\")\n        var s9 = s8.replaceAll(\"[^a-z0-9]\", \"\")\n        var s10 = s9.replaceAll(\"[^a-z0-9]\", \"\")\n        var s11 = s10.replaceAll(\"[^a-z0-9]\", \"\")\n        var s12 = s11.replaceAll(\"[^a-z0-9]\", \"\")\n        var s13 = s12.replaceAll(\"[^a-z0-9]\", \"\")\n        var s14 = s13.replaceAll(\"[^a-z0-9]\", \"\")\n        var s15 = s14.replaceAll(\"[^a-z0-9]\", \"\")\n        var s16 = s15.replaceAll(\"[^a-z0-9]\", \"\")\n        var s17 = s16.replaceAll(\"[^a-z0-9]\", \"\")\n        var s18 = s17.replaceAll(\"[^a-z0-9]\", \"\")\n        var s19 = s18.replaceAll(\"[^a-z0-9]\", \"\")\n        var s20 = s19.replaceAll(\"[^a-z0-9]\", \"\")\n        var s21 = s20.replaceAll(\"[^a-z0-9]\", \"\")\n        var s22 = s21.replaceAll(\"[^a-z0-9]\", \"\")\n        var s23 = s22.replaceAll(\"[^a-z0-9]\", \"\")\n        var s24\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpikvt6wan.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpikvt6wan.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            var c = s.charAt(i)\n            result = result + c\n            if (i + 2 < s.length) {\n                result = result + s.charAt(i + 2)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293026,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbxri78gg.scala:29)\n\tat Problem.main(tmpbxri78gg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        var s4 = \"\"\n        var s5 = \"\"\n        var s6 = \"\"\n        var s7 = \"\"\n        var s8 = \"\"\n        var s9 = \"\"\n        var s10 = \"\"\n        var s11 = \"\"\n        var s12 = \"\"\n        var s13 = \"\"\n        var s14 = \"\"\n        var s15 = \"\"\n        var s16 = \"\"\n        var s17 = \"\"\n        var s18 = \"\"\n        var s19 = \"\"\n        var s20 = \"\"\n        var s21 = \"\"\n        var s22 = \"\"\n        var s23 = \"\"\n        var s24 = \"\"\n        var s25 = \"\"\n        var s26 = \"\"\n        var s27 = \"\"\n        var s28 = \"\"\n        var s29 = \"\"\n        var s30 = \"\"\n        var s31 = \"\"\n        var s32 = \"\"\n        var s33 = \"\"\n        var s34 = \"\"\n        var s35 = \"\"\n        var s36 = \"\"\n        var s37 = \"\"\n        var s38 = \"\"\n        var s39 = \"\"\n        var s40 = \"\"\n        var s41 = \"\"\n        var s42 = \"\"\n        var s43 = \"\"\n        var s44 = \"\"\n        var s45 = \"\"\n        var s46 = \"\"\n        var s47 = \"\"\n        var s48 = \"\"\n        var s49 = \"\"\n        var s50 = \"\"\n        var s51 = \"\"\n        var s52 = \"\"\n        var s53 = \"\"\n        var s54 = \"\"\n        var s55 = \"\"\n        var s56 = \"\"\n        var s57 = \"\"\n        var s58 = \"\"\n        var s59 = \"\"\n        var s60 = \"\"\n        var s61 = \"\"\n        var s62 = \"\"\n        var s63 = \"\"\n        var s64 = \"\"\n        var s65 = \"\"\n        var s66 = \"\"\n        var s67 = \"\"\n        var s68 = \"\"\n        var s69 = \"\"\n        var s70 = \"\"\n        var s71 = \"\"\n        var s72 = \"\"\n        var s73 = \"\"\n        var s\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9mne5sgs.scala:91:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9mne5sgs.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms2\u001b[0m = s.toLowerCase()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value toLowerCase is not a member of Null\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9mne5sgs.scala:91:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        var s4 = \"\"\n        var s5 = \"\"\n        var s6 = \"\"\n        var s7 = \"\"\n        var s8 = \"\"\n        var s9 = \"\"\n        var s10 = \"\"\n        var s11 = \"\"\n        var s12 = \"\"\n        var s13 = \"\"\n        var s14 = \"\"\n        var s15 = \"\"\n        var s16 = \"\"\n        var s17 = \"\"\n        var s18 = \"\"\n        var s19 = \"\"\n        var s20 = \"\"\n        var s21 = \"\"\n        var s22 = \"\"\n        var s23 = \"\"\n        var s24 = \"\"\n        var s25 = \"\"\n        var s26 = \"\"\n        var s27 = \"\"\n        var s28 = \"\"\n        var s29 = \"\"\n        var s30 = \"\"\n        var s31 = \"\"\n        var s32 = \"\"\n        var s33 = \"\"\n        var s34 = \"\"\n        var s35 = \"\"\n        var s36 = \"\"\n        var s37 = \"\"\n        var s38 = \"\"\n        var s39 = \"\"\n        var s40 = \"\"\n        var s41 = \"\"\n        var s42 = \"\"\n        var s43 = \"\"\n        var s44 = \"\"\n        var s45 = \"\"\n        var s46 = \"\"\n        var s47 = \"\"\n        var s48 = \"\"\n        var s49 = \"\"\n        var s50 = \"\"\n        var s51 = \"\"\n        var s52 = \"\"\n        var s53 = \"\"\n        var s54 = \"\"\n        var s55 = \"\"\n        var s56 = \"\"\n        var s57 = \"\"\n        var s58 = \"\"\n        var s59 = \"\"\n        var s60 = \"\"\n        var s61 = \"\"\n        var s62 = \"\"\n        var s63 = \"\"\n        var s64 = \"\"\n        var s65 = \"\"\n        var s66 = \"\"\n        var s67 = \"\"\n        var s68 = \"\"\n        var s69 = \"\"\n        var s70 = \"\"\n        var s71 = \"\"\n        var s72 = \"\"\n        var s73 = \"\"\n        var s\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9mne5sgs.scala:91:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9mne5sgs.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms2\u001b[0m = s.toLowerCase()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value toLowerCase is not a member of Null\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9mne5sgs.scala:91:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            result += s.charAt(i)\n            if (i % 2 == 0) {\n                result += s.charAt(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293025,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3atw7p54.scala:28)\n\tat Problem.main(tmp3atw7p54.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            result += s[i]\n            if (i + 2) % 26 == 0 {\n                result += s[i + 2]\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpzw886rf1.scala:21:25 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mif\u001b[0m (i + \u001b[31m2\u001b[0m) % \u001b[31m26\u001b[0m == \u001b[31m0\u001b[0m {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                     end of statement expected but integer literal found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzw886rf1.scala:20:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            result += s[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzw886rf1.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            result += s[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzw886rf1.scala:21:16 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mif\u001b[0m (i + \u001b[31m2\u001b[0m) % \u001b[31m26\u001b[0m == \u001b[31m0\u001b[0m {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    Int\n\u001b[31m   |\u001b[0m                Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzw886rf1.scala:21:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mif\u001b[0m (i + \u001b[31m2\u001b[0m) % \u001b[31m26\u001b[0m == \u001b[31m0\u001b[0m {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: %\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"_\",\"\")\n        var s6 = s5.replaceAll(\"'\",\"\")\n        var s7 = s6.replaceAll(\"\\\"\",\"\")\n        var s8 = s7.replaceAll(\"/\",\"\")\n        var s9 = s8.replaceAll(\"\\\\\",\"\")\n        var s10 = s9.replaceAll(\"\\\\.\",\"\")\n        var s11 = s10.replaceAll(\"\\\\,\",\"\")\n        var s12 = s11.replaceAll(\"\\\\:\",\"\")\n        var s13 = s12.replaceAll(\"\\\\;\",\"\")\n        var s14 = s13.replaceAll(\"\\\\?\",\"\")\n        var s15 = s14.replaceAll(\"\\\\!\",\"\")\n        var s16 = s15.replaceAll(\"\\\\@\",\"\")\n        var s17 = s16.replaceAll(\"\\\\#\",\"\")\n        var s18 = s17.replaceAll(\"\\\\$\",\"\")\n        var s19 = s18.replaceAll(\"\\\\%\",\"\")\n        var s20 = s19.replaceAll(\"\\\\^\",\"\")\n        var s21 = s20.replaceAll(\"\\\\&\",\"\")\n        var s22 = s21.replaceAll(\"\\\\*\",\"\")\n        var s23 = s22.replaceAll(\"\\\\(\",\"\")\n        var s24 = s23.replaceAll(\"\\\\)\",\"\")\n        var s25 = s24.replaceAll(\"\\\\+\",\"\")\n        var s26 = s25.replaceAll(\"\\\\=\",\"\")\n        var s27 = s26.replaceAll(\"\\\\-\",\"\")\n        var s28 = s27.replaceAll(\"\\\\_\",\"\")\n        var s29 = s28.replaceAll(\"\\\\/\",\"\")\n        var s30 = s29.replaceAll(\"\\\\<\",\"\")\n        var s31 = s30.replaceAll(\"\\\\>\",\"\")\n        var s32 = s31.replaceAll(\"\\\\\\\"\",\"\")\n        var s33 = s32.replaceAll(\"\\\\'\",\"\")\n        var s34 = s33.replaceAll(\"\\\\\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293042,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpt6moyegm.scala:50:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms34\u001b[0m = s33.replaceAll(\"\\\\\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpt6moyegm.scala:52:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt6moyegm.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt6moyegm.scala:52:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: \\def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            result += s.charAt(i)\n            if (i % 2 == 0) {\n                result += s.charAt(i + 1)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293046,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpaf_7fp9z.scala:28)\n\tat Problem.main(tmpaf_7fp9z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase()\n        var s2 = s1.replaceAll(\" \",\"\")\n        var s3 = s2.replaceAll(\"-\",\"\")\n        var s4 = s3.replaceAll(\"'\",\"\")\n        var s5 = s4.replaceAll(\"[^a-z]\",\"\")\n        var s6 = s5.replaceAll(\"[^a-z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-z]\",\"\")\n        var s25 = s24.replaceAll(\"[^a-z]\",\"\")\n        var s26 = s25.replaceAll(\"[^a-z]\",\"\")\n        var s27 = s26.replaceAll(\"[^a-\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293042,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp3aa6ttit.scala:44:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms27\u001b[0m = s26.replaceAll(\"[^a-\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmp3aa6ttit.scala:46:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3aa6ttit.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3aa6ttit.scala:46:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: [^a-def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[0-9]\", \"\")\n        var s5 = s4.replaceAll(\"[^a-z0-9]\", \"\")\n        var s6 = s5.replaceAll(\"[^a-z0-9]\", \"\")\n        var s7 = s6.replaceAll(\"[^a-z0-9]\", \"\")\n        var s8 = s7.replaceAll(\"[^a-z0-9]\", \"\")\n        var s9 = s8.replaceAll(\"[^a-z0-9]\", \"\")\n        var s10 = s9.replaceAll(\"[^a-z0-9]\", \"\")\n        var s11 = s10.replaceAll(\"[^a-z0-9]\", \"\")\n        var s12 = s11.replaceAll(\"[^a-z0-9]\", \"\")\n        var s13 = s12.replaceAll(\"[^a-z0-9]\", \"\")\n        var s14 = s13.replaceAll(\"[^a-z0-9]\", \"\")\n        var s15 = s14.replaceAll(\"[^a-z0-9]\", \"\")\n        var s16 = s15.replaceAll(\"[^a-z0-9]\", \"\")\n        var s17 = s16.replaceAll(\"[^a-z0-9]\", \"\")\n        var s18 = s17.replaceAll(\"[^a-z0-9]\", \"\")\n        var s19 = s18.replaceAll(\"[^a-z0-9]\", \"\")\n        var s20 = s19.replaceAll(\"[^a-z0-9]\", \"\")\n        var s21 = s20.replaceAll(\"[^a-z0-9]\", \"\")\n        var s22 = s21.replaceAll(\"[^a-z0-9]\", \"\")\n        var s23 = s22.replaceAll(\"[^a-z0-9]\", \"\")\n        var s24\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpikvt6wan.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpikvt6wan.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[^a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[^a-z]\", \"\")\n        var s5 = s4.replaceAll(\"[^a-z]\", \"\")\n        var s6 = s5.replaceAll(\"[^a-z]\", \"\")\n        var s7 = s6.replaceAll(\"[^a-z]\", \"\")\n        var s8 = s7.replaceAll(\"[^a-z]\", \"\")\n        var s9 = s8.replaceAll(\"[^a-z]\", \"\")\n        var s10 = s9.replaceAll(\"[^a-z]\", \"\")\n        var s11 = s10.replaceAll(\"[^a-z]\", \"\")\n        var s12 = s11.replaceAll(\"[^a-z]\", \"\")\n        var s13 = s12.replaceAll(\"[^a-z]\", \"\")\n        var s14 = s13.replaceAll(\"[^a-z]\", \"\")\n        var s15 = s14.replaceAll(\"[^a-z]\", \"\")\n        var s16 = s15.replaceAll(\"[^a-z]\", \"\")\n        var s17 = s16.replaceAll(\"[^a-z]\", \"\")\n        var s18 = s17.replaceAll(\"[^a-z]\", \"\")\n        var s19 = s18.replaceAll(\"[^a-z]\", \"\")\n        var s20 = s19.replaceAll(\"[^a-z]\", \"\")\n        var s21 = s20.replaceAll(\"[^a-z]\", \"\")\n        var s22 = s21.replaceAll(\"[^a-z]\", \"\")\n        var s23 = s22.replaceAll(\"[^a-z]\", \"\")\n        var s24 = s23.replaceAll(\"[^a-z]\", \"\")\n        var s25 = s24.replaceAll(\"[^a-z]\", \"\")\n        var s26 = s25.replaceAll(\"[^a-z]\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293021,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpel8foncj.scala:42:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms26\u001b[0m = s25.replaceAll(\"[^a-z]\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpel8foncj.scala:44:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpel8foncj.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpel8foncj.scala:44:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: [^a-z]def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase()\n        var s2 = \"\"\n        var s3 = \"\"\n        var s4 = \"\"\n        var s5 = \"\"\n        var s6 = \"\"\n        var s7 = \"\"\n        var s8 = \"\"\n        var s9 = \"\"\n        var s10 = \"\"\n        var s11 = \"\"\n        var s12 = \"\"\n        var s13 = \"\"\n        var s14 = \"\"\n        var s15 = \"\"\n        var s16 = \"\"\n        var s17 = \"\"\n        var s18 = \"\"\n        var s19 = \"\"\n        var s20 = \"\"\n        var s21 = \"\"\n        var s22 = \"\"\n        var s23 = \"\"\n        var s24 = \"\"\n        var s25 = \"\"\n        var s26 = \"\"\n        var s27 = \"\"\n        var s28 = \"\"\n        var s29 = \"\"\n        var s30 = \"\"\n        var s31 = \"\"\n        var s32 = \"\"\n        var s33 = \"\"\n        var s34 = \"\"\n        var s35 = \"\"\n        var s36 = \"\"\n        var s37 = \"\"\n        var s38 = \"\"\n        var s39 = \"\"\n        var s40 = \"\"\n        var s41 = \"\"\n        var s42 = \"\"\n        var s43 = \"\"\n        var s44 = \"\"\n        var s45 = \"\"\n        var s46 = \"\"\n        var s47 = \"\"\n        var s48 = \"\"\n        var s49 = \"\"\n        var s50 = \"\"\n        var s51 = \"\"\n        var s52 = \"\"\n        var s53 = \"\"\n        var s54 = \"\"\n        var s55 = \"\"\n        var s56 = \"\"\n        var s57 = \"\"\n        var s58 = \"\"\n        var s59 = \"\"\n        var s60 = \"\"\n        var s61 = \"\"\n        var s62 = \"\"\n        var s63 = \"\"\n        var s64 = \"\"\n        var s65 = \"\"\n        var s66 = \"\"\n        var s67 = \"\"\n        var s68 = \"\"\n        var s69 = \"\"\n        var s70 = \"\"\n        var s71 = \"\"\n        var s72 = \"\"\n        var s\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6h3jjhij.scala:91:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6h3jjhij.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms1\u001b[0m = s.toLowerCase()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value toLowerCase is not a member of Null\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6h3jjhij.scala:91:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"a\",\"z\")\n        var s5 = s4.replaceAll(\"b\",\"y\")\n        var s6 = s5.replaceAll(\"c\",\"x\")\n        var s7 = s6.replaceAll(\"d\",\"w\")\n        var s8 = s7.replaceAll(\"e\",\"v\")\n        var s9 = s8.replaceAll(\"f\",\"u\")\n        var s10 = s9.replaceAll(\"g\",\"t\")\n        var s11 = s10.replaceAll(\"h\",\"s\")\n        var s12 = s11.replaceAll(\"i\",\"r\")\n        var s13 = s12.replaceAll(\"j\",\"q\")\n        var s14 = s13.replaceAll(\"k\",\"p\")\n        var s15 = s14.replaceAll(\"l\",\"o\")\n        var s16 = s15.replaceAll(\"m\",\"n\")\n        var s17 = s16.replaceAll(\"n\",\"m\")\n        var s18 = s17.replaceAll(\"o\",\"l\")\n        var s19 = s18.replaceAll(\"p\",\"k\")\n        var s20 = s19.replaceAll(\"q\",\"j\")\n        var s21 = s20.replaceAll(\"r\",\"i\")\n        var s22 = s21.replaceAll(\"s\",\"h\")\n        var s23 = s22.replaceAll(\"t\",\"g\")\n        var s24 = s23.replaceAll(\"u\",\"f\")\n        var s25 = s24.replaceAll(\"v\",\"e\")\n        var s26 = s25.replaceAll(\"w\",\"d\")\n        var s27 = s26.replaceAll(\"x\",\"c\")\n        var s28 = s27.replaceAll(\"y\",\"b\")\n        var s29 = s28.replaceAll(\"z\",\"a\")\n        return s29\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5h5fv9_g.scala:49)\n\tat Problem.main(tmp5h5fv9_g.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[a-z]\",\"\")\n        var s6 = s5.replaceAll(\"[0-9]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-z0-9]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-z]\",\"\")\n        var s9 = s8.replaceAll(\"[^0-9]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-z0-9]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-z]\",\"\")\n        var s12 = s11.replaceAll(\"[^0-9]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-z0-9]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-z]\",\"\")\n        var s15 = s14.replaceAll(\"[^0-9]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-z0-9]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-z]\",\"\")\n        var s18 = s17.replaceAll(\"[^0-9]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-z0-9]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-z]\",\"\")\n        var s21 = s20.replaceAll(\"[^0-9]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-z0-9]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-z]\",\"\")\n        var s24 = s23.replaceAll(\"[^0-9]\",\"\")\n        var s25 = s24.replaceAll(\"[^a-z0-9]\",\"\")\n        var s26 = s25.replaceAll(\"[^a-z]\",\"\")\n        var s27 = s26.replaceAll(\"\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpovifm3_r.scala:43:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms27\u001b[0m = s26.replaceAll(\"\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpovifm3_r.scala:44:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8qjps38h.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m              ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value toCharArray is not a member of Char\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        var s4 = \"\"\n        var s5 = \"\"\n        var s6 = \"\"\n        var s7 = \"\"\n        var s8 = \"\"\n        var s9 = \"\"\n        var s10 = \"\"\n        var s11 = \"\"\n        var s12 = \"\"\n        var s13 = \"\"\n        var s14 = \"\"\n        var s15 = \"\"\n        var s16 = \"\"\n        var s17 = \"\"\n        var s18 = \"\"\n        var s19 = \"\"\n        var s20 = \"\"\n        var s21 = \"\"\n        var s22 = \"\"\n        var s23 = \"\"\n        var s24 = \"\"\n        var s25 = \"\"\n        var s26 = \"\"\n        var s27 = \"\"\n        var s28 = \"\"\n        var s29 = \"\"\n        var s30 = \"\"\n        var s31 = \"\"\n        var s32 = \"\"\n        var s33 = \"\"\n        var s34 = \"\"\n        var s35 = \"\"\n        var s36 = \"\"\n        var s37 = \"\"\n        var s38 = \"\"\n        var s39 = \"\"\n        var s40 = \"\"\n        var s41 = \"\"\n        var s42 = \"\"\n        var s43 = \"\"\n        var s44 = \"\"\n        var s45 = \"\"\n        var s46 = \"\"\n        var s47 = \"\"\n        var s48 = \"\"\n        var s49 = \"\"\n        var s50 = \"\"\n        var s51 = \"\"\n        var s52 = \"\"\n        var s53 = \"\"\n        var s54 = \"\"\n        var s55 = \"\"\n        var s56 = \"\"\n        var s57 = \"\"\n        var s58 = \"\"\n        var s59 = \"\"\n        var s60 = \"\"\n        var s61 = \"\"\n        var s62 = \"\"\n        var s63 = \"\"\n        var s64 = \"\"\n        var s65 = \"\"\n        var s66 = \"\"\n        var s67 = \"\"\n        var s68 = \"\"\n        var s69 = \"\"\n        var s70 = \"\"\n        var s71 = \"\"\n        var s72 = \"\"\n        var s73 = \"\"\n        var s\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9mne5sgs.scala:91:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9mne5sgs.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms2\u001b[0m = s.toLowerCase()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value toLowerCase is not a member of Null\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9mne5sgs.scala:91:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        for (i <- 0 until s2.length) {\n            s3 = s3 + s2[(i + 2) % s2.length]\n        }\n        return s3\n    }\n\n    // Create a function decrypt that takes a string as an argument and\n    // returns a string decrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> decrypt((\"lm\"))\n    // (\"hi\")\n    // >>> decrypt((\"ewhjklnop\"))\n    // (\"asdfghjkl\")\n    // >>> decrypt((\"kj\"))\n    // (\"gf\")\n    // >>> decrypt((\"ix\"))\n    // (\"et\")\n    def decrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        for (i <- 0 until s2.length) {\n            s3 = s3 + s2[(i - 2) % s2.length]\n        }\n        return s3\n    }\n\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt2(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        for (i <- 0 until s2.length) {\n            s3 = s3 + s2[(i + 2) % s2.length]\n        }\n        return s3\n    }\n\n    // Create a function decrypt that takes a string as an argument and\n    // returns\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx2p46jfb.scala:84:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx2p46jfb.scala:21:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            s3 = s3 + s2[(\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[31m2\u001b[0m) \u001b[35m%\u001b[0m s2.length]\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Not found: type %\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx2p46jfb.scala:43:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            s3 = s3 + s2[(\u001b[35mi\u001b[0m \u001b[35m-\u001b[0m \u001b[31m2\u001b[0m) \u001b[35m%\u001b[0m s2.length]\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Not found: type %\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx2p46jfb.scala:65:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m            s3 = s3 + s2[(\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[31m2\u001b[0m) \u001b[35m%\u001b[0m s2.length]\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Not found: type %\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx2p46jfb.scala:74:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    assert(encrypt((\u001b[31m\"hi\"\u001b[0m)).equals((\u001b[31m\"lm\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: encrypt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx2p46jfb.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(encrypt((\u001b[31m\"asdfghjkl\"\u001b[0m)).equals((\u001b[31m\"ewhjklnop\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: encrypt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explana",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            result += s[i]\n            if (i % 2 == 0) {\n                result += s[i]\n            }\n        }\n        return result\n    }\n\n    // Create a function decrypt that takes a string as an argument and\n    // returns a string decrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift up by two multiplied to two places.\n    // For example:\n    // >>> decrypt((\"lm\"))\n    // (\"hi\")\n    // >>> decrypt((\"ewhjklnop\"))\n    // (\"asdfghjkl\")\n    // >>> decrypt((\"kj\"))\n    // (\"gf\")\n    // >>> decrypt((\"ix\"))\n    // (\"et\")\n    def decrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            result += s[i]\n            if (i % 2 == 1) {\n                result += s[i]\n            }\n        }\n        return result\n    }\n\n    // Create a function encrypt_rotate that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt_rotate((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt_rotate((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt_rotate((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt_rotate((\"et\"))\n    // (\"ix\")\n    def encrypt_rotate(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            result += s[i]\n            if (i % 2 == 0) {\n                result += s[i]\n            }\n        }\n        return result\n    }\n\n    // Create a function decrypt_rotate that takes a string as an argument and\n    // returns a\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293047,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3llo_z7j.scala:90:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m90 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3llo_z7j.scala:20:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            result += s[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3llo_z7j.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            result += s[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3llo_z7j.scala:22:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                result += s[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3llo_z7j.scala:22:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                result += s[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3llo_z7j.scala:44:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m            result += s[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3llo_z7j.scala:44:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m            result += s[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8qjps38h.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m              ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value toCharArray is not a member of Char\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase()\n        var s2 = \"\"\n        var s3 = \"\"\n        var s4 = \"\"\n        var s5 = \"\"\n        var s6 = \"\"\n        var s7 = \"\"\n        var s8 = \"\"\n        var s9 = \"\"\n        var s10 = \"\"\n        var s11 = \"\"\n        var s12 = \"\"\n        var s13 = \"\"\n        var s14 = \"\"\n        var s15 = \"\"\n        var s16 = \"\"\n        var s17 = \"\"\n        var s18 = \"\"\n        var s19 = \"\"\n        var s20 = \"\"\n        var s21 = \"\"\n        var s22 = \"\"\n        var s23 = \"\"\n        var s24 = \"\"\n        var s25 = \"\"\n        var s26 = \"\"\n        var s27 = \"\"\n        var s28 = \"\"\n        var s29 = \"\"\n        var s30 = \"\"\n        var s31 = \"\"\n        var s32 = \"\"\n        var s33 = \"\"\n        var s34 = \"\"\n        var s35 = \"\"\n        var s36 = \"\"\n        var s37 = \"\"\n        var s38 = \"\"\n        var s39 = \"\"\n        var s40 = \"\"\n        var s41 = \"\"\n        var s42 = \"\"\n        var s43 = \"\"\n        var s44 = \"\"\n        var s45 = \"\"\n        var s46 = \"\"\n        var s47 = \"\"\n        var s48 = \"\"\n        var s49 = \"\"\n        var s50 = \"\"\n        var s51 = \"\"\n        var s52 = \"\"\n        var s53 = \"\"\n        var s54 = \"\"\n        var s55 = \"\"\n        var s56 = \"\"\n        var s57 = \"\"\n        var s58 = \"\"\n        var s59 = \"\"\n        var s60 = \"\"\n        var s61 = \"\"\n        var s62 = \"\"\n        var s63 = \"\"\n        var s64 = \"\"\n        var s65 = \"\"\n        var s66 = \"\"\n        var s67 = \"\"\n        var s68 = \"\"\n        var s69 = \"\"\n        var s70 = \"\"\n        var s71 = \"\"\n        var s72 = \"\"\n        var s\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6h3jjhij.scala:91:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6h3jjhij.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms1\u001b[0m = s.toLowerCase()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value toLowerCase is not a member of Null\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6h3jjhij.scala:91:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase()\n        var s2 = \"\"\n        for (i <- 0 until s1.length) {\n            s2 += s1[(i + 2) % s1.length]\n        }\n        return s2\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpx9mpdfyc.scala:21:15 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            s2 += s1[(\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[31m2\u001b[0m) \u001b[35m%\u001b[0m s1.length]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx9mpdfyc.scala:21:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            s2 += s1[(\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[31m2\u001b[0m) \u001b[35m%\u001b[0m s1.length]\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: type %\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var sb = new StringBuilder()\n        for (var i = 0; i < s.length(); i++) {\n            var c = s.charAt(i)\n            var r = (c - 'a') % 26\n            sb.append(c - r)\n        }\n        return sb.toString()\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293047,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp8epnsql0.scala:19:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < s.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m             pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8epnsql0.scala:19:38 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < s.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      '<-' expected, but ';' found\n\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp8epnsql0.scala:19:43 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < s.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8epnsql0.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mfor\u001b[0m (\u001b[33mvar\u001b[0m i = \u001b[31m0\u001b[0m; i < s.length(); i++) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue withFilter is not a member of Null, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.conve",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        s.map(_.toCharArray).map(x => x.map(c => c.toLowerCase()).map(c => (c + 2) % 26)).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmps5n6y567.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        s.map(_.toCharArray).map(\u001b[36mx\u001b[0m => x.map(\u001b[36mc\u001b[0m => c.toLowerCase()).map(\u001b[36mc\u001b[0m => (c + \u001b[31m2\u001b[0m) % \u001b[31m26\u001b[0m)).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m              ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value toCharArray is not a member of Char\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[^a-z]\",\"\")\n        var s6 = s5.replaceAll(\"[^a-z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-z]\",\"\")\n        var s25 = s24.replaceAll(\"[^a-z]\",\"\")\n        var s26 = s25.replaceAll(\"[^a-z]\",\"\")\n        var s27 = s26.replaceAll(\"[^a-z]\",\"\")\n        var s28 = s27.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpujf0jfvv.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[^a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[^a-z]\", \"\")\n        var s5 = s4.replaceAll(\"[^a-z]\", \"\")\n        var s6 = s5.replaceAll(\"[^a-z]\", \"\")\n        var s7 = s6.replaceAll(\"[^a-z]\", \"\")\n        var s8 = s7.replaceAll(\"[^a-z]\", \"\")\n        var s9 = s8.replaceAll(\"[^a-z]\", \"\")\n        var s10 = s9.replaceAll(\"[^a-z]\", \"\")\n        var s11 = s10.replaceAll(\"[^a-z]\", \"\")\n        var s12 = s11.replaceAll(\"[^a-z]\", \"\")\n        var s13 = s12.replaceAll(\"[^a-z]\", \"\")\n        var s14 = s13.replaceAll(\"[^a-z]\", \"\")\n        var s15 = s14.replaceAll(\"[^a-z]\", \"\")\n        var s16 = s15.replaceAll(\"[^a-z]\", \"\")\n        var s17 = s16.replaceAll(\"[^a-z]\", \"\")\n        var s18 = s17.replaceAll(\"[^a-z]\", \"\")\n        var s19 = s18.replaceAll(\"[^a-z]\", \"\")\n        var s20 = s19.replaceAll(\"[^a-z]\", \"\")\n        var s21 = s20.replaceAll(\"[^a-z]\", \"\")\n        var s22 = s21.replaceAll(\"[^a-z]\", \"\")\n        var s23 = s22.replaceAll(\"[^a-z]\", \"\")\n        var s24 = s23.replaceAll(\"[^a-z]\", \"\")\n        var s25 = s24.replaceAll(\"[^a-z]\", \"\")\n        var s26 = s25.replaceAll(\"[^a-z]\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293021,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpel8foncj.scala:42:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms26\u001b[0m = s25.replaceAll(\"[^a-z]\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpel8foncj.scala:44:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpel8foncj.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpel8foncj.scala:44:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: [^a-z]def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        for (i <- 0 until s2.length) {\n            var c = s2.charAt(i)\n            var c2 = c.toLowerCase()\n            var c3 = c2.charAt(0)\n            var c4 = c3.toLowerCase()\n            var c5 = c4.charAt(0)\n            var c6 = c5.toLowerCase()\n            var c7 = c6.charAt(0)\n            var c8 = c7.toLowerCase()\n            var c9 = c8.charAt(0)\n            var c10 = c9.toLowerCase()\n            var c11 = c10.charAt(0)\n            var c12 = c11.toLowerCase()\n            var c13 = c12.charAt(0)\n            var c14 = c13.toLowerCase()\n            var c15 = c14.charAt(0)\n            var c16 = c15.toLowerCase()\n            var c17 = c16.charAt(0)\n            var c18 = c17.toLowerCase()\n            var c19 = c18.charAt(0)\n            var c20 = c19.toLowerCase()\n            var c21 = c20.charAt(0)\n            var c22 = c21.toLowerCase()\n            var c23 = c22.charAt(0)\n            var c24 = c23.toLowerCase()\n            var c25 = c24.charAt(0)\n            var c26 = c25.toLowerCase()\n            var c27 = c26.charAt(0)\n            var c28 = c27.toLowerCase()\n            var c29 = c28.charAt(0)\n            var c30 = c29.toLowerCase()\n            var c31 = c30.charAt(0)\n            var c32 = c31.toLowerCase()\n            var c33 = c32.charAt(0)\n            var c34 = c33.toLowerCase()\n            var c35 = c34.charAt(0)\n            var c36 = c35.\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293048,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1qpiew_8.scala:57:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1qpiew_8.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1qpiew_8.scala:22:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mc2\u001b[0m = c.toLowerCase()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1qpiew_8.scala:69:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp1qpiew_8.scala:58:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m58 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7166le1b.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString)\n\u001b[31m\u001b[31m   |\u001b[0m              ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value toCharArray is not a member of Char\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s6 = s5.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s25 = s24.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpopg0xkp1.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"/\",\"\")\n        var s6 = s5.replaceAll(\"\\\\.\",\"\")\n        var s7 = s6.replaceAll(\"\\\\,\",\"\")\n        var s8 = s7.replaceAll(\"\\\\:\",\"\")\n        var s9 = s8.replaceAll(\"\\\\;\",\"\")\n        var s10 = s9.replaceAll(\"\\\\?\",\"\")\n        var s11 = s10.replaceAll(\"\\\\!\",\"\")\n        var s12 = s11.replaceAll(\"\\\\@\",\"\")\n        var s13 = s12.replaceAll(\"\\\\#\",\"\")\n        var s14 = s13.replaceAll(\"\\\\$\",\"\")\n        var s15 = s14.replaceAll(\"\\\\%\",\"\")\n        var s16 = s15.replaceAll(\"\\\\^\",\"\")\n        var s17 = s16.replaceAll(\"\\\\&\",\"\")\n        var s18 = s17.replaceAll(\"\\\\*\",\"\")\n        var s19 = s18.replaceAll(\"\\\\(\",\"\")\n        var s20 = s19.replaceAll(\"\\\\)\",\"\")\n        var s21 = s20.replaceAll(\"\\\\+\",\"\")\n        var s22 = s21.replaceAll(\"\\\\=\",\"\")\n        var s23 = s22.replaceAll(\"\\\\-\",\"\")\n        var s24 = s23.replaceAll(\"\\\\_\",\"\")\n        var s25 = s24.replaceAll(\"\\\\<\",\"\")\n        var s26 = s25.replaceAll(\"\\\\>\",\"\")\n        var s27 = s26.replaceAll(\"\\\\\\\"\",\"\")\n        var s28 = s27.replaceAll(\"\\\\'\",\"\")\n        var s29 = s28.replaceAll(\"\\\\~\",\"\")\n        var s30 = s29.replaceAll(\"\\\\`\",\"\")\n        var s31 = s30.replaceAll(\"\\\\{\",\"\")\n        var s32 = s31.replaceAll(\"\\\\}\",\"\")\n        var s33 = s32.replaceAll(\"\\\\[\",\"\")\n        var s34 = s33.\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293046,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp20y6i2iy.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp20y6i2iy.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[^a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[^a-z]\", \"\")\n        var s5 = s4.replaceAll(\"[^a-z]\", \"\")\n        var s6 = s5.replaceAll(\"[^a-z]\", \"\")\n        var s7 = s6.replaceAll(\"[^a-z]\", \"\")\n        var s8 = s7.replaceAll(\"[^a-z]\", \"\")\n        var s9 = s8.replaceAll(\"[^a-z]\", \"\")\n        var s10 = s9.replaceAll(\"[^a-z]\", \"\")\n        var s11 = s10.replaceAll(\"[^a-z]\", \"\")\n        var s12 = s11.replaceAll(\"[^a-z]\", \"\")\n        var s13 = s12.replaceAll(\"[^a-z]\", \"\")\n        var s14 = s13.replaceAll(\"[^a-z]\", \"\")\n        var s15 = s14.replaceAll(\"[^a-z]\", \"\")\n        var s16 = s15.replaceAll(\"[^a-z]\", \"\")\n        var s17 = s16.replaceAll(\"[^a-z]\", \"\")\n        var s18 = s17.replaceAll(\"[^a-z]\", \"\")\n        var s19 = s18.replaceAll(\"[^a-z]\", \"\")\n        var s20 = s19.replaceAll(\"[^a-z]\", \"\")\n        var s21 = s20.replaceAll(\"[^a-z]\", \"\")\n        var s22 = s21.replaceAll(\"[^a-z]\", \"\")\n        var s23 = s22.replaceAll(\"[^a-z]\", \"\")\n        var s24 = s23.replaceAll(\"[^a-z]\", \"\")\n        var s25 = s24.replaceAll(\"[^a-z]\", \"\")\n        var s26 = s25.replaceAll(\"[^a-z]\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293021,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpel8foncj.scala:42:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms26\u001b[0m = s25.replaceAll(\"[^a-z]\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpel8foncj.scala:44:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpel8foncj.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpel8foncj.scala:44:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: [^a-z]def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            result = result + s[i]\n            if (i % 2 == 0) {\n                result = result + s[i]\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293042,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpezvgo2f6.scala:20:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            result = result + s[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpezvgo2f6.scala:22:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                result = result + s[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"/\",\"\")\n        var s6 = s5.replaceAll(\"\\\\.\",\"\")\n        var s7 = s6.replaceAll(\"\\\\,\",\"\")\n        var s8 = s7.replaceAll(\"\\\\:\",\"\")\n        var s9 = s8.replaceAll(\"\\\\;\",\"\")\n        var s10 = s9.replaceAll(\"\\\\?\",\"\")\n        var s11 = s10.replaceAll(\"\\\\!\",\"\")\n        var s12 = s11.replaceAll(\"\\\\@\",\"\")\n        var s13 = s12.replaceAll(\"\\\\#\",\"\")\n        var s14 = s13.replaceAll(\"\\\\$\",\"\")\n        var s15 = s14.replaceAll(\"\\\\%\",\"\")\n        var s16 = s15.replaceAll(\"\\\\^\",\"\")\n        var s17 = s16.replaceAll(\"\\\\&\",\"\")\n        var s18 = s17.replaceAll(\"\\\\*\",\"\")\n        var s19 = s18.replaceAll(\"\\\\(\",\"\")\n        var s20 = s19.replaceAll(\"\\\\)\",\"\")\n        var s21 = s20.replaceAll(\"\\\\+\",\"\")\n        var s22 = s21.replaceAll(\"\\\\-\",\"\")\n        var s23 = s22.replaceAll(\"\\\\=\",\"\")\n        var s24 = s23.replaceAll(\"\\\\<\",\"\")\n        var s25 = s24.replaceAll(\"\\\\>\",\"\")\n        var s26 = s25.replaceAll(\"\\\\[\",\"\")\n        var s27 = s26.replaceAll(\"\\\\]\",\"\")\n        var s28 = s27.replaceAll(\"\\\\{\",\"\")\n        var s29 = s28.replaceAll(\"\\\\}\",\"\")\n        var s30 = s29.replaceAll(\"\\\\|\",\"\")\n        var s31 = s30.replaceAll(\"\\\\~\",\"\")\n        var s32 = s31.replaceAll(\"\\\\\\\"\",\"\")\n        var s33 = s32.replaceAll(\"\\\\'\",\"\")\n        var s34 = s33.\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293046,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsg3aqhg2.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsg3aqhg2.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"/\",\"\")\n        var s6 = s5.replaceAll(\"\\\\.\",\"\")\n        var s7 = s6.replaceAll(\"\\\\,\",\"\")\n        var s8 = s7.replaceAll(\"\\\\:\",\"\")\n        var s9 = s8.replaceAll(\"\\\\;\",\"\")\n        var s10 = s9.replaceAll(\"\\\\?\",\"\")\n        var s11 = s10.replaceAll(\"\\\\!\",\"\")\n        var s12 = s11.replaceAll(\"\\\\$\",\"\")\n        var s13 = s12.replaceAll(\"\\\\%\",\"\")\n        var s14 = s13.replaceAll(\"\\\\^\",\"\")\n        var s15 = s14.replaceAll(\"\\\\&\",\"\")\n        var s16 = s15.replaceAll(\"\\\\*\",\"\")\n        var s17 = s16.replaceAll(\"\\\\(\",\"\")\n        var s18 = s17.replaceAll(\"\\\\)\",\"\")\n        var s19 = s18.replaceAll(\"\\\\+\",\"\")\n        var s20 = s19.replaceAll(\"\\\\-\",\"\")\n        var s21 = s20.replaceAll(\"\\\\=\",\"\")\n        var s22 = s21.replaceAll(\"\\\\#\",\"\")\n        var s23 = s22.replaceAll(\"\\\\$\",\"\")\n        var s24 = s23.replaceAll(\"\\\\%\",\"\")\n        var s25 = s24.replaceAll(\"\\\\^\",\"\")\n        var s26 = s25.replaceAll(\"\\\\&\",\"\")\n        var s27 = s26.replaceAll(\"\\\\*\",\"\")\n        var s28 = s27.replaceAll(\"\\\\(\",\"\")\n        var s29 = s28.replaceAll(\"\\\\)\",\"\")\n        var s30 = s29.replaceAll(\"\\\\+\",\"\")\n        var s31 = s30.replaceAll(\"\\\\-\",\"\")\n        var s32 = s31.replaceAll(\"\\\\=\",\"\")\n        var s33 = s32.replaceAll(\"\\\\#\",\"\")\n        var s34 = s33.replace\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293047,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E051] Reference Error: /tmp/tmpdcr2admg.scala:50:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms34\u001b[0m = s33.replace\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mAmbiguous overload. The overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mreplace\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: CharSequence, x$1: CharSequence): String\n\u001b[31m   |\u001b[0m (x$0: Char, x$1: Char): String\n\u001b[31m   |\u001b[0mboth match expected type <?>\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdcr2admg.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase()\n        var s2 = s1.replaceAll(\" \",\"\")\n        var s3 = s2.replaceAll(\"-\",\"\")\n        var s4 = s3.replaceAll(\"_\",\"\")\n        var s5 = s4.replaceAll(\"/\",\"\")\n        var s6 = s5.replaceAll(\"\\\\.\",\"\")\n        var s7 = s6.replaceAll(\"\\\\,\",\"\")\n        var s8 = s7.replaceAll(\"\\\\:\",\"\")\n        var s9 = s8.replaceAll(\"\\\\;\",\"\")\n        var s10 = s9.replaceAll(\"\\\\?\",\"\")\n        var s11 = s10.replaceAll(\"\\\\!\",\"\")\n        var s12 = s11.replaceAll(\"\\\\@\",\"\")\n        var s13 = s12.replaceAll(\"\\\\#\",\"\")\n        var s14 = s13.replaceAll(\"\\\\$\",\"\")\n        var s15 = s14.replaceAll(\"\\\\%\",\"\")\n        var s16 = s15.replaceAll(\"\\\\^\",\"\")\n        var s17 = s16.replaceAll(\"\\\\&\",\"\")\n        var s18 = s17.replaceAll(\"\\\\*\",\"\")\n        var s19 = s18.replaceAll(\"\\\\(\",\"\")\n        var s20 = s19.replaceAll(\"\\\\)\",\"\")\n        var s21 = s20.replaceAll(\"\\\\+\",\"\")\n        var s22 = s21.replaceAll(\"\\\\=\",\"\")\n        var s23 = s22.replaceAll(\"\\\\-\",\"\")\n        var s24 = s23.replaceAll(\"\\\\/\",\"\")\n        var s25 = s24.replaceAll(\"\\\\>\",\"\")\n        var s26 = s25.replaceAll(\"\\\\<\",\"\")\n        var s27 = s26.replaceAll(\"\\\\\\\"\",\"\")\n        var s28 = s27.replaceAll(\"\\\\'\",\"\")\n        var s29 = s28.replaceAll(\"\\\\[\",\"\")\n        var s30 = s29.replaceAll(\"\\\\]\",\"\")\n        var s31 = s30.replaceAll(\"\\\\{\",\"\")\n        var s32 = s31.replaceAll(\"\\\\}\",\"\")\n        var s33 = s32.replace\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293055,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E051] Reference Error: /tmp/tmpsoqpl3o8.scala:50:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms33\u001b[0m = s32.replace\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mAmbiguous overload. The overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mreplace\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: CharSequence, x$1: CharSequence): String\n\u001b[31m   |\u001b[0m (x$0: Char, x$1: Char): String\n\u001b[31m   |\u001b[0mboth match expected type <?>\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsoqpl3o8.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[^a-z]\",\"\")\n        var s6 = s5.replaceAll(\"[^a-z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-z]\",\"\")\n        var s25 = s24.replaceAll(\"[^a-z]\",\"\")\n        var s26 = s25.replaceAll(\"[^a-z]\",\"\")\n        var s27 = s26.replaceAll(\"[^a-z]\",\"\")\n        var s28 = s27.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpujf0jfvv.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[^a-z]\",\"\")\n        var s6 = s5.replaceAll(\"[^a-z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-z]\",\"\")\n        var s25 = s24.replaceAll(\"[^a-z]\",\"\")\n        var s26 = s25.replaceAll(\"[^a-z]\",\"\")\n        var s27 = s26.replaceAll(\"[^a-z]\",\"\")\n        var s28 = s27.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpujf0jfvv.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            result += s.charAt(i)\n            if (i + 2 < s.length) {\n                result += s.charAt(i + 2)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1c4y5cju.scala:28)\n\tat Problem.main(tmp1c4y5cju.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        var s4 = \"\"\n        var s5 = \"\"\n        var s6 = \"\"\n        var s7 = \"\"\n        var s8 = \"\"\n        var s9 = \"\"\n        var s10 = \"\"\n        var s11 = \"\"\n        var s12 = \"\"\n        var s13 = \"\"\n        var s14 = \"\"\n        var s15 = \"\"\n        var s16 = \"\"\n        var s17 = \"\"\n        var s18 = \"\"\n        var s19 = \"\"\n        var s20 = \"\"\n        var s21 = \"\"\n        var s22 = \"\"\n        var s23 = \"\"\n        var s24 = \"\"\n        var s25 = \"\"\n        var s26 = \"\"\n        var s27 = \"\"\n        var s28 = \"\"\n        var s29 = \"\"\n        var s30 = \"\"\n        var s31 = \"\"\n        var s32 = \"\"\n        var s33 = \"\"\n        var s34 = \"\"\n        var s35 = \"\"\n        var s36 = \"\"\n        var s37 = \"\"\n        var s38 = \"\"\n        var s39 = \"\"\n        var s40 = \"\"\n        var s41 = \"\"\n        var s42 = \"\"\n        var s43 = \"\"\n        var s44 = \"\"\n        var s45 = \"\"\n        var s46 = \"\"\n        var s47 = \"\"\n        var s48 = \"\"\n        var s49 = \"\"\n        var s50 = \"\"\n        var s51 = \"\"\n        var s52 = \"\"\n        var s53 = \"\"\n        var s54 = \"\"\n        var s55 = \"\"\n        var s56 = \"\"\n        var s57 = \"\"\n        var s58 = \"\"\n        var s59 = \"\"\n        var s60 = \"\"\n        var s61 = \"\"\n        var s62 = \"\"\n        var s63 = \"\"\n        var s64 = \"\"\n        var s65 = \"\"\n        var s66 = \"\"\n        var s67 = \"\"\n        var s68 = \"\"\n        var s69 = \"\"\n        var s70 = \"\"\n        var s71 = \"\"\n        var s72 = \"\"\n        var s73 = \"\"\n        var s\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9mne5sgs.scala:91:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9mne5sgs.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms2\u001b[0m = s.toLowerCase()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value toLowerCase is not a member of Null\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9mne5sgs.scala:91:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8qjps38h.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m              ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value toCharArray is not a member of Char\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            var c = s.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n                result += (c - 'a' + 'a' - 2)\n            } else if (c >= 'A' && c <= 'Z') {\n                result += (c - 'A' + 'A' - 2)\n            } else {\n                result += c\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293063,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpulwy54n1.scala:32)\n\tat Problem.main(tmpulwy54n1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[0-9]\", \"\")\n        var s5 = s4.replaceAll(\"[^a-z0-9]\", \"\")\n        var s6 = s5.replaceAll(\"[^a-z]\", \"\")\n        var s7 = s6.replaceAll(\"[^0-9]\", \"\")\n        var s8 = s7.replaceAll(\"[^a-z0-9]\", \"\")\n        var s9 = s8.replaceAll(\"[^a-z]\", \"\")\n        var s10 = s9.replaceAll(\"[^0-9]\", \"\")\n        var s11 = s10.replaceAll(\"[^a-z0-9]\", \"\")\n        var s12 = s11.replaceAll(\"[^a-z]\", \"\")\n        var s13 = s12.replaceAll(\"[^0-9]\", \"\")\n        var s14 = s13.replaceAll(\"[^a-z0-9]\", \"\")\n        var s15 = s14.replaceAll(\"[^a-z]\", \"\")\n        var s16 = s15.replaceAll(\"[^0-9]\", \"\")\n        var s17 = s16.replaceAll(\"[^a-z0-9]\", \"\")\n        var s18 = s17.replaceAll(\"[^a-z]\", \"\")\n        var s19 = s18.replaceAll(\"[^0-9]\", \"\")\n        var s20 = s19.replaceAll(\"[^a-z0-9]\", \"\")\n        var s21 = s20.replaceAll(\"[^a-z]\", \"\")\n        var s22 = s21.replaceAll(\"[^0-9]\", \"\")\n        var s23 = s22.replaceAll(\"[^a-z0-9]\", \"\")\n        var s24 = s23.replaceAll(\"[^a-z]\", \"\")\n        var s25 = s24.replaceAll(\"[^0-9]\", \"\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293063,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp725kzwb9.scala:41:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms25\u001b[0m = s24.replaceAll(\u001b[31m\"[^0-9]\"\u001b[0m, \"\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           unclosed string literal\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp725kzwb9.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[^a-z]\",\"\")\n        var s6 = s5.replaceAll(\"[^a-z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-z]\",\"\")\n        var s25 = s24.replaceAll(\"[^a-z]\",\"\")\n        var s26 = s25.replaceAll(\"[^a-z]\",\"\")\n        var s27 = s26.replaceAll(\"[^a-z]\",\"\")\n        var s28 = s27.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpujf0jfvv.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8qjps38h.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m              ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value toCharArray is not a member of Char\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[^a-z]\",\"\")\n        var s6 = s5.replaceAll(\"[a-z]\",\"\")\n        var s7 = s6.replaceAll(\"[0-9]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-z0-9]\",\"\")\n        var s9 = s8.replaceAll(\"[a-z0-9]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-z0-9]\",\"\")\n        var s11 = s10.replaceAll(\"[a-z0-9]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-z0-9]\",\"\")\n        var s13 = s12.replaceAll(\"[a-z0-9]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-z0-9]\",\"\")\n        var s15 = s14.replaceAll(\"[a-z0-9]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-z0-9]\",\"\")\n        var s17 = s16.replaceAll(\"[a-z0-9]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-z0-9]\",\"\")\n        var s19 = s18.replaceAll(\"[a-z0-9]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-z0-9]\",\"\")\n        var s21 = s20.replaceAll(\"[a-z0-9]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-z0-9]\",\"\")\n        var s23 = s22.replaceAll(\"[a-z0-9]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-z0-9]\",\"\")\n        var s25 = s24.replaceAll(\"[a-z0-9]\",\"\")\n        var s26 = s25\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293063,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp75g17cj4.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        var s4 = \"\"\n        var s5 = \"\"\n        var s6 = \"\"\n        var s7 = \"\"\n        var s8 = \"\"\n        var s9 = \"\"\n        var s10 = \"\"\n        var s11 = \"\"\n        var s12 = \"\"\n        var s13 = \"\"\n        var s14 = \"\"\n        var s15 = \"\"\n        var s16 = \"\"\n        var s17 = \"\"\n        var s18 = \"\"\n        var s19 = \"\"\n        var s20 = \"\"\n        var s21 = \"\"\n        var s22 = \"\"\n        var s23 = \"\"\n        var s24 = \"\"\n        var s25 = \"\"\n        var s26 = \"\"\n        var s27 = \"\"\n        var s28 = \"\"\n        var s29 = \"\"\n        var s30 = \"\"\n        var s31 = \"\"\n        var s32 = \"\"\n        var s33 = \"\"\n        var s34 = \"\"\n        var s35 = \"\"\n        var s36 = \"\"\n        var s37 = \"\"\n        var s38 = \"\"\n        var s39 = \"\"\n        var s40 = \"\"\n        var s41 = \"\"\n        var s42 = \"\"\n        var s43 = \"\"\n        var s44 = \"\"\n        var s45 = \"\"\n        var s46 = \"\"\n        var s47 = \"\"\n        var s48 = \"\"\n        var s49 = \"\"\n        var s50 = \"\"\n        var s51 = \"\"\n        var s52 = \"\"\n        var s53 = \"\"\n        var s54 = \"\"\n        var s55 = \"\"\n        var s56 = \"\"\n        var s57 = \"\"\n        var s58 = \"\"\n        var s59 = \"\"\n        var s60 = \"\"\n        var s61 = \"\"\n        var s62 = \"\"\n        var s63 = \"\"\n        var s64 = \"\"\n        var s65 = \"\"\n        var s66 = \"\"\n        var s67 = \"\"\n        var s68 = \"\"\n        var s69 = \"\"\n        var s70 = \"\"\n        var s71 = \"\"\n        var s72 = \"\"\n        var s73 = \"\"\n        var s\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9mne5sgs.scala:91:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9mne5sgs.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms2\u001b[0m = s.toLowerCase()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value toLowerCase is not a member of Null\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9mne5sgs.scala:91:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8qjps38h.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m              ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value toCharArray is not a member of Char\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"_\",\"\")\n        var s6 = s5.replaceAll(\"/\",\"\")\n        var s7 = s6.replaceAll(\"\\\\.\",\"\")\n        var s8 = s7.replaceAll(\"\\\\,\",\"\")\n        var s9 = s8.replaceAll(\"\\\\:\",\"\")\n        var s10 = s9.replaceAll(\"\\\\;\",\"\")\n        var s11 = s10.replaceAll(\"\\\\?\",\"\")\n        var s12 = s11.replaceAll(\"\\\\!\",\"\")\n        var s13 = s12.replaceAll(\"\\\\-\",\"\")\n        var s14 = s13.replaceAll(\"\\\\+\",\"\")\n        var s15 = s14.replaceAll(\"\\\\*\",\"\")\n        var s16 = s15.replaceAll(\"\\\\/\",\"\")\n        var s17 = s16.replaceAll(\"\\\\^\",\"\")\n        var s18 = s17.replaceAll(\"\\\\%\",\"\")\n        var s19 = s18.replaceAll(\"\\\\$\",\"\")\n        var s20 = s19.replaceAll(\"\\\\@\",\"\")\n        var s21 = s20.replaceAll(\"\\\\#\",\"\")\n        var s22 = s21.replaceAll(\"\\\\(\",\"\")\n        var s23 = s22.replaceAll(\"\\\\)\",\"\")\n        var s24 = s23.replaceAll(\"\\\\-\",\"\")\n        var s25 = s24.replaceAll(\"\\\\+\",\"\")\n        var s26 = s25.replaceAll(\"\\\\*\",\"\")\n        var s27 = s26.replaceAll(\"\\\\/\",\"\")\n        var s28 = s27.replaceAll(\"\\\\^\",\"\")\n        var s29 = s28.replaceAll(\"\\\\%\",\"\")\n        var s30 = s29.replaceAll(\"\\\\$\",\"\")\n        var s31 = s30.replaceAll(\"\\\\@\",\"\")\n        var s32 = s31.replaceAll(\"\\\\#\",\"\")\n        var s33 = s32.replaceAll(\"\\\\(\",\"\")\n        var s34 = s33.replace\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E051] Reference Error: /tmp/tmppn8l1mka.scala:50:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms34\u001b[0m = s33.replace\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mAmbiguous overload. The overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mreplace\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: CharSequence, x$1: CharSequence): String\n\u001b[31m   |\u001b[0m (x$0: Char, x$1: Char): String\n\u001b[31m   |\u001b[0mboth match expected type <?>\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppn8l1mka.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase()\n        var s2 = \"\"\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s3 = \"\"\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1xpzqq9v.scala:46:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mi\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mi is already defined as \u001b[33mvariable\u001b[0m \u001b[35mi\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1xpzqq9v.scala:47:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mj\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mj is already defined as \u001b[33mvariable\u001b[0m \u001b[35mj\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1xpzqq9v.scala:48:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mk\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mk is already defined as \u001b[33mvariable\u001b[0m \u001b[35mk\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1xpzqq9v.scala:49:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ml is already defined as \u001b[33mvariable\u001b[0m \u001b[35ml\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1xpzqq9v.scala:50:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mm\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mm is already defined as \u001b[33mvariable\u001b[0m \u001b[35mm\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1xpzqq9v.scala:51:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mn\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s6 = s5.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s25 = s24.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpopg0xkp1.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        var s4 = \"\"\n        var s5 = \"\"\n        var s6 = \"\"\n        var s7 = \"\"\n        var s8 = \"\"\n        var s9 = \"\"\n        var s10 = \"\"\n        var s11 = \"\"\n        var s12 = \"\"\n        var s13 = \"\"\n        var s14 = \"\"\n        var s15 = \"\"\n        var s16 = \"\"\n        var s17 = \"\"\n        var s18 = \"\"\n        var s19 = \"\"\n        var s20 = \"\"\n        var s21 = \"\"\n        var s22 = \"\"\n        var s23 = \"\"\n        var s24 = \"\"\n        var s25 = \"\"\n        var s26 = \"\"\n        var s27 = \"\"\n        var s28 = \"\"\n        var s29 = \"\"\n        var s30 = \"\"\n        var s31 = \"\"\n        var s32 = \"\"\n        var s33 = \"\"\n        var s34 = \"\"\n        var s35 = \"\"\n        var s36 = \"\"\n        var s37 = \"\"\n        var s38 = \"\"\n        var s39 = \"\"\n        var s40 = \"\"\n        var s41 = \"\"\n        var s42 = \"\"\n        var s43 = \"\"\n        var s44 = \"\"\n        var s45 = \"\"\n        var s46 = \"\"\n        var s47 = \"\"\n        var s48 = \"\"\n        var s49 = \"\"\n        var s50 = \"\"\n        var s51 = \"\"\n        var s52 = \"\"\n        var s53 = \"\"\n        var s54 = \"\"\n        var s55 = \"\"\n        var s56 = \"\"\n        var s57 = \"\"\n        var s58 = \"\"\n        var s59 = \"\"\n        var s60 = \"\"\n        var s61 = \"\"\n        var s62 = \"\"\n        var s63 = \"\"\n        var s64 = \"\"\n        var s65 = \"\"\n        var s66 = \"\"\n        var s67 = \"\"\n        var s68 = \"\"\n        var s69 = \"\"\n        var s70 = \"\"\n        var s71 = \"\"\n        var s72 = \"\"\n        var s73 = \"\"\n        var s\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9mne5sgs.scala:91:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9mne5sgs.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms2\u001b[0m = s.toLowerCase()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value toLowerCase is not a member of Null\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9mne5sgs.scala:91:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        s.map(c => c.toLowerCase()).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c + c)).map(c => c.charAt(0)).map(c => (c +\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmppyymvj3d.scala:18:1031 -------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        s.map(\u001b[36mc\u001b[0m => c.toLowerCase()).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c + c)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => (c +\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[0-9]\", \"\")\n        var s5 = s4.replaceAll(\"[^a-z0-9]\", \"\")\n        var s6 = s5.replaceAll(\"[^a-z0-9]\", \"\")\n        var s7 = s6.replaceAll(\"[^a-z0-9]\", \"\")\n        var s8 = s7.replaceAll(\"[^a-z0-9]\", \"\")\n        var s9 = s8.replaceAll(\"[^a-z0-9]\", \"\")\n        var s10 = s9.replaceAll(\"[^a-z0-9]\", \"\")\n        var s11 = s10.replaceAll(\"[^a-z0-9]\", \"\")\n        var s12 = s11.replaceAll(\"[^a-z0-9]\", \"\")\n        var s13 = s12.replaceAll(\"[^a-z0-9]\", \"\")\n        var s14 = s13.replaceAll(\"[^a-z0-9]\", \"\")\n        var s15 = s14.replaceAll(\"[^a-z0-9]\", \"\")\n        var s16 = s15.replaceAll(\"[^a-z0-9]\", \"\")\n        var s17 = s16.replaceAll(\"[^a-z0-9]\", \"\")\n        var s18 = s17.replaceAll(\"[^a-z0-9]\", \"\")\n        var s19 = s18.replaceAll(\"[^a-z0-9]\", \"\")\n        var s20 = s19.replaceAll(\"[^a-z0-9]\", \"\")\n        var s21 = s20.replaceAll(\"[^a-z0-9]\", \"\")\n        var s22 = s21.replaceAll(\"[^a-z0-9]\", \"\")\n        var s23 = s22.replaceAll(\"[^a-z0-9]\", \"\")\n        var s24\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpikvt6wan.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpikvt6wan.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var a = \"abcdefghijklmnopqrstuvwxyz\"\n        var b = \"zyxwvutsrqponmlkjihgfedcba\"\n        var c = \"ponmlkjihgfedcbazyxwvutsrq\"\n        var d = \"qrstuvwxyzabcdefghijklmnop\"\n        var e = \"mnopqrstuvwxyzabcdefghijkl\"\n        var f = \"ihgfedcbazyxwvutsrqponmlkj\"\n        var g = \"kjihgfedcbazyxwvutsrqponml\"\n        var h = \"ewhjklnopqrstuvwxyzabcdef\"\n        var i = \"gfkjihgfedcbazyxwvutsrqpon\"\n        var j = \"lm\"\n        var k = \"asdfghjkl\"\n        var l = \"zxcvbnm\"\n        var m = \"qwertyuiop\"\n        var n = \"asdfghjklzxcvbnm\"\n        var o = \"zxcvbnmqwertyuiop\"\n        var p = \"asdfghjklzxcvbnmqwerty\"\n        var q = \"asdfghjklzxcvbnmqwertyui\"\n        var r = \"asdfghjklzxcvbnmqwertyuio\"\n        var s = \"asdfghjklzxcvbnmqwertyuio\"\n        var t = \"asdfghjklzxcvbnmqwertyuio\"\n        var u = \"asdfghjklzxcvbnmqwertyuio\"\n        var v = \"asdfghjklzxcvbnmqwertyuio\"\n        var w = \"asdfghjklzxcvbnmqwertyuio\"\n        var x = \"asdfghjklzxcvbnmqwertyuio\"\n        var y = \"asdfghjklzxcvbnmqwertyuio\"\n        var z = \"asdfghjklzxcvbnm\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp1p2gop98.scala:43:16 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mz\u001b[0m = \"asdfghjklzxcvbnm\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmp1p2gop98.scala:45:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1p2gop98.scala:44:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1p2gop98.scala:45:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: asdfghjklzxcvbnmdef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s6 = s5.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s25 = s24.replaceAll(\"\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp3gtdc42t.scala:41:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms25\u001b[0m = s24.replaceAll(\"\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3gtdc42t.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        var s4 = \"\"\n        var s5 = \"\"\n        var s6 = \"\"\n        var s7 = \"\"\n        var s8 = \"\"\n        var s9 = \"\"\n        var s10 = \"\"\n        var s11 = \"\"\n        var s12 = \"\"\n        var s13 = \"\"\n        var s14 = \"\"\n        var s15 = \"\"\n        var s16 = \"\"\n        var s17 = \"\"\n        var s18 = \"\"\n        var s19 = \"\"\n        var s20 = \"\"\n        var s21 = \"\"\n        var s22 = \"\"\n        var s23 = \"\"\n        var s24 = \"\"\n        var s25 = \"\"\n        var s26 = \"\"\n        var s27 = \"\"\n        var s28 = \"\"\n        var s29 = \"\"\n        var s30 = \"\"\n        var s31 = \"\"\n        var s32 = \"\"\n        var s33 = \"\"\n        var s34 = \"\"\n        var s35 = \"\"\n        var s36 = \"\"\n        var s37 = \"\"\n        var s38 = \"\"\n        var s39 = \"\"\n        var s40 = \"\"\n        var s41 = \"\"\n        var s42 = \"\"\n        var s43 = \"\"\n        var s44 = \"\"\n        var s45 = \"\"\n        var s46 = \"\"\n        var s47 = \"\"\n        var s48 = \"\"\n        var s49 = \"\"\n        var s50 = \"\"\n        var s51 = \"\"\n        var s52 = \"\"\n        var s53 = \"\"\n        var s54 = \"\"\n        var s55 = \"\"\n        var s56 = \"\"\n        var s57 = \"\"\n        var s58 = \"\"\n        var s59 = \"\"\n        var s60 = \"\"\n        var s61 = \"\"\n        var s62 = \"\"\n        var s63 = \"\"\n        var s64 = \"\"\n        var s65 = \"\"\n        var s66 = \"\"\n        var s67 = \"\"\n        var s68 = \"\"\n        var s69 = \"\"\n        var s70 = \"\"\n        var s71 = \"\"\n        var s72 = \"\"\n        var s73 = \"\"\n        var s\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9mne5sgs.scala:91:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9mne5sgs.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms2\u001b[0m = s.toLowerCase()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value toLowerCase is not a member of Null\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9mne5sgs.scala:91:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var r = \"\"\n        for (i <- 0 until s.length) {\n            r = r + s[i]\n            r = r + s[i + 2]\n            r = r + s[i + 1]\n            r = r + s[i + 3]\n        }\n        return r\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaq5xflko.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            r = r + s[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaq5xflko.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            r = r + s[\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[31m2\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: type +\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaq5xflko.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            r = r + s[\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[31m1\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: type +\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaq5xflko.scala:23:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            r = r + s[\u001b[35mi\u001b[0m \u001b[35m+\u001b[0m \u001b[31m3\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: type +\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        for (i <- 0 until s2.length) {\n            var c = s2.charAt(i)\n            var c2 = c.toLowerCase()\n            var c3 = c2.charAt(0)\n            s3 = s3 + c3\n        }\n        return s3\n    }\n\n    // Create a function decrypt that takes a string as an argument and\n    // returns a string decrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift up by two multiplied to two places.\n    // For example:\n    // >>> decrypt((\"lm\"))\n    // (\"hi\")\n    // >>> decrypt((\"ewhjklnop\"))\n    // (\"asdfghjkl\")\n    // >>> decrypt((\"kj\"))\n    // (\"gf\")\n    // >>> decrypt((\"ix\"))\n    // (\"et\")\n    def decrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        for (i <- 0 until s2.length) {\n            var c = s2.charAt(i)\n            var c2 = c.toLowerCase()\n            var c3 = c2.charAt(0)\n            s3 = s3 + c3\n        }\n        return s3\n    }\n\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being shifted. \n    // The alphabet should be shifted in a manner such that the letters \n    // shift right by one.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"hg\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"asdfghjkl\")\n    // >>> encrypt((\"gf\"))\n    // (\"gf\")\n    // >>> encrypt((\"et\"))\n    // (\"et\")\n    def encrypt2(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        for (i <- 0 until s2.length) {\n            \n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsxs9t8g5.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsxs9t8g5.scala:22:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mc2\u001b[0m = c.toLowerCase()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsxs9t8g5.scala:47:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mc2\u001b[0m = c.toLowerCase()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsxs9t8g5.scala:84:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpsxs9t8g5.scala:73:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m73 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            result = result + s.charAt(i)\n            if (i % 2 == 0) {\n                result = result + s.charAt(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpaqlq8dd9.scala:28)\n\tat Problem.main(tmpaqlq8dd9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8qjps38h.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m              ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value toCharArray is not a member of Char\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[0-9]\", \"\")\n        var s5 = s4.replaceAll(\"[^a-z0-9]\", \"\")\n        var s6 = s5.replaceAll(\"[^a-z]\", \"\")\n        var s7 = s6.replaceAll(\"[^0-9]\", \"\")\n        var s8 = s7.replaceAll(\"[^a-z0-9]\", \"\")\n        var s9 = s8.replaceAll(\"[^a-z]\", \"\")\n        var s10 = s9.replaceAll(\"[^0-9]\", \"\")\n        var s11 = s10.replaceAll(\"[^a-z0-9]\", \"\")\n        var s12 = s11.replaceAll(\"[^a-z]\", \"\")\n        var s13 = s12.replaceAll(\"[^0-9]\", \"\")\n        var s14 = s13.replaceAll(\"[^a-z0-9]\", \"\")\n        var s15 = s14.replaceAll(\"[^a-z]\", \"\")\n        var s16 = s15.replaceAll(\"[^0-9]\", \"\")\n        var s17 = s16.replaceAll(\"[^a-z0-9]\", \"\")\n        var s18 = s17.replaceAll(\"[^a-z]\", \"\")\n        var s19 = s18.replaceAll(\"[^0-9]\", \"\")\n        var s20 = s19.replaceAll(\"[^a-z0-9]\", \"\")\n        var s21 = s20.replaceAll(\"[^a-z]\", \"\")\n        var s22 = s21.replaceAll(\"[^0-9]\", \"\")\n        var s23 = s22.replaceAll(\"[^a-z0-9]\", \"\")\n        var s24 = s23.replaceAll(\"[^a-z]\", \"\")\n        var s25 = s24.replaceAll(\"[^0-9]\", \"\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293063,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp725kzwb9.scala:41:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms25\u001b[0m = s24.replaceAll(\u001b[31m\"[^0-9]\"\u001b[0m, \"\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           unclosed string literal\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp725kzwb9.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"_\",\"\")\n        var s6 = s5.replaceAll(\"/\",\"\")\n        var s7 = s6.replaceAll(\"\\\\.\",\"\")\n        var s8 = s7.replaceAll(\"\\\\?\",\"\")\n        var s9 = s8.replaceAll(\"\\\\*\",\"\")\n        var s10 = s9.replaceAll(\"\\\\(\",\"\")\n        var s11 = s10.replaceAll(\"\\\\)\",\"\")\n        var s12 = s11.replaceAll(\"\\\\+\",\"\")\n        var s13 = s12.replaceAll(\"\\\\-\",\"\")\n        var s14 = s13.replaceAll(\"\\\\=\",\"\")\n        var s15 = s14.replaceAll(\"\\\\:\",\"\")\n        var s16 = s15.replaceAll(\"\\\\;\",\"\")\n        var s17 = s16.replaceAll(\"\\\\,\",\"\")\n        var s18 = s17.replaceAll(\"\\\\.\",\"\")\n        var s19 = s18.replaceAll(\"\\\\'\",\"\")\n        var s20 = s19.replaceAll(\"\\\\\\\"\",\"\")\n        var s21 = s20.replaceAll(\"\\\\!\",\"\")\n        var s22 = s21.replaceAll(\"\\\\#\",\"\")\n        var s23 = s22.replaceAll(\"\\\\$\",\"\")\n        var s24 = s23.replaceAll(\"\\\\%\",\"\")\n        var s25 = s24.replaceAll(\"\\\\^\",\"\")\n        var s26 = s25.replaceAll(\"\\\\&\",\"\")\n        var s27 = s26.replaceAll(\"\\\\@\",\"\")\n        var s28 = s27.replaceAll(\"\\\\[\",\"\")\n        var s29 = s28.replaceAll(\"\\\\]\",\"\")\n        var s30 = s29.replaceAll(\"\\\\{\",\"\")\n        var s31 = s30.replaceAll(\"\\\\}\",\"\")\n        var s32 = s31.replaceAll(\"\\\\|\",\"\")\n        var s33 = s32.replaceAll(\"\\\\~\",\"\")\n        var s34 = s33.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293063,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu2l3c55a.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var result = \"\"\n        var alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        var alphabet_len = alphabet.length\n        var s_len = s.length\n        for (i <- 0 until s_len) {\n            var index = (i + 2) % alphabet_len\n            result += alphabet[index]\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpa865nwmq.scala:24:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            result += alphabet[\u001b[35mindex\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa865nwmq.scala:24:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            result += alphabet[\u001b[35mindex\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: type index\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[^a-z]\",\"\")\n        var s6 = s5.replaceAll(\"[^a-z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-z]\",\"\")\n        var s25 = s24.replaceAll(\"[^a-z]\",\"\")\n        var s26 = s25.replaceAll(\"[^a-z]\",\"\")\n        var s27 = s26.replaceAll(\"[^a-z]\",\"\")\n        var s28 = s27.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpujf0jfvv.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[^a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[^a-z]\", \"\")\n        var s5 = s4.replaceAll(\"[^a-z]\", \"\")\n        var s6 = s5.replaceAll(\"[^a-z]\", \"\")\n        var s7 = s6.replaceAll(\"[^a-z]\", \"\")\n        var s8 = s7.replaceAll(\"[^a-z]\", \"\")\n        var s9 = s8.replaceAll(\"[^a-z]\", \"\")\n        var s10 = s9.replaceAll(\"[^a-z]\", \"\")\n        var s11 = s10.replaceAll(\"[^a-z]\", \"\")\n        var s12 = s11.replaceAll(\"[^a-z]\", \"\")\n        var s13 = s12.replaceAll(\"[^a-z]\", \"\")\n        var s14 = s13.replaceAll(\"[^a-z]\", \"\")\n        var s15 = s14.replaceAll(\"[^a-z]\", \"\")\n        var s16 = s15.replaceAll(\"[^a-z]\", \"\")\n        var s17 = s16.replaceAll(\"[^a-z]\", \"\")\n        var s18 = s17.replaceAll(\"[^a-z]\", \"\")\n        var s19 = s18.replaceAll(\"[^a-z]\", \"\")\n        var s20 = s19.replaceAll(\"[^a-z]\", \"\")\n        var s21 = s20.replaceAll(\"[^a-z]\", \"\")\n        var s22 = s21.replaceAll(\"[^a-z]\", \"\")\n        var s23 = s22.replaceAll(\"[^a-z]\", \"\")\n        var s24 = s23.replaceAll(\"[^a-z]\", \"\")\n        var s25 = s24.replaceAll(\"[^a-z]\", \"\")\n        var s26 = s25.replaceAll(\"[^a-z]\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293021,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpel8foncj.scala:42:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms26\u001b[0m = s25.replaceAll(\"[^a-z]\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpel8foncj.scala:44:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpel8foncj.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpel8foncj.scala:44:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: [^a-z]def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        s.map(c => c.toCharArray(0).toUpperCase()).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0)).map(c => c.toCharArray(0\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_oyflx8j.scala:19:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_oyflx8j.scala:18:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        s.map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m).toUpperCase()).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"/\",\"\")\n        var s6 = s5.replaceAll(\"\\\\.\",\"\")\n        var s7 = s6.replaceAll(\"\\\\,\",\"\")\n        var s8 = s7.replaceAll(\"\\\\:\",\"\")\n        var s9 = s8.replaceAll(\"\\\\;\",\"\")\n        var s10 = s9.replaceAll(\"\\\\?\",\"\")\n        var s11 = s10.replaceAll(\"\\\\!\",\"\")\n        var s12 = s11.replaceAll(\"\\\\$\",\"\")\n        var s13 = s12.replaceAll(\"\\\\%\",\"\")\n        var s14 = s13.replaceAll(\"\\\\^\",\"\")\n        var s15 = s14.replaceAll(\"\\\\&\",\"\")\n        var s16 = s15.replaceAll(\"\\\\*\",\"\")\n        var s17 = s16.replaceAll(\"\\\\(\",\"\")\n        var s18 = s17.replaceAll(\"\\\\)\",\"\")\n        var s19 = s18.replaceAll(\"\\\\+\",\"\")\n        var s20 = s19.replaceAll(\"\\\\-\",\"\")\n        var s21 = s20.replaceAll(\"\\\\=\",\"\")\n        var s22 = s21.replaceAll(\"\\\\<\",\"\")\n        var s23 = s22.replaceAll(\"\\\\>\",\"\")\n        var s24 = s23.replaceAll(\"\\\\;\",\"\")\n        var s25 = s24.replaceAll(\"\\\\'\",\"\")\n        var s26 = s25.replaceAll(\"\\\\\\\"\",\"\")\n        var s27 = s26.replaceAll(\"\\\\,\",\"\")\n        var s28 = s27.replaceAll(\"\\\\.\",\"\")\n        var s29 = s28.replaceAll(\"\\\\?\",\"\")\n        var s30 = s29.replaceAll(\"\\\\!\",\"\")\n        var s31 = s30.replaceAll(\"\\\\$\",\"\")\n        var s32 = s31.replaceAll(\"\\\\%\",\"\")\n        var s33 = s32.replaceAll(\"\\\\^\",\"\")\n        var s34 = s33.replace\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293065,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E051] Reference Error: /tmp/tmp71zvxu3b.scala:50:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms34\u001b[0m = s33.replace\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mAmbiguous overload. The overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mreplace\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: CharSequence, x$1: CharSequence): String\n\u001b[31m   |\u001b[0m (x$0: Char, x$1: Char): String\n\u001b[31m   |\u001b[0mboth match expected type <?>\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp71zvxu3b.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase()\n        var s2 = \"\"\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < s1.length) {\n            var c = s1.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n                s2 += s1.charAt(j)\n                j += 2\n            } else {\n                s2 += s1.charAt(k)\n                k += 2\n            }\n            i += 1\n        }\n        return s2\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293067,
      "stdout": "",
      "stderr": "java.lang.StringIndexOutOfBoundsException: String index out of range: 2\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem$.encrypt(tmprfl503va.scala:26)\n\tat Problem$.main(tmprfl503va.scala:37)\n\tat Problem.main(tmprfl503va.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        var s4 = \"\"\n        var s5 = \"\"\n        var s6 = \"\"\n        var s7 = \"\"\n        var s8 = \"\"\n        var s9 = \"\"\n        var s10 = \"\"\n        var s11 = \"\"\n        var s12 = \"\"\n        var s13 = \"\"\n        var s14 = \"\"\n        var s15 = \"\"\n        var s16 = \"\"\n        var s17 = \"\"\n        var s18 = \"\"\n        var s19 = \"\"\n        var s20 = \"\"\n        var s21 = \"\"\n        var s22 = \"\"\n        var s23 = \"\"\n        var s24 = \"\"\n        var s25 = \"\"\n        var s26 = \"\"\n        var s27 = \"\"\n        var s28 = \"\"\n        var s29 = \"\"\n        var s30 = \"\"\n        var s31 = \"\"\n        var s32 = \"\"\n        var s33 = \"\"\n        var s34 = \"\"\n        var s35 = \"\"\n        var s36 = \"\"\n        var s37 = \"\"\n        var s38 = \"\"\n        var s39 = \"\"\n        var s40 = \"\"\n        var s41 = \"\"\n        var s42 = \"\"\n        var s43 = \"\"\n        var s44 = \"\"\n        var s45 = \"\"\n        var s46 = \"\"\n        var s47 = \"\"\n        var s48 = \"\"\n        var s49 = \"\"\n        var s50 = \"\"\n        var s51 = \"\"\n        var s52 = \"\"\n        var s53 = \"\"\n        var s54 = \"\"\n        var s55 = \"\"\n        var s56 = \"\"\n        var s57 = \"\"\n        var s58 = \"\"\n        var s59 = \"\"\n        var s60 = \"\"\n        var s61 = \"\"\n        var s62 = \"\"\n        var s63 = \"\"\n        var s64 = \"\"\n        var s65 = \"\"\n        var s66 = \"\"\n        var s67 = \"\"\n        var s68 = \"\"\n        var s69 = \"\"\n        var s70 = \"\"\n        var s71 = \"\"\n        var s72 = \"\"\n        var s73 = \"\"\n        var s\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9mne5sgs.scala:91:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9mne5sgs.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms2\u001b[0m = s.toLowerCase()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value toLowerCase is not a member of Null\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9mne5sgs.scala:91:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"_\",\"\")\n        var s6 = s5.replaceAll(\"/\",\"\")\n        var s7 = s6.replaceAll(\"\\\\.\",\"\")\n        var s8 = s7.replaceAll(\"\\\\?\",\"\")\n        var s9 = s8.replaceAll(\"\\\\*\",\"\")\n        var s10 = s9.replaceAll(\"\\\\(\",\"\")\n        var s11 = s10.replaceAll(\"\\\\)\",\"\")\n        var s12 = s11.replaceAll(\"\\\\+\",\"\")\n        var s13 = s12.replaceAll(\"\\\\-\",\"\")\n        var s14 = s13.replaceAll(\"\\\\=\",\"\")\n        var s15 = s14.replaceAll(\"\\\\:\",\"\")\n        var s16 = s15.replaceAll(\"\\\\;\",\"\")\n        var s17 = s16.replaceAll(\"\\\\'\",\"\")\n        var s18 = s17.replaceAll(\"\\\\\\\"\",\"\")\n        var s19 = s18.replaceAll(\"\\\\,\",\"\")\n        var s20 = s19.replaceAll(\"\\\\!\",\"\")\n        var s21 = s20.replaceAll(\"\\\\@\",\"\")\n        var s22 = s21.replaceAll(\"\\\\#\",\"\")\n        var s23 = s22.replaceAll(\"\\\\$\",\"\")\n        var s24 = s23.replaceAll(\"\\\\%\",\"\")\n        var s25 = s24.replaceAll(\"\\\\^\",\"\")\n        var s26 = s25.replaceAll(\"\\\\&\",\"\")\n        var s27 = s26.replaceAll(\"\\\\%\",\"\")\n        var s28 = s27.replaceAll(\"\\\\/\",\"\")\n        var s29 = s28.replaceAll(\"\\\\<\",\"\")\n        var s30 = s29.replaceAll(\"\\\\>\",\"\")\n        var s31 = s30.replaceAll(\"\\\\;\",\"\")\n        var s32 = s31.replaceAll(\"\\\\?\",\"\")\n        var s33 = s32.replaceAll(\"\\\\+\",\"\")\n        var s34 = s33.replace\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E051] Reference Error: /tmp/tmpri8xxz4l.scala:50:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms34\u001b[0m = s33.replace\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mAmbiguous overload. The overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mreplace\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: CharSequence, x$1: CharSequence): String\n\u001b[31m   |\u001b[0m (x$0: Char, x$1: Char): String\n\u001b[31m   |\u001b[0mboth match expected type <?>\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpri8xxz4l.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        s.map(c => c.toLowerCase()).toIterator().map(c => {\n            var i = c.indexOf(\" \")\n            if (i != -1) {\n                var c1 = c.substring(0, i)\n                var c2 = c.substring(i + 1)\n                return c1 + c2.charAt(0) + c2.charAt(1) + c2.charAt(2) + c2.charAt(3)\n            } else {\n                return c\n            }\n        }).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp904jakkg.scala:18:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        s.map(\u001b[36mc\u001b[0m => c.toLowerCase()).toIterator().map(\u001b[36mc\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value toLowerCase is not a member of Char\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase\n        var s2 = s1.replaceAll(\" \",\"\")\n        var s3 = s2.replaceAll(\"-\",\"\")\n        var s4 = s3.replaceAll(\"_\",\"\")\n        var s5 = s4.replaceAll(\"/\",\"\")\n        var s6 = s5.replaceAll(\"\\\\.\",\"\")\n        var s7 = s6.replaceAll(\"\\\\,\",\"\")\n        var s8 = s7.replaceAll(\"\\\\:\",\"\")\n        var s9 = s8.replaceAll(\"\\\\;\",\"\")\n        var s10 = s9.replaceAll(\"\\\\?\",\"\")\n        var s11 = s10.replaceAll(\"\\\\!\",\"\")\n        var s12 = s11.replaceAll(\"\\\\@\",\"\")\n        var s13 = s12.replaceAll(\"\\\\#\",\"\")\n        var s14 = s13.replaceAll(\"\\\\$\",\"\")\n        var s15 = s14.replaceAll(\"\\\\%\",\"\")\n        var s16 = s15.replaceAll(\"\\\\^\",\"\")\n        var s17 = s16.replaceAll(\"\\\\&\",\"\")\n        var s18 = s17.replaceAll(\"\\\\*\",\"\")\n        var s19 = s18.replaceAll(\"\\\\(\",\"\")\n        var s20 = s19.replaceAll(\"\\\\)\",\"\")\n        var s21 = s20.replaceAll(\"\\\\+\",\"\")\n        var s22 = s21.replaceAll(\"\\\\-\",\"\")\n        var s23 = s22.replaceAll(\"\\\\=\",\"\")\n        var s24 = s23.replaceAll(\"\\\\<\",\"\")\n        var s25 = s24.replaceAll(\"\\\\>\",\"\")\n        var s26 = s25.replaceAll(\"\\\\\\\"\",\"\")\n        var s27 = s26.replaceAll(\"\\\\'\",\"\")\n        var s28 = s27.replaceAll(\"\\\\[\",\"\")\n        var s29 = s28.replaceAll(\"\\\\]\",\"\")\n        var s30 = s29.replaceAll(\"\\\\{\",\"\")\n        var s31 = s30.replaceAll(\"\\\\}\",\"\")\n        var s32 = s31.replaceAll(\"\\\\|\",\"\")\n        var s33 = s32.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwglnbz5m.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            result += s.charAt(i)\n            if (i % 2 == 0) {\n                result += s.charAt(i + 1)\n            } else {\n                result += s.charAt(i - 1)\n            }\n        }\n        return result\n    }\n\n    // Create a function decrypt that takes a string as an argument and\n    // returns a string decrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift up by two multiplied to two places.\n    // For example:\n    // >>> decrypt((\"lm\"))\n    // (\"hi\")\n    // >>> decrypt((\"ewhjklnop\"))\n    // (\"asdfghjkl\")\n    // >>> decrypt((\"kj\"))\n    // (\"gf\")\n    // >>> decrypt((\"ix\"))\n    // (\"et\")\n    def decrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            result += s.charAt(i)\n            if (i % 2 == 0) {\n                result += s.charAt(i - 1)\n            } else {\n                result += s.charAt(i + 1)\n            }\n        }\n        return result\n    }\n\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being shifted. \n    // The alphabet should be shifted in a manner such that the letters \n    // shift right by one.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"hg\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"dfghjkl\")\n    // >>> encrypt((\"gf\"))\n    // (\"fg\")\n    // >>> encrypt((\"et\"))\n    // (\"et\")\n    def encrypt2(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            result += s.charAt(i)\n            result += s.charAt(i + 1)\n        }\n        return result\n    }\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwlyfq4u4.scala:89:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwlyfq4u4.scala:79:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m79 |\u001b[0m    assert(encrypt((\u001b[31m\"hi\"\u001b[0m)).equals((\u001b[31m\"lm\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: encrypt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwlyfq4u4.scala:80:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m    assert(encrypt((\u001b[31m\"asdfghjkl\"\u001b[0m)).equals((\u001b[31m\"ewhjklnop\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: encrypt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwlyfq4u4.scala:81:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m    assert(encrypt((\u001b[31m\"gf\"\u001b[0m)).equals((\u001b[31m\"kj\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: encrypt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwlyfq4u4.scala:82:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m82 |\u001b[0m    assert(encrypt((\u001b[31m\"et\"\u001b[0m)).equals((\u001b[31m\"ix\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: encrypt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwlyfq4u4.scala:83:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m    assert(encrypt((\u001b[31m\"faewfawefaewg\"\u001b[0m)).equals((\u001b[31m\"jeiajeaijeiak\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: encrypt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwlyfq4u4.scala:84:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[a-z]\",\"\")\n        var s6 = s5.replaceAll(\"[0-9]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-z0-9]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-z0-9]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-z0-9]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-z0-9]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-z0-9]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-z0-9]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-z0-9]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-z0-9]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-z0-9]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-z0-9]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-z0-9]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-z0-9]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-z0-9]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-z0-9]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-z0-9]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-z0-9]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-z0-9]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-z0-9]\",\"\")\n        var s25 = s24.replaceAll(\"[^a-z0-\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293067,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpz2oqehy9.scala:41:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms25\u001b[0m = s24.replaceAll(\"[^a-z0-\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpz2oqehy9.scala:43:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz2oqehy9.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz2oqehy9.scala:43:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: [^a-z0-def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[0-9]\", \"\")\n        var s5 = s4.replaceAll(\"[^a-z0-9]\", \"\")\n        var s6 = s5.replaceAll(\"[^a-z0-9]\", \"\")\n        var s7 = s6.replaceAll(\"[^a-z0-9]\", \"\")\n        var s8 = s7.replaceAll(\"[^a-z0-9]\", \"\")\n        var s9 = s8.replaceAll(\"[^a-z0-9]\", \"\")\n        var s10 = s9.replaceAll(\"[^a-z0-9]\", \"\")\n        var s11 = s10.replaceAll(\"[^a-z0-9]\", \"\")\n        var s12 = s11.replaceAll(\"[^a-z0-9]\", \"\")\n        var s13 = s12.replaceAll(\"[^a-z0-9]\", \"\")\n        var s14 = s13.replaceAll(\"[^a-z0-9]\", \"\")\n        var s15 = s14.replaceAll(\"[^a-z0-9]\", \"\")\n        var s16 = s15.replaceAll(\"[^a-z0-9]\", \"\")\n        var s17 = s16.replaceAll(\"[^a-z0-9]\", \"\")\n        var s18 = s17.replaceAll(\"[^a-z0-9]\", \"\")\n        var s19 = s18.replaceAll(\"[^a-z0-9]\", \"\")\n        var s20 = s19.replaceAll(\"[^a-z0-9]\", \"\")\n        var s21 = s20.replaceAll(\"[^a-z0-9]\", \"\")\n        var s22 = s21.replaceAll(\"[^a-z0-9]\", \"\")\n        var s23 = s22.replaceAll(\"[^a-z0-9]\", \"\")\n        var s24\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpikvt6wan.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpikvt6wan.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            result = result + s[i]\n            if (i % 2 == 0) {\n                result = result + s[i]\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293042,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpezvgo2f6.scala:20:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            result = result + s[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpezvgo2f6.scala:22:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                result = result + s[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"/\",\"\")\n        var s6 = s5.replaceAll(\"\\\\.\",\"\")\n        var s7 = s6.replaceAll(\"\\\\,\",\"\")\n        var s8 = s7.replaceAll(\"\\\\:\",\"\")\n        var s9 = s8.replaceAll(\"\\\\;\",\"\")\n        var s10 = s9.replaceAll(\"\\\\?\",\"\")\n        var s11 = s10.replaceAll(\"\\\\!\",\"\")\n        var s12 = s11.replaceAll(\"\\\\(\",\"\")\n        var s13 = s12.replaceAll(\"\\\\)\",\"\")\n        var s14 = s13.replaceAll(\"\\\\-\",\"\")\n        var s15 = s14.replaceAll(\"\\\\_\",\"\")\n        var s16 = s15.replaceAll(\"\\\\+\",\"\")\n        var s17 = s16.replaceAll(\"\\\\=\",\"\")\n        var s18 = s17.replaceAll(\"\\\\%\",\"\")\n        var s19 = s18.replaceAll(\"\\\\$\",\"\")\n        var s20 = s19.replaceAll(\"\\\\&\",\"\")\n        var s21 = s20.replaceAll(\"\\\\#\",\"\")\n        var s22 = s21.replaceAll(\"\\\\@\",\"\")\n        var s23 = s22.replaceAll(\"\\\\[\",\"\")\n        var s24 = s23.replaceAll(\"\\\\]\",\"\")\n        var s25 = s24.replaceAll(\"\\\\{\",\"\")\n        var s26 = s25.replaceAll(\"\\\\}\",\"\")\n        var s27 = s26.replaceAll(\"\\\\}\",\"\")\n        var s28 = s27.replaceAll(\"\\\\,\",\"\")\n        var s29 = s28.replaceAll(\"\\\\.\",\"\")\n        var s30 = s29.replaceAll(\"\\\\;\",\"\")\n        var s31 = s30.replaceAll(\"\\\\?\",\"\")\n        var s32 = s31.replaceAll(\"\\\\!\",\"\")\n        var s33 = s32.replaceAll(\"\\\\(\",\"\")\n        var s34 = s33.replace\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293067,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E051] Reference Error: /tmp/tmpqgru8ucd.scala:50:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms34\u001b[0m = s33.replace\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mAmbiguous overload. The overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mreplace\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: CharSequence, x$1: CharSequence): String\n\u001b[31m   |\u001b[0m (x$0: Char, x$1: Char): String\n\u001b[31m   |\u001b[0mboth match expected type <?>\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqgru8ucd.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase()\n        var s2 = \"\"\n        var s3 = \"\"\n        var s4 = \"\"\n        var s5 = \"\"\n        var s6 = \"\"\n        var s7 = \"\"\n        var s8 = \"\"\n        var s9 = \"\"\n        var s10 = \"\"\n        var s11 = \"\"\n        var s12 = \"\"\n        var s13 = \"\"\n        var s14 = \"\"\n        var s15 = \"\"\n        var s16 = \"\"\n        var s17 = \"\"\n        var s18 = \"\"\n        var s19 = \"\"\n        var s20 = \"\"\n        var s21 = \"\"\n        var s22 = \"\"\n        var s23 = \"\"\n        var s24 = \"\"\n        var s25 = \"\"\n        var s26 = \"\"\n        var s27 = \"\"\n        var s28 = \"\"\n        var s29 = \"\"\n        var s30 = \"\"\n        var s31 = \"\"\n        var s32 = \"\"\n        var s33 = \"\"\n        var s34 = \"\"\n        var s35 = \"\"\n        var s36 = \"\"\n        var s37 = \"\"\n        var s38 = \"\"\n        var s39 = \"\"\n        var s40 = \"\"\n        var s41 = \"\"\n        var s42 = \"\"\n        var s43 = \"\"\n        var s44 = \"\"\n        var s45 = \"\"\n        var s46 = \"\"\n        var s47 = \"\"\n        var s48 = \"\"\n        var s49 = \"\"\n        var s50 = \"\"\n        var s51 = \"\"\n        var s52 = \"\"\n        var s53 = \"\"\n        var s54 = \"\"\n        var s55 = \"\"\n        var s56 = \"\"\n        var s57 = \"\"\n        var s58 = \"\"\n        var s59 = \"\"\n        var s60 = \"\"\n        var s61 = \"\"\n        var s62 = \"\"\n        var s63 = \"\"\n        var s64 = \"\"\n        var s65 = \"\"\n        var s66 = \"\"\n        var s67 = \"\"\n        var s68 = \"\"\n        var s69 = \"\"\n        var s70 = \"\"\n        var s71 = \"\"\n        var s72 = \"\"\n        var s\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6h3jjhij.scala:91:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6h3jjhij.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms1\u001b[0m = s.toLowerCase()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value toLowerCase is not a member of Null\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6h3jjhij.scala:91:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase\n        var s2 = s1.replaceAll(\" \",\"\")\n        var s3 = s2.replaceAll(\"-\",\"\")\n        var s4 = s3.replaceAll(\"[^a-z]\",\"\")\n        var s5 = s4.replaceAll(\"[^a-z]\",\"\")\n        var s6 = s5.replaceAll(\"[^a-z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-z]\",\"\")\n        var s25 = s24.replaceAll(\"[^a-z]\",\"\")\n        var s26 = s25.replaceAll(\"[^a-z]\",\"\")\n        var s27 = s26.replaceAll(\"\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293076,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmphrh7jd7y.scala:44:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms27\u001b[0m = s26.replaceAll(\"\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphrh7jd7y.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var sb = new StringBuilder()\n        for (i <- 0 until s.length) {\n            var c = s.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n                sb.append(c - 2 * (c - 'a'))\n            } else {\n                sb.append(c)\n            }\n        }\n        return sb.toString()\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293081,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf2m0w51m.scala:30)\n\tat Problem.main(tmpf2m0w51m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase()\n        var s2 = \"\"\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s3 = \"\"\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1xpzqq9v.scala:46:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mi\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mi is already defined as \u001b[33mvariable\u001b[0m \u001b[35mi\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1xpzqq9v.scala:47:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mj\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mj is already defined as \u001b[33mvariable\u001b[0m \u001b[35mj\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1xpzqq9v.scala:48:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mk\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mk is already defined as \u001b[33mvariable\u001b[0m \u001b[35mk\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1xpzqq9v.scala:49:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ml is already defined as \u001b[33mvariable\u001b[0m \u001b[35ml\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1xpzqq9v.scala:50:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mm\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mm is already defined as \u001b[33mvariable\u001b[0m \u001b[35mm\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1xpzqq9v.scala:51:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mn\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase()\n        var s2 = s1.replaceAll(\" \",\"\")\n        var s3 = s2.replaceAll(\"-\",\"\")\n        var s4 = s3.replaceAll(\"/\",\"\")\n        var s5 = s4.replaceAll(\"\\\\.\",\"\")\n        var s6 = s5.replaceAll(\"\\\\,\",\"\")\n        var s7 = s6.replaceAll(\"\\\\:\",\"\")\n        var s8 = s7.replaceAll(\"\\\\;\",\"\")\n        var s9 = s8.replaceAll(\"\\\\?\",\"\")\n        var s10 = s9.replaceAll(\"\\\\!\",\"\")\n        var s11 = s10.replaceAll(\"\\\\-\",\"\")\n        var s12 = s11.replaceAll(\"\\\\+\",\"\")\n        var s13 = s12.replaceAll(\"\\\\*\",\"\")\n        var s14 = s13.replaceAll(\"\\\\(\",\"\")\n        var s15 = s14.replaceAll(\"\\\\)\",\"\")\n        var s16 = s15.replaceAll(\"\\\\[\",\"\")\n        var s17 = s16.replaceAll(\"\\\\]\",\"\")\n        var s18 = s17.replaceAll(\"\\\\{\",\"\")\n        var s19 = s18.replaceAll(\"\\\\}\",\"\")\n        var s20 = s19.replaceAll(\"\\\\|\",\"\")\n        var s21 = s20.replaceAll(\"\\\\^\",\"\")\n        var s22 = s21.replaceAll(\"\\\\&\",\"\")\n        var s23 = s22.replaceAll(\"\\\\%\",\"\")\n        var s24 = s23.replaceAll(\"\\\\$\",\"\")\n        var s25 = s24.replaceAll(\"\\\\#\",\"\")\n        var s26 = s25.replaceAll(\"\\\\@\",\"\")\n        var s27 = s26.replaceAll(\"\\\\#\",\"\")\n        var s28 = s27.replaceAll(\"\\\\$\",\"\")\n        var s29 = s28.replaceAll(\"\\\\#\",\"\")\n        var s30 = s29.replaceAll(\"\\\\@\",\"\")\n        var s31 = s30.replaceAll(\"\\\\#\",\"\")\n        var s32 = s31.replaceAll(\"\\\\$\",\"\")\n        var s33 = s32.\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293080,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_hleqmtw.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_hleqmtw.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[^a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[a-z]\", \"\")\n        var s5 = s4.replaceAll(\"[a-z]\", \"\")\n        var s6 = s5.replaceAll(\"[a-z]\", \"\")\n        var s7 = s6.replaceAll(\"[a-z]\", \"\")\n        var s8 = s7.replaceAll(\"[a-z]\", \"\")\n        var s9 = s8.replaceAll(\"[a-z]\", \"\")\n        var s10 = s9.replaceAll(\"[a-z]\", \"\")\n        var s11 = s10.replaceAll(\"[a-z]\", \"\")\n        var s12 = s11.replaceAll(\"[a-z]\", \"\")\n        var s13 = s12.replaceAll(\"[a-z]\", \"\")\n        var s14 = s13.replaceAll(\"[a-z]\", \"\")\n        var s15 = s14.replaceAll(\"[a-z]\", \"\")\n        var s16 = s15.replaceAll(\"[a-z]\", \"\")\n        var s17 = s16.replaceAll(\"[a-z]\", \"\")\n        var s18 = s17.replaceAll(\"[a-z]\", \"\")\n        var s19 = s18.replaceAll(\"[a-z]\", \"\")\n        var s20 = s19.replaceAll(\"[a-z]\", \"\")\n        var s21 = s20.replaceAll(\"[a-z]\", \"\")\n        var s22 = s21.replaceAll(\"[a-z]\", \"\")\n        var s23 = s22.replaceAll(\"[a-z]\", \"\")\n        var s24 = s23.replaceAll(\"[a-z]\", \"\")\n        var s25 = s24.replaceAll(\"[a-z]\", \"\")\n        var s26 = s25.replaceAll(\"[a-z]\", \"\")\n        var s27 = s26.replaceAll(\"[a-z]\", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293042,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsztz_uos.scala:44:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[0-9]\", \"\")\n        var s5 = s4.replaceAll(\"[^a-z0-9]\", \"\")\n        var s6 = s5.replaceAll(\"[^a-z0-9]\", \"\")\n        var s7 = s6.replaceAll(\"[^a-z0-9]\", \"\")\n        var s8 = s7.replaceAll(\"[^a-z0-9]\", \"\")\n        var s9 = s8.replaceAll(\"[^a-z0-9]\", \"\")\n        var s10 = s9.replaceAll(\"[^a-z0-9]\", \"\")\n        var s11 = s10.replaceAll(\"[^a-z0-9]\", \"\")\n        var s12 = s11.replaceAll(\"[^a-z0-9]\", \"\")\n        var s13 = s12.replaceAll(\"[^a-z0-9]\", \"\")\n        var s14 = s13.replaceAll(\"[^a-z0-9]\", \"\")\n        var s15 = s14.replaceAll(\"[^a-z0-9]\", \"\")\n        var s16 = s15.replaceAll(\"[^a-z0-9]\", \"\")\n        var s17 = s16.replaceAll(\"[^a-z0-9]\", \"\")\n        var s18 = s17.replaceAll(\"[^a-z0-9]\", \"\")\n        var s19 = s18.replaceAll(\"[^a-z0-9]\", \"\")\n        var s20 = s19.replaceAll(\"[^a-z0-9]\", \"\")\n        var s21 = s20.replaceAll(\"[^a-z0-9]\", \"\")\n        var s22 = s21.replaceAll(\"[^a-z0-9]\", \"\")\n        var s23 = s22.replaceAll(\"[^a-z0-9]\", \"\")\n        var s24\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpikvt6wan.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpikvt6wan.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"_\",\"\")\n        var s6 = s5.replaceAll(\"/\",\"\")\n        var s7 = s6.replaceAll(\"\\\\.\",\"\")\n        var s8 = s7.replaceAll(\"\\\\+\",\"\")\n        var s9 = s8.replaceAll(\"\\\\*\",\"\")\n        var s10 = s9.replaceAll(\"\\\\(\",\"\")\n        var s11 = s10.replaceAll(\"\\\\)\",\"\")\n        var s12 = s11.replaceAll(\"\\\\[\",\"\")\n        var s13 = s12.replaceAll(\"\\\\]\",\"\")\n        var s14 = s13.replaceAll(\"\\\\{\",\"\")\n        var s15 = s14.replaceAll(\"\\\\}\",\"\")\n        var s16 = s15.replaceAll(\"\\\\|\",\"\")\n        var s17 = s16.replaceAll(\"\\\\^\",\"\")\n        var s18 = s17.replaceAll(\"\\\\&\",\"\")\n        var s19 = s18.replaceAll(\"\\\\%\",\"\")\n        var s20 = s19.replaceAll(\"\\\\$\",\"\")\n        var s21 = s20.replaceAll(\"\\\\#\",\"\")\n        var s22 = s21.replaceAll(\"\\\\@\",\"\")\n        var s23 = s22.replaceAll(\"\\\\!\",\"\")\n        var s24 = s23.replaceAll(\"\\\\?\",\"\")\n        var s25 = s24.replaceAll(\"\\\\:\",\"\")\n        var s26 = s25.replaceAll(\"\\\\;\",\"\")\n        var s27 = s26.replaceAll(\"\\\\,\",\"\")\n        var s28 = s27.replaceAll(\"\\\\.\",\"\")\n        var s29 = s28.replaceAll(\"\\\\<\",\"\")\n        var s30 = s29.replaceAll(\"\\\\>\",\"\")\n        var s31 = s30.replaceAll(\"\\\\=\",\"\")\n        var s32 = s31.replaceAll(\"\\\\+\",\"\")\n        var s33 = s32.replaceAll(\"\\\\-\",\"\")\n        var s34 = s33.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293081,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpozyoimxm.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase\n        var s3 = s2.replaceAll(\"[a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[0-9]\", \"\")\n        var s5 = s4.replaceAll(\"[^a-z0-9]\", \"\")\n        var s6 = s5.replaceAll(\"[^a-z]\", \"\")\n        var s7 = s6.replaceAll(\"[^0-9]\", \"\")\n        var s8 = s7.replaceAll(\"[^a-z0-9]\", \"\")\n        var s9 = s8.replaceAll(\"[^a-z]\", \"\")\n        var s10 = s9.replaceAll(\"[^0-9]\", \"\")\n        var s11 = s10.replaceAll(\"[^a-z0-9]\", \"\")\n        var s12 = s11.replaceAll(\"[^a-z]\", \"\")\n        var s13 = s12.replaceAll(\"[^0-9]\", \"\")\n        var s14 = s13.replaceAll(\"[^a-z0-9]\", \"\")\n        var s15 = s14.replaceAll(\"[^a-z]\", \"\")\n        var s16 = s15.replaceAll(\"[^0-9]\", \"\")\n        var s17 = s16.replaceAll(\"[^a-z0-9]\", \"\")\n        var s18 = s17.replaceAll(\"[^a-z]\", \"\")\n        var s19 = s18.replaceAll(\"[^0-9]\", \"\")\n        var s20 = s19.replaceAll(\"[^a-z0-9]\", \"\")\n        var s21 = s20.replaceAll(\"[^a-z]\", \"\")\n        var s22 = s21.replaceAll(\"[^0-9]\", \"\")\n        var s23 = s22.replaceAll(\"[^a-z0-9]\", \"\")\n        var s24 = s23.replaceAll(\"[^a-z]\", \"\")\n        var s25 = s24.replaceAll(\"[^0-9]\", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293081,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbtp69l2x.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase()\n        var s2 = \"\"\n        var s3 = \"\"\n        var s4 = \"\"\n        var s5 = \"\"\n        var s6 = \"\"\n        var s7 = \"\"\n        var s8 = \"\"\n        var s9 = \"\"\n        var s10 = \"\"\n        var s11 = \"\"\n        var s12 = \"\"\n        var s13 = \"\"\n        var s14 = \"\"\n        var s15 = \"\"\n        var s16 = \"\"\n        var s17 = \"\"\n        var s18 = \"\"\n        var s19 = \"\"\n        var s20 = \"\"\n        var s21 = \"\"\n        var s22 = \"\"\n        var s23 = \"\"\n        var s24 = \"\"\n        var s25 = \"\"\n        var s26 = \"\"\n        var s27 = \"\"\n        var s28 = \"\"\n        var s29 = \"\"\n        var s30 = \"\"\n        var s31 = \"\"\n        var s32 = \"\"\n        var s33 = \"\"\n        var s34 = \"\"\n        var s35 = \"\"\n        var s36 = \"\"\n        var s37 = \"\"\n        var s38 = \"\"\n        var s39 = \"\"\n        var s40 = \"\"\n        var s41 = \"\"\n        var s42 = \"\"\n        var s43 = \"\"\n        var s44 = \"\"\n        var s45 = \"\"\n        var s46 = \"\"\n        var s47 = \"\"\n        var s48 = \"\"\n        var s49 = \"\"\n        var s50 = \"\"\n        var s51 = \"\"\n        var s52 = \"\"\n        var s53 = \"\"\n        var s54 = \"\"\n        var s55 = \"\"\n        var s56 = \"\"\n        var s57 = \"\"\n        var s58 = \"\"\n        var s59 = \"\"\n        var s60 = \"\"\n        var s61 = \"\"\n        var s62 = \"\"\n        var s63 = \"\"\n        var s64 = \"\"\n        var s65 = \"\"\n        var s66 = \"\"\n        var s67 = \"\"\n        var s68 = \"\"\n        var s69 = \"\"\n        var s70 = \"\"\n        var s71 = \"\"\n        var s72 = \"\"\n        var s\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6h3jjhij.scala:91:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6h3jjhij.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms1\u001b[0m = s.toLowerCase()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value toLowerCase is not a member of Null\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6h3jjhij.scala:91:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        var s4 = \"\"\n        var s5 = \"\"\n        var s6 = \"\"\n        var s7 = \"\"\n        var s8 = \"\"\n        var s9 = \"\"\n        var s10 = \"\"\n        var s11 = \"\"\n        var s12 = \"\"\n        var s13 = \"\"\n        var s14 = \"\"\n        var s15 = \"\"\n        var s16 = \"\"\n        var s17 = \"\"\n        var s18 = \"\"\n        var s19 = \"\"\n        var s20 = \"\"\n        var s21 = \"\"\n        var s22 = \"\"\n        var s23 = \"\"\n        var s24 = \"\"\n        var s25 = \"\"\n        var s26 = \"\"\n        var s27 = \"\"\n        var s28 = \"\"\n        var s29 = \"\"\n        var s30 = \"\"\n        var s31 = \"\"\n        var s32 = \"\"\n        var s33 = \"\"\n        var s34 = \"\"\n        var s35 = \"\"\n        var s36 = \"\"\n        var s37 = \"\"\n        var s38 = \"\"\n        var s39 = \"\"\n        var s40 = \"\"\n        var s41 = \"\"\n        var s42 = \"\"\n        var s43 = \"\"\n        var s44 = \"\"\n        var s45 = \"\"\n        var s46 = \"\"\n        var s47 = \"\"\n        var s48 = \"\"\n        var s49 = \"\"\n        var s50 = \"\"\n        var s51 = \"\"\n        var s52 = \"\"\n        var s53 = \"\"\n        var s54 = \"\"\n        var s55 = \"\"\n        var s56 = \"\"\n        var s57 = \"\"\n        var s58 = \"\"\n        var s59 = \"\"\n        var s60 = \"\"\n        var s61 = \"\"\n        var s62 = \"\"\n        var s63 = \"\"\n        var s64 = \"\"\n        var s65 = \"\"\n        var s66 = \"\"\n        var s67 = \"\"\n        var s68 = \"\"\n        var s69 = \"\"\n        var s70 = \"\"\n        var s71 = \"\"\n        var s72 = \"\"\n        var s73 = \"\"\n        var s\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9mne5sgs.scala:91:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9mne5sgs.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms2\u001b[0m = s.toLowerCase()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value toLowerCase is not a member of Null\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9mne5sgs.scala:91:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        s.map(c => c.toUpperCase()).map(c => (c.charCodeAt(0) + 2) % 26).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293082,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr4vfgttf.scala:18:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        s.map(\u001b[36mc\u001b[0m => c.toUpperCase()).map(\u001b[36mc\u001b[0m => (c.charCodeAt(\u001b[31m0\u001b[0m) + \u001b[31m2\u001b[0m) % \u001b[31m26\u001b[0m).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value toUpperCase is not a member of Char\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        var s4 = \"\"\n        var s5 = \"\"\n        var s6 = \"\"\n        var s7 = \"\"\n        var s8 = \"\"\n        var s9 = \"\"\n        var s10 = \"\"\n        var s11 = \"\"\n        var s12 = \"\"\n        var s13 = \"\"\n        var s14 = \"\"\n        var s15 = \"\"\n        var s16 = \"\"\n        var s17 = \"\"\n        var s18 = \"\"\n        var s19 = \"\"\n        var s20 = \"\"\n        var s21 = \"\"\n        var s22 = \"\"\n        var s23 = \"\"\n        var s24 = \"\"\n        var s25 = \"\"\n        var s26 = \"\"\n        var s27 = \"\"\n        var s28 = \"\"\n        var s29 = \"\"\n        var s30 = \"\"\n        var s31 = \"\"\n        var s32 = \"\"\n        var s33 = \"\"\n        var s34 = \"\"\n        var s35 = \"\"\n        var s36 = \"\"\n        var s37 = \"\"\n        var s38 = \"\"\n        var s39 = \"\"\n        var s40 = \"\"\n        var s41 = \"\"\n        var s42 = \"\"\n        var s43 = \"\"\n        var s44 = \"\"\n        var s45 = \"\"\n        var s46 = \"\"\n        var s47 = \"\"\n        var s48 = \"\"\n        var s49 = \"\"\n        var s50 = \"\"\n        var s51 = \"\"\n        var s52 = \"\"\n        var s53 = \"\"\n        var s54 = \"\"\n        var s55 = \"\"\n        var s56 = \"\"\n        var s57 = \"\"\n        var s58 = \"\"\n        var s59 = \"\"\n        var s60 = \"\"\n        var s61 = \"\"\n        var s62 = \"\"\n        var s63 = \"\"\n        var s64 = \"\"\n        var s65 = \"\"\n        var s66 = \"\"\n        var s67 = \"\"\n        var s68 = \"\"\n        var s69 = \"\"\n        var s70 = \"\"\n        var s71 = \"\"\n        var s72 = \"\"\n        var s73 = \"\"\n        var s\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9mne5sgs.scala:91:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9mne5sgs.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms2\u001b[0m = s.toLowerCase()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value toLowerCase is not a member of Null\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9mne5sgs.scala:91:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        \n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293085,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp93l6ik7v.scala:46:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mi\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mi is already defined as \u001b[33mvariable\u001b[0m \u001b[35mi\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp93l6ik7v.scala:47:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mj\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mj is already defined as \u001b[33mvariable\u001b[0m \u001b[35mj\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp93l6ik7v.scala:48:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mk\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mk is already defined as \u001b[33mvariable\u001b[0m \u001b[35mk\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp93l6ik7v.scala:49:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ml is already defined as \u001b[33mvariable\u001b[0m \u001b[35ml\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp93l6ik7v.scala:50:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mm\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mm is already defined as \u001b[33mvariable\u001b[0m \u001b[35mm\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp93l6ik7v.scala:51:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mn\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8qjps38h.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m              ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value toCharArray is not a member of Char\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        s.map(_.toCharArray).map(x => x.map(y => y + 2)).map(x => x.map(y => y % 26)).map(x => x.map(y => y + 1)).map(x => x.map(y => y % 26)).map(x => x.map(y => y + 1)).map(x => x.map(y => y % 26)).map(x => x.map(y => y + 1)).map(x => x.map(y => y % 26)).map(x => x.map(y => y + 1)).map(x => x.map(y => y % 26)).map(x => x.map(y => y + 1)).map(x => x.map(y => y % 26)).map(x => x.map(y => y + 1)).map(x => x.map(y => y % 26)).map(x => x.map(y => y + 1)).map(x => x.map(y => y % 26)).map(x => x.map(y => y + 1)).map(x => x.map(y => y % 26)).map(x => x.map(y => y + 1)).map(x => x.map(y => y % 26)).map(x => x.map(y => y + 1)).map(x => x.map(y => y % 26)).map(x => x.map(y => y + 1)).map(x => x.map(y => y % 26)).map(x => x.map(y => y + 1)).map(x => x.map(y => y % 26)).map(x => x.map(y => y + 1)).map(x => x.map(y => y % 26)).map(x => x.map(y => y + 1)).map(x => x.map(y => y % 26)).map(x => x.map(y => y + 1)).map(x => x.map(y => y % 26)).map(x => x.map(y => y + 1)).map(x => x.map(y => y % 26)).map(x => x.map(y => y + 1)).map(x => x.map(y => y %\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293083,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmprqvct49y.scala:18:1049 -------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        s.map(_.toCharArray).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y + \u001b[31m2\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y % \u001b[31m26\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y + \u001b[31m1\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y % \u001b[31m26\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y + \u001b[31m1\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y % \u001b[31m26\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y + \u001b[31m1\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y % \u001b[31m26\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y + \u001b[31m1\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y % \u001b[31m26\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y + \u001b[31m1\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y % \u001b[31m26\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y + \u001b[31m1\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y % \u001b[31m26\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y + \u001b[31m1\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y % \u001b[31m26\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y + \u001b[31m1\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y % \u001b[31m26\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y + \u001b[31m1\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y % \u001b[31m26\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y + \u001b[31m1\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y % \u001b[31m26\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y + \u001b[31m1\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y % \u001b[31m26\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y + \u001b[31m1\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y % \u001b[31m26\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y + \u001b[31m1\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y % \u001b[31m26\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y + \u001b[31m1\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y % \u001b[31m26\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y + \u001b[31m1\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y % \u001b[31m26\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y + \u001b[31m1\u001b[0m)).map(\u001b[36mx\u001b[0m => x.map(\u001b[36my\u001b[0m => y % \u001b[31m26\u001b[0m)).map(\u001b[36mx\u001b[0m => x.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s6 = s5.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s25 = s24.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpopg0xkp1.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[0-9]\", \"\")\n        var s5 = s4.replaceAll(\"[^a-z0-9]\", \"\")\n        var s6 = s5.replaceAll(\"[^a-z0-9]\", \"\")\n        var s7 = s6.replaceAll(\"[^a-z0-9]\", \"\")\n        var s8 = s7.replaceAll(\"[^a-z0-9]\", \"\")\n        var s9 = s8.replaceAll(\"[^a-z0-9]\", \"\")\n        var s10 = s9.replaceAll(\"[^a-z0-9]\", \"\")\n        var s11 = s10.replaceAll(\"[^a-z0-9]\", \"\")\n        var s12 = s11.replaceAll(\"[^a-z0-9]\", \"\")\n        var s13 = s12.replaceAll(\"[^a-z0-9]\", \"\")\n        var s14 = s13.replaceAll(\"[^a-z0-9]\", \"\")\n        var s15 = s14.replaceAll(\"[^a-z0-9]\", \"\")\n        var s16 = s15.replaceAll(\"[^a-z0-9]\", \"\")\n        var s17 = s16.replaceAll(\"[^a-z0-9]\", \"\")\n        var s18 = s17.replaceAll(\"[^a-z0-9]\", \"\")\n        var s19 = s18.replaceAll(\"[^a-z0-9]\", \"\")\n        var s20 = s19.replaceAll(\"[^a-z0-9]\", \"\")\n        var s21 = s20.replaceAll(\"[^a-z0-9]\", \"\")\n        var s22 = s21.replaceAll(\"[^a-z0-9]\", \"\")\n        var s23 = s22.replaceAll(\"[^a-z0-9]\", \"\")\n        var s24\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpikvt6wan.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpikvt6wan.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s6 = s5.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s25 = s24.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpopg0xkp1.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[^a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[^a-z]\", \"\")\n        var s5 = s4.replaceAll(\"[^a-z]\", \"\")\n        var s6 = s5.replaceAll(\"[^a-z]\", \"\")\n        var s7 = s6.replaceAll(\"[^a-z]\", \"\")\n        var s8 = s7.replaceAll(\"[^a-z]\", \"\")\n        var s9 = s8.replaceAll(\"[^a-z]\", \"\")\n        var s10 = s9.replaceAll(\"[^a-z]\", \"\")\n        var s11 = s10.replaceAll(\"[^a-z]\", \"\")\n        var s12 = s11.replaceAll(\"[^a-z]\", \"\")\n        var s13 = s12.replaceAll(\"[^a-z]\", \"\")\n        var s14 = s13.replaceAll(\"[^a-z]\", \"\")\n        var s15 = s14.replaceAll(\"[^a-z]\", \"\")\n        var s16 = s15.replaceAll(\"[^a-z]\", \"\")\n        var s17 = s16.replaceAll(\"[^a-z]\", \"\")\n        var s18 = s17.replaceAll(\"[^a-z]\", \"\")\n        var s19 = s18.replaceAll(\"[^a-z]\", \"\")\n        var s20 = s19.replaceAll(\"[^a-z]\", \"\")\n        var s21 = s20.replaceAll(\"[^a-z]\", \"\")\n        var s22 = s21.replaceAll(\"[^a-z]\", \"\")\n        var s23 = s22.replaceAll(\"[^a-z]\", \"\")\n        var s24 = s23.replaceAll(\"[^a-z]\", \"\")\n        var s25 = s24.replaceAll(\"[^a-z]\", \"\")\n        var s26 = s25.replaceAll(\"[^a-z]\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293021,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpel8foncj.scala:42:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms26\u001b[0m = s25.replaceAll(\"[^a-z]\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpel8foncj.scala:44:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpel8foncj.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpel8foncj.scala:44:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: [^a-z]def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[^a-z]\",\"\")\n        var s6 = s5.replaceAll(\"[^a-z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-z]\",\"\")\n        var s25 = s24.replaceAll(\"[^a-z]\",\"\")\n        var s26 = s25.replaceAll(\"[^a-z]\",\"\")\n        var s27 = s26.replaceAll(\"[^a-z]\",\"\")\n        var s28 = s27.replaceAll(\"\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293083,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpeg60wo_w.scala:44:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms28\u001b[0m = s27.replaceAll(\"\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeg60wo_w.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        var s4 = \"\"\n        var s5 = \"\"\n        var s6 = \"\"\n        var s7 = \"\"\n        var s8 = \"\"\n        var s9 = \"\"\n        var s10 = \"\"\n        var s11 = \"\"\n        var s12 = \"\"\n        var s13 = \"\"\n        var s14 = \"\"\n        var s15 = \"\"\n        var s16 = \"\"\n        var s17 = \"\"\n        var s18 = \"\"\n        var s19 = \"\"\n        var s20 = \"\"\n        var s21 = \"\"\n        var s22 = \"\"\n        var s23 = \"\"\n        var s24 = \"\"\n        var s25 = \"\"\n        var s26 = \"\"\n        var s27 = \"\"\n        var s28 = \"\"\n        var s29 = \"\"\n        var s30 = \"\"\n        var s31 = \"\"\n        var s32 = \"\"\n        var s33 = \"\"\n        var s34 = \"\"\n        var s35 = \"\"\n        var s36 = \"\"\n        var s37 = \"\"\n        var s38 = \"\"\n        var s39 = \"\"\n        var s40 = \"\"\n        var s41 = \"\"\n        var s42 = \"\"\n        var s43 = \"\"\n        var s44 = \"\"\n        var s45 = \"\"\n        var s46 = \"\"\n        var s47 = \"\"\n        var s48 = \"\"\n        var s49 = \"\"\n        var s50 = \"\"\n        var s51 = \"\"\n        var s52 = \"\"\n        var s53 = \"\"\n        var s54 = \"\"\n        var s55 = \"\"\n        var s56 = \"\"\n        var s57 = \"\"\n        var s58 = \"\"\n        var s59 = \"\"\n        var s60 = \"\"\n        var s61 = \"\"\n        var s62 = \"\"\n        var s63 = \"\"\n        var s64 = \"\"\n        var s65 = \"\"\n        var s66 = \"\"\n        var s67 = \"\"\n        var s68 = \"\"\n        var s69 = \"\"\n        var s70 = \"\"\n        var s71 = \"\"\n        var s72 = \"\"\n        var s73 = \"\"\n        var s\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9mne5sgs.scala:91:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9mne5sgs.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms2\u001b[0m = s.toLowerCase()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value toLowerCase is not a member of Null\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9mne5sgs.scala:91:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"/\",\"\")\n        var s6 = s5.replaceAll(\"\\\\.\",\"\")\n        var s7 = s6.replaceAll(\"\\\\?\",\"\")\n        var s8 = s7.replaceAll(\"\\\\,\",\"\")\n        var s9 = s8.replaceAll(\"\\\\:\",\"\")\n        var s10 = s9.replaceAll(\"\\\\;\",\"\")\n        var s11 = s10.replaceAll(\"\\\\.\",\"\")\n        var s12 = s11.replaceAll(\"\\\\?\",\"\")\n        var s13 = s12.replaceAll(\"\\\\,\",\"\")\n        var s14 = s13.replaceAll(\"\\\\:\",\"\")\n        var s15 = s14.replaceAll(\"\\\\;\",\"\")\n        var s16 = s15.replaceAll(\"\\\\.\",\"\")\n        var s17 = s16.replaceAll(\"\\\\?\",\"\")\n        var s18 = s17.replaceAll(\"\\\\,\",\"\")\n        var s19 = s18.replaceAll(\"\\\\:\",\"\")\n        var s20 = s19.replaceAll(\"\\\\;\",\"\")\n        var s21 = s20.replaceAll(\"\\\\.\",\"\")\n        var s22 = s21.replaceAll(\"\\\\?\",\"\")\n        var s23 = s22.replaceAll(\"\\\\,\",\"\")\n        var s24 = s23.replaceAll(\"\\\\:\",\"\")\n        var s25 = s24.replaceAll(\"\\\\;\",\"\")\n        var s26 = s25.replaceAll(\"\\\\.\",\"\")\n        var s27 = s26.replaceAll(\"\\\\?\",\"\")\n        var s28 = s27.replaceAll(\"\\\\,\",\"\")\n        var s29 = s28.replaceAll(\"\\\\:\",\"\")\n        var s30 = s29.replaceAll(\"\\\\;\",\"\")\n        var s31 = s30.replaceAll(\"\\\\.\",\"\")\n        var s32 = s31.replaceAll(\"\\\\?\",\"\")\n        var s33 = s32.replaceAll(\"\\\\,\",\"\")\n        var s34 = s33.replaceAll(\"\\\\:\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293082,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpqnb1lchm.scala:50:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms34\u001b[0m = s33.replaceAll(\"\\\\:\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpqnb1lchm.scala:52:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqnb1lchm.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqnb1lchm.scala:52:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: \\:def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        s.map(c => c.toLowerCase()).map(c => c.charAt(0)).map(c => c.charAt(0) + c.charAt(1)).map(c => c.charAt(0) + c.charAt(1)).map(c => c.charAt(0) + c.charAt(1)).map(c => c.charAt(0) + c.charAt(1)).map(c => c.charAt(0) + c.charAt(1)).map(c => c.charAt(0) + c.charAt(1)).map(c => c.charAt(0) + c.charAt(1)).map(c => c.charAt(0) + c.charAt(1)).map(c => c.charAt(0) + c.charAt(1)).map(c => c.charAt(0) + c.charAt(1)).map(c => c.charAt(0) + c.charAt(1)).map(c => c.charAt(0) + c.charAt(1)).map(c => c.charAt(0) + c.charAt(1)).map(c => c.charAt(0) + c.charAt(1)).map(c => c.charAt(0) + c.charAt(1)).map(c => c.charAt(0) + c.charAt(1)).map(c => c.charAt(0) + c.charAt(1)).map(c => c.charAt(0) + c.charAt(1)).map(c => c.charAt(0) + c.charAt(1)).map(c => c.charAt(0) + c.charAt(1)).map(c => c.charAt(0) + c.charAt(1)).map(c => c.charAt(0) + c.charAt(1)).map(c => c.charAt(0) + c.charAt(1)).map(c => c.charAt(0) + c.charAt(1)).map(c => c.charAt(0) + c.charAt(1)).map(c => c.charAt(0) +\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293084,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmphpq_383x.scala:18:980 --------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        s.map(\u001b[36mc\u001b[0m => c.toLowerCase()).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m) + c.charAt(\u001b[31m1\u001b[0m)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m) + c.charAt(\u001b[31m1\u001b[0m)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m) + c.charAt(\u001b[31m1\u001b[0m)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m) + c.charAt(\u001b[31m1\u001b[0m)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m) + c.charAt(\u001b[31m1\u001b[0m)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m) + c.charAt(\u001b[31m1\u001b[0m)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m) + c.charAt(\u001b[31m1\u001b[0m)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m) + c.charAt(\u001b[31m1\u001b[0m)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m) + c.charAt(\u001b[31m1\u001b[0m)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m) + c.charAt(\u001b[31m1\u001b[0m)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m) + c.charAt(\u001b[31m1\u001b[0m)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m) + c.charAt(\u001b[31m1\u001b[0m)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m) + c.charAt(\u001b[31m1\u001b[0m)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m) + c.charAt(\u001b[31m1\u001b[0m)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m) + c.charAt(\u001b[31m1\u001b[0m)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m) + c.charAt(\u001b[31m1\u001b[0m)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m) + c.charAt(\u001b[31m1\u001b[0m)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m) + c.charAt(\u001b[31m1\u001b[0m)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m) + c.charAt(\u001b[31m1\u001b[0m)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m) + c.charAt(\u001b[31m1\u001b[0m)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m) + c.charAt(\u001b[31m1\u001b[0m)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m) + c.charAt(\u001b[31m1\u001b[0m)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m) + c.charAt(\u001b[31m1\u001b[0m)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m) + c.charAt(\u001b[31m1\u001b[0m)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m) + c.charAt(\u001b[31m1\u001b[0m)).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m) +\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[0-9]\", \"\")\n        var s5 = s4.replaceAll(\"[^a-z0-9]\", \"\")\n        var s6 = s5.replaceAll(\"[^a-z]\", \"\")\n        var s7 = s6.replaceAll(\"[^a-z0-9]\", \"\")\n        var s8 = s7.replaceAll(\"[^a-z0-9]\", \"\")\n        var s9 = s8.replaceAll(\"[^a-z]\", \"\")\n        var s10 = s9.replaceAll(\"[^a-z0-9]\", \"\")\n        var s11 = s10.replaceAll(\"[^a-z0-9]\", \"\")\n        var s12 = s11.replaceAll(\"[^a-z]\", \"\")\n        var s13 = s12.replaceAll(\"[^a-z0-9]\", \"\")\n        var s14 = s13.replaceAll(\"[^a-z0-9]\", \"\")\n        var s15 = s14.replaceAll(\"[^a-z]\", \"\")\n        var s16 = s15.replaceAll(\"[^a-z0-9]\", \"\")\n        var s17 = s16.replaceAll(\"[^a-z0-9]\", \"\")\n        var s18 = s17.replaceAll(\"[^a-z]\", \"\")\n        var s19 = s18.replaceAll(\"[^a-z0-9]\", \"\")\n        var s20 = s19.replaceAll(\"[^a-z0-9]\", \"\")\n        var s21 = s20.replaceAll(\"[^a-z]\", \"\")\n        var s22 = s21.replaceAll(\"[^a-z0-9]\", \"\")\n        var s23 = s22.replaceAll(\"[^a-z0-9]\", \"\")\n        var s24 = s23.replaceAll(\"[^a-z]\", \"\")\n        \n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293084,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7t9nutxm.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase()\n        var s2 = \"\"\n        for (i <- 0 until s1.length) {\n            var c = s1.charAt(i)\n            var c2 = (c + 2) % 26\n            s2 = s2 + (c2 - 1)\n        }\n        return s2\n    }\n\n    // Create a function decrypt that takes a string as an argument and\n    // returns a string decrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift up by two multiplied to two places.\n    // For example:\n    // >>> decrypt((\"lm\"))\n    // (\"hi\")\n    // >>> decrypt((\"ewhjklnop\"))\n    // (\"asdfghjkl\")\n    // >>> decrypt((\"kj\"))\n    // (\"gf\")\n    // >>> decrypt((\"ix\"))\n    // (\"et\")\n    def decrypt(s : String) : String = {\n        var s1 = s.toLowerCase()\n        var s2 = \"\"\n        for (i <- 0 until s1.length) {\n            var c = s1.charAt(i)\n            var c2 = (c - 2) % 26\n            s2 = s2 + (c2 + 1)\n        }\n        return s2\n    }\n\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being shifted. \n    // The alphabet should be shifted in a manner such that the letters \n    // shift right by one.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"hg\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"asdfghjkl\")\n    // >>> encrypt((\"gf\"))\n    // (\"gf\")\n    // >>> encrypt((\"et\"))\n    // (\"et\")\n    def encrypt2(s : String) : String = {\n        var s1 = s.toLowerCase()\n        var s2 = \"\"\n        for (i <- 0 until s1.length) {\n            var c = s1.charAt(i)\n            var c2 = (\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293087,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpja3ok6b4.scala:70:22 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mc2\u001b[0m = (\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpja3ok6b4.scala:84:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m84 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpja3ok6b4.scala:83:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpja3ok6b4.scala:72:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m72 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[0-9]\", \"\")\n        var s5 = s4.replaceAll(\"[^a-z0-9]\", \"\")\n        var s6 = s5.replaceAll(\"[^a-z0-9]\", \"\")\n        var s7 = s6.replaceAll(\"[^a-z0-9]\", \"\")\n        var s8 = s7.replaceAll(\"[^a-z0-9]\", \"\")\n        var s9 = s8.replaceAll(\"[^a-z0-9]\", \"\")\n        var s10 = s9.replaceAll(\"[^a-z0-9]\", \"\")\n        var s11 = s10.replaceAll(\"[^a-z0-9]\", \"\")\n        var s12 = s11.replaceAll(\"[^a-z0-9]\", \"\")\n        var s13 = s12.replaceAll(\"[^a-z0-9]\", \"\")\n        var s14 = s13.replaceAll(\"[^a-z0-9]\", \"\")\n        var s15 = s14.replaceAll(\"[^a-z0-9]\", \"\")\n        var s16 = s15.replaceAll(\"[^a-z0-9]\", \"\")\n        var s17 = s16.replaceAll(\"[^a-z0-9]\", \"\")\n        var s18 = s17.replaceAll(\"[^a-z0-9]\", \"\")\n        var s19 = s18.replaceAll(\"[^a-z0-9]\", \"\")\n        var s20 = s19.replaceAll(\"[^a-z0-9]\", \"\")\n        var s21 = s20.replaceAll(\"[^a-z0-9]\", \"\")\n        var s22 = s21.replaceAll(\"[^a-z0-9]\", \"\")\n        var s23 = s22.replaceAll(\"[^a-z0-9]\", \"\")\n        var s24\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpikvt6wan.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpikvt6wan.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"/\",\"\")\n        var s6 = s5.replaceAll(\"\\\\.\",\"\")\n        var s7 = s6.replaceAll(\"\\\\,\",\"\")\n        var s8 = s7.replaceAll(\"\\\\:\",\"\")\n        var s9 = s8.replaceAll(\"\\\\;\",\"\")\n        var s10 = s9.replaceAll(\"\\\\?\",\"\")\n        var s11 = s10.replaceAll(\"\\\\!\",\"\")\n        var s12 = s11.replaceAll(\"\\\\$\",\"\")\n        var s13 = s12.replaceAll(\"\\\\%\",\"\")\n        var s14 = s13.replaceAll(\"\\\\^\",\"\")\n        var s15 = s14.replaceAll(\"\\\\&\",\"\")\n        var s16 = s15.replaceAll(\"\\\\*\",\"\")\n        var s17 = s16.replaceAll(\"\\\\(\",\"\")\n        var s18 = s17.replaceAll(\"\\\\)\",\"\")\n        var s19 = s18.replaceAll(\"\\\\+\",\"\")\n        var s20 = s19.replaceAll(\"\\\\-\",\"\")\n        var s21 = s20.replaceAll(\"\\\\=\",\"\")\n        var s22 = s21.replaceAll(\"\\\\<\",\"\")\n        var s23 = s22.replaceAll(\"\\\\>\",\"\")\n        var s24 = s23.replaceAll(\"\\\\;\",\"\")\n        var s25 = s24.replaceAll(\"\\\\?\",\"\")\n        var s26 = s25.replaceAll(\"\\\\!\",\"\")\n        var s27 = s26.replaceAll(\"\\\\$\",\"\")\n        var s28 = s27.replaceAll(\"\\\\%\",\"\")\n        var s29 = s28.replaceAll(\"\\\\^\",\"\")\n        var s30 = s29.replaceAll(\"\\\\&\",\"\")\n        var s31 = s30.replaceAll(\"\\\\*\",\"\")\n        var s32 = s31.replaceAll(\"\\\\(\",\"\")\n        var s33 = s32.replaceAll(\"\\\\)\",\"\")\n        var s34 = s33.replace\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293085,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E051] Reference Error: /tmp/tmpg53s171i.scala:50:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms34\u001b[0m = s33.replace\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mAmbiguous overload. The overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mreplace\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: CharSequence, x$1: CharSequence): String\n\u001b[31m   |\u001b[0m (x$0: Char, x$1: Char): String\n\u001b[31m   |\u001b[0mboth match expected type <?>\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg53s171i.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[0-9]\", \"\")\n        var s5 = s4.replaceAll(\"[^a-z0-9]\", \"\")\n        var s6 = s5.replaceAll(\"[^a-z]\", \"\")\n        var s7 = s6.replaceAll(\"[^0-9]\", \"\")\n        var s8 = s7.replaceAll(\"[^a-z0-9]\", \"\")\n        var s9 = s8.replaceAll(\"[^a-z]\", \"\")\n        var s10 = s9.replaceAll(\"[^0-9]\", \"\")\n        var s11 = s10.replaceAll(\"[^a-z0-9]\", \"\")\n        var s12 = s11.replaceAll(\"[^a-z]\", \"\")\n        var s13 = s12.replaceAll(\"[^0-9]\", \"\")\n        var s14 = s13.replaceAll(\"[^a-z0-9]\", \"\")\n        var s15 = s14.replaceAll(\"[^a-z]\", \"\")\n        var s16 = s15.replaceAll(\"[^0-9]\", \"\")\n        var s17 = s16.replaceAll(\"[^a-z0-9]\", \"\")\n        var s18 = s17.replaceAll(\"[^a-z]\", \"\")\n        var s19 = s18.replaceAll(\"[^0-9]\", \"\")\n        var s20 = s19.replaceAll(\"[^a-z0-9]\", \"\")\n        var s21 = s20.replaceAll(\"[^a-z]\", \"\")\n        var s22 = s21.replaceAll(\"[^0-9]\", \"\")\n        var s23 = s22.replaceAll(\"[^a-z0-9]\", \"\")\n        var s24 = s23.replaceAll(\"[^a-z]\", \"\")\n        var s25 = s24.replaceAll(\"[^0-9]\", \"\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293063,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp725kzwb9.scala:41:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms25\u001b[0m = s24.replaceAll(\u001b[31m\"[^0-9]\"\u001b[0m, \"\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                           unclosed string literal\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp725kzwb9.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase\n        var s2 = s1.replaceAll(\" \",\"\")\n        var s3 = s2.replaceAll(\"-\",\"\")\n        var s4 = s3.replaceAll(\"_\",\"\")\n        var s5 = s4.replaceAll(\"/\",\"\")\n        var s6 = s5.replaceAll(\"\\\\.\",\"\")\n        var s7 = s6.replaceAll(\"\\\\,\",\"\")\n        var s8 = s7.replaceAll(\"\\\\:\",\"\")\n        var s9 = s8.replaceAll(\"\\\\;\",\"\")\n        var s10 = s9.replaceAll(\"\\\\?\",\"\")\n        var s11 = s10.replaceAll(\"\\\\!\",\"\")\n        var s12 = s11.replaceAll(\"\\\\(\",\"\")\n        var s13 = s12.replaceAll(\"\\\\)\",\"\")\n        var s14 = s13.replaceAll(\"\\\\+\",\"\")\n        var s15 = s14.replaceAll(\"\\\\=\",\"\")\n        var s16 = s15.replaceAll(\"\\\\$\",\"\")\n        var s17 = s16.replaceAll(\"\\\\%\",\"\")\n        var s18 = s17.replaceAll(\"\\\\&\",\"\")\n        var s19 = s18.replaceAll(\"\\\\@\",\"\")\n        var s20 = s19.replaceAll(\"\\\\#\",\"\")\n        var s21 = s20.replaceAll(\"\\\\$\",\"\")\n        var s22 = s21.replaceAll(\"\\\\%\",\"\")\n        var s23 = s22.replaceAll(\"\\\\&\",\"\")\n        var s24 = s23.replaceAll(\"\\\\@\",\"\")\n        var s25 = s24.replaceAll(\"\\\\#\",\"\")\n        var s26 = s25.replaceAll(\"\\\\$\",\"\")\n        var s27 = s26.replaceAll(\"\\\\%\",\"\")\n        var s28 = s27.replaceAll(\"\\\\&\",\"\")\n        var s29 = s28.replaceAll(\"\\\\@\",\"\")\n        var s30 = s29.replaceAll(\"\\\\#\",\"\")\n        var s31 = s30.replaceAll(\"\\\\$\",\"\")\n        var s32 = s31.replaceAll(\"\\\\%\",\"\")\n        var s33 = s32.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293086,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc9b7ebf5.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var a = s.toCharArray\n        var b = a.length\n        var c = a.clone()\n        var d = a.clone()\n        var e = a.clone()\n        var f = a.clone()\n        var g = a.clone()\n        var h = a.clone()\n        var i = a.clone()\n        var j = a.clone()\n        var k = a.clone()\n        var l = a.clone()\n        var m = a.clone()\n        var n = a.clone()\n        var o = a.clone()\n        var p = a.clone()\n        var q = a.clone()\n        var r = a.clone()\n        var s = a.clone()\n        var t = a.clone()\n        var u = a.clone()\n        var v = a.clone()\n        var w = a.clone()\n        var x = a.clone()\n        var y = a.clone()\n        var z = a.clone()\n        var A = a.clone()\n        var B = a.clone()\n        var C = a.clone()\n        var D = a.clone()\n        var E = a.clone()\n        var F = a.clone()\n        var G = a.clone()\n        var H = a.clone()\n        var I = a.clone()\n        var J = a.clone()\n        var K = a.clone()\n        var L = a.clone()\n        var M = a.clone()\n        var N = a.clone()\n        var O = a.clone()\n        var P = a.clone()\n        var Q = a.clone()\n        var R = a.clone()\n        var S = a.clone()\n        var T = a.clone()\n        var U = a.clone()\n        var V = a.clone()\n        var W = a.clone()\n        var X = a.clone()\n        var Y = a.clone()\n        var Z = a.clone()\n        var _ = a.clone()\n        var $ = a.clone()\n        var a = a.clone()\n        var b = a.clone()\n        var c = a.clone()\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293086,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpoib4o03f.scala:72:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ma\u001b[0m = a.clone()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ma is already defined as \u001b[33mvariable\u001b[0m \u001b[35ma\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpoib4o03f.scala:73:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m73 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mb\u001b[0m = a.clone()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mb is already defined as \u001b[33mvariable\u001b[0m \u001b[35mb\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpoib4o03f.scala:74:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mc\u001b[0m = a.clone()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mc is already defined as \u001b[33mvariable\u001b[0m \u001b[35mc\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpoib4o03f.scala:36:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms\u001b[0m = a.clone()\n\u001b[31m\u001b[31m   |\u001b[0m                ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvariable\u001b[0m \u001b[35ma\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoib4o03f.scala:75:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            result += s.charAt(i)\n            if (i % 2 == 0) {\n                result += s.charAt(i + 1)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293046,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpaf_7fp9z.scala:28)\n\tat Problem.main(tmpaf_7fp9z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"_\",\"\")\n        var s6 = s5.replaceAll(\"/\",\"\")\n        var s7 = s6.replaceAll(\"\\\\.\",\"\")\n        var s8 = s7.replaceAll(\"\\\\,\",\"\")\n        var s9 = s8.replaceAll(\"\\\\:\",\"\")\n        var s10 = s9.replaceAll(\"\\\\;\",\"\")\n        var s11 = s10.replaceAll(\"\\\\?\",\"\")\n        var s12 = s11.replaceAll(\"\\\\!\",\"\")\n        var s13 = s12.replaceAll(\"\\\\$\",\"\")\n        var s14 = s13.replaceAll(\"\\\\%\",\"\")\n        var s15 = s14.replaceAll(\"\\\\^\",\"\")\n        var s16 = s15.replaceAll(\"\\\\&\",\"\")\n        var s17 = s16.replaceAll(\"\\\\*\",\"\")\n        var s18 = s17.replaceAll(\"\\\\(\",\"\")\n        var s19 = s18.replaceAll(\"\\\\)\",\"\")\n        var s20 = s19.replaceAll(\"\\\\+\",\"\")\n        var s21 = s20.replaceAll(\"\\\\-\",\"\")\n        var s22 = s21.replaceAll(\"\\\\=\",\"\")\n        var s23 = s22.replaceAll(\"\\\\>\",\"\")\n        var s24 = s23.replaceAll(\"\\\\<\",\"\")\n        var s25 = s24.replaceAll(\"\\\\@\",\"\")\n        var s26 = s25.replaceAll(\"\\\\#\",\"\")\n        var s27 = s26.replaceAll(\"\\\\$\",\"\")\n        var s28 = s27.replaceAll(\"\\\\%\",\"\")\n        var s29 = s28.replaceAll(\"\\\\^\",\"\")\n        var s30 = s29.replaceAll(\"\\\\&\",\"\")\n        var s31 = s30.replaceAll(\"\\\\*\",\"\")\n        var s32 = s31.replaceAll(\"\\\\(\",\"\")\n        var s33 = s32.replaceAll(\"\\\\)\",\"\")\n        var s34 = s33.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293087,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu_xpvqg7.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"_\",\"\")\n        var s6 = s5.replaceAll(\"/\",\"\")\n        var s7 = s6.replaceAll(\"\\\\.\",\"\")\n        var s8 = s7.replaceAll(\"\\\\,\",\"\")\n        var s9 = s8.replaceAll(\"\\\\:\",\"\")\n        var s10 = s9.replaceAll(\"\\\\;\",\"\")\n        var s11 = s10.replaceAll(\"\\\\?\",\"\")\n        var s12 = s11.replaceAll(\"\\\\!\",\"\")\n        var s13 = s12.replaceAll(\"\\\\(\",\"\")\n        var s14 = s13.replaceAll(\"\\\\)\",\"\")\n        var s15 = s14.replaceAll(\"\\\\[\",\"\")\n        var s16 = s15.replaceAll(\"\\\\]\",\"\")\n        var s17 = s16.replaceAll(\"\\\\{\",\"\")\n        var s18 = s17.replaceAll(\"\\\\}\",\"\")\n        var s19 = s18.replaceAll(\"\\\\+\",\"\")\n        var s20 = s19.replaceAll(\"\\\\-\",\"\")\n        var s21 = s20.replaceAll(\"\\\\*\",\"\")\n        var s22 = s21.replaceAll(\"\\\\/\",\"\")\n        var s23 = s22.replaceAll(\"\\\\%\",\"\")\n        var s24 = s23.replaceAll(\"\\\\^\",\"\")\n        var s25 = s24.replaceAll(\"\\\\&\",\"\")\n        var s26 = s25.replaceAll(\"\\\\|\",\"\")\n        var s27 = s26.replaceAll(\"\\\\~\",\"\")\n        var s28 = s27.replaceAll(\"\\\\<\",\"\")\n        var s29 = s28.replaceAll(\"\\\\>\",\"\")\n        var s30 = s29.replaceAll(\"\\\\=\",\"\")\n        var s31 = s30.replaceAll(\"\\\\?\",\"\")\n        var s32 = s31.replaceAll(\"\\\\@\",\"\")\n        var s33 = s32.replaceAll(\"\\\\#\",\"\")\n        var s34 = s33.replace\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293087,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E051] Reference Error: /tmp/tmpsn10aqi1.scala:50:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms34\u001b[0m = s33.replace\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mAmbiguous overload. The overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mreplace\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: CharSequence, x$1: CharSequence): String\n\u001b[31m   |\u001b[0m (x$0: Char, x$1: Char): String\n\u001b[31m   |\u001b[0mboth match expected type <?>\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsn10aqi1.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            var c = s.charAt(i)\n            result += c\n            if (i % 2 == 0) {\n                result += c\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293090,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx_ff3b75.scala:29)\n\tat Problem.main(tmpx_ff3b75.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        var s4 = \"\"\n        var s5 = \"\"\n        var s6 = \"\"\n        var s7 = \"\"\n        var s8 = \"\"\n        var s9 = \"\"\n        var s10 = \"\"\n        var s11 = \"\"\n        var s12 = \"\"\n        var s13 = \"\"\n        var s14 = \"\"\n        var s15 = \"\"\n        var s16 = \"\"\n        var s17 = \"\"\n        var s18 = \"\"\n        var s19 = \"\"\n        var s20 = \"\"\n        var s21 = \"\"\n        var s22 = \"\"\n        var s23 = \"\"\n        var s24 = \"\"\n        var s25 = \"\"\n        var s26 = \"\"\n        var s27 = \"\"\n        var s28 = \"\"\n        var s29 = \"\"\n        var s30 = \"\"\n        var s31 = \"\"\n        var s32 = \"\"\n        var s33 = \"\"\n        var s34 = \"\"\n        var s35 = \"\"\n        var s36 = \"\"\n        var s37 = \"\"\n        var s38 = \"\"\n        var s39 = \"\"\n        var s40 = \"\"\n        var s41 = \"\"\n        var s42 = \"\"\n        var s43 = \"\"\n        var s44 = \"\"\n        var s45 = \"\"\n        var s46 = \"\"\n        var s47 = \"\"\n        var s48 = \"\"\n        var s49 = \"\"\n        var s50 = \"\"\n        var s51 = \"\"\n        var s52 = \"\"\n        var s53 = \"\"\n        var s54 = \"\"\n        var s55 = \"\"\n        var s56 = \"\"\n        var s57 = \"\"\n        var s58 = \"\"\n        var s59 = \"\"\n        var s60 = \"\"\n        var s61 = \"\"\n        var s62 = \"\"\n        var s63 = \"\"\n        var s64 = \"\"\n        var s65 = \"\"\n        var s66 = \"\"\n        var s67 = \"\"\n        var s68 = \"\"\n        var s69 = \"\"\n        var s70 = \"\"\n        var s71 = \"\"\n        var s72 = \"\"\n        var s73 = \"\"\n        var s\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9mne5sgs.scala:91:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9mne5sgs.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms2\u001b[0m = s.toLowerCase()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value toLowerCase is not a member of Null\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9mne5sgs.scala:91:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase()\n        var s2 = s1.replaceAll(\" \",\"\")\n        var s3 = s2.replaceAll(\"-\",\"\")\n        var s4 = s3.replaceAll(\"/\",\"\")\n        var s5 = s4.replaceAll(\"\\\\.\",\"\")\n        var s6 = s5.replaceAll(\"\\\\,\",\"\")\n        var s7 = s6.replaceAll(\"\\\\:\",\"\")\n        var s8 = s7.replaceAll(\"\\\\;\",\"\")\n        var s9 = s8.replaceAll(\"\\\\?\",\"\")\n        var s10 = s9.replaceAll(\"\\\\!\",\"\")\n        var s11 = s10.replaceAll(\"\\\\(\",\"\")\n        var s12 = s11.replaceAll(\"\\\\)\",\"\")\n        var s13 = s12.replaceAll(\"\\\\+\",\"\")\n        var s14 = s13.replaceAll(\"\\\\-\",\"\")\n        var s15 = s14.replaceAll(\"\\\\*\",\"\")\n        var s16 = s15.replaceAll(\"\\\\/\",\"\")\n        var s17 = s16.replaceAll(\"\\\\^\",\"\")\n        var s18 = s17.replaceAll(\"\\\\%\",\"\")\n        var s19 = s18.replaceAll(\"\\\\$\",\"\")\n        var s20 = s19.replaceAll(\"\\\\@\",\"\")\n        var s21 = s20.replaceAll(\"\\\\#\",\"\")\n        var s22 = s21.replaceAll(\"\\\\$\",\"\")\n        var s23 = s22.replaceAll(\"\\\\@\",\"\")\n        var s24 = s23.replaceAll(\"\\\\#\",\"\")\n        var s25 = s24.replaceAll(\"\\\\$\",\"\")\n        var s26 = s25.replaceAll(\"\\\\@\",\"\")\n        var s27 = s26.replaceAll(\"\\\\#\",\"\")\n        var s28 = s27.replaceAll(\"\\\\$\",\"\")\n        var s29 = s28.replaceAll(\"\\\\@\",\"\")\n        var s30 = s29.replaceAll(\"\\\\#\",\"\")\n        var s31 = s30.replaceAll(\"\\\\$\",\"\")\n        var s32 = s31.replaceAll(\"\\\\@\",\"\")\n        var s33 = s32.\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293086,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpplax9hor.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpplax9hor.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8qjps38h.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m              ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value toCharArray is not a member of Char\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        var s4 = \"\"\n        var s5 = \"\"\n        var s6 = \"\"\n        var s7 = \"\"\n        var s8 = \"\"\n        var s9 = \"\"\n        var s10 = \"\"\n        var s11 = \"\"\n        var s12 = \"\"\n        var s13 = \"\"\n        var s14 = \"\"\n        var s15 = \"\"\n        var s16 = \"\"\n        var s17 = \"\"\n        var s18 = \"\"\n        var s19 = \"\"\n        var s20 = \"\"\n        var s21 = \"\"\n        var s22 = \"\"\n        var s23 = \"\"\n        var s24 = \"\"\n        var s25 = \"\"\n        var s26 = \"\"\n        var s27 = \"\"\n        var s28 = \"\"\n        var s29 = \"\"\n        var s30 = \"\"\n        var s31 = \"\"\n        var s32 = \"\"\n        var s33 = \"\"\n        var s34 = \"\"\n        var s35 = \"\"\n        var s36 = \"\"\n        var s37 = \"\"\n        var s38 = \"\"\n        var s39 = \"\"\n        var s40 = \"\"\n        var s41 = \"\"\n        var s42 = \"\"\n        var s43 = \"\"\n        var s44 = \"\"\n        var s45 = \"\"\n        var s46 = \"\"\n        var s47 = \"\"\n        var s48 = \"\"\n        var s49 = \"\"\n        var s50 = \"\"\n        var s51 = \"\"\n        var s52 = \"\"\n        var s53 = \"\"\n        var s54 = \"\"\n        var s55 = \"\"\n        var s56 = \"\"\n        var s57 = \"\"\n        var s58 = \"\"\n        var s59 = \"\"\n        var s60 = \"\"\n        var s61 = \"\"\n        var s62 = \"\"\n        var s63 = \"\"\n        var s64 = \"\"\n        var s65 = \"\"\n        var s66 = \"\"\n        var s67 = \"\"\n        var s68 = \"\"\n        var s69 = \"\"\n        var s70 = \"\"\n        var s71 = \"\"\n        var s72 = \"\"\n        var s73 = \"\"\n        var s\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9mne5sgs.scala:91:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9mne5sgs.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms2\u001b[0m = s.toLowerCase()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value toLowerCase is not a member of Null\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9mne5sgs.scala:91:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        var s4 = \"\"\n        var s5 = \"\"\n        var s6 = \"\"\n        var s7 = \"\"\n        var s8 = \"\"\n        var s9 = \"\"\n        var s10 = \"\"\n        var s11 = \"\"\n        var s12 = \"\"\n        var s13 = \"\"\n        var s14 = \"\"\n        var s15 = \"\"\n        var s16 = \"\"\n        var s17 = \"\"\n        var s18 = \"\"\n        var s19 = \"\"\n        var s20 = \"\"\n        var s21 = \"\"\n        var s22 = \"\"\n        var s23 = \"\"\n        var s24 = \"\"\n        var s25 = \"\"\n        var s26 = \"\"\n        var s27 = \"\"\n        var s28 = \"\"\n        var s29 = \"\"\n        var s30 = \"\"\n        var s31 = \"\"\n        var s32 = \"\"\n        var s33 = \"\"\n        var s34 = \"\"\n        var s35 = \"\"\n        var s36 = \"\"\n        var s37 = \"\"\n        var s38 = \"\"\n        var s39 = \"\"\n        var s40 = \"\"\n        var s41 = \"\"\n        var s42 = \"\"\n        var s43 = \"\"\n        var s44 = \"\"\n        var s45 = \"\"\n        var s46 = \"\"\n        var s47 = \"\"\n        var s48 = \"\"\n        var s49 = \"\"\n        var s50 = \"\"\n        var s51 = \"\"\n        var s52 = \"\"\n        var s53 = \"\"\n        var s54 = \"\"\n        var s55 = \"\"\n        var s56 = \"\"\n        var s57 = \"\"\n        var s58 = \"\"\n        var s59 = \"\"\n        var s60 = \"\"\n        var s61 = \"\"\n        var s62 = \"\"\n        var s63 = \"\"\n        var s64 = \"\"\n        var s65 = \"\"\n        var s66 = \"\"\n        var s67 = \"\"\n        var s68 = \"\"\n        var s69 = \"\"\n        var s70 = \"\"\n        var s71 = \"\"\n        var s72 = \"\"\n        var s73 = \"\"\n        var s\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9mne5sgs.scala:91:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9mne5sgs.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms2\u001b[0m = s.toLowerCase()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value toLowerCase is not a member of Null\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9mne5sgs.scala:91:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"/\",\"\")\n        var s6 = s5.replaceAll(\"\\\\.\",\"\")\n        var s7 = s6.replaceAll(\"\\\\,\",\"\")\n        var s8 = s7.replaceAll(\"\\\\:\",\"\")\n        var s9 = s8.replaceAll(\"\\\\;\",\"\")\n        var s10 = s9.replaceAll(\"\\\\?\",\"\")\n        var s11 = s10.replaceAll(\"\\\\!\",\"\")\n        var s12 = s11.replaceAll(\"\\\\(\",\"\")\n        var s13 = s12.replaceAll(\"\\\\)\",\"\")\n        var s14 = s13.replaceAll(\"\\\\-\",\"\")\n        var s15 = s14.replaceAll(\"\\\\+\",\"\")\n        var s16 = s15.replaceAll(\"\\\\*\",\"\")\n        var s17 = s16.replaceAll(\"\\\\/\",\"\")\n        var s18 = s17.replaceAll(\"\\\\^\",\"\")\n        var s19 = s18.replaceAll(\"\\\\%\",\"\")\n        var s20 = s19.replaceAll(\"\\\\$\",\"\")\n        var s21 = s20.replaceAll(\"\\\\#\",\"\")\n        var s22 = s21.replaceAll(\"\\\\@\",\"\")\n        var s23 = s22.replaceAll(\"\\\\[\",\"\")\n        var s24 = s23.replaceAll(\"\\\\]\",\"\")\n        var s25 = s24.replaceAll(\"\\\\{\",\"\")\n        var s26 = s25.replaceAll(\"\\\\}\",\"\")\n        var s27 = s26.replaceAll(\"\\\\|\",\"\")\n        var s28 = s27.replaceAll(\"\\\\&\",\"\")\n        var s29 = s28.replaceAll(\"\\\\~\",\"\")\n        var s30 = s29.replaceAll(\"\\\\=\",\"\")\n        var s31 = s30.replaceAll(\"\\\\<\",\"\")\n        var s32 = s31.replaceAll(\"\\\\>\",\"\")\n        var s33 = s32.replaceAll(\"\\\\;\",\"\")\n        var s34 = s33.\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293088,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5uhtr30g.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5uhtr30g.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase()\n        var s2 = \"\"\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s3 = \"\"\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293064,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1xpzqq9v.scala:46:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mi\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mi is already defined as \u001b[33mvariable\u001b[0m \u001b[35mi\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1xpzqq9v.scala:47:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mj\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mj is already defined as \u001b[33mvariable\u001b[0m \u001b[35mj\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1xpzqq9v.scala:48:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mk\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mk is already defined as \u001b[33mvariable\u001b[0m \u001b[35mk\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1xpzqq9v.scala:49:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ml is already defined as \u001b[33mvariable\u001b[0m \u001b[35ml\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1xpzqq9v.scala:50:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mm\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mm is already defined as \u001b[33mvariable\u001b[0m \u001b[35mm\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1xpzqq9v.scala:51:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mn\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[a-z]\",\"\")\n        var s6 = s5.replaceAll(\"[0-9]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-z0-9]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-z0-9]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-z0-9]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-z0-9]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-z0-9]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-z0-9]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-z0-9]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-z0-9]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-z0-9]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-z0-9]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-z0-9]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-z0-9]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-z0-9]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-z0-9]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-z0-9]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-z0-9]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-z0-9]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-z0-9]\",\"\")\n        var s25 = s24.replaceAll(\"[^a-z0-9\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293088,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpq71cr54f.scala:41:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms25\u001b[0m = s24.replaceAll(\"[^a-z0-9\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpq71cr54f.scala:43:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq71cr54f.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq71cr54f.scala:43:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: [^a-z0-9def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase\n        var s2 = s1.replaceAll(\" \",\"\")\n        var s3 = s2.replaceAll(\"-\",\"\")\n        var s4 = s3.replaceAll(\"/\",\"\")\n        var s5 = s4.replaceAll(\"\\\\.\",\"\")\n        var s6 = s5.replaceAll(\"\\\\,\",\"\")\n        var s7 = s6.replaceAll(\"\\\\:\",\"\")\n        var s8 = s7.replaceAll(\"\\\\;\",\"\")\n        var s9 = s8.replaceAll(\"\\\\?\",\"\")\n        var s10 = s9.replaceAll(\"\\\\!\",\"\")\n        var s11 = s10.replaceAll(\"\\\\(\",\"\")\n        var s12 = s11.replaceAll(\"\\\\)\",\"\")\n        var s13 = s12.replaceAll(\"\\\\-\",\"\")\n        var s14 = s13.replaceAll(\"\\\\+\",\"\")\n        var s15 = s14.replaceAll(\"\\\\*\",\"\")\n        var s16 = s15.replaceAll(\"\\\\/\",\"\")\n        var s17 = s16.replaceAll(\"\\\\^\",\"\")\n        var s18 = s17.replaceAll(\"\\\\%\",\"\")\n        var s19 = s18.replaceAll(\"\\\\$\",\"\")\n        var s20 = s19.replaceAll(\"\\\\@\",\"\")\n        var s21 = s20.replaceAll(\"\\\\#\",\"\")\n        var s22 = s21.replaceAll(\"\\\\$\",\"\")\n        var s23 = s22.replaceAll(\"\\\\@\",\"\")\n        var s24 = s23.replaceAll(\"\\\\#\",\"\")\n        var s25 = s24.replaceAll(\"\\\\$\",\"\")\n        var s26 = s25.replaceAll(\"\\\\@\",\"\")\n        var s27 = s26.replaceAll(\"\\\\#\",\"\")\n        var s28 = s27.replaceAll(\"\\\\$\",\"\")\n        var s29 = s28.replaceAll(\"\\\\@\",\"\")\n        var s30 = s29.replaceAll(\"\\\\#\",\"\")\n        var s31 = s30.replaceAll(\"\\\\$\",\"\")\n        var s32 = s31.replaceAll(\"\\\\@\",\"\")\n        var s33 = s32.replace\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293088,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E051] Reference Error: /tmp/tmpg75d7xcn.scala:50:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms33\u001b[0m = s32.replace\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mAmbiguous overload. The overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mreplace\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: CharSequence, x$1: CharSequence): String\n\u001b[31m   |\u001b[0m (x$0: Char, x$1: Char): String\n\u001b[31m   |\u001b[0mboth match expected type <?>\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg75d7xcn.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase()\n        var s2 = \"\"\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s3 = \"\"\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s3 = \"\"\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s3 = \"\"\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l =\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp_guh_n6e.scala:101:15 --------------------------\u001b[0m\u001b[0m\n\u001b[31m101 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml\u001b[0m =\n\u001b[31m\u001b[31m    |\u001b[0m               ^\u001b[0m\n\u001b[31m    |\u001b[0m               expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_guh_n6e.scala:46:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mi\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mi is already defined as \u001b[33mvariable\u001b[0m \u001b[35mi\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_guh_n6e.scala:47:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mj\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mj is already defined as \u001b[33mvariable\u001b[0m \u001b[35mj\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_guh_n6e.scala:48:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mk\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mk is already defined as \u001b[33mvariable\u001b[0m \u001b[35mk\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_guh_n6e.scala:49:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ml is already defined as \u001b[33mvariable\u001b[0m \u001b[35ml\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_guh_n6e.scala:50:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mm\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8qjps38h.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m              ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value toCharArray is not a member of Char\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s6 = s5.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-zA-Z]\",\"\")\n        var s25 = s24.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpopg0xkp1.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[0-9]\", \"\")\n        var s5 = s4.replaceAll(\"[^a-z0-9]\", \"\")\n        var s6 = s5.replaceAll(\"[^a-z0-9]\", \"\")\n        var s7 = s6.replaceAll(\"[^a-z0-9]\", \"\")\n        var s8 = s7.replaceAll(\"[^a-z0-9]\", \"\")\n        var s9 = s8.replaceAll(\"[^a-z0-9]\", \"\")\n        var s10 = s9.replaceAll(\"[^a-z0-9]\", \"\")\n        var s11 = s10.replaceAll(\"[^a-z0-9]\", \"\")\n        var s12 = s11.replaceAll(\"[^a-z0-9]\", \"\")\n        var s13 = s12.replaceAll(\"[^a-z0-9]\", \"\")\n        var s14 = s13.replaceAll(\"[^a-z0-9]\", \"\")\n        var s15 = s14.replaceAll(\"[^a-z0-9]\", \"\")\n        var s16 = s15.replaceAll(\"[^a-z0-9]\", \"\")\n        var s17 = s16.replaceAll(\"[^a-z0-9]\", \"\")\n        var s18 = s17.replaceAll(\"[^a-z0-9]\", \"\")\n        var s19 = s18.replaceAll(\"[^a-z0-9]\", \"\")\n        var s20 = s19.replaceAll(\"[^a-z0-9]\", \"\")\n        var s21 = s20.replaceAll(\"[^a-z0-9]\", \"\")\n        var s22 = s21.replaceAll(\"[^a-z0-9]\", \"\")\n        var s23 = s22.replaceAll(\"[^a-z0-9]\", \"\")\n        var s24\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpikvt6wan.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpikvt6wan.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase\n        var s2 = s1.replaceAll(\" \",\"\")\n        var s3 = s2.replaceAll(\"-\",\"\")\n        var s4 = s3.replaceAll(\"/\",\"\")\n        var s5 = s4.replaceAll(\"\\\\.\",\"\")\n        var s6 = s5.replaceAll(\"\\\\,\",\"\")\n        var s7 = s6.replaceAll(\"\\\\:\",\"\")\n        var s8 = s7.replaceAll(\"\\\\;\",\"\")\n        var s9 = s8.replaceAll(\"\\\\?\",\"\")\n        var s10 = s9.replaceAll(\"\\\\!\",\"\")\n        var s11 = s10.replaceAll(\"\\\\(\",\"\")\n        var s12 = s11.replaceAll(\"\\\\)\",\"\")\n        var s13 = s12.replaceAll(\"\\\\-\",\"\")\n        var s14 = s13.replaceAll(\"\\\\+\",\"\")\n        var s15 = s14.replaceAll(\"\\\\*\",\"\")\n        var s16 = s15.replaceAll(\"\\\\/\",\"\")\n        var s17 = s16.replaceAll(\"\\\\^\",\"\")\n        var s18 = s17.replaceAll(\"\\\\%\",\"\")\n        var s19 = s18.replaceAll(\"\\\\$\",\"\")\n        var s20 = s19.replaceAll(\"\\\\@\",\"\")\n        var s21 = s20.replaceAll(\"\\\\#\",\"\")\n        var s22 = s21.replaceAll(\"\\\\$\",\"\")\n        var s23 = s22.replaceAll(\"\\\\&\",\"\")\n        var s24 = s23.replaceAll(\"\\\\_\",\"\")\n        var s25 = s24.replaceAll(\"\\\\-\",\"\")\n        var s26 = s25.replaceAll(\"\\\\+\",\"\")\n        var s27 = s26.replaceAll(\"\\\\=\",\"\")\n        var s28 = s27.replaceAll(\"\\\\>\",\"\")\n        var s29 = s28.replaceAll(\"\\\\<\",\"\")\n        var s30 = s29.replaceAll(\"\\\\;\",\"\")\n        var s31 = s30.replaceAll(\"\\\\:\",\"\")\n        var s32 = s31.replaceAll(\"\\\\?\",\"\")\n        var s33 = s32.replace\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E051] Reference Error: /tmp/tmpamss2rw6.scala:50:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms33\u001b[0m = s32.replace\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mAmbiguous overload. The overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mreplace\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: CharSequence, x$1: CharSequence): String\n\u001b[31m   |\u001b[0m (x$0: Char, x$1: Char): String\n\u001b[31m   |\u001b[0mboth match expected type <?>\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpamss2rw6.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[^a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[^a-z]\", \"\")\n        var s5 = s4.replaceAll(\"[^a-z]\", \"\")\n        var s6 = s5.replaceAll(\"[^a-z]\", \"\")\n        var s7 = s6.replaceAll(\"[^a-z]\", \"\")\n        var s8 = s7.replaceAll(\"[^a-z]\", \"\")\n        var s9 = s8.replaceAll(\"[^a-z]\", \"\")\n        var s10 = s9.replaceAll(\"[^a-z]\", \"\")\n        var s11 = s10.replaceAll(\"[^a-z]\", \"\")\n        var s12 = s11.replaceAll(\"[^a-z]\", \"\")\n        var s13 = s12.replaceAll(\"[^a-z]\", \"\")\n        var s14 = s13.replaceAll(\"[^a-z]\", \"\")\n        var s15 = s14.replaceAll(\"[^a-z]\", \"\")\n        var s16 = s15.replaceAll(\"[^a-z]\", \"\")\n        var s17 = s16.replaceAll(\"[^a-z]\", \"\")\n        var s18 = s17.replaceAll(\"[^a-z]\", \"\")\n        var s19 = s18.replaceAll(\"[^a-z]\", \"\")\n        var s20 = s19.replaceAll(\"[^a-z]\", \"\")\n        var s21 = s20.replaceAll(\"[^a-z]\", \"\")\n        var s22 = s21.replaceAll(\"[^a-z]\", \"\")\n        var s23 = s22.replaceAll(\"[^a-z]\", \"\")\n        var s24 = s23.replaceAll(\"[^a-z]\", \"\")\n        var s25 = s24.replaceAll(\"[^a-z]\", \"\")\n        var s26 = s25.replaceAll(\"[^a-z]\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293021,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpel8foncj.scala:42:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms26\u001b[0m = s25.replaceAll(\"[^a-z]\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpel8foncj.scala:44:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpel8foncj.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpel8foncj.scala:44:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: [^a-z]def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        var s4 = \"\"\n        var s5 = \"\"\n        var s6 = \"\"\n        var s7 = \"\"\n        var s8 = \"\"\n        var s9 = \"\"\n        var s10 = \"\"\n        var s11 = \"\"\n        var s12 = \"\"\n        var s13 = \"\"\n        var s14 = \"\"\n        var s15 = \"\"\n        var s16 = \"\"\n        var s17 = \"\"\n        var s18 = \"\"\n        var s19 = \"\"\n        var s20 = \"\"\n        var s21 = \"\"\n        var s22 = \"\"\n        var s23 = \"\"\n        var s24 = \"\"\n        var s25 = \"\"\n        var s26 = \"\"\n        var s27 = \"\"\n        var s28 = \"\"\n        var s29 = \"\"\n        var s30 = \"\"\n        var s31 = \"\"\n        var s32 = \"\"\n        var s33 = \"\"\n        var s34 = \"\"\n        var s35 = \"\"\n        var s36 = \"\"\n        var s37 = \"\"\n        var s38 = \"\"\n        var s39 = \"\"\n        var s40 = \"\"\n        var s41 = \"\"\n        var s42 = \"\"\n        var s43 = \"\"\n        var s44 = \"\"\n        var s45 = \"\"\n        var s46 = \"\"\n        var s47 = \"\"\n        var s48 = \"\"\n        var s49 = \"\"\n        var s50 = \"\"\n        var s51 = \"\"\n        var s52 = \"\"\n        var s53 = \"\"\n        var s54 = \"\"\n        var s55 = \"\"\n        var s56 = \"\"\n        var s57 = \"\"\n        var s58 = \"\"\n        var s59 = \"\"\n        var s60 = \"\"\n        var s61 = \"\"\n        var s62 = \"\"\n        var s63 = \"\"\n        var s64 = \"\"\n        var s65 = \"\"\n        var s66 = \"\"\n        var s67 = \"\"\n        var s68 = \"\"\n        var s69 = \"\"\n        var s70 = \"\"\n        var s71 = \"\"\n        var s72 = \"\"\n        var s73 = \"\"\n        var s\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9mne5sgs.scala:91:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9mne5sgs.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms2\u001b[0m = s.toLowerCase()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value toLowerCase is not a member of Null\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9mne5sgs.scala:91:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[^a-z]\",\"\")\n        var s6 = s5.replaceAll(\"[^a-z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-z]\",\"\")\n        var s25 = s24.replaceAll(\"[^a-z]\",\"\")\n        var s26 = s25.replaceAll(\"[^a-z]\",\"\")\n        var s27 = s26.replaceAll(\"[^a-z]\",\"\")\n        var s28 = s27.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpujf0jfvv.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        var s4 = \"\"\n        var s5 = \"\"\n        var s6 = \"\"\n        var s7 = \"\"\n        var s8 = \"\"\n        var s9 = \"\"\n        var s10 = \"\"\n        var s11 = \"\"\n        var s12 = \"\"\n        var s13 = \"\"\n        var s14 = \"\"\n        var s15 = \"\"\n        var s16 = \"\"\n        var s17 = \"\"\n        var s18 = \"\"\n        var s19 = \"\"\n        var s20 = \"\"\n        var s21 = \"\"\n        var s22 = \"\"\n        var s23 = \"\"\n        var s24 = \"\"\n        var s25 = \"\"\n        var s26 = \"\"\n        var s27 = \"\"\n        var s28 = \"\"\n        var s29 = \"\"\n        var s30 = \"\"\n        var s31 = \"\"\n        var s32 = \"\"\n        var s33 = \"\"\n        var s34 = \"\"\n        var s35 = \"\"\n        var s36 = \"\"\n        var s37 = \"\"\n        var s38 = \"\"\n        var s39 = \"\"\n        var s40 = \"\"\n        var s41 = \"\"\n        var s42 = \"\"\n        var s43 = \"\"\n        var s44 = \"\"\n        var s45 = \"\"\n        var s46 = \"\"\n        var s47 = \"\"\n        var s48 = \"\"\n        var s49 = \"\"\n        var s50 = \"\"\n        var s51 = \"\"\n        var s52 = \"\"\n        var s53 = \"\"\n        var s54 = \"\"\n        var s55 = \"\"\n        var s56 = \"\"\n        var s57 = \"\"\n        var s58 = \"\"\n        var s59 = \"\"\n        var s60 = \"\"\n        var s61 = \"\"\n        var s62 = \"\"\n        var s63 = \"\"\n        var s64 = \"\"\n        var s65 = \"\"\n        var s66 = \"\"\n        var s67 = \"\"\n        var s68 = \"\"\n        var s69 = \"\"\n        var s70 = \"\"\n        var s71 = \"\"\n        var s72 = \"\"\n        var s73 = \"\"\n        var s\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9mne5sgs.scala:91:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9mne5sgs.scala:18:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms2\u001b[0m = s.toLowerCase()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value toLowerCase is not a member of Null\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9mne5sgs.scala:91:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            result += s.substring(i, i + 1)\n            i = i + 2\n        }\n        return result\n    }\n\n    // Create a function decrypt that takes a string as an argument and\n    // returns a string decrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift up by two multiplied to two places.\n    // For example:\n    // >>> decrypt((\"lm\"))\n    // (\"hi\")\n    // >>> decrypt((\"ewhjklnop\"))\n    // (\"asdfghjkl\")\n    // >>> decrypt((\"kj\"))\n    // (\"gf\")\n    // >>> decrypt((\"ix\"))\n    // (\"et\")\n    def decrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            result += s.substring(i, i + 1)\n            i = i - 2\n        }\n        return result\n    }\n\n    // Create a function encrypt_rotate that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt_rotate((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt_rotate((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt_rotate((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt_rotate((\"et\"))\n    // (\"ix\")\n    def encrypt_rotate(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            result += s.substring(i, i + 1)\n            i = i + 2\n        }\n        return result\n    }\n\n    // Create a function decrypt_rotate that takes a string as an argument and\n    // returns a string decrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293035,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcntz10mt.scala:85:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpcntz10mt.scala:21:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            i = i + \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpcntz10mt.scala:43:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            i = i - \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpcntz10mt.scala:65:14 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m            i = i + \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcntz10mt.scala:75:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m75 |\u001b[0m    assert(encrypt((\u001b[31m\"hi\"\u001b[0m)).equals((\u001b[31m\"lm\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: encrypt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcntz10mt.scala:76:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    assert(encrypt((\u001b[31m\"asdfghjkl\"\u001b[0m)).equals((\u001b[31m\"ewhjklnop\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m           ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           Not found: encrypt\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcntz10mt.scala:77:11 ------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m    assert(encrypt((\u001b[31m\"gf\"\u001b[0m)).equals((\u001b[31m\"kj\"\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            result += s.charAt(i)\n            if (i % 2 == 0) {\n                result += s.charAt(i + 1)\n            } else {\n                result += s.charAt(i - 1)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnp3h4f_3.scala:30)\n\tat Problem.main(tmpnp3h4f_3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase\n        var s2 = s1.replaceAll(\" \",\"\")\n        var s3 = s2.replaceAll(\"-\",\"\")\n        var s4 = s3.replaceAll(\"/\",\"\")\n        var s5 = s4.replaceAll(\"\\\\.\",\"\")\n        var s6 = s5.replaceAll(\"\\\\,\",\"\")\n        var s7 = s6.replaceAll(\"\\\\:\",\"\")\n        var s8 = s7.replaceAll(\"\\\\;\",\"\")\n        var s9 = s8.replaceAll(\"\\\\?\",\"\")\n        var s10 = s9.replaceAll(\"\\\\!\",\"\")\n        var s11 = s10.replaceAll(\"\\\\(\",\"\")\n        var s12 = s11.replaceAll(\"\\\\)\",\"\")\n        var s13 = s12.replaceAll(\"\\\\-\",\"\")\n        var s14 = s13.replaceAll(\"\\\\+\",\"\")\n        var s15 = s14.replaceAll(\"\\\\=\",\"\")\n        var s16 = s15.replaceAll(\"\\\\&\",\"\")\n        var s17 = s16.replaceAll(\"\\\\%\",\"\")\n        var s18 = s17.replaceAll(\"\\\\$\",\"\")\n        var s19 = s18.replaceAll(\"\\\\#\",\"\")\n        var s20 = s19.replaceAll(\"\\\\@\",\"\")\n        var s21 = s20.replaceAll(\"\\\\[\",\"\")\n        var s22 = s21.replaceAll(\"\\\\]\",\"\")\n        var s23 = s22.replaceAll(\"\\\\^\",\"\")\n        var s24 = s23.replaceAll(\"\\\\_\",\"\")\n        var s25 = s24.replaceAll(\"\\\\`\",\"\")\n        var s26 = s25.replaceAll(\"\\\\~\",\"\")\n        var s27 = s26.replaceAll(\"\\\\{\",\"\")\n        var s28 = s27.replaceAll(\"\\\\}\",\"\")\n        var s29 = s28.replaceAll(\"\\\\|\",\"\")\n        var s30 = s29.replaceAll(\"\\\\}\",\"\")\n        var s31 = s30.replaceAll(\"\\\\{\",\"\")\n        var s32 = s31.replaceAll(\"\\\\|\",\"\")\n        var s33 = s32.replace\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293102,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E051] Reference Error: /tmp/tmpjfaq00gz.scala:50:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms33\u001b[0m = s32.replace\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mAmbiguous overload. The overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mreplace\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: CharSequence, x$1: CharSequence): String\n\u001b[31m   |\u001b[0m (x$0: Char, x$1: Char): String\n\u001b[31m   |\u001b[0mboth match expected type <?>\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjfaq00gz.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8qjps38h.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        s.map(_.toCharArray).map(Problem.rotate).map(Problem.toString).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m              ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m              value toCharArray is not a member of Char\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        s.map(c => c.toLowerCase()).map(c => {\n            if (c == \"a\") return \"b\"\n            if (c == \"b\") return \"c\"\n            if (c == \"c\") return \"d\"\n            if (c == \"d\") return \"e\"\n            if (c == \"e\") return \"f\"\n            if (c == \"f\") return \"g\"\n            if (c == \"g\") return \"h\"\n            if (c == \"h\") return \"i\"\n            if (c == \"i\") return \"j\"\n            if (c == \"j\") return \"k\"\n            if (c == \"k\") return \"l\"\n            if (c == \"l\") return \"m\"\n            if (c == \"m\") return \"n\"\n            if (c == \"n\") return \"o\"\n            if (c == \"o\") return \"p\"\n            if (c == \"p\") return \"q\"\n            if (c == \"q\") return \"r\"\n            if (c == \"r\") return \"s\"\n            if (c == \"s\") return \"t\"\n            if (c == \"t\") return \"u\"\n            if (c == \"u\") return \"v\"\n            if (c == \"v\") return \"w\"\n            if (c == \"w\") return \"x\"\n            if (c == \"x\") return \"y\"\n            if (c == \"y\") return \"z\"\n            if (c == \"z\") return \"a\"\n            return c\n        }).collect(Collectors.joining())\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293102,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6vvb80gr.scala:18:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        s.map(\u001b[36mc\u001b[0m => c.toLowerCase()).map(\u001b[36mc\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value toLowerCase is not a member of Char\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase\n        var s2 = s1.replaceAll(\" \",\"\")\n        var s3 = s2.replaceAll(\"-\",\"\")\n        var s4 = s3.replaceAll(\"/\",\"\")\n        var s5 = s4.replaceAll(\"\\\\.\",\"\")\n        var s6 = s5.replaceAll(\"\\\\,\",\"\")\n        var s7 = s6.replaceAll(\"\\\\:\",\"\")\n        var s8 = s7.replaceAll(\"\\\\;\",\"\")\n        var s9 = s8.replaceAll(\"\\\\?\",\"\")\n        var s10 = s9.replaceAll(\"\\\\!\",\"\")\n        var s11 = s10.replaceAll(\"\\\\(\",\"\")\n        var s12 = s11.replaceAll(\"\\\\)\",\"\")\n        var s13 = s12.replaceAll(\"\\\\-\",\"\")\n        var s14 = s13.replaceAll(\"\\\\_\",\"\")\n        var s15 = s14.replaceAll(\"\\\\+\",\"\")\n        var s16 = s15.replaceAll(\"\\\\=\",\"\")\n        var s17 = s16.replaceAll(\"\\\\$\",\"\")\n        var s18 = s17.replaceAll(\"\\\\%\",\"\")\n        var s19 = s18.replaceAll(\"\\\\^\",\"\")\n        var s20 = s19.replaceAll(\"\\\\&\",\"\")\n        var s21 = s20.replaceAll(\"\\\\*\",\"\")\n        var s22 = s21.replaceAll(\"\\\\#\",\"\")\n        var s23 = s22.replaceAll(\"\\\\@\",\"\")\n        var s24 = s23.replaceAll(\"\\\\'\",\"\")\n        var s25 = s24.replaceAll(\"\\\\\\\"\",\"\")\n        var s26 = s25.replaceAll(\"\\\\,\",\"\")\n        var s27 = s26.replaceAll(\"\\\\;\",\"\")\n        var s28 = s27.replaceAll(\"\\\\:\",\"\")\n        var s29 = s28.replaceAll(\"\\\\?\",\"\")\n        var s30 = s29.replaceAll(\"\\\\!\",\"\")\n        var s31 = s30.replaceAll(\"\\\\(\",\"\")\n        var s32 = s31.replaceAll(\"\\\\)\",\"\")\n        var s33 = s32.replace\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293102,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E051] Reference Error: /tmp/tmpiiswpui_.scala:50:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms33\u001b[0m = s32.replace\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mAmbiguous overload. The overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mreplace\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mString\u001b[0m with types\n\u001b[31m   |\u001b[0m (x$0: CharSequence, x$1: CharSequence): String\n\u001b[31m   |\u001b[0m (x$0: Char, x$1: Char): String\n\u001b[31m   |\u001b[0mboth match expected type <?>\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiiswpui_.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            var c = s.charAt(i)\n            var index = (c.toCharCode() - 'a'.charCode()) % 26\n            result += alphabet[index]\n        }\n        return result\n    }\n\n    // Create a function decrypt that takes a string as an argument and\n    // returns a string decrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift up by two multiplied to two places.\n    // For example:\n    // >>> decrypt((\"lm\"))\n    // (\"hi\")\n    // >>> decrypt((\"ewhjklnop\"))\n    // (\"asdfghjkl\")\n    // >>> decrypt((\"kj\"))\n    // (\"gf\")\n    // >>> decrypt((\"ix\"))\n    // (\"et\")\n    def decrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            var c = s.charAt(i)\n            var index = (c.toCharCode() - 'a'.charCode()) % 26\n            result += alphabet[index]\n        }\n        return result\n    }\n\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt2(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            var c = s.charAt(i)\n            var index = (c.toCharCode() - 'a'.charCode()) % 26\n            result += alphabet[index]\n        }\n        return result\n    }\n\n    // Create a function decrypt\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5kew7n8_.scala:86:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0meof expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5kew7n8_.scala:21:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mindex\u001b[0m = (c.toCharCode() - \u001b[31m'a'\u001b[0m.charCode()) % \u001b[31m26\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value toCharCode is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5kew7n8_.scala:22:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            result += alphabet[\u001b[35mindex\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5kew7n8_.scala:22:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            result += alphabet[\u001b[35mindex\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: type index\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5kew7n8_.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            result += alphabet[\u001b[35mindex\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: alphabet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5kew7n8_.scala:44:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mindex\u001b[0m = (c.toCharCode() - \u001b[31m'a'\u001b[0m.charCode()) % \u001b[31m26\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value toCharCode is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5kew7n8_.scala:45:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m            result += alphabet[\u001b[35mindex",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"_\",\"\")\n        var s6 = s5.replaceAll(\"'\",\"\")\n        var s7 = s6.replaceAll(\"/\",\"\")\n        var s8 = s7.replaceAll(\"\\\\.\",\"\")\n        var s9 = s8.replaceAll(\"\\\\,\",\"\")\n        var s10 = s9.replaceAll(\"\\\\:\",\"\")\n        var s11 = s10.replaceAll(\"\\\\;\",\"\")\n        var s12 = s11.replaceAll(\"\\\\?\",\"\")\n        var s13 = s12.replaceAll(\"\\\\!\",\"\")\n        var s14 = s13.replaceAll(\"\\\\$\",\"\")\n        var s15 = s14.replaceAll(\"\\\\%\",\"\")\n        var s16 = s15.replaceAll(\"\\\\^\",\"\")\n        var s17 = s16.replaceAll(\"\\\\&\",\"\")\n        var s18 = s17.replaceAll(\"\\\\*\",\"\")\n        var s19 = s18.replaceAll(\"\\\\(\",\"\")\n        var s20 = s19.replaceAll(\"\\\\)\",\"\")\n        var s21 = s20.replaceAll(\"\\\\+\",\"\")\n        var s22 = s21.replaceAll(\"\\\\-\",\"\")\n        var s23 = s22.replaceAll(\"\\\\=\",\"\")\n        var s24 = s23.replaceAll(\"\\\\<\",\"\")\n        var s25 = s24.replaceAll(\"\\\\>\",\"\")\n        var s26 = s25.replaceAll(\"\\\\@\",\"\")\n        var s27 = s26.replaceAll(\"\\\\#\",\"\")\n        var s28 = s27.replaceAll(\"\\\\$\",\"\")\n        var s29 = s28.replaceAll(\"\\\\%\",\"\")\n        var s30 = s29.replaceAll(\"\\\\^\",\"\")\n        var s31 = s30.replaceAll(\"\\\\&\",\"\")\n        var s32 = s31.replaceAll(\"\\\\*\",\"\")\n        var s33 = s32.replaceAll(\"\\\\(\",\"\")\n        var s34 = s33.replaceAll(\"\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpop3_qu5j.scala:50:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms34\u001b[0m = s33.replaceAll(\"\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpop3_qu5j.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[^a-z]\",\"\")\n        var s6 = s5.replaceAll(\"[^a-z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-z]\",\"\")\n        var s25 = s24.replaceAll(\"[^a-z]\",\"\")\n        var s26 = s25.replaceAll(\"[^a-z]\",\"\")\n        var s27 = s26.replaceAll(\"[^a-z]\",\"\")\n        var s28 = s27.replaceAll(\"\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293083,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpeg60wo_w.scala:44:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms28\u001b[0m = s27.replaceAll(\"\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeg60wo_w.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        for (i <- 0 until s2.length) {\n            var c = s2.charAt(i)\n            var c2 = s2.charAt(i + 1)\n            var c3 = s2.charAt(i + 2)\n            var c4 = s2.charAt(i + 3)\n            var c5 = s2.charAt(i + 4)\n            var c6 = s2.charAt(i + 5)\n            var c7 = s2.charAt(i + 6)\n            var c8 = s2.charAt(i + 7)\n            var c9 = s2.charAt(i + 8)\n            var c10 = s2.charAt(i + 9)\n            var c11 = s2.charAt(i + 10)\n            var c12 = s2.charAt(i + 11)\n            var c13 = s2.charAt(i + 12)\n            var c14 = s2.charAt(i + 13)\n            var c15 = s2.charAt(i + 14)\n            var c16 = s2.charAt(i + 15)\n            var c17 = s2.charAt(i + 16)\n            var c18 = s2.charAt(i + 17)\n            var c19 = s2.charAt(i + 18)\n            var c20 = s2.charAt(i + 19)\n            var c21 = s2.charAt(i + 20)\n            var c22 = s2.charAt(i + 21)\n            var c23 = s2.charAt(i + 22)\n            var c24 = s2.charAt(i + 23)\n            var c25 = s2.charAt(i + 24)\n            var c26 = s2.charAt(i + 25)\n            var c27 = s2.charAt(i + 26)\n            var c28 = s2.charAt(i + 27)\n            var c29 = s2.charAt(i + 28)\n            var c30 = s2.charAt(i + 29)\n            var\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpmyr0rh4c.scala:51:15 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m            \u001b[33mvar\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmyr0rh4c.scala:65:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmyr0rh4c.scala:64:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpmyr0rh4c.scala:53:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m53 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase()\n        var s2 = \"\"\n        for (i <- 0 until s1.length) {\n            s2 = s2 + s1[i]\n            if (i + 2) % 26 == 0 {\n                s2 = s2 + s1[i + 2]\n            }\n        }\n        return s2\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpgiefaib8.scala:22:25 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mif\u001b[0m (i + \u001b[31m2\u001b[0m) % \u001b[31m26\u001b[0m == \u001b[31m0\u001b[0m {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                     end of statement expected but integer literal found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgiefaib8.scala:21:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            s2 = s2 + s1[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgiefaib8.scala:22:16 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mif\u001b[0m (i + \u001b[31m2\u001b[0m) % \u001b[31m26\u001b[0m == \u001b[31m0\u001b[0m {\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    Int\n\u001b[31m   |\u001b[0m                Required: Boolean\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgiefaib8.scala:22:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mif\u001b[0m (i + \u001b[31m2\u001b[0m) % \u001b[31m26\u001b[0m == \u001b[31m0\u001b[0m {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: %\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[^a-z]\",\"\")\n        var s6 = s5.replaceAll(\"[^a-z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-z]\",\"\")\n        var s25 = s24.replaceAll(\"[^a-z]\",\"\")\n        var s26 = s25.replaceAll(\"[^a-z]\",\"\")\n        var s27 = s26.replaceAll(\"[^a-z]\",\"\")\n        var s28 = s27.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpujf0jfvv.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase()\n        var s2 = \"\"\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s3 = \"\"\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s3 = \"\"\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s3 = \"\"\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l =\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp_guh_n6e.scala:101:15 --------------------------\u001b[0m\u001b[0m\n\u001b[31m101 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml\u001b[0m =\n\u001b[31m\u001b[31m    |\u001b[0m               ^\u001b[0m\n\u001b[31m    |\u001b[0m               expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_guh_n6e.scala:46:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mi\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mi is already defined as \u001b[33mvariable\u001b[0m \u001b[35mi\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_guh_n6e.scala:47:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mj\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mj is already defined as \u001b[33mvariable\u001b[0m \u001b[35mj\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_guh_n6e.scala:48:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mk\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mk is already defined as \u001b[33mvariable\u001b[0m \u001b[35mk\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_guh_n6e.scala:49:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ml is already defined as \u001b[33mvariable\u001b[0m \u001b[35ml\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_guh_n6e.scala:50:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mm\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase\n        var s2 = s1.replaceAll(\" \",\"\")\n        var s3 = s2.replaceAll(\"-\",\"\")\n        var s4 = s3.replaceAll(\"_\",\"\")\n        var s5 = s4.replaceAll(\"/\",\"\")\n        var s6 = s5.replaceAll(\"\\\\.\",\"\")\n        var s7 = s6.replaceAll(\"\\\\,\",\"\")\n        var s8 = s7.replaceAll(\"\\\\:\",\"\")\n        var s9 = s8.replaceAll(\"\\\\;\",\"\")\n        var s10 = s9.replaceAll(\"\\\\?\",\"\")\n        var s11 = s10.replaceAll(\"\\\\!\",\"\")\n        var s12 = s11.replaceAll(\"\\\\$\",\"\")\n        var s13 = s12.replaceAll(\"\\\\%\",\"\")\n        var s14 = s13.replaceAll(\"\\\\^\",\"\")\n        var s15 = s14.replaceAll(\"\\\\&\",\"\")\n        var s16 = s15.replaceAll(\"\\\\*\",\"\")\n        var s17 = s16.replaceAll(\"\\\\(\",\"\")\n        var s18 = s17.replaceAll(\"\\\\)\",\"\")\n        var s19 = s18.replaceAll(\"\\\\+\",\"\")\n        var s20 = s19.replaceAll(\"\\\\-\",\"\")\n        var s21 = s20.replaceAll(\"\\\\=\",\"\")\n        var s22 = s21.replaceAll(\"\\\\<\",\"\")\n        var s23 = s22.replaceAll(\"\\\\>\",\"\")\n        var s24 = s23.replaceAll(\"\\\\@\",\"\")\n        var s25 = s24.replaceAll(\"\\\\#\",\"\")\n        var s26 = s25.replaceAll(\"\\\\$\",\"\")\n        var s27 = s26.replaceAll(\"\\\\%\",\"\")\n        var s28 = s27.replaceAll(\"\\\\^\",\"\")\n        var s29 = s28.replaceAll(\"\\\\&\",\"\")\n        var s30 = s29.replaceAll(\"\\\\*\",\"\")\n        var s31 = s30.replaceAll(\"\\\\(\",\"\")\n        var s32 = s31.replaceAll(\"\\\\)\",\"\")\n        var s33 = s32.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdtmoprnl.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase()\n        var s2 = \"\"\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s3 = \"\"\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s3 = \"\"\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s3 = \"\"\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l =\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp_guh_n6e.scala:101:15 --------------------------\u001b[0m\u001b[0m\n\u001b[31m101 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml\u001b[0m =\n\u001b[31m\u001b[31m    |\u001b[0m               ^\u001b[0m\n\u001b[31m    |\u001b[0m               expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_guh_n6e.scala:46:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mi\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mi is already defined as \u001b[33mvariable\u001b[0m \u001b[35mi\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_guh_n6e.scala:47:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mj\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mj is already defined as \u001b[33mvariable\u001b[0m \u001b[35mj\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_guh_n6e.scala:48:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mk\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mk is already defined as \u001b[33mvariable\u001b[0m \u001b[35mk\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_guh_n6e.scala:49:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ml is already defined as \u001b[33mvariable\u001b[0m \u001b[35ml\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_guh_n6e.scala:50:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mm\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"_\",\"\")\n        var s6 = s5.replaceAll(\"'\",\"\")\n        var s7 = s6.replaceAll(\"/\",\"\")\n        var s8 = s7.replaceAll(\"\\\\.\",\"\")\n        var s9 = s8.replaceAll(\"\\\\,\",\"\")\n        var s10 = s9.replaceAll(\"\\\\:\",\"\")\n        var s11 = s10.replaceAll(\"\\\\;\",\"\")\n        var s12 = s11.replaceAll(\"\\\\?\",\"\")\n        var s13 = s12.replaceAll(\"\\\\!\",\"\")\n        var s14 = s13.replaceAll(\"\\\\@\",\"\")\n        var s15 = s14.replaceAll(\"\\\\#\",\"\")\n        var s16 = s15.replaceAll(\"\\\\$\",\"\")\n        var s17 = s16.replaceAll(\"\\\\%\",\"\")\n        var s18 = s17.replaceAll(\"\\\\^\",\"\")\n        var s19 = s18.replaceAll(\"\\\\&\",\"\")\n        var s20 = s19.replaceAll(\"\\\\*\",\"\")\n        var s21 = s20.replaceAll(\"\\\\(\",\"\")\n        var s22 = s21.replaceAll(\"\\\\)\",\"\")\n        var s23 = s22.replaceAll(\"\\\\+\",\"\")\n        var s24 = s23.replaceAll(\"\\\\=\",\"\")\n        var s25 = s24.replaceAll(\"\\\\-\",\"\")\n        var s26 = s25.replaceAll(\"\\\\_\",\"\")\n        var s27 = s26.replaceAll(\"\\\\<\",\"\")\n        var s28 = s27.replaceAll(\"\\\\>\",\"\")\n        var s29 = s28.replaceAll(\"\\\\\\\"\",\"\")\n        var s30 = s29.replaceAll(\"\\\\'\",\"\")\n        var s31 = s30.replaceAll(\"\\\\/\",\"\")\n        var s32 = s31.replaceAll(\"\\\\[\",\"\")\n        var s33 = s32.replaceAll(\"\\\\]\",\"\")\n        var s34 = s33.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmper7l2gm7.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[a-z]\",\"\")\n        var s6 = s5.replaceAll(\"[0-9]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-z0-9]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-z0-9]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-z0-9]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-z0-9]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-z0-9]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-z0-9]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-z0-9]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-z0-9]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-z0-9]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-z0-9]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-z0-9]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-z0-9]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-z0-9]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-z0-9]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-z0-9]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-z0-9]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-z0-9]\",\"\")\n        var s25 = s24.replaceAll(\"[^a-z0-9]\",\"\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293106,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpgzbpmrnx.scala:41:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms25\u001b[0m = s24.replaceAll(\u001b[31m\"[^a-z0-9]\"\u001b[0m,\"\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             unclosed string literal\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgzbpmrnx.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"_\",\"\")\n        var s6 = s5.replaceAll(\"/\",\"\")\n        var s7 = s6.replaceAll(\"\\\\.\",\"\")\n        var s8 = s7.replaceAll(\"\\\\+\",\"\")\n        var s9 = s8.replaceAll(\"\\\\*\",\"\")\n        var s10 = s9.replaceAll(\"\\\\(\",\"\")\n        var s11 = s10.replaceAll(\"\\\\)\",\"\")\n        var s12 = s11.replaceAll(\"\\\\[\",\"\")\n        var s13 = s12.replaceAll(\"\\\\]\",\"\")\n        var s14 = s13.replaceAll(\"\\\\{\",\"\")\n        var s15 = s14.replaceAll(\"\\\\}\",\"\")\n        var s16 = s15.replaceAll(\"\\\\|\",\"\")\n        var s17 = s16.replaceAll(\"\\\\^\",\"\")\n        var s18 = s17.replaceAll(\"\\\\&\",\"\")\n        var s19 = s18.replaceAll(\"\\\\%\",\"\")\n        var s20 = s19.replaceAll(\"\\\\$\",\"\")\n        var s21 = s20.replaceAll(\"\\\\#\",\"\")\n        var s22 = s21.replaceAll(\"\\\\@\",\"\")\n        var s23 = s22.replaceAll(\"\\\\!\",\"\")\n        var s24 = s23.replaceAll(\"\\\\?\",\"\")\n        var s25 = s24.replaceAll(\"\\\\:\",\"\")\n        var s26 = s25.replaceAll(\"\\\\;\",\"\")\n        var s27 = s26.replaceAll(\"\\\\,\",\"\")\n        var s28 = s27.replaceAll(\"\\\\.\",\"\")\n        var s29 = s28.replaceAll(\"\\\\<\",\"\")\n        var s30 = s29.replaceAll(\"\\\\>\",\"\")\n        var s31 = s30.replaceAll(\"\\\\=\",\"\")\n        var s32 = s31.replaceAll(\"\\\\+\",\"\")\n        var s33 = s32.replaceAll(\"\\\\*\",\"\")\n        var s34 = s33.replaceAll(\"\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293106,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpcgmuupmz.scala:50:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms34\u001b[0m = s33.replaceAll(\"\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcgmuupmz.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s1 = s.toLowerCase\n        var s2 = s1.replaceAll(\" \",\"\")\n        var s3 = s2.replaceAll(\"-\",\"\")\n        var s4 = s3.replaceAll(\"_\",\"\")\n        var s5 = s4.replaceAll(\"/\",\"\")\n        var s6 = s5.replaceAll(\"\\\\.\",\"\")\n        var s7 = s6.replaceAll(\"\\\\,\",\"\")\n        var s8 = s7.replaceAll(\"\\\\:\",\"\")\n        var s9 = s8.replaceAll(\"\\\\;\",\"\")\n        var s10 = s9.replaceAll(\"\\\\?\",\"\")\n        var s11 = s10.replaceAll(\"\\\\!\",\"\")\n        var s12 = s11.replaceAll(\"\\\\(\",\"\")\n        var s13 = s12.replaceAll(\"\\\\)\",\"\")\n        var s14 = s13.replaceAll(\"\\\\+\",\"\")\n        var s15 = s14.replaceAll(\"\\\\-\",\"\")\n        var s16 = s15.replaceAll(\"\\\\*\",\"\")\n        var s17 = s16.replaceAll(\"\\\\/\",\"\")\n        var s18 = s17.replaceAll(\"\\\\%\",\"\")\n        var s19 = s18.replaceAll(\"\\\\$\",\"\")\n        var s20 = s19.replaceAll(\"\\\\^\",\"\")\n        var s21 = s20.replaceAll(\"\\\\&\",\"\")\n        var s22 = s21.replaceAll(\"\\\\'\",\"\")\n        var s23 = s22.replaceAll(\"\\\\\\\"\",\"\")\n        var s24 = s23.replaceAll(\"\\\\<\",\"\")\n        var s25 = s24.replaceAll(\"\\\\>\",\"\")\n        var s26 = s25.replaceAll(\"\\\\=\",\"\")\n        var s27 = s26.replaceAll(\"\\\\#\",\"\")\n        var s28 = s27.replaceAll(\"\\\\$\",\"\")\n        var s29 = s28.replaceAll(\"\\\\@\",\"\")\n        var s30 = s29.replaceAll(\"\\\\[\",\"\")\n        var s31 = s30.replaceAll(\"\\\\]\",\"\")\n        var s32 = s31.replaceAll(\"\\\\{\",\"\")\n        var s33 = s32.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293106,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpov9j5h_f.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"'\",\"\")\n        var s6 = s5.replaceAll(\"[^a-z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-z]\",\"\")\n        var s25 = s24.replaceAll(\"[^a-z]\",\"\")\n        var s26 = s25.replaceAll(\"[^a-z]\",\"\")\n        var s27 = s26.replaceAll(\"[^a-z]\",\"\")\n        var s28 = s27.replaceAll(\"[^a-z\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp3dl06g_f.scala:44:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms28\u001b[0m = s27.replaceAll(\"[^a-z\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmp3dl06g_f.scala:46:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3dl06g_f.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3dl06g_f.scala:46:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: [^a-zdef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[^a-z]\",\"\")\n        var s6 = s5.replaceAll(\"[^a-z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-z]\",\"\")\n        var s25 = s24.replaceAll(\"[^a-z]\",\"\")\n        var s26 = s25.replaceAll(\"[^a-z]\",\"\")\n        var s27 = s26.replaceAll(\"[^a-z]\",\"\")\n        var s28 = s27.replaceAll(\"\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293083,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpeg60wo_w.scala:44:33 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ms28\u001b[0m = s27.replaceAll(\"\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 unclosed string literal\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeg60wo_w.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        s.map(c => c.toCharArray(0)._[2:].toCharArray(0)._[1:].toCharArray(0)._[0:1])\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293106,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_t7_lofb.scala:18:36 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        s.map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)._[\u001b[31m2\u001b[0m:].toCharArray(\u001b[31m0\u001b[0m)._[\u001b[31m1\u001b[0m:].toCharArray(\u001b[31m0\u001b[0m)._[\u001b[31m0\u001b[0m:\u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   an identifier expected, but '_' found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_t7_lofb.scala:18:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        s.map(\u001b[36mc\u001b[0m => c.toCharArray(\u001b[31m0\u001b[0m)._[\u001b[31m2\u001b[0m:].toCharArray(\u001b[31m0\u001b[0m)._[\u001b[31m1\u001b[0m:].toCharArray(\u001b[31m0\u001b[0m)._[\u001b[31m0\u001b[0m:\u001b[31m1\u001b[0m])\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value toCharArray is not a member of Char\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"[^a-z]\",\"\")\n        var s6 = s5.replaceAll(\"[^a-z]\",\"\")\n        var s7 = s6.replaceAll(\"[^a-z]\",\"\")\n        var s8 = s7.replaceAll(\"[^a-z]\",\"\")\n        var s9 = s8.replaceAll(\"[^a-z]\",\"\")\n        var s10 = s9.replaceAll(\"[^a-z]\",\"\")\n        var s11 = s10.replaceAll(\"[^a-z]\",\"\")\n        var s12 = s11.replaceAll(\"[^a-z]\",\"\")\n        var s13 = s12.replaceAll(\"[^a-z]\",\"\")\n        var s14 = s13.replaceAll(\"[^a-z]\",\"\")\n        var s15 = s14.replaceAll(\"[^a-z]\",\"\")\n        var s16 = s15.replaceAll(\"[^a-z]\",\"\")\n        var s17 = s16.replaceAll(\"[^a-z]\",\"\")\n        var s18 = s17.replaceAll(\"[^a-z]\",\"\")\n        var s19 = s18.replaceAll(\"[^a-z]\",\"\")\n        var s20 = s19.replaceAll(\"[^a-z]\",\"\")\n        var s21 = s20.replaceAll(\"[^a-z]\",\"\")\n        var s22 = s21.replaceAll(\"[^a-z]\",\"\")\n        var s23 = s22.replaceAll(\"[^a-z]\",\"\")\n        var s24 = s23.replaceAll(\"[^a-z]\",\"\")\n        var s25 = s24.replaceAll(\"[^a-z]\",\"\")\n        var s26 = s25.replaceAll(\"[^a-z]\",\"\")\n        var s27 = s26.replaceAll(\"[^a-z]\",\"\")\n        var s28 = s27.replaceAll\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpujf0jfvv.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"_\",\"\")\n        var s6 = s5.replaceAll(\"'\",\"\")\n        var s7 = s6.replaceAll(\"\\\"\",\"\")\n        var s8 = s7.replaceAll(\"/\",\"\")\n        var s9 = s8.replaceAll(\"\\\\\",\"\")\n        var s10 = s9.replaceAll(\"%\",\"\")\n        var s11 = s10.replaceAll(\"&\",\"\")\n        var s12 = s11.replaceAll(\"@\",\"\")\n        var s13 = s12.replaceAll(\"#\",\"\")\n        var s14 = s13.replaceAll(\"$\",\"\")\n        var s15 = s14.replaceAll(\"^\",\"\")\n        var s16 = s15.replaceAll(\"*\",\"\")\n        var s17 = s16.replaceAll(\"(\",\"\")\n        var s18 = s17.replaceAll(\")\",\"\")\n        var s19 = s18.replaceAll(\"+\",\"\")\n        var s20 = s19.replaceAll(\"=\",\"\")\n        var s21 = s20.replaceAll(\"-\",\"\")\n        var s22 = s21.replaceAll(\"[\",\"\")\n        var s23 = s22.replaceAll(\"]\",\"\")\n        var s24 = s23.replaceAll(\"{\",\"\")\n        var s25 = s24.replaceAll(\"}\",\"\")\n        var s26 = s25.replaceAll(\"[\",\"\")\n        var s27 = s26.replaceAll(\"]\",\"\")\n        var s28 = s27.replaceAll(\"|\",\"\")\n        var s29 = s28.replaceAll(\";\",\"\")\n        var s30 = s29.replaceAll(\":\",\"\")\n        var s31 = s30.replaceAll(\"<\",\"\")\n        var s32 = s31.replaceAll(\">\",\"\")\n        var s33 = s32.replaceAll(\"\\\"\",\"\")\n        var s34 = s33.replaceAll(\"\\\\\",\"\")\n        var s35 = s34.replaceAll(\"/\",\"\")\n        var s36 = s\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293106,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcsrn810q.scala:53:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        s.map(c => c.toLowerCase()).map(c => c.charAt(0) + (c.charAt(1) + 2) * 2).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293106,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpd2_l4fc8.scala:18:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        s.map(\u001b[36mc\u001b[0m => c.toLowerCase()).map(\u001b[36mc\u001b[0m => c.charAt(\u001b[31m0\u001b[0m) + (c.charAt(\u001b[31m1\u001b[0m) + \u001b[31m2\u001b[0m) * \u001b[31m2\u001b[0m).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value toLowerCase is not a member of Char\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = \"\"\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        \n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293085,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp93l6ik7v.scala:46:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mi\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mi is already defined as \u001b[33mvariable\u001b[0m \u001b[35mi\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp93l6ik7v.scala:47:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mj\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mj is already defined as \u001b[33mvariable\u001b[0m \u001b[35mj\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp93l6ik7v.scala:48:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mk\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mk is already defined as \u001b[33mvariable\u001b[0m \u001b[35mk\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp93l6ik7v.scala:49:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36ml\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ml is already defined as \u001b[33mvariable\u001b[0m \u001b[35ml\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp93l6ik7v.scala:50:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mm\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mm is already defined as \u001b[33mvariable\u001b[0m \u001b[35mm\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp93l6ik7v.scala:51:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mn\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[^a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[a-z]\", \"\")\n        var s5 = s4.replaceAll(\"[a-z]\", \"\")\n        var s6 = s5.replaceAll(\"[a-z]\", \"\")\n        var s7 = s6.replaceAll(\"[a-z]\", \"\")\n        var s8 = s7.replaceAll(\"[a-z]\", \"\")\n        var s9 = s8.replaceAll(\"[a-z]\", \"\")\n        var s10 = s9.replaceAll(\"[a-z]\", \"\")\n        var s11 = s10.replaceAll(\"[a-z]\", \"\")\n        var s12 = s11.replaceAll(\"[a-z]\", \"\")\n        var s13 = s12.replaceAll(\"[a-z]\", \"\")\n        var s14 = s13.replaceAll(\"[a-z]\", \"\")\n        var s15 = s14.replaceAll(\"[a-z]\", \"\")\n        var s16 = s15.replaceAll(\"[a-z]\", \"\")\n        var s17 = s16.replaceAll(\"[a-z]\", \"\")\n        var s18 = s17.replaceAll(\"[a-z]\", \"\")\n        var s19 = s18.replaceAll(\"[a-z]\", \"\")\n        var s20 = s19.replaceAll(\"[a-z]\", \"\")\n        var s21 = s20.replaceAll(\"[a-z]\", \"\")\n        var s22 = s21.replaceAll(\"[a-z]\", \"\")\n        var s23 = s22.replaceAll(\"[a-z]\", \"\")\n        var s24 = s23.replaceAll(\"[a-z]\", \"\")\n        var s25 = s24.replaceAll(\"[a-z]\", \"\")\n        var s26 = s25.replaceAll(\"[a-z]\", \"\")\n        var s27 = s26.replaceAll(\"[a-z]\", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293042,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsztz_uos.scala:44:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"/\",\"\")\n        var s6 = s5.replaceAll(\"\\\\.\",\"\")\n        var s7 = s6.replaceAll(\"\\\\,\",\"\")\n        var s8 = s7.replaceAll(\"\\\\:\",\"\")\n        var s9 = s8.replaceAll(\"\\\\;\",\"\")\n        var s10 = s9.replaceAll(\"\\\\?\",\"\")\n        var s11 = s10.replaceAll(\"\\\\!\",\"\")\n        var s12 = s11.replaceAll(\"\\\\(\",\"\")\n        var s13 = s12.replaceAll(\"\\\\)\",\"\")\n        var s14 = s13.replaceAll(\"\\\\-\",\"\")\n        var s15 = s14.replaceAll(\"\\\\+\",\"\")\n        var s16 = s15.replaceAll(\"\\\\*\",\"\")\n        var s17 = s16.replaceAll(\"\\\\/\",\"\")\n        var s18 = s17.replaceAll(\"\\\\^\",\"\")\n        var s19 = s18.replaceAll(\"\\\\%\",\"\")\n        var s20 = s19.replaceAll(\"\\\\$\",\"\")\n        var s21 = s20.replaceAll(\"\\\\@\",\"\")\n        var s22 = s21.replaceAll(\"\\\\#\",\"\")\n        var s23 = s22.replaceAll(\"\\\\$\",\"\")\n        var s24 = s23.replaceAll(\"\\\\&\",\"\")\n        var s25 = s24.replaceAll(\"\\\\_\",\"\")\n        var s26 = s25.replaceAll(\"\\\\-\",\"\")\n        var s27 = s26.replaceAll(\"\\\\+\",\"\")\n        var s28 = s27.replaceAll(\"\\\\*\",\"\")\n        var s29 = s28.replaceAll(\"\\\\/\",\"\")\n        var s30 = s29.replaceAll(\"\\\\^\",\"\")\n        var s31 = s30.replaceAll(\"\\\\%\",\"\")\n        var s32 = s31.replaceAll(\"\\\\$\",\"\")\n        var s33 = s32.replaceAll(\"\\\\@\",\"\")\n        var s34 = s33.\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293106,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1vjsh3mv.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1vjsh3mv.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\"[a-z]\", \"\")\n        var s4 = s3.replaceAll(\"[0-9]\", \"\")\n        var s5 = s4.replaceAll(\"[^a-z0-9]\", \"\")\n        var s6 = s5.replaceAll(\"[^a-z0-9]\", \"\")\n        var s7 = s6.replaceAll(\"[^a-z0-9]\", \"\")\n        var s8 = s7.replaceAll(\"[^a-z0-9]\", \"\")\n        var s9 = s8.replaceAll(\"[^a-z0-9]\", \"\")\n        var s10 = s9.replaceAll(\"[^a-z0-9]\", \"\")\n        var s11 = s10.replaceAll(\"[^a-z0-9]\", \"\")\n        var s12 = s11.replaceAll(\"[^a-z0-9]\", \"\")\n        var s13 = s12.replaceAll(\"[^a-z0-9]\", \"\")\n        var s14 = s13.replaceAll(\"[^a-z0-9]\", \"\")\n        var s15 = s14.replaceAll(\"[^a-z0-9]\", \"\")\n        var s16 = s15.replaceAll(\"[^a-z0-9]\", \"\")\n        var s17 = s16.replaceAll(\"[^a-z0-9]\", \"\")\n        var s18 = s17.replaceAll(\"[^a-z0-9]\", \"\")\n        var s19 = s18.replaceAll(\"[^a-z0-9]\", \"\")\n        var s20 = s19.replaceAll(\"[^a-z0-9]\", \"\")\n        var s21 = s20.replaceAll(\"[^a-z0-9]\", \"\")\n        var s22 = s21.replaceAll(\"[^a-z0-9]\", \"\")\n        var s23 = s22.replaceAll(\"[^a-z0-9]\", \"\")\n        var s24\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpikvt6wan.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpikvt6wan.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            result = result + s.substring(i, i + 1).charAt(2)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "java.lang.StringIndexOutOfBoundsException: String index out of range: 2\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem$.encrypt$$anonfun$1(tmp8gmv37bt.scala:20)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.encrypt(tmp8gmv37bt.scala:21)\n\tat Problem$.main(tmp8gmv37bt.scala:25)\n\tat Problem.main(tmp8gmv37bt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var result = \"\"\n        for (i <- 0 until s.length) {\n            result = result + s[i]\n            if (i % 2 == 1) {\n                result = result + s[i]\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293104,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg0n_fyom.scala:20:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            result = result + s[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg0n_fyom.scala:22:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                result = result + s[\u001b[35mi\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Not found: type i\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        var s2 = s.toLowerCase()\n        var s3 = s2.replaceAll(\" \",\"\")\n        var s4 = s3.replaceAll(\"-\",\"\")\n        var s5 = s4.replaceAll(\"/\",\"\")\n        var s6 = s5.replaceAll(\"\\\\.\",\"\")\n        var s7 = s6.replaceAll(\"\\\\,\",\"\")\n        var s8 = s7.replaceAll(\"\\\\:\",\"\")\n        var s9 = s8.replaceAll(\"\\\\;\",\"\")\n        var s10 = s9.replaceAll(\"\\\\?\",\"\")\n        var s11 = s10.replaceAll(\"\\\\!\",\"\")\n        var s12 = s11.replaceAll(\"\\\\@\",\"\")\n        var s13 = s12.replaceAll(\"\\\\#\",\"\")\n        var s14 = s13.replaceAll(\"\\\\$\",\"\")\n        var s15 = s14.replaceAll(\"\\\\%\",\"\")\n        var s16 = s15.replaceAll(\"\\\\^\",\"\")\n        var s17 = s16.replaceAll(\"\\\\&\",\"\")\n        var s18 = s17.replaceAll(\"\\\\*\",\"\")\n        var s19 = s18.replaceAll(\"\\\\(\",\"\")\n        var s20 = s19.replaceAll(\"\\\\)\",\"\")\n        var s21 = s20.replaceAll(\"\\\\+\",\"\")\n        var s22 = s21.replaceAll(\"\\\\=\",\"\")\n        var s23 = s22.replaceAll(\"\\\\-\",\"\")\n        var s24 = s23.replaceAll(\"\\\\_\",\"\")\n        var s25 = s24.replaceAll(\"\\\\<\",\"\")\n        var s26 = s25.replaceAll(\"\\\\>\",\"\")\n        var s27 = s26.replaceAll(\"\\\\\\\"\",\"\")\n        var s28 = s27.replaceAll(\"\\\\'\",\"\")\n        var s29 = s28.replaceAll(\"\\\\/\",\"\")\n        var s30 = s29.replaceAll(\"\\\\|\",\"\")\n        var s31 = s30.replaceAll(\"\\\\{\",\"\")\n        var s32 = s31.replaceAll(\"\\\\}\",\"\")\n        var s33 = s32.replaceAll(\"\\\\[\",\"\")\n        var s34 = s33.\n    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n    assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"a\")).equals((\"e\")));\n    }\n\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsrotbppc.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsrotbppc.scala:51:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}