name: HumanEval_49_modp
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l), (5l))\n\
  \    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>> modp((0l),\
  \ (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n    // >>> modp((100l),\
  \ (101l))\n    // (1l)\n    def modp(n : Long, p : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
  \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
  \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
  \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
  \ == (3l));\n    }\n\n}\n"
completions: ['        n % p', "        n % p\n    }\n\n    // Return the greatest\
    \ common divisor of a and b.\n    // >>> gcd(3l, 5l)\n    // (1l)\n    // >>>\
    \ gcd(3l, 6l)\n    // (3l)\n    // >>> gcd(3l, 0l)\n    // (1l)\n    // >>> gcd(0l,\
    \ 0l)\n    // (0l)\n    // >>> gcd(0l, 3l)\n    // (1l)\n    // >>> gcd(3l, 3l)\n\
    \    // (3l)\n    def gcd(a : Long, b : Long) : Long = {\n        if (a == 0l)\
    \ {\n            return b\n        } else if (b == 0l) {\n            return a\n\
    \        } else {\n            return gcd(b, a % b)\n        }\n    }\n\n    //\
    \ Return the least common multiple of a and b.\n    // >>> lcm(3l, 5l)\n    //\
    \ (15l)\n    // >>> lcm(3l, 6l)\n    // (18l)\n    // >>> lcm(3l, 0l)\n    //\
    \ (0l)\n    // >>> lcm(0l, 0l)\n    // (0l)\n    // >>> lcm(0l, 3l)\n    // (0l)\n\
    \    // >>> lcm(3l, 3l)\n    // (3l)\n    def lcm(a : Long, b : Long) : Long =\
    \ {\n        return (a * b) / gcd(a, b)\n    }\n\n    // Return the sum of the\
    \ squares of the first n natural numbers.\n    // >>> sum_of_squares(5l)\n   \
    \ // (30l)\n    def sum_of_squares(n : Long) : Long = {\n        n * (n + 1) *\
    \ (2 * n + 1) / 6\n    }\n\n    // Return the sum of the first n natural numbers.\n\
    \    // >>> sum(5l)\n    // (15l)\n    def sum(n : Long) : Long = {\n        n\
    \ * (n + 1) /", "        val nn = n.mod(p)\n        if (nn == 0) {\n         \
    \   nn = p\n        }\n        nn\n    }\n\n    // Return the number of bits in\
    \ n.\n    // >>> bitcount(3l)\n    // 2\n    // >>> bitcount(0l)\n    // 0\n \
    \   // >>> bitcount(-3l)\n    // 2\n    // >>> bitcount(-0l)\n    // 0\n    //\
    \ >>> bitcount(3l)\n    // 2\n    // >>> bitcount(3l)\n    // 2\n    def bitcount(n\
    \ : Long) : Long = {\n        val nn = n.bitCount()\n        if (nn == 0) {\n\
    \            nn = 1\n        }\n        nn\n    }\n\n    // Return the number\
    \ of 1's in n.\n    // >>> bitcount(3l)\n    // 2\n    // >>> bitcount(0l)\n \
    \   // 0\n    // >>> bitcount(-3l)\n    // 2\n    // >>> bitcount(-0l)\n    //\
    \ 0\n    // >>> bitcount(3l)\n    // 2\n    // >>> bitcount(3l)\n    // 2\n  \
    \  def bitcount1(n : Long) : Long = {\n        val nn = n.bitCount()\n       \
    \ if (nn == 0) {\n            nn = 1\n        }\n        nn\n    }\n\n    // Return\
    \ the number of 0's in n.\n    // >>> bitcount(3l)\n    // 2\n    // >>> bitcount(0l)\n\
    \    // 0\n    // >>> bitcount(-3l)\n    // 2\n    // >>> bitcount(-0l)\n    //\
    \ 0\n    // >>> bitcount(3l)\n    // 2\n    // >>> bitcount(3l)\n    // 2\n  \
    \  def bitcount0(n : Long) : Long = {\n        val nn = n.bitCount()\n       \
    \ if (nn == 0) {\n            nn = 1\n        }\n        nn\n    }\n\n    // Return\
    \ the number of 1's in n.\n    // >>> bitcount(3l)\n    // 2\n    // >>> bitcount(0l)\n\
    \    // 0\n    // >>> bit", "        if (n == 0) {\n            0\n        } else\
    \ if (n < 0) {\n            modp(n + p, p)\n        } else {\n            n %\
    \ p\n        }\n    }\n\n    // Return the greatest common divisor of a and b.\n\
    \    // >>> gcd(3, 5)\n    // 1\n    // >>> gcd(3, 6)\n    // 3\n    // >>> gcd(6,\
    \ 9)\n    // 3\n    // >>> gcd(9, 12)\n    // 3\n    // >>> gcd(12, 15)\n    //\
    \ 3\n    // >>> gcd(15, 18)\n    // 3\n    // >>> gcd(18, 21)\n    // 3\n    //\
    \ >>> gcd(21, 24)\n    // 3\n    // >>> gcd(24, 27)\n    // 3\n    // >>> gcd(27,\
    \ 30)\n    // 3\n    // >>> gcd(30, 33)\n    // 3\n    // >>> gcd(33, 36)\n  \
    \  // 3\n    // >>> gcd(36, 39)\n    // 3\n    // >>> gcd(39, 42)\n    // 3\n\
    \    // >>> gcd(42, 45)\n    // 3\n    // >>> gcd(45, 48)\n    // 3\n    // >>>\
    \ gcd(48, 51)\n    // 3\n    // >>> gcd(51, 54)\n    // 3\n    // >>> gcd(54,\
    \ 57)\n    // 3\n    // >>> gcd(57, 60)\n    // 3\n    // >>> gcd(60, 63)\n  \
    \  // 3\n    // >>> gcd(63, 66)\n    // 3\n    // >>> gcd(66, 69)\n    // 3\n\
    \    // >>> gcd(69, 72)\n    // 3\n    // >>> gcd(72, 75)\n    // 3\n    // >>>\
    \ gcd(75, 78)\n    // 3\n    // >>> gcd(78, 81)\n    // 3\n    // >>> gcd(81,\
    \ 84)\n    // 3\n    // >>> gcd(84, 87)\n    // 3\n    // >>> gcd(87, 90)\n  \
    \  ", "        n % p\n    }\n\n    // Return the greatest common divisor of a\
    \ and b.\n    // >>> gcd(3l, 5l)\n    // (1l)\n    // >>> gcd(3l, 6l)\n    //\
    \ (3l)\n    // >>> gcd(3l, 0l)\n    // (1l)\n    // >>> gcd(0l, 0l)\n    // (0l)\n\
    \    // >>> gcd(0l, 3l)\n    // (3l)\n    // >>> gcd(3l, 3l)\n    // (3l)\n  \
    \  def gcd(a : Long, b : Long) : Long = {\n        if (a == 0l) {\n          \
    \  return b\n        } else {\n            return gcd(b % a, a)\n        }\n \
    \   }\n\n    // Return the least common multiple of a and b.\n    // >>> lcm(3l,\
    \ 5l)\n    // (15l)\n    // >>> lcm(3l, 6l)\n    // (18l)\n    // >>> lcm(3l,\
    \ 0l)\n    // (0l)\n    // >>> lcm(0l, 0l)\n    // (0l)\n    // >>> lcm(0l, 3l)\n\
    \    // (0l)\n    // >>> lcm(3l, 3l)\n    // (3l)\n    def lcm(a : Long, b : Long)\
    \ : Long = {\n        return a * b / gcd(a, b)\n    }\n\n    // Return the sum\
    \ of the squares of the first n natural numbers.\n    // >>> sum_of_squares(0l)\n\
    \    // (0l)\n    // >>> sum_of_squares(1l)\n    // (1l)\n    // >>> sum_of_squares(2l)\n\
    \    // (5l)\n    // >>> sum_of_squares(3l)\n    // (14l)\n    def sum_of_squares(n\
    \ : Long) : Long = {\n        n * (n + 1) / 2\n    }\n\n    // Return the sum\
    \ of the first n natural numbers.\n    ", "        return (n % p) + p\n    }\n\
    \n    // Return the greatest common divisor of a and b.\n    // >>> gcd(3l, 5l)\n\
    \    // (1l)\n    // >>> gcd(11l, 101l)\n    // (1l)\n    // >>> gcd(0l, 101l)\n\
    \    // (101l)\n    // >>> gcd(3l, 11l)\n    // (1l)\n    // >>> gcd(100l, 101l)\n\
    \    // (1l)\n    def gcd(a : Long, b : Long) : Long = {\n        if (a == 0)\
    \ {\n            return b\n        } else {\n            return gcd(b % a, a)\n\
    \        }\n    }\n\n    // Return the least common multiple of a and b.\n   \
    \ // >>> lcm(3l, 5l)\n    // (15l)\n    // >>> lcm(11l, 101l)\n    // (101l)\n\
    \    // >>> lcm(0l, 101l)\n    // (0l)\n    // >>> lcm(3l, 11l)\n    // (3l)\n\
    \    // >>> lcm(100l, 101l)\n    // (100l)\n    def lcm(a : Long, b : Long) :\
    \ Long = {\n        return a * b / gcd(a, b)\n    }\n\n    // Return the sum of\
    \ a and b.\n    // >>> add(3l, 5l)\n    // (8l)\n    // >>> add(11l, 101l)\n \
    \   // (112l)\n    // >>> add(0l, 101l)\n    // (101l)\n    // >>> add(3l, 11l)\n\
    \    // (14l)\n    // >>> add(100l, 101l)\n    // (101l)\n    def add(a : Long,\
    \ b : Long) : Long = {\n        return a + b\n    }\n\n    // Return the product\
    \ of a and b.\n    // >>> mult(3l, 5l)\n    // (15l)\n    // >>> mult(11l, 101l)\n\
    \    // (112l)\n    ", "        if (n < 0l) {\n            throw new IllegalArgumentException(\"\
    n must be >= 0\")\n        }\n        if (p < 0l) {\n            throw new IllegalArgumentException(\"\
    p must be >= 0\")\n        }\n        if (p == 0l) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0l) {\n            return 0l\n \
    \       }\n        return (n * (n - 1l) / 2l) % p", '        n % p', "       \
    \ if (n < 0) {\n            throw new IllegalArgumentException(\"n < 0\")\n  \
    \      }\n        if (p < 0) {\n            throw new IllegalArgumentException(\"\
    p < 0\")\n        }\n        if (p == 0) {\n            throw new IllegalArgumentException(\"\
    p == 0\")\n        }\n        if (n == 0) {\n            return 0l\n        }\n\
    \        return (n * (n - 1) / 2) % p", "        n % p\n    }\n\n    // Return\
    \ the greatest common divisor of a and b.\n    // >>> gcd((3l), (5l))\n    //\
    \ (1l)\n    // >>> gcd((1101l), (101l))\n    // (1l)\n    // >>> gcd((0l), (101l))\n\
    \    // (101l)\n    // >>> gcd((3l), (11l))\n    // (1l)\n    // >>> gcd((100l),\
    \ (101l))\n    // (101l)\n    def gcd(a : Long, b : Long) : Long = {\n       \
    \ if (a == 0) {\n            return b\n        } else {\n            return gcd(b\
    \ % a, a)\n        }\n    }\n\n    // Return the least common multiple of a and\
    \ b.\n    // >>> lcm((3l), (5l))\n    // (15l)\n    // >>> lcm((1101l), (101l))\n\
    \    // (101l)\n    // >>> lcm((0l), (101l))\n    // (0l)\n    // >>> lcm((3l),\
    \ (11l))\n    // (33l)\n    // >>> lcm((100l), (101l))\n    // (101l)\n    def\
    \ lcm(a : Long, b : Long) : Long = {\n        return a * b / gcd(a, b)\n    }\n\
    \n    // Return the sum of the squares of the digits of n.\n    // >>> sum_of_squares(123456789l)\n\
    \    // (1l)\n    // >>> sum_of_squares(0l)\n    // (0l)\n    // >>> sum_of_squares(123456789l)\n\
    \    // (1l)\n    def sum_of_squares(n : Long) : Long = {\n        return n *\
    \ (n + 1) / 2\n    }\n\n    // Return the sum of the digits of n.\n    // >>>\
    \ sum_of_digits(123456789l)\n    // (9l)\n    // >>> sum_of_digits(0l)\n    //\
    \ (0l)\n    ", "        val m = n % p\n        if (m < 0) {\n            m +=\
    \ p\n        }\n        return m\n    }\n\n    // Return the greatest common divisor\
    \ of a and b.\n    // >>> gcd(3l, 5l)\n    // 1l\n    // >>> gcd(3l, 6l)\n   \
    \ // 3l\n    // >>> gcd(3l, 0l)\n    // 3l\n    // >>> gcd(0l, 0l)\n    // 0l\n\
    \    // >>> gcd(0l, 3l)\n    // 3l\n    // >>> gcd(3l, -3l)\n    // 3l\n    //\
    \ >>> gcd(-3l, 3l)\n    // 3l\n    // >>> gcd(-3l, -3l)\n    // 1l\n    def gcd(a\
    \ : Long, b : Long) : Long = {\n        if (b == 0l) {\n            return a\n\
    \        } else {\n            return gcd(b, a % b)\n        }\n    }\n\n    //\
    \ Return the least common multiple of a and b.\n    // >>> lcm(3l, 5l)\n    //\
    \ 15l\n    // >>> lcm(3l, 6l)\n    // 18l\n    // >>> lcm(3l, 0l)\n    // 0l\n\
    \    // >>> lcm(0l, 0l)\n    // 0l\n    // >>> lcm(0l, 3l)\n    // 0l\n    //\
    \ >>> lcm(3l, -3l)\n    // -3l\n    // >>> lcm(-3l, 3l)\n    // -3l\n    // >>>\
    \ lcm(-3l, -3l)\n    // 0l\n    def lcm(a : Long, b : Long) : Long = {\n     \
    \   return (a * b) / gcd(a, b)\n    }\n\n    // Return the sum of a and b.\n \
    \   // >>> add(3l, 5l)\n    // 8l\n    // >>> add(3l, 6l)\n    // 9l\n    // >>>\
    \ add(3l, 0l)\n    // 3l\n    // >>> add", "        if (n < 0l) {\n          \
    \  throw new IllegalArgumentException(\"n must be >= 0\")\n        }\n       \
    \ if (p < 0l) {\n            throw new IllegalArgumentException(\"p must be >=\
    \ 0\")\n        }\n        if (p == 0l) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0l) {\n            return 0l\n \
    \       }\n        return (n * (n % p)) % p", "        if (n == 0) {\n       \
    \     0l\n        } else {\n            n % p\n        }\n    }\n\n    // Return\
    \ the number of 1's in the binary representation of n.\n    // >>> countBits(0l)\n\
    \    // 0\n    // >>> countBits(1l)\n    // 1\n    // >>> countBits(2l)\n    //\
    \ 2\n    // >>> countBits(3l)\n    // 2\n    // >>> countBits(4l)\n    // 3\n\
    \    // >>> countBits(5l)\n    // 3\n    // >>> countBits(6l)\n    // 4\n    //\
    \ >>> countBits(7l)\n    // 4\n    // >>> countBits(8l)\n    // 5\n    // >>>\
    \ countBits(9l)\n    // 5\n    // >>> countBits(10l)\n    // 6\n    // >>> countBits(11l)\n\
    \    // 6\n    // >>> countBits(12l)\n    // 7\n    // >>> countBits(13l)\n  \
    \  // 7\n    // >>> countBits(14l)\n    // 8\n    // >>> countBits(15l)\n    //\
    \ 8\n    // >>> countBits(16l)\n    // 9\n    // >>> countBits(17l)\n    // 9\n\
    \    // >>> countBits(18l)\n    // 10\n    // >>> countBits(19l)\n    // 10\n\
    \    // >>> countBits(20l)\n    // 11\n    // >>> countBits(21l)\n    // 11\n\
    \    // >>> countBits(22l)\n    // 12\n    // >>> countBits(23l)\n    // 12\n\
    \    // >>> countBits(24l)\n    // 13\n    // >>> countBits(25l)\n    // 13\n\
    \    // >>> countBits(26l)\n    // 14\n    // >>> countBits(27l)\n    // 14\n\
    \    // >>> countBits(28l)\n    // 15\n    // >>> countBits(29l)\n    // 15\n\
    \    // >>> countBits(30l)\n    // 16\n    //", '        n % p', "        val\
    \ nn = n.mod(p)\n        if (nn.isZero()) nn = p\n        nn\n    }\n\n    //\
    \ Return the greatest common divisor of a and b.\n    // >>> gcd((3l), (5l))\n\
    \    // (1l)\n    // >>> gcd((1101l), (101l))\n    // (1l)\n    // >>> gcd((0l),\
    \ (101l))\n    // (101l)\n    // >>> gcd((3l), (11l))\n    // (1l)\n    // >>>\
    \ gcd((100l), (101l))\n    // (1l)\n    def gcd(a : Long, b : Long) : Long = {\n\
    \        val aa = a.abs()\n        val bb = b.abs()\n        if (aa.equals(bb))\
    \ {\n            if (aa.equals(0l)) return bb\n            else return aa\n  \
    \      }\n        val q = aa.div(bb)\n        val r = aa.mod(bb)\n        if (r.equals(0l))\
    \ return bb\n        else return gcd(bb, r)\n    }\n\n    // Return the least\
    \ common multiple of a and b.\n    // >>> lcm((3l), (5l))\n    // (15l)\n    //\
    \ >>> lcm((1101l), (101l))\n    // (101l)\n    // >>> lcm((0l), (101l))\n    //\
    \ (0l)\n    // >>> lcm((3l), (11l))\n    // (11l)\n    // >>> lcm((100l), (101l))\n\
    \    // (100l)\n    def lcm(a : Long, b : Long) : Long = {\n        val aa = a.abs()\n\
    \        val bb = b.abs()\n        if (aa.equals(bb)) {\n            if (aa.equals(0l))\
    \ return aa\n            else return aa\n        }\n        val q = aa.div(bb)\n\
    \        val r = aa.mod(bb)\n        if (r.equals(0l)) return bb\n        ", " \
    \       if (n < 0) {\n            throw new RuntimeException(\"Negative number\"\
    )\n        }\n        if (p < 0) {\n            throw new RuntimeException(\"\
    Negative number\")\n        }\n        if (p == 0) {\n            throw new RuntimeException(\"\
    Zero modulus\")\n        }\n        if (n == 0) {\n            return 0l\n   \
    \     }\n        return (n * (n % p)) % p\n    }\n\n    // Return the sum of the\
    \ squares of the first n natural numbers.\n    // >>> sum_of_squares(5)\n    //\
    \ 55\n    // >>> sum_of_squares(10)\n    // 385\n    // >>> sum_of_squares(100)\n\
    \    // 1025\n    def sum_of_squares(n : Int) : Int = {\n        if (n < 0) {\n\
    \            throw new RuntimeException(\"Negative number\")\n        }\n    \
    \    if (n == 0) {\n            return 0\n        }\n        return (n * (n +\
    \ 1) * (2 * n + 1)) / 6\n    }\n\n    // Return the sum of the squares of the\
    \ first n natural numbers.\n    // >>> sum_of_cubes(5)\n    // 125\n    // >>>\
    \ sum_of_cubes(10)\n    // 15125\n    // >>> sum_of_cubes(100)\n    // 15625\n\
    \    def sum_of_cubes(n : Int) : Int = {\n        if (n < 0) {\n            throw\
    \ new RuntimeException(\"Negative number\")\n        }\n        if (n == 0) {\n\
    \            return 0\n        }\n        return (n * (n + 1) * (2 * n + 1)) /\
    \ 6\n    }\n\n    // Return the sum of the first n natural numbers.\n    // >>>\
    \ sum(5)\n    // 55\n    // >>> sum(10)\n    // 55\n    // >>> sum(100)\n    //\
    \ 55\n    def sum(n : Int) : Int = {\n        if (n < 0) {\n            throw\
    \ new RuntimeException(\"Negative number\")\n        }\n        if (n == 0) {\n\
    \            return 0\n        }\n        return (n * (n + 1)", "        val m\
    \ = n % p\n        if (m < 0) {\n            m += p\n        }\n        return\
    \ m\n    }\n\n    // Return the number of 1s in the binary representation of n.\n\
    \    // >>> count1s(0l)\n    // 0\n    // >>> count1s(1l)\n    // 1\n    // >>>\
    \ count1s(2l)\n    // 2\n    // >>> count1s(3l)\n    // 3\n    // >>> count1s(4l)\n\
    \    // 4\n    // >>> count1s(5l)\n    // 5\n    // >>> count1s(6l)\n    // 6\n\
    \    // >>> count1s(7l)\n    // 7\n    // >>> count1s(8l)\n    // 8\n    // >>>\
    \ count1s(9l)\n    // 9\n    // >>> count1s(10l)\n    // 10\n    // >>> count1s(11l)\n\
    \    // 11\n    // >>> count1s(12l)\n    // 12\n    // >>> count1s(13l)\n    //\
    \ 13\n    // >>> count1s(14l)\n    // 14\n    // >>> count1s(15l)\n    // 15\n\
    \    def count1s(n : Long) : Long = {\n        val m = n % 2\n        if (m <\
    \ 0) {\n            m += 2\n        }\n        return m\n    }\n\n    // Return\
    \ the number of 0s in the binary representation of n.\n    // >>> count0s(0l)\n\
    \    // 0\n    // >>> count0s(1l)\n    // 1\n    // >>> count0s(2l)\n    // 2\n\
    \    // >>> count0s(3l)\n    // 3\n    // >>> count0s(4l)\n    // 4\n    // >>>\
    \ count0s(5l)\n    // 5\n    // >>> count0s(6l)\n    // 6\n    // >>> count0s(7l)\n\
    \    // 7\n    // >>> count0s(8l)\n    // 8\n    // >>> count0s(9l)\n    // 9\n\
    \    // >>> count0s(10l)\n", "        val nn = n.mod(p)\n        if (nn == 0)\
    \ {\n            nn = p\n        }\n        return nn\n    }\n\n    // Return\
    \ the number of 1s in the binary representation of n.\n    // >>> countBits(0l)\n\
    \    // 0\n    // >>> countBits(1l)\n    // 1\n    // >>> countBits(2l)\n    //\
    \ 2\n    // >>> countBits(3l)\n    // 3\n    // >>> countBits(4l)\n    // 3\n\
    \    // >>> countBits(5l)\n    // 4\n    // >>> countBits(6l)\n    // 4\n    //\
    \ >>> countBits(7l)\n    // 5\n    // >>> countBits(8l)\n    // 5\n    // >>>\
    \ countBits(9l)\n    // 6\n    // >>> countBits(10l)\n    // 6\n    // >>> countBits(11l)\n\
    \    // 7\n    // >>> countBits(12l)\n    // 7\n    // >>> countBits(13l)\n  \
    \  // 8\n    // >>> countBits(14l)\n    // 8\n    // >>> countBits(15l)\n    //\
    \ 9\n    // >>> countBits(16l)\n    // 9\n    // >>> countBits(17l)\n    // 10\n\
    \    // >>> countBits(18l)\n    // 10\n    // >>> countBits(19l)\n    // 11\n\
    \    // >>> countBits(20l)\n    // 11\n    // >>> countBits(21l)\n    // 12\n\
    \    // >>> countBits(22l)\n    // 12\n    // >>> countBits(23l)\n    // 13\n\
    \    // >>> countBits(24l)\n    // 13\n    // >>> countBits(25l)\n    // 14\n\
    \    // >>> countBits(26l)\n    // 14\n    // >>> countBits(27l)\n    // 15\n\
    \    // >>> countBits(28l)\n    // 15\n    // >>> countBits(29l)\n    // 16\n\
    \    // >>> countBits(30l", "        if (n < 0l) {\n            throw new IllegalArgumentException(\"\
    n must be >= 0\")\n        }\n        if (p < 0l) {\n            throw new IllegalArgumentException(\"\
    p must be >= 0\")\n        }\n        if (p == 0l) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        return (n % p)\n    }\n\n    // Return the\
    \ greatest common divisor of a and b.\n    // >>> gcd((3l), (5l))\n    // (1l)\n\
    \    // >>> gcd((1101l), (101l))\n    // (1l)\n    // >>> gcd((0l), (101l))\n\
    \    // (101l)\n    // >>> gcd((3l), (11l))\n    // (1l)\n    // >>> gcd((100l),\
    \ (101l))\n    // (1l)\n    def gcd(a : Long, b : Long) : Long = {\n        if\
    \ (a < 0l) {\n            throw new IllegalArgumentException(\"a must be >= 0\"\
    )\n        }\n        if (b < 0l) {\n            throw new IllegalArgumentException(\"\
    b must be >= 0\")\n        }\n        if (b == 0l) {\n            throw new IllegalArgumentException(\"\
    b must be > 0\")\n        }\n        return (a % b)\n    }\n\n    // Return the\
    \ least common multiple of a and b.\n    // >>> lcm((3l), (5l))\n    // (15l)\n\
    \    // >>> lcm((1101l), (101l))\n    // (101l)\n    // >>> lcm((0l), (101l))\n\
    \    // (0l)\n    // >>> lcm((3l), (11l))\n    // (3l)\n    // >>> lcm((100l),\
    \ (101l))\n    // (100l)\n    def lcm(a : Long, b : Long) : Long = {\n       \
    \ if (a < 0l) {\n            throw new IllegalArgumentException(\"a must be >=\
    \ 0\")\n        }\n        if (b < 0l) {\n            throw new IllegalArgumentException(\"",
  "        if (n < 0l) {\n            throw new IllegalArgumentException(\"n must\
    \ be non-negative\")\n        }\n        if (p < 0l) {\n            throw new\
    \ IllegalArgumentException(\"p must be non-negative\")\n        }\n        if\
    \ (p == 0l) {\n            throw new IllegalArgumentException(\"p must be non-zero\"\
    )\n        }\n        return (n % p)\n    }\n\n    // Return the greatest common\
    \ divisor of a and b.\n    // >>> gcd((3l), (5l))\n    // (1l)\n    // >>> gcd((1101l),\
    \ (101l))\n    // (1l)\n    // >>> gcd((0l), (101l))\n    // (101l)\n    // >>>\
    \ gcd((3l), (11l))\n    // (1l)\n    // >>> gcd((100l), (101l))\n    // (1l)\n\
    \    def gcd(a : Long, b : Long) : Long = {\n        if (a < 0l) {\n         \
    \   throw new IllegalArgumentException(\"a must be non-negative\")\n        }\n\
    \        if (b < 0l) {\n            throw new IllegalArgumentException(\"b must\
    \ be non-negative\")\n        }\n        if (a == 0l) {\n            return b\n\
    \        }\n        if (b == 0l) {\n            return a\n        }\n        return\
    \ gcd(b, a % b)\n    }\n\n    // Return the least common multiple of a and b.\n\
    \    // >>> lcm((3l), (5l))\n    // (15l)\n    // >>> lcm((1101l), (101l))\n \
    \   // (101l)\n    // >>> lcm((0l), (101l))\n    // (0l)\n    // >>> lcm((3l),\
    \ (11l))\n    // (11l)\n    // >>> lcm((100l), (101l))\n    // (100l)\n    def\
    \ lcm(a : Long, b : Long) : Long = {\n        if (a < 0l) {\n            throw\
    \ new IllegalArgumentException(\"a must be non-negative\")\n        }\n      \
    \  if", "        if (n < 0l) {\n            throw new IllegalArgumentException(\"\
    n must be >= 0\")\n        }\n        if (p < 0l) {\n            throw new IllegalArgumentException(\"\
    p must be >= 0\")\n        }\n        if (p == 0l) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0l) {\n            return 0l\n \
    \       }\n        return (n % p) + (n / p) * (p - 1l)", "        n % p\n    }\n\
    \n    // Return the greatest common divisor of a and b.\n    // >>> gcd(3l, 5l)\n\
    \    // 5l\n    // >>> gcd(3l, 6l)\n    // 3l\n    // >>> gcd(3l, 0l)\n    //\
    \ 3l\n    // >>> gcd(0l, 0l)\n    // 0l\n    // >>> gcd(3l, -3l)\n    // 3l\n\
    \    // >>> gcd(-3l, 0l)\n    // 3l\n    // >>> gcd(-3l, -3l)\n    // -3l\n  \
    \  // >>> gcd(-3l, 3l)\n    // 3l\n    // >>> gcd(3l, 3l)\n    // 3l\n    def\
    \ gcd(a : Long, b : Long) : Long = {\n        if (b == 0l) {\n            return\
    \ a\n        } else {\n            return gcd(b, a % b)\n        }\n    }\n\n\
    \    // Return the least common multiple of a and b.\n    // >>> lcm(3l, 5l)\n\
    \    // 15l\n    // >>> lcm(3l, 6l)\n    // 18l\n    // >>> lcm(3l, 0l)\n    //\
    \ 0l\n    // >>> lcm(0l, 0l)\n    // 0l\n    // >>> lcm(3l, -3l)\n    // -3l\n\
    \    // >>> lcm(-3l, 0l)\n    // 0l\n    // >>> lcm(-3l, -3l)\n    // -3l\n  \
    \  // >>> lcm(-3l, 3l)\n    // -3l\n    // >>> lcm(3l, 3l)\n    // 3l\n    def\
    \ lcm(a : Long, b : Long) : Long = {\n        return a * b / gcd(a, b)\n    }\n\
    \n    // Return the least common multiple of a and b.\n    // >>> lcm(3l, 5l)\n\
    \    // 15l\n    // >>> lcm(3l, 6l)\n    // 18l\n    // >>> lcm", "        val\
    \ nn = n.toInt\n        val pp = p.toInt\n        if (nn < 0) {\n            throw\
    \ new IllegalArgumentException(\"n must be >= 0\")\n        }\n        if (pp\
    \ < 0) {\n            throw new IllegalArgumentException(\"p must be >= 0\")\n\
    \        }\n        if (nn >= pp) {\n            throw new IllegalArgumentException(\"\
    n must be < p\")\n        }\n        val r = nn % pp\n        if (r == 0) {\n\
    \            return nn\n        } else {\n            return r\n        }\n  \
    \  }\n\n    // Return the greatest common divisor of a and b.\n    // >>> gcd((3l),\
    \ (5l))\n    // (1l)\n    // >>> gcd((1101l), (101l))\n    // (1l)\n    // >>>\
    \ gcd((0l), (101l))\n    // (1l)\n    // >>> gcd((3l), (11l))\n    // (1l)\n \
    \   // >>> gcd((100l), (101l))\n    // (1l)\n    def gcd(a : Long, b : Long) :\
    \ Long = {\n        val aa = a.toInt\n        val bb = b.toInt\n        if (aa\
    \ < 0) {\n            throw new IllegalArgumentException(\"a must be >= 0\")\n\
    \        }\n        if (bb < 0) {\n            throw new IllegalArgumentException(\"\
    b must be >= 0\")\n        }\n        if (aa >= bb) {\n            throw new IllegalArgumentException(\"\
    a must be < b\")\n        }\n        val r = aa % bb\n        if (r == 0) {\n\
    \            return bb\n        } else {\n            return r\n        }\n  \
    \  }\n\n    // Return the least common multiple of a and b.\n    // >>> lcm((3l),\
    \ (5l))\n    // (15l)\n    // >>> lcm((1101l), (101l))\n    // (101l)\n    //\
    \ >>> lcm((0l), (101l))\n    // (0l)\n    // >>> lcm((3l), (11l))\n    // (",
  '        n % p', "        val nn = n.mod(p)\n        if (nn == 0) {\n          \
    \  nn = p\n        }\n        return nn\n    }\n\n    // Return the greatest common\
    \ divisor of a and b.\n    // >>> gcd(5l, 3l)\n    // (1l)\n    // >>> gcd(5l,\
    \ 15l)\n    // (5l)\n    // >>> gcd(15l, 5l)\n    // (5l)\n    // >>> gcd(15l,\
    \ 15l)\n    // (15l)\n    def gcd(a : Long, b : Long) : Long = {\n        if (a\
    \ == 0) {\n            return b\n        } else {\n            return gcd(b %\
    \ a, a)\n        }\n    }\n\n    // Return the least common multiple of a and\
    \ b.\n    // >>> lcm(5l, 3l)\n    // (15l)\n    // >>> lcm(5l, 15l)\n    // (15l)\n\
    \    // >>> lcm(15l, 5l)\n    // (15l)\n    // >>> lcm(15l, 15l)\n    // (15l)\n\
    \    def lcm(a : Long, b : Long) : Long = {\n        return a * b / gcd(a, b)\n\
    \    }\n\n    // Return the sum of the squares of the first n natural numbers.\n\
    \    // >>> sum_of_squares(5l)\n    // (30l)\n    // >>> sum_of_squares(10l)\n\
    \    // (385l)\n    def sum_of_squares(n : Long) : Long = {\n        return n\
    \ * (n + 1) * (2 * n + 1) / 6\n    }\n\n    // Return the sum of the first n natural\
    \ numbers.\n    // >>> sum(5l)\n    // (15l)\n    // >>> sum(10l)\n    // (55l)\n\
    \    def sum(n : Long) : Long = {\n        return n * (n + 1) / 2\n    }\n\n \
    \   // Return the sum of the first n natural numbers modulo p.\n    // >>> sum_modp(5l",
  "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be\
    \ non-negative\")\n        }\n        if (p < 0) {\n            throw new IllegalArgumentException(\"\
    p must be non-negative\")\n        }\n        if (p == 0) {\n            throw\
    \ new IllegalArgumentException(\"p must be non-zero\")\n        }\n        if\
    \ (n == 0) {\n            return 0l\n        }\n        return (n * (n - 1) /\
    \ 2) % p", "        if (n % p == 0) {\n            n\n        } else {\n     \
    \       n + p - (n % p)\n        }", "        n % p\n    }\n\n    // Return the\
    \ sum of the squares of the digits of n.\n    // >>> sumDigitsSquares(12345l)\n\
    \    // 15\n    // >>> sumDigitsSquares(123456l)\n    // 16\n    // >>> sumDigitsSquares(1234567l)\n\
    \    // 17\n    // >>> sumDigitsSquares(12345678l)\n    // 18\n    // >>> sumDigitsSquares(123456789l)\n\
    \    // 19\n    def sumDigitsSquares(n : Long) : Long = {\n        n % 1l\n  \
    \  }\n\n    // Return the sum of the digits of n.\n    // >>> sumDigits(12345l)\n\
    \    // 5\n    // >>> sumDigits(123456l)\n    // 6\n    // >>> sumDigits(1234567l)\n\
    \    // 7\n    // >>> sumDigits(12345678l)\n    // 8\n    // >>> sumDigits(123456789l)\n\
    \    // 9\n    def sumDigits(n : Long) : Long = {\n        n % 1l\n    }\n\n \
    \   // Return the sum of the digits of n.\n    // >>> sumDigits(12345l)\n    //\
    \ 5\n    // >>> sumDigits(123456l)\n    // 6\n    // >>> sumDigits(1234567l)\n\
    \    // 7\n    // >>> sumDigits(12345678l)\n    // 8\n    // >>> sumDigits(123456789l)\n\
    \    // 9\n    def sumDigits(n : Long) : Long = {\n        n % 1l\n    }\n\n \
    \   // Return the sum of the digits of n.\n    // >>> sumDigits(12345l)\n    //\
    \ 5\n    // >>> sumDigits(123456l)\n    // 6\n    // >>> sumDigits(1234567l)\n\
    \    // 7\n    // >>> sumDigits(12345678l)\n    // 8\n    // >>> sumDigits(123456789l)\n\
    \    // 9\n    def sumDigits(n : Long) : Long = {\n        n % 1l\n    }\n\n \
    \   // Return the sum of the digits of", "        if (n < 0) {\n            throw\
    \ new IllegalArgumentException(\"n must be >= 0\")\n        }\n        if (p <\
    \ 0) {\n            throw new IllegalArgumentException(\"p must be >= 0\")\n \
    \       }\n        if (p == 0) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0) {\n            return 0l\n  \
    \      }\n        return (n % p) + (n / p) * (p - 1l)", "        if (n < 0l) {\n\
    \            throw new RuntimeException(\"Negative number\")\n        }\n    \
    \    if (p < 0l) {\n            throw new RuntimeException(\"Negative number\"\
    )\n        }\n        if (p == 0l) {\n            throw new RuntimeException(\"\
    Zero modulus\")\n        }\n        return (n % p)\n    }\n\n    // Return the\
    \ greatest common divisor of a and b.\n    // >>> gcd((3l), (5l))\n    // (1l)\n\
    \    // >>> gcd((1101l), (101l))\n    // (1l)\n    // >>> gcd((0l), (101l))\n\
    \    // (101l)\n    // >>> gcd((3l), (11l))\n    // (1l)\n    // >>> gcd((100l),\
    \ (101l))\n    // (101l)\n    def gcd(a : Long, b : Long) : Long = {\n       \
    \ if (a < 0l) {\n            throw new RuntimeException(\"Negative number\")\n\
    \        }\n        if (b < 0l) {\n            throw new RuntimeException(\"Negative\
    \ number\")\n        }\n        if (a == 0l) {\n            return b\n       \
    \ }\n        if (b == 0l) {\n            return a\n        }\n        return gcd(b,\
    \ a % b)\n    }\n\n    // Return the least common multiple of a and b.\n    //\
    \ >>> lcm((3l), (5l))\n    // (15l)\n    // >>> lcm((1101l), (101l))\n    // (101l)\n\
    \    // >>> lcm((0l), (101l))\n    // (0l)\n    // >>> lcm((3l), (11l))\n    //\
    \ (11l)\n    // >>> lcm((100l), (101l))\n    // (100l)\n    def lcm(a : Long,\
    \ b : Long) : Long = {\n        if (a < 0l) {\n            throw new RuntimeException(\"\
    Negative number\")\n        }\n        if (b < 0l) {\n            throw new RuntimeException(\"\
    Negative number\")\n        }\n        if (a == 0l)", "        if (n < 0) {\n\
    \            throw new IllegalArgumentException(\"n < 0\")\n        }\n      \
    \  if (p < 0) {\n            throw new IllegalArgumentException(\"p < 0\")\n \
    \       }\n        if (p == 0) {\n            throw new IllegalArgumentException(\"\
    p == 0\")\n        }\n        if (n == 0) {\n            return 0l\n        }\n\
    \        return (n * n) % p\n    }\n\n    // Return the greatest common divisor\
    \ of a and b.\n    // >>> gcd(3l, 5l)\n    // 5l\n    // >>> gcd(3l, 0l)\n   \
    \ // 3l\n    // >>> gcd(0l, 0l)\n    // 0l\n    // >>> gcd(3l, -5l)\n    // 5l\n\
    \    // >>> gcd(-3l, 5l)\n    // 1l\n    // >>> gcd(-3l, -5l)\n    // 5l\n   \
    \ // >>> gcd(3l, -5l)\n    // 1l\n    // >>> gcd(-3l, -5l)\n    // 5l\n    //\
    \ >>> gcd(0l, -5l)\n    // 5l\n    // >>> gcd(-3l, 0l)\n    // 3l\n    // >>>\
    \ gcd(0l, 0l)\n    // 0l\n    def gcd(a : Long, b : Long) : Long = {\n       \
    \ if (a < 0) {\n            throw new IllegalArgumentException(\"a < 0\")\n  \
    \      }\n        if (b < 0) {\n            throw new IllegalArgumentException(\"\
    b < 0\")\n        }\n        if (a == 0) {\n            return b\n        }\n\
    \        if (b == 0) {\n            return a\n        }\n        return gcd(b,\
    \ a % b)\n    }\n\n    // Return the least common multiple of a and b.\n    //\
    \ >>> lcm(3l, 5l)\n    // 15l\n    // >>> lcm(3l, 0l)\n    // 0l\n    // >>> lcm(0l,\
    \ 0l)\n    // 0l\n    // >>> lcm(3", '        n % p', '        n % p', "     \
    \   if (n < 0) {\n            throw new RuntimeException(\"Negative modulo\")\n\
    \        }\n        if (p < 0) {\n            throw new RuntimeException(\"Negative\
    \ modulo\")\n        }\n        if (p == 0) {\n            throw new RuntimeException(\"\
    Zero modulo\")\n        }\n        if (n == 0) {\n            return 0l\n    \
    \    }\n        return (n % p) + (n / p) * (p - 1l)\n    }\n\n    // Return the\
    \ greatest common divisor of a and b.\n    // >>> gcd((3l), (5l))\n    // (1l)\n\
    \    // >>> gcd((1101l), (101l))\n    // (1l)\n    // >>> gcd((0l), (101l))\n\
    \    // (101l)\n    // >>> gcd((3l), (11l))\n    // (1l)\n    // >>> gcd((100l),\
    \ (101l))\n    // (101l)\n    def gcd(a : Long, b : Long) : Long = {\n       \
    \ if (a < 0) {\n            throw new RuntimeException(\"Negative modulo\")\n\
    \        }\n        if (b < 0) {\n            throw new RuntimeException(\"Negative\
    \ modulo\")\n        }\n        if (a == 0) {\n            return b\n        }\n\
    \        if (b == 0) {\n            return a\n        }\n        return gcd(b,\
    \ a % b)\n    }\n\n    // Return the least common multiple of a and b.\n    //\
    \ >>> lcm((3l), (5l))\n    // (15l)\n    // >>> lcm((1101l), (101l))\n    // (101l)\n\
    \    // >>> lcm((0l), (101l))\n    // (0l)\n    // >>> lcm((3l), (11l))\n    //\
    \ (11l)\n    // >>> lcm((100l), (101l))\n    // (100l)\n    def lcm(a : Long,\
    \ b : Long) : Long = {\n        if (a < 0) {\n            throw new RuntimeException(\"\
    Negative modulo\")\n        }\n        if (b <", "        if (n < 0) {\n     \
    \       throw new IllegalArgumentException(\"n < 0\")\n        }\n        if (p\
    \ < 0) {\n            throw new IllegalArgumentException(\"p < 0\")\n        }\n\
    \        if (p == 0) {\n            throw new IllegalArgumentException(\"p ==\
    \ 0\")\n        }\n        if (n == 0) {\n            return 0l\n        }\n \
    \       return (n * n) % p", "        if (n == 0l) {\n            0l\n       \
    \ } else {\n            (n * 2l) % p\n        }\n    }\n\n    // Return the sum\
    \ of the squares of the first n natural numbers.\n    // >>> sum_of_squares(5)\n\
    \    // 55\n    // >>> sum_of_squares(10)\n    // 385\n    // >>> sum_of_squares(100)\n\
    \    // 1025\n    // >>> sum_of_squares(1000)\n    // 1025\n    def sum_of_squares(n\
    \ : Int) : Int = {\n        if (n == 0) {\n            0\n        } else {\n \
    \           (n * n) + sum_of_squares(n - 1)\n        }\n    }\n\n    // Return\
    \ the sum of the squares of the first n natural numbers.\n    // >>> sum_of_cubes(5)\n\
    \    // 125\n    // >>> sum_of_cubes(10)\n    // 15125\n    // >>> sum_of_cubes(100)\n\
    \    // 1025\n    // >>> sum_of_cubes(1000)\n    // 1025\n    def sum_of_cubes(n\
    \ : Int) : Int = {\n        if (n == 0) {\n            0\n        } else {\n \
    \           (n * n * n) + sum_of_cubes(n - 1)\n        }", "        if (n == 0)\
    \ {\n            0\n        } else if (n < 0) {\n            modp(-n, p)\n   \
    \     } else if (n > p) {\n            n % p\n        } else {\n            n\n\
    \        }\n    }\n\n    // Return the greatest common divisor of a and b.\n \
    \   // >>> gcd(5l, 10l)\n    // (5l)\n    // >>> gcd(5l, 15l)\n    // (5l)\n \
    \   // >>> gcd(15l, 5l)\n    // (5l)\n    // >>> gcd(0l, 5l)\n    // (5l)\n  \
    \  // >>> gcd(15l, 0l)\n    // (15l)\n    // >>> gcd(15l, 15l)\n    // (15l)\n\
    \    def gcd(a : Long, b : Long) : Long = {\n        if (a == 0) {\n         \
    \   b\n        } else if (b == 0) {\n            a\n        } else {\n       \
    \     gcd(b, a % b)\n        }\n    }\n\n    // Return the least common multiple\
    \ of a and b.\n    // >>> lcm(5l, 10l)\n    // (10l)\n    // >>> lcm(5l, 15l)\n\
    \    // (15l)\n    // >>> lcm(15l, 5l)\n    // (15l)\n    // >>> lcm(0l, 5l)\n\
    \    // (0l)\n    // >>> lcm(15l, 0l)\n    // (15l)\n    // >>> lcm(15l, 15l)\n\
    \    // (15l)\n    def lcm(a : Long, b : Long) : Long = {\n        if (a == 0)\
    \ {\n            0\n        } else if (b == 0) {\n            0\n        } else\
    \ {\n            a * b / gcd(a, b)\n        }\n    }\n\n    // Return the sum\
    \ of the squares of the first n natural numbers.\n    // >>> sum_of_squares(5)\n\
    \    // (30l)\n    // >>> sum_of_squares(10)", "        n % p\n    }\n\n    //\
    \ Return the sum of the squares of the first n natural numbers.\n    // >>> sum_of_squares(10)\n\
    \    // 385\n    // >>> sum_of_squares(100)\n    // 1025\n    // >>> sum_of_squares(1000)\n\
    \    // 1365\n    def sum_of_squares(n : Int) : Int = {\n        n * (n + 1) /\
    \ 2\n    }\n\n    // Return the sum of the squares of the first n natural numbers.\n\
    \    // >>> sum_of_cubes(10)\n    // 385\n    // >>> sum_of_cubes(100)\n    //\
    \ 1025\n    // >>> sum_of_cubes(1000)\n    // 1365\n    def sum_of_cubes(n : Int)\
    \ : Int = {\n        n * (n + 1) * (n + 2) / 6\n    }\n\n    // Return the sum\
    \ of the first n natural numbers.\n    // >>> sum(10)\n    // 55\n    // >>> sum(100)\n\
    \    // 265\n    def sum(n : Int) : Int = {\n        n * (n + 1) / 2\n    }\n\n\
    \    // Return the sum of the first n natural numbers.\n    // >>> sum_of_squares(10)\n\
    \    // 385\n    // >>> sum_of_squares(100)\n    // 1025\n    // >>> sum_of_squares(1000)\n\
    \    // 1365\n    def sum_of_squares(n : Int) : Int = {\n        n * (n + 1) /\
    \ 2\n    }\n\n    // Return the sum of the first n natural numbers.\n    // >>>\
    \ sum_of_cubes(10)\n    // 385\n    // >>> sum_of_cubes(100)\n    // 1025\n  \
    \  // >>> sum_of_cubes(1000)\n    // 1365\n    def sum_of_cubes(n : Int) : Int\
    \ = {\n        n * (n + 1) * (n + 2) / 6\n    }\n\n    // Return the sum of the\
    \ first n natural numbers.\n    // >>> sum_of_squares(10)\n    // 385\n", "  \
    \      if (n == 0) {\n            0\n        } else if (n < 0) {\n           \
    \ modp(-n, p)\n        } else {\n            n % p\n        }\n    }\n\n    //\
    \ Return the greatest common divisor of a and b.\n    // >>> gcd(3l, 5l)\n   \
    \ // (1l)\n    // >>> gcd(11l, 101l)\n    // (1l)\n    // >>> gcd(0l, 101l)\n\
    \    // (101l)\n    // >>> gcd(3l, 11l)\n    // (1l)\n    // >>> gcd(100l, 101l)\n\
    \    // (1l)\n    def gcd(a : Long, b : Long) : Long = {\n        if (a == 0)\
    \ {\n            b\n        } else if (b == 0) {\n            a\n        } else\
    \ {\n            gcd(b, a % b)\n        }\n    }\n\n    // Return the least common\
    \ multiple of a and b.\n    // >>> lcm(3l, 5l)\n    // (15l)\n    // >>> lcm(11l,\
    \ 101l)\n    // (101l)\n    // >>> lcm(0l, 101l)\n    // (0l)\n    // >>> lcm(3l,\
    \ 11l)\n    // (33l)\n    // >>> lcm(100l, 101l)\n    // (100l)\n    def lcm(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            0\n       \
    \ } else if (b == 0) {\n            0\n        } else {\n            a * b / gcd(a,\
    \ b)\n        }\n    }\n\n    // Return the sum of the squares of the first n\
    \ natural numbers.\n    // >>> sum_of_squares(0)\n    // (0l)\n    // >>> sum_of_squares(1)\n\
    \    // (1l)\n    // >>> sum_of_squares(2)\n    // (5l)\n    // >>> sum_of_squares(3)\n\
    \    // (14l)\n    def sum_of_", "        if (n < 0) {\n            throw new\
    \ java.lang.IllegalArgumentException(\"n < 0\")\n        }\n        if (p < 0)\
    \ {\n            throw new java.lang.IllegalArgumentException(\"p < 0\")\n   \
    \     }\n        if (p == 0) {\n            throw new java.lang.IllegalArgumentException(\"\
    p == 0\")\n        }\n        if (n == 0) {\n            return 0l\n        }\n\
    \        return (n * (n - 1)) % p\n    }\n\n    // Return the greatest common\
    \ divisor of a and b.\n    // >>> gcd(3l, 5l)\n    // (1l)\n    // >>> gcd(11l,\
    \ 101l)\n    // (1l)\n    // >>> gcd(0l, 101l)\n    // (101l)\n    // >>> gcd(3l,\
    \ 11l)\n    // (1l)\n    // >>> gcd(100l, 101l)\n    // (101l)\n    def gcd(a\
    \ : Long, b : Long) : Long = {\n        if (a < 0) {\n            throw new java.lang.IllegalArgumentException(\"\
    a < 0\")\n        }\n        if (b < 0) {\n            throw new java.lang.IllegalArgumentException(\"\
    b < 0\")\n        }\n        if (a == 0) {\n            return b\n        }\n\
    \        if (b == 0) {\n            return a\n        }\n        return gcd(b,\
    \ a % b)\n    }\n\n    // Return the least common multiple of a and b.\n    //\
    \ >>> lcm(3l, 5l)\n    // (15l)\n    // >>> lcm(11l, 101l)\n    // (101l)\n  \
    \  // >>> lcm(0l, 101l)\n    // (0l)\n    // >>> lcm(3l, 11l)\n    // (3l)\n \
    \   // >>> lcm(100l, 101l)\n    // (101l)\n    def lcm(a : Long, b : Long) : Long\
    \ = {\n        if (a < 0) {\n            throw new java.lang.Illegal", "     \
    \   n % p\n    }\n\n    // Return the number of bits set in a long.\n    // >>>\
    \ countBits(0l)\n    // 0\n    // >>> countBits(1l)\n    // 1\n    // >>> countBits(2l)\n\
    \    // 2\n    // >>> countBits(3l)\n    // 2\n    // >>> countBits(4l)\n    //\
    \ 3\n    // >>> countBits(5l)\n    // 3\n    // >>> countBits(6l)\n    // 4\n\
    \    // >>> countBits(7l)\n    // 4\n    // >>> countBits(8l)\n    // 5\n    //\
    \ >>> countBits(9l)\n    // 5\n    // >>> countBits(10l)\n    // 6\n    // >>>\
    \ countBits(11l)\n    // 6\n    // >>> countBits(12l)\n    // 7\n    // >>> countBits(13l)\n\
    \    // 7\n    // >>> countBits(14l)\n    // 8\n    // >>> countBits(15l)\n  \
    \  // 8\n    // >>> countBits(16l)\n    // 9\n    // >>> countBits(17l)\n    //\
    \ 9\n    // >>> countBits(18l)\n    // 10\n    // >>> countBits(19l)\n    // 10\n\
    \    // >>> countBits(20l)\n    // 11\n    // >>> countBits(21l)\n    // 11\n\
    \    // >>> countBits(22l)\n    // 12\n    // >>> countBits(23l)\n    // 12\n\
    \    // >>> countBits(24l)\n    // 13\n    // >>> countBits(25l)\n    // 13\n\
    \    // >>> countBits(26l)\n    // 14\n    // >>> countBits(27l)\n    // 14\n\
    \    // >>> countBits(28l)\n    // 15\n    // >>> countBits(29l)\n    // 15\n\
    \    // >>> countBits(30l)\n    // 16\n    // >>> countBits(31l)\n    // 16\n\
    \    // >>> countBits(32l)\n", "        val m = n % p\n        if (m < 0) {\n\
    \            m += p\n        }\n        return m\n    }\n\n    // Return the greatest\
    \ common divisor of a and b.\n    // >>> gcd((3l), (5l))\n    // (1l)\n    //\
    \ >>> gcd((1101l), (101l))\n    // (1l)\n    // >>> gcd((0l), (101l))\n    //\
    \ (101l)\n    // >>> gcd((3l), (11l))\n    // (1l)\n    // >>> gcd((100l), (101l))\n\
    \    // (1l)\n    def gcd(a : Long, b : Long) : Long = {\n        val aa = a\n\
    \        val bb = b\n        if (aa < 0) {\n            aa = -aa\n        }\n\
    \        if (bb < 0) {\n            bb = -bb\n        }\n        if (aa == 0)\
    \ {\n            return bb\n        }\n        if (bb == 0) {\n            return\
    \ aa\n        }\n        val r = gcd(bb, aa % bb)\n        return r\n    }\n\n\
    \    // Return the least common multiple of a and b.\n    // >>> lcm((3l), (5l))\n\
    \    // (15l)\n    // >>> lcm((1101l), (101l))\n    // (101l)\n    // >>> lcm((0l),\
    \ (101l))\n    // (0l)\n    // >>> lcm((3l), (11l))\n    // (3l)\n    // >>> lcm((100l),\
    \ (101l))\n    // (100l)\n    def lcm(a : Long, b : Long) : Long = {\n       \
    \ val aa = a\n        val bb = b\n        if (aa < 0) {\n            aa = -aa\n\
    \        }\n        if (bb < 0) {\n            bb = -bb\n        }\n        if\
    \ (aa == 0) {\n            return bb\n        }\n        if (bb == 0) {\n    \
    \        return aa\n        }\n        val r = lcm(bb, aa % b", "        n % p\n\
    \    }\n\n    // Return the number of bits set in n.\n    // >>> countBits(0l)\n\
    \    // 0\n    // >>> countBits(1l)\n    // 1\n    // >>> countBits(2l)\n    //\
    \ 2\n    // >>> countBits(3l)\n    // 2\n    // >>> countBits(4l)\n    // 3\n\
    \    // >>> countBits(5l)\n    // 3\n    // >>> countBits(6l)\n    // 4\n    //\
    \ >>> countBits(7l)\n    // 4\n    // >>> countBits(8l)\n    // 5\n    // >>>\
    \ countBits(9l)\n    // 5\n    // >>> countBits(10l)\n    // 6\n    // >>> countBits(11l)\n\
    \    // 6\n    // >>> countBits(12l)\n    // 7\n    // >>> countBits(13l)\n  \
    \  // 7\n    // >>> countBits(14l)\n    // 8\n    // >>> countBits(15l)\n    //\
    \ 8\n    // >>> countBits(16l)\n    // 9\n    // >>> countBits(17l)\n    // 9\n\
    \    // >>> countBits(18l)\n    // 10\n    // >>> countBits(19l)\n    // 10\n\
    \    // >>> countBits(20l)\n    // 11\n    // >>> countBits(21l)\n    // 11\n\
    \    // >>> countBits(22l)\n    // 12\n    // >>> countBits(23l)\n    // 12\n\
    \    // >>> countBits(24l)\n    // 13\n    // >>> countBits(25l)\n    // 13\n\
    \    // >>> countBits(26l)\n    // 14\n    // >>> countBits(27l)\n    // 14\n\
    \    // >>> countBits(28l)\n    // 15\n    // >>> countBits(29l)\n    // 15\n\
    \    // >>> countBits(30l)\n    // 16\n    // >>> countBits(31l)\n    // 16\n\
    \    // >>> countBits(32l)\n    ", "        val m = n % p\n        if (m < 0)\
    \ {\n            m += p\n        }\n        return m\n    }\n\n    // Return the\
    \ greatest common divisor of a and b.\n    // >>> gcd(3l, 5l)\n    // 1l\n   \
    \ // >>> gcd(11l, 101l)\n    // 101l\n    // >>> gcd(0l, 101l)\n    // 1l\n  \
    \  // >>> gcd(3l, 11l)\n    // 1l\n    // >>> gcd(100l, 101l)\n    // 101l\n \
    \   def gcd(a : Long, b : Long) : Long = {\n        val t = a % b\n        if\
    \ (t == 0) {\n            return b\n        } else {\n            return gcd(b,\
    \ t)\n        }\n    }\n\n    // Return the least common multiple of a and b.\n\
    \    // >>> lcm(3l, 5l)\n    // 15l\n    // >>> lcm(11l, 101l)\n    // 101l\n\
    \    // >>> lcm(0l, 101l)\n    // 0l\n    // >>> lcm(3l, 11l)\n    // 3l\n   \
    \ // >>> lcm(100l, 101l)\n    // 100l\n    def lcm(a : Long, b : Long) : Long\
    \ = {\n        val t = a * b / gcd(a, b)\n        return t\n    }\n\n    // Return\
    \ the sum of the squares of the numbers in the list.\n    // >>> sumOfSquares([1,\
    \ 2, 3])\n    // 14l\n    // >>> sumOfSquares([1, 2, 3, 4])\n    // 30l\n    def\
    \ sumOfSquares(xs : List[Long]) : Long = {\n        val t = 0l\n        for (x\
    \ <- xs) {\n            t += x * x\n        }\n        return t\n    }\n\n   \
    \ // Return the sum of the squares of the numbers in the list.\n    // >>> sumOfSquares([1,\
    \ 2, 3, 4])\n    // 30l\n    // >>> sumOfSquares([1, 2, 3, 4, 5])\n    // 55l",
  "        if (n == 0) {\n            0l\n        } else {\n            n % p\n  \
    \      }\n    }\n\n    // Return the greatest common divisor of a and b.\n   \
    \ // >>> gcd(3l, 5l)\n    // (1l)\n    // >>> gcd(11l, 101l)\n    // (1l)\n  \
    \  // >>> gcd(0l, 101l)\n    // (101l)\n    // >>> gcd(3l, 11l)\n    // (1l)\n\
    \    // >>> gcd(100l, 101l)\n    // (101l)\n    def gcd(a : Long, b : Long) :\
    \ Long = {\n        if (a == 0) {\n            b\n        } else {\n         \
    \   gcd(b % a, a)\n        }\n    }\n\n    // Return the least common multiple\
    \ of a and b.\n    // >>> lcm(3l, 5l)\n    // (15l)\n    // >>> lcm(11l, 101l)\n\
    \    // (101l)\n    // >>> lcm(0l, 101l)\n    // (0l)\n    // >>> lcm(3l, 11l)\n\
    \    // (33l)\n    // >>> lcm(100l, 101l)\n    // (101l)\n    def lcm(a : Long,\
    \ b : Long) : Long = {\n        if (a == 0) {\n            0l\n        } else\
    \ {\n            a * b / gcd(a, b)\n        }\n    }\n\n    // Return the sum\
    \ of the squares of the first n natural numbers.\n    // >>> sum_of_squares(0)\n\
    \    // (0l)\n    // >>> sum_of_squares(1)\n    // (1l)\n    // >>> sum_of_squares(2)\n\
    \    // (5l)\n    // >>> sum_of_squares(3)\n    // (14l)\n    def sum_of_squares(n\
    \ : Long) : Long = {\n        if (n == 0) {\n            0l\n        } else {\n\
    \            n * n\n        }\n    }\n\n    // Return the sum", "        if (n\
    \ < 0l) {\n            throw new RuntimeException(\"Negative number\")\n     \
    \   }\n        if (p < 0l) {\n            throw new RuntimeException(\"Negative\
    \ number\")\n        }\n        if (p == 0l) {\n            throw new RuntimeException(\"\
    Zero modulus\")\n        }\n        return (n % p)\n    }\n\n    // Return the\
    \ greatest common divisor of a and b.\n    // >>> gcd((2l), (3l))\n    // (1l)\n\
    \    // >>> gcd((3l), (5l))\n    // (1l)\n    // >>> gcd((0l), (1l))\n    // (1l)\n\
    \    // >>> gcd((3l), (11l))\n    // (1l)\n    // >>> gcd((100l), (101l))\n  \
    \  // (1l)\n    def gcd(a : Long, b : Long) : Long = {\n        if (a < 0l) {\n\
    \            throw new RuntimeException(\"Negative number\")\n        }\n    \
    \    if (b < 0l) {\n            throw new RuntimeException(\"Negative number\"\
    )\n        }\n        if (a == 0l) {\n            return b\n        }\n      \
    \  if (b == 0l) {\n            return a\n        }\n        return gcd(b, a %\
    \ b)\n    }\n\n    // Return the least common multiple of a and b.\n    // >>>\
    \ lcm((2l), (3l))\n    // (6l)\n    // >>> lcm((3l), (5l))\n    // (15l)\n   \
    \ // >>> lcm((0l), (1l))\n    // (0l)\n    // >>> lcm((3l), (11l))\n    // (33l)\n\
    \    // >>> lcm((100l), (101l))\n    // (100l)\n    def lcm(a : Long, b : Long)\
    \ : Long = {\n        if (a < 0l) {\n            throw new RuntimeException(\"\
    Negative number\")\n        }\n        if (b < 0l) {\n            throw new RuntimeException(\"\
    Negative number\")\n        }\n        if (a == 0l) {\n", "        if (n == 0)\
    \ {\n            0l\n        } else {\n            n % p\n        }\n    }\n\n\
    \    // Return the greatest common divisor of a and b.\n    // >>> gcd((3l), (5l))\n\
    \    // (1l)\n    // >>> gcd((1101l), (101l))\n    // (1l)\n    // >>> gcd((0l),\
    \ (101l))\n    // (101l)\n    // >>> gcd((3l), (11l))\n    // (1l)\n    // >>>\
    \ gcd((100l), (101l))\n    // (101l)\n    def gcd(a : Long, b : Long) : Long =\
    \ {\n        if (a == 0) {\n            b\n        } else {\n            gcd(b\
    \ % a, a)\n        }\n    }\n\n    // Return the least common multiple of a and\
    \ b.\n    // >>> lcm((3l), (5l))\n    // (15l)\n    // >>> lcm((1101l), (101l))\n\
    \    // (101l)\n    // >>> lcm((0l), (101l))\n    // (0l)\n    // >>> lcm((3l),\
    \ (11l))\n    // (33l)\n    // >>> lcm((100l), (101l))\n    // (101l)\n    def\
    \ lcm(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            0l\n\
    \        } else {\n            a * (b / gcd(a, b))\n        }\n    }\n\n    //\
    \ Return the sum of the digits of n.\n    // >>> sumDigits(123l)\n    // 6\n \
    \   // >>> sumDigits(1234l)\n    // 10\n    // >>> sumDigits(12345l)\n    // 15\n\
    \    def sumDigits(n : Long) : Long = {\n        if (n == 0) {\n            0l\n\
    \        } else {\n            n % 10 + sumDigits(n / 10)\n        }\n    }\n\n\
    \    // Return the sum of the digits of n.\n    // >>> sumDigits(123l)\n", " \
    \       n % p\n    }\n\n    // Return the greatest common divisor of a and b.\n\
    \    // >>> gcd(3l, 5l)\n    // (1l)\n    // >>> gcd(3l, 0l)\n    // (3l)\n  \
    \  // >>> gcd(0l, 0l)\n    // (0l)\n    // >>> gcd(0l, 3l)\n    // (3l)\n    //\
    \ >>> gcd(3l, 3l)\n    // (3l)\n    def gcd(a : Long, b : Long) : Long = {\n \
    \       if (b == 0l) {\n            a\n        } else {\n            gcd(b, a\
    \ % b)\n        }\n    }\n\n    // Return the least common multiple of a and b.\n\
    \    // >>> lcm(3l, 5l)\n    // (15l)\n    // >>> lcm(3l, 0l)\n    // (0l)\n \
    \   // >>> lcm(0l, 0l)\n    // (0l)\n    // >>> lcm(0l, 3l)\n    // (0l)\n   \
    \ // >>> lcm(3l, 3l)\n    // (3l)\n    def lcm(a : Long, b : Long) : Long = {\n\
    \        if (b == 0l) {\n            a\n        } else {\n            lcm(b, a\
    \ / b) * b\n        }\n    }\n\n    // Return the sum of a and b.\n    // >>>\
    \ add(3l, 5l)\n    // (8l)\n    // >>> add(3l, 0l)\n    // (3l)\n    // >>> add(0l,\
    \ 0l)\n    // (0l)\n    // >>> add(0l, 3l)\n    // (3l)\n    // >>> add(3l, 3l)\n\
    \    // (6l)\n    def add(a : Long, b : Long) : Long = {\n        a + b\n    }\n\
    \n    // Return the product of a and b.\n    // >>> mul(3l, 5l)\n    // (15l)\n\
    \    // >>> mul(3l", "        val nn = n.toInt\n        val pp = p.toInt\n   \
    \     if (nn < 0) {\n            throw new IllegalArgumentException(\"n must be\
    \ non-negative\")\n        }\n        if (pp < 0) {\n            throw new IllegalArgumentException(\"\
    p must be non-negative\")\n        }\n        if (nn == 0) {\n            return\
    \ 0l\n        }\n        if (pp == 0) {\n            return 1l\n        }\n  \
    \      if (nn == 1) {\n            return n\n        }\n        if (nn == 2) {\n\
    \            return (n * n) % pp\n        }\n        if (nn % 2 == 0) {\n    \
    \        return (n * n * n) % pp\n        } else {\n            return (n * n\
    \ * n * n) % pp\n        }", "        val nn = n.toInt\n        val pp = p.toInt\n\
    \        if (nn < 0) {\n            throw new IllegalArgumentException(\"n must\
    \ be non-negative\")\n        }\n        if (pp < 0) {\n            throw new\
    \ IllegalArgumentException(\"p must be non-negative\")\n        }\n        if\
    \ (nn >= pp) {\n            throw new IllegalArgumentException(\"n must be less\
    \ than p\")\n        }\n        val r = nn % pp\n        if (r < 0) {\n      \
    \      r += pp\n        }\n        return r\n    }\n\n    // Return the greatest\
    \ common divisor of a and b.\n    // >>> gcd(5l, 10l)\n    // (5l)\n    // >>>\
    \ gcd(5l, 0l)\n    // (5l)\n    // >>> gcd(0l, 0l)\n    // (0l)\n    // >>> gcd(5l,\
    \ -5l)\n    // (5l)\n    // >>> gcd(-5l, 5l)\n    // (5l)\n    // >>> gcd(-5l,\
    \ -5l)\n    // (5l)\n    // >>> gcd(5l, -5l)\n    // (5l)\n    // >>> gcd(-5l,\
    \ 5l)\n    // (5l)\n    // >>> gcd(-5l, -5l)\n    // (5l)\n    def gcd(a : Long,\
    \ b : Long) : Long = {\n        if (a == 0) {\n            return b\n        }\n\
    \        if (b == 0) {\n            return a\n        }\n        if (a < 0) {\n\
    \            a = -a\n        }\n        if (b < 0) {\n            b = -b\n   \
    \     }\n        if (a < b) {\n            a, b = b, a\n        }\n        while\
    \ (b != 0) {\n            val r = a % b\n            a = b\n            b = r\n\
    \        }\n        return a\n    }\n\n    // Return the least common multiple\
    \ of a and b.\n    // >>> lcm(5l, 10l)\n    // (50l)\n", "        n % p\n    }\n\
    \n    // Return the number of 1s in the binary representation of n.\n    // >>>\
    \ countBits(3l)\n    // 2\n    // >>> countBits(0l)\n    // 0\n    // >>> countBits(1l)\n\
    \    // 1\n    // >>> countBits(2l)\n    // 2\n    // >>> countBits(3l)\n    //\
    \ 2\n    // >>> countBits(4l)\n    // 3\n    // >>> countBits(5l)\n    // 4\n\
    \    // >>> countBits(6l)\n    // 5\n    // >>> countBits(7l)\n    // 6\n    //\
    \ >>> countBits(8l)\n    // 7\n    // >>> countBits(9l)\n    // 8\n    // >>>\
    \ countBits(10l)\n    // 9\n    // >>> countBits(11l)\n    // 10\n    // >>> countBits(12l)\n\
    \    // 11\n    // >>> countBits(13l)\n    // 12\n    // >>> countBits(14l)\n\
    \    // 13\n    // >>> countBits(15l)\n    // 14\n    // >>> countBits(16l)\n\
    \    // 15\n    // >>> countBits(17l)\n    // 16\n    // >>> countBits(18l)\n\
    \    // 17\n    // >>> countBits(19l)\n    // 18\n    // >>> countBits(20l)\n\
    \    // 19\n    // >>> countBits(21l)\n    // 20\n    // >>> countBits(22l)\n\
    \    // 21\n    // >>> countBits(23l)\n    // 22\n    // >>> countBits(24l)\n\
    \    // 23\n    // >>> countBits(25l)\n    // 24\n    // >>> countBits(26l)\n\
    \    // 25\n    // >>> countBits(27l)\n    // 26\n    // >>> countBits(28l)\n\
    \    // 27\n    // >>> countBits(29l)\n    // 28\n    // >>> countBits(30l)\n\
    \    // 29\n    // >>> countBits(31", "        if (n < 0) {\n            throw\
    \ new IllegalArgumentException(\"n must be non-negative\")\n        }\n      \
    \  if (p < 0) {\n            throw new IllegalArgumentException(\"p must be non-negative\"\
    )\n        }\n        if (p == 0) {\n            throw new IllegalArgumentException(\"\
    p must be non-zero\")\n        }\n        return (n * 2l) % p", "        if (n\
    \ < 0l) {\n            throw new java.lang.IllegalArgumentException(\"n must be\
    \ >= 0\")\n        }\n        if (p < 0l) {\n            throw new java.lang.IllegalArgumentException(\"\
    p must be >= 0\")\n        }\n        if (p == 0l) {\n            throw new java.lang.IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0l) {\n            return 0l\n \
    \       }\n        return (n * (n - 1l) / 2l) % p\n    }\n\n    // Return the\
    \ number of bits set in n.\n    // >>> countBits(0l)\n    // 0\n    // >>> countBits(1l)\n\
    \    // 1\n    // >>> countBits(2l)\n    // 2\n    // >>> countBits(3l)\n    //\
    \ 2\n    // >>> countBits(4l)\n    // 3\n    // >>> countBits(5l)\n    // 3\n\
    \    // >>> countBits(6l)\n    // 4\n    // >>> countBits(7l)\n    // 4\n    //\
    \ >>> countBits(8l)\n    // 5\n    // >>> countBits(9l)\n    // 5\n    // >>>\
    \ countBits(10l)\n    // 6\n    // >>> countBits(11l)\n    // 6\n    // >>> countBits(12l)\n\
    \    // 7\n    // >>> countBits(13l)\n    // 7\n    // >>> countBits(14l)\n  \
    \  // 8\n    // >>> countBits(15l)\n    // 8\n    // >>> countBits(16l)\n    //\
    \ 9\n    // >>> countBits(17l)\n    // 9\n    // >>> countBits(18l)\n    // 10\n\
    \    // >>> countBits(19l)\n    // 10\n    // >>> countBits(20l)\n    // 11\n\
    \    // >>> countBits(21l)\n    // 11\n    // >>> countBits(22l)\n    // 12\n\
    \    // >>> countBits(23l)\n    // 12\n    //", "        if (n == 0) {\n     \
    \       return 0l\n        } else {\n            return (n % p) + (n / p) * p\n\
    \        }", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        if (p < 0) {\n            throw\
    \ new IllegalArgumentException(\"p must be non-negative\")\n        }\n      \
    \  if (p == 0) {\n            throw new IllegalArgumentException(\"p must be non-zero\"\
    )\n        }\n        return (n % p) + (n / p) * p", "        n % p\n    }\n\n\
    \    // Return the greatest common divisor of a and b.\n    // >>> gcd(3l, 5l)\n\
    \    // (1l)\n    // >>> gcd(3l, 6l)\n    // (3l)\n    // >>> gcd(3l, 0l)\n  \
    \  // (3l)\n    // >>> gcd(0l, 0l)\n    // (0l)\n    // >>> gcd(3l, -3l)\n   \
    \ // (1l)\n    // >>> gcd(-3l, 3l)\n    // (3l)\n    // >>> gcd(-3l, -3l)\n  \
    \  // (3l)\n    def gcd(a : Long, b : Long) : Long = {\n        if (b == 0l) {\n\
    \            a\n        } else {\n            gcd(b, a % b)\n        }\n    }\n\
    \n    // Return the least common multiple of a and b.\n    // >>> lcm(3l, 5l)\n\
    \    // (15l)\n    // >>> lcm(3l, 6l)\n    // (18l)\n    // >>> lcm(3l, 0l)\n\
    \    // (0l)\n    // >>> lcm(0l, 0l)\n    // (0l)\n    // >>> lcm(3l, -3l)\n \
    \   // (-3l)\n    // >>> lcm(-3l, 3l)\n    // (-3l)\n    // >>> lcm(-3l, -3l)\n\
    \    // (0l)\n    def lcm(a : Long, b : Long) : Long = {\n        if (b == 0l)\
    \ {\n            a\n        } else {\n            lcm(b, a / b) * b\n        }\n\
    \    }\n\n    // Return the sum of the squares of the first n natural numbers.\n\
    \    // >>> sum_of_squares(5)\n    // (30l)\n    // >>> sum_of_squares(0)\n  \
    \  // (0l)\n    def sum_of_squares(n : Long) : Long = {\n        n * (n + 1) /\
    \ 2", "        if (n == 0l) {\n            0l\n        } else {\n            n\
    \ % p\n        }\n    }\n\n    // Return the greatest common divisor of two numbers.\n\
    \    // >>> gcd(3l, 5l)\n    // 1l\n    // >>> gcd(11l, 101l)\n    // 101l\n \
    \   // >>> gcd(0l, 101l)\n    // 101l\n    // >>> gcd(3l, 11l)\n    // 1l\n  \
    \  // >>> gcd(100l, 101l)\n    // 101l\n    def gcd(a : Long, b : Long) : Long\
    \ = {\n        if (a == 0l) {\n            b\n        } else {\n            gcd(b\
    \ % a, a)\n        }\n    }\n\n    // Return the least common multiple of two\
    \ numbers.\n    // >>> lcm(3l, 5l)\n    // 15l\n    // >>> lcm(11l, 101l)\n  \
    \  // 101l\n    // >>> lcm(0l, 101l)\n    // 1l\n    // >>> lcm(3l, 11l)\n   \
    \ // 11l\n    // >>> lcm(100l, 101l)\n    // 101l\n    def lcm(a : Long, b : Long)\
    \ : Long = {\n        if (a == 0l) {\n            b\n        } else {\n      \
    \      lcm(b / a, a)\n        }\n    }\n\n    // Return the greatest common divisor\
    \ of a list of numbers.\n    // >>> gcd([3l, 5l, 11l])\n    // 1l\n    // >>>\
    \ gcd([11l, 101l, 0l])\n    // 101l\n    // >>> gcd([0l, 101l, 0l])\n    // 1l\n\
    \    // >>> gcd([3l, 11l, 0l])\n    // 1l\n    // >>> gcd([100l, 101l, 0l])\n\
    \    // 101l\n    def gcd_list(numbers : List[Long]) : Long = {\n        if (numbers.length\
    \ == 0) {\n            0l\n        } else {\n            gcd_list(numbers.", " \
    \       if (n < 0l) {\n            throw new IllegalArgumentException(\"n must\
    \ be a non-negative number\")\n        }\n        if (p < 0l) {\n            throw\
    \ new IllegalArgumentException(\"p must be a non-negative number\")\n        }\n\
    \        if (p == 0l) {\n            throw new IllegalArgumentException(\"p must\
    \ be a non-zero number\")\n        }\n        if (n == 0l) {\n            return\
    \ 0l\n        }\n        return (n * (n - 1l)) % p\n    }\n\n    // Return the\
    \ greatest common divisor of a and b.\n    // >>> gcd((3l), (5l))\n    // (1l)\n\
    \    // >>> gcd((1101l), (101l))\n    // (1l)\n    // >>> gcd((0l), (101l))\n\
    \    // (1l)\n    // >>> gcd((3l), (11l))\n    // (1l)\n    // >>> gcd((100l),\
    \ (101l))\n    // (1l)\n    def gcd(a : Long, b : Long) : Long = {\n        if\
    \ (a < 0l) {\n            throw new IllegalArgumentException(\"a must be a non-negative\
    \ number\")\n        }\n        if (b < 0l) {\n            throw new IllegalArgumentException(\"\
    b must be a non-negative number\")\n        }\n        if (a == 0l) {\n      \
    \      return b\n        }\n        if (b == 0l) {\n            return a\n   \
    \     }\n        return gcd(b, a % b)\n    }\n\n    // Return the least common\
    \ multiple of a and b.\n    // >>> lcm((3l), (5l))\n    // (15l)\n    // >>> lcm((1101l),\
    \ (101l))\n    // (101l)\n    // >>> lcm((0l), (101l))\n    // (0l)\n    // >>>\
    \ lcm((3l), (11l))\n    // (11l)\n    // >>> lcm((100l), (101l))\n    // (100l)\n\
    \    def lcm(a : Long, b : Long) : Long", "        n % p\n    }\n\n    // Return\
    \ the sum of the digits of n.\n    // >>> sumDigits(12345l)\n    // 15\n    //\
    \ >>> sumDigits(123456789l)\n    // 18\n    // >>> sumDigits(1234567890123456789l)\n\
    \    // 18\n    def sumDigits(n : Long) : Long = {\n        n % 10\n    }\n\n\
    \    // Return the sum of the digits of n.\n    // >>> sumDigits(12345l)\n   \
    \ // 15\n    // >>> sumDigits(123456789l)\n    // 18\n    // >>> sumDigits(1234567890123456789l)\n\
    \    // 18\n    def sumDigits(n : Long) : Long = {\n        n % 10\n    }\n\n\
    \    // Return the sum of the digits of n.\n    // >>> sumDigits(12345l)\n   \
    \ // 15\n    // >>> sumDigits(123456789l)\n    // 18\n    // >>> sumDigits(1234567890123456789l)\n\
    \    // 18\n    def sumDigits(n : Long) : Long = {\n        n % 10\n    }\n\n\
    \    // Return the sum of the digits of n.\n    // >>> sumDigits(12345l)\n   \
    \ // 15\n    // >>> sumDigits(123456789l)\n    // 18\n    // >>> sumDigits(1234567890123456789l)\n\
    \    // 18\n    def sumDigits(n : Long) : Long = {\n        n % 10\n    }\n\n\
    \    // Return the sum of the digits of n.\n    // >>> sumDigits(12345l)\n   \
    \ // 15\n    // >>> sumDigits(123456789l)\n    // 18\n    // >>> sumDigits(1234567890123456789l)\n\
    \    // 18\n    def sumDigits(n : Long) : Long = {\n        n % 10\n    }\n\n\
    \    // Return the sum of the digits of n.\n    // >>> sumDigits(12345l)\n   \
    \ // 15\n    // >>> sumDigits(123456789l)\n    //", "        if (n < 0l) {\n \
    \           throw new java.lang.IllegalArgumentException(\"n must be >= 0\")\n\
    \        }\n        if (p < 0l) {\n            throw new java.lang.IllegalArgumentException(\"\
    p must be >= 0\")\n        }\n        if (p == 0l) {\n            throw new java.lang.IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0l) {\n            return 0l\n \
    \       }\n        return (n * (n - 1l) / 2l) % p", "        return (n % p) +\
    \ p\n    }\n\n    // Return the greatest common divisor of a and b.\n    // >>>\
    \ gcd((3l), (5l))\n    // (1l)\n    // >>> gcd((1101l), (101l))\n    // (1l)\n\
    \    // >>> gcd((0l), (101l))\n    // (101l)\n    // >>> gcd((3l), (11l))\n  \
    \  // (1l)\n    // >>> gcd((100l), (101l))\n    // (1l)\n    def gcd(a : Long,\
    \ b : Long) : Long = {\n        if (b == 0l)\n            return a\n        else\n\
    \            return gcd(b, a % b)\n    }\n\n    // Return the least common multiple\
    \ of a and b.\n    // >>> lcm((3l), (5l))\n    // (15l)\n    // >>> lcm((1101l),\
    \ (101l))\n    // (101l)\n    // >>> lcm((0l), (101l))\n    // (0l)\n    // >>>\
    \ lcm((3l), (11l))\n    // (33l)\n    // >>> lcm((100l), (101l))\n    // (100l)\n\
    \    def lcm(a : Long, b : Long) : Long = {\n        return (a * b) / gcd(a, b)\n\
    \    }\n\n    // Return the sum of the squares of the first n natural numbers.\n\
    \    // >>> sum_of_squares(0)\n    // (0l)\n    // >>> sum_of_squares(1)\n   \
    \ // (1l)\n    // >>> sum_of_squares(2)\n    // (5l)\n    // >>> sum_of_squares(3)\n\
    \    // (14l)\n    def sum_of_squares(n : Long) : Long = {\n        return (n\
    \ * (n + 1) * (2 * n + 1)) / 6\n    }\n\n    // Return the sum of the cubes of\
    \ the first n natural numbers.\n    // >>> sum_of_cubes(0)\n    // (0l)", "  \
    \      if (n == 0) {\n            0l\n        } else if (n < 0) {\n          \
    \  modp(-n, p)\n        } else if (n > p) {\n            n % p\n        } else\
    \ {\n            n\n        }\n    }\n\n    // Return the greatest common divisor\
    \ of a and b.\n    // >>> gcd(5l, 3l)\n    // (1l)\n    // >>> gcd(5l, 0l)\n \
    \   // (5l)\n    // >>> gcd(0l, 0l)\n    // (0l)\n    // >>> gcd(5l, 5l)\n   \
    \ // (5l)\n    // >>> gcd(5l, -5l)\n    // (5l)\n    // >>> gcd(-5l, 5l)\n   \
    \ // (5l)\n    // >>> gcd(-5l, -5l)\n    // (5l)\n    def gcd(a : Long, b : Long)\
    \ : Long = {\n        if (b == 0l) {\n            a\n        } else {\n      \
    \      gcd(b, a % b)\n        }\n    }\n\n    // Return the least common multiple\
    \ of a and b.\n    // >>> lcm(5l, 3l)\n    // (15l)\n    // >>> lcm(5l, 0l)\n\
    \    // (5l)\n    // >>> lcm(0l, 0l)\n    // (0l)\n    // >>> lcm(5l, 5l)\n  \
    \  // (5l)\n    // >>> lcm(5l, -5l)\n    // (-5l)\n    // >>> lcm(-5l, 5l)\n \
    \   // (-5l)\n    // >>> lcm(-5l, -5l)\n    // (5l)\n    def lcm(a : Long, b :\
    \ Long) : Long = {\n        if (b == 0l) {\n            a\n        } else {\n\
    \            lcm(b, a / b) * b\n        }\n    }\n\n    // Return the greatest\
    \ common divisor of a and b.\n    // >>> gcd(5l, 3l)\n    ", "        n % p\n\
    \    }\n\n    // Return the greatest common divisor of a and b.\n    // >>> gcd(3l,\
    \ 5l)\n    // (1l)\n    // >>> gcd(11l, 101l)\n    // (1l)\n    // >>> gcd(0l,\
    \ 101l)\n    // (101l)\n    // >>> gcd(3l, 11l)\n    // (1l)\n    // >>> gcd(100l,\
    \ 101l)\n    // (101l)\n    def gcd(a : Long, b : Long) : Long = {\n        if\
    \ (b == 0l) {\n            return a\n        } else {\n            return gcd(b,\
    \ a % b)\n        }\n    }\n\n    // Return the least common multiple of a and\
    \ b.\n    // >>> lcm(3l, 5l)\n    // (15l)\n    // >>> lcm(11l, 101l)\n    //\
    \ (101l)\n    // >>> lcm(0l, 101l)\n    // (0l)\n    // >>> lcm(3l, 11l)\n   \
    \ // (33l)\n    // >>> lcm(100l, 101l)\n    // (101l)\n    def lcm(a : Long, b\
    \ : Long) : Long = {\n        return a * b / gcd(a, b)\n    }\n\n    // Return\
    \ the sum of the squares of the first n natural numbers.\n    // >>> sumOfSquares(0)\n\
    \    // (0l)\n    // >>> sumOfSquares(1)\n    // (1l)\n    // >>> sumOfSquares(2)\n\
    \    // (5l)\n    // >>> sumOfSquares(3)\n    // (14l)\n    def sumOfSquares(n\
    \ : Long) : Long = {\n        return (n * (n + 1) * (2 * n + 1)) / 6\n    }\n\n\
    \    // Return the sum of the cubes of the first n natural numbers.\n    // >>>\
    \ sumOfCubes(0)\n    // (0l)\n    // >>> sumOfCubes(1)\n    // (1l)\n    // >>>\
    \ sumOfC", "        n % p\n    }\n\n    // Return the greatest common divisor\
    \ of a and b.\n    // >>> gcd(3l, 5l)\n    // 5l\n    // >>> gcd(3l, 0l)\n   \
    \ // 3l\n    // >>> gcd(0l, 0l)\n    // 0l\n    // >>> gcd(3l, -5l)\n    // 5l\n\
    \    // >>> gcd(-3l, 5l)\n    // 1l\n    // >>> gcd(-3l, -5l)\n    // 5l\n   \
    \ def gcd(a : Long, b : Long) : Long = {\n        if (b == 0l) {\n           \
    \ return a\n        } else {\n            return gcd(b, a % b)\n        }\n  \
    \  }\n\n    // Return the least common multiple of a and b.\n    // >>> lcm(3l,\
    \ 5l)\n    // 15l\n    // >>> lcm(3l, 0l)\n    // 0l\n    // >>> lcm(0l, 0l)\n\
    \    // 0l\n    // >>> lcm(3l, -5l)\n    // -15l\n    // >>> lcm(-3l, 5l)\n  \
    \  // -15l\n    // >>> lcm(-3l, -5l)\n    // 15l\n    def lcm(a : Long, b : Long)\
    \ : Long = {\n        return (a * b) / gcd(a, b)\n    }\n\n    // Return the greatest\
    \ common divisor of a and b.\n    // >>> gcd(3l, 5l)\n    // 5l\n    // >>> gcd(3l,\
    \ 0l)\n    // 3l\n    // >>> gcd(0l, 0l)\n    // 0l\n    // >>> gcd(3l, -5l)\n\
    \    // 5l\n    // >>> gcd(-3l, 5l)\n    // 1l\n    // >>> gcd(-3l, -5l)\n   \
    \ // 5l\n    def gcd(a : Long, b : Long) : Long = {\n        if (b == 0l) {\n\
    \            return a\n        } else {\n", "        val nn = n.mod(p)\n     \
    \   if (nn == 0) {\n            nn = p\n        }\n        nn\n    }\n\n    //\
    \ Return the number of bits set in the binary representation of n.\n    // >>>\
    \ bitCount(3l)\n    // 2\n    // >>> bitCount(11l)\n    // 4\n    // >>> bitCount(0l)\n\
    \    // 0\n    // >>> bitCount(-3l)\n    // 0\n    // >>> bitCount(-11l)\n   \
    \ // 0\n    // >>> bitCount(-100l)\n    // 0\n    def bitCount(n : Long) : Long\
    \ = {\n        val nn = n.toInt\n        if (nn == 0) {\n            0\n     \
    \   } else {\n            nn.bitCount()\n        }\n    }\n\n    // Return the\
    \ number of 1-bits in the binary representation of n.\n    // >>> bitCountOne(3l)\n\
    \    // 2\n    // >>> bitCountOne(11l)\n    // 2\n    // >>> bitCountOne(0l)\n\
    \    // 0\n    // >>> bitCountOne(-3l)\n    // 0\n    // >>> bitCountOne(-11l)\n\
    \    // 0\n    // >>> bitCountOne(-100l)\n    // 0\n    def bitCountOne(n : Long)\
    \ : Long = {\n        val nn = n.toInt\n        if (nn == 0) {\n            0\n\
    \        } else {\n            nn.bitCount()\n        }\n    }\n\n    // Return\
    \ the number of 0-bits in the binary representation of n.\n    // >>> bitCountZero(3l)\n\
    \    // 2\n    // >>> bitCountZero(11l)\n    // 4\n    // >>> bitCountZero(0l)\n\
    \    // 4\n    // >>> bitCountZero(-3l)\n    // 2\n    // >>> bitCountZero(-11l)\n\
    \    // 0\n    // >>> bitCountZero(-100l)\n    // 0\n    def bitCountZero(n :\
    \ Long) : Long = {\n        val nn = n.toInt\n        if (nn == 0) {\n       \
    \     nn = 4\n        } else {\n            nn.bitCount()\n        }\n", "   \
    \     if (n < 0) {\n            throw new IllegalArgumentException(\"n must be\
    \ >= 0\")\n        }\n        if (p < 0) {\n            throw new IllegalArgumentException(\"\
    p must be >= 0\")\n        }\n        if (p == 0) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0) {\n            return 0l\n  \
    \      }\n        return (n * (n - 1) / 2) % p\n    }\n\n    // Return the greatest\
    \ common divisor of a and b.\n    // >>> gcd(3l, 5l)\n    // 5l\n    // >>> gcd(11l,\
    \ 101l)\n    // 101l\n    // >>> gcd(0l, 101l)\n    // 101l\n    // >>> gcd(3l,\
    \ 11l)\n    // 1l\n    // >>> gcd(100l, 101l)\n    // 101l\n    def gcd(a : Long,\
    \ b : Long) : Long = {\n        if (a < 0) {\n            throw new IllegalArgumentException(\"\
    a must be >= 0\")\n        }\n        if (b < 0) {\n            throw new IllegalArgumentException(\"\
    b must be >= 0\")\n        }\n        if (a == 0) {\n            return b\n  \
    \      }\n        if (b == 0) {\n            return a\n        }\n        while\
    \ (a != b) {\n            if (a > b) {\n                a = a - b\n          \
    \  } else {\n                b = b - a\n            }\n        }\n        return\
    \ a\n    }\n\n    // Return the least common multiple of a and b.\n    // >>>\
    \ lcm(3l, 5l)\n    // 15l\n    // >>> lcm(11l, 101l)\n    // 101l\n    // >>>\
    \ lcm(0l, 101l)\n    // 0l\n    // >>> lcm(3l, 11l)\n    // 3l\n    // >>> lcm(100l,\
    \ 101l)\n    // 100l\n    def lcm(a : Long, b : Long) : Long = {\n        if (a\
    \ < 0) {\n            throw new IllegalArgument", "        if (n < 0) {\n    \
    \        throw new IllegalArgumentException(\"n < 0\")\n        }\n        if\
    \ (p < 0) {\n            throw new IllegalArgumentException(\"p < 0\")\n     \
    \   }\n        if (p == 0) {\n            throw new IllegalArgumentException(\"\
    p == 0\")\n        }\n        if (n == 0) {\n            return 0l\n        }\n\
    \        return (n * (n - 1l) / 2l) % p\n    }\n\n    // Return the greatest common\
    \ divisor of a and b.\n    // >>> gcd((2l), (3l))\n    // (1l)\n    // >>> gcd((2l),\
    \ (5l))\n    // (2l)\n    // >>> gcd((2l), (0l))\n    // (0l)\n    // >>> gcd((0l),\
    \ (0l))\n    // (0l)\n    // >>> gcd((0l), (1l))\n    // (1l)\n    // >>> gcd((1l),\
    \ (2l))\n    // (1l)\n    // >>> gcd((3l), (5l))\n    // (1l)\n    def gcd(a :\
    \ Long, b : Long) : Long = {\n        if (a < 0) {\n            throw new IllegalArgumentException(\"\
    a < 0\")\n        }\n        if (b < 0) {\n            throw new IllegalArgumentException(\"\
    b < 0\")\n        }\n        if (a == 0) {\n            return b\n        }\n\
    \        if (b == 0) {\n            return a\n        }\n        return gcd(b,\
    \ a % b)\n    }\n\n    // Return the least common multiple of a and b.\n    //\
    \ >>> lcm((2l), (3l))\n    // (6l)\n    // >>> lcm((2l), (5l))\n    // (10l)\n\
    \    // >>> lcm((2l), (0l))\n    // (0l)\n    // >>> lcm((0l), (0l))\n    // (0l)\n\
    \    // >>> lcm((0l), (1l))\n    // (0l)\n    // >>> l", '        n % p', "  \
    \      if (n == 0l) {\n            (0l)\n        } else {\n            (n % p)\n\
    \        }", "        if (n == 0) {\n            0l\n        } else {\n      \
    \      n % p\n        }", "        n % p\n    }\n\n    // Return the greatest\
    \ common divisor of a and b.\n    // >>> gcd(3l, 5l)\n    // (1l)\n    // >>>\
    \ gcd(11l, 101l)\n    // (1l)\n    // >>> gcd(0l, 101l)\n    // (101l)\n    //\
    \ >>> gcd(3l, 11l)\n    // (1l)\n    // >>> gcd(100l, 101l)\n    // (101l)\n \
    \   def gcd(a : Long, b : Long) : Long = {\n        if (b == 0l) {\n         \
    \   a\n        } else {\n            gcd(b, a % b)\n        }\n    }\n\n    //\
    \ Return the least common multiple of a and b.\n    // >>> lcm(3l, 5l)\n    //\
    \ (15l)\n    // >>> lcm(11l, 101l)\n    // (101l)\n    // >>> lcm(0l, 101l)\n\
    \    // (0l)\n    // >>> lcm(3l, 11l)\n    // (33l)\n    // >>> lcm(100l, 101l)\n\
    \    // (101l)\n    def lcm(a : Long, b : Long) : Long = {\n        a * b / gcd(a,\
    \ b)\n    }\n\n    // Return the least common multiple of a and b.\n    // >>>\
    \ lcm(3l, 5l)\n    // (15l)\n    // >>> lcm(11l, 101l)\n    // (101l)\n    //\
    \ >>> lcm(0l, 101l)\n    // (0l)\n    // >>> lcm(3l, 11l)\n    // (33l)\n    //\
    \ >>> lcm(100l, 101l)\n    // (101l)\n    def lcm(a : Long, b : Long) : Long =\
    \ {\n        a * b / gcd(a, b)\n    }\n\n    // Return the greatest common divisor\
    \ of a and b.\n    // >>> gcd(3l, 5l)\n    // (1l)\n    // >>> gcd(11", "    \
    \    n % p\n    }\n\n    // Return the greatest common divisor of a and b.\n \
    \   // >>> gcd(3l, 5l)\n    // (1l)\n    // >>> gcd(11l, 101l)\n    // (1l)\n\
    \    // >>> gcd(0l, 101l)\n    // (101l)\n    // >>> gcd(3l, 11l)\n    // (1l)\n\
    \    // >>> gcd(100l, 101l)\n    // (101l)\n    def gcd(a : Long, b : Long) :\
    \ Long = {\n        if (a == 0l) {\n            return b\n        } else {\n \
    \           return gcd(b % a, a)\n        }\n    }\n\n    // Return the least\
    \ common multiple of a and b.\n    // >>> lcm(3l, 5l)\n    // (15l)\n    // >>>\
    \ lcm(11l, 101l)\n    // (101l)\n    // >>> lcm(0l, 101l)\n    // (0l)\n    //\
    \ >>> lcm(3l, 11l)\n    // (33l)\n    // >>> lcm(100l, 101l)\n    // (101l)\n\
    \    def lcm(a : Long, b : Long) : Long = {\n        return (a * b) / gcd(a, b)\n\
    \    }\n\n    // Return the sum of the digits of a.\n    // >>> sumDigits(123l)\n\
    \    // (3l)\n    // >>> sumDigits(1101l)\n    // (2l)\n    // >>> sumDigits(0l)\n\
    \    // (0l)\n    // >>> sumDigits(3l)\n    // (6l)\n    // >>> sumDigits(100l)\n\
    \    // (1l)\n    def sumDigits(a : Long) : Long = {\n        return (a % 10l)\
    \ + (a / 10l)\n    }\n\n    // Return the sum of the digits of a.\n    // >>>\
    \ sumDigits(123l)\n    // (3l)\n    // >>> sumDigits(1101l)\n    // (2l", "  \
    \      n % p\n    }\n\n    // Return the greatest common divisor of a and b.\n\
    \    // >>> gcd(3l, 5l)\n    // (1l)\n    // >>> gcd(3l, 6l)\n    // (3l)\n  \
    \  // >>> gcd(3l, 0l)\n    // (1l)\n    // >>> gcd(0l, 0l)\n    // (0l)\n    //\
    \ >>> gcd(0l, 3l)\n    // (1l)\n    // >>> gcd(3l, 3l)\n    // (3l)\n    def gcd(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0l) {\n            return b\n\
    \        } else {\n            return gcd(b % a, a)\n        }\n    }\n\n    //\
    \ Return the least common multiple of a and b.\n    // >>> lcm(3l, 5l)\n    //\
    \ (15l)\n    // >>> lcm(3l, 6l)\n    // (18l)\n    // >>> lcm(3l, 0l)\n    //\
    \ (0l)\n    // >>> lcm(0l, 0l)\n    // (0l)\n    // >>> lcm(0l, 3l)\n    // (0l)\n\
    \    // >>> lcm(3l, 3l)\n    // (3l)\n    def lcm(a : Long, b : Long) : Long =\
    \ {\n        return a * b / gcd(a, b)\n    }\n\n    // Return the sum of the squares\
    \ of the numbers in the list.\n    // >>> sumOfSquares([1, 2, 3])\n    // (14l)\n\
    \    // >>> sumOfSquares([1, 2, 3, 4])\n    // (30l)\n    def sumOfSquares(numbers\
    \ : List[Long]) : Long = {\n        return sum(map(n -> n * n, numbers))\n   \
    \ }\n\n    // Return the sum of the products of the numbers in the list.\n   \
    \ // >>> sumOfProducts([1, 2, 3])\n    // (6l)\n    // >>> sumOfProducts([1, 2",
  "        if (n < 0l) {\n            throw new RuntimeException(\"Negative numbers\
    \ not supported\")\n        }\n        if (p < 0l) {\n            throw new RuntimeException(\"\
    Negative numbers not supported\")\n        }\n        if (p == 0l) {\n       \
    \     throw new RuntimeException(\"Zero modulus not supported\")\n        }\n\
    \        return (n % p)\n    }\n\n    // Return the greatest common divisor of\
    \ a and b.\n    // >>> gcd(3l, 5l)\n    // (1l)\n    // >>> gcd(3l, 0l)\n    //\
    \ (3l)\n    // >>> gcd(0l, 0l)\n    // (0l)\n    // >>> gcd(3l, 11l)\n    // (1l)\n\
    \    // >>> gcd(100l, 101l)\n    // (1l)\n    def gcd(a : Long, b : Long) : Long\
    \ = {\n        if (a < 0l) {\n            throw new RuntimeException(\"Negative\
    \ numbers not supported\")\n        }\n        if (b < 0l) {\n            throw\
    \ new RuntimeException(\"Negative numbers not supported\")\n        }\n      \
    \  if (a == 0l) {\n            return b\n        }\n        if (b == 0l) {\n \
    \           return a\n        }\n        return modp(gcd(b, a % b), a)\n    }\n\
    \n    // Return the least common multiple of a and b.\n    // >>> lcm(3l, 5l)\n\
    \    // (15l)\n    // >>> lcm(3l, 0l)\n    // (0l)\n    // >>> lcm(0l, 0l)\n \
    \   // (0l)\n    // >>> lcm(3l, 11l)\n    // (33l)\n    // >>> lcm(100l, 101l)\n\
    \    // (101l)\n    def lcm(a : Long, b : Long) : Long = {\n        if (a < 0l)\
    \ {\n            throw new RuntimeException(\"Negative numbers not supported\"\
    )\n        }\n        if (b < 0l) {\n            throw new RuntimeException(\"\
    Negative numbers not supported\")\n        }\n        ", '        n % p', "  \
    \      if (n < 0) {\n            throw new IllegalArgumentException(\"n must be\
    \ >= 0\")\n        }\n        if (p < 0) {\n            throw new IllegalArgumentException(\"\
    p must be >= 0\")\n        }\n        if (p == 0) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0) {\n            return 0l\n  \
    \      }\n        return (n * (n % p)) % p\n    }\n\n    // Return the greatest\
    \ common divisor of a and b.\n    // >>> gcd(2l, 3l)\n    // (1l)\n    // >>>\
    \ gcd(2l, 4l)\n    // (2l)\n    // >>> gcd(2l, 6l)\n    // (2l)\n    // >>> gcd(2l,\
    \ 8l)\n    // (2l)\n    // >>> gcd(2l, 12l)\n    // (2l)\n    // >>> gcd(2l, 16l)\n\
    \    // (2l)\n    // >>> gcd(2l, 24l)\n    // (6l)\n    // >>> gcd(2l, 36l)\n\
    \    // (6l)\n    // >>> gcd(2l, 48l)\n    // (6l)\n    // >>> gcd(2l, 60l)\n\
    \    // (6l)\n    // >>> gcd(2l, 64l)\n    // (8l)\n    // >>> gcd(2l, 128l)\n\
    \    // (8l)\n    // >>> gcd(2l, 256l)\n    // (8l)\n    // >>> gcd(2l, 512l)\n\
    \    // (8l)\n    // >>> gcd(2l, 1024l)\n    // (8l)\n    // >>> gcd(2l, 2048l)\n\
    \    // (16l)\n    // >>> gcd(2l, 4096l)\n    // (16l)\n    // >>> gcd(2l, 8192l)\n\
    \    // (16l)\n    // >>> gcd(2l, 16384l)\n    // (16l)\n    ", "        return\
    \ (n % p) + p\n    }\n\n    // Return the greatest common divisor of a and b.\n\
    \    // >>> gcd(3l, 5l)\n    // (1l)\n    // >>> gcd(3l, 0l)\n    // (1l)\n  \
    \  // >>> gcd(0l, 0l)\n    // (0l)\n    // >>> gcd(3l, 6l)\n    // (3l)\n    //\
    \ >>> gcd(6l, 0l)\n    // (0l)\n    // >>> gcd(6l, 6l)\n    // (6l)\n    def gcd(a\
    \ : Long, b : Long) : Long = {\n        if (b == 0l) {\n            return a\n\
    \        } else {\n            return gcd(b, a % b)\n        }\n    }\n\n    //\
    \ Return the least common multiple of a and b.\n    // >>> lcm(3l, 5l)\n    //\
    \ (15l)\n    // >>> lcm(3l, 0l)\n    // (0l)\n    // >>> lcm(0l, 0l)\n    // (0l)\n\
    \    // >>> lcm(3l, 6l)\n    // (18l)\n    // >>> lcm(6l, 0l)\n    // (0l)\n \
    \   // >>> lcm(6l, 6l)\n    // (6l)\n    def lcm(a : Long, b : Long) : Long =\
    \ {\n        return a * b / gcd(a, b)\n    }\n\n    // Return the sum of the digits\
    \ of n.\n    // >>> sumDigits(123l)\n    // (3l)\n    // >>> sumDigits(0l)\n \
    \   // (0l)\n    // >>> sumDigits(-123l)\n    // (0l)\n    def sumDigits(n : Long)\
    \ : Long = {\n        return n % 10\n    }\n\n    // Return the sum of the digits\
    \ of n.\n    // >>> sumDigits(123l)\n    // (3l)\n    // >>> sumDigits(0l)\n \
    \   // (0l)\n    // >>>", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be >= 0\")\n        }\n        if (p < 0) {\n            throw new IllegalArgumentException(\"\
    p must be >= 0\")\n        }\n        if (p == 0) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0) {\n            return 0l\n  \
    \      }\n        if (p == 1) {\n            return 1l\n        }\n        if\
    \ (p == 2) {\n            return n\n        }\n        if (p == 3) {\n       \
    \     return (n * 2l) % 3l\n        }\n        if (p == 4) {\n            return\
    \ (n * 3l) % 4l\n        }\n        if (p == 5) {\n            return (n * 2l)\
    \ % 5l\n        }\n        if (p == 6) {\n            return (n * 3l) % 6l\n \
    \       }\n        if (p == 7) {\n            return (n * 2l) % 7l\n        }\n\
    \        if (p == 8) {\n            return (n * 3l) % 8l\n        }\n        if\
    \ (p == 9) {\n            return (n * 2l) % 9l\n        }\n        if (p == 10)\
    \ {\n            return (n * 3l) % 10l\n        }\n        if (p == 11) {\n  \
    \          return (n * 2l) % 11l\n        }\n        if (p == 12) {\n        \
    \    return (n * 3l) % 12l\n        }\n        if (p == 13) {\n            return\
    \ (n * 2l) % 13l\n        }\n        if (p == 14) {\n            return (n * 3l)\
    \ % 14l\n        }\n        if (p == 15) {\n            return (n * 2l) % 15l\n\
    \        }\n        if (p == 16) {\n            return (n * 3l) % 16l\n      \
    \  }\n        if (p == 17) {\n            return (n * 2l) % 17l\n        }\n \
    \       if (p == 18) {\n            return (n * 3l) % 18l\n", "        if (n <\
    \ 0l) {\n            throw new IllegalArgumentException(\"n must be >= 0\")\n\
    \        }\n        if (p < 0l) {\n            throw new IllegalArgumentException(\"\
    p must be >= 0\")\n        }\n        if (p == 0l) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0l) {\n            return 0l\n \
    \       }\n        return (n * (n - 1l) / 2l) % p", "        val m = n % p\n \
    \       if (m < 0) {\n            m += p\n        }\n        return m", "    \
    \    if (n < 0) {\n            throw new IllegalArgumentException(\"n must be\
    \ >= 0\")\n        }\n        if (p < 0) {\n            throw new IllegalArgumentException(\"\
    p must be >= 0\")\n        }\n        if (p == 0) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0) {\n            return 0l\n  \
    \      }\n        return (n * (n - 1) / 2) % p", "        if (n < 0) {\n     \
    \       throw new IllegalArgumentException(\"n must be non-negative\")\n     \
    \   }\n        if (p < 0) {\n            throw new IllegalArgumentException(\"\
    p must be non-negative\")\n        }\n        if (p == 0) {\n            throw\
    \ new IllegalArgumentException(\"p must be non-zero\")\n        }\n        return\
    \ (n % p)", "        if (n == 0) {\n            0l\n        } else {\n       \
    \     n % p\n        }\n    }\n\n    // Return the greatest common divisor of\
    \ a and b.\n    // >>> gcd(2l, 4l)\n    // (2l)\n    // >>> gcd(5l, 10l)\n   \
    \ // (5l)\n    // >>> gcd(5l, 0l)\n    // (5l)\n    // >>> gcd(0l, 0l)\n    //\
    \ (0l)\n    // >>> gcd(0l, 5l)\n    // (5l)\n    def gcd(a : Long, b : Long) :\
    \ Long = {\n        if (b == 0l) {\n            a\n        } else {\n        \
    \    gcd(b, a % b)\n        }\n    }\n\n    // Return the least common multiple\
    \ of a and b.\n    // >>> lcm(2l, 4l)\n    // (8l)\n    // >>> lcm(5l, 10l)\n\
    \    // (50l)\n    // >>> lcm(5l, 0l)\n    // (0l)\n    // >>> lcm(0l, 0l)\n \
    \   // (0l)\n    // >>> lcm(0l, 5l)\n    // (0l)\n    def lcm(a : Long, b : Long)\
    \ : Long = {\n        if (b == 0l) {\n            a\n        } else {\n      \
    \      a * b / gcd(a, b)\n        }\n    }\n\n    // Return the sum of the squares\
    \ of the numbers in the list.\n    // >>> sum_of_squares([1, 2, 3, 4])\n    //\
    \ (30l)\n    // >>> sum_of_squares([1, 2, 3, 4, 5])\n    // (55l)\n    // >>>\
    \ sum_of_squares([])\n    // (0l)\n    def sum_of_squares(numbers : List[Long])\
    \ : Long = {\n        if (numbers.isEmpty()) {\n            0l\n        } else\
    \ {\n            numbers.foreach(x => x * x)\n        }\n", "        n % p\n \
    \   }\n\n    // Return the number of 1's in the binary representation of n.\n\
    \    // >>> countOnes(0l)\n    // 0\n    // >>> countOnes(1l)\n    // 1\n    //\
    \ >>> countOnes(2l)\n    // 2\n    // >>> countOnes(3l)\n    // 2\n    // >>>\
    \ countOnes(4l)\n    // 3\n    // >>> countOnes(5l)\n    // 3\n    // >>> countOnes(6l)\n\
    \    // 4\n    // >>> countOnes(7l)\n    // 4\n    // >>> countOnes(8l)\n    //\
    \ 5\n    // >>> countOnes(9l)\n    // 5\n    // >>> countOnes(10l)\n    // 6\n\
    \    // >>> countOnes(11l)\n    // 6\n    // >>> countOnes(12l)\n    // 7\n  \
    \  // >>> countOnes(13l)\n    // 7\n    // >>> countOnes(14l)\n    // 8\n    //\
    \ >>> countOnes(15l)\n    // 8\n    def countOnes(n : Long) : Int = {\n      \
    \  var count = 0\n        while (n > 0) {\n            count += (n & 1)\n    \
    \        n >>= 1\n        }\n        return count\n    }\n\n    // Return the\
    \ number of 1's in the binary representation of n.\n    // >>> countOnes2(0l)\n\
    \    // 0\n    // >>> countOnes2(1l)\n    // 1\n    // >>> countOnes2(2l)\n  \
    \  // 2\n    // >>> countOnes2(3l)\n    // 2\n    // >>> countOnes2(4l)\n    //\
    \ 3\n    // >>> countOnes2(5l)\n    // 3\n    // >>> countOnes2(6l)\n    // 4\n\
    \    // >>> countOnes2(7l)\n    // 4\n    // >>> countOnes2(8l)\n    // 5\n  \
    \  // >>> countOnes2(9l)\n    // 5\n    // >>> countOnes2(10l)\n    // 6\n    ",
  "        if (n % p == 0) {\n            n / p\n        } else {\n            n %\
    \ p\n        }\n    }\n\n    // Return the greatest common divisor of a and b.\n\
    \    // >>> gcd((3l), (5l))\n    // (1l)\n    // >>> gcd((1101l), (101l))\n  \
    \  // (1l)\n    // >>> gcd((0l), (101l))\n    // (101l)\n    // >>> gcd((3l),\
    \ (11l))\n    // (1l)\n    // >>> gcd((100l), (101l))\n    // (101l)\n    def\
    \ gcd(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            b\n \
    \       } else if (b == 0) {\n            a\n        } else {\n            gcd(b,\
    \ a % b)\n        }\n    }\n\n    // Return the least common multiple of a and\
    \ b.\n    // >>> lcm((3l), (5l))\n    // (15l)\n    // >>> lcm((1101l), (101l))\n\
    \    // (101l)\n    // >>> lcm((0l), (101l))\n    // (0l)\n    // >>> lcm((3l),\
    \ (11l))\n    // (33l)\n    // >>> lcm((100l), (101l))\n    // (100l)\n    def\
    \ lcm(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            b\n \
    \       } else if (b == 0) {\n            a\n        } else {\n            a *\
    \ b / gcd(a, b)\n        }\n    }\n\n    // Return the sum of the digits of n.\n\
    \    // >>> sumDigits(123l)\n    // 3\n    // >>> sumDigits(1234l)\n    // 4\n\
    \    // >>> sumDigits(12345l)\n    // 5\n    def sumDigits(n : Long) : Long =\
    \ {\n        n % 10\n    }\n\n    // Return the sum of the digits of n.\n    //\
    \ >>> sumDigits(123l)\n    ", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be a non-negative number\")\n        }\n        if (p < 0) {\n        \
    \    throw new IllegalArgumentException(\"p must be a non-negative number\")\n\
    \        }\n        if (p == 0) {\n            throw new IllegalArgumentException(\"\
    p must be a non-zero number\")\n        }\n        if (n == 0) {\n           \
    \ return 0l\n        }\n        return (n * (n % p)) % p", "        if (n < 0l)\
    \ {\n            throw new IllegalArgumentException(\"n must be >= 0\")\n    \
    \    }\n        if (p < 0l) {\n            throw new IllegalArgumentException(\"\
    p must be >= 0\")\n        }\n        if (p == 0l) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0l) {\n            return 0l\n \
    \       }\n        return (n * (n % p)) % p", "        if (n < 0l) {\n       \
    \     throw new IllegalArgumentException(\"n must be non-negative\")\n       \
    \ }\n        if (p < 0l) {\n            throw new IllegalArgumentException(\"\
    p must be non-negative\")\n        }\n        if (p == 0l) {\n            throw\
    \ new IllegalArgumentException(\"p must be non-zero\")\n        }\n        if\
    \ (n == 0l) {\n            return 0l\n        }\n        return (n * (n - 1l)\
    \ / 2l) % p", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be >= 0\")\n        }\n        if (p < 0) {\n            throw new IllegalArgumentException(\"\
    p must be >= 0\")\n        }\n        if (p == 0) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0) {\n            return 0l\n  \
    \      }\n        return (n % p) + (n / p) * (p - 1)", "        val m = n % p\n\
    \        if (m == 0) {\n            m\n        } else {\n            m + p\n \
    \       }\n    }\n\n    // Return the greatest common divisor of a and b.\n  \
    \  // >>> gcd(3l, 5l)\n    // 1l\n    // >>> gcd(11l, 101l)\n    // 1l\n    //\
    \ >>> gcd(0l, 101l)\n    // 101l\n    // >>> gcd(3l, 11l)\n    // 1l\n    // >>>\
    \ gcd(100l, 101l)\n    // 101l\n    def gcd(a : Long, b : Long) : Long = {\n \
    \       val aa = a\n        val bb = b\n        if (aa == 0) {\n            bb\n\
    \        } else if (bb == 0) {\n            aa\n        } else {\n           \
    \ gcd(bb, aa % bb)\n        }\n    }\n\n    // Return the least common multiple\
    \ of a and b.\n    // >>> lcm(3l, 5l)\n    // 15l\n    // >>> lcm(11l, 101l)\n\
    \    // 101l\n    // >>> lcm(0l, 101l)\n    // 0l\n    // >>> lcm(3l, 11l)\n \
    \   // 3l\n    // >>> lcm(100l, 101l)\n    // 100l\n    def lcm(a : Long, b :\
    \ Long) : Long = {\n        val aa = a\n        val bb = b\n        if (aa ==\
    \ 0) {\n            bb\n        } else if (bb == 0) {\n            aa\n      \
    \  } else {\n            lcm(bb, aa / bb) * bb\n        }\n    }\n\n    // Return\
    \ the sum of a and b.\n    // >>> add(3l, 5l)\n    // 8l\n    // >>> add(11l,\
    \ 101l)\n    // 112l\n    // >>> add(0l, 101l)\n    // 101l\n    // >>> add(3l,\
    \ 11l)\n    // 14l\n    // >>> add(100l, 101l)\n    // 101l\n    def add(a", " \
    \       n % p\n    }\n\n    // Return the number of 1's in the binary representation\
    \ of n.\n    // >>> countBits(3l)\n    // 2\n    // >>> countBits(11l)\n    //\
    \ 3\n    // >>> countBits(0l)\n    // 0\n    // >>> countBits(-3l)\n    // 0\n\
    \    // >>> countBits(-11l)\n    // 0\n    def countBits(n : Long) : Long = {\n\
    \        n.bitCount()\n    }\n\n    // Return the number of 1's in the binary\
    \ representation of n.\n    // >>> countOnes(3l)\n    // 2\n    // >>> countOnes(11l)\n\
    \    // 3\n    // >>> countOnes(0l)\n    // 0\n    // >>> countOnes(-3l)\n   \
    \ // 0\n    // >>> countOnes(-11l)\n    // 0\n    def countOnes(n : Long) : Long\
    \ = {\n        n.bitCount()\n    }\n\n    // Return the number of 0's in the binary\
    \ representation of n.\n    // >>> countZeros(3l)\n    // 2\n    // >>> countZeros(11l)\n\
    \    // 3\n    // >>> countZeros(0l)\n    // 0\n    // >>> countZeros(-3l)\n \
    \   // 0\n    // >>> countZeros(-11l)\n    // 0\n    def countZeros(n : Long)\
    \ : Long = {\n        n.bitCount()\n    }\n\n    // Return the number of 1's in\
    \ the binary representation of n.\n    // >>> countBits(3l)\n    // 2\n    //\
    \ >>> countBits(11l)\n    // 3\n    // >>> countBits(0l)\n    // 0\n    // >>>\
    \ countBits(-3l)\n    // 0\n    // >>> countBits(-11l)\n    // 0\n    def countBits2(n\
    \ : Long) : Long = {\n        n.bitCount()\n    }\n\n    // Return the number\
    \ of 1's in the binary representation of n.\n    // >>> countOnes(3l)\n    //\
    \ 2\n    // >>> countOnes(11", "        if (n < 0l) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        if (p < 0l) {\n            throw\
    \ new IllegalArgumentException(\"p must be non-negative\")\n        }\n      \
    \  if (p == 0l) {\n            throw new IllegalArgumentException(\"p must be\
    \ non-zero\")\n        }\n        if (n == 0l) {\n            return 0l\n    \
    \    }\n        return (n * (n - 1l)) % p", "        if (n < 0l) {\n         \
    \   throw new RuntimeException(\"Negative numbers not supported\")\n        }\n\
    \        if (p < 0l) {\n            throw new RuntimeException(\"Negative numbers\
    \ not supported\")\n        }\n        if (p == 0l) {\n            throw new RuntimeException(\"\
    Division by zero not supported\")\n        }\n        return (n % p)\n    }\n\n\
    \    // Return the greatest common divisor of a and b.\n    // >>> gcd((3l), (5l))\n\
    \    // (1l)\n    // >>> gcd((1101l), (101l))\n    // (1l)\n    // >>> gcd((0l),\
    \ (101l))\n    // (1l)\n    // >>> gcd((3l), (11l))\n    // (1l)\n    // >>> gcd((100l),\
    \ (101l))\n    // (1l)\n    def gcd(a : Long, b : Long) : Long = {\n        if\
    \ (a < 0l) {\n            throw new RuntimeException(\"Negative numbers not supported\"\
    )\n        }\n        if (b < 0l) {\n            throw new RuntimeException(\"\
    Negative numbers not supported\")\n        }\n        if (a == 0l) {\n       \
    \     return b\n        }\n        if (b == 0l) {\n            return a\n    \
    \    }\n        return modp(gcd(b, a % b), a)\n    }\n\n    // Return the least\
    \ common multiple of a and b.\n    // >>> lcm((3l), (5l))\n    // (15l)\n    //\
    \ >>> lcm((1101l), (101l))\n    // (101l)\n    // >>> lcm((0l), (101l))\n    //\
    \ (0l)\n    // >>> lcm((3l), (11l))\n    // (11l)\n    // >>> lcm((100l), (101l))\n\
    \    // (100l)\n    def lcm(a : Long, b : Long) : Long = {\n        if (a < 0l)\
    \ {\n            throw new RuntimeException(\"Negative numbers not supported\"\
    )\n        }\n        if (b < 0l) {\n            throw new Runtime", '        n
    % p', "        if (n % p == 0) {\n            n\n        } else {\n          \
    \  n + p - (n % p)\n        }\n    }\n\n    // Return the greatest common divisor\
    \ of a and b.\n    // >>> gcd(3l, 5l)\n    // 1l\n    // >>> gcd(3l, 6l)\n   \
    \ // 3l\n    // >>> gcd(3l, 0l)\n    // 3l\n    // >>> gcd(0l, 0l)\n    // 0l\n\
    \    // >>> gcd(3l, -3l)\n    // 3l\n    // >>> gcd(-3l, 0l)\n    // 3l\n    //\
    \ >>> gcd(0l, -3l)\n    // 3l\n    // >>> gcd(-3l, -3l)\n    // 1l\n    // >>>\
    \ gcd(-3l, -6l)\n    // 3l\n    def gcd(a : Long, b : Long) : Long = {\n     \
    \   if (b == 0l) {\n            a\n        } else {\n            gcd(b, a % b)\n\
    \        }\n    }\n\n    // Return the least common multiple of a and b.\n   \
    \ // >>> lcm(3l, 5l)\n    // 15l\n    // >>> lcm(3l, 6l)\n    // 18l\n    // >>>\
    \ lcm(3l, 0l)\n    // 0l\n    // >>> lcm(0l, 0l)\n    // 0l\n    // >>> lcm(3l,\
    \ -3l)\n    // -3l\n    // >>> lcm(-3l, 0l)\n    // 0l\n    // >>> lcm(0l, -3l)\n\
    \    // -3l\n    // >>> lcm(-3l, -3l)\n    // 0l\n    // >>> lcm(-3l, -6l)\n \
    \   // -18l\n    def lcm(a : Long, b : Long) : Long = {\n        if (b == 0l)\
    \ {\n            a\n        } else {\n            a * (b / gcd(a, b))\n      \
    \  }\n    }\n\n    // Return the", "        if (n < 0) {\n            throw new\
    \ IllegalArgumentException(\"n must be >= 0\")\n        }\n        if (p < 0)\
    \ {\n            throw new IllegalArgumentException(\"p must be >= 0\")\n    \
    \    }\n        if (p == 0) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0) {\n            return 0l\n  \
    \      }\n        return (n * (n - 1) / 2) % p", '        n % p', "        val\
    \ nn = n.toInt\n        val pp = p.toInt\n        val r = nn % pp\n        if\
    \ (r == 0) {\n            r = pp\n        }\n        return r", "        if (n\
    \ < 0) {\n            throw new RuntimeException(\"Negative number\")\n      \
    \  }\n        if (p < 0) {\n            throw new RuntimeException(\"Negative\
    \ number\")\n        }\n        if (p == 0) {\n            throw new RuntimeException(\"\
    Zero modulus\")\n        }\n        return (n * (p - 1l)) % p\n    }\n\n    //\
    \ Return the greatest common divisor of a and b.\n    // >>> gcd((2l), (3l))\n\
    \    // (1l)\n    // >>> gcd((3l), (5l))\n    // (1l)\n    // >>> gcd((0l), (0l))\n\
    \    // (0l)\n    // >>> gcd((0l), (1l))\n    // (1l)\n    // >>> gcd((1l), (2l))\n\
    \    // (1l)\n    // >>> gcd((2l), (3l))\n    // (1l)\n    // >>> gcd((3l), (5l))\n\
    \    // (1l)\n    // >>> gcd((11l), (101l))\n    // (1l)\n    def gcd(a : Long,\
    \ b : Long) : Long = {\n        if (a < 0) {\n            throw new RuntimeException(\"\
    Negative number\")\n        }\n        if (b < 0) {\n            throw new RuntimeException(\"\
    Negative number\")\n        }\n        if (a == 0) {\n            return b\n \
    \       }\n        if (b == 0) {\n            return a\n        }\n        return\
    \ gcd(b, a % b)\n    }\n\n    // Return the least common multiple of a and b.\n\
    \    // >>> lcm((2l), (3l))\n    // (6l)\n    // >>> lcm((3l), (5l))\n    // (15l)\n\
    \    // >>> lcm((0l), (0l))\n    // (0l)\n    // >>> lcm((0l), (1l))\n    // (0l)\n\
    \    // >>> lcm((1l), (2l))\n    // (2l)\n    // >>> lcm((2l), (3l))\n", "   \
    \     if (n < 0) {\n            throw new IllegalArgumentException(\"n must be\
    \ non-negative\")\n        }\n        if (p < 0) {\n            throw new IllegalArgumentException(\"\
    p must be non-negative\")\n        }\n        if (p == 0) {\n            throw\
    \ new IllegalArgumentException(\"p must be non-zero\")\n        }\n        return\
    \ (n * (n - 1) / 2) % p", "        if (n == 0l) {\n            0l\n        } else\
    \ {\n            (n * 2l) % p\n        }", '        return _.modp(n, p)', "  \
    \      if (n == 0) {\n            0l\n        } else {\n            (n * 2l) %\
    \ p\n        }", "        val nn = n.toInt\n        val pp = p.toInt\n       \
    \ if (nn < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    )\n        }\n        if (pp < 0) {\n            throw new IllegalArgumentException(\"\
    p must be non-negative\")\n        }\n        if (nn >= pp) {\n            throw\
    \ new IllegalArgumentException(\"n must be less than p\")\n        }\n       \
    \ val m = 1l\n        for (i <- 0 until (nn - pp)) {\n            m *= 2l\n  \
    \      }\n        m %= p\n        return m\n    }\n\n    // Return the number\
    \ of bits set in n.\n    // >>> countBits(0l)\n    // 0\n    // >>> countBits(1l)\n\
    \    // 1\n    // >>> countBits(2l)\n    // 2\n    // >>> countBits(3l)\n    //\
    \ 2\n    // >>> countBits(4l)\n    // 3\n    // >>> countBits(5l)\n    // 3\n\
    \    // >>> countBits(6l)\n    // 4\n    // >>> countBits(7l)\n    // 4\n    //\
    \ >>> countBits(8l)\n    // 5\n    // >>> countBits(9l)\n    // 5\n    // >>>\
    \ countBits(10l)\n    // 6\n    // >>> countBits(11l)\n    // 6\n    // >>> countBits(12l)\n\
    \    // 7\n    // >>> countBits(13l)\n    // 7\n    // >>> countBits(14l)\n  \
    \  // 8\n    // >>> countBits(15l)\n    // 8\n    // >>> countBits(16l)\n    //\
    \ 9\n    // >>> countBits(17l)\n    // 9\n    // >>> countBits(18l)\n    // 10\n\
    \    // >>> countBits(19l)\n    // 10\n    // >>> countBits(20l)\n    // 11\n\
    \    // >>> countBits(21l)\n    // 11\n    // >>> countBits(22l)\n    // 12\n\
    \    // >>> countBits(23", "        if (n < 0l) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        if (p < 0l) {\n            throw\
    \ new IllegalArgumentException(\"p must be non-negative\")\n        }\n      \
    \  if (p == 0l) {\n            throw new IllegalArgumentException(\"p must be\
    \ non-zero\")\n        }\n        if (p == 1l) {\n            return n\n     \
    \   }\n        return (n * modp(n - 1l, p)) % p\n    }\n\n    // Return the greatest\
    \ common divisor of a and b.\n    // >>> gcd((2l), (3l))\n    // (1l)\n    //\
    \ >>> gcd((-2l), (3l))\n    // (2l)\n    // >>> gcd((2l), (-3l))\n    // (1l)\n\
    \    // >>> gcd((-2l), (-3l))\n    // (1l)\n    // >>> gcd((2l), (0l))\n    //\
    \ (0l)\n    // >>> gcd((-2l), (0l))\n    // (0l)\n    // >>> gcd((0l), (0l))\n\
    \    // (0l)\n    // >>> gcd((1l), (0l))\n    // (0l)\n    // >>> gcd((0l), (1l))\n\
    \    // (1l)\n    def gcd(a : Long, b : Long) : Long = {\n        if (a < 0l)\
    \ {\n            a = -a\n        }\n        if (b < 0l) {\n            b = -b\n\
    \        }\n        if (a == 0l) {\n            return b\n        }\n        if\
    \ (b == 0l) {\n            return a\n        }\n        while (true) {\n     \
    \       if (a > b) {\n                a = a - b\n            } else {\n      \
    \          b = b - a\n            }\n            if (a == 0l) {\n            \
    \    return b\n            }\n            if (b == 0l) {\n                return\
    \ a\n            }\n        }\n    }\n\n    // Return the least common multiple\
    \ of a and b.", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be >= 0\")\n        }\n        if (p < 0) {\n            throw new IllegalArgumentException(\"\
    p must be >= 0\")\n        }\n        if (p == 0) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0) {\n            return 0l\n  \
    \      }\n        return (n % p) + (n / p) * (p - 1l)\n    }\n\n    // Return\
    \ the greatest common divisor of a and b.\n    // >>> gcd(3l, 5l)\n    // (1l)\n\
    \    // >>> gcd(11l, 101l)\n    // (1l)\n    // >>> gcd(0l, 101l)\n    // (101l)\n\
    \    // >>> gcd(3l, 11l)\n    // (1l)\n    // >>> gcd(100l, 101l)\n    // (1l)\n\
    \    def gcd(a : Long, b : Long) : Long = {\n        if (a < 0) {\n          \
    \  throw new IllegalArgumentException(\"a must be >= 0\")\n        }\n       \
    \ if (b < 0) {\n            throw new IllegalArgumentException(\"b must be >=\
    \ 0\")\n        }\n        if (a == 0) {\n            return b\n        }\n  \
    \      if (b == 0) {\n            return a\n        }\n        return gcd(b, a\
    \ % b)\n    }\n\n    // Return the least common multiple of a and b.\n    // >>>\
    \ lcm(3l, 5l)\n    // (15l)\n    // >>> lcm(11l, 101l)\n    // (101l)\n    //\
    \ >>> lcm(0l, 101l)\n    // (0l)\n    // >>> lcm(3l, 11l)\n    // (3l)\n    //\
    \ >>> lcm(100l, 101l)\n    // (100l)\n    def lcm(a : Long, b : Long) : Long =\
    \ {\n        if (a < 0) {\n            throw new IllegalArgumentException(\"a\
    \ must be >= 0\")\n        ", "        n % p\n    }\n\n    // Return the greatest\
    \ common divisor of a and b.\n    // >>> gcd(3l, 5l)\n    // (1l)\n    // >>>\
    \ gcd(3l, 6l)\n    // (3l)\n    // >>> gcd(3l, 0l)\n    // (1l)\n    // >>> gcd(0l,\
    \ 0l)\n    // (0l)\n    // >>> gcd(3l, -3l)\n    // (1l)\n    // >>> gcd(3l, -6l)\n\
    \    // (3l)\n    // >>> gcd(3l, -0l)\n    // (1l)\n    // >>> gcd(0l, -0l)\n\
    \    // (0l)\n    // >>> gcd(-3l, -6l)\n    // (3l)\n    // >>> gcd(-3l, -0l)\n\
    \    // (1l)\n    // >>> gcd(-3l, 0l)\n    // (1l)\n    // >>> gcd(-6l, 0l)\n\
    \    // (0l)\n    // >>> gcd(-6l, -0l)\n    // (6l)\n    // >>> gcd(-0l, -0l)\n\
    \    // (0l)\n    def gcd(a : Long, b : Long) : Long = {\n        if (b == 0l)\
    \ {\n            return a\n        } else {\n            return gcd(b, a % b)\n\
    \        }\n    }\n\n    // Return the least common multiple of a and b.\n   \
    \ // >>> lcm(3l, 5l)\n    // (15l)\n    // >>> lcm(3l, 6l)\n    // (18l)\n   \
    \ // >>> lcm(3l, 0l)\n    // (0l)\n    // >>> lcm(0l, 0l)\n    // (0l)\n    //\
    \ >>> lcm(3l, -3l)\n    // (-3l)\n    // >>> lcm(3l, -6l)\n    // (0l)\n    //\
    \ >>> lcm(3l, -0", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        if (p < 0) {\n            throw\
    \ new IllegalArgumentException(\"p must be non-negative\")\n        }\n      \
    \  if (p == 0) {\n            throw new IllegalArgumentException(\"p must be non-zero\"\
    )\n        }\n        if (n == 0) {\n            return 0l\n        }\n      \
    \  return (n * (n - 1l) / 2l) % p\n    }\n\n    // Return the greatest common\
    \ divisor of a and b.\n    // >>> gcd(3l, 5l)\n    // 5l\n    // >>> gcd(11l,\
    \ 101l)\n    // 101l\n    // >>> gcd(0l, 101l)\n    // 101l\n    // >>> gcd(3l,\
    \ 11l)\n    // 1l\n    // >>> gcd(100l, 101l)\n    // 101l\n    def gcd(a : Long,\
    \ b : Long) : Long = {\n        if (a < 0) {\n            throw new IllegalArgumentException(\"\
    a must be non-negative\")\n        }\n        if (b < 0) {\n            throw\
    \ new IllegalArgumentException(\"b must be non-negative\")\n        }\n      \
    \  if (a == 0) {\n            return b\n        }\n        if (b == 0) {\n   \
    \         return a\n        }\n        return gcd(b, a % b)\n    }\n\n    // Return\
    \ the least common multiple of a and b.\n    // >>> lcm(3l, 5l)\n    // 15l\n\
    \    // >>> lcm(11l, 101l)\n    // 101l\n    // >>> lcm(0l, 101l)\n    // 101l\n\
    \    // >>> lcm(3l, 11l)\n    // 3l\n    // >>> lcm(100l, 101l)\n    // 101l\n\
    \    def lcm(a : Long, b : Long) : Long = {\n        if (a < 0) {\n          \
    \  throw new IllegalArgumentException(\"a must be non-negative\")\n        }\n\
    \        if (b < 0) {\n            throw new IllegalArgument", "        if (n\
    \ % p == 0) {\n            n\n        } else {\n            n + p - n % p\n  \
    \      }\n    }\n\n    // Return the greatest common divisor of a and b.\n   \
    \ // >>> gcd(3l, 5l)\n    // 5l\n    // >>> gcd(11l, 101l)\n    // 101l\n    //\
    \ >>> gcd(0l, 101l)\n    // 1l\n    // >>> gcd(3l, 11l)\n    // 1l\n    // >>>\
    \ gcd(100l, 101l)\n    // 101l\n    def gcd(a : Long, b : Long) : Long = {\n \
    \       if (b == 0) {\n            a\n        } else {\n            gcd(b, a %\
    \ b)\n        }\n    }\n\n    // Return the least common multiple of a and b.\n\
    \    // >>> lcm(3l, 5l)\n    // 15l\n    // >>> lcm(11l, 101l)\n    // 1011l\n\
    \    // >>> lcm(0l, 101l)\n    // 0l\n    // >>> lcm(3l, 11l)\n    // 3l\n   \
    \ // >>> lcm(100l, 101l)\n    // 100l\n    def lcm(a : Long, b : Long) : Long\
    \ = {\n        if (b == 0) {\n            a\n        } else {\n            a *\
    \ b / gcd(a, b)\n        }\n    }\n\n    // Return the sum of the squares of the\
    \ first n natural numbers.\n    // >>> sumOfSquares(0)\n    // 0l\n    // >>>\
    \ sumOfSquares(1)\n    // 1l\n    // >>> sumOfSquares(2)\n    // 5l\n    // >>>\
    \ sumOfSquares(3)\n    // 14l\n    def sumOfSquares(n : Long) : Long = {\n   \
    \     n * (n + 1) / 2\n    }\n\n    // Return the sum of the first n natural numbers.\n\
    \    // >>> sum(0)\n    // 0l\n    // >>> sum(1)\n    // 1l\n    // >>> sum(2)\n\
    \    // 3l\n    ", '        n % p', "        return (n % p) + p\n    }\n\n   \
    \ // Return the greatest common divisor of a and b.\n    // >>> gcd(3l, 5l)\n\
    \    // (1l)\n    // >>> gcd(3l, 0l)\n    // (3l)\n    // >>> gcd(0l, 0l)\n  \
    \  // (0l)\n    // >>> gcd(0l, 3l)\n    // (3l)\n    // >>> gcd(3l, 3l)\n    //\
    \ (3l)\n    def gcd(a : Long, b : Long) : Long = {\n        if (b == 0l) {\n \
    \           return a\n        } else {\n            return gcd(b, a % b)\n   \
    \     }\n    }\n\n    // Return the least common multiple of a and b.\n    //\
    \ >>> lcm(3l, 5l)\n    // (15l)\n    // >>> lcm(3l, 0l)\n    // (0l)\n    // >>>\
    \ lcm(0l, 0l)\n    // (0l)\n    // >>> lcm(0l, 3l)\n    // (0l)\n    // >>> lcm(3l,\
    \ 3l)\n    // (3l)\n    def lcm(a : Long, b : Long) : Long = {\n        return\
    \ (a * b) / gcd(a, b)\n    }\n\n    // Return the sum of a and b.\n    // >>>\
    \ add(3l, 5l)\n    // (8l)\n    // >>> add(3l, 0l)\n    // (3l)\n    // >>> add(0l,\
    \ 0l)\n    // (0l)\n    // >>> add(0l, 3l)\n    // (3l)\n    // >>> add(3l, 3l)\n\
    \    // (6l)\n    def add(a : Long, b : Long) : Long = {\n        return a + b\n\
    \    }\n\n    // Return the product of a and b.\n    // >>> mult(3l, 5l)\n   \
    \ // (15l)\n    // >>> mult(3l, 0l)\n    // (0l", "        if (n < 0) {\n    \
    \        throw new IllegalArgumentException(\"n must be a non-negative number\"\
    )\n        }\n        if (p < 0) {\n            throw new IllegalArgumentException(\"\
    p must be a non-negative number\")\n        }\n        if (p == 0) {\n       \
    \     throw new IllegalArgumentException(\"p must be a non-zero number\")\n  \
    \      }\n        if (n == 0) {\n            return 0l\n        }\n        return\
    \ (n * (n % p)) % p", "        if (n < 0l) {\n            throw new IllegalArgumentException(\"\
    n must be >= 0\")\n        }\n        if (p < 0l) {\n            throw new IllegalArgumentException(\"\
    p must be >= 0\")\n        }\n        if (p == 0l) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0l) {\n            return 0l\n \
    \       }\n        return (n * (n - 1l) / 2l) % p", '        n % p', "       \
    \ if (n < 0) {\n            throw new IllegalArgumentException(\"n < 0\")\n  \
    \      }\n        if (p < 0) {\n            throw new IllegalArgumentException(\"\
    p < 0\")\n        }\n        if (p == 0) {\n            throw new IllegalArgumentException(\"\
    p == 0\")\n        }\n        return (n % p) + (n / p) * (p - 1)\n    }\n\n  \
    \  // Return the greatest common divisor of a and b.\n    // >>> gcd(3l, 5l)\n\
    \    // (1l)\n    // >>> gcd(11l, 101l)\n    // (1l)\n    // >>> gcd(0l, 101l)\n\
    \    // (101l)\n    // >>> gcd(3l, 11l)\n    // (1l)\n    // >>> gcd(100l, 101l)\n\
    \    // (1l)\n    def gcd(a : Long, b : Long) : Long = {\n        if (a < 0) {\n\
    \            throw new IllegalArgumentException(\"a < 0\")\n        }\n      \
    \  if (b < 0) {\n            throw new IllegalArgumentException(\"b < 0\")\n \
    \       }\n        if (a == 0) {\n            return b\n        }\n        if\
    \ (b == 0) {\n            return a\n        }\n        return gcd(b, a % b)\n\
    \    }\n\n    // Return the least common multiple of a and b.\n    // >>> lcm(3l,\
    \ 5l)\n    // (15l)\n    // >>> lcm(11l, 101l)\n    // (101l)\n    // >>> lcm(0l,\
    \ 101l)\n    // (0l)\n    // >>> lcm(3l, 11l)\n    // (3l)\n    // >>> lcm(100l,\
    \ 101l)\n    // (100l)\n    def lcm(a : Long, b : Long) : Long = {\n        if\
    \ (a < 0) {\n            throw new IllegalArgumentException(\"a < 0\")\n     \
    \   }\n        if (b < 0) {\n            throw new IllegalArgumentException(\"\
    b < 0\")\n        }\n        if (", "        if (n < 0l) {\n            throw\
    \ new java.lang.IllegalArgumentException(\"n must be >= 0\")\n        }\n    \
    \    if (p < 0l) {\n            throw new java.lang.IllegalArgumentException(\"\
    p must be >= 0\")\n        }\n        if (p == 0l) {\n            throw new java.lang.IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0l) {\n            return 0l\n \
    \       }\n        return (n * (n - 1l)) % p", "        n % p\n    }\n\n    //\
    \ Return the greatest common divisor of a and b.\n    // >>> gcd(3l, 5l)\n   \
    \ // (1l)\n    // >>> gcd(3l, 0l)\n    // (3l)\n    // >>> gcd(0l, 0l)\n    //\
    \ (0l)\n    // >>> gcd(3l, -5l)\n    // (1l)\n    // >>> gcd(-3l, 5l)\n    //\
    \ (1l)\n    // >>> gcd(-3l, 0l)\n    // (3l)\n    // >>> gcd(3l, -5l)\n    //\
    \ (1l)\n    // >>> gcd(-3l, -5l)\n    // (1l)\n    def gcd(a : Long, b : Long)\
    \ : Long = {\n        if (b == 0l) {\n            return a\n        } else {\n\
    \            return gcd(b, a % b)\n        }\n    }\n\n    // Return the least\
    \ common multiple of a and b.\n    // >>> lcm(3l, 5l)\n    // (15l)\n    // >>>\
    \ lcm(3l, 0l)\n    // (0l)\n    // >>> lcm(0l, 0l)\n    // (0l)\n    // >>> lcm(3l,\
    \ -5l)\n    // (-15l)\n    // >>> lcm(-3l, 5l)\n    // (-15l)\n    // >>> lcm(-3l,\
    \ 0l)\n    // (0l)\n    // >>> lcm(3l, -5l)\n    // (-15l)\n    // >>> lcm(-3l,\
    \ -5l)\n    // (15l)\n    def lcm(a : Long, b : Long) : Long = {\n        if (b\
    \ == 0l) {\n            return a\n        } else {\n            return a * b /\
    \ gcd(a, b)\n        }\n    }\n\n    // Return the sum of a and b.\n    // >>>\
    \ add(3l, 5l)\n    // (8l)\n    // >>> add(3l,", "        if (n < 0) {\n     \
    \       throw new IllegalArgumentException(\"n must be >= 0\")\n        }\n  \
    \      if (p < 0) {\n            throw new IllegalArgumentException(\"p must be\
    \ >= 0\")\n        }\n        if (p == 0) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0) {\n            return 0l\n  \
    \      }\n        if (p == 1) {\n            return n\n        }\n        return\
    \ (n * modp(n - 1, p)) % p", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be >= 0\")\n        }\n        if (p < 0) {\n            throw new IllegalArgumentException(\"\
    p must be >= 0\")\n        }\n        if (p == 0) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        return (n % p)\n    }\n\n    // Return the\
    \ greatest common divisor of a and b.\n    // >>> gcd((3l), (5l))\n    // (1l)\n\
    \    // >>> gcd((1101l), (101l))\n    // (1l)\n    // >>> gcd((0l), (101l))\n\
    \    // (1l)\n    // >>> gcd((3l), (11l))\n    // (1l)\n    // >>> gcd((100l),\
    \ (101l))\n    // (1l)\n    def gcd(a : Long, b : Long) : Long = {\n        if\
    \ (a < 0) {\n            throw new IllegalArgumentException(\"a must be >= 0\"\
    )\n        }\n        if (b < 0) {\n            throw new IllegalArgumentException(\"\
    b must be >= 0\")\n        }\n        if (a == 0) {\n            return b\n  \
    \      }\n        if (b == 0) {\n            return a\n        }\n        return\
    \ gcd(b, a % b)\n    }\n\n    // Return the least common multiple of a and b.\n\
    \    // >>> lcm((3l), (5l))\n    // (15l)\n    // >>> lcm((1101l), (101l))\n \
    \   // (101l)\n    // >>> lcm((0l), (101l))\n    // (0l)\n    // >>> lcm((3l),\
    \ (11l))\n    // (11l)\n    // >>> lcm((100l), (101l))\n    // (100l)\n    def\
    \ lcm(a : Long, b : Long) : Long = {\n        if (a < 0) {\n            throw\
    \ new IllegalArgumentException(\"a must be >= 0\")\n        }\n        if (b <\
    \ 0) {\n            throw new IllegalArgumentException", "        if (n < 0) {\n\
    \            throw new IllegalArgumentException(\"n must be >= 0\")\n        }\n\
    \        if (p < 0) {\n            throw new IllegalArgumentException(\"p must\
    \ be >= 0\")\n        }\n        if (p == 0) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0) {\n            return 0l\n  \
    \      }\n        return (n * (n % p)) % p\n    }\n\n    // Return the greatest\
    \ common divisor of a and b.\n    // >>> gcd(3l, 5l)\n    // (1l)\n    // >>>\
    \ gcd(11l, 101l)\n    // (1l)\n    // >>> gcd(0l, 101l)\n    // (101l)\n    //\
    \ >>> gcd(3l, 11l)\n    // (1l)\n    // >>> gcd(100l, 101l)\n    // (101l)\n \
    \   def gcd(a : Long, b : Long) : Long = {\n        if (a < 0) {\n           \
    \ throw new IllegalArgumentException(\"a must be >= 0\")\n        }\n        if\
    \ (b < 0) {\n            throw new IllegalArgumentException(\"b must be >= 0\"\
    )\n        }\n        if (b == 0) {\n            return a\n        }\n       \
    \ return gcd(b, a % b)\n    }\n\n    // Return the least common multiple of a\
    \ and b.\n    // >>> lcm(3l, 5l)\n    // (15l)\n    // >>> lcm(11l, 101l)\n  \
    \  // (101l)\n    // >>> lcm(0l, 101l)\n    // (0l)\n    // >>> lcm(3l, 11l)\n\
    \    // (3l)\n    // >>> lcm(100l, 101l)\n    // (100l)\n    def lcm(a : Long,\
    \ b : Long) : Long = {\n        if (a < 0) {\n            throw new IllegalArgumentException(\"\
    a must be >= 0\")\n        }\n        if (b < 0) {\n            throw new IllegalArgumentException(\"\
    b must be >= 0", "        if (n == 0) {\n            0l\n        } else if (n\
    \ < 0) {\n            modp(-n, p)\n        } else {\n            n % p\n     \
    \   }\n    }\n\n    // Return the greatest common divisor of a and b.\n    //\
    \ >>> gcd(3l, 5l)\n    // (1l)\n    // >>> gcd(3l, 0l)\n    // (3l)\n    // >>>\
    \ gcd(0l, 0l)\n    // (0l)\n    // >>> gcd(3l, 11l)\n    // (1l)\n    // >>> gcd(100l,\
    \ 101l)\n    // (1l)\n    def gcd(a : Long, b : Long) : Long = {\n        if (b\
    \ == 0) {\n            a\n        } else {\n            gcd(b, a % b)\n      \
    \  }\n    }\n\n    // Return the least common multiple of a and b.\n    // >>>\
    \ lcm(3l, 5l)\n    // (15l)\n    // >>> lcm(3l, 0l)\n    // (0l)\n    // >>> lcm(0l,\
    \ 0l)\n    // (0l)\n    // >>> lcm(3l, 11l)\n    // (33l)\n    // >>> lcm(100l,\
    \ 101l)\n    // (101l)\n    def lcm(a : Long, b : Long) : Long = {\n        if\
    \ (b == 0) {\n            0l\n        } else {\n            a * (b / gcd(a, b))\n\
    \        }\n    }\n\n    // Return the sum of a and b.\n    // >>> add(3l, 5l)\n\
    \    // (8l)\n    // >>> add(3l, 0l)\n    // (3l)\n    // >>> add(0l, 0l)\n  \
    \  // (0l)\n    // >>> add(3l, 11l)\n    // (14l)\n    // >>> add(100l, 101l)\n\
    \    // (201l)\n    def add(a : Long, b : Long) : Long = {\n        a + b", " \
    \       val nn = n.toInt\n        val pp = p.toInt\n        if (nn >= 0 && pp\
    \ >= 0) {\n            val r = nn % pp\n            if (r == 0) {\n          \
    \      return nn\n            } else {\n                return r\n           \
    \ }\n        } else {\n            throw new IllegalArgumentException(\"n and\
    \ p must be >= 0\")\n        }\n    }\n\n    // Return the greatest common divisor\
    \ of a and b.\n    // >>> gcd((3l), (5l))\n    // (1l)\n    // >>> gcd((1101l),\
    \ (101l))\n    // (1l)\n    // >>> gcd((0l), (101l))\n    // (101l)\n    // >>>\
    \ gcd((3l), (11l))\n    // (1l)\n    // >>> gcd((100l), (101l))\n    // (1l)\n\
    \    def gcd(a : Long, b : Long) : Long = {\n        val aa = a.toInt\n      \
    \  val bb = b.toInt\n        if (aa >= 0 && bb >= 0) {\n            val r = gcd(aa,\
    \ bb)\n            if (r == 0) {\n                return r\n            } else\
    \ {\n                return r\n            }\n        } else {\n            throw\
    \ new IllegalArgumentException(\"a and b must be >= 0\")\n        }\n    }\n\n\
    \    // Return the least common multiple of a and b.\n    // >>> lcm((3l), (5l))\n\
    \    // (15l)\n    // >>> lcm((1101l), (101l))\n    // (101l)\n    // >>> lcm((0l),\
    \ (101l))\n    // (0l)\n    // >>> lcm((3l), (11l))\n    // (3l)\n    // >>> lcm((100l),\
    \ (101l))\n    // (100l)\n    def lcm(a : Long, b : Long) : Long = {\n       \
    \ val aa = a.toInt\n        val bb = b.toInt\n        if (aa >= 0 && bb >= 0)\
    \ {\n            val r = lcm(", "        val nn = n.mod(p)\n        if (nn ==\
    \ 0) {\n            nn = p\n        }\n        return nn\n    }\n\n    // Return\
    \ the number of bits set in the integer n.\n    // >>> bitcount(3l)\n    // 2\n\
    \    // >>> bitcount(1101l)\n    // 3\n    // >>> bitcount(0l)\n    // 0\n   \
    \ // >>> bitcount(3l)\n    // 2\n    // >>> bitcount(100l)\n    // 1\n    def\
    \ bitcount(n : Long) : Long = {\n        val nn = n.toInt\n        if (nn == 0)\
    \ {\n            return 0\n        }\n        return 1 + bitcount(nn.shiftRight(1).and(1l\
    \ << nn.intValue()))\n    }\n\n    // Return the number of bits set in the integer\
    \ n.\n    // >>> bitcount(3l)\n    // 2\n    // >>> bitcount(1101l)\n    // 3\n\
    \    // >>> bitcount(0l)\n    // 0\n    // >>> bitcount(3l)\n    // 2\n    //\
    \ >>> bitcount(100l)\n    // 1\n    def bitcount2(n : Long) : Long = {\n     \
    \   val nn = n.toInt\n        if (nn == 0) {\n            return 0\n        }\n\
    \        return 1 + bitcount2(nn.shiftRight(1).and(1l << nn.intValue()))\n   \
    \ }\n\n    // Return the number of bits set in the integer n.\n    // >>> bitcount(3l)\n\
    \    // 2\n    // >>> bitcount(1101l)\n    // 3\n    // >>> bitcount(0l)\n   \
    \ // 0\n    // >>> bitcount(3l)\n    // 2\n    // >>> bitcount(100l)\n    // 1\n\
    \    def bitcount3(n : Long) : Long = {\n        val nn = n.toInt\n        if\
    \ (nn == 0) {\n            return 0\n        }\n        return 1 + bitcount3(nn.shiftRight(1).and(1l\
    \ << nn.intValue()))\n    }\n\n    // Return the number of", "        n % p\n\
    \    }\n\n    // Return the greatest common divisor of a and b.\n    // >>> gcd(5l,\
    \ 7l)\n    // (1l)\n    // >>> gcd(5l, 0l)\n    // (5l)\n    // >>> gcd(0l, 0l)\n\
    \    // (0l)\n    // >>> gcd(0l, 5l)\n    // (5l)\n    // >>> gcd(5l, 5l)\n  \
    \  // (5l)\n    def gcd(a : Long, b : Long) : Long = {\n        if (b == 0l) {\n\
    \            return a\n        } else {\n            return gcd(b, a % b)\n  \
    \      }\n    }\n\n    // Return the least common multiple of a and b.\n    //\
    \ >>> lcm(5l, 7l)\n    // (35l)\n    // >>> lcm(5l, 0l)\n    // (5l)\n    // >>>\
    \ lcm(0l, 0l)\n    // (0l)\n    // >>> lcm(0l, 5l)\n    // (0l)\n    // >>> lcm(5l,\
    \ 5l)\n    // (5l)\n    def lcm(a : Long, b : Long) : Long = {\n        return\
    \ (a * b) / gcd(a, b)\n    }\n\n    // Return the sum of the digits of n.\n  \
    \  // >>> sumDigits(123l)\n    // (3l)\n    // >>> sumDigits(0l)\n    // (0l)\n\
    \    // >>> sumDigits(-123l)\n    // (0l)\n    def sumDigits(n : Long) : Long\
    \ = {\n        return n % 10l\n    }\n\n    // Return the sum of the digits of\
    \ n.\n    // >>> sumDigits(123l)\n    // (3l)\n    // >>> sumDigits(0l)\n    //\
    \ (0l)\n    // >>> sumDigits(-123l)\n    // (0l)\n    def sumDigits(n : Long)\
    \ : Long = {\n        return n % 10l\n    }\n\n    //", "        n % p\n    }\n\
    \n    // Return the number of bits set in the given long.\n    // >>> countBits(0l)\n\
    \    // 0\n    // >>> countBits(1l)\n    // 1\n    // >>> countBits(2l)\n    //\
    \ 2\n    // >>> countBits(3l)\n    // 2\n    // >>> countBits(4l)\n    // 3\n\
    \    // >>> countBits(5l)\n    // 3\n    // >>> countBits(6l)\n    // 4\n    //\
    \ >>> countBits(7l)\n    // 4\n    // >>> countBits(8l)\n    // 5\n    // >>>\
    \ countBits(9l)\n    // 5\n    // >>> countBits(10l)\n    // 6\n    // >>> countBits(11l)\n\
    \    // 6\n    // >>> countBits(12l)\n    // 7\n    // >>> countBits(13l)\n  \
    \  // 7\n    // >>> countBits(14l)\n    // 8\n    // >>> countBits(15l)\n    //\
    \ 8\n    // >>> countBits(16l)\n    // 9\n    // >>> countBits(17l)\n    // 9\n\
    \    // >>> countBits(18l)\n    // 10\n    // >>> countBits(19l)\n    // 10\n\
    \    // >>> countBits(20l)\n    // 11\n    // >>> countBits(21l)\n    // 11\n\
    \    // >>> countBits(22l)\n    // 12\n    // >>> countBits(23l)\n    // 12\n\
    \    // >>> countBits(24l)\n    // 13\n    // >>> countBits(25l)\n    // 13\n\
    \    // >>> countBits(26l)\n    // 14\n    // >>> countBits(27l)\n    // 14\n\
    \    // >>> countBits(28l)\n    // 15\n    // >>> countBits(29l)\n    // 15\n\
    \    // >>> countBits(30l)\n    // 16\n    // >>> countBits(31l)\n    // 16\n\
    \    // >>> countBits(32l)", '        n % p', "        val m = n % p\n       \
    \ if (m < 0) {\n            m += p\n        }\n        return m\n    }\n\n   \
    \ // Return the greatest common divisor of a and b.\n    // >>> gcd((5l), (7l))\n\
    \    // (1l)\n    // >>> gcd((-5l), (7l))\n    // (1l)\n    // >>> gcd((5l), (-7l))\n\
    \    // (1l)\n    // >>> gcd((-5l), (-7l))\n    // (1l)\n    // >>> gcd((0l),\
    \ (0l))\n    // (0l)\n    // >>> gcd((-5l), (0l))\n    // (5l)\n    // >>> gcd((0l),\
    \ (-5l))\n    // (5l)\n    // >>> gcd((-5l), (-7l))\n    // (1l)\n    def gcd(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            return b\n\
    \        }\n        if (b == 0) {\n            return a\n        }\n        val\
    \ g = gcd(b, a % b)\n        return g\n    }\n\n    // Return the least common\
    \ multiple of a and b.\n    // >>> lcm((5l), (7l))\n    // (35l)\n    // >>> lcm((-5l),\
    \ (7l))\n    // (-35l)\n    // >>> lcm((5l), (-7l))\n    // (-35l)\n    // >>>\
    \ lcm((-5l), (-7l))\n    // (35l)\n    // >>> lcm((0l), (0l))\n    // (0l)\n \
    \   // >>> lcm((-5l), (0l))\n    // (-5l)\n    // >>> lcm((0l), (-5l))\n    //\
    \ (0l)\n    // >>> lcm((-5l), (-7l))\n    // (-7l)\n    def lcm(a : Long, b :\
    \ Long) : Long = {\n        if (a == 0) {\n            return 0\n        }\n \
    \       if (", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be >= 0\")\n        }\n        if (p < 0) {\n            throw new IllegalArgumentException(\"\
    p must be >= 0\")\n        }\n        if (p == 0) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0) {\n            return 0l\n  \
    \      }\n        return (n * (n - 1)) % p\n    }\n\n    // Return the greatest\
    \ common divisor of a and b.\n    // >>> gcd((5l), (7l))\n    // (1l)\n    //\
    \ >>> gcd((-5l), (7l))\n    // (1l)\n    // >>> gcd((5l), (-7l))\n    // (1l)\n\
    \    // >>> gcd((-5l), (-7l))\n    // (1l)\n    // >>> gcd((0l), (7l))\n    //\
    \ (7l)\n    // >>> gcd((0l), (-7l))\n    // (7l)\n    // >>> gcd((-5l), (0l))\n\
    \    // (5l)\n    // >>> gcd((-5l), (-0l))\n    // (5l)\n    // >>> gcd((0l),\
    \ (0l))\n    // (0l)\n    // >>> gcd((-5l), (0l))\n    // (5l)\n    // >>> gcd((0l),\
    \ (-0l))\n    // (0l)\n    // >>> gcd((-5l), (-0l))\n    // (5l)\n    def gcd(a\
    \ : Long, b : Long) : Long = {\n        if (a < 0) {\n            throw new IllegalArgumentException(\"\
    a must be >= 0\")\n        }\n        if (b < 0) {\n            throw new IllegalArgumentException(\"\
    b must be >= 0\")\n        }\n        if (a == 0) {\n            return b\n  \
    \      }\n        if (b == 0) {\n            return a\n        }\n        return\
    \ gcd(b, a % b)\n    }\n\n    // Return the least common", "        if (n < 0l)\
    \ {\n            throw new RuntimeException(\"n must be a non-negative number\"\
    )\n        }\n        if (p < 0l) {\n            throw new RuntimeException(\"\
    p must be a non-negative number\")\n        }\n        if (p == 0l) {\n      \
    \      throw new RuntimeException(\"p must be a non-zero number\")\n        }\n\
    \        if (n == 0l) {\n            return 0l\n        }\n        return (n *\
    \ (n - 1l) / 2l) % p\n    }\n\n    // Return the sum of the squares of the first\
    \ n natural numbers.\n    // >>> sum_of_squares(0)\n    // 0\n    // >>> sum_of_squares(1)\n\
    \    // 1\n    // >>> sum_of_squares(2)\n    // 5\n    // >>> sum_of_squares(3)\n\
    \    // 14\n    // >>> sum_of_squares(4)\n    // 30\n    // >>> sum_of_squares(5)\n\
    \    // 55\n    // >>> sum_of_squares(6)\n    // 132\n    // >>> sum_of_squares(7)\n\
    \    // 221\n    // >>> sum_of_squares(8)\n    // 352\n    // >>> sum_of_squares(9)\n\
    \    // 683\n    // >>> sum_of_squares(10)\n    // 1396\n    def sum_of_squares(n\
    \ : Int) : Int = {\n        if (n < 0) {\n            throw new RuntimeException(\"\
    n must be a non-negative number\")\n        }\n        if (n == 0) {\n       \
    \     return 0\n        }\n        return (n * (n + 1) * (2 * n + 1)) / 6\n  \
    \  }\n\n    // Return the sum of the squares of the first n natural numbers.\n\
    \    // >>> sum_of_squares_mod_p(0, (5l))\n    // 0\n    // >>> sum_of_squares_mod_p(1,\
    \ (5l))\n    // 1\n    // >>> sum_of_squares_mod_p(2, (5l))\n    // 5\n    //\
    \ >>> sum", "        n % p\n    }\n\n    // Return the sum of the digits of n.\n\
    \    // >>> sumDigits(123l)\n    // 3\n    // >>> sumDigits(1234l)\n    // 4\n\
    \    // >>> sumDigits(12345l)\n    // 5\n    // >>> sumDigits(123456l)\n    //\
    \ 6\n    // >>> sumDigits(1234567l)\n    // 7\n    // >>> sumDigits(12345678l)\n\
    \    // 8\n    def sumDigits(n : Long) : Long = {\n        n % 10\n    }\n\n \
    \   // Return the sum of the digits of n.\n    // >>> sumDigits(123l)\n    //\
    \ 3\n    // >>> sumDigits(1234l)\n    // 4\n    // >>> sumDigits(12345l)\n   \
    \ // 5\n    // >>> sumDigits(123456l)\n    // 6\n    // >>> sumDigits(1234567l)\n\
    \    // 7\n    // >>> sumDigits(12345678l)\n    // 8\n    def sumDigits(n : Long)\
    \ : Long = {\n        n % 10\n    }\n\n    // Return the sum of the digits of\
    \ n.\n    // >>> sumDigits(123l)\n    // 3\n    // >>> sumDigits(1234l)\n    //\
    \ 4\n    // >>> sumDigits(12345l)\n    // 5\n    // >>> sumDigits(123456l)\n \
    \   // 6\n    // >>> sumDigits(1234567l)\n    // 7\n    // >>> sumDigits(12345678l)\n\
    \    // 8\n    def sumDigits(n : Long) : Long = {\n        n % 10\n    }\n\n \
    \   // Return the sum of the digits of n.\n    // >>> sumDigits(123l)\n    //\
    \ 3\n    // >>> sumDigits(1234l)\n    // 4\n    // >>> sumDigits(12345l)\n   \
    \ // 5\n    // >>> sumDigits(123456l)\n    // 6\n    // >>> sumDigits(1234567l)\n\
    \    // 7\n    // >>> sumDigits(12345678l)\n    // 8", "        if (n < 0) {\n\
    \            throw new IllegalArgumentException(\"n must be >= 0\")\n        }\n\
    \        if (p < 0) {\n            throw new IllegalArgumentException(\"p must\
    \ be >= 0\")\n        }\n        if (p == 0) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0) {\n            return 0l\n  \
    \      }\n        if (p == 1) {\n            return n\n        }\n        return\
    \ (n * modp(n - 1, p)) % p\n    }\n\n    // Return the greatest common divisor\
    \ of a and b.\n    // >>> gcd(3l, 5l)\n    // 1l\n    // >>> gcd(11l, 101l)\n\
    \    // 101l\n    // >>> gcd(0l, 101l)\n    // 101l\n    // >>> gcd(3l, 11l)\n\
    \    // 1l\n    // >>> gcd(100l, 101l)\n    // 101l\n    def gcd(a : Long, b :\
    \ Long) : Long = {\n        if (a < 0) {\n            throw new IllegalArgumentException(\"\
    a must be >= 0\")\n        }\n        if (b < 0) {\n            throw new IllegalArgumentException(\"\
    b must be >= 0\")\n        }\n        if (a == 0) {\n            return b\n  \
    \      }\n        if (b == 0) {\n            return a\n        }\n        return\
    \ gcd(b, a % b)\n    }\n\n    // Return the least common multiple of a and b.\n\
    \    // >>> lcm(3l, 5l)\n    // 15l\n    // >>> lcm(11l, 101l)\n    // 101l\n\
    \    // >>> lcm(0l, 101l)\n    // 0l\n    // >>> lcm(3l, 11l)\n    // 3l\n   \
    \ // >>> lcm(100l, 101l)\n    // 100l\n    def lcm(a : Long, b : Long) : Long\
    \ = {\n        if (a < 0) {\n            throw new IllegalArgumentException(\"\
    a must be >= 0\")\n        }\n        if (b < 0", "        if (n == 0) {\n   \
    \         0l\n        } else if (n < 0) {\n            modp(-n, p)\n        }\
    \ else if (p == 0) {\n            n\n        } else if (p < 0) {\n           \
    \ modp(n, -p)\n        } else {\n            n % p\n        }\n    }\n\n    //\
    \ Return the greatest common divisor of a and b.\n    // >>> gcd(3l, 5l)\n   \
    \ // 1l\n    // >>> gcd(3l, 0l)\n    // 3l\n    // >>> gcd(0l, 0l)\n    // 0l\n\
    \    // >>> gcd(3l, -5l)\n    // 5l\n    // >>> gcd(-3l, 5l)\n    // 1l\n    //\
    \ >>> gcd(-3l, 0l)\n    // 3l\n    // >>> gcd(0l, 0l)\n    // 0l\n    // >>> gcd(-3l,\
    \ -5l)\n    // 5l\n    // >>> gcd(-3l, -0l)\n    // 3l\n    // >>> gcd(-0l, -0l)\n\
    \    // 0l\n    // >>> gcd(-3l, 5l)\n    // 1l\n    def gcd(a : Long, b : Long)\
    \ : Long = {\n        if (b == 0) {\n            a\n        } else {\n       \
    \     gcd(b, a % b)\n        }\n    }\n\n    // Return the least common multiple\
    \ of a and b.\n    // >>> lcm(3l, 5l)\n    // 15l\n    // >>> lcm(3l, 0l)\n  \
    \  // 0l\n    // >>> lcm(0l, 0l)\n    // 0l\n    // >>> lcm(3l, -5l)\n    // -15l\n\
    \    // >>> lcm(-3l, 5l)\n    // -15l\n    // >>> lcm(-3l, 0l)\n    // 0l\n  \
    \  // >>> lcm(0l, 0l)\n    // 0l\n    // >>> lcm(-3l, -5l)\n    // -", "     \
    \   n % p\n    }\n\n    // Return the greatest common divisor of a and b.\n  \
    \  // >>> gcd(3l, 5l)\n    // (1l)\n    // >>> gcd(3l, 6l)\n    // (3l)\n    //\
    \ >>> gcd(3l, 0l)\n    // (1l)\n    // >>> gcd(0l, 0l)\n    // (0l)\n    // >>>\
    \ gcd(3l, -3l)\n    // (1l)\n    // >>> gcd(3l, -6l)\n    // (3l)\n    // >>>\
    \ gcd(-3l, -6l)\n    // (3l)\n    // >>> gcd(-3l, -6l)\n    // (3l)\n    // >>>\
    \ gcd(-3l, 6l)\n    // (3l)\n    def gcd(a : Long, b : Long) : Long = {\n    \
    \    if (b == 0l) {\n            a\n        } else {\n            gcd(b, a % b)\n\
    \        }\n    }\n\n    // Return the least common multiple of a and b.\n   \
    \ // >>> lcm(3l, 5l)\n    // (15l)\n    // >>> lcm(3l, 6l)\n    // (18l)\n   \
    \ // >>> lcm(3l, 0l)\n    // (0l)\n    // >>> lcm(0l, 0l)\n    // (0l)\n    //\
    \ >>> lcm(3l, -3l)\n    // (-3l)\n    // >>> lcm(3l, -6l)\n    // (0l)\n    //\
    \ >>> lcm(-3l, -6l)\n    // (-6l)\n    // >>> lcm(-3l, -6l)\n    // (-6l)\n  \
    \  // >>> lcm(-3l, 6l)\n    // (0l)\n    def lcm(a : Long, b : Long) : Long =\
    \ {\n        if (b == 0l) {\n            a\n        } else {\n            lcm(b,\
    \ a / b) * b\n        }\n    }\n\n", "        if (n == 0) {\n            0l\n\
    \        } else {\n            n % p\n        }\n    }\n\n    // Return the greatest\
    \ common divisor of a and b.\n    // >>> gcd(3l, 5l)\n    // (1l)\n    // >>>\
    \ gcd(11l, 101l)\n    // (1l)\n    // >>> gcd(0l, 101l)\n    // (101l)\n    //\
    \ >>> gcd(3l, 11l)\n    // (1l)\n    // >>> gcd(100l, 101l)\n    // (1l)\n   \
    \ def gcd(a : Long, b : Long) : Long = {\n        if (a == 0) {\n            b\n\
    \        } else {\n            gcd(b % a, a)\n        }\n    }\n\n    // Return\
    \ the least common multiple of a and b.\n    // >>> lcm(3l, 5l)\n    // (15l)\n\
    \    // >>> lcm(11l, 101l)\n    // (101l)\n    // >>> lcm(0l, 101l)\n    // (0l)\n\
    \    // >>> lcm(3l, 11l)\n    // (33l)\n    // >>> lcm(100l, 101l)\n    // (101l)\n\
    \    def lcm(a : Long, b : Long) : Long = {\n        if (a == 0) {\n         \
    \   0l\n        } else {\n            a * (b / gcd(a, b))\n        }\n    }\n\n\
    \    // Return the sum of the squares of the first n natural numbers.\n    //\
    \ >>> sum_of_squares(0)\n    // (0l)\n    // >>> sum_of_squares(1)\n    // (1l)\n\
    \    // >>> sum_of_squares(2)\n    // (5l)\n    // >>> sum_of_squares(3)\n   \
    \ // (14l)\n    def sum_of_squares(n : Long) : Long = {\n        if (n == 0) {\n\
    \            0l\n        } else {\n            n * (n + 1) / 2\n        }\n  \
    \  ", '        n % p', "        val nn = n.toInt\n        val pp = p.toInt\n \
    \       val r = nn % pp\n        if (r == 0) {\n            return nn\n      \
    \  } else {\n            return r\n        }\n    }\n\n    // Return the greatest\
    \ common divisor of a and b.\n    // >>> gcd((3l), (5l))\n    // (1l)\n    //\
    \ >>> gcd((1101l), (101l))\n    // (101l)\n    // >>> gcd((0l), (101l))\n    //\
    \ (1l)\n    // >>> gcd((3l), (11l))\n    // (1l)\n    // >>> gcd((100l), (101l))\n\
    \    // (101l)\n    def gcd(a : Long, b : Long) : Long = {\n        val aa = a.toInt\n\
    \        val bb = b.toInt\n        if (aa == 0) {\n            return bb\n   \
    \     } else if (bb == 0) {\n            return aa\n        } else {\n       \
    \     return gcd(bb, aa % bb)\n        }\n    }\n\n    // Return the least common\
    \ multiple of a and b.\n    // >>> lcm((3l), (5l))\n    // (15l)\n    // >>> lcm((1101l),\
    \ (101l))\n    // (101l)\n    // >>> lcm((0l), (101l))\n    // (0l)\n    // >>>\
    \ lcm((3l), (11l))\n    // (11l)\n    // >>> lcm((100l), (101l))\n    // (101l)\n\
    \    def lcm(a : Long, b : Long) : Long = {\n        val aa = a.toInt\n      \
    \  val bb = b.toInt\n        if (aa == 0) {\n            return 0l\n        }\
    \ else if (bb == 0) {\n            return 0l\n        } else {\n            return\
    \ aa * bb / gcd(aa, bb)\n        }\n    }\n\n    // Return the sum of a and b.\n\
    \    // >>> add((3l), (5l))\n    //", "        val nn = n.toInt\n        val pp\
    \ = p.toInt\n        if (nn < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        if (pp < 0) {\n            throw\
    \ new IllegalArgumentException(\"p must be non-negative\")\n        }\n      \
    \  if (nn >= pp) {\n            throw new IllegalArgumentException(\"n must be\
    \ less than p\")\n        }\n        return (nn % pp).toInt\n    }\n\n    // Return\
    \ the greatest common divisor of a and b.\n    // >>> gcd(3l, 5l)\n    // (1l)\n\
    \    // >>> gcd(11l, 101l)\n    // (1l)\n    // >>> gcd(0l, 101l)\n    // (101l)\n\
    \    // >>> gcd(3l, 11l)\n    // (1l)\n    // >>> gcd(100l, 101l)\n    // (1l)\n\
    \    def gcd(a : Long, b : Long) : Long = {\n        val aa = a.toInt\n      \
    \  val bb = b.toInt\n        if (aa < 0) {\n            throw new IllegalArgumentException(\"\
    a must be non-negative\")\n        }\n        if (bb < 0) {\n            throw\
    \ new IllegalArgumentException(\"b must be non-negative\")\n        }\n      \
    \  if (aa >= bb) {\n            throw new IllegalArgumentException(\"a must be\
    \ less than b\")\n        }\n        return (aa % bb).toInt\n    }\n\n    // Return\
    \ the least common multiple of a and b.\n    // >>> lcm(3l, 5l)\n    // (15l)\n\
    \    // >>> lcm(11l, 101l)\n    // (101l)\n    // >>> lcm(0l, 101l)\n    // (0l)\n\
    \    // >>> lcm(3l, 11l)\n    // (3l)\n    // >>> lcm(100l, 101l)\n    // (100l)\n\
    \    def lcm(a : Long, b : Long) : Long = {\n        val aa = a.toInt\n      \
    \  val b", "        val nn = n.mod(p)\n        if (nn.isZero()) {\n          \
    \  nn = p\n        }\n        nn\n    }\n\n    // Return the greatest common divisor\
    \ of two numbers.\n    // >>> gcd(3l, 5l)\n    // (1l)\n    // >>> gcd(11l, 101l)\n\
    \    // (1l)\n    // >>> gcd(0l, 101l)\n    // (101l)\n    // >>> gcd(3l, 11l)\n\
    \    // (1l)\n    // >>> gcd(100l, 101l)\n    // (1l)\n    def gcd(a : Long, b\
    \ : Long) : Long = {\n        val aa = a.abs()\n        val bb = b.abs()\n   \
    \     if (aa.equals(bb)) {\n            if (aa.isZero()) {\n                aa\
    \ = bb\n            }\n        } else {\n            if (aa.isZero()) {\n    \
    \            aa = bb\n            } else if (bb.isZero()) {\n                bb\
    \ = aa\n            } else {\n                val aa_bb = aa.div(bb)\n       \
    \         val bb_aa = bb.div(aa)\n                aa = aa_bb\n               \
    \ bb = bb_aa\n            }\n        }\n        aa\n    }\n\n    // Return the\
    \ least common multiple of two numbers.\n    // >>> lcm(3l, 5l)\n    // (15l)\n\
    \    // >>> lcm(11l, 101l)\n    // (101l)\n    // >>> lcm(0l, 101l)\n    // (0l)\n\
    \    // >>> lcm(3l, 11l)\n    // (3l)\n    // >>> lcm(100l, 101l)\n    // (100l)\n\
    \    def lcm(a : Long, b : Long) : Long = {\n        val aa = a.abs()\n      \
    \  val bb = b.abs()\n        if (aa.equals(bb)) {\n            if (aa.isZero())\
    \ {\n                aa = bb\n            }\n        } else {\n            if\
    \ (aa.", "        val nn = n.toInt\n        val pp = p.toInt\n        if (nn <\
    \ 0) {\n            throw new IllegalArgumentException(\"n must be a non-negative\
    \ integer\")\n        }\n        if (pp < 0) {\n            throw new IllegalArgumentException(\"\
    p must be a non-negative integer\")\n        }\n        if (nn == 0) {\n     \
    \       return 0l\n        }\n        if (nn == 1) {\n            return 1l\n\
    \        }\n        if (nn == 2) {\n            return 2l\n        }\n       \
    \ if (nn == 3) {\n            return 3l\n        }\n        if (nn == 4) {\n \
    \           return 4l\n        }\n        if (nn == 5) {\n            return 5l\n\
    \        }\n        if (nn == 6) {\n            return 6l\n        }\n       \
    \ if (nn == 7) {\n            return 7l\n        }\n        if (nn == 8) {\n \
    \           return 8l\n        }\n        if (nn == 9) {\n            return 9l\n\
    \        }\n        if (nn == 10) {\n            return 10l\n        }\n     \
    \   if (nn == 11) {\n            return 11l\n        }\n        if (nn == 12)\
    \ {\n            return 12l\n        }\n        if (nn == 13) {\n            return\
    \ 13l\n        }\n        if (nn == 14) {\n            return 14l\n        }\n\
    \        if (nn == 15) {\n            return 15l\n        }\n        if (nn ==\
    \ 16) {\n            return 16l\n        }\n        if (nn == 17) {\n        \
    \    return 17l\n        }\n        if (nn == 18) {\n            return 18l\n\
    \        }\n        if (nn == 19) {\n            return 19l\n        }\n     \
    \   if (nn == 20) {\n            return 20l\n        }\n        if (nn == 21)\
    \ {\n            return 21l\n        }\n        if (nn == 22) {\n            return\
    \ 22l\n        }\n        if (nn == 23) {\n            return 23l\n        }\n\
    \        if (nn == 24) {\n            return 24l\n        }\n        if (nn ==\
    \ 25) {", '        n % p', "        if (n < 0) {\n            throw new RuntimeException(\"\
    Negative numbers not supported\")\n        }\n        if (p < 0) {\n         \
    \   throw new RuntimeException(\"Negative numbers not supported\")\n        }\n\
    \        if (p == 0) {\n            throw new RuntimeException(\"Zero modulus\
    \ not supported\")\n        }\n        if (n == 0) {\n            return 0l\n\
    \        }\n        return (n % p) + (n / p) * (p - 1l)", "        n % p\n   \
    \ }\n\n    // Return the greatest common divisor of a and b.\n    // >>> gcd(3l,\
    \ 5l)\n    // (1l)\n    // >>> gcd(11l, 101l)\n    // (1l)\n    // >>> gcd(0l,\
    \ 101l)\n    // (101l)\n    // >>> gcd(3l, 11l)\n    // (1l)\n    // >>> gcd(100l,\
    \ 101l)\n    // (101l)\n    def gcd(a : Long, b : Long) : Long = {\n        if\
    \ (b == 0l) {\n            a\n        } else {\n            gcd(b, a % b)\n  \
    \      }\n    }\n\n    // Return the least common multiple of a and b.\n    //\
    \ >>> lcm(3l, 5l)\n    // (15l)\n    // >>> lcm(11l, 101l)\n    // (101l)\n  \
    \  // >>> lcm(0l, 101l)\n    // (0l)\n    // >>> lcm(3l, 11l)\n    // (33l)\n\
    \    // >>> lcm(100l, 101l)\n    // (100l)\n    def lcm(a : Long, b : Long) :\
    \ Long = {\n        a * b / gcd(a, b)\n    }\n\n    // Return the sum of the squares\
    \ of the first n natural numbers.\n    // >>> sum_of_squares(0)\n    // (0l)\n\
    \    // >>> sum_of_squares(1)\n    // (1l)\n    // >>> sum_of_squares(2)\n   \
    \ // (5l)\n    // >>> sum_of_squares(3)\n    // (14l)\n    def sum_of_squares(n\
    \ : Long) : Long = {\n        n * (n + 1) / 2\n    }\n\n    // Return the sum\
    \ of the first n natural numbers.\n    // >>> sum(0)\n    // (0l)\n    // >>>\
    \ sum(1)\n    // (1l)\n    // >>> sum(2)\n    // (3l)\n    // >>>", '        n
    % p', "        if (n < 0) {\n            throw new RuntimeException(\"n must be\
    \ a non-negative number\")\n        }\n        if (p < 0) {\n            throw\
    \ new RuntimeException(\"p must be a non-negative number\")\n        }\n     \
    \   if (p == 0) {\n            throw new RuntimeException(\"p must be a non-zero\
    \ number\")\n        }\n        if (n == 0) {\n            return 0l\n       \
    \ }\n        return (n * (n % p)) % p\n    }\n\n    // Return the greatest common\
    \ divisor of a and b.\n    // >>> gcd(3l, 5l)\n    // (1l)\n    // >>> gcd(11l,\
    \ 101l)\n    // (1l)\n    // >>> gcd(0l, 101l)\n    // (101l)\n    // >>> gcd(3l,\
    \ 11l)\n    // (1l)\n    // >>> gcd(100l, 101l)\n    // (1l)\n    def gcd(a :\
    \ Long, b : Long) : Long = {\n        if (a < 0) {\n            throw new RuntimeException(\"\
    a must be a non-negative number\")\n        }\n        if (b < 0) {\n        \
    \    throw new RuntimeException(\"b must be a non-negative number\")\n       \
    \ }\n        if (a == 0) {\n            return b\n        }\n        if (b ==\
    \ 0) {\n            return a\n        }\n        return gcd(b, a % b)\n    }\n\
    \n    // Return the least common multiple of a and b.\n    // >>> lcm(3l, 5l)\n\
    \    // (15l)\n    // >>> lcm(11l, 101l)\n    // (101l)\n    // >>> lcm(0l, 101l)\n\
    \    // (0l)\n    // >>> lcm(3l, 11l)\n    // (3l)\n    // >>> lcm(100l, 101l)\n\
    \    // (100l)\n    def lcm(a : Long, b : Long) : Long = {\n        if (a < 0)\
    \ {\n            throw new RuntimeException(\"a must be a non-negative number\"\
    )\n        }\n", "        n % p\n    }\n\n    // Return the greatest common divisor\
    \ of a and b.\n    // >>> gcd(3l, 5l)\n    // 5l\n    // >>> gcd(3l, 6l)\n   \
    \ // 3l\n    // >>> gcd(3l, 0l)\n    // 3l\n    // >>> gcd(0l, 0l)\n    // 0l\n\
    \    // >>> gcd(3l, -3l)\n    // 3l\n    // >>> gcd(-3l, 0l)\n    // 3l\n    //\
    \ >>> gcd(0l, -3l)\n    // 3l\n    // >>> gcd(-3l, -3l)\n    // 3l\n    // >>>\
    \ gcd(-3l, -6l)\n    // 3l\n    // >>> gcd(-6l, -3l)\n    // 3l\n    def gcd(a\
    \ : Long, b : Long) : Long = {\n        if (b == 0l) {\n            return a\n\
    \        } else {\n            return gcd(b, a % b)\n        }\n    }\n\n    //\
    \ Return the least common multiple of a and b.\n    // >>> lcm(3l, 5l)\n    //\
    \ 15l\n    // >>> lcm(3l, 6l)\n    // 18l\n    // >>> lcm(3l, 0l)\n    // 0l\n\
    \    // >>> lcm(0l, 0l)\n    // 0l\n    // >>> lcm(3l, -3l)\n    // -3l\n    //\
    \ >>> lcm(-3l, 0l)\n    // 0l\n    // >>> lcm(0l, -3l)\n    // -3l\n    // >>>\
    \ lcm(-3l, -3l)\n    // -3l\n    // >>> lcm(-3l, -6l)\n    // -6l\n    // >>>\
    \ lcm(-6l, -3l)\n    // -6l\n    def lcm(a : Long, b : Long) : Long = {\n    \
    \    if (b == 0l) {\n            return a\n        } else {\n            return\
    \ a * b / gcd(", "        if (n == 0) {\n            0l\n        } else if (n\
    \ < 0) {\n            modp(-n, p)\n        } else if (n > p) {\n            n\
    \ % p\n        } else {\n            n\n        }\n    }\n\n    // Return the\
    \ greatest common divisor of a and b.\n    // >>> gcd(3l, 5l)\n    // 1l\n   \
    \ // >>> gcd(11l, 101l)\n    // 101l\n    // >>> gcd(0l, 101l)\n    // 1l\n  \
    \  // >>> gcd(3l, 11l)\n    // 1l\n    // >>> gcd(100l, 101l)\n    // 101l\n \
    \   def gcd(a : Long, b : Long) : Long = {\n        if (a == 0) {\n          \
    \  b\n        } else if (b == 0) {\n            a\n        } else {\n        \
    \    gcd(b, a % b)\n        }\n    }\n\n    // Return the least common multiple\
    \ of a and b.\n    // >>> lcm(3l, 5l)\n    // 15l\n    // >>> lcm(11l, 101l)\n\
    \    // 101l\n    // >>> lcm(0l, 101l)\n    // 0l\n    // >>> lcm(3l, 11l)\n \
    \   // 3l\n    // >>> lcm(100l, 101l)\n    // 100l\n    def lcm(a : Long, b :\
    \ Long) : Long = {\n        if (a == 0) {\n            0l\n        } else if (b\
    \ == 0) {\n            0l\n        } else {\n            a * b / gcd(a, b)\n \
    \       }\n    }\n\n    // Return the sum of the digits of n.\n    // >>> sumDigits(123l)\n\
    \    // 3\n    // >>> sumDigits(1234l)\n    // 4\n    // >>> sumDigits(12345l)\n\
    \    // 5\n    // >>> sumDigits(123456l)\n    // 6\n    def sumDigits(n : Long)\
    \ : Long = {\n        if (n == 0) {\n            0l\n        }", "        if (n\
    \ < 0) {\n            throw new IllegalArgumentException(\"n must be >= 0\")\n\
    \        }\n        if (p < 0) {\n            throw new IllegalArgumentException(\"\
    p must be >= 0\")\n        }\n        if (p == 0) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0) {\n            return 0l\n  \
    \      }\n        return (n * (n - 1) / 2) % p", "        n % p\n    }\n\n   \
    \ // Return the greatest common divisor of a and b.\n    // >>> gcd((3l), (5l))\n\
    \    // (1l)\n    // >>> gcd((1101l), (101l))\n    // (1l)\n    // >>> gcd((0l),\
    \ (101l))\n    // (101l)\n    // >>> gcd((3l), (11l))\n    // (1l)\n    // >>>\
    \ gcd((100l), (101l))\n    // (101l)\n    def gcd(a : Long, b : Long) : Long =\
    \ {\n        if (a == 0) {\n            return b\n        } else {\n         \
    \   return gcd(b % a, a)\n        }\n    }\n\n    // Return the least common multiple\
    \ of a and b.\n    // >>> lcm((3l), (5l))\n    // (15l)\n    // >>> lcm((1101l),\
    \ (101l))\n    // (101l)\n    // >>> lcm((0l), (101l))\n    // (0l)\n    // >>>\
    \ lcm((3l), (11l))\n    // (11l)\n    // >>> lcm((100l), (101l))\n    // (100l)\n\
    \    def lcm(a : Long, b : Long) : Long = {\n        return a * b / gcd(a, b)\n\
    \    }\n\n    // Return the sum of the squares of the numbers in the list.\n \
    \   // >>> sumOfSquares([1, 2, 3])\n    // 14\n    // >>> sumOfSquares([1, 2,\
    \ 3, 4])\n    // 26\n    def sumOfSquares(xs : List[Long]) : Long = {\n      \
    \  var sum = 0l\n        for (x : Long) {\n            sum += x * x\n        }\n\
    \        return sum\n    }\n\n    // Return the sum of the products of the numbers\
    \ in the list.\n    // >>> sumOfProducts([1, 2, 3])\n    // 14\n    // >>> sumOfProducts([1,\
    \ 2, 3, 4])\n    // 24\n    def sumOfProducts(xs : List[Long]) : Long", "    \
    \    if (n == 0) {\n            0l\n        } else {\n            n % p\n    \
    \    }\n    }\n\n    // Return the number of bits set in the given number.\n \
    \   // >>> bits(0l)\n    // 0\n    // >>> bits(1l)\n    // 1\n    // >>> bits(2l)\n\
    \    // 2\n    // >>> bits(3l)\n    // 2\n    // >>> bits(4l)\n    // 3\n    //\
    \ >>> bits(5l)\n    // 3\n    // >>> bits(6l)\n    // 4\n    // >>> bits(7l)\n\
    \    // 4\n    // >>> bits(8l)\n    // 5\n    // >>> bits(9l)\n    // 5\n    //\
    \ >>> bits(10l)\n    // 6\n    // >>> bits(11l)\n    // 6\n    // >>> bits(12l)\n\
    \    // 7\n    // >>> bits(13l)\n    // 7\n    // >>> bits(14l)\n    // 8\n  \
    \  // >>> bits(15l)\n    // 8\n    // >>> bits(16l)\n    // 9\n    // >>> bits(17l)\n\
    \    // 9\n    // >>> bits(18l)\n    // 10\n    // >>> bits(19l)\n    // 10\n\
    \    // >>> bits(20l)\n    // 11\n    // >>> bits(21l)\n    // 11\n    // >>>\
    \ bits(22l)\n    // 12\n    // >>> bits(23l)\n    // 12\n    // >>> bits(24l)\n\
    \    // 13\n    // >>> bits(25l)\n    // 13\n    // >>> bits(26l)\n    // 14\n\
    \    // >>> bits(27l)\n    // 14\n    // >>> bits(28l)\n    // 15\n    // >>>\
    \ bits(29l)\n    // 15\n    // >>> bits(30l)\n    // 16\n    // >>> bits(31l)\n\
    \    // 16\n    // >>> bits(32l)\n    // 17\n    // >>> bits(33l)\n    // 17\n\
    \    // >>> bits(34l)\n    // 18\n    // >>> bits(35l)\n    // 18\n    ", "  \
    \      if (n < 0l) {\n            throw new IllegalArgumentException(\"n must\
    \ be >= 0\")\n        }\n        if (p < 0l) {\n            throw new IllegalArgumentException(\"\
    p must be >= 0\")\n        }\n        if (p == 0l) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0l) {\n            return 0l\n \
    \       }\n        return (n * (n - 1l) / 2l) % p\n    }\n\n    // Return the\
    \ greatest common divisor of a and b.\n    // >>> gcd(2l, 3l)\n    // (1l)\n \
    \   // >>> gcd(2l, 4l)\n    // (2l)\n    // >>> gcd(2l, 6l)\n    // (2l)\n   \
    \ // >>> gcd(2l, 8l)\n    // (2l)\n    // >>> gcd(2l, 12l)\n    // (2l)\n    //\
    \ >>> gcd(2l, 16l)\n    // (2l)\n    // >>> gcd(2l, 24l)\n    // (6l)\n    //\
    \ >>> gcd(2l, 32l)\n    // (8l)\n    // >>> gcd(2l, 48l)\n    // (12l)\n    //\
    \ >>> gcd(2l, 64l)\n    // (16l)\n    // >>> gcd(2l, 96l)\n    // (24l)\n    //\
    \ >>> gcd(2l, 128l)\n    // (32l)\n    // >>> gcd(2l, 256l)\n    // (64l)\n  \
    \  // >>> gcd(2l, 512l)\n    // (128l)\n    // >>> gcd(2l, 1024l)\n    // (256l)\n\
    \    // >>> gcd(2l, 2048l)\n    // (512l)\n    // >>> gcd(2l, 4096l)\n    // (1024l)\n\
    \    // >>> gcd(2l, 8192l)\n    // (2048l)\n    // >>> gcd(2l, 16384l", "    \
    \    if (n == 0) {\n            0l\n        } else {\n            n % p\n    \
    \    }\n    }\n\n    // Return the greatest common divisor of a and b.\n    //\
    \ >>> gcd((3l), (5l))\n    // (1l)\n    // >>> gcd((1101l), (101l))\n    // (1l)\n\
    \    // >>> gcd((0l), (101l))\n    // (101l)\n    // >>> gcd((3l), (11l))\n  \
    \  // (1l)\n    // >>> gcd((100l), (101l))\n    // (101l)\n    def gcd(a : Long,\
    \ b : Long) : Long = {\n        if (a == 0) {\n            b\n        } else {\n\
    \            gcd(b % a, a)\n        }\n    }\n\n    // Return the least common\
    \ multiple of a and b.\n    // >>> lcm((3l), (5l))\n    // (15l)\n    // >>> lcm((1101l),\
    \ (101l))\n    // (101l)\n    // >>> lcm((0l), (101l))\n    // (0l)\n    // >>>\
    \ lcm((3l), (11l))\n    // (33l)\n    // >>> lcm((100l), (101l))\n    // (101l)\n\
    \    def lcm(a : Long, b : Long) : Long = {\n        if (a == 0) {\n         \
    \   0l\n        } else {\n            a * b / gcd(a, b)\n        }\n    }\n\n\
    \    // Return the sum of the digits of n.\n    // >>> sumDigits(123l)\n    //\
    \ 3\n    // >>> sumDigits(1234l)\n    // 4\n    // >>> sumDigits(12345l)\n   \
    \ // 5\n    // >>> sumDigits(123456l)\n    // 6\n    def sumDigits(n : Long) :\
    \ Long = {\n        if (n == 0) {\n            0l\n        } else {\n        \
    \    n % 10\n        }\n    }\n\n    // Return the sum of the digits of n.\n \
    \   // >>> sumDig", "        if (n < 0l) {\n            throw new IllegalArgumentException(\"\
    n must be >= 0\")\n        }\n        if (p < 0l) {\n            throw new IllegalArgumentException(\"\
    p must be >= 0\")\n        }\n        if (p == 0l) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0l) {\n            return 0l\n \
    \       }\n        return (n % p) + (n / p) * p\n    }\n\n    // Return the greatest\
    \ common divisor of a and b.\n    // >>> gcd((3l), (5l))\n    // (1l)\n    //\
    \ >>> gcd((1101l), (101l))\n    // (1l)\n    // >>> gcd((0l), (101l))\n    //\
    \ (1l)\n    // >>> gcd((3l), (11l))\n    // (1l)\n    // >>> gcd((100l), (101l))\n\
    \    // (1l)\n    def gcd(a : Long, b : Long) : Long = {\n        if (a < 0l)\
    \ {\n            throw new IllegalArgumentException(\"a must be >= 0\")\n    \
    \    }\n        if (b < 0l) {\n            throw new IllegalArgumentException(\"\
    b must be >= 0\")\n        }\n        if (a == 0l) {\n            return b\n \
    \       }\n        if (b == 0l) {\n            return a\n        }\n        while\
    \ (b != 0l) {\n            a = a % b\n            b = b % a\n        }\n     \
    \   return a\n    }\n\n    // Return the least common multiple of a and b.\n \
    \   // >>> lcm((3l), (5l))\n    // (15l)\n    // >>> lcm((1101l), (101l))\n  \
    \  // (101l)\n    // >>> lcm((0l), (101l))\n    // (0l)\n    // >>> lcm((3l),\
    \ (11l))\n    // (11l)\n    // >>> lcm((100l), (101l))\n    // (100l)\n    def\
    \ lcm(a : Long,", "        n % p\n    }\n\n    // Return the greatest common divisor\
    \ of a and b.\n    // >>> gcd((3l), (5l))\n    // (1l)\n    // >>> gcd((1101l),\
    \ (101l))\n    // (1l)\n    // >>> gcd((0l), (101l))\n    // (101l)\n    // >>>\
    \ gcd((3l), (11l))\n    // (1l)\n    // >>> gcd((100l), (101l))\n    // (101l)\n\
    \    def gcd(a : Long, b : Long) : Long = {\n        if (a == 0l) {\n        \
    \    return b\n        } else {\n            return gcd(b % a, a)\n        }\n\
    \    }\n\n    // Return the least common multiple of a and b.\n    // >>> lcm((3l),\
    \ (5l))\n    // (15l)\n    // >>> lcm((1101l), (101l))\n    // (101l)\n    //\
    \ >>> lcm((0l), (101l))\n    // (0l)\n    // >>> lcm((3l), (11l))\n    // (33l)\n\
    \    // >>> lcm((100l), (101l))\n    // (101l)\n    def lcm(a : Long, b : Long)\
    \ : Long = {\n        return a * b / gcd(a, b)\n    }\n\n    // Return the sum\
    \ of the digits of n.\n    // >>> sumDigits(123l)\n    // 3\n    // >>> sumDigits(1234l)\n\
    \    // 4\n    // >>> sumDigits(12345l)\n    // 5\n    def sumDigits(n : Long)\
    \ : Long = {\n        return n % 10\n    }\n\n    // Return the sum of the digits\
    \ of n.\n    // >>> sumDigits(123l)\n    // 3\n    // >>> sumDigits(1234l)\n \
    \   // 4\n    // >>> sumDigits(12345l)\n    // 5\n    def sumDigits(n : Long)\
    \ : Long = {\n        return n % 10\n    }\n\n    // Return the sum of the digits",
  "        if (n < 0l) {\n            throw new IllegalArgumentException(\"n must\
    \ be >= 0\")\n        }\n        if (p < 0l) {\n            throw new IllegalArgumentException(\"\
    p must be >= 0\")\n        }\n        if (p == 0l) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        return (n % p)", "        val nn = n.toLong\n\
    \        val pp = p.toLong\n        val r = nn % pp\n        if (r == 0) {\n \
    \           r = pp\n        }\n        return r", "        val nn = n.toInt\n\
    \        val pp = p.toInt\n        val r = nn % pp\n        if (r == 0) {\n  \
    \          r = pp\n        }\n        return r", "        if (n < 0l) {\n    \
    \        throw new IllegalArgumentException(\"n must be non-negative\")\n    \
    \    }\n        if (p < 0l) {\n            throw new IllegalArgumentException(\"\
    p must be non-negative\")\n        }\n        if (p == 0l) {\n            throw\
    \ new IllegalArgumentException(\"p must be non-zero\")\n        }\n        if\
    \ (n == 0l) {\n            return 0l\n        }\n        return (n * (n - 1l)\
    \ / 2l) % p", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n < 0\")\n        }\n        if (p < 0) {\n            throw new IllegalArgumentException(\"\
    p < 0\")\n        }\n        if (p == 0) {\n            throw new IllegalArgumentException(\"\
    p == 0\")\n        }\n        return (n * (n % p)) % p\n    }\n\n    // Return\
    \ the greatest common divisor of a and b.\n    // >>> gcd(3l, 5l)\n    // (1l)\n\
    \    // >>> gcd(11l, 101l)\n    // (1l)\n    // >>> gcd(0l, 101l)\n    // (101l)\n\
    \    // >>> gcd(3l, 11l)\n    // (1l)\n    // >>> gcd(100l, 101l)\n    // (1l)\n\
    \    def gcd(a : Long, b : Long) : Long = {\n        if (a < 0) {\n          \
    \  throw new IllegalArgumentException(\"a < 0\")\n        }\n        if (b < 0)\
    \ {\n            throw new IllegalArgumentException(\"b < 0\")\n        }\n  \
    \      if (a == 0) {\n            return b\n        }\n        if (b == 0) {\n\
    \            return a\n        }\n        return gcd(b, a % b)\n    }\n\n    //\
    \ Return the least common multiple of a and b.\n    // >>> lcm(3l, 5l)\n    //\
    \ (15l)\n    // >>> lcm(11l, 101l)\n    // (101l)\n    // >>> lcm(0l, 101l)\n\
    \    // (0l)\n    // >>> lcm(3l, 11l)\n    // (3l)\n    // >>> lcm(100l, 101l)\n\
    \    // (100l)\n    def lcm(a : Long, b : Long) : Long = {\n        if (a < 0)\
    \ {\n            throw new IllegalArgumentException(\"a < 0\")\n        }\n  \
    \      if (b < 0) {\n            throw new IllegalArgumentException(\"b < 0\"\
    )\n        }\n        if (a == 0) {\n            ", "        if (n == 0) {\n \
    \           0\n        } else if (n < 0) {\n            modp(-n, p)\n        }\
    \ else {\n            n % p\n        }\n    }\n\n    // Return the greatest common\
    \ divisor of a and b.\n    // >>> gcd(3l, 5l)\n    // (1l)\n    // >>> gcd(11l,\
    \ 101l)\n    // (1l)\n    // >>> gcd(0l, 101l)\n    // (101l)\n    // >>> gcd(3l,\
    \ 11l)\n    // (1l)\n    // >>> gcd(100l, 101l)\n    // (101l)\n    def gcd(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0) {\n            b\n       \
    \ } else if (b == 0) {\n            a\n        } else {\n            gcd(b, a\
    \ % b)\n        }\n    }\n\n    // Return the least common multiple of a and b.\n\
    \    // >>> lcm(3l, 5l)\n    // (15l)\n    // >>> lcm(11l, 101l)\n    // (101l)\n\
    \    // >>> lcm(0l, 101l)\n    // (0l)\n    // >>> lcm(3l, 11l)\n    // (33l)\n\
    \    // >>> lcm(100l, 101l)\n    // (101l)\n    def lcm(a : Long, b : Long) :\
    \ Long = {\n        if (a == 0) {\n            0\n        } else if (b == 0) {\n\
    \            0\n        } else {\n            a * b / gcd(a, b)\n        }\n \
    \   }\n\n    // Return the sum of a and b.\n    // >>> add(3l, 5l)\n    // (8l)\n\
    \    // >>> add(11l, 101l)\n    // (112l)\n    // >>> add(0l, 101l)\n    // (101l)\n\
    \    // >>> add(3l, 11l)\n    // (14l)\n    // >>> add(100l, 101l)\n    // (",
  "        if (n == 0l) {\n            0l\n        } else {\n            (n * 2l)\
    \ % p\n        }\n    }\n\n    // Return the greatest common divisor of a and\
    \ b.\n    // >>> gcd((3l), (5l))\n    // (1l)\n    // >>> gcd((1101l), (101l))\n\
    \    // (1l)\n    // >>> gcd((0l), (101l))\n    // (101l)\n    // >>> gcd((3l),\
    \ (11l))\n    // (1l)\n    // >>> gcd((100l), (101l))\n    // (1l)\n    def gcd(a\
    \ : Long, b : Long) : Long = {\n        if (a == 0l) {\n            b\n      \
    \  } else {\n            gcd(b % a, a)\n        }\n    }\n\n    // Return the\
    \ least common multiple of a and b.\n    // >>> lcm((3l), (5l))\n    // (15l)\n\
    \    // >>> lcm((1101l), (101l))\n    // (101l)\n    // >>> lcm((0l), (101l))\n\
    \    // (0l)\n    // >>> lcm((3l), (11l))\n    // (11l)\n    // >>> lcm((100l),\
    \ (101l))\n    // (100l)\n    def lcm(a : Long, b : Long) : Long = {\n       \
    \ if (a == 0l) {\n            0l\n        } else {\n            (a * b) / gcd(a,\
    \ b)\n        }\n    }\n\n    // Return the sum of the squares of the numbers\
    \ in the list.\n    // >>> sumOfSquares([1, 2, 3, 4])\n    // 30\n    // >>> sumOfSquares([1,\
    \ 2, 3, 4, 5])\n    // 55\n    def sumOfSquares(numbers : List[Long]) : Long =\
    \ {\n        numbers.reduce((a, b) -> a + (b * b))\n    }\n\n    // Return the\
    \ sum of the squares of the numbers in the list.\n    // >>> sumOfSquares([",
  "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be\
    \ >= 0\")\n        }\n        if (p < 0) {\n            throw new IllegalArgumentException(\"\
    p must be >= 0\")\n        }\n        if (p == 0) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0) {\n            return 0l\n  \
    \      }\n        return (n * (n - 1) / 2) % p\n    }\n\n    // Return the sum\
    \ of the digits of n.\n    // >>> sumDigits(123l)\n    // 3\n    // >>> sumDigits(1234l)\n\
    \    // 10\n    // >>> sumDigits(12345l)\n    // 23\n    // >>> sumDigits(123456l)\n\
    \    // 34\n    // >>> sumDigits(1234567l)\n    // 45\n    // >>> sumDigits(12345678l)\n\
    \    // 56\n    // >>> sumDigits(123456789l)\n    // 67\n    def sumDigits(n :\
    \ Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be >= 0\")\n        }\n        if (n == 0) {\n            return 0l\n \
    \       }\n        return (n * (n - 1) / 2) % 10\n    }\n\n    // Return the sum\
    \ of the digits of n.\n    // >>> sumDigits(123l)\n    // 3\n    // >>> sumDigits(1234l)\n\
    \    // 10\n    // >>> sumDigits(12345l)\n    // 23\n    // >>> sumDigits(123456l)\n\
    \    // 34\n    // >>> sumDigits(1234567l)\n    // 45\n    // >>> sumDigits(12345678l)\n\
    \    // 56\n    // >>> sumDigits(123456789l)\n    // 67\n    def sumDigits2(n\
    \ : Long) : Long = {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be >= 0\")\n        }\n        if (n == 0) {\n            return 0l\n \
    \       }\n        return (", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n < 0\")\n        }\n        if (p < 0) {\n            throw new IllegalArgumentException(\"\
    p < 0\")\n        }\n        if (p == 0) {\n            throw new IllegalArgumentException(\"\
    p == 0\")\n        }\n        if (n == 0) {\n            return 0l\n        }\n\
    \        return (n * (n - 1)) % p\n    }\n\n    // Return the greatest common\
    \ divisor of a and b.\n    // >>> gcd((2l), (3l))\n    // (1l)\n    // >>> gcd((3l),\
    \ (5l))\n    // (1l)\n    // >>> gcd((0l), (5l))\n    // (5l)\n    // >>> gcd((3l),\
    \ (11l))\n    // (1l)\n    // >>> gcd((100l), (101l))\n    // (1l)\n    def gcd(a\
    \ : Long, b : Long) : Long = {\n        if (a < 0) {\n            throw new IllegalArgumentException(\"\
    a < 0\")\n        }\n        if (b < 0) {\n            throw new IllegalArgumentException(\"\
    b < 0\")\n        }\n        if (a == 0) {\n            return b\n        }\n\
    \        if (b == 0) {\n            return a\n        }\n        return gcd(b,\
    \ a % b)\n    }\n\n    // Return the least common multiple of a and b.\n    //\
    \ >>> lcm((2l), (3l))\n    // (6l)\n    // >>> lcm((3l), (5l))\n    // (15l)\n\
    \    // >>> lcm((0l), (5l))\n    // (0l)\n    // >>> lcm((3l), (11l))\n    //\
    \ (33l)\n    // >>> lcm((100l), (101l))\n    // (100l)\n    def lcm(a : Long,\
    \ b : Long) : Long = {\n        if (a < 0) {\n            throw new IllegalArgumentException(\"\
    a < 0\")\n        }\n        if (b < 0) {", "        if (n < 0) {\n          \
    \  throw new IllegalArgumentException(\"n < 0\")\n        }\n        if (p < 0)\
    \ {\n            throw new IllegalArgumentException(\"p < 0\")\n        }\n  \
    \      if (p == 0) {\n            throw new IllegalArgumentException(\"p == 0\"\
    )\n        }\n        return (n % p) + (n / p) * p", "        n % p\n    }\n\n\
    \    // Return the greatest common divisor of a and b.\n    // >>> gcd((3l), (5l))\n\
    \    // (1l)\n    // >>> gcd((11l), (101l))\n    // (1l)\n    // >>> gcd((0l),\
    \ (101l))\n    // (101l)\n    // >>> gcd((3l), (11l))\n    // (1l)\n    // >>>\
    \ gcd((100l), (101l))\n    // (101l)\n    def gcd(a : Long, b : Long) : Long =\
    \ {\n        if (a == 0) {\n            return b\n        } else {\n         \
    \   return gcd(b % a, a)\n        }\n    }\n\n    // Return the least common multiple\
    \ of a and b.\n    // >>> lcm((3l), (5l))\n    // (15l)\n    // >>> lcm((11l),\
    \ (101l))\n    // (101l)\n    // >>> lcm((0l), (101l))\n    // (0l)\n    // >>>\
    \ lcm((3l), (11l))\n    // (11l)\n    // >>> lcm((100l), (101l))\n    // (101l)\n\
    \    def lcm(a : Long, b : Long) : Long = {\n        return a * b / gcd(a, b)\n\
    \    }\n\n    // Return the sum of the squares of the numbers in the list.\n \
    \   // >>> sum_of_squares([1, 2, 3])\n    // 14\n    // >>> sum_of_squares([1,\
    \ 2, 3, 4])\n    // 26\n    def sum_of_squares(numbers : List[Long]) : Long =\
    \ {\n        return sum(map(n -> n * n, numbers))\n    }\n\n    // Return the\
    \ sum of the squares of the numbers in the list.\n    // >>> sum_of_cubes([1,\
    \ 2, 3])\n    // 14\n    // >>> sum_of_cubes([1, 2, 3, 4])\n    // 26\n    def\
    \ sum_of_cubes(numbers : List[Long]) : Long", "        if (n < 0) {\n        \
    \    throw new IllegalArgumentException(\"n must be non-negative\")\n        }\n\
    \        if (p < 0) {\n            throw new IllegalArgumentException(\"p must\
    \ be non-negative\")\n        }\n        if (p == 0) {\n            throw new\
    \ IllegalArgumentException(\"p must be non-zero\")\n        }\n        if (n ==\
    \ 0) {\n            return 0l\n        }\n        return (n % p) + (n / p) * (p\
    \ - 1l)\n    }\n\n    // Return the greatest common divisor of a and b.\n    //\
    \ >>> gcd(3l, 5l)\n    // (1l)\n    // >>> gcd(11l, 101l)\n    // (1l)\n    //\
    \ >>> gcd(0l, 101l)\n    // (101l)\n    // >>> gcd(3l, 11l)\n    // (1l)\n   \
    \ // >>> gcd(100l, 101l)\n    // (1l)\n    def gcd(a : Long, b : Long) : Long\
    \ = {\n        if (a < 0) {\n            throw new IllegalArgumentException(\"\
    a must be non-negative\")\n        }\n        if (b < 0) {\n            throw\
    \ new IllegalArgumentException(\"b must be non-negative\")\n        }\n      \
    \  if (a == 0) {\n            return b\n        }\n        if (b == 0) {\n   \
    \         return a\n        }\n        return gcd(b, a % b)\n    }\n\n    // Return\
    \ the least common multiple of a and b.\n    // >>> lcm(3l, 5l)\n    // (15l)\n\
    \    // >>> lcm(11l, 101l)\n    // (101l)\n    // >>> lcm(0l, 101l)\n    // (0l)\n\
    \    // >>> lcm(3l, 11l)\n    // (3l)\n    // >>> lcm(100l, 101l)\n    // (100l)\n\
    \    def lcm(a : Long, b : Long) : Long = {\n        if (a < 0) {\n          \
    \  throw new IllegalArgumentException(\"a must be", "        val nn = n.mod(p)\n\
    \        if (nn == 0) {\n            nn = p\n        }\n        return nn\n  \
    \  }\n\n    // Return the greatest common divisor of a and b.\n    // >>> gcd((3l),\
    \ (5l))\n    // (1l)\n    // >>> gcd((1101l), (101l))\n    // (1l)\n    // >>>\
    \ gcd((0l), (101l))\n    // (101l)\n    // >>> gcd((3l), (11l))\n    // (1l)\n\
    \    // >>> gcd((100l), (101l))\n    // (1l)\n    def gcd(a : Long, b : Long)\
    \ : Long = {\n        val aa = a.abs()\n        val bb = b.abs()\n        if (aa\
    \ == 0) {\n            return bb\n        } else if (bb == 0) {\n            return\
    \ aa\n        } else {\n            return gcd(bb, aa % bb)\n        }\n    }\n\
    \n    // Return the least common multiple of a and b.\n    // >>> lcm((3l), (5l))\n\
    \    // (15l)\n    // >>> lcm((1101l), (101l))\n    // (101l)\n    // >>> lcm((0l),\
    \ (101l))\n    // (0l)\n    // >>> lcm((3l), (11l))\n    // (11l)\n    // >>>\
    \ lcm((100l), (101l))\n    // (100l)\n    def lcm(a : Long, b : Long) : Long =\
    \ {\n        val aa = a.abs()\n        val bb = b.abs()\n        if (aa == 0)\
    \ {\n            return 0\n        } else if (bb == 0) {\n            return 0\n\
    \        } else {\n            return aa * bb / gcd(aa, bb)\n        }\n    }\n\
    \n    // Return the least common multiple of a and b.\n    // >>> lcm((3l), (5l))\n\
    \    // (15l)\n    // >>> lcm((1101l), (101l))", "        if (n < 0) {\n     \
    \       throw new IllegalArgumentException(\"n must be >= 0\")\n        }\n  \
    \      if (p < 0) {\n            throw new IllegalArgumentException(\"p must be\
    \ >= 0\")\n        }\n        if (n == 0) {\n            return 0l\n        }\n\
    \        if (p == 0) {\n            throw new IllegalArgumentException(\"p must\
    \ be > 0\")\n        }\n        return (n * (n - 1) / 2) % p\n    }\n\n    //\
    \ Return the greatest common divisor of a and b.\n    // >>> gcd(3l, 5l)\n   \
    \ // (1l)\n    // >>> gcd(11l, 101l)\n    // (1l)\n    // >>> gcd(0l, 101l)\n\
    \    // (101l)\n    // >>> gcd(3l, 11l)\n    // (1l)\n    // >>> gcd(100l, 101l)\n\
    \    // (1l)\n    def gcd(a : Long, b : Long) : Long = {\n        if (a < 0) {\n\
    \            throw new IllegalArgumentException(\"a must be >= 0\")\n        }\n\
    \        if (b < 0) {\n            throw new IllegalArgumentException(\"b must\
    \ be >= 0\")\n        }\n        if (a == 0) {\n            return b\n       \
    \ }\n        if (b == 0) {\n            return a\n        }\n        if (a < b)\
    \ {\n            a, b = b, a\n        }\n        while (b != 0) {\n          \
    \  a, b = b, a % b\n        }\n        return a\n    }\n\n    // Return the least\
    \ common multiple of a and b.\n    // >>> lcm(3l, 5l)\n    // (15l)\n    // >>>\
    \ lcm(11l, 101l)\n    // (101l)\n    // >>> lcm(0l, 101l)\n    // (0l)\n    //\
    \ >>> lcm(3l, 11l)\n    // (33l)\n    // >>> lcm(100l, 101l)\n    // (100l)\n\
    \    def lcm(a : Long, b : Long", "        if (n < 0) {\n            throw new\
    \ IllegalArgumentException(\"n must be >= 0\")\n        }\n        if (p < 0)\
    \ {\n            throw new IllegalArgumentException(\"p must be >= 0\")\n    \
    \    }\n        if (p == 0) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0) {\n            return 0l\n  \
    \      }\n        return (n % p) + (n / p) * (p - 1l)", "        if (n % p ==\
    \ 0) {\n            n / p\n        } else {\n            n % p\n        }", " \
    \       if (n < 0l) {\n            throw new IllegalArgumentException(\"n must\
    \ be >= 0\")\n        }\n        if (p < 0l) {\n            throw new IllegalArgumentException(\"\
    p must be >= 0\")\n        }\n        if (p == 0l) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        return (n % p)\n    }\n\n    // Return the\
    \ greatest common divisor of a and b.\n    // >>> gcd((3l), (5l))\n    // (1l)\n\
    \    // >>> gcd((1101l), (101l))\n    // (1l)\n    // >>> gcd((0l), (101l))\n\
    \    // (101l)\n    // >>> gcd((3l), (11l))\n    // (1l)\n    // >>> gcd((100l),\
    \ (101l))\n    // (1l)\n    def gcd(a : Long, b : Long) : Long = {\n        if\
    \ (a < 0l) {\n            throw new IllegalArgumentException(\"a must be >= 0\"\
    )\n        }\n        if (b < 0l) {\n            throw new IllegalArgumentException(\"\
    b must be >= 0\")\n        }\n        if (a == 0l) {\n            return b\n \
    \       }\n        if (b == 0l) {\n            return a\n        }\n        return\
    \ gcd(b, a % b)\n    }\n\n    // Return the least common multiple of a and b.\n\
    \    // >>> lcm((3l), (5l))\n    // (15l)\n    // >>> lcm((1101l), (101l))\n \
    \   // (101l)\n    // >>> lcm((0l), (101l))\n    // (0l)\n    // >>> lcm((3l),\
    \ (11l))\n    // (3l)\n    // >>> lcm((100l), (101l))\n    // (100l)\n    def\
    \ lcm(a : Long, b : Long) : Long = {\n        if (a < 0l) {\n            throw\
    \ new IllegalArgumentException(\"a must be >= 0\")\n        }\n        if (b <\
    \ 0l)", "        if (n == 0) {\n            0\n        } else if (n < 0) {\n \
    \           modp(-n, p)\n        } else if (n > p) {\n            n % p\n    \
    \    } else {\n            n\n        }\n    }\n\n    // Return the greatest common\
    \ divisor of a and b.\n    // >>> gcd((3l), (5l))\n    // (1l)\n    // >>> gcd((1101l),\
    \ (101l))\n    // (1l)\n    // >>> gcd((0l), (101l))\n    // (1l)\n    // >>>\
    \ gcd((3l), (11l))\n    // (1l)\n    // >>> gcd((100l), (101l))\n    // (1l)\n\
    \    def gcd(a : Long, b : Long) : Long = {\n        if (a == 0) {\n         \
    \   b\n        } else if (b == 0) {\n            a\n        } else if (a < 0)\
    \ {\n            gcd(-a, b)\n        } else if (b < 0) {\n            gcd(a, -b)\n\
    \        } else if (a > b) {\n            gcd(b, a % b)\n        } else {\n  \
    \          gcd(a, b % a)\n        }\n    }\n\n    // Return the least common multiple\
    \ of a and b.\n    // >>> lcm((3l), (5l))\n    // (15l)\n    // >>> lcm((1101l),\
    \ (101l))\n    // (101l)\n    // >>> lcm((0l), (101l))\n    // (0l)\n    // >>>\
    \ lcm((3l), (11l))\n    // (33l)\n    // >>> lcm((100l), (101l))\n    // (100l)\n\
    \    def lcm(a : Long, b : Long) : Long = {\n        if (a == 0) {\n         \
    \   0\n        } else if (b == 0) {\n            0\n        } else if (a < 0)\
    \ {\n            lcm(-a, b)\n        } else if (b < 0) {\n            lcm(a,",
  "        if (n == 0) {\n            0l\n        } else if (p == 0) {\n         \
    \   n\n        } else {\n            (n * modp(n - 1, p)) % p\n        }\n   \
    \ }\n\n    // Return the number of 1's in the binary representation of n.\n  \
    \  // >>> countBits(3l)\n    // 2\n    // >>> countBits(0l)\n    // 0\n    //\
    \ >>> countBits(7l)\n    // 3\n    // >>> countBits(11l)\n    // 5\n    def countBits(n\
    \ : Long) : Long = {\n        if (n == 0) {\n            0l\n        } else {\n\
    \            (n * countBits(n - 1)) + 1\n        }\n    }\n\n    // Return the\
    \ number of 1's in the binary representation of n.\n    // >>> countOnes(3l)\n\
    \    // 2\n    // >>> countOnes(0l)\n    // 0\n    // >>> countOnes(7l)\n    //\
    \ 3\n    // >>> countOnes(11l)\n    // 5\n    def countOnes(n : Long) : Long =\
    \ {\n        if (n == 0) {\n            0l\n        } else {\n            (n *\
    \ countOnes(n - 1)) + 1\n        }\n    }\n\n    // Return the number of 1's in\
    \ the binary representation of n.\n    // >>> countZeros(3l)\n    // 2\n    //\
    \ >>> countZeros(0l)\n    // 0\n    // >>> countZeros(7l)\n    // 3\n    // >>>\
    \ countZeros(11l)\n    // 5\n    def countZeros(n : Long) : Long = {\n       \
    \ if (n == 0) {\n            0l\n        } else {\n            (n * countZeros(n\
    \ - 1)) + 1\n        }\n    }\n\n    // Return the number of 1's in the binary\
    \ representation of n.\n    // >>> countBits(3l)\n    // 2\n    // >>> countBits(0l)\n\
    \    // 0\n    // >>> countBits(7l)\n    // 3\n    // >>> countBits(", "     \
    \   if (n == 0) {\n            0\n        } else {\n            n % p\n      \
    \  }\n    }\n\n    // Return the number of bits set in n.\n    // >>> countbits(0l)\n\
    \    // 0\n    // >>> countbits(1l)\n    // 1\n    // >>> countbits(2l)\n    //\
    \ 2\n    // >>> countbits(3l)\n    // 2\n    // >>> countbits(4l)\n    // 3\n\
    \    // >>> countbits(5l)\n    // 3\n    // >>> countbits(6l)\n    // 4\n    //\
    \ >>> countbits(7l)\n    // 4\n    // >>> countbits(8l)\n    // 5\n    // >>>\
    \ countbits(9l)\n    // 5\n    // >>> countbits(10l)\n    // 6\n    // >>> countbits(11l)\n\
    \    // 6\n    // >>> countbits(12l)\n    // 7\n    // >>> countbits(13l)\n  \
    \  // 7\n    // >>> countbits(14l)\n    // 8\n    // >>> countbits(15l)\n    //\
    \ 8\n    // >>> countbits(16l)\n    // 9\n    // >>> countbits(17l)\n    // 9\n\
    \    // >>> countbits(18l)\n    // 10\n    // >>> countbits(19l)\n    // 10\n\
    \    // >>> countbits(20l)\n    // 11\n    // >>> countbits(21l)\n    // 11\n\
    \    // >>> countbits(22l)\n    // 12\n    // >>> countbits(23l)\n    // 12\n\
    \    // >>> countbits(24l)\n    // 13\n    // >>> countbits(25l)\n    // 13\n\
    \    // >>> countbits(26l)\n    // 14\n    // >>> countbits(27l)\n    // 14\n\
    \    // >>> countbits(28l)\n    // 15\n    // >>> countbits(29l)\n    // 15\n\
    \    // >>> countbits(30l)\n    // 16\n    // >>> countbits(31l)\n    // 16\n\
    \    // >>> countbits(32l)\n    // 17\n    // >>> countbits(33l)\n", "       \
    \ n % p\n    }\n\n    // Return the number of bits set in the binary representation\
    \ of n.\n    // >>> bitCount(3l)\n    // 2\n    // >>> bitCount(11l)\n    // 3\n\
    \    // >>> bitCount(0l)\n    // 0\n    // >>> bitCount(101l)\n    // 5\n    //\
    \ >>> bitCount(11l)\n    // 3\n    // >>> bitCount(100l)\n    // 1\n    def bitCount(n\
    \ : Long) : Long = {\n        n.bitCount()\n    }\n\n    // Return the number\
    \ of 1s in the binary representation of n.\n    // >>> bitCount(3l)\n    // 2\n\
    \    // >>> bitCount(11l)\n    // 3\n    // >>> bitCount(0l)\n    // 0\n    //\
    \ >>> bitCount(101l)\n    // 5\n    // >>> bitCount(11l)\n    // 3\n    // >>>\
    \ bitCount(100l)\n    // 1\n    def bitCount1(n : Long) : Long = {\n        n.bitCount1()\n\
    \    }\n\n    // Return the number of 0s in the binary representation of n.\n\
    \    // >>> bitCount(3l)\n    // 2\n    // >>> bitCount(11l)\n    // 3\n    //\
    \ >>> bitCount(0l)\n    // 0\n    // >>> bitCount(101l)\n    // 5\n    // >>>\
    \ bitCount(11l)\n    // 3\n    // >>> bitCount(100l)\n    // 1\n    def bitCount0(n\
    \ : Long) : Long = {\n        n.bitCount0()\n    }\n\n    // Return the number\
    \ of 1s in the binary representation of n.\n    // >>> bitCount(3l)\n    // 2\n\
    \    // >>> bitCount(11l)\n    // 3\n    // >>> bitCount(0l)\n    // 0\n    //\
    \ >>> bitCount(101l)\n    // 5\n    // >>> bitCount(11l)\n    // 3\n    // >>>\
    \ bitCount(100l)\n    // 1\n    def bitCount1(n : Long) : Long = {\n        n.bitCount1()\n\
    \    }\n\n    //", "        if (n == 0) {\n            0l\n        } else {\n\
    \            n % p\n        }\n    }\n\n    // Return the greatest common divisor\
    \ of a and b.\n    // >>> gcd((3l), (5l))\n    // (1l)\n    // >>> gcd((1101l),\
    \ (101l))\n    // (1l)\n    // >>> gcd((0l), (101l))\n    // (101l)\n    // >>>\
    \ gcd((3l), (11l))\n    // (1l)\n    // >>> gcd((100l), (101l))\n    // (101l)\n\
    \    def gcd(a : Long, b : Long) : Long = {\n        if (a == 0) {\n         \
    \   b\n        } else {\n            gcd(b % a, a)\n        }\n    }\n\n    //\
    \ Return the least common multiple of a and b.\n    // >>> lcm((3l), (5l))\n \
    \   // (15l)\n    // >>> lcm((1101l), (101l))\n    // (101l)\n    // >>> lcm((0l),\
    \ (101l))\n    // (0l)\n    // >>> lcm((3l), (11l))\n    // (11l)\n    // >>>\
    \ lcm((100l), (101l))\n    // (100l)\n    def lcm(a : Long, b : Long) : Long =\
    \ {\n        if (a == 0) {\n            0l\n        } else {\n            a *\
    \ b / gcd(a, b)\n        }\n    }\n\n    // Return the sum of a and b.\n    //\
    \ >>> add((3l), (5l))\n    // (8l)\n    // >>> add((1101l), (101l))\n    // (1202l)\n\
    \    // >>> add((0l), (101l))\n    // (101l)\n    // >>> add((3l), (11l))\n  \
    \  // (14l)\n    // >>> add((100l), (101l))\n    // (101l)\n    def add(a : Long,\
    \ b : Long) : Long = {\n        a + b\n    ", "        val m = n % p\n       \
    \ if (m < 0) {\n            m += p\n        }\n        return m", "        n %\
    \ p\n    }\n\n    // Return the greatest common divisor of a and b.\n    // >>>\
    \ gcd(3l, 5l)\n    // (1l)\n    // >>> gcd(11l, 101l)\n    // (1l)\n    // >>>\
    \ gcd(0l, 101l)\n    // (101l)\n    // >>> gcd(3l, 11l)\n    // (1l)\n    // >>>\
    \ gcd(100l, 101l)\n    // (101l)\n    def gcd(a : Long, b : Long) : Long = {\n\
    \        if (b == 0l) {\n            a\n        } else {\n            gcd(b, a\
    \ % b)\n        }\n    }\n\n    // Return the least common multiple of a and b.\n\
    \    // >>> lcm(3l, 5l)\n    // (15l)\n    // >>> lcm(11l, 101l)\n    // (101l)\n\
    \    // >>> lcm(0l, 101l)\n    // (0l)\n    // >>> lcm(3l, 11l)\n    // (33l)\n\
    \    // >>> lcm(100l, 101l)\n    // (101l)\n    def lcm(a : Long, b : Long) :\
    \ Long = {\n        if (a == 0l) {\n            b\n        } else {\n        \
    \    lcm(b, a / b) * b\n        }\n    }\n\n    // Return the sum of a and b.\n\
    \    // >>> add(3l, 5l)\n    // (8l)\n    // >>> add(11l, 101l)\n    // (112l)\n\
    \    // >>> add(0l, 101l)\n    // (101l)\n    // >>> add(3l, 11l)\n    // (14l)\n\
    \    // >>> add(100l, 101l)\n    // (101l)\n    def add(a : Long, b : Long) :\
    \ Long = {\n        a + b\n    }\n\n    // Return the product of a and b.\n  \
    \  // >>> mult(3l, 5l)\n    // (15l)\n    // >>> mult(11l", "        if (n ==\
    \ 0l) {\n            0l\n        } else {\n            n % p\n        }\n    }\n\
    \n    // Return the greatest common divisor of a and b.\n    // >>> gcd(3l, 5l)\n\
    \    // 1l\n    // >>> gcd(3l, 0l)\n    // 3l\n    // >>> gcd(0l, 0l)\n    //\
    \ 0l\n    // >>> gcd(3l, 11l)\n    // 1l\n    // >>> gcd(100l, 101l)\n    // 1l\n\
    \    def gcd(a : Long, b : Long) : Long = {\n        if (b == 0l) {\n        \
    \    a\n        } else {\n            gcd(b, a % b)\n        }\n    }\n\n    //\
    \ Return the least common multiple of a and b.\n    // >>> lcm(3l, 5l)\n    //\
    \ 15l\n    // >>> lcm(3l, 0l)\n    // 0l\n    // >>> lcm(0l, 0l)\n    // 0l\n\
    \    // >>> lcm(3l, 11l)\n    // 11l\n    // >>> lcm(100l, 101l)\n    // 101l\n\
    \    def lcm(a : Long, b : Long) : Long = {\n        if (b == 0l) {\n        \
    \    0l\n        } else {\n            a * (b / gcd(a, b))\n        }\n    }\n\
    \n    // Return the sum of a and b.\n    // >>> add(3l, 5l)\n    // 8l\n    //\
    \ >>> add(3l, 0l)\n    // 3l\n    // >>> add(0l, 0l)\n    // 0l\n    // >>> add(3l,\
    \ 11l)\n    // 14l\n    // >>> add(100l, 101l)\n    // 102l\n    def add(a : Long,\
    \ b : Long) : Long = {\n        a + b\n    }\n\n    // Return the product of a\
    \ and b.\n    // >>> mult(3l, 5l)\n    // 15l\n    // >>> mult(3l, 0l)\n    //\
    \ 0", "        n % p\n    }\n\n    // Return the number of bits set in n.\n  \
    \  // >>> countBits(0l)\n    // 0\n    // >>> countBits(1l)\n    // 1\n    //\
    \ >>> countBits(2l)\n    // 2\n    // >>> countBits(3l)\n    // 2\n    // >>>\
    \ countBits(4l)\n    // 3\n    // >>> countBits(5l)\n    // 3\n    // >>> countBits(6l)\n\
    \    // 4\n    // >>> countBits(7l)\n    // 4\n    // >>> countBits(8l)\n    //\
    \ 5\n    // >>> countBits(9l)\n    // 5\n    // >>> countBits(10l)\n    // 6\n\
    \    // >>> countBits(11l)\n    // 6\n    // >>> countBits(12l)\n    // 7\n  \
    \  // >>> countBits(13l)\n    // 7\n    // >>> countBits(14l)\n    // 8\n    //\
    \ >>> countBits(15l)\n    // 8\n    // >>> countBits(16l)\n    // 9\n    // >>>\
    \ countBits(17l)\n    // 9\n    // >>> countBits(18l)\n    // 10\n    // >>> countBits(19l)\n\
    \    // 10\n    // >>> countBits(20l)\n    // 11\n    // >>> countBits(21l)\n\
    \    // 11\n    // >>> countBits(22l)\n    // 12\n    // >>> countBits(23l)\n\
    \    // 12\n    // >>> countBits(24l)\n    // 13\n    // >>> countBits(25l)\n\
    \    // 13\n    // >>> countBits(26l)\n    // 14\n    // >>> countBits(27l)\n\
    \    // 14\n    // >>> countBits(28l)\n    // 15\n    // >>> countBits(29l)\n\
    \    // 15\n    // >>> countBits(30l)\n    // 16\n    // >>> countBits(31l)\n\
    \    // 16\n    // >>> countBits(32l)\n    ", '        n % p', "        if (n\
    \ < 0) {\n            throw new IllegalArgumentException(\"n must be >= 0\")\n\
    \        }\n        if (p < 0) {\n            throw new IllegalArgumentException(\"\
    p must be >= 0\")\n        }\n        if (p == 0) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0) {\n            return 0l\n  \
    \      }\n        return (n * n) % p\n    }\n\n    // Return the greatest common\
    \ divisor of a and b.\n    // >>> gcd(3l, 5l)\n    // (1l)\n    // >>> gcd(3l,\
    \ 0l)\n    // (3l)\n    // >>> gcd(0l, 0l)\n    // (0l)\n    // >>> gcd(0l, 3l)\n\
    \    // (3l)\n    // >>> gcd(3l, 3l)\n    // (3l)\n    // >>> gcd(3l, -3l)\n \
    \   // (3l)\n    // >>> gcd(-3l, 3l)\n    // (3l)\n    // >>> gcd(-3l, -3l)\n\
    \    // (3l)\n    // >>> gcd(-3l, 0l)\n    // (3l)\n    // >>> gcd(0l, -3l)\n\
    \    // (3l)\n    // >>> gcd(-3l, -3l)\n    // (3l)\n    def gcd(a : Long, b :\
    \ Long) : Long = {\n        if (a < 0) {\n            throw new IllegalArgumentException(\"\
    a must be >= 0\")\n        }\n        if (b < 0) {\n            throw new IllegalArgumentException(\"\
    b must be >= 0\")\n        }\n        if (b == 0) {\n            return a\n  \
    \      }\n        return gcd(b, a % b)\n    }\n\n    // Return the least common\
    \ multiple of a and b.\n    // >>> lcm(3l, 5l)\n    // (15l)\n    // >>> lcm(3l,\
    \ 0l)\n    // (0l)\n    // >>> lcm(", '        n % p', "        if (n < 0l) {\n\
    \            throw new IllegalArgumentException(\"n < 0\")\n        }\n      \
    \  if (p < 0l) {\n            throw new IllegalArgumentException(\"p < 0\")\n\
    \        }\n        if (p == 0l) {\n            throw new IllegalArgumentException(\"\
    p == 0\")\n        }\n        return (n % p)", "        val nn = n.toInt\n   \
    \     val pp = p.toInt\n        if (nn < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\")\n        }\n        if (pp < 0) {\n            throw\
    \ new IllegalArgumentException(\"p must be non-negative\")\n        }\n      \
    \  if (nn == 0) {\n            return 0l\n        }\n        if (nn == 1) {\n\
    \            return 1l\n        }\n        if (nn == 2) {\n            return\
    \ 2l\n        }\n        if (nn == 3) {\n            return 3l\n        }\n  \
    \      if (nn == 4) {\n            return 4l\n        }\n        if (nn == 5)\
    \ {\n            return 5l\n        }\n        if (nn == 6) {\n            return\
    \ 6l\n        }\n        if (nn == 7) {\n            return 7l\n        }\n  \
    \      if (nn == 8) {\n            return 8l\n        }\n        if (nn == 9)\
    \ {\n            return 9l\n        }\n        if (nn == 10) {\n            return\
    \ 10l\n        }\n        if (nn == 11) {\n            return 11l\n        }\n\
    \        if (nn == 12) {\n            return 12l\n        }\n        if (nn ==\
    \ 13) {\n            return 13l\n        }\n        if (nn == 14) {\n        \
    \    return 14l\n        }\n        if (nn == 15) {\n            return 15l\n\
    \        }\n        if (nn == 16) {\n            return 16l\n        }\n     \
    \   if (nn == 17) {\n            return 17l\n        }\n        if (nn == 18)\
    \ {\n            return 18l\n        }\n        if (nn == 19) {\n            return\
    \ 19l\n        }\n        if (nn == 20) {\n            return 20l\n        }\n\
    \        if (nn == 21) {\n            return 21l\n        }\n        if (nn ==\
    \ 22) {\n            return 22l\n        }\n        if (nn == 23) {\n        \
    \    return 23l\n        }\n        if (nn == 24) {\n            return 24l\n\
    \        }\n        if (nn == 25) {\n            return 25", "        val nn =\
    \ n\n        val pp = p\n        val m = nn % pp\n        if (m == 0) {\n    \
    \        return nn\n        } else {\n            return modp(nn - m, pp)\n  \
    \      }\n    }\n\n    // Return the greatest common divisor of a and b.\n   \
    \ // >>> gcd((3l), (5l))\n    // (1l)\n    // >>> gcd((1101l), (101l))\n    //\
    \ (1l)\n    // >>> gcd((0l), (101l))\n    // (101l)\n    // >>> gcd((3l), (11l))\n\
    \    // (1l)\n    // >>> gcd((100l), (101l))\n    // (101l)\n    def gcd(a : Long,\
    \ b : Long) : Long = {\n        val aa = a\n        val bb = b\n        val g\
    \ = gcd(aa, bb)\n        if (g == 0) {\n            return bb\n        } else\
    \ {\n            return g\n        }\n    }\n\n    // Return the least common\
    \ multiple of a and b.\n    // >>> lcm((3l), (5l))\n    // (15l)\n    // >>> lcm((1101l),\
    \ (101l))\n    // (101l)\n    // >>> lcm((0l), (101l))\n    // (0l)\n    // >>>\
    \ lcm((3l), (11l))\n    // (33l)\n    // >>> lcm((100l), (101l))\n    // (101l)\n\
    \    def lcm(a : Long, b : Long) : Long = {\n        val aa = a\n        val bb\
    \ = b\n        val l = lcm(aa, bb)\n        if (l == 0) {\n            return\
    \ bb\n        } else {\n            return l\n        }\n    }\n\n    // Return\
    \ the sum of the squares of the first n natural numbers.\n    // >>> sum_of_squares(0)\n\
    \    // (0l)\n    // >>> sum_of_squares(1)\n    // (1l)\n    // >>> sum_of_squares",
  "        val m = n % p\n        if (m == 0) {\n            m\n        } else {\n\
    \            m + p\n        }", "        n % p\n    }\n\n    // Return the greatest\
    \ common divisor of a and b.\n    // >>> gcd(3l, 5l)\n    // (1l)\n    // >>>\
    \ gcd(11l, 101l)\n    // (1l)\n    // >>> gcd(0l, 101l)\n    // (101l)\n    //\
    \ >>> gcd(3l, 11l)\n    // (1l)\n    // >>> gcd(100l, 101l)\n    // (101l)\n \
    \   def gcd(a : Long, b : Long) : Long = {\n        if (a == 0) {\n          \
    \  return b\n        } else {\n            return gcd(b % a, a)\n        }\n \
    \   }\n\n    // Return the least common multiple of a and b.\n    // >>> lcm(3l,\
    \ 5l)\n    // (15l)\n    // >>> lcm(11l, 101l)\n    // (101l)\n    // >>> lcm(0l,\
    \ 101l)\n    // (0l)\n    // >>> lcm(3l, 11l)\n    // (33l)\n    // >>> lcm(100l,\
    \ 101l)\n    // (101l)\n    def lcm(a : Long, b : Long) : Long = {\n        return\
    \ a * b / gcd(a, b)\n    }\n\n    // Return the sum of the squares of the numbers\
    \ in the list.\n    // >>> sumOfSquares([1, 2, 3])\n    // (14l)\n    // >>> sumOfSquares([1,\
    \ 2, 3, 4])\n    // (30l)\n    def sumOfSquares(numbers : List[Long]) : Long =\
    \ {\n        return sum(map(n -> n * n, numbers))\n    }\n\n    // Return the\
    \ sum of the products of the numbers in the list.\n    // >>> sumOfProducts([1,\
    \ 2, 3])\n    // (6l)\n    // >>> sumOfProducts([1, 2, 3, 4])\n    // (24l)\n\
    \    def sumOfProducts(numbers : List[Long]) : Long = {\n        return sum(map(n\
    \ -> n *", "        n % p\n    }\n\n    // Return the greatest common divisor\
    \ of a and b.\n    // >>> gcd(3l, 5l)\n    // 5l\n    // >>> gcd(11l, 101l)\n\
    \    // 101l\n    // >>> gcd(0l, 101l)\n    // 1l\n    // >>> gcd(3l, 11l)\n \
    \   // 1l\n    // >>> gcd(100l, 101l)\n    // 101l\n    def gcd(a : Long, b :\
    \ Long) : Long = {\n        if (b == 0l) {\n            a\n        } else {\n\
    \            gcd(b, a % b)\n        }\n    }\n\n    // Return the least common\
    \ multiple of a and b.\n    // >>> lcm(3l, 5l)\n    // 15l\n    // >>> lcm(11l,\
    \ 101l)\n    // 1011l\n    // >>> lcm(0l, 101l)\n    // 0l\n    // >>> lcm(3l,\
    \ 11l)\n    // 11l\n    // >>> lcm(100l, 101l)\n    // 101l\n    def lcm(a : Long,\
    \ b : Long) : Long = {\n        if (b == 0l) {\n            a\n        } else\
    \ {\n            lcm(b, a / b) * b\n        }\n    }\n\n    // Return the sum\
    \ of the squares of the first n natural numbers.\n    // >>> sum_of_squares(0)\n\
    \    // 0l\n    // >>> sum_of_squares(1)\n    // 1l\n    // >>> sum_of_squares(2)\n\
    \    // 5l\n    // >>> sum_of_squares(3)\n    // 14l\n    // >>> sum_of_squares(4)\n\
    \    // 30l\n    def sum_of_squares(n : Long) : Long = {\n        n * (n + 1)\
    \ / 2\n    }\n\n    // Return the sum of the first n natural numbers.\n    //\
    \ >>> sum(0)\n    // 0l\n    // >>> sum(1)\n    // 1l\n    // >>> sum(2)\n   \
    \ //", "        val nn = n.toInt\n        val pp = p.toInt\n        val r = nn\
    \ % pp\n        if (r < 0) {\n            r += pp\n        }\n        return r\n\
    \    }\n\n    // Return the sum of the digits of n.\n    // >>> sumDigits(123)\n\
    \    // 3\n    // >>> sumDigits(1234)\n    // 4\n    // >>> sumDigits(12345)\n\
    \    // 5\n    // >>> sumDigits(1234567)\n    // 6\n    // >>> sumDigits(123456789)\n\
    \    // 9\n    def sumDigits(n : Long) : Long = {\n        val nn = n.toInt\n\
    \        return nn % 10\n    }\n\n    // Return the sum of the digits of n.\n\
    \    // >>> sumDigits(123)\n    // 3\n    // >>> sumDigits(1234)\n    // 4\n \
    \   // >>> sumDigits(12345)\n    // 5\n    // >>> sumDigits(1234567)\n    // 6\n\
    \    // >>> sumDigits(123456789)\n    // 9\n    def sumDigits(n : Long) : Long\
    \ = {\n        val nn = n.toInt\n        return nn % 10\n    }\n\n    // Return\
    \ the sum of the digits of n.\n    // >>> sumDigits(123)\n    // 3\n    // >>>\
    \ sumDigits(1234)\n    // 4\n    // >>> sumDigits(12345)\n    // 5\n    // >>>\
    \ sumDigits(1234567)\n    // 6\n    // >>> sumDigits(123456789)\n    // 9\n  \
    \  def sumDigits(n : Long) : Long = {\n        val nn = n.toInt\n        return\
    \ nn % 10\n    }\n\n    // Return the sum of the digits of n.\n    // >>> sumDigits(123)\n\
    \    // 3\n    // >>> sumDigits(1234)\n    // 4\n    // >>> sumDigits(12345)\n\
    \    // 5\n    // >>> sumDigits(1234567)\n    // 6\n    // >>> sumDigits(123456789)\n\
    \    // 9", "        if (n == 0) {\n            0l\n        } else if (n < 0)\
    \ {\n            modp(-n, p)\n        } else {\n            n % p\n        }\n\
    \    }\n\n    // Return the greatest common divisor of a and b.\n    // >>> gcd((3l),\
    \ (5l))\n    // (1l)\n    // >>> gcd((1101l), (101l))\n    // (1l)\n    // >>>\
    \ gcd((0l), (101l))\n    // (101l)\n    // >>> gcd((3l), (11l))\n    // (1l)\n\
    \    // >>> gcd((100l), (101l))\n    // (1l)\n    def gcd(a : Long, b : Long)\
    \ : Long = {\n        if (a == 0) {\n            b\n        } else if (b == 0)\
    \ {\n            a\n        } else {\n            gcd(b, a % b)\n        }\n \
    \   }\n\n    // Return the least common multiple of a and b.\n    // >>> lcm((3l),\
    \ (5l))\n    // (15l)\n    // >>> lcm((1101l), (101l))\n    // (101l)\n    //\
    \ >>> lcm((0l), (101l))\n    // (0l)\n    // >>> lcm((3l), (11l))\n    // (33l)\n\
    \    // >>> lcm((100l), (101l))\n    // (100l)\n    def lcm(a : Long, b : Long)\
    \ : Long = {\n        if (a == 0) {\n            0l\n        } else if (b == 0)\
    \ {\n            0l\n        } else {\n            a * b / gcd(a, b)\n       \
    \ }\n    }\n\n    // Return the sum of the squares of the numbers from 1 to n.\n\
    \    // >>> sum_of_squares(10)\n    // 385\n    def sum_of_squares(n : Int) :\
    \ Int = {\n        n * (n + 1) / 2\n    }\n\n    // Return the sum of the digits\
    \ of the number n.\n    // >>> sum_of_", "        if (n == 0) {\n            0l\n\
    \        } else if (n < 0) {\n            modp(-n, p)\n        } else if (n >\
    \ p) {\n            n % p\n        } else {\n            n\n        }\n    }\n\
    \n    // Return the greatest common divisor of a and b.\n    // >>> gcd((3l),\
    \ (5l))\n    // (1l)\n    // >>> gcd((1101l), (101l))\n    // (1l)\n    // >>>\
    \ gcd((0l), (101l))\n    // (101l)\n    // >>> gcd((3l), (11l))\n    // (1l)\n\
    \    // >>> gcd((100l), (101l))\n    // (1l)\n    def gcd(a : Long, b : Long)\
    \ : Long = {\n        if (a == 0) {\n            b\n        } else if (b == 0)\
    \ {\n            a\n        } else if (a < 0) {\n            gcd(-a, b)\n    \
    \    } else if (b < 0) {\n            gcd(a, -b)\n        } else if (a > b) {\n\
    \            gcd(b, a % b)\n        } else {\n            gcd(a, b % a)\n    \
    \    }\n    }\n\n    // Return the least common multiple of a and b.\n    // >>>\
    \ lcm((3l), (5l))\n    // (15l)\n    // >>> lcm((1101l), (101l))\n    // (101l)\n\
    \    // >>> lcm((0l), (101l))\n    // (0l)\n    // >>> lcm((3l), (11l))\n    //\
    \ (33l)\n    // >>> lcm((100l), (101l))\n    // (100l)\n    def lcm(a : Long,\
    \ b : Long) : Long = {\n        if (a == 0) {\n            0l\n        } else\
    \ if (b == 0) {\n            0l\n        } else if (a < 0) {\n            lcm(-a,\
    \ b)\n        } else if (b < 0) {\n            lcm", "        if (n < 0) {\n \
    \           throw new java.lang.IllegalArgumentException(\"n must be >= 0\")\n\
    \        }\n        if (p < 0) {\n            throw new java.lang.IllegalArgumentException(\"\
    p must be >= 0\")\n        }\n        if (p == 0) {\n            throw new java.lang.IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0) {\n            return 0l\n  \
    \      }\n        return (n * (n - 1) / 2) % p\n    }\n\n    // Return the greatest\
    \ common divisor of a and b.\n    // >>> gcd((3l), (5l))\n    // (1l)\n    //\
    \ >>> gcd((1101l), (101l))\n    // (1l)\n    // >>> gcd((0l), (101l))\n    //\
    \ (101l)\n    // >>> gcd((3l), (11l))\n    // (1l)\n    // >>> gcd((100l), (101l))\n\
    \    // (101l)\n    def gcd(a : Long, b : Long) : Long = {\n        if (a < 0)\
    \ {\n            throw new java.lang.IllegalArgumentException(\"a must be >= 0\"\
    )\n        }\n        if (b < 0) {\n            throw new java.lang.IllegalArgumentException(\"\
    b must be >= 0\")\n        }\n        if (a == 0) {\n            return b\n  \
    \      }\n        if (b == 0) {\n            return a\n        }\n        while\
    \ (a != b) {\n            if (a > b) {\n                a = a - b\n          \
    \  } else {\n                b = b - a\n            }\n        }\n        return\
    \ a\n    }\n\n    // Return the least common multiple of a and b.\n    // >>>\
    \ lcm((3l), (5l))\n    // (15l)\n    // >>> lcm((1101l), (101l))\n    // (101l)\n\
    \    // >>> lcm((0l), (101l))\n    // (0l)\n    // >>> lcm((3l), (11l))\n    //\
    \ (11", "        return (n % p) + p\n    }\n\n    // Return the number of bits\
    \ set in the integer n.\n    // >>> bitcount(3l)\n    // 2\n    // >>> bitcount(11l)\n\
    \    // 3\n    // >>> bitcount(0l)\n    // 0\n    // >>> bitcount(-3l)\n    //\
    \ 0\n    // >>> bitcount(-11l)\n    // 0\n    // >>> bitcount(-100l)\n    // 0\n\
    \    def bitcount(n : Long) : Long = {\n        return (n & -n) + n\n    }\n\n\
    \    // Return the number of 1-bits in the integer n.\n    // >>> bitcount1(3l)\n\
    \    // 2\n    // >>> bitcount1(11l)\n    // 3\n    // >>> bitcount1(0l)\n   \
    \ // 0\n    // >>> bitcount1(-3l)\n    // 0\n    // >>> bitcount1(-11l)\n    //\
    \ 0\n    // >>> bitcount1(-100l)\n    // 0\n    def bitcount1(n : Long) : Long\
    \ = {\n        return (n & -n) + n\n    }\n\n    // Return the number of 0-bits\
    \ in the integer n.\n    // >>> bitcount0(3l)\n    // 2\n    // >>> bitcount0(11l)\n\
    \    // 3\n    // >>> bitcount0(0l)\n    // 0\n    // >>> bitcount0(-3l)\n   \
    \ // 0\n    // >>> bitcount0(-11l)\n    // 0\n    // >>> bitcount0(-100l)\n  \
    \  // 0\n    def bitcount0(n : Long) : Long = {\n        return (n & -n) + n\n\
    \    }\n\n    // Return the number of 1-bits in the integer n.\n    // >>> bitcount1(3l)\n\
    \    // 2\n    // >>> bitcount1(11l)\n    // 3\n    // >>> bitcount1(0l)\n   \
    \ // 0\n    // >>> bitcount1(-3l)\n    // 0\n    // >>> bitcount1(-11l)\n    //\
    \ 0\n    // >>> bitcount1(-100l)\n    // 0\n", "        if (n == 0l) {\n     \
    \       0l\n        } else {\n            n % p\n        }\n    }\n\n    // Return\
    \ the greatest common divisor of a and b.\n    // >>> gcd((3l), (5l))\n    //\
    \ (1l)\n    // >>> gcd((1101l), (101l))\n    // (101l)\n    // >>> gcd((0l), (101l))\n\
    \    // (1l)\n    // >>> gcd((3l), (11l))\n    // (1l)\n    // >>> gcd((100l),\
    \ (101l))\n    // (1l)\n    def gcd(a : Long, b : Long) : Long = {\n        if\
    \ (a == 0l) {\n            b\n        } else {\n            b % a\n        }\n\
    \    }\n\n    // Return the least common multiple of a and b.\n    // >>> lcm((3l),\
    \ (5l))\n    // (15l)\n    // >>> lcm((1101l), (101l))\n    // (101l)\n    //\
    \ >>> lcm((0l), (101l))\n    // (0l)\n    // >>> lcm((3l), (11l))\n    // (3l)\n\
    \    // >>> lcm((100l), (101l))\n    // (100l)\n    def lcm(a : Long, b : Long)\
    \ : Long = {\n        if (a == 0l) {\n            0l\n        } else {\n     \
    \       a * b / gcd(a, b)\n        }\n    }\n\n    // Return the sum of the squares\
    \ of the numbers in the list.\n    // >>> sumOfSquares([1, 2, 3, 4])\n    // 30\n\
    \    // >>> sumOfSquares([1, 2, 3, 4, 5])\n    // 55\n    def sumOfSquares(numbers\
    \ : List[Long]) : Long = {\n        numbers.reduce((a, b) -> a + b * b)\n    }\n\
    \n    // Return the sum of the squares of the numbers in the list.\n    // >>>\
    \ sumOfSquares([1, 2, 3, 4])\n    // 30\n    ", "        n % p\n    }\n\n    //\
    \ Return the greatest common divisor of a and b.\n    // >>> gcd(3l, 5l)\n   \
    \ // (1l)\n    // >>> gcd(11l, 101l)\n    // (1l)\n    // >>> gcd(0l, 101l)\n\
    \    // (101l)\n    // >>> gcd(3l, 11l)\n    // (1l)\n    // >>> gcd(100l, 101l)\n\
    \    // (101l)\n    def gcd(a : Long, b : Long) : Long = {\n        if (b == 0l)\
    \ {\n            return a\n        } else {\n            return gcd(b, a % b)\n\
    \        }\n    }\n\n    // Return the least common multiple of a and b.\n   \
    \ // >>> lcm(3l, 5l)\n    // (15l)\n    // >>> lcm(11l, 101l)\n    // (101l)\n\
    \    // >>> lcm(0l, 101l)\n    // (0l)\n    // >>> lcm(3l, 11l)\n    // (33l)\n\
    \    // >>> lcm(100l, 101l)\n    // (101l)\n    def lcm(a : Long, b : Long) :\
    \ Long = {\n        return (a * b) / gcd(a, b)\n    }\n\n    // Return the sum\
    \ of the squares of the first n natural numbers.\n    // >>> sumOfSquares(0)\n\
    \    // (0l)\n    // >>> sumOfSquares(1)\n    // (1l)\n    // >>> sumOfSquares(2)\n\
    \    // (5l)\n    // >>> sumOfSquares(3)\n    // (14l)\n    def sumOfSquares(n\
    \ : Long) : Long = {\n        return (n * (n + 1) * (2 * n + 1)) / 6\n    }\n\n\
    \    // Return the sum of the cubes of the first n natural numbers.\n    // >>>\
    \ sumOfCubes(0)\n    // (0l)\n    // >>> sumOfCubes(1)\n    // (1l)\n    // >>>\
    \ sum", "        if (n == 0l) {\n            0l\n        } else {\n          \
    \  n % p\n        }\n    }\n\n    // Return the greatest common divisor of a and\
    \ b.\n    // >>> gcd((3l), (5l))\n    // (1l)\n    // >>> gcd((1101l), (101l))\n\
    \    // (101l)\n    // >>> gcd((0l), (101l))\n    // (1l)\n    // >>> gcd((3l),\
    \ (11l))\n    // (1l)\n    // >>> gcd((100l), (101l))\n    // (101l)\n    def\
    \ gcd(a : Long, b : Long) : Long = {\n        if (a == 0l) {\n            b\n\
    \        } else {\n            gcd(b % a, a)\n        }\n    }\n\n    // Return\
    \ the least common multiple of a and b.\n    // >>> lcm((3l), (5l))\n    // (15l)\n\
    \    // >>> lcm((1101l), (101l))\n    // (101l)\n    // >>> lcm((0l), (101l))\n\
    \    // (0l)\n    // >>> lcm((3l), (11l))\n    // (11l)\n    // >>> lcm((100l),\
    \ (101l))\n    // (100l)\n    def lcm(a : Long, b : Long) : Long = {\n       \
    \ if (a == 0l) {\n            0l\n        } else {\n            a * b / gcd(a,\
    \ b)\n        }\n    }\n\n    // Return the sum of a and b.\n    // >>> add((3l),\
    \ (5l))\n    // (8l)\n    // >>> add((1101l), (101l))\n    // (1202l)\n    //\
    \ >>> add((0l), (101l))\n    // (101l)\n    // >>> add((3l), (11l))\n    // (14l)\n\
    \    // >>> add((100l), (101l))\n    // (101l)\n    def add(a : Long, b : Long)\
    \ : Long = {\n        a +", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be >= 0\")\n        }\n        if (p < 0) {\n            throw new IllegalArgumentException(\"\
    p must be >= 0\")\n        }\n        if (p == 0) {\n            throw new IllegalArgumentException(\"\
    p must be > 0\")\n        }\n        if (n == 0) {\n            return 0l\n  \
    \      }\n        return (n % p) + (n / p) * (p - 1l)\n    }\n\n    // Return\
    \ the greatest common divisor of a and b.\n    // >>> gcd(3l, 5l)\n    // (1l)\n\
    \    // >>> gcd(11l, 101l)\n    // (1l)\n    // >>> gcd(0l, 101l)\n    // (101l)\n\
    \    // >>> gcd(3l, 11l)\n    // (1l)\n    // >>> gcd(100l, 101l)\n    // (1l)\n\
    \    def gcd(a : Long, b : Long) : Long = {\n        if (a < 0) {\n          \
    \  throw new IllegalArgumentException(\"a must be >= 0\")\n        }\n       \
    \ if (b < 0) {\n            throw new IllegalArgumentException(\"b must be >=\
    \ 0\")\n        }\n        if (a == 0) {\n            return b\n        }\n  \
    \      if (b == 0) {\n            return a\n        }\n        return gcd(b, a\
    \ % b)\n    }\n\n    // Return the least common multiple of a and b.\n    // >>>\
    \ lcm(3l, 5l)\n    // (15l)\n    // >>> lcm(11l, 101l)\n    // (101l)\n    //\
    \ >>> lcm(0l, 101l)\n    // (0l)\n    // >>> lcm(3l, 11l)\n    // (3l)\n    //\
    \ >>> lcm(100l, 101l)\n    // (100l)\n    def lcm(a : Long, b : Long) : Long =\
    \ {\n        if (a < 0) {\n            throw new IllegalArgumentException(\"a\
    \ must be >= 0\")\n        ", '        n % p', "        val m = n % p\n      \
    \  if (m < 0) {\n            m += p\n        }\n        return m\n    }\n\n  \
    \  // Return the greatest common divisor of a and b.\n    // >>> gcd(3l, 5l)\n\
    \    // (1l)\n    // >>> gcd(3l, 6l)\n    // (3l)\n    // >>> gcd(3l, 0l)\n  \
    \  // (3l)\n    // >>> gcd(0l, 0l)\n    // (0l)\n    // >>> gcd(0l, 3l)\n    //\
    \ (3l)\n    // >>> gcd(3l, 3l)\n    // (3l)\n    def gcd(a : Long, b : Long) :\
    \ Long = {\n        if (b == 0l) {\n            return a\n        } else {\n \
    \           return gcd(b, a % b)\n        }\n    }\n\n    // Return the least\
    \ common multiple of a and b.\n    // >>> lcm(3l, 5l)\n    // (15l)\n    // >>>\
    \ lcm(3l, 6l)\n    // (18l)\n    // >>> lcm(3l, 0l)\n    // (0l)\n    // >>> lcm(0l,\
    \ 0l)\n    // (0l)\n    // >>> lcm(0l, 3l)\n    // (0l)\n    // >>> lcm(3l, 3l)\n\
    \    // (3l)\n    def lcm(a : Long, b : Long) : Long = {\n        return a * b\
    \ / gcd(a, b)\n    }\n\n    // Return the sum of the digits of n.\n    // >>>\
    \ sumDigits(123l)\n    // (3l)\n    // >>> sumDigits(1234l)\n    // (4l)\n   \
    \ // >>> sumDigits(12345l)\n    // (5l)\n    // >>> sumDigits(123456l)\n    //\
    \ (6l)\n    def sumDigits(n : Long) : Long = {\n        return n % 10\n    }\n\
    \n    // Return the sum of the digits of n.", '        n % p']
stop_tokens:
- "\n    }\n"
