{
  "name": "HumanEval_102_choose_num",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // This function takes two positive numbers x and y and returns the\n    // biggest even integer number that is in the range [x, y] inclusive. If \n    // there's no such number, then the function should return -1.\n    // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l), (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n}\n",
  "completions": [
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_min = ys.min\n        val xs_min = xs.min\n        val ys_max = ys.max\n        val xs_max_inclusive = xs_max.isInclusive\n        val ys_min_inclusive = ys_min.isInclusive\n        val xs_min_inclusive = xs_min.isInclusive\n        val ys_max_inclusive = ys_max.isInclusive\n        val xs_max_inclusive_and_ys_min_inclusive = xs_max_inclusive && ys_min_inclusive\n        val xs_min_inclusive_and_ys_max_inclusive = xs_min_inclusive && ys_max_inclusive\n        val xs_max_inclusive_and_ys_min_inclusive_and_ys_max_inclusive = xs_max_inclusive && ys_min_inclusive && ys_max_inclusive\n        val xs_min_inclusive_and_ys_max_inclusive_and_ys_min_inclusive = xs_min_inclusive && ys_max_inclusive && ys_min_inclusive\n        val xs_max_inclusive_and_ys_min_inclusive_and_ys_max_inclusive_and_ys_min_inclusive = xs_max_inclusive && ys_min_inclusive && ys_max_inclusive && ys_min_inclusive\n        val xs_min_inclusive_and_ys_max_inclusive_and_ys_min_inclusive_and_ys_max_inclusive = xs_min_inclusive && ys_max_inclusive && ys_min_inclusive && ys_max_inclusive\n        val xs_max_inclusive_and_ys_min_inclusive_and_ys_max_inclusive_and_ys_min_inclusive_and_ys_max_inclusive = xs_max_inclusive &&",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val xs_max = xs_len.max\n        val ys_max = ys_len.max\n        val xs_min = xs_len.min\n        val ys_min = ys_len.min\n        val xs_diff = xs_max - xs_min\n        val ys_diff = ys_max - ys_min\n        val xs_diff_abs = xs_diff.abs\n        val ys_diff_abs = ys_diff.abs\n        val xs_diff_abs_div_ys_diff_abs = xs_diff_abs / ys_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_floor = xs_diff_abs_div_ys_diff_abs.floor\n        val ys_diff_abs_div_xs_diff_abs = ys_diff_abs / xs_diff_abs\n        val ys_diff_abs_div_xs_diff_abs_floor = ys_diff_abs_div_xs_diff_abs.floor\n        val xs_diff_abs_div_ys_diff_abs_floor_div_ys_diff_abs = xs_diff_abs_div_ys_diff_abs_floor / ys_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_floor_div_ys_diff_abs_floor = xs_diff_abs_div_ys_diff_abs_floor_div_ys_diff_abs.floor\n        val xs_diff_abs_div_ys_diff_abs_floor_div_ys_diff_abs_floor_div_ys_diff_abs = xs_diff_abs_div_ys_diff_abs_floor_div_ys_diff_abs_floor / ys_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_floor_div_ys_diff_abs_floor_div_ys",
    "        if (x > y) {\n            return -1l\n        } else {\n            var i = x\n            var j = y\n            while (i <= j) {\n                if (i % 2 == 0 && j % 2 == 0) {\n                    return i\n                }\n                i = i + 1\n                j = j - 1\n            }\n            return -1l\n        }",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_plus_ys = xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs = xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus",
    "        val xs = range(x, y)\n        val xs2 = xs.filter(x => x % 2 == 0)\n        val ys = xs.filter(x => x % 2 != 0)\n        val ys2 = ys.filter(y => y < x)\n        val xs3 = xs2.filter(x => x <= ys2.head)\n        val ys3 = ys2.filter(y => y <= xs2.head)\n        val xs4 = xs3.filter(x => x <= ys3.head)\n        val ys4 = ys3.filter(y => y <= xs3.head)\n        val xs5 = xs4.filter(x => x <= ys4.head)\n        val ys5 = ys4.filter(y => y <= xs4.head)\n        val xs6 = xs5.filter(x => x <= ys5.head)\n        val ys6 = ys5.filter(y => y <= xs5.head)\n        val xs7 = xs6.filter(x => x <= ys6.head)\n        val ys7 = ys6.filter(y => y <= xs6.head)\n        val xs8 = xs7.filter(x => x <= ys7.head)\n        val ys8 = ys7.filter(y => y <= xs7.head)\n        val xs9 = xs8.filter(x => x <= ys8.head)\n        val ys9 = ys8.filter(y => y <= xs8.head)\n        val xs10 = xs9.filter(x => x <= ys9.head)\n        val ys10 = ys9.filter(y => y <= xs9.head)\n        val xs11 = xs10.filter(x => x <= ys10.head)\n        val ys11 = ys10.filter(y => y <= xs10.head)\n        val xs12 = xs11.filter(x => x <= ys11.head)\n        val ys12 =",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_plus_ys = xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs = xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_min = ys.min\n        val xs_min = xs.min\n        val ys_max = ys.max\n        val xs_max_inclusive = xs_max.isInclusive\n        val ys_min_inclusive = ys_min.isInclusive\n        val xs_min_inclusive = xs_min.isInclusive\n        val ys_max_inclusive = ys_max.isInclusive\n        val xs_max_inclusive_and_ys_min_inclusive = xs_max_inclusive && ys_min_inclusive\n        val xs_min_inclusive_and_ys_max_inclusive = xs_min_inclusive && ys_max_inclusive\n        val xs_max_inclusive_and_ys_min_inclusive_and_xs_min_inclusive = xs_max_inclusive && ys_min_inclusive && xs_min_inclusive\n        val xs_min_inclusive_and_ys_max_inclusive_and_xs_max_inclusive = xs_min_inclusive && ys_max_inclusive && xs_max_inclusive\n        val xs_max_inclusive_and_ys_min_inclusive_and_xs_max_inclusive_and_ys_min_inclusive = xs_max_inclusive && ys_min_inclusive && xs_max_inclusive && ys_min_inclusive\n        val xs_min_inclusive_and_ys_max_inclusive_and_xs_max_inclusive_and_ys_max_inclusive = xs_min_inclusive && ys_max_inclusive && xs_max_inclusive && ys_max_inclusive\n        val xs_max_inclusive_and_ys_min_inclusive_and_xs_max_inclusive_and_ys_max_inclusive_and_xs_min_inclusive = xs_max_inclusive &&",
    "        if (x > y) {\n            throw new IllegalArgumentException(\"x must be <= y\")\n        }\n        if (x == y) {\n            return x\n        }\n        if (x == 0) {\n            return -1\n        }\n        if (y == 0) {\n            return -1\n        }\n        if (x == 1) {\n            return 2\n        }\n        if (y == 1) {\n            return 2\n        }\n        if (x == 2) {\n            return 4\n        }\n        if (y == 2) {\n            return 4\n        }\n        if (x == 3) {\n            return 6\n        }\n        if (y == 3) {\n            return 6\n        }\n        if (x == 4) {\n            return 8\n        }\n        if (y == 4) {\n            return 8\n        }\n        if (x == 5) {\n            return 10\n        }\n        if (y == 5) {\n            return 10\n        }\n        if (x == 6) {\n            return 12\n        }\n        if (y == 6) {\n            return 12\n        }\n        if (x == 7) {\n            return 14\n        }\n        if (y == 7) {\n            return 14\n        }\n        if (x == 8) {\n            return 16\n        }\n        if (y == 8) {\n            return 16\n        }\n        if (x == 9) {\n            return 18\n        }\n        if (y == 9) {\n            return 18\n        }\n        if (x == 10) {\n            return 20\n        }\n        if (y == 10) {\n            return 20\n        }\n        if (x == 11) {\n            return 22\n        }\n        if (y == 11) {\n            return 22\n        }\n        if (x == 12) {\n            return 24\n        }\n        if (y == 12) {\n            return 24\n        }\n        if (x == 13) {\n            return 26\n        }\n        if (y == 13) {\n            return 26\n        }\n        if (x == 14) {\n            return 28\n        }\n        if (",
    "        val xs = range(x, y)\n        val xs$ = xs.toList\n        val ys = range(y, x)\n        val ys$ = ys.toList\n        val xs$_ = xs$.toList\n        val ys$_ = ys$.toList\n        val xs$__ = xs$_.toList\n        val ys$__ = ys$_.toList\n        val xs$__$ = xs$__.toList\n        val ys$__$ = ys$__.toList\n        val xs$__$_ = xs$__$.toList\n        val ys$__$_ = ys$__$.toList\n        val xs$__$__ = xs$__$_.toList\n        val ys$__$__ = ys$__$_.toList\n        val xs$__$__$ = xs$__$__.toList\n        val ys$__$__$ = ys$__$__.toList\n        val xs$__$__$_ = xs$__$__$.toList\n        val ys$__$__$_ = ys$__$__$.toList\n        val xs$__$__$__ = xs$__$__$_.toList\n        val ys$__$__$__ = ys$__$__$_.toList\n        val xs$__$__$__$ = xs$__$__$__.toList\n        val ys$__$__$__$ = ys$__$__$__.toList\n        val xs$__$__$__$_ = xs$__$__$__$.toList\n        val ys$__$__$__$_ = ys$__$__$__$.toList\n        val xs$__$__$__$__ = xs$__$__$__$_.toList\n        val ys$__$__$__$__$ = ys$__$__$__$_.toList\n        val xs$__$__$__$__$_ = xs$__$__$__$__$.toList\n        val",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_min = ys.min\n        val xs_min = xs.min\n        val ys_max = ys.max\n        val xs_max_inclusive = xs_max.isInclusive\n        val ys_min_inclusive = ys_min.isInclusive\n        val xs_min_inclusive = xs_min.isInclusive\n        val ys_max_inclusive = ys_max.isInclusive\n        val xs_max_lt_ys_min = xs_max < ys_min\n        val ys_min_lt_xs_max = ys_min < xs_max\n        val xs_min_lt_ys_max = xs_min < ys_max\n        val xs_max_lt_ys_min_inclusive = xs_max_lt_ys_min && xs_max_inclusive\n        val ys_min_lt_xs_max_inclusive = ys_min_lt_xs_max && ys_min_inclusive\n        val xs_min_lt_ys_max_inclusive = xs_min_lt_ys_max && xs_min_inclusive\n        val xs_max_lt_ys_min_inclusive = xs_max_lt_ys_min && xs_max_inclusive\n        val ys_min_lt_xs_max_inclusive = ys_min_lt_xs_max && ys_min_inclusive\n        val ys_max_lt_xs_min_inclusive = ys_max_lt_xs_min && ys_max_inclusive\n        val xs_min_lt_ys_max_inclusive = xs_min_lt_ys_max && xs_min_inclusive\n        val ys_max_lt_xs_min_inclusive = ys_max_lt_xs_min && ys_max_inclusive\n        val xs_max_lt_ys_min_inclusive = x",
    "        val xs = range(x, y)\n        val xs$ = xs.toList\n        val ys = range(y, x)\n        val ys$ = ys.toList\n        val xs$_ = xs$.map(x$ -> x$ + 1)\n        val ys$_ = ys$.map(y$ -> y$ + 1)\n        val xs$__ = xs$_.zip(ys$_).map(tuple -> tuple._1 + tuple._2)\n        val xs$__$ = xs$__.map(x$ -> x$ + 1)\n        val xs$__$_ = xs$__$.zip(ys$_).map(tuple -> tuple._1 + tuple._2)\n        val xs$__$__ = xs$__$_.map(x$ -> x$ + 1)\n        val xs$__$__$ = xs$__$__.zip(ys$_).map(tuple -> tuple._1 + tuple._2)\n        val xs$__$__$_ = xs$__$__$_.map(x$ -> x$ + 1)\n        val xs$__$__$__ = xs$__$__$_.zip(ys$_).map(tuple -> tuple._1 + tuple._2)\n        val xs$__$__$__$ = xs$__$__$__$.map(x$ -> x$ + 1)\n        val xs$__$__$__$_ = xs$__$__$__$_.zip(ys$_).map(tuple -> tuple._1 + tuple._2)\n        val xs$__$__$__$__ = xs$__$__$__$__$.map(x$ -> x$ + 1)\n        val xs$__$__$__$__$ = xs$__$__$__$__$_.zip(ys$_).map(tuple -> tuple._1 + tuple._2)\n        val xs$__$__$__$__$_ = xs$__$__$__$__$__$.map(x$ -> x$ + 1)\n        val xs$__",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val xs_max = xs_len.max\n        val ys_max = ys_len.max\n        val xs_min = xs_len.min\n        val ys_min = ys_len.min\n        val xs_diff = xs_max - xs_min\n        val ys_diff = ys_max - ys_min\n        val xs_diff_abs = xs_diff.abs\n        val ys_diff_abs = ys_diff.abs\n        val xs_diff_abs_div_2 = xs_diff_abs.div(2)\n        val ys_diff_abs_div_2 = ys_diff_abs.div(2)\n        val xs_diff_abs_div_2_minus_1 = xs_diff_abs_div_2.minus(1)\n        val ys_diff_abs_div_2_minus_1 = ys_diff_abs_div_2.minus(1)\n        val xs_diff_abs_div_2_minus_1_lt_ys_diff_abs_div_2 = xs_diff_abs_div_2_minus_1.lt(ys_diff_abs_div_2)\n        val ys_diff_abs_div_2_minus_1_lt_ys_diff_abs_div_2 = ys_diff_abs_div_2_minus_1.lt(ys_diff_abs_div_2)\n        val xs_diff_abs_div_2_minus_1_lt_ys_diff_abs_div_2_or_eq_ys_diff_abs_div_2 = xs_diff_abs_div_2_minus_1.lt(ys_diff_abs_div_2) || xs_diff_abs_div_2_minus_1.eq(ys_diff_abs_div_2)\n        val ys_diff_abs_div_2_minus_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_plus_ys = xs + ys\n        val xs_plus_ys_plus_1 = xs_plus_ys + 1l\n        val xs_plus_ys_plus_1_minus_xs = xs_plus_ys_plus_1 - xs\n        val xs_plus_ys_plus_1_minus_ys = xs_plus_ys_plus_1 - ys\n        val xs_plus_ys_plus_1_minus_xs_plus_ys = xs_plus_ys_plus_1 - xs_plus_ys\n        val xs_plus_ys_plus_1_minus_ys_plus_xs = xs_plus_ys_plus_1 - ys_plus_xs\n        val xs_plus_ys_plus_1_minus_xs_plus_ys_plus_1 = xs_plus_ys_plus_1 - xs_plus_ys_plus_1\n        val xs_plus_ys_plus_1_minus_ys_plus_xs_plus_1 = xs_plus_ys_plus_1 - ys_plus_xs_plus_1\n        val xs_plus_ys_plus_1_minus_xs_plus_ys_plus_1_minus_ys = xs_plus_ys_plus_1 - xs_plus_ys_plus_1_minus_ys\n        val xs_plus_ys_plus_1_minus_ys_plus_xs_plus_1_minus_xs = xs_plus_ys_plus_1 - ys_plus_xs_plus_1_minus_xs\n        val xs_plus_ys_plus_1_minus_xs_plus_ys_plus_1_minus_ys_plus_1 = xs_plus_ys_plus_1 - xs_plus_ys_plus_1_minus_ys_plus_1\n        val xs_plus_ys_plus_1_minus_ys_plus_xs_plus_1_minus_xs_plus_ys_plus_1 = xs_plus_ys_plus",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs$ = xs.toIterator\n        val ys$ = ys.toIterator\n        var x$ = xs$\n        var y$ = ys$\n        var x$1 = x$\n        var y$1 = y$\n        var x$2 = x$1\n        var y$2 = y$1\n        var x$3 = x$2\n        var y$3 = y$2\n        var x$4 = x$3\n        var y$4 = y$3\n        var x$5 = x$4\n        var y$5 = y$4\n        var x$6 = x$5\n        var y$6 = y$5\n        var x$7 = x$6\n        var y$7 = y$6\n        var x$8 = x$7\n        var y$8 = y$7\n        var x$9 = x$8\n        var y$9 = y$8\n        var x$10 = x$9\n        var y$10 = y$9\n        var x$11 = x$10\n        var y$11 = y$10\n        var x$12 = x$11\n        var y$12 = y$11\n        var x$13 = x$12\n        var y$13 = y$12\n        var x$14 = x$13\n        var y$14 = y$13\n        var x$15 = x$14\n        var y$15 = y$14\n        var x$16 = x$15\n        var y$16 = y$15\n        var x$17 = x$16\n        var y$17 = y$16\n        var x$18 = x$17\n        var y$18 = y$17\n        var x$19 = x$18\n        var y$19 = y$18\n        var x$20 = x$19\n        var y$20 = y$19\n        var x$21 = x$20\n        var y$21 = y$20\n        var x$22 = x$21\n        var y$22 = y$21\n        var x$23 = x$22\n",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_min = ys.min\n        val xs_max_inclusive = xs_max.toSeq\n        val ys_min_inclusive = ys_min.toSeq\n        val xs_max_inclusive_max = xs_max_inclusive.max\n        val ys_min_inclusive_min = ys_min_inclusive.min\n        val xs_max_inclusive_max_inclusive = xs_max_inclusive_max.toSeq\n        val ys_min_inclusive_min_inclusive = ys_min_inclusive_min.toSeq\n        val xs_max_inclusive_max_inclusive_max = xs_max_inclusive_max_inclusive.max\n        val ys_min_inclusive_min_inclusive_min = ys_min_inclusive_min_inclusive.min\n        val xs_max_inclusive_max_inclusive_max_inclusive = xs_max_inclusive_max_inclusive_max.toSeq\n        val ys_min_inclusive_min_inclusive_min_inclusive = ys_min_inclusive_min_inclusive_min.toSeq\n        val xs_max_inclusive_max_inclusive_max_inclusive_max = xs_max_inclusive_max_inclusive_max_inclusive.max\n        val ys_min_inclusive_min_inclusive_min_inclusive_min = ys_min_inclusive_min_inclusive_min_inclusive.min\n        val xs_max_inclusive_max_inclusive_max_inclusive_max_inclusive = xs_max_inclusive_max_inclusive_max_inclusive_max.toSeq\n        val ys_min_inclusive_min_inclusive_min_inclusive_min_inclusive = ys_min_inclusive_min_inclusive_min_inclusive_min.toSeq\n        val",
    "        val xs = x.toInt\n        val ys = y.toInt\n        val xs_plus_1 = xs + 1\n        val ys_plus_1 = ys + 1\n        val xs_minus_1 = xs - 1\n        val ys_minus_1 = ys - 1\n        val xs_minus_ys_plus_1 = xs_minus_1 - ys_plus_1\n        val xs_minus_ys_minus_1 = xs_minus_1 - ys_minus_1\n        val xs_minus_ys_plus_2 = xs_minus_ys_plus_1 - 2\n        val xs_minus_ys_minus_2 = xs_minus_ys_minus_1 - 2\n        val xs_minus_ys_plus_3 = xs_minus_ys_plus_2 - 3\n        val xs_minus_ys_minus_3 = xs_minus_ys_minus_2 - 3\n        val xs_minus_ys_plus_4 = xs_minus_ys_plus_3 - 4\n        val xs_minus_ys_minus_4 = xs_minus_ys_minus_3 - 4\n        val xs_minus_ys_plus_5 = xs_minus_ys_plus_4 - 5\n        val xs_minus_ys_minus_5 = xs_minus_ys_minus_4 - 5\n        val xs_minus_ys_plus_6 = xs_minus_ys_plus_5 - 6\n        val xs_minus_ys_minus_6 = xs_minus_ys_minus_5 - 6\n        val xs_minus_ys_plus_7 = xs_minus_ys_plus_6 - 7\n        val xs_minus_ys_minus_7 = xs_minus_ys_minus_6 - 7\n        val xs_minus_ys_plus_8 = xs_minus_ys_plus_7 - 8\n        val xs_minus_ys_minus_8 = xs_minus_ys_minus_7 - 8\n        val xs_minus_ys_plus_9 = xs_minus_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val xs_len_minus_1 = xs_len - 1\n        val ys_len_minus_1 = ys_len - 1\n        val xs_plus_1 = xs_len_minus_1 + 1\n        val ys_plus_1 = ys_len_minus_1 + 1\n        val xs_plus_ys_len = xs_plus_1 + ys_plus_1\n        val xs_plus_ys_len_minus_1 = xs_plus_ys_len - 1\n        val xs_plus_ys_len_minus_2 = xs_plus_ys_len - 2\n        val xs_plus_ys_len_minus_3 = xs_plus_ys_len - 3\n        val xs_plus_ys_len_minus_4 = xs_plus_ys_len - 4\n        val xs_plus_ys_len_minus_5 = xs_plus_ys_len - 5\n        val xs_plus_ys_len_minus_6 = xs_plus_ys_len - 6\n        val xs_plus_ys_len_minus_7 = xs_plus_ys_len - 7\n        val xs_plus_ys_len_minus_8 = xs_plus_ys_len - 8\n        val xs_plus_ys_len_minus_9 = xs_plus_ys_len - 9\n        val xs_plus_ys_len_minus_10 = xs_plus_ys_len - 10\n        val xs_plus_ys_len_minus_11 = xs_plus_ys_len - 11\n        val xs_plus_ys_len_minus_12 = xs_plus_ys_len - 12\n        val xs_plus_ys_len_minus_13 = xs_plus_ys_len - 13\n        val xs_plus_ys_len_minus_14 = xs_plus_ys_len - 14\n        ",
    "        val xs = range(x, y)\n        val ys = xs.map(x => x + 1)\n        val ys2 = ys.map(x => x + 1)\n        val ys3 = ys2.map(x => x + 1)\n        val ys4 = ys3.map(x => x + 1)\n        val ys5 = ys4.map(x => x + 1)\n        val ys6 = ys5.map(x => x + 1)\n        val ys7 = ys6.map(x => x + 1)\n        val ys8 = ys7.map(x => x + 1)\n        val ys9 = ys8.map(x => x + 1)\n        val ys10 = ys9.map(x => x + 1)\n        val ys11 = ys10.map(x => x + 1)\n        val ys12 = ys11.map(x => x + 1)\n        val ys13 = ys12.map(x => x + 1)\n        val ys14 = ys13.map(x => x + 1)\n        val ys15 = ys14.map(x => x + 1)\n        val ys16 = ys15.map(x => x + 1)\n        val ys17 = ys16.map(x => x + 1)\n        val ys18 = ys17.map(x => x + 1)\n        val ys19 = ys18.map(x => x + 1)\n        val ys20 = ys19.map(x => x + 1)\n        val ys21 = ys20.map(x => x + 1)\n        val ys22 = ys21.map(x => x + 1)\n        val ys23 = ys22.map(x => x + 1)\n        val ys24 = ys23.map(x => x + 1)\n        val ys25 = ys24.map(x => x + 1)\n        val ys26 = ys25.map(x => x + 1)\n        val ys27 = ys26",
    "        if (x > y) {\n            throw new IllegalArgumentException(\"x must be <= y\")\n        }\n        if (x == y) {\n            return x\n        }\n        if (x == 0) {\n            return -1\n        }\n        if (y == 0) {\n            return -1\n        }\n        if (x == 1) {\n            return 2\n        }\n        if (y == 1) {\n            return 2\n        }\n        if (x == 2) {\n            return 4\n        }\n        if (y == 2) {\n            return 4\n        }\n        if (x == 3) {\n            return 6\n        }\n        if (y == 3) {\n            return 6\n        }\n        if (x == 4) {\n            return 8\n        }\n        if (y == 4) {\n            return 8\n        }\n        if (x == 5) {\n            return 10\n        }\n        if (y == 5) {\n            return 10\n        }\n        if (x == 6) {\n            return 12\n        }\n        if (y == 6) {\n            return 12\n        }\n        if (x == 7) {\n            return 14\n        }\n        if (y == 7) {\n            return 14\n        }\n        if (x == 8) {\n            return 16\n        }\n        if (y == 8) {\n            return 16\n        }\n        if (x == 9) {\n            return 18\n        }\n        if (y == 9) {\n            return 18\n        }\n        if (x == 10) {\n            return 20\n        }\n        if (y == 10) {\n            return 20\n        }\n        if (x == 11) {\n            return 22\n        }\n        if (y == 11) {\n            return 22\n        }\n        if (x == 12) {\n            return 24\n        }\n        if (y == 12) {\n            return 24\n        }\n        if (x == 13) {\n            return 26\n        }\n        if (y == 13) {\n            return 26\n        }\n        if (x == 14) {\n            return 28\n        }\n        if (",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_max = ys.max\n        val xs_min = xs.min\n        val ys_min = ys.min\n        val xs_diff = xs_max - xs_min\n        val ys_diff = ys_max - ys_min\n        val xs_diff_abs = xs_diff.abs\n        val ys_diff_abs = ys_diff.abs\n        val xs_diff_abs_div_ys_diff_abs = xs_diff_abs / ys_diff_abs\n        val ys_diff_abs_div_xs_diff_abs = ys_diff_abs / xs_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs = xs_diff_abs_div_ys_diff_abs / ys_diff_abs_div_ys_diff_abs\n        val ys_diff_abs_div_xs_diff_abs_div_xs_diff_abs = ys_diff_abs_div_xs_diff_abs / xs_diff_abs_div_xs_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs_div_ys_diff_abs = xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs / ys_diff_abs_div_ys_diff_abs_div_ys_diff_abs\n        val ys_diff_abs_div_xs_diff_abs_div_xs_diff_abs_div_xs_diff_abs = ys_diff_abs_div_xs_diff_abs_div_xs_diff_abs / xs_diff_abs_div_xs_diff_abs_div_xs_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs_div_ys_diff_abs_div_ys_diff_abs = xs_diff_",
    "        if (x > y) {\n            throw new IllegalArgumentException(\"x must be <= y\")\n        }\n        if (x == y) {\n            return x\n        }\n        if (x == 0) {\n            return -1\n        }\n        if (x == 1) {\n            return 2\n        }\n        if (x % 2 == 0) {\n            return x\n        }\n        if (y % 2 == 0) {\n            return -1\n        }\n        return x + y - 1",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_max = ys.max\n        val xs_min = xs.min\n        val ys_min = ys.min\n        val xs_diff = xs_max - xs_min\n        val ys_diff = ys_max - ys_min\n        val xs_diff_abs = xs_diff.abs\n        val ys_diff_abs = ys_diff.abs\n        val xs_diff_abs_div_ys_diff_abs = xs_diff_abs / ys_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_floor = xs_diff_abs_div_ys_diff_abs.floor\n        val xs_diff_abs_div_ys_diff_abs_ceil = xs_diff_abs_div_ys_diff_abs.ceil\n        val xs_diff_abs_div_ys_diff_abs_round = xs_diff_abs_div_ys_diff_abs.round\n        val xs_diff_abs_div_ys_diff_abs_to_i = xs_diff_abs_div_ys_diff_abs.to_i\n        val xs_diff_abs_div_ys_diff_abs_to_l = xs_diff_abs_div_ys_diff_abs.to_l\n        val xs_diff_abs_div_ys_diff_abs_to_f = xs_diff_abs_div_ys_diff_abs.to_f\n        val xs_diff_abs_div_ys_diff_abs_to_d = xs_diff_abs_div_ys_diff_abs.to_d\n        val xs_diff_abs_div_ys_diff_abs_to_b = xs_diff_abs_div_ys_diff_abs.to_b\n        val xs_diff_abs_div_ys_diff_abs_to_byte = xs_diff_abs_div_ys_diff_abs",
    "        val xs = x.toInt\n        val ys = y.toInt\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val xs_len_minus_1 = xs_len - 1\n        val ys_len_minus_1 = ys_len - 1\n        val x_minus_y = x - y\n        val x_minus_y_plus_1 = x_minus_y + 1\n        val x_minus_y_plus_2 = x_minus_y + 2\n        val x_minus_y_plus_3 = x_minus_y + 3\n        val x_minus_y_plus_4 = x_minus_y + 4\n        val x_minus_y_plus_5 = x_minus_y + 5\n        val x_minus_y_plus_6 = x_minus_y + 6\n        val x_minus_y_plus_7 = x_minus_y + 7\n        val x_minus_y_plus_8 = x_minus_y + 8\n        val x_minus_y_plus_9 = x_minus_y + 9\n        val x_minus_y_plus_10 = x_minus_y + 10\n        val x_minus_y_plus_11 = x_minus_y + 11\n        val x_minus_y_plus_12 = x_minus_y + 12\n        val x_minus_y_plus_13 = x_minus_y + 13\n        val x_minus_y_plus_14 = x_minus_y + 14\n        val x_minus_y_plus_15 = x_minus_y + 15\n        val x_minus_y_plus_16 = x_minus_y + 16\n        val x_minus_y_plus_17 = x_minus_y + 17\n        val x_minus_y_plus_18 = x_minus_y + 18\n        val x_minus_y_plus_19 = x_minus_y + 19\n        val x_minus_y_plus_20 = x_minus_y + 20\n        val x_minus_y_plus_21 = x_minus_y + 21\n",
    "        val xs = x.toInt\n        val ys = y.toInt\n        val xs_max = xs.max\n        val ys_min = ys.min\n        val xs_min = xs.min\n        val ys_max = ys.max\n        val xs_diff = xs_max - xs_min\n        val ys_diff = ys_max - ys_min\n        val xs_diff_abs = xs_diff.abs\n        val ys_diff_abs = ys_diff.abs\n        val xs_diff_abs_div_ys_diff_abs = xs_diff_abs / ys_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_floor = xs_diff_abs_div_ys_diff_abs.floor\n        val xs_diff_abs_div_ys_diff_abs_ceil = xs_diff_abs_div_ys_diff_abs.ceil\n        val xs_diff_abs_div_ys_diff_abs_max = xs_diff_abs_div_ys_diff_abs.max\n        val xs_diff_abs_div_ys_diff_abs_min = xs_diff_abs_div_ys_diff_abs.min\n        val xs_diff_abs_div_ys_diff_abs_abs = xs_diff_abs_div_ys_diff_abs.abs\n        val xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs = xs_diff_abs_div_ys_diff_abs / ys_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs_floor = xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs.floor\n        val xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs_ceil = xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs.ceil\n        val xs_diff_abs_div_ys",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_min = ys.min\n        val xs_min = xs.min\n        val ys_max = ys.max\n        val xs_max_inclusive = xs_max.toSeq.toOption\n        val ys_min_inclusive = ys_min.toSeq.toOption\n        val xs_min_inclusive = xs_min.toSeq.toOption\n        val ys_max_inclusive = ys_max.toSeq.toOption\n        val xs_max_inclusive_exists = xs_max_inclusive.isDefined\n        val ys_min_inclusive_exists = ys_min_inclusive.isDefined\n        val xs_min_inclusive_exists = xs_min_inclusive.isDefined\n        val ys_max_inclusive_exists = ys_max_inclusive.isDefined\n        val xs_max_inclusive_value = xs_max_inclusive.get\n        val ys_min_inclusive_value = ys_min_inclusive.get\n        val xs_min_inclusive_value = xs_min_inclusive.get\n        val ys_max_inclusive_value = ys_max_inclusive.get\n        val xs_max_inclusive_value_exists = xs_max_inclusive_value.isDefined\n        val ys_min_inclusive_value_exists = ys_min_inclusive_value.isDefined\n        val xs_min_inclusive_value_exists = xs_min_inclusive_value.isDefined\n        val ys_max_inclusive_value_exists = ys_max_inclusive_value.isDefined\n        val xs_max_inclusive_value_value = xs_max_inclusive_value.get\n        val ys_min_inclusive_value_value = ys_min_inclusive_value.",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val xs_max = xs_len.max\n        val ys_max = ys_len.max\n        val xs_min = xs_len.min\n        val ys_min = ys_len.min\n        val xs_max_minus_xs_min = xs_max - xs_min\n        val ys_max_minus_ys_min = ys_max - ys_min\n        val xs_max_minus_ys_min_div_2 = xs_max_minus_ys_min / 2l\n        val ys_max_minus_xs_min_div_2 = ys_max_minus_xs_min / 2l\n        val xs_max_minus_ys_min_div_2_plus_ys_max_minus_xs_min_div_2 = xs_max_minus_ys_min_div_2 + ys_max_minus_xs_min_div_2\n        val xs_max_minus_ys_min_div_2_plus_ys_max_minus_xs_min_div_2_plus_ys_max_minus_xs_min_div_2 = xs_max_minus_ys_min_div_2_plus_ys_max_minus_xs_min_div_2 + xs_max_minus_ys_min_div_2_plus_ys_max_minus_xs_min_div_2\n        val xs_max_minus_ys_min_div_2_plus_ys_max_minus_xs_min_div_2_plus_ys_max_minus_xs_min_div_2_plus_ys_max_minus_xs_min_div_2 = xs_max_minus_ys_min_div_2_plus_ys_max_minus_xs_min_div_2_plus_ys_max_minus_xs_min_div_2 + xs_max_minus_ys_min_div_2_plus",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        if (xs_len < ys_len) {\n            return -1l\n        } else if (xs_len > ys_len) {\n            return -1l\n        } else {\n            val xs_head = xs.head\n            val ys_head = ys.head\n            val xs_tail = xs.tail\n            val ys_tail = ys.tail\n            val xs_head_len = xs_head.length\n            val ys_head_len = ys_head.length\n            val xs_tail_len = xs_tail.length\n            val ys_tail_len = ys_tail.length\n            val xs_head_head = xs_head.head\n            val ys_head_head = ys_head.head\n            val xs_head_tail = xs_head.tail\n            val ys_head_tail = ys_head.tail\n            val xs_tail_head = xs_tail.head\n            val ys_tail_head = ys_tail.head\n            val xs_tail_tail = xs_tail.tail\n            val ys_tail_tail = ys_tail.tail\n            val xs_head_head_len = xs_head_head.length\n            val ys_head_head_len = ys_head_head.length\n            val xs_head_tail_len = xs_head_tail.length\n            val ys_head_tail_len = ys_head_tail.length\n            val xs_tail_head_len = xs_tail_head.length\n            val ys_tail_head_len = ys_tail_head.length\n            val xs_tail_tail_len = xs_tail_tail.length\n            val ys_tail_tail_len = ys_tail_tail.length\n            val xs_head_head_head = xs_head_head.head",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_plus_ys = xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs = xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_y = xs.zip(ys)\n        val xs_y_to_int = xs_y.map(x_y -> x_y._1.toInt + x_y._2.toInt)\n        val xs_y_to_int_filter = xs_y_to_int.filter(x_y -> x_y >= x && x_y <= y)\n        val xs_y_to_int_filter_to_max = xs_y_to_int_filter.map(x_y -> x_y.max)\n        val xs_y_to_int_filter_to_max_to_int = xs_y_to_int_filter_to_max.map(x_y -> x_y.toInt)\n        val xs_y_to_int_filter_to_max_to_int_to_max = xs_y_to_int_filter_to_max_to_int.map(x_y -> x_y.max)\n        val xs_y_to_int_filter_to_max_to_int_to_max_to_int = xs_y_to_int_filter_to_max_to_int_to_max.map(x_y -> x_y.toInt)\n        val xs_y_to_int_filter_to_max_to_int_to_max_to_int_to_max = xs_y_to_int_filter_to_max_to_int_to_max_to_int.map(x_y -> x_y.max)\n        val xs_y_to_int_filter_to_max_to_int_to_max_to_int_to_max_to_int = xs_y_to_int_filter_to_max_to_int_to_max_to_int_to_max.map(x_y -> x_y.toInt)\n        val xs_y_to_int_filter_to_max_to_int_to_max",
    "        if (x > y) {\n            return -1l\n        }\n        if (x == y) {\n            return x\n        }\n        if (x == 0) {\n            return 0l\n        }\n        if (x == 1) {\n            return 2l\n        }\n        if (x == 2) {\n            return 4l\n        }\n        if (x == 3) {\n            return 6l\n        }\n        if (x == 4) {\n            return 8l\n        }\n        if (x == 5) {\n            return 10l\n        }\n        if (x == 6) {\n            return 12l\n        }\n        if (x == 7) {\n            return 14l\n        }\n        if (x == 8) {\n            return 16l\n        }\n        if (x == 9) {\n            return 18l\n        }\n        if (x == 10) {\n            return 20l\n        }\n        if (x == 11) {\n            return 22l\n        }\n        if (x == 12) {\n            return 24l\n        }\n        if (x == 13) {\n            return 26l\n        }\n        if (x == 14) {\n            return 28l\n        }\n        if (x == 15) {\n            return 30l\n        }\n        if (x == 16) {\n            return 32l\n        }\n        if (x == 17) {\n            return 34l\n        }\n        if (x == 18) {\n            return 36l\n        }\n        if (x == 19) {\n            return 38l\n        }\n        if (x == 20) {\n            return 40l\n        }\n        if (x == 21) {\n            return 42l\n        }\n        if (x == 22) {\n            return 44l\n        }\n        if (x == 23) {\n            return 46l\n        }\n        if (x == 24) {\n            return 48l\n        }\n        if (x == 25) {\n            return 50l\n        }\n        if (x == 26) {\n            return 52l\n        }\n        if (x == 27) {\n            return 54l\n        }\n        if",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_ = xs.toSeq\n        val ys_ = ys.toSeq\n        val xs__ = xs_.toSeq\n        val ys__ = ys_.toSeq\n        val xs___ = xs__.toSeq\n        val ys___ = ys__.toSeq\n        val xs____ = xs___.toSeq\n        val ys____ = ys___.toSeq\n        val xs___0 = xs____.toSeq\n        val ys___0 = ys____.toSeq\n        val xs__0 = xs___0.toSeq\n        val ys__0 = ys___0.toSeq\n        val xs_0 = xs__0.toSeq\n        val ys_0 = ys__0.toSeq\n        val xs_00 = xs_0.toSeq\n        val ys_00 = ys_0.toSeq\n        val xs_000 = xs_00.toSeq\n        val ys_000 = ys_00.toSeq\n        val xs_0000 = xs_000.toSeq\n        val ys_0000 = ys_000.toSeq\n        val xs_00000 = xs_0000.toSeq\n        val ys_00000 = ys_0000.toSeq\n        val xs_000000 = xs_00000.toSeq\n        val ys_000000 = ys_00000.toSeq\n        val xs_0000000 = xs_000000.toSeq\n        val ys_0000000 = ys_000000.toSeq\n        val xs_00000000 = xs_0000000.toSeq\n        val ys_00000000 = ys_0000000.toSeq\n        val xs_000000000 = xs_00000000.toSeq\n        val ys_000000000 = ys_00000000.toSeq\n        val xs_0000000000 = xs_000000000.toSeq\n        val ys_0000000000 = ys_000000",
    "        if (x > y) {\n            throw new IllegalArgumentException(\"x must be <= y\")\n        }\n        if (x == y) {\n            return x\n        }\n        if (x == 0) {\n            return -1\n        }\n        if (x == 1) {\n            return 2\n        }\n        if (x == 2) {\n            return 4\n        }\n        if (x % 2 == 0) {\n            return x\n        }\n        if (y == 0) {\n            return -1\n        }\n        if (y == 1) {\n            return 2\n        }\n        if (y == 2) {\n            return 4\n        }\n        if (y % 2 == 0) {\n            return x\n        }\n        if (x == y) {\n            return x\n        }\n        if (x == y - 1) {\n            return x + 2\n        }\n        if (x == y - 2) {\n            return x + 4\n        }\n        if (x == y - 3) {\n            return x + 6\n        }\n        if (x == y - 4) {\n            return x + 8\n        }\n        if (x == y - 5) {\n            return x + 10\n        }\n        if (x == y - 6) {\n            return x + 12\n        }\n        if (x == y - 7) {\n            return x + 14\n        }\n        if (x == y - 8) {\n            return x + 16\n        }\n        if (x == y - 9) {\n            return x + 18\n        }\n        if (x == y - 10) {\n            return x + 20\n        }\n        if (x == y - 11) {\n            return x + 22\n        }\n        if (x == y - 12) {\n            return x + 24\n        }\n        if (x == y - 13) {\n            return x + 26\n        }\n        if (x == y - 14) {\n            return x + 28\n        }\n        if (x == y - 15) {\n            return x + 30\n        }\n        if (x == y - 16) {\n            return x + 32\n        }",
    "        if (x > y) {\n            return -1l\n        } else {\n            var result = x\n            var i = x\n            while (i <= y) {\n                i = i + 2\n                if (i > y) {\n                    break\n                }\n                result = i\n            }\n            return result\n        }",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_max = ys.max\n        val xs_min = xs.min\n        val ys_min = ys.min\n        val xs_diff = xs_max - xs_min\n        val ys_diff = ys_max - ys_min\n        val xs_diff_abs = xs_diff.abs\n        val ys_diff_abs = ys_diff.abs\n        val xs_diff_abs_div_ys_diff_abs = xs_diff_abs / ys_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_floor = xs_diff_abs_div_ys_diff_abs.floor\n        val xs_diff_abs_div_ys_diff_abs_ceil = xs_diff_abs_div_ys_diff_abs.ceil\n        val xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs_floor = xs_diff_abs_div_ys_diff_abs_floor.div(ys_diff_abs)\n        val xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs_ceil = xs_diff_abs_div_ys_diff_abs_ceil.div(ys_diff_abs)\n        val xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs_div_ys_diff_abs_floor = xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs_floor.div(ys_diff_abs)\n        val xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs_div_ys_diff_abs_ceil = xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs_ceil.div(ys_diff_abs)\n        val xs_diff_abs_div_ys_diff_abs_div_ys_diff_",
    "        val xs = x.toString\n        val ys = y.toString\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val xs_start = xs.indexOf('l')\n        val ys_start = ys.indexOf('l')\n        val xs_end = xs_start + 1\n        val ys_end = ys_start + 1\n        val xs_str = xs.substring(xs_start, xs_end)\n        val ys_str = ys.substring(ys_start, ys_end)\n        val xs_int = xs_str.toInt\n        val ys_int = ys_str.toInt\n        val xs_int_len = xs_int.length\n        val ys_int_len = ys_int.length\n        val xs_int_start = xs_int.indexOf('l')\n        val ys_int_start = ys_int.indexOf('l')\n        val xs_int_end = xs_int_start + 1\n        val ys_int_end = ys_int_start + 1\n        val xs_int_str = xs_int.substring(xs_int_start, xs_int_end)\n        val ys_int_str = ys_int.substring(ys_int_start, ys_int_end)\n        val xs_int_int = xs_int_str.toInt\n        val ys_int_int = ys_int_str.toInt\n        val xs_int_int_len = xs_int_int.length\n        val ys_int_int_len = ys_int_int.length\n        val xs_int_int_start = xs_int_int.indexOf('l')\n        val ys_int_int_start = ys_int_int.indexOf('l')\n        val xs_int_int_end = xs_int_int_start + 1\n        val ys_int_int_end = ys_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_plus_1 = xs.plus(1)\n        val ys_plus_1 = ys.plus(1)\n        val xs_plus_1_to_ys_plus_1 = xs_plus_1.toSeq\n        val xs_plus_1_to_ys_plus_1_to_ys_plus_1 = xs_plus_1_to_ys_plus_1.toSeq\n        val xs_plus_1_to_ys_plus_1_to_ys_plus_1_to_ys_plus_1 = xs_plus_1_to_ys_plus_1_to_ys_plus_1.toSeq\n        val xs_plus_1_to_ys_plus_1_to_ys_plus_1_to_ys_plus_1_to_ys_plus_1 = xs_plus_1_to_ys_plus_1_to_ys_plus_1_to_ys_plus_1.toSeq\n        val xs_plus_1_to_ys_plus_1_to_ys_plus_1_to_ys_plus_1_to_ys_plus_1_to_ys_plus_1 = xs_plus_1_to_ys_plus_1_to_ys_plus_1_to_ys_plus_1_to_ys_plus_1.toSeq\n        val xs_plus_1_to_ys_plus_1_to_ys_plus_1_to_ys_plus_1_to_ys_plus_1_to_ys_plus_1_to_ys_plus_1 = xs_plus_1_to_ys_plus_1_to_ys_plus_1_to_ys_plus_1_to_ys_plus_1_to_ys_plus_1.toSeq\n        val xs_plus_1_to_ys_plus_1_to_ys_plus_1_to_ys_plus_1_to_ys_plus_1_to_ys_plus_1",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val xs_max = xs_len.max\n        val ys_max = ys_len.max\n        val xs_min = xs_len.min\n        val ys_min = ys_len.min\n        val xs_max_i = xs_max.toInt\n        val ys_max_i = ys_max.toInt\n        val xs_min_i = xs_min.toInt\n        val ys_min_i = ys_min.toInt\n        val xs_max_j = xs_max.toLong\n        val ys_max_j = ys_max.toLong\n        val xs_min_j = xs_min.toLong\n        val ys_min_j = ys_min.toLong\n        val xs_max_k = xs_max.toInt\n        val ys_max_k = ys_max.toInt\n        val xs_min_k = xs_min.toInt\n        val ys_min_k = ys_min.toInt\n        val xs_max_l = xs_max.toLong\n        val ys_max_l = ys_max.toLong\n        val xs_min_l = xs_min.toLong\n        val ys_min_l = ys_min.toLong\n        val xs_max_m = xs_max.toInt\n        val ys_max_m = ys_max.toInt\n        val xs_min_m = xs_min.toInt\n        val ys_min_m = ys_min.toInt\n        val xs_max_n = xs_max.toLong\n        val ys_max_n = ys_max.toLong\n        val xs_min_n = xs_min.toLong\n        val ys_min_n = ys_min.toLong\n        val",
    "        val x_ = x\n        val y_ = y\n        val x_max = x_\n        val y_max = y_\n        val x_min = x_\n        val y_min = y_\n        val x_diff = x_ - y_\n        val y_diff = y_ - x_\n        val x_diff_abs = x_diff\n        val y_diff_abs = y_diff\n        val x_diff_abs_max = x_diff_abs\n        val y_diff_abs_max = y_diff_abs\n        val x_diff_abs_min = x_diff_abs\n        val y_diff_abs_min = y_diff_abs\n        val x_diff_abs_diff = x_diff_abs - y_diff_abs\n        val y_diff_abs_diff = y_diff_abs - x_diff_abs\n        val x_diff_abs_diff_abs = x_diff_abs_diff\n        val y_diff_abs_diff_abs = y_diff_abs_diff\n        val x_diff_abs_diff_abs_max = x_diff_abs_diff_abs\n        val y_diff_abs_diff_abs_max = y_diff_abs_diff_abs\n        val x_diff_abs_diff_abs_min = x_diff_abs_diff_abs\n        val y_diff_abs_diff_abs_min = y_diff_abs_diff_abs\n        val x_diff_abs_diff_abs_diff = x_diff_abs_diff_abs - y_diff_abs_diff_abs\n        val y_diff_abs_diff_abs_diff = y_diff_abs_diff_abs - x_diff_abs_diff_abs\n        val x_diff_abs_diff_abs_diff_abs = x_diff_abs_diff_abs_diff\n        val y_diff_abs_diff_abs_diff_abs = y_diff_abs_diff_abs_diff\n        val x_diff_abs_diff_abs_diff_abs_max = x_diff_abs_diff_abs_diff_abs\n        val y_diff_abs_diff_abs_diff_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_plus_ys = xs.zip(ys).map(x_y -> x_y._1 + x_y._2).toSeq\n        val xs_plus_ys_plus_xs = xs_plus_ys.zip(xs).map(x_y_xs -> x_y_xs._1 + x_y_xs._2).toSeq\n        val xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs.zip(ys).map(x_y_xs_ys -> x_y_xs_ys._1 + x_y_xs_ys._2).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys.zip(xs).map(x_y_xs_ys_xs -> x_y_xs_ys_xs._1 + x_y_xs_ys_xs._2).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(xs).map(x_y_xs_ys_xs_ys -> x_y_xs_ys_xs_ys._1 + x_y_xs_ys_xs_ys._2).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys.zip(xs).map(x_y_xs_ys_xs_ys_xs -> x_y_xs_ys_xs_ys_xs._1 + x_y_xs_ys_xs_ys_xs._2).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs_",
    "        val x_ = x\n        val y_ = y\n        val x_max_y_ = x_ > y_ ? x_ : y_\n        val x_max_y_max_ = x_max_y_ + 1\n        val x_max_y_max_div_2_ = x_max_y_max_ / 2\n        val x_max_y_max_div_2_div_2_ = x_max_y_max_div_2_ / 2\n        val x_max_y_max_div_2_div_2_div_2_ = x_max_y_max_div_2_div_2_ / 2\n        val x_max_y_max_div_2_div_2_div_2_div_2_ = x_max_y_max_div_2_div_2_div_2_ / 2\n        val x_max_y_max_div_2_div_2_div_2_div_2_div_2_ = x_max_y_max_div_2_div_2_div_2_div_2_ / 2\n        val x_max_y_max_div_2_div_2_div_2_div_2_div_2_div_2_ = x_max_y_max_div_2_div_2_div_2_div_2_div_2_ / 2\n        val x_max_y_max_div_2_div_2_div_2_div_2_div_2_div_2_div_2_ = x_max_y_max_div_2_div_2_div_2_div_2_div_2_div_2_ / 2\n        val x_max_y_max_div_2_div_2_div_2_div_2_div_2_div_2_div_2_div_2_ = x_max_y_max_div_2_div_2_div_2_div_2_div_2_div_2_div_2_ / 2\n        val x_max_y_max_div_2_div_2_div_2_div_2",
    "        if (x > y) {\n            throw new IllegalArgumentException(\"x must be <= y\")\n        }\n        if (x == y) {\n            return x\n        }\n        if (x == 0) {\n            return -1\n        }\n        if (x == 1) {\n            return 2\n        }\n        if (x == 2) {\n            return 4\n        }\n        if (x == 3) {\n            return 6\n        }\n        if (x == 4) {\n            return 8\n        }\n        if (x == 5) {\n            return 10\n        }\n        if (x == 6) {\n            return 12\n        }\n        if (x == 7) {\n            return 14\n        }\n        if (x == 8) {\n            return 16\n        }\n        if (x == 9) {\n            return 18\n        }\n        if (x == 10) {\n            return 20\n        }\n        if (x == 11) {\n            return 22\n        }\n        if (x == 12) {\n            return 24\n        }\n        if (x == 13) {\n            return 26\n        }\n        if (x == 14) {\n            return 28\n        }\n        if (x == 15) {\n            return 30\n        }\n        throw new IllegalArgumentException(\"x must be <= 15\")",
    "        val xs = range(x, y)\n        val xs$ = xs.toList\n        val ys = range(y, x)\n        val ys$ = ys.toList\n        val xs$_ = xs$.map(x$ -> x$ + 1)\n        val ys$_ = ys$.map(y$ -> y$ + 1)\n        val xs$_$ = xs$_.zip(ys$_)\n        val xs$_$_ = xs$_$.map(xs$_1 => xs$_1._1 + xs$_1._2)\n        val xs$_$_$ = xs$_$_.zip(xs$_$)\n        val xs$_$_$_ = xs$_$_$.map(xs$_$_1 => xs$_$_1._1 + xs$_$_1._2)\n        val xs$_$_$_$ = xs$_$_$_.zip(xs$_$_$)\n        val xs$_$_$_$_ = xs$_$_$_$.map(xs$_$_$_1 => xs$_$_$_1._1 + xs$_$_$_1._2)\n        val xs$_$_$_$_$ = xs$_$_$_$_.zip(xs$_$_$_$)\n        val xs$_$_$_$_$_ = xs$_$_$_$_$.map(xs$_$_$_$_1 => xs$_$_$_$_1._1 + xs$_$_$_$_1._2)\n        val xs$_$_$_$_$_$ = xs$_$_$_$_$_.zip(xs$_$_$_$_$)\n        val xs$_$_$_$_$_$_ = xs$_$_$_$_$_$.map(xs$_$_$_$_$_1 => xs$_$_$_$_$_1._",
    "        val xs = x.toInt\n        val ys = y.toInt\n        val xs_max = xs.max\n        val ys_max = ys.max\n        val xs_min = xs.min\n        val ys_min = ys.min\n        val xs_diff = xs_max - xs_min\n        val ys_diff = ys_max - ys_min\n        val xs_diff_abs = xs_diff.abs\n        val ys_diff_abs = ys_diff.abs\n        val xs_diff_abs_div_ys_diff_abs = xs_diff_abs / ys_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_floor = xs_diff_abs_div_ys_diff_abs.floor\n        val ys_diff_abs_div_xs_diff_abs = ys_diff_abs / xs_diff_abs\n        val ys_diff_abs_div_xs_diff_abs_floor = ys_diff_abs_div_xs_diff_abs.floor\n        val xs_diff_abs_div_ys_diff_abs_floor_div_ys_diff_abs = xs_diff_abs_div_ys_diff_abs_floor / ys_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_floor_div_ys_diff_abs_floor = xs_diff_abs_div_ys_diff_abs_floor_div_ys_diff_abs.floor\n        val ys_diff_abs_div_xs_diff_abs_floor_div_xs_diff_abs = ys_diff_abs_div_xs_diff_abs_floor / xs_diff_abs\n        val ys_diff_abs_div_xs_diff_abs_floor_div_xs_diff_abs_floor = ys_diff_abs_div_xs_diff_abs_floor_div_xs_diff_abs.floor\n        val xs_diff_abs_div_ys_diff_abs_floor_div_ys_diff_abs_floor_div",
    "        val xs = range(x, y)\n        val xs$ = xs.toList\n        val xs$_ = xs$.toList\n        val xs$__ = xs$_.toList\n        val xs$___ = xs$__.toList\n        val xs$____ = xs$___.toList\n        val xs$_____ = xs$____.toList\n        val xs$______ = xs$_____.toList\n        val xs$_______ = xs$______.toList\n        val xs$________ = xs$_______.toList\n        val xs$_________ = xs$________.toList\n        val xs$__________ = xs$_________.toList\n        val xs$___________ = xs$__________.toList\n        val xs$____________ = xs$___________.toList\n        val xs$_____________ = xs$____________.toList\n        val xs$______________ = xs$_____________.toList\n        val xs$_______________ = xs$______________.toList\n        val xs$________________ = xs$_______________.toList\n        val xs$_________________ = xs$________________.toList\n        val xs$__________________ = xs$_________________.toList\n        val xs$___________________ = xs$__________________.toList\n        val xs$____________________ = xs$___________________.toList\n        val xs$_____________________ = xs$____________________.toList\n        val xs$______________________ = xs$_____________________.toList\n        val xs$_______________________ = xs$______________________.toList\n        val xs$_________________________ = xs$_______________________.toList\n        val xs$__________________________ = xs$_________________________.toList\n        val xs$___________________________ = xs$__________________________.toList\n        val xs$____________________________ = xs$___________________________.toList\n        val xs$_____________________________ = xs$____________________________.toList\n",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_min = ys.min\n        val xs_min = xs.min\n        val ys_max = ys.max\n        val xs_max_plus_ys_min = xs_max + ys_min\n        val xs_min_plus_ys_max = xs_min + ys_max\n        val xs_max_plus_ys_min_plus_ys_max = xs_max_plus_ys_min + ys_max\n        val xs_min_plus_ys_max_plus_ys_min = xs_min_plus_ys_max + ys_min\n        val xs_max_plus_ys_min_plus_ys_max_plus_ys_min = xs_max_plus_ys_min_plus_ys_max + ys_min\n        val xs_min_plus_ys_max_plus_ys_min_plus_ys_max = xs_min_plus_ys_max_plus_ys_min + ys_max\n        val xs_max_plus_ys_min_plus_ys_max_plus_ys_min_plus_ys_max = xs_max_plus_ys_min_plus_ys_max_plus_ys_min + ys_min\n        val xs_min_plus_ys_max_plus_ys_min_plus_ys_max_plus_ys_min_plus_ys_max = xs_min_plus_ys_max_plus_ys_min_plus_ys_max_plus_ys_min + ys_max\n        val xs_max_plus_ys_min_plus_ys_max_plus_ys_min_plus_ys_max_plus_ys_min_plus_ys_max = xs_max_plus_ys_min_plus_ys_max_plus_ys_min_plus_ys_max_plus_ys_min + ys_min\n        val xs_min_plus_ys_max_plus_ys_min_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_ = xs.toSeq\n        val ys_ = ys.toSeq\n        val xs_$ = xs_.toSeq\n        val ys_$ = ys_.toSeq\n        val xs__$ = xs_.toSeq\n        val ys__$ = ys_.toSeq\n        val xs__$_ = xs__$.toSeq\n        val ys__$_ = ys__$.toSeq\n        val xs__$__$ = xs__$_.toSeq\n        val ys__$__$ = ys__$_.toSeq\n        val xs__$__$_ = xs__$__$.toSeq\n        val ys__$__$_ = ys__$__$.toSeq\n        val xs__$__$__$ = xs__$__$_.toSeq\n        val ys__$__$__$ = ys__$__$_.toSeq\n        val xs__$__$__$_ = xs__$__$__$.toSeq\n        val ys__$__$__$_ = ys__$__$__$.toSeq\n        val xs__$__$__$__$ = xs__$__$__$_.toSeq\n        val ys__$__$__$__$ = ys__$__$__$_.toSeq\n        val xs__$__$__$__$_ = xs__$__$__$__$.toSeq\n        val ys__$__$__$__$_ = ys__$__$__$__$.toSeq\n        val xs__$__$__$__$__$ = xs__$__$__$__$_.toSeq\n        val ys__$__$__$__$__$ = ys__$__$__$__$_.toSeq\n        val xs__$__$__$__$__$_ = xs__$__$__$__$__$.toSeq\n        val ys__$__$",
    "        val xs = range(x, y)\n        val ys = range(y, x)\n        val xs_plus_ys = xs + ys\n        val xs_plus_ys_plus_1 = xs_plus_ys + 1\n        val xs_plus_ys_plus_1_div_2 = xs_plus_ys_plus_1 / 2\n        val xs_plus_ys_plus_1_div_2_div_2 = xs_plus_ys_plus_1_div_2 / 2\n        val xs_plus_ys_plus_1_div_2_div_2_div_2 = xs_plus_ys_plus_1_div_2_div_2 / 2\n        val xs_plus_ys_plus_1_div_2_div_2_div_2_div_2 = xs_plus_ys_plus_1_div_2_div_2_div_2 / 2\n        val xs_plus_ys_plus_1_div_2_div_2_div_2_div_2_div_2 = xs_plus_ys_plus_1_div_2_div_2_div_2_div_2 / 2\n        val xs_plus_ys_plus_1_div_2_div_2_div_2_div_2_div_2_div_2 = xs_plus_ys_plus_1_div_2_div_2_div_2_div_2_div_2 / 2\n        val xs_plus_ys_plus_1_div_2_div_2_div_2_div_2_div_2_div_2_div_2 = xs_plus_ys_plus_1_div_2_div_2_div_2_div_2_div_2_div_2 / 2\n        val xs_plus_ys_plus_1_div_2_div_2_div_2_div_2_div_2_div_2_div_2_div_2 = xs_plus_ys_plus_1_div_2_div_2_div_2_div_2_div",
    "        if (x > y) {\n            throw new IllegalArgumentException(\"x must be less than or equal to y\")\n        }\n        if (x == y) {\n            return x\n        }\n        if (x == 0) {\n            return -1\n        }\n        if (x == 1) {\n            return 2\n        }\n        if (x == 2) {\n            return 4\n        }\n        if (x == 3) {\n            return 6\n        }\n        if (x == 4) {\n            return 8\n        }\n        if (x == 5) {\n            return 10\n        }\n        if (x == 6) {\n            return 12\n        }\n        if (x == 7) {\n            return 14\n        }\n        if (x == 8) {\n            return 16\n        }\n        if (x == 9) {\n            return 18\n        }\n        if (x == 10) {\n            return 20\n        }\n        if (x == 11) {\n            return 22\n        }\n        if (x == 12) {\n            return 24\n        }\n        if (x == 13) {\n            return 26\n        }\n        if (x == 14) {\n            return 28\n        }\n        if (x == 15) {\n            return 30\n        }\n        if (x == 16) {\n            return 32\n        }\n        if (x == 17) {\n            return 34\n        }\n        if (x == 18) {\n            return 36\n        }\n        if (x == 19) {\n            return 38\n        }\n        if (x == 20) {\n            return 40\n        }\n        if (x == 21) {\n            return 42\n        }\n        if (x == 22) {\n            return 44\n        }\n        if (x == 23) {\n            return 46\n        }\n        if (x == 24) {\n            return 48\n        }\n        if (x == 25) {\n            return 50\n        }\n        if (x == 26) {\n            return 52\n        }\n        if (x == 27) {\n            return 54\n        }\n        if (x == 28) {\n            return 56\n        }\n",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val xs_max = xs_len.max\n        val ys_max = ys_len.max\n        val xs_min = xs_len.min\n        val ys_min = ys_len.min\n        val xs_max_i = xs_max.getAsInt\n        val ys_max_i = ys_max.getAsInt\n        val xs_min_i = xs_min.getAsInt\n        val ys_min_i = ys_min.getAsInt\n        val xs_max_j = xs_max.getAsLong\n        val ys_max_j = ys_max.getAsLong\n        val xs_min_j = xs_min.getAsLong\n        val ys_min_j = ys_min.getAsLong\n        val xs_max_k = xs_max.getAsDouble\n        val ys_max_k = ys_max.getAsDouble\n        val xs_min_k = xs_min.getAsDouble\n        val ys_min_k = ys_min.getAsDouble\n        val xs_max_l = xs_max.getAsFloat\n        val ys_max_l = ys_max.getAsFloat\n        val xs_min_l = xs_min.getAsFloat\n        val ys_min_l = ys_min.getAsFloat\n        val xs_max_m = xs_max.getAsShort\n        val ys_max_m = ys_max.getAsShort\n        val xs_min_m = xs_min.getAsShort\n        val ys_min_m = ys_min.getAsShort\n        val xs_max_n = xs_max.getAsByte\n        val ys_max_n = ys_max.getAsByte\n        val xs_min_n = xs_min.",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_plus_ys = xs.zip(ys).map(x_y -> x_y._1 + x_y._2).toSeq\n        val xs_plus_ys_plus_xs = xs_plus_ys.zip(xs).map(x_y_x -> x_y_x._1 + x_y_x._2 + x_y_x._1).toSeq\n        val xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs.zip(ys).map(x_y_x_y -> x_y_x_y._1 + x_y_x_y._2 + x_y_x_y._1 + x_y_x_y._2).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys.zip(xs).map(x_y_x_y_x -> x_y_x_y_x._1 + x_y_x_y_x._2 + x_y_x_y_x._1 + x_y_x_y_x._2 + x_y_x_y_x._1).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(xs).map(x_y_x_y_x_y -> x_y_x_y_x_y._1 + x_y_x_y_x_y._2 + x_y_x_y_x_y._1 + x_y_x_y_x_y._2 + x_y_x_y_x_y._1 + x_y_x_y_x_y._2).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_",
    "        val xs = x.toInt\n        val ys = y.toInt\n        val xs_len = xs.length\n        val ys_len = ys.length\n        if (xs_len < ys_len) {\n            return -1l\n        }\n        val xs_len_minus_1 = xs_len - 1\n        val ys_len_minus_1 = ys_len - 1\n        val xs_minus_1 = xs_len_minus_1.toInt\n        val ys_minus_1 = ys_len_minus_1.toInt\n        val xs_minus_2 = xs_minus_1.toInt\n        val ys_minus_2 = ys_minus_1.toInt\n        val xs_minus_3 = xs_minus_2.toInt\n        val ys_minus_3 = ys_minus_2.toInt\n        val xs_minus_4 = xs_minus_3.toInt\n        val ys_minus_4 = ys_minus_3.toInt\n        val xs_minus_5 = xs_minus_4.toInt\n        val ys_minus_5 = ys_minus_4.toInt\n        val xs_minus_6 = xs_minus_5.toInt\n        val ys_minus_6 = ys_minus_5.toInt\n        val xs_minus_7 = xs_minus_6.toInt\n        val ys_minus_7 = ys_minus_6.toInt\n        val xs_minus_8 = xs_minus_7.toInt\n        val ys_minus_8 = ys_minus_7.toInt\n        val xs_minus_9 = xs_minus_8.toInt\n        val ys_minus_9 = ys_minus_8.toInt\n        val xs_minus_10 = xs_minus_9.toInt\n        val ys_minus_10 = ys_minus_9.toInt\n        val xs_minus_11 = xs_minus_10.toInt\n        val ys_minus",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_y = xs.zip(ys)\n        val xs_y_max = xs_y.max\n        val xs_y_max_i = xs_y_max._1\n        val xs_y_max_j = xs_y_max._2\n        val xs_y_max_i_j = xs_y_max_i.zip(xs_y_max_j)\n        val xs_y_max_i_j_max = xs_y_max_i_j.max\n        val xs_y_max_i_j_max_i = xs_y_max_i_j_max._1\n        val xs_y_max_i_j_max_j = xs_y_max_i_j_max._2\n        val xs_y_max_i_j_max_i_j = xs_y_max_i_j_max_i.zip(xs_y_max_i_j_max_j)\n        val xs_y_max_i_j_max_i_j_max = xs_y_max_i_j_max_i_j.max\n        val xs_y_max_i_j_max_i_j_max_i = xs_y_max_i_j_max_i_j_max._1\n        val xs_y_max_i_j_max_i_j_max_j = xs_y_max_i_j_max_i_j_max._2\n        val xs_y_max_i_j_max_i_j_max_i_j = xs_y_max_i_j_max_i_j_max_i.zip(xs_y_max_i_j_max_i_j_max_j)\n        val xs_y_max_i_j_max_i_j_max_i_j_max = xs_y_max_i_j_max_i_j_max_",
    "        val xs = range(x, y)\n        val xs$ = xs.toList\n        val xs$_ = xs$.toSeq\n        val xs$__ = xs$.toBuffer\n        val xs$__$ = xs$.toArray\n        val xs$__$_ = xs$.toArray(Long.class)\n        val xs$__$__ = xs$.toArray(Long.class, 0)\n        val xs$__$__$ = xs$.toArray(Long.class, 0, 0)\n        val xs$__$__$$ = xs$.toArray(Long.class, 0, 0, 0)\n        val xs$__$__$$$ = xs$.toArray(Long.class, 0, 0, 0, 0)\n        val xs$__$__$$$_ = xs$.toArray(Long.class, 0, 0, 0, 0, 0)\n        val xs$__$__$$$__ = xs$.toArray(Long.class, 0, 0, 0, 0, 0, 0)\n        val xs$__$__$$$__$ = xs$.toArray(Long.class, 0, 0, 0, 0, 0, 0, 0)\n        val xs$__$__$$$__$$ = xs$.toArray(Long.class, 0, 0, 0, 0, 0, 0, 0, 0)\n        val xs$__$__$$$__$$$ = xs$.toArray(Long.class, 0, 0, 0, 0, 0, 0, 0, 0, 0)\n        val xs$__$__$$$__$$$_ = xs$.toArray(Long.class, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)\n        val xs$__$__$$$__$$$__ = xs$.toArray(Long.class, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)\n        val xs$__$__$$$__$$$__$ = xs$.toArray(Long.class, 0, 0, 0, 0, 0, 0, 0,",
    "        val xs = x.toInt\n        val ys = y.toInt\n        val xs_plus_1 = xs + 1\n        val ys_plus_1 = ys + 1\n        val xs_plus_1_minus_ys = xs_plus_1 - ys\n        val xs_plus_1_minus_ys_plus_1 = xs_plus_1_minus_ys + 1\n        val xs_plus_1_minus_ys_plus_1_minus_ys = xs_plus_1_minus_ys_plus_1 - ys\n        val xs_plus_1_minus_ys_plus_1_minus_ys_plus_1 = xs_plus_1_minus_ys_plus_1_minus_ys + 1\n        val xs_plus_1_minus_ys_plus_1_minus_ys_plus_1_minus_ys = xs_plus_1_minus_ys_plus_1_minus_ys_plus_1 - ys\n        val xs_plus_1_minus_ys_plus_1_minus_ys_plus_1_minus_ys_plus_1 = xs_plus_1_minus_ys_plus_1_minus_ys_plus_1_minus_ys + 1\n        val xs_plus_1_minus_ys_plus_1_minus_ys_plus_1_minus_ys_plus_1_minus_ys = xs_plus_1_minus_ys_plus_1_minus_ys_plus_1_minus_ys_plus_1 - ys\n        val xs_plus_1_minus_ys_plus_1_minus_ys_plus_1_minus_ys_plus_1_minus_ys_plus_1 = xs_plus_1_minus_ys_plus_1_minus_ys_plus_1_minus_ys_plus_1_minus_ys + 1\n        val xs_plus_1_minus_ys_plus_1_minus_ys_plus_1_minus_ys_plus_1_minus_ys_plus_1_minus_ys = xs_plus_1_minus_ys_plus_1_",
    "        if (x > y) {\n            throw new IllegalArgumentException(\"x must be <= y\")\n        }\n        if (x == y) {\n            return x\n        }\n        var nums = scala.collection.mutable.ArrayBuffer.apply(0)\n        var i = 0\n        while (x <= y) {\n            if (x % 2 == 0) {\n                nums.add(x)\n            }\n            x = x + 1\n            i = i + 1\n        }\n        if (nums.size() == 0) {\n            return -1\n        }\n        return nums.apply(i - 1)",
    "        if (x > y) {\n            throw new IllegalArgumentException(\"x must be <= y\")\n        }\n        if (x == y) {\n            return x\n        }\n        if (x == 0) {\n            return -1\n        }\n        if (x == 1) {\n            return 2\n        }\n        if (x % 2 == 0) {\n            return x\n        }\n        if (y % 2 == 0) {\n            return -1\n        }\n        return x + y",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val xs_max = xs_len.max\n        val ys_max = ys_len.max\n        val xs_min = xs_len.min\n        val ys_min = ys_len.min\n        val xs_max_i = xs_max.getAsInt\n        val ys_max_i = ys_max.getAsInt\n        val xs_min_i = xs_min.getAsInt\n        val ys_min_i = ys_min.getAsInt\n        val xs_max_j = xs_max.getAsLong\n        val ys_max_j = ys_max.getAsLong\n        val xs_min_j = xs_min.getAsLong\n        val ys_min_j = ys_min.getAsLong\n        val xs_max_k = xs_max.getAsDouble\n        val ys_max_k = ys_max.getAsDouble\n        val xs_min_k = xs_min.getAsDouble\n        val ys_min_k = ys_min.getAsDouble\n        val xs_max_l = xs_max.getAsFloat\n        val ys_max_l = ys_max.getAsFloat\n        val xs_min_l = xs_min.getAsFloat\n        val ys_min_l = ys_min.getAsFloat\n        val xs_max_m = xs_max.getAsShort\n        val ys_max_m = ys_max.getAsShort\n        val xs_min_m = xs_min.getAsShort\n        val ys_min_m = ys_min.getAsShort\n        val xs_max_n = xs_max.getAsByte\n        val ys_max_n = ys_max.getAsByte\n        val xs_min_n = xs_min.",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_y = xs.zip(ys)\n        val xs_y_to_int = xs_y.map(x_y -> x_y._1.toInt + x_y._2.toInt)\n        val xs_y_to_int_to_max = xs_y_to_int.map(i -> i.max)\n        val xs_y_to_int_to_max_to_int = xs_y_to_int_to_max.map(i -> i.getOrElse(-1l))\n        val xs_y_to_int_to_max_to_int_to_int = xs_y_to_int_to_max_to_int.map(i -> i.getOrElse(-1l))\n        val xs_y_to_int_to_max_to_int_to_int_to_int = xs_y_to_int_to_max_to_int_to_int.map(i -> i.getOrElse(-1l))\n        val xs_y_to_int_to_max_to_int_to_int_to_int_to_int = xs_y_to_int_to_max_to_int_to_int_to_int.map(i -> i.getOrElse(-1l))\n        val xs_y_to_int_to_max_to_int_to_int_to_int_to_int_to_int = xs_y_to_int_to_max_to_int_to_int_to_int_to_int.map(i -> i.getOrElse(-1l))\n        val xs_y_to_int_to_max_to_int_to_int_to_int_to_int_to_int_to_int = xs_y_to_int_to_max_to_int_to_int_to_int_to_int_to_int.map(i -> i.getOrElse(-1l))\n        val xs_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val xs_max = xs_len.max\n        val ys_max = ys_len.max\n        val xs_min = xs_len.min\n        val ys_min = ys_len.min\n        val xs_max_i = xs_max.getAsInt\n        val ys_max_i = ys_max.getAsInt\n        val xs_min_i = xs_min.getAsInt\n        val ys_min_i = ys_min.getAsInt\n        val xs_max_j = xs_max.getAsLong\n        val ys_max_j = ys_max.getAsLong\n        val xs_min_j = xs_min.getAsLong\n        val ys_min_j = ys_min.getAsLong\n        val xs_max_k = xs_max.getAsDouble\n        val ys_max_k = ys_max.getAsDouble\n        val xs_min_k = xs_min.getAsDouble\n        val ys_min_k = ys_min.getAsDouble\n        val xs_max_l = xs_max.getAsFloat\n        val ys_max_l = ys_max.getAsFloat\n        val xs_min_l = xs_min.getAsFloat\n        val ys_min_l = ys_min.getAsFloat\n        val xs_max_m = xs_max.getAsShort\n        val ys_max_m = ys_max.getAsShort\n        val xs_min_m = xs_min.getAsShort\n        val ys_min_m = ys_min.getAsShort\n        val xs_max_n = xs_max.getAsByte\n        val ys_max_n = ys_max.getAsByte\n        val xs_min_n = xs_min.",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        if (xs_len < ys_len) {\n            return -1l\n        } else if (xs_len == ys_len) {\n            val xs_last = xs_len - 1\n            val ys_last = ys_len - 1\n            val x_last = xs_last.toLong\n            val y_last = ys_last.toLong\n            if (x_last > y_last) {\n                return -1l\n            } else if (x_last == y_last) {\n                val x_last_val = xs_last.toLong\n                val y_last_val = ys_last.toLong\n                if (x_last_val > y_last_val) {\n                    return -1l\n                } else if (x_last_val == y_last_val) {\n                    val x_last_val_val = xs_last.toLong\n                    val y_last_val_val = ys_last.toLong\n                    if (x_last_val_val > y_last_val_val) {\n                        return -1l\n                    } else if (x_last_val_val == y_last_val_val) {\n                        val x_last_val_val_val = xs_last.toLong\n                        val y_last_val_val_val = ys_last.toLong\n                        if (x_last_val_val_val > y_last_val_val_val) {\n                            return -1l\n                        } else if (x_last_val_val_val == y_last_val_val_val) {\n                            val x_last_val_val_val_val = xs_last.toLong\n                            val y_last_val_val_val_val = ys_last.toLong\n                            if (x_last_val_val_val_val > y_last_val_val_val_val) {\n                                return -1l\n                            } else",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        if (xs_len == 0) {\n            return -1l\n        } else if (ys_len == 0) {\n            return xs_len\n        } else if (xs_len == 1 && ys_len == 1) {\n            return xs_len\n        } else if (xs_len > ys_len) {\n            return -1l\n        } else if (xs_len < ys_len) {\n            return xs_len\n        } else {\n            val xs_head = xs.head\n            val ys_head = ys.head\n            val xs_tail = xs.tail\n            val ys_tail = ys.tail\n            val xs_head_len = xs_head.length\n            val ys_head_len = ys_head.length\n            val xs_tail_len = xs_tail.length\n            val ys_tail_len = ys_tail.length\n            if (xs_head_len == 0) {\n                return -1l\n            } else if (ys_head_len == 0) {\n                return xs_head_len\n            } else if (xs_head_len == 1 && ys_head_len == 1) {\n                return xs_head_len\n            } else if (xs_head_len > ys_head_len) {\n                return -1l\n            } else if (xs_head_len < ys_head_len) {\n                return xs_head_len\n            } else {\n                val xs_head_head = xs_head.head\n                val ys_head_head = ys_head.head\n                val xs_head_tail = xs_head.tail\n                val ys_head_tail = ys_head.tail\n                val xs_head_head_len = xs_head_head.length\n                val ys_head_head_len = ys_head_head.length\n",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_min = ys.min\n        val xs_min = xs.min\n        val ys_max = ys.max\n        val xs_max_inclusive = xs_max.isInclusive\n        val ys_min_inclusive = ys_min.isInclusive\n        val xs_min_inclusive = xs_min.isInclusive\n        val ys_max_inclusive = ys_max.isInclusive\n        val xs_max_inclusive_and_ys_min_inclusive = xs_max_inclusive && ys_min_inclusive\n        val xs_min_inclusive_and_ys_max_inclusive = xs_min_inclusive && ys_max_inclusive\n        val xs_max_inclusive_and_ys_min_inclusive_and_ys_max_inclusive = xs_max_inclusive && ys_min_inclusive && ys_max_inclusive\n        val xs_min_inclusive_and_ys_max_inclusive_and_ys_min_inclusive = xs_min_inclusive && ys_max_inclusive && ys_min_inclusive\n        val xs_max_inclusive_and_ys_min_inclusive_and_ys_max_inclusive_and_ys_min_inclusive = xs_max_inclusive && ys_min_inclusive && ys_max_inclusive && ys_min_inclusive\n        val xs_min_inclusive_and_ys_max_inclusive_and_ys_min_inclusive_and_ys_max_inclusive = xs_min_inclusive && ys_max_inclusive && ys_min_inclusive && ys_max_inclusive\n        val xs_max_inclusive_and_ys_min_inclusive_and_ys_max_inclusive_and_ys_min_inclusive_and_ys_max_inclusive = xs_max_inclusive &&",
    "        val xs = range(x, y)\n        val xs2 = xs.filter(x => x % 2 == 0)\n        val ys = xs.filter(x => x % 2 != 0)\n        val ys2 = ys.filter(y => y % 2 == 0)\n        val ys3 = ys2.filter(y => y % 2 != 0)\n        val ys4 = ys3.filter(y => y % 2 == 0)\n        val ys5 = ys4.filter(y => y % 2 != 0)\n        val ys6 = ys5.filter(y => y % 2 == 0)\n        val ys7 = ys6.filter(y => y % 2 != 0)\n        val ys8 = ys7.filter(y => y % 2 == 0)\n        val ys9 = ys8.filter(y => y % 2 != 0)\n        val ys10 = ys9.filter(y => y % 2 == 0)\n        val ys11 = ys10.filter(y => y % 2 != 0)\n        val ys12 = ys11.filter(y => y % 2 == 0)\n        val ys13 = ys12.filter(y => y % 2 != 0)\n        val ys14 = ys13.filter(y => y % 2 == 0)\n        val ys15 = ys14.filter(y => y % 2 != 0)\n        val ys16 = ys15.filter(y => y % 2 == 0)\n        val ys17 = ys16.filter(y => y % 2 != 0)\n        val ys18 = ys17.filter(y => y % 2 == 0)\n        val ys19 = ys18.filter(y => y % 2 != 0)\n        val ys20 = ys19.filter(y => y % 2 == 0)\n        val ys21 = ys20.filter(y => y % 2 != 0)\n        val ys22 = ys21.filter(y => y % 2 == 0)\n        val ys23 = ys22.filter(y => y % 2 != 0)\n",
    "        val xs = x.toInt\n        val ys = y.toInt\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val xs_max = xs_len - 1\n        val ys_max = ys_len - 1\n        val xs_start = xs_max - xs_len + 2\n        val ys_start = ys_max - ys_len + 2\n        val xs_end = xs_start + xs_len - 2\n        val ys_end = ys_start + ys_len - 2\n        val xs_range = xs_end - xs_start + 1\n        val ys_range = ys_end - ys_start + 1\n        val xs_step = xs_range / xs_len\n        val ys_step = ys_range / ys_len\n        val xs_index = xs_start\n        val ys_index = ys_start\n        val xs_val = xs_index\n        val ys_val = ys_index\n        var result = -1l\n        while (xs_val <= xs_end && ys_val <= ys_end) {\n            if (xs_val % 2 == 0 && ys_val % 2 == 0) {\n                result = xs_val * ys_val\n            }\n            xs_index += xs_step\n            ys_index += ys_step\n            xs_val = xs_index\n            ys_val = ys_index\n        }\n        return result",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_min = ys.min\n        val xs_min = xs.min\n        val ys_max = ys.max\n        val xs_max_plus_ys_min = xs_max + ys_min\n        val xs_min_plus_ys_max = xs_min + ys_max\n        val xs_max_plus_ys_min_plus_ys_max = xs_max_plus_ys_min + ys_max\n        val xs_min_plus_ys_max_plus_ys_min = xs_min_plus_ys_max + ys_min\n        val xs_min_plus_ys_max_plus_ys_min_plus_ys_max = xs_min_plus_ys_max_plus_ys_min + ys_max\n        val xs_min_plus_ys_max_plus_ys_min_plus_ys_max_plus_ys_min = xs_min_plus_ys_max_plus_ys_min_plus_ys_max + ys_min\n        val xs_min_plus_ys_max_plus_ys_min_plus_ys_max_plus_ys_min_plus_ys_max = xs_min_plus_ys_max_plus_ys_min_plus_ys_max_plus_ys_min + ys_max\n        val xs_min_plus_ys_max_plus_ys_min_plus_ys_max_plus_ys_min_plus_ys_max_plus_ys_min = xs_min_plus_ys_max_plus_ys_min_plus_ys_max_plus_ys_min_plus_ys_max + ys_min\n        val xs_min_plus_ys_max_plus_ys_min_plus_ys_max_plus_ys_min_plus_ys_max_plus_ys_min_plus_ys_max = xs_min_plus_ys_max_plus_ys_min_",
    "        if (x > y) {\n            throw new IllegalArgumentException(\"x must be <= y\")\n        }\n        if (x == y) {\n            return x\n        }\n        if (x == 0) {\n            return -1\n        }\n        if (x == 1) {\n            return 2\n        }\n        if (x == 2) {\n            return 4\n        }\n        if (x == 3) {\n            return 6\n        }\n        if (x == 4) {\n            return 8\n        }\n        if (x == 5) {\n            return 10\n        }\n        if (x == 6) {\n            return 12\n        }\n        if (x == 7) {\n            return 14\n        }\n        if (x == 8) {\n            return 16\n        }\n        if (x == 9) {\n            return 18\n        }\n        if (x == 10) {\n            return 20\n        }\n        if (x == 11) {\n            return 22\n        }\n        if (x == 12) {\n            return 24\n        }\n        if (x == 13) {\n            return 26\n        }\n        if (x == 14) {\n            return 28\n        }\n        if (x == 15) {\n            return 30\n        }\n        if (x == 16) {\n            return 32\n        }\n        if (x == 17) {\n            return 34\n        }\n        if (x == 18) {\n            return 36\n        }\n        if (x == 19) {\n            return 38\n        }\n        if (x == 20) {\n            return 40\n        }\n        if (x == 21) {\n            return 42\n        }\n        if (x == 22) {\n            return 44\n        }\n        if (x == 23) {\n            return 46\n        }\n        if (x == 24) {\n            return 48\n        }\n        if (x == 25) {\n            return 50\n        }\n        if (x == 26) {\n            return 52\n        }\n        if (x == 27) {\n            return 54\n        }\n        if (x == 28) {\n            return 56\n        }\n        if (x",
    "        val xs = range(x, y)\n        val xs$ = xs.toList\n        val ys = range(y, x)\n        val ys$ = ys.toList\n        val xs$_ = xs$.map(x$ -> x$ + 1)\n        val ys$_ = ys$.map(y$ -> y$ + 1)\n        val xs$_$ = xs$_.zip(ys$_)\n        val xs$_$_ = xs$_$.map(tuple -> tuple._1 + tuple._2)\n        val xs$_$_$ = xs$_$_.zip(xs$_)\n        val xs$_$_$_ = xs$_$_$.map(tuple -> tuple._1 + tuple._2)\n        val xs$_$_$_$ = xs$_$_$.zip(xs$_$_)\n        val xs$_$_$_$_ = xs$_$_$_$.map(tuple -> tuple._1 + tuple._2)\n        val xs$_$_$_$_$ = xs$_$_$_$_.zip(xs$_$_$_)\n        val xs$_$_$_$_$_ = xs$_$_$_$_$.map(tuple -> tuple._1 + tuple._2)\n        val xs$_$_$_$_$_$ = xs$_$_$_$_$_.zip(xs$_$_$_$_)\n        val xs$_$_$_$_$_$_ = xs$_$_$_$_$_$.map(tuple -> tuple._1 + tuple._2)\n        val xs$_$_$_$_$_$_$ = xs$_$_$_$_$_$_.zip(xs$_$_$_$_$_)\n        val xs$_$_$_$_$_$_$_ = xs$_$_$_$_$_$_.map(tuple -> tuple._1 + tuple._2)\n        val",
    "        val xs = range(x, y)\n        val xs$ = xs.toList\n        val ys = range(y, x)\n        val ys$ = ys.toList\n        val xs$_ = xs$.toList\n        val ys$_ = ys$.toList\n        val xs$__ = xs$_.toList\n        val ys$__ = ys$_.toList\n        val xs$__$ = xs$__.toList\n        val ys$__$ = ys$__.toList\n        val xs$__$_ = xs$__$.toList\n        val ys$__$_ = ys$__$.toList\n        val xs$__$__ = xs$__$_.toList\n        val ys$__$__ = ys$__$_.toList\n        val xs$__$__$ = xs$__$__.toList\n        val ys$__$__$ = ys$__$__.toList\n        val xs$__$__$_ = xs$__$__$.toList\n        val ys$__$__$_ = ys$__$__$.toList\n        val xs$__$__$__ = xs$__$__$_.toList\n        val ys$__$__$__ = ys$__$__$_.toList\n        val xs$__$__$__$ = xs$__$__$__.toList\n        val ys$__$__$__$ = ys$__$__$__.toList\n        val xs$__$__$__$_ = xs$__$__$__$.toList\n        val ys$__$__$__$_ = ys$__$__$__$.toList\n        val xs$__$__$__$__ = xs$__$__$__$_.toList\n        val ys$__$__$__$__ = ys$__$__$__$_.toList\n        val xs$__$__$__$__$ = xs$__$__$__$__.toList\n        val ys",
    "        val xs = range(x, y)\n        val xs$ = xs.toList\n        val ys = range(y, x)\n        val ys$ = ys.toList\n        val xs$_ = xs$.map(_.toLong)\n        val ys$_ = ys$.map(_.toLong)\n        val xs$__ = xs$_.zip(ys$_)\n        val xs$__$ = xs$__.map(x_y -> x_y._1 + x_y._2)\n        val xs$__$_ = xs$__$.max()\n        val xs$__$__ = xs$__$_.toLong\n        if (xs$__$__ == -1l) {\n            return -1l\n        } else {\n            return xs$__$__\n        }",
    "        if (x > y) {\n            return -1l\n        }\n        if (x == y) {\n            return x\n        }\n        if (x == 0) {\n            return 0l\n        }\n        if (x == 1) {\n            return 2l\n        }\n        if (x == 2) {\n            return 4l\n        }\n        if (x % 2 == 0) {\n            return 2l * chooseNum(x / 2, y)\n        }\n        return 2l * chooseNum(x / 2, y) + chooseNum(x / 2, y - 1)",
    "        if (x > y) {\n            return -1l\n        } else if (x == y) {\n            return x\n        } else {\n            return y\n        }",
    "        val xs = scala.math.NumericRange.apply(x, y)\n        val ys = scala.math.NumericRange.apply(y, x)\n        val xs_plus_ys = xs.union(ys)\n        val xs_plus_ys_plus_1 = xs_plus_ys.union(scala.math.NumericRange.apply(1l, 1l))\n        val xs_plus_ys_plus_1_minus_1 = xs_plus_ys_plus_1.difference(scala.math.NumericRange.apply(1l, 1l))\n        val xs_plus_ys_plus_1_minus_1_minus_1 = xs_plus_ys_plus_1_minus_1.difference(scala.math.NumericRange.apply(1l, 1l))\n        val xs_plus_ys_plus_1_minus_1_minus_1_minus_1 = xs_plus_ys_plus_1_minus_1_minus_1.difference(scala.math.NumericRange.apply(1l, 1l))\n        val xs_plus_ys_plus_1_minus_1_minus_1_minus_1_minus_1 = xs_plus_ys_plus_1_minus_1_minus_1_minus_1.difference(scala.math.NumericRange.apply(1l, 1l))\n        val xs_plus_ys_plus_1_minus_1_minus_1_minus_1_minus_1_minus_1 = xs_plus_ys_plus_1_minus_1_minus_1_minus_1_minus_1.difference(scala.math.NumericRange.apply(1l, 1l))\n        val xs_plus_ys_plus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 = xs_plus_ys_plus_1_minus_1_minus_1_minus_1_minus_1_minus_1.difference(scala.math.NumericRange.apply(1l, 1l))",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_min = ys.min\n        val xs_min = xs.min\n        val ys_max = ys.max\n        val xs_max_plus_ys_min = xs_max + ys_min\n        val xs_min_plus_ys_max = xs_min + ys_max\n        val xs_max_plus_ys_min_plus_ys_max = xs_max_plus_ys_min + ys_max\n        val xs_min_plus_ys_max_plus_ys_min = xs_min_plus_ys_max + ys_min\n        val xs_max_plus_ys_min_plus_ys_max_plus_ys_min = xs_max_plus_ys_min_plus_ys_max + ys_min\n        val xs_min_plus_ys_max_plus_ys_min_plus_ys_max = xs_min_plus_ys_max_plus_ys_min + ys_max\n        val xs_max_plus_ys_min_plus_ys_max_plus_ys_min_plus_ys_max = xs_max_plus_ys_min_plus_ys_max_plus_ys_min + ys_min\n        val xs_min_plus_ys_max_plus_ys_min_plus_ys_max_plus_ys_min_plus_ys_max = xs_min_plus_ys_max_plus_ys_min_plus_ys_max_plus_ys_min + ys_max\n        val xs_max_plus_ys_min_plus_ys_max_plus_ys_min_plus_ys_max_plus_ys_min_plus_ys_max = xs_max_plus_ys_min_plus_ys_max_plus_ys_min_plus_ys_max_plus_ys_min + ys_min\n        val xs_min_plus_ys_max_plus_ys_min_",
    "        val xs = range(x, y)\n        val ys = range(y, x)\n        val xs_plus_ys = xs.union(ys)\n        val xs_plus_ys_plus_1 = xs_plus_ys.prepend(1l)\n        val xs_plus_ys_plus_1_minus_1 = xs_plus_ys_plus_1.subtract(1l)\n        val xs_plus_ys_plus_1_minus_1_div_2 = xs_plus_ys_plus_1_minus_1.divide(2l)\n        val xs_plus_ys_plus_1_minus_1_div_2_minus_1 = xs_plus_ys_plus_1_minus_1_div_2.subtract(1l)\n        val xs_plus_ys_plus_1_minus_1_div_2_minus_1_div_2 = xs_plus_ys_plus_1_minus_1_div_2_minus_1.divide(2l)\n        val xs_plus_ys_plus_1_minus_1_div_2_minus_1_div_2_minus_1 = xs_plus_ys_plus_1_minus_1_div_2_minus_1_div_2.subtract(1l)\n        val xs_plus_ys_plus_1_minus_1_div_2_minus_1_div_2_minus_1_div_2 = xs_plus_ys_plus_1_minus_1_div_2_minus_1_div_2_minus_1.divide(2l)\n        val xs_plus_ys_plus_1_minus_1_div_2_minus_1_div_2_minus_1_div_2_minus_1 = xs_plus_ys_plus_1_minus_1_div_2_minus_1_div_2_minus_1_div_2.subtract(1l)\n        val xs_plus_ys_plus_1_minus_1_div_2_minus_1_div_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_min = ys.min\n        val xs_min = xs.min\n        val ys_max = ys.max\n        val xs_max_inclusive = xs_max.isInclusive\n        val ys_min_inclusive = ys_min.isInclusive\n        val xs_min_inclusive = xs_min.isInclusive\n        val ys_max_inclusive = ys_max.isInclusive\n        val xs_max_lt_ys_min = xs_max < ys_min\n        val ys_min_lt_xs_max = ys_min < xs_max\n        val xs_min_lt_ys_max = xs_min < ys_max\n        val xs_max_lt_ys_min_inclusive = xs_max_lt_ys_min && xs_max_inclusive\n        val ys_min_lt_xs_max_inclusive = ys_min_lt_xs_max && ys_min_inclusive\n        val xs_min_lt_ys_max_inclusive = xs_min_lt_ys_max && xs_min_inclusive\n        val xs_max_lt_ys_min_inclusive = xs_max_lt_ys_min && xs_max_inclusive\n        val ys_min_lt_xs_max_inclusive = ys_min_lt_xs_max && ys_min_inclusive\n        val xs_min_lt_ys_max_inclusive = xs_min_lt_ys_max && xs_min_inclusive\n        val xs_max_lt_ys_min_inclusive = xs_max_lt_ys_min && xs_max_inclusive\n        val ys_min_lt_xs_max_inclusive = ys_min_lt_xs_max && ys_min_inclusive\n        val xs_min_lt_ys_max_inclusive = x",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_min = ys.min\n        val xs_min = xs.min\n        val ys_max = ys.max\n        val xs_max_plus_ys_min = xs_max + ys_min\n        val xs_min_plus_ys_max = xs_min + ys_max\n        val xs_max_plus_ys_min_plus_ys_max = xs_max_plus_ys_min + ys_max\n        val xs_min_plus_ys_max_plus_ys_min = xs_min_plus_ys_max + ys_min\n        val xs_max_plus_ys_min_plus_ys_max_plus_ys_min = xs_max_plus_ys_min_plus_ys_max + ys_min\n        val xs_min_plus_ys_max_plus_ys_min_plus_ys_max = xs_min_plus_ys_max_plus_ys_min + ys_max\n        val xs_max_plus_ys_min_plus_ys_max_plus_ys_min_plus_ys_max = xs_max_plus_ys_min_plus_ys_max_plus_ys_min + ys_min\n        val xs_min_plus_ys_max_plus_ys_min_plus_ys_max_plus_ys_min_plus_ys_max = xs_min_plus_ys_max_plus_ys_min_plus_ys_max_plus_ys_min + ys_max\n        val xs_max_plus_ys_min_plus_ys_max_plus_ys_min_plus_ys_max_plus_ys_min_plus_ys_max = xs_max_plus_ys_min_plus_ys_max_plus_ys_min_plus_ys_max_plus_ys_min + ys_min\n        val xs_min_plus_ys_max_plus_ys_min_",
    "        if (x > y) {\n            return -1l\n        } else if (x == y) {\n            return x\n        } else {\n            return _.chooseNum(x, y)\n        }",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val x_min = xs_len.min\n        val y_min = ys_len.min\n        val x_max = xs_len.max\n        val y_max = ys_len.max\n        val x_diff = x_max - x_min\n        val y_diff = y_max - y_min\n        val x_diff_abs = x_diff.abs\n        val y_diff_abs = y_diff.abs\n        val x_diff_abs_div_y_diff_abs = x_diff_abs.div(y_diff_abs)\n        val x_diff_abs_div_y_diff_abs_floor = x_diff_abs_div_y_diff_abs.floor\n        val x_diff_abs_div_y_diff_abs_ceil = x_diff_abs_div_y_diff_abs.ceil\n        val x_diff_abs_div_y_diff_abs_max = x_diff_abs_div_y_diff_abs.max\n        val x_diff_abs_div_y_diff_abs_min = x_diff_abs_div_y_diff_abs.min\n        val x_diff_abs_div_y_diff_abs_abs = x_diff_abs_div_y_diff_abs.abs\n        val x_diff_abs_div_y_diff_abs_div_y_diff_abs = x_diff_abs_div_y_diff_abs.div(y_diff_abs)\n        val x_diff_abs_div_y_diff_abs_div_y_diff_abs_floor = x_diff_abs_div_y_diff_abs_div_y_diff_abs.floor\n        val x_diff_abs_div_y_diff_abs_div_y_diff_abs_ceil = x_diff_abs_div_y_diff_abs_div_y_diff_abs.ceil\n        val x_diff_",
    "        val xs = x.toInt\n        val ys = y.toInt\n        val xs_plus_1 = xs + 1\n        val ys_plus_1 = ys + 1\n        val xs_plus_1_div_ys = xs_plus_1 / ys\n        val xs_plus_1_mod_ys = xs_plus_1 % ys\n        val xs_plus_1_div_ys_plus_1 = xs_plus_1_div_ys + 1\n        val xs_plus_1_mod_ys_plus_1 = xs_plus_1_mod_ys + 1\n        val xs_plus_1_div_ys_plus_1_mod_ys = xs_plus_1_div_ys_plus_1 % ys\n        val xs_plus_1_mod_ys_plus_1_div_ys = xs_plus_1_mod_ys_plus_1 / ys\n        val xs_plus_1_div_ys_plus_1_mod_ys_plus_1 = xs_plus_1_div_ys_plus_1_mod_ys + 1\n        val xs_plus_1_mod_ys_plus_1_div_ys_plus_1_mod_ys = xs_plus_1_mod_ys_plus_1_div_ys % ys\n        val xs_plus_1_mod_ys_plus_1_div_ys_plus_1_mod_ys_plus_1 = xs_plus_1_mod_ys_plus_1_div_ys_plus_1_mod_ys + 1\n        val xs_plus_1_mod_ys_plus_1_div_ys_plus_1_mod_ys_plus_1_mod_ys = xs_plus_1_mod_ys_plus_1_div_ys_plus_1_mod_ys_plus_1 % ys\n        val xs_plus_1_mod_ys_plus_1_div_ys_plus_1_mod_ys_plus_1_mod_ys_plus_1 = xs_plus_1_mod_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val x_min = xs_len.min\n        val y_min = ys_len.min\n        val x_max = xs_len.max\n        val y_max = ys_len.max\n        val x_diff = x_max - x_min\n        val y_diff = y_max - y_min\n        val x_diff_abs = x_diff.abs\n        val y_diff_abs = y_diff.abs\n        val x_diff_abs_div_y_diff_abs = x_diff_abs / y_diff_abs\n        val x_diff_abs_div_y_diff_abs_floor = x_diff_abs_div_y_diff_abs.floor\n        val x_diff_abs_div_y_diff_abs_ceil = x_diff_abs_div_y_diff_abs.ceil\n        val x_diff_abs_div_y_diff_abs_floor_div_2 = x_diff_abs_div_y_diff_abs_floor / 2\n        val x_diff_abs_div_y_diff_abs_ceil_div_2 = x_diff_abs_div_y_diff_abs_ceil / 2\n        val x_diff_abs_div_y_diff_abs_floor_div_2_minus_1 = x_diff_abs_div_y_diff_abs_floor_div_2 - 1\n        val x_diff_abs_div_y_diff_abs_ceil_div_2_minus_1 = x_diff_abs_div_y_diff_abs_ceil_div_2 - 1\n        val x_diff_abs_div_y_diff_abs_floor_div_2_plus_1 = x_diff_abs_div_y_diff_abs_floor_div_2 + 1\n        val x_diff_abs_div_y_diff_abs_ceil_div_2_plus_1 = x_diff_abs",
    "        if (x > y) {\n            return -1l\n        }\n        if (x == y) {\n            return x\n        }\n        if (x == 0) {\n            return 0l\n        }\n        if (x == 1) {\n            return 2l\n        }\n        if (x == 2) {\n            return 2l\n        }\n        if (x % 2 == 0) {\n            return x\n        }\n        if (y % 2 == 0) {\n            return -1l\n        }\n        return x + y / 2",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_min = ys.min\n        val xs_min = xs.min\n        val ys_max = ys.max\n        val xs_max_plus_ys_min = xs_max + ys_min\n        val xs_min_plus_ys_max = xs_min + ys_max\n        val xs_max_plus_ys_min_plus_ys_max = xs_max_plus_ys_min + ys_max\n        val xs_min_plus_ys_min_plus_ys_max = xs_min_plus_ys_min + ys_max\n        val xs_max_plus_ys_min_plus_ys_max_plus_ys_max = xs_max_plus_ys_min_plus_ys_max + ys_max\n        val xs_min_plus_ys_min_plus_ys_max_plus_ys_max = xs_min_plus_ys_min_plus_ys_max + ys_max\n        val xs_max_plus_ys_min_plus_ys_max_plus_ys_max_plus_ys_max = xs_max_plus_ys_min_plus_ys_max_plus_ys_max + ys_max\n        val xs_min_plus_ys_min_plus_ys_max_plus_ys_max_plus_ys_max_plus_ys_max = xs_min_plus_ys_min_plus_ys_max_plus_ys_max_plus_ys_max + ys_max\n        val xs_max_plus_ys_min_plus_ys_max_plus_ys_max_plus_ys_max_plus_ys_max_plus_ys_max = xs_max_plus_ys_min_plus_ys_max_plus_ys_max_plus_ys_max_plus_ys_max + ys_max\n        val xs_min_plus_ys_min_plus_ys_max_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_plus_ys = xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs = xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus",
    "        val xs = range(x, y)\n        val xs2 = xs.filter(_.isEven)\n        val ys2 = xs.filter(_.isEven)\n        val xs3 = xs2.filter(_.isEven)\n        val ys3 = ys2.filter(_.isEven)\n        val xs4 = xs3.filter(_.isEven)\n        val ys4 = ys3.filter(_.isEven)\n        val xs5 = xs4.filter(_.isEven)\n        val ys5 = ys4.filter(_.isEven)\n        val xs6 = xs5.filter(_.isEven)\n        val ys6 = ys5.filter(_.isEven)\n        val xs7 = xs6.filter(_.isEven)\n        val ys7 = ys6.filter(_.isEven)\n        val xs8 = xs7.filter(_.isEven)\n        val ys8 = ys7.filter(_.isEven)\n        val xs9 = xs8.filter(_.isEven)\n        val ys9 = ys8.filter(_.isEven)\n        val xs10 = xs9.filter(_.isEven)\n        val ys10 = ys9.filter(_.isEven)\n        val xs11 = xs10.filter(_.isEven)\n        val ys11 = ys10.filter(_.isEven)\n        val xs12 = xs11.filter(_.isEven)\n        val ys12 = ys11.filter(_.isEven)\n        val xs13 = xs12.filter(_.isEven)\n        val ys13 = ys12.filter(_.isEven)\n        val xs14 = xs13.filter(_.isEven)\n        val ys14 = ys13.filter(_.isEven)\n        val xs15 = xs14.filter(_.isEven)\n        val ys15 = ys14.filter(_.isEven)\n        val xs16 = xs15.filter(_.isEven)\n        val ys16 = ys15",
    "        if (x > y) {\n            return -1l\n        } else {\n            var x_ = x\n            var y_ = y\n            var i = 0l\n            while (x_ <= y_) {\n                x_ = x_ + 2l\n                i = i + 1l\n            }\n            return i\n        }",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_max = ys.max\n        val xs_min = xs.min\n        val ys_min = ys.min\n        val xs_diff = xs_max - xs_min\n        val ys_diff = ys_max - ys_min\n        val xs_diff_abs = xs_diff.abs\n        val ys_diff_abs = ys_diff.abs\n        val xs_diff_abs_div_ys_diff_abs = xs_diff_abs / ys_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_floor = xs_diff_abs_div_ys_diff_abs.floor\n        val xs_diff_abs_div_ys_diff_abs_ceil = xs_diff_abs_div_ys_diff_abs.ceil\n        val xs_diff_abs_div_ys_diff_abs_max = xs_diff_abs_div_ys_diff_abs.max\n        val xs_diff_abs_div_ys_diff_abs_min = xs_diff_abs_div_ys_diff_abs.min\n        val xs_diff_abs_div_ys_diff_abs_abs = xs_diff_abs_div_ys_diff_abs.abs\n        val xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs = xs_diff_abs_div_ys_diff_abs / ys_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs_floor = xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs.floor\n        val xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs_ceil = xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs.ceil\n        val xs_diff_abs_div",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_min = ys.min\n        val xs_min = xs.min\n        val ys_max = ys.max\n        val xs_max_minus_ys_min = xs_max - ys_min\n        val ys_max_minus_xs_min = ys_max - xs_min\n        val xs_max_minus_ys_min_plus_ys_max_minus_xs_min = xs_max_minus_ys_min + ys_max_minus_xs_min\n        val xs_max_minus_ys_min_plus_ys_max_minus_xs_min_div_2 = xs_max_minus_ys_min_plus_ys_max_minus_xs_min / 2\n        val ys_max_minus_xs_min_plus_xs_max_minus_ys_min = ys_max_minus_xs_min + xs_max_minus_ys_min\n        val ys_max_minus_xs_min_plus_xs_max_minus_ys_min_div_2 = ys_max_minus_xs_min_plus_xs_max_minus_ys_min / 2\n        val xs_max_minus_ys_min_plus_ys_max_minus_xs_min_plus_ys_max_minus_xs_min = xs_max_minus_ys_min_plus_ys_max_minus_xs_min + ys_max_minus_xs_min\n        val xs_max_minus_ys_min_plus_ys_max_minus_xs_min_plus_ys_max_minus_xs_min_div_2 = xs_max_minus_ys_min_plus_ys_max_minus_xs_min_plus_ys_max_minus_xs_min / 2\n        val xs_max_minus_ys_min_plus_ys_max_minus_xs_min_plus_ys_max_minus_xs_min_div_4 = xs_max",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_max = ys.max\n        val xs_min = xs.min\n        val ys_min = ys.min\n        val xs_diff = xs_max - xs_min\n        val ys_diff = ys_max - ys_min\n        val xs_diff_abs = xs_diff.abs\n        val ys_diff_abs = ys_diff.abs\n        val xs_diff_abs_div_ys_diff_abs = xs_diff_abs / ys_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_floor = xs_diff_abs_div_ys_diff_abs.floor\n        val xs_diff_abs_div_ys_diff_abs_ceil = xs_diff_abs_div_ys_diff_abs.ceil\n        val xs_diff_abs_div_ys_diff_abs_max = xs_diff_abs_div_ys_diff_abs.max\n        val xs_diff_abs_div_ys_diff_abs_min = xs_diff_abs_div_ys_diff_abs.min\n        val xs_diff_abs_div_ys_diff_abs_toSeq = xs_diff_abs_div_ys_diff_abs.toSeq\n        val xs_diff_abs_div_ys_diff_abs_toSeq_map = xs_diff_abs_div_ys_diff_abs.toSeq.map\n        val xs_diff_abs_div_ys_diff_abs_toSeq_max = xs_diff_abs_div_ys_diff_abs.toSeq.max\n        val xs_diff_abs_div_ys_diff_abs_toSeq_min = xs_diff_abs_div_ys_diff_abs.toSeq.min\n        val xs_diff_abs_div_ys_diff_abs_toSeq_toSeq = xs",
    "        if (x > y) {\n            return -1l\n        } else if (x == y) {\n            return x\n        } else {\n            return y\n        }",
    "        if (x > y) {\n            return -1l\n        } else {\n            var num = x\n            var i = 0l\n            while (num <= y) {\n                num = num + 2l\n                i = i + 1l\n            }\n            return i\n        }",
    "        if (x > y) {\n            throw new IllegalArgumentException(\"x must be <= y\")\n        }\n        if (x == y) {\n            return x\n        }\n        if (x == 0) {\n            return -1\n        }\n        if (x == 1) {\n            return 2\n        }\n        if (x % 2 == 0) {\n            return x\n        }\n        if (y % 2 == 0) {\n            return -1\n        }\n        return x + y",
    "        val xs = scala.math.NumericRange.apply(x, y)\n        val ys = scala.math.NumericRange.apply(y, x)\n        val xs_plus_ys = xs.union(ys)\n        val xs_plus_ys_evens = xs_plus_ys.filter(x => x % 2 == 0)\n        val max_even = xs_plus_ys_evens.max()\n        if (max_even > y) max_even = -1\n        max_even",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        if (xs_len < ys_len) {\n            return -1l\n        } else if (xs_len == ys_len) {\n            val xs_last = xs.last\n            val ys_last = ys.last\n            if (xs_last > ys_last) {\n                return -1l\n            } else if (xs_last == ys_last) {\n                val xs_first = xs.first\n                val ys_first = ys.first\n                if (xs_first > ys_first) {\n                    return -1l\n                } else if (xs_first == ys_first) {\n                    val xs_mid = xs.mid\n                    val ys_mid = ys.mid\n                    if (xs_mid > ys_mid) {\n                        return -1l\n                    } else if (xs_mid == ys_mid) {\n                        return xs_first\n                    } else {\n                        return -1l\n                    }\n                } else {\n                    return -1l\n                }\n            } else {\n                return -1l\n            }\n        } else {\n            return -1l\n        }",
    "        if (x > y) {\n            throw new IllegalArgumentException(\"x must be less than or equal to y\")\n        }\n        if (x == y) {\n            return x\n        }\n        if (x == 0) {\n            return -1\n        }\n        if (x == 1) {\n            return 2\n        }\n        if (x == 2) {\n            return 4\n        }\n        if (x % 2 == 0) {\n            return x\n        }\n        if (y % 2 == 0) {\n            return -1\n        }\n        return x + y",
    "        val xs = range(x, y)\n        val xs2 = xs.filter(x => x % 2 == 0)\n        val ys2 = xs.filter(x => x % 2 != 0)\n        val xs3 = xs2.filter(x => x <= y)\n        val ys3 = ys2.filter(x => x <= y)\n        val xs4 = xs3.filter(x => x >= x)\n        val ys4 = ys3.filter(x => x >= x)\n        val xs5 = xs4.filter(x => x <= y)\n        val ys5 = ys4.filter(x => x <= y)\n        val xs6 = xs5.filter(x => x >= x)\n        val ys6 = ys5.filter(x => x >= x)\n        val xs7 = xs6.filter(x => x <= y)\n        val ys7 = ys6.filter(x => x <= y)\n        val xs8 = xs7.filter(x => x >= x)\n        val ys8 = ys7.filter(x => x >= x)\n        val xs9 = xs8.filter(x => x <= y)\n        val ys9 = ys8.filter(x => x <= y)\n        val xs10 = xs9.filter(x => x >= x)\n        val ys10 = ys9.filter(x => x >= x)\n        val xs11 = xs10.filter(x => x <= y)\n        val ys11 = ys10.filter(x => x <= y)\n        val xs12 = xs11.filter(x => x >= x)\n        val ys12 = ys11.filter(x => x >= x)\n        val xs13 = xs12.filter(x => x <= y)\n        val ys13 = ys12.filter(x => x <= y)\n        val xs14 = xs13.filter(x => x >= x)\n        val ys14 = ys13.filter(x => x >= x)\n        val xs",
    "        if (x > y) {\n            return -1l\n        } else {\n            var i = x\n            var j = y\n            while (i <= j) {\n                var k = i\n                while (k <= j) {\n                    if (k % 2 == 0 && k <= j) {\n                        return k\n                    }\n                    k = k + 1\n                }\n                i = i + 1\n            }\n            return -1l\n        }",
    "        if (x > y) {\n            return -1l\n        }\n        if (x == y) {\n            return x\n        }\n        if (x == 0) {\n            return 0l\n        }\n        if (y == 0) {\n            return -1l\n        }\n        if (x == 1) {\n            return y\n        }\n        if (y == 1) {\n            return x\n        }\n        if (x == y) {\n            return x\n        }\n        if (x == y - 1) {\n            return x\n        }\n        if (x == y + 1) {\n            return y\n        }\n        if (y == x - 1) {\n            return y\n        }\n        if (y == x + 1) {\n            return x\n        }\n        if (x == y - 2) {\n            return y\n        }\n        if (x == y + 2) {\n            return x\n        }\n        if (y == x - 2) {\n            return x\n        }\n        if (y == x + 2) {\n            return y\n        }\n        if (x == y - 3) {\n            return y\n        }\n        if (x == y + 3) {\n            return x\n        }\n        if (y == x - 3) {\n            return x\n        }\n        if (y == x + 3) {\n            return y\n        }\n        if (x == y - 4) {\n            return y\n        }\n        if (x == y + 4) {\n            return x\n        }\n        if (y == x - 4) {\n            return x\n        }\n        if (y == x + 4) {\n            return y\n        }\n        if (x == y - 5) {\n            return y\n        }\n        if (x == y + 5) {\n            return x\n        }\n        if (y == x - 5) {\n            return x\n        }\n        if (y == x + 5) {\n            return y\n        }\n        if (x == y - 6) {\n            return y\n        }\n        if (x == y + 6) {\n            return x\n        }",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_y = xs.zip(ys)\n        val xs_y_max = xs_y.max\n        val xs_y_max_i = xs_y_max._1\n        val xs_y_max_j = xs_y_max._2\n        val xs_y_max_i_j = xs_y_max_i.zip(xs_y_max_j)\n        val xs_y_max_i_j_max = xs_y_max_i_j.max\n        val xs_y_max_i_j_max_i = xs_y_max_i_j_max._1\n        val xs_y_max_i_j_max_j = xs_y_max_i_j_max._2\n        val xs_y_max_i_j_max_i_j = xs_y_max_i_j_max_i.zip(xs_y_max_i_j_max_j)\n        val xs_y_max_i_j_max_i_j_max = xs_y_max_i_j_max_i_j.max\n        val xs_y_max_i_j_max_i_j_max_i = xs_y_max_i_j_max_i_j_max._1\n        val xs_y_max_i_j_max_i_j_max_j = xs_y_max_i_j_max_i_j_max._2\n        val xs_y_max_i_j_max_i_j_max_i_j = xs_y_max_i_j_max_i_j_max_i.zip(xs_y_max_i_j_max_i_j_max_j)\n        val xs_y_max_i_j_max_i_j_max_i_j_max = xs_y_max_i_j_max_i_j_max_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_plus_ys = xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs = xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus",
    "        val xs = x.toInt\n        val ys = y.toInt\n        val xs_plus_1 = xs + 1\n        val ys_plus_1 = ys + 1\n        val xs_plus_ys = xs_plus_1 * ys_plus_1\n        val xs_plus_ys_plus_1 = xs_plus_ys + 1\n        val xs_plus_ys_plus_ys = xs_plus_ys_plus_1 * ys_plus_ys\n        val xs_plus_ys_plus_ys_plus_1 = xs_plus_ys_plus_ys + 1\n        val xs_plus_ys_plus_ys_plus_ys = xs_plus_ys_plus_ys_plus_1 * ys_plus_ys_plus_ys\n        val xs_plus_ys_plus_ys_plus_ys_plus_1 = xs_plus_ys_plus_ys_plus_ys + 1\n        val xs_plus_ys_plus_ys_plus_ys_plus_ys = xs_plus_ys_plus_ys_plus_ys_plus_1 * ys_plus_ys_plus_ys_plus_ys\n        val xs_plus_ys_plus_ys_plus_ys_plus_ys_plus_1 = xs_plus_ys_plus_ys_plus_ys_plus_ys + 1\n        val xs_plus_ys_plus_ys_plus_ys_plus_ys_plus_ys = xs_plus_ys_plus_ys_plus_ys_plus_ys_plus_1 * ys_plus_ys_plus_ys_plus_ys_plus_ys\n        val xs_plus_ys_plus_ys_plus_ys_plus_ys_plus_ys_plus_1 = xs_plus_ys_plus_ys_plus_ys_plus_ys_plus_ys + 1\n        val xs_plus_ys_plus_ys_plus_ys_plus_ys_plus_ys_plus_ys = xs_plus_ys_plus_ys_plus_ys_plus_ys_plus_ys_plus_1",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_ = xs.toBuffer\n        val ys_ = ys.toBuffer\n        val xs_$ = xs_\n        val ys_$ = ys_\n        val xs__$ = xs__$\n        val ys__$ = ys__$\n        val xs__$1 = xs__$1\n        val ys__$1 = ys__$1\n        val xs__$2 = xs__$2\n        val ys__$2 = ys__$2\n        val xs__$3 = xs__$3\n        val ys__$3 = ys__$3\n        val xs__$4 = xs__$4\n        val ys__$4 = ys__$4\n        val xs__$5 = xs__$5\n        val ys__$5 = ys__$5\n        val xs__$6 = xs__$6\n        val ys__$6 = ys__$6\n        val xs__$7 = xs__$7\n        val ys__$7 = ys__$7\n        val xs__$8 = xs__$8\n        val ys__$8 = ys__$8\n        val xs__$9 = xs__$9\n        val ys__$9 = ys__$9\n        val xs__$10 = xs__$10\n        val ys__$10 = ys__$10\n        val xs__$11 = xs__$11\n        val ys__$11 = ys__$11\n        val xs__$12 = xs__$12\n        val ys__$12 = ys__$12\n        val xs__$13 = xs__$13\n        val ys__$13 = ys__$13\n        val xs__$14 = xs__$14\n        val ys__$14 = ys__$14\n        val xs__$15 = xs__$15\n        val ys__$15 = ys__$15\n",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_max = ys.max\n        val xs_min = xs.min\n        val ys_min = ys.min\n        val xs_diff = xs_max - xs_min\n        val ys_diff = ys_max - ys_min\n        val xs_diff_abs = xs_diff.abs\n        val ys_diff_abs = ys_diff.abs\n        val xs_diff_abs_div_ys_diff_abs = xs_diff_abs / ys_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_floor = xs_diff_abs_div_ys_diff_abs.floor\n        val ys_diff_abs_div_ys_diff_abs_floor = ys_diff_abs_div_ys_diff_abs_floor.toLong\n        val xs_diff_abs_div_ys_diff_abs_floor_div_ys_diff_abs_floor = xs_diff_abs_div_ys_diff_abs_floor / ys_diff_abs_div_ys_diff_abs_floor\n        val xs_diff_abs_div_ys_diff_abs_floor_div_ys_diff_abs_floor_div_ys_diff_abs_floor = xs_diff_abs_div_ys_diff_abs_floor_div_ys_diff_abs_floor / ys_diff_abs_div_ys_diff_abs_floor_div_ys_diff_abs_floor\n        val xs_diff_abs_div_ys_diff_abs_floor_div_ys_diff_abs_floor_div_ys_diff_abs_floor_div_ys_diff_abs_floor = xs_diff_abs_div_ys_diff_abs_floor_div_ys_diff_abs_floor_div_ys_diff_abs_floor / ys_diff_abs_div_ys_diff_abs_floor_div_ys_diff_abs_floor_div",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val x_len = xs_len.toInt\n        val y_len = ys_len.toInt\n        val x_max = xs_len.max\n        val y_max = ys_len.max\n        val x_min = xs_len.min\n        val y_min = ys_len.min\n        val x_diff = x_max - x_min\n        val y_diff = y_max - y_min\n        val x_diff_len = x_diff.toInt\n        val y_diff_len = y_diff.toInt\n        val x_diff_max = x_diff_len.max\n        val y_diff_max = y_diff_len.max\n        val x_diff_min = x_diff_len.min\n        val y_diff_min = y_diff_len.min\n        val x_diff_diff = x_diff_max - x_diff_min\n        val y_diff_diff = y_diff_max - y_diff_min\n        val x_diff_diff_len = x_diff_diff.toInt\n        val y_diff_diff_len = y_diff_diff.toInt\n        val x_diff_diff_max = x_diff_diff_len.max\n        val y_diff_diff_max = y_diff_diff_len.max\n        val x_diff_diff_min = x_diff_diff_len.min\n        val y_diff_diff_min = y_diff_diff_len.min\n        val x_diff_diff_diff = x_diff_diff_max - x_diff_diff_min\n        val y_diff_diff_diff = y_diff_diff_max - y_diff_diff_min\n        val x_diff_diff_diff_len = x_diff_diff_diff.toInt\n        val y_diff_diff_diff_len = y_diff_diff_diff.toInt\n        val x_diff_diff_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_min = ys.min\n        val xs_min = xs.min\n        val ys_max = ys.max\n        val xs_max_inclusive = xs_max.isInclusive\n        val ys_min_inclusive = ys_min.isInclusive\n        val xs_min_inclusive = xs_min.isInclusive\n        val ys_max_inclusive = ys_max.isInclusive\n        val xs_max_inclusive_and_ys_min_inclusive = xs_max_inclusive && ys_min_inclusive\n        val xs_min_inclusive_and_ys_max_inclusive = xs_min_inclusive && ys_max_inclusive\n        val xs_max_inclusive_and_ys_min_inclusive_and_ys_max_inclusive = xs_max_inclusive && ys_min_inclusive && ys_max_inclusive\n        val xs_min_inclusive_and_ys_max_inclusive_and_ys_min_inclusive = xs_min_inclusive && ys_max_inclusive && ys_min_inclusive\n        val xs_max_inclusive_and_ys_min_inclusive_and_ys_max_inclusive_and_ys_min_inclusive = xs_max_inclusive && ys_min_inclusive && ys_max_inclusive && ys_min_inclusive\n        val xs_min_inclusive_and_ys_max_inclusive_and_ys_min_inclusive_and_ys_max_inclusive = xs_min_inclusive && ys_max_inclusive && ys_min_inclusive && ys_max_inclusive\n        val xs_max_inclusive_and_ys_min_inclusive_and_ys_max_inclusive_and_ys_min_inclusive_and_ys_max_inclusive = xs_max_inclusive &&",
    "        val xs = x.toInt\n        val ys = y.toInt\n        val xs_plus_1 = xs + 1\n        val ys_plus_1 = ys + 1\n        val xs_plus_1_div_ys = xs_plus_1 / ys\n        val xs_plus_1_mod_ys = xs_plus_1 % ys\n        val xs_plus_1_div_ys_plus_1 = xs_plus_1_div_ys + 1\n        val xs_plus_1_mod_ys_plus_1 = xs_plus_1_mod_ys + 1\n        val xs_plus_1_div_ys_plus_1_mod_ys = xs_plus_1_div_ys_plus_1 % ys\n        val xs_plus_1_mod_ys_plus_1_div_ys = xs_plus_1_mod_ys_plus_1 / ys\n        val xs_plus_1_div_ys_plus_1_mod_ys_plus_1 = xs_plus_1_div_ys_plus_1_mod_ys + 1\n        val xs_plus_1_mod_ys_plus_1_div_ys_plus_1_mod_ys = xs_plus_1_mod_ys_plus_1_div_ys % ys\n        val xs_plus_1_div_ys_plus_1_mod_ys_plus_1_div_ys_plus_1 = xs_plus_1_div_ys_plus_1_mod_ys_plus_1 / ys\n        val xs_plus_1_mod_ys_plus_1_div_ys_plus_1_mod_ys_plus_1_div_ys_plus_1 = xs_plus_1_mod_ys_plus_1_div_ys_plus_1_mod_ys_plus_1 / ys\n        val xs_plus_1_mod_ys_plus_1_div_ys_plus_1_mod_ys_plus_1_div_ys_plus_1_mod_ys = xs_plus",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_plus_ys = xs + ys\n        val xs_plus_ys_plus_1 = xs_plus_ys + 1l\n        val xs_plus_ys_plus_1_div_2 = xs_plus_ys_plus_1 / 2l\n        val xs_plus_ys_plus_1_div_2_minus_1 = xs_plus_ys_plus_1_div_2 - 1l\n        val xs_plus_ys_plus_1_div_2_minus_1_div_2 = xs_plus_ys_plus_1_div_2_minus_1 / 2l\n        val xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1 = xs_plus_ys_plus_1_div_2_minus_1_div_2 - 1l\n        val xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1_div_2 = xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1 / 2l\n        val xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1_div_2_minus_1 = xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1_div_2 - 1l\n        val xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1_div_2_minus_1_div_2 = xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1_div_2_minus_1 / 2l\n        val xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1_div_2_minus_1_div_2_minus_1 = xs_plus_ys_plus_1_div_2_minus_1_div_2",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_plus_ys = xs + ys\n        val xs_plus_ys_plus_1 = xs_plus_ys + 1\n        val xs_plus_ys_plus_1_minus_xs = xs_plus_ys_plus_1 - xs\n        val xs_plus_ys_plus_1_minus_xs_plus_ys = xs_plus_ys_plus_1 - xs_plus_ys\n        val xs_plus_ys_plus_1_minus_xs_plus_ys_plus_1 = xs_plus_ys_plus_1 - xs_plus_ys_plus_1\n        val xs_plus_ys_plus_1_minus_xs_plus_ys_plus_1_minus_xs = xs_plus_ys_plus_1 - xs_plus_ys_plus_1_minus_xs\n        val xs_plus_ys_plus_1_minus_xs_plus_ys_plus_1_minus_xs_plus_ys = xs_plus_ys_plus_1 - xs_plus_ys_plus_1_minus_xs_plus_ys\n        val xs_plus_ys_plus_1_minus_xs_plus_ys_plus_1_minus_xs_plus_ys_plus_1 = xs_plus_ys_plus_1 - xs_plus_ys_plus_1_minus_xs_plus_ys_plus_1\n        val xs_plus_ys_plus_1_minus_xs_plus_ys_plus_1_minus_xs_plus_ys_plus_1_minus_xs = xs_plus_ys_plus_1 - xs_plus_ys_plus_1_minus_xs_plus_ys_plus_1_minus_xs\n        val xs_plus_ys_plus_1_minus_xs_plus_ys_plus_1_minus_xs_plus_ys_plus_1_minus_xs_plus_ys = xs_plus_ys_plus_1 - xs_plus_ys_plus_1_minus",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs$ = xs.toSeq\n        val ys$ = ys.toSeq\n        val xs$_ = xs$.toSeq\n        val ys$_ = ys$.toSeq\n        val xs$__ = xs$_.toSeq\n        val ys$__ = ys$_.toSeq\n        val xs$___ = xs$__.toSeq\n        val ys$___ = ys$__.toSeq\n        val xs$____ = xs$___.toSeq\n        val ys$____ = ys$___.toSeq\n        val xs$_____ = xs$____.toSeq\n        val ys$_____ = ys$____.toSeq\n        val xs$______ = xs$_____.toSeq\n        val ys$______ = ys$_____.toSeq\n        val xs$_______ = xs$______.toSeq\n        val ys$_______ = ys$______.toSeq\n        val xs$________ = xs$_______.toSeq\n        val ys$________ = ys$_______.toSeq\n        val xs$_________ = xs$________.toSeq\n        val ys$_________ = ys$________.toSeq\n        val xs$__________ = xs$_________.toSeq\n        val ys$__________ = ys$_________.toSeq\n        val xs$___________ = xs$__________.toSeq\n        val ys$___________ = ys$__________.toSeq\n        val xs$____________ = xs$___________.toSeq\n        val ys$____________ = ys$___________.toSeq\n        val xs$_____________ = xs$____________.toSeq\n        val ys$_____________ = ys$____________.toSeq\n        val xs$______________ = xs$_____________.toSeq\n        val ys$______________ = ys$_____________.toSeq\n",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_min = ys.min\n        val xs_min = xs.min\n        val ys_max = ys.max\n        val xs_max_inclusive = xs_max.isInclusive\n        val ys_min_inclusive = ys_min.isInclusive\n        val xs_min_inclusive = xs_min.isInclusive\n        val ys_max_inclusive = ys_max.isInclusive\n        val xs_max_inclusive_and_ys_min_inclusive = xs_max_inclusive && ys_min_inclusive\n        val xs_min_inclusive_and_ys_max_inclusive = xs_min_inclusive && ys_max_inclusive\n        val xs_max_inclusive_and_ys_min_inclusive_and_xs_min_inclusive = xs_max_inclusive && ys_min_inclusive && xs_min_inclusive\n        val xs_min_inclusive_and_ys_max_inclusive_and_xs_max_inclusive = xs_min_inclusive && ys_max_inclusive && xs_max_inclusive\n        val xs_max_inclusive_and_ys_min_inclusive_and_xs_max_inclusive_and_ys_min_inclusive = xs_max_inclusive && ys_min_inclusive && xs_max_inclusive && ys_min_inclusive\n        val xs_min_inclusive_and_ys_max_inclusive_and_xs_max_inclusive_and_ys_max_inclusive = xs_min_inclusive && ys_max_inclusive && xs_max_inclusive && ys_max_inclusive\n        val xs_max_inclusive_and_ys_min_inclusive_and_xs_max_inclusive_and_ys_max_inclusive_and_xs_min_inclusive = xs_max_inclusive &&",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val xs_last = xs_len - 1\n        val ys_last = ys_len - 1\n        val xs_last_val = xs_last.toSeq.head\n        val ys_last_val = ys_last.toSeq.head\n        val xs_last_val_val = xs_last_val.toSeq.head\n        val ys_last_val_val = ys_last_val.toSeq.head\n        val xs_last_val_val_val = xs_last_val_val.toSeq.head\n        val ys_last_val_val_val = ys_last_val_val.toSeq.head\n        val xs_last_val_val_val_val = xs_last_val_val_val.toSeq.head\n        val ys_last_val_val_val_val = ys_last_val_val_val.toSeq.head\n        val xs_last_val_val_val_val_val = xs_last_val_val_val_val.toSeq.head\n        val ys_last_val_val_val_val_val = ys_last_val_val_val_val.toSeq.head\n        val xs_last_val_val_val_val_val_val = xs_last_val_val_val_val_val.toSeq.head\n        val ys_last_val_val_val_val_val_val = ys_last_val_val_val_val_val.toSeq.head\n        val xs_last_val_val_val_val_val_val_val = xs_last_val_val_val_val_val_val.toSeq.head\n        val ys_last_val_val_val_val_val_val_val = ys_last_val_val_val_val_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val xs_max = xs_len.max\n        val ys_max = ys_len.max\n        val xs_min = xs_len.min\n        val ys_min = ys_len.min\n        val xs_diff = xs_max - xs_min\n        val ys_diff = ys_max - ys_min\n        val xs_diff_abs = xs_diff.abs\n        val ys_diff_abs = ys_diff.abs\n        val xs_diff_abs_div_ys_diff_abs = xs_diff_abs / ys_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_floor = xs_diff_abs_div_ys_diff_abs.floor\n        val ys_diff_abs_div_xs_diff_abs = ys_diff_abs / xs_diff_abs\n        val ys_diff_abs_div_xs_diff_abs_floor = ys_diff_abs_div_xs_diff_abs.floor\n        val xs_diff_abs_div_ys_diff_abs_floor_div_ys_diff_abs = xs_diff_abs_div_ys_diff_abs_floor / ys_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_floor_div_ys_diff_abs_floor = xs_diff_abs_div_ys_diff_abs_floor_div_ys_diff_abs.floor\n        val xs_diff_abs_div_ys_diff_abs_floor_div_ys_diff_abs_floor_div_ys_diff_abs = xs_diff_abs_div_ys_diff_abs_floor_div_ys_diff_abs_floor / ys_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_floor_div_ys_diff_abs_floor_div_ys",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_y = xs.zip(ys)\n        val xs_y_zipped = xs_y.zip(xs_y)\n        val xs_y_zipped_to_list = xs_y_zipped.toList\n        val xs_y_zipped_to_list_to_seq = xs_y_zipped_to_list.toSeq\n        val xs_y_zipped_to_list_to_seq_to_max = xs_y_zipped_to_list_to_seq.maxBy[Long](_.left)\n        val xs_y_zipped_to_list_to_seq_to_max_to_max = xs_y_zipped_to_list_to_seq_to_max.max\n        val xs_y_zipped_to_list_to_seq_to_max_to_max_to_max = xs_y_zipped_to_list_to_seq_to_max_to_max.max\n        val xs_y_zipped_to_list_to_seq_to_max_to_max_to_max_to_max = xs_y_zipped_to_list_to_seq_to_max_to_max_to_max.max\n        val xs_y_zipped_to_list_to_seq_to_max_to_max_to_max_to_max_to_max = xs_y_zipped_to_list_to_seq_to_max_to_max_to_max_to_max.max\n        val xs_y_zipped_to_list_to_seq_to_max_to_max_to_max_to_max_to_max_to_max = xs_y_zipped_to_list_to_seq_to_max_to_max_to_max_to_max.max\n        val xs_y_zipped_to_list_to_seq_to_max_to_max_to_max_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val xs_max = xs_len.max\n        val ys_max = ys_len.max\n        val xs_min = xs_len.min\n        val ys_min = ys_len.min\n        val xs_max_i = xs_max.getAsInt\n        val ys_max_i = ys_max.getAsInt\n        val xs_min_i = xs_min.getAsInt\n        val ys_min_i = ys_min.getAsInt\n        val xs_max_j = xs_max.getAsLong\n        val ys_max_j = ys_max.getAsLong\n        val xs_min_j = xs_min.getAsLong\n        val ys_min_j = ys_min.getAsLong\n        val xs_max_k = xs_max.getAsDouble\n        val ys_max_k = ys_max.getAsDouble\n        val xs_min_k = xs_min.getAsDouble\n        val ys_min_k = ys_min.getAsDouble\n        val xs_max_l = xs_max.getAsFloat\n        val ys_max_l = ys_max.getAsFloat\n        val xs_min_l = xs_min.getAsFloat\n        val ys_min_l = ys_min.getAsFloat\n        val xs_max_m = xs_max.getAsShort\n        val ys_max_m = ys_max.getAsShort\n        val xs_min_m = xs_min.getAsShort\n        val ys_min_m = ys_min.getAsShort\n        val xs_max_n = xs_max.getAsByte\n        val ys_max_n = ys_max.getAsByte\n        val xs_min_n = xs_min.",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val xs_max = xs_len.max\n        val ys_max = ys_len.max\n        val xs_min = xs_len.min\n        val ys_min = ys_len.min\n        val xs_max_val = xs_max.get\n        val ys_max_val = ys_max.get\n        val xs_min_val = xs_min.get\n        val ys_min_val = ys_min.get\n        val xs_max_val_val = xs_max_val.get\n        val ys_max_val_val = ys_max_val.get\n        val xs_min_val_val = xs_min_val.get\n        val ys_min_val_val = ys_min_val.get\n        val xs_max_val_val_val = xs_max_val_val.get\n        val ys_max_val_val_val = ys_max_val_val.get\n        val xs_min_val_val_val = xs_min_val_val.get\n        val ys_min_val_val_val = ys_min_val_val.get\n        val xs_max_val_val_val_val = xs_max_val_val_val.get\n        val ys_max_val_val_val_val = ys_max_val_val_val.get\n        val xs_min_val_val_val_val = xs_min_val_val_val.get\n        val ys_min_val_val_val_val = ys_min_val_val_val.get\n        val xs_max_val_val_val_val_val = xs_max_val_val_val_val.get\n        val ys_max_val_val_val_val_val = ys_max_val_val_",
    "        if (x > y) {\n            return -1l\n        } else {\n            var x_y = x - y\n            var x_y_div_2 = x_y / 2l\n            var x_y_div_2_minus_1 = x_y_div_2 - 1l\n            var x_y_div_2_minus_1_times_2 = x_y_div_2_minus_1 * 2l\n            var x_y_div_2_minus_1_times_2_minus_1 = x_y_div_2_minus_1_times_2 - 1l\n            var x_y_div_2_minus_1_times_2_minus_1_times_2 = x_y_div_2_minus_1_times_2_minus_1 * 2l\n            var x_y_div_2_minus_1_times_2_minus_1_times_2_minus_1 = x_y_div_2_minus_1_times_2_minus_1_times_2 - 1l\n            var x_y_div_2_minus_1_times_2_minus_1_times_2_minus_1_times_2 = x_y_div_2_minus_1_times_2_minus_1_times_2_minus_1 * 2l\n            var x_y_div_2_minus_1_times_2_minus_1_times_2_minus_1_times_2_minus_1 = x_y_div_2_minus_1_times_2_minus_1_times_2_minus_1_times_2 - 1l\n            var x_y_div_2_minus_1_times_2_minus_1_times_2_minus_1_times_2_minus_1_times_2 = x_y_div_2_minus_1_times_2_minus_1_times_2_minus_1_times_2_minus_1 * 2l\n            var x_y_div_2_minus_1_times_2_minus_1_times_2_minus_1_times_2_minus_1_times_2",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_plus_ys = xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs = xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val xs_max = xs_len.max\n        val ys_max = ys_len.max\n        val xs_min = xs_len.min\n        val ys_min = ys_len.min\n        val xs_max_minus_xs_min = xs_max - xs_min\n        val ys_max_minus_ys_min = ys_max - ys_min\n        val xs_max_minus_ys_min_div_2 = xs_max_minus_ys_min / 2l\n        val ys_max_minus_xs_min_div_2 = ys_max_minus_xs_min / 2l\n        val xs_max_minus_ys_min_div_2_minus_1 = xs_max_minus_ys_min_div_2 - 1l\n        val ys_max_minus_xs_min_div_2_minus_1 = ys_max_minus_xs_min_div_2 - 1l\n        val xs_max_minus_ys_min_div_2_minus_1_times_2 = xs_max_minus_ys_min_div_2_minus_1 * 2l\n        val ys_max_minus_xs_min_div_2_minus_1_times_2 = ys_max_minus_xs_min_div_2_minus_1 * 2l\n        val xs_max_minus_ys_min_div_2_minus_1_times_2_minus_1 = xs_max_minus_ys_min_div_2_minus_1_times_2 - 1l\n        val ys_max_minus_xs_min_div_2_minus_1_times_2_minus_1 = ys_max_minus_xs_min_div_2_minus_1_times_2 - 1l\n        val xs_max_minus_ys_min_div_2_minus_1",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val x_min = xs_len.min\n        val y_min = ys_len.min\n        val x_max = xs_len.max\n        val y_max = ys_len.max\n        val x_diff = x_max - x_min\n        val y_diff = y_max - y_min\n        val x_diff_div_y_diff = x_diff / y_diff\n        val x_diff_div_y_diff_floor = x_diff_div_y_diff.floor\n        val x_diff_div_y_diff_ceil = x_diff_div_y_diff.ceiling\n        val x_diff_div_y_diff_floor_div_y_diff = x_diff_div_y_diff_floor / y_diff\n        val x_diff_div_y_diff_ceil_div_y_diff = x_diff_div_y_diff_ceil / y_diff\n        val x_diff_div_y_diff_floor_div_y_diff_floor = x_diff_div_y_diff_floor_div_y_diff.floor\n        val x_diff_div_y_diff_floor_div_y_diff_ceil = x_diff_div_y_diff_floor_div_y_diff.ceiling\n        val x_diff_div_y_diff_ceil_div_y_diff_floor = x_diff_div_y_diff_ceil_div_y_diff.floor\n        val x_diff_div_y_diff_ceil_div_y_diff_ceil = x_diff_div_y_diff_ceil_div_y_diff.ceiling\n        val x_diff_div_y_diff_floor_div_y_diff_floor_div_y_diff = x_diff_div_y_diff_floor_div_y_diff_floor / y_diff\n        val x_diff_div_y_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val x_max = xs_len.max\n        val y_max = ys_len.max\n        val x_min = xs_len.min\n        val y_min = ys_len.min\n        val x_diff = x_max - x_min\n        val y_diff = y_max - y_min\n        val x_diff_len = x_diff.toSeq.length\n        val y_diff_len = y_diff.toSeq.length\n        val x_diff_max = x_diff_len.max\n        val y_diff_max = y_diff_len.max\n        val x_diff_min = x_diff_len.min\n        val y_diff_min = y_diff_len.min\n        val x_diff_diff = x_diff_max - x_diff_min\n        val y_diff_diff = y_diff_max - y_diff_min\n        val x_diff_diff_len = x_diff_diff.toSeq.length\n        val y_diff_diff_len = y_diff_diff.toSeq.length\n        val x_diff_diff_max = x_diff_diff_len.max\n        val y_diff_diff_max = y_diff_diff_len.max\n        val x_diff_diff_min = x_diff_diff_len.min\n        val y_diff_diff_min = y_diff_diff_len.min\n        val x_diff_diff_diff = x_diff_diff_max - x_diff_diff_min\n        val y_diff_diff_diff = y_diff_diff_max - y_diff_diff_min\n        val x_diff_diff_diff_len = x_diff_diff_diff.toSeq.length\n        val y_diff_diff_diff_len = y_diff_diff_diff.toSeq.length\n        val x_diff_diff_diff_max = x_diff_diff_",
    "        val xs = range(x, y)\n        val ys = range(y, x)\n        val xs_plus_ys = xs.union(ys)\n        val xs_plus_ys_plus_1 = xs_plus_ys.prepend(1)\n        val xs_plus_ys_plus_1_minus_1 = xs_plus_ys_plus_1.subtract(1)\n        val xs_plus_ys_plus_1_minus_1_div_2 = xs_plus_ys_plus_1_minus_1.divide(2)\n        val xs_plus_ys_plus_1_minus_1_div_2_minus_1 = xs_plus_ys_plus_1_minus_1_div_2.subtract(1)\n        val xs_plus_ys_plus_1_minus_1_div_2_minus_1_div_2 = xs_plus_ys_plus_1_minus_1_div_2_minus_1.divide(2)\n        val xs_plus_ys_plus_1_minus_1_div_2_minus_1_div_2_minus_1 = xs_plus_ys_plus_1_minus_1_div_2_minus_1_div_2.subtract(1)\n        val xs_plus_ys_plus_1_minus_1_div_2_minus_1_div_2_minus_1_div_2 = xs_plus_ys_plus_1_minus_1_div_2_minus_1_div_2_minus_1.divide(2)\n        val xs_plus_ys_plus_1_minus_1_div_2_minus_1_div_2_minus_1_div_2_minus_1 = xs_plus_ys_plus_1_minus_1_div_2_minus_1_div_2_minus_1_div_2.subtract(1)\n        val xs_plus_ys_plus_1_minus_1_div_2_minus_1_div_2_minus_1_div_",
    "        if (x > y) {\n            return -1l\n        }\n        if (x == y) {\n            return x\n        }\n        if (x == y - 1) {\n            return x\n        }\n        if (x == y + 1) {\n            return x\n        }\n        if (x == y + 2) {\n            return x\n        }\n        if (x == y + 3) {\n            return x\n        }\n        if (x == y + 4) {\n            return x\n        }\n        if (x == y + 5) {\n            return x\n        }\n        if (x == y + 6) {\n            return x\n        }\n        if (x == y + 7) {\n            return x\n        }\n        if (x == y + 8) {\n            return x\n        }\n        if (x == y + 9) {\n            return x\n        }\n        if (x == y + 10) {\n            return x\n        }\n        if (x == y + 11) {\n            return x\n        }\n        if (x == y + 12) {\n            return x\n        }\n        if (x == y + 13) {\n            return x\n        }\n        if (x == y + 14) {\n            return x\n        }\n        if (x == y + 15) {\n            return x\n        }\n        if (x == y + 16) {\n            return x\n        }\n        if (x == y + 17) {\n            return x\n        }\n        if (x == y + 18) {\n            return x\n        }\n        if (x == y + 19) {\n            return x\n        }\n        if (x == y + 20) {\n            return x\n        }\n        if (x == y + 21) {\n            return x\n        }\n        if (x == y + 22) {\n            return x\n        }\n        if (x == y + 23) {\n            return x\n        }\n        if (x == y + 24) {\n            return x\n        }\n        if (x == y + 25) {\n            return x\n        }\n        if (x == y + 26) {",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_plus_ys = xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs = xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus",
    "        val xs = range(x, y)\n        val xs2 = xs.filter(x => x % 2 == 0)\n        val xs3 = xs2.filter(x => x % 2 == 0)\n        val xs4 = xs3.filter(x => x % 2 == 0)\n        val xs5 = xs4.filter(x => x % 2 == 0)\n        val xs6 = xs5.filter(x => x % 2 == 0)\n        val xs7 = xs6.filter(x => x % 2 == 0)\n        val xs8 = xs7.filter(x => x % 2 == 0)\n        val xs9 = xs8.filter(x => x % 2 == 0)\n        val xs10 = xs9.filter(x => x % 2 == 0)\n        val xs11 = xs10.filter(x => x % 2 == 0)\n        val xs12 = xs11.filter(x => x % 2 == 0)\n        val xs13 = xs12.filter(x => x % 2 == 0)\n        val xs14 = xs13.filter(x => x % 2 == 0)\n        val xs15 = xs14.filter(x => x % 2 == 0)\n        val xs16 = xs15.filter(x => x % 2 == 0)\n        val xs17 = xs16.filter(x => x % 2 == 0)\n        val xs18 = xs17.filter(x => x % 2 == 0)\n        val xs19 = xs18.filter(x => x % 2 == 0)\n        val xs20 = xs19.filter(x => x % 2 == 0)\n        val xs21 = xs20.filter(x => x % 2 == 0)\n        val xs22 = xs21.filter(x => x % 2 == 0)\n        val xs23 = xs22.filter(x => x % 2 == 0)\n        val xs24 = xs23.filter(x => x % 2 == 0)\n        val xs25 = xs24.filter(x => x % 2 ==",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_plus_ys = xs + ys\n        val xs_plus_ys_plus_1 = xs_plus_ys + 1l\n        val xs_plus_ys_plus_1_div_2 = xs_plus_ys_plus_1 / 2l\n        val xs_plus_ys_plus_1_div_2_minus_1 = xs_plus_ys_plus_1_div_2 - 1l\n        val xs_plus_ys_plus_1_div_2_minus_1_div_2 = xs_plus_ys_plus_1_div_2_minus_1 / 2l\n        val xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1 = xs_plus_ys_plus_1_div_2_minus_1_div_2 - 1l\n        val xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1_div_2 = xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1 / 2l\n        val xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1_div_2_minus_1 = xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1_div_2 - 1l\n        val xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1_div_2_minus_1_div_2 = xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1_div_2_minus_1 / 2l\n        val xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1_div_2_minus_1_div_2_minus_1 = xs_plus_ys_plus_1_div_2_minus_1_div_2",
    "        val xs = x.toInt\n        val ys = y.toInt\n        val xs_len = xs.length\n        val ys_len = ys.length\n        if (xs_len == 0) {\n            return -1l\n        }\n        if (ys_len == 0) {\n            return xs_len\n        }\n        if (xs_len > ys_len) {\n            return xs_len\n        }\n        if (xs_len < ys_len) {\n            return -1l\n        }\n        val xs_max = xs_len - 1\n        val ys_max = ys_len - 1\n        val xs_max_i = xs_max.toInt\n        val ys_max_i = ys_max.toInt\n        val xs_max_j = xs_max_i - 1\n        val ys_max_j = ys_max_i - 1\n        val xs_max_k = xs_max_j - 1\n        val ys_max_k = ys_max_j - 1\n        val xs_max_l = xs_max_k - 1\n        val ys_max_l = ys_max_k - 1\n        val xs_max_m = xs_max_l - 1\n        val ys_max_m = ys_max_l - 1\n        val xs_max_n = xs_max_m - 1\n        val ys_max_n = ys_max_m - 1\n        val xs_max_o = xs_max_n - 1\n        val ys_max_o = ys_max_n - 1\n        val xs_max_p = xs_max_o - 1\n        val ys_max_p = ys_max_o - 1\n        val xs_max_q = xs_max_p - 1\n        val ys_max_q = ys_max_p - 1\n        val xs_max_r = xs_max_q - 1\n        val ys_max_r = ys_",
    "        if (x > y) {\n            return -1l\n        }\n        if (x == y) {\n            return x\n        }\n        if (x == 0) {\n            return 0l\n        }\n        if (x == 1) {\n            return 2l\n        }\n        if (x % 2 == 0) {\n            return x\n        }\n        if (y % 2 == 0) {\n            return -1l\n        }\n        return x + y / 2",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_plus_ys = xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs = xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus",
    "        if (x > y) {\n            return -1l\n        } else {\n            var i = x\n            while (i <= y) {\n                if (i % 2 == 0) {\n                    return i\n                }\n                i = i + 1\n            }\n            return -1l\n        }",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_plus_ys = xs + ys\n        val xs_plus_ys_plus_1 = xs_plus_ys + 1l\n        val xs_plus_ys_plus_1_minus_xs = xs_plus_ys_plus_1 - xs\n        val xs_plus_ys_plus_1_minus_ys = xs_plus_ys_plus_1 - ys\n        val xs_plus_ys_plus_1_minus_xs_minus_ys = xs_plus_ys_plus_1 - xs_plus_ys\n        val xs_plus_ys_plus_1_minus_ys_minus_xs = xs_plus_ys_plus_1 - ys_plus_ys\n        val xs_plus_ys_plus_1_minus_xs_minus_ys_minus_1 = xs_plus_ys_plus_1 - xs_plus_ys_minus_1\n        val xs_plus_ys_plus_1_minus_ys_minus_xs_minus_1 = xs_plus_ys_plus_1 - ys_plus_xs_minus_1\n        val xs_plus_ys_plus_1_minus_xs_minus_ys_minus_1_minus_1 = xs_plus_ys_plus_1 - xs_minus_ys_minus_1_minus_1\n        val xs_plus_ys_plus_1_minus_ys_minus_xs_minus_1_minus_1 = xs_plus_ys_plus_1 - ys_minus_xs_minus_1_minus_1\n        val xs_plus_ys_plus_1_minus_xs_minus_ys_minus_1_minus_1_minus_1 = xs_plus_ys_plus_1 - xs_minus_ys_minus_1_minus_1_minus_1\n        val xs_plus_ys_plus_1_minus_ys_minus_xs_minus_1_minus_1_minus_1_minus_1 = xs_plus_ys_plus",
    "        if (x > y) {\n            return -1l\n        }\n        if (x == y) {\n            return x\n        }\n        if (x == 0) {\n            return 0l\n        }\n        if (x == 1) {\n            return 2l\n        }\n        if (x % 2 == 0) {\n            return x\n        }\n        if (y % 2 == 0) {\n            return -1l\n        }\n        return x + y / 2",
    "        val xs = range(x, y)\n        val xs2 = xs.filter(x => x % 2 == 0)\n        val ys2 = xs.filter(x => x % 2 != 0)\n        val ys3 = ys2.filter(y => y < x)\n        val ys4 = ys2.filter(y => y >= x)\n        val ys5 = ys3.filter(y => y < x)\n        val ys6 = ys4.filter(y => y >= x)\n        val ys7 = ys5.filter(y => y < x)\n        val ys8 = ys6.filter(y => y >= x)\n        val ys9 = ys7.filter(y => y < x)\n        val ys10 = ys8.filter(y => y >= x)\n        val ys11 = ys9.filter(y => y < x)\n        val ys12 = ys10.filter(y => y >= x)\n        val ys13 = ys11.filter(y => y < x)\n        val ys14 = ys12.filter(y => y >= x)\n        val ys15 = ys13.filter(y => y < x)\n        val ys16 = ys14.filter(y => y >= x)\n        val ys17 = ys15.filter(y => y < x)\n        val ys18 = ys16.filter(y => y >= x)\n        val ys19 = ys17.filter(y => y < x)\n        val ys20 = ys18.filter(y => y >= x)\n        val ys21 = ys19.filter(y => y < x)\n        val ys22 = ys20.filter(y => y >= x)\n        val ys23 = ys21.filter(y => y < x)\n        val ys24 = ys22.filter(y => y >= x)\n        val ys25 = ys23.filter(y => y < x)\n        val ys26 = ys24.filter(y => y >= x)\n        val ys",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val x_min = xs_len.min\n        val y_min = ys_len.min\n        val x_max = xs_len.max\n        val y_max = ys_len.max\n        val x_max_minus_x_min = x_max - x_min\n        val y_max_minus_y_min = y_max - y_min\n        val x_max_minus_x_min_minus_1 = x_max_minus_x_min - 1\n        val y_max_minus_y_min_minus_1 = y_max_minus_y_min - 1\n        val x_max_minus_x_min_minus_1_times_y_max_minus_y_min = x_max_minus_x_min_minus_1 * y_max_minus_y_min\n        val x_max_minus_x_min_times_y_max_minus_y_min = x_max_minus_x_min * y_max_minus_y_min\n        val x_max_minus_x_min_minus_1_times_y_max = x_max_minus_x_min_minus_1 * y_max\n        val x_max_minus_x_min_times_y_max = x_max_minus_x_min * y_max\n        val x_max_minus_x_min_times_y_min = x_max_minus_x_min * y_min\n        val x_max_times_y_max = x_max * y_max\n        val x_max_minus_x_min_times_y_min = x_max_minus_x_min * y_min\n        val x_max_minus_x_min_times_y_max_minus_y_min = x_max_minus_x_min_times_y_max - y_min\n        val x_max_minus_x_min_times_y_max_minus_1 =",
    "        if (x > y) {\n            return -1l\n        } else if (x == y) {\n            return x\n        } else {\n            return y\n        }",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_plus_1 = xs.takeRight(1)\n        val ys_plus_1 = ys.takeRight(1)\n        val xs_plus_2 = xs.takeRight(2)\n        val ys_plus_2 = ys.takeRight(2)\n        val xs_plus_3 = xs.takeRight(3)\n        val ys_plus_3 = ys.takeRight(3)\n        val xs_plus_4 = xs.takeRight(4)\n        val ys_plus_4 = ys.takeRight(4)\n        val xs_plus_5 = xs.takeRight(5)\n        val ys_plus_5 = ys.takeRight(5)\n        val xs_plus_6 = xs.takeRight(6)\n        val ys_plus_6 = ys.takeRight(6)\n        val xs_plus_7 = xs.takeRight(7)\n        val ys_plus_7 = ys.takeRight(7)\n        val xs_plus_8 = xs.takeRight(8)\n        val ys_plus_8 = ys.takeRight(8)\n        val xs_plus_9 = xs.takeRight(9)\n        val ys_plus_9 = ys.takeRight(9)\n        val xs_plus_10 = xs.takeRight(10)\n        val ys_plus_10 = ys.takeRight(10)\n        val xs_plus_11 = xs.takeRight(11)\n        val ys_plus_11 = ys.takeRight(11)\n        val xs_plus_12 = xs.takeRight(12)\n        val ys_plus_12 = ys.takeRight(12)\n        val xs_plus_13 = xs.takeRight(13)\n        val ys_plus_13 = ys.takeRight(13)\n        val xs_plus_14 = xs.takeRight(14)\n        val ys",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val xs_max = xs_len.max\n        val ys_max = ys_len.max\n        val xs_min = xs_len.min\n        val ys_min = ys_len.min\n        val xs_max_i = xs_max.getAsInt\n        val ys_max_i = ys_max.getAsInt\n        val xs_min_i = xs_min.getAsInt\n        val ys_min_i = ys_min.getAsInt\n        val xs_max_j = xs_max.getAsLong\n        val ys_max_j = ys_max.getAsLong\n        val xs_min_j = xs_min.getAsLong\n        val ys_min_j = ys_min.getAsLong\n        val xs_max_k = xs_max.getAsDouble\n        val ys_max_k = ys_max.getAsDouble\n        val xs_min_k = xs_min.getAsDouble\n        val ys_min_k = ys_min.getAsDouble\n        val xs_max_l = xs_max.getAsFloat\n        val ys_max_l = ys_max.getAsFloat\n        val xs_min_l = xs_min.getAsFloat\n        val ys_min_l = ys_min.getAsFloat\n        val xs_max_m = xs_max.getAsShort\n        val ys_max_m = ys_max.getAsShort\n        val xs_min_m = xs_min.getAsShort\n        val ys_min_m = ys_min.getAsShort\n        val xs_max_n = xs_max.getAsByte\n        val ys_max_n = ys_max.getAsByte\n        val xs_min_n = xs_min.",
    "        val xs = range(x, y)\n        val xs2 = xs.filter(_.isEven)\n        if (xs2.isEmpty) {\n            return -1l\n        } else {\n            return xs2.max\n        }",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val xs_max = xs_len.max\n        val ys_max = ys_len.max\n        val xs_min = xs_len.min\n        val ys_min = ys_len.min\n        val xs_diff = xs_max - xs_min\n        val ys_diff = ys_max - ys_min\n        val xs_diff_abs = xs_diff.abs\n        val ys_diff_abs = ys_diff.abs\n        val xs_diff_abs_div_ys_diff_abs = xs_diff_abs / ys_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_floor = xs_diff_abs_div_ys_diff_abs.floor\n        val ys_diff_abs_div_ys_diff_abs_ceil = ys_diff_abs_div_ys_diff_abs.ceil\n        val xs_diff_abs_div_ys_diff_abs_ceil = xs_diff_abs_div_ys_diff_abs_ceil.toLong\n        val xs_diff_abs_div_ys_diff_abs_floor_minus_1 = xs_diff_abs_div_ys_diff_abs_floor - 1l\n        val ys_diff_abs_div_ys_diff_abs_ceil_plus_1 = ys_diff_abs_div_ys_diff_abs_ceil + 1l\n        val xs_diff_abs_div_ys_diff_abs_floor_minus_1_plus_ys_diff_abs_ceil_plus_1 = xs_diff_abs_div_ys_diff_abs_floor_minus_1 + ys_diff_abs_div_ys_diff_abs_ceil_plus_1\n        val xs_diff_abs_div_ys_diff_abs_floor_minus_1_plus_ys_diff_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_ = xs.toSeq\n        val ys_ = ys.toSeq\n        val xs__ = xs_.toSeq\n        val ys__ = ys_.toSeq\n        val xs___ = xs__.toSeq\n        val ys___ = ys__.toSeq\n        val xs____ = xs___.toSeq\n        val ys____ = ys___.toSeq\n        val xs___0 = xs____.toSeq\n        val ys___0 = ys____.toSeq\n        val xs__0 = xs___0.toSeq\n        val ys__0 = ys___0.toSeq\n        val xs_0 = xs__0.toSeq\n        val ys_0 = ys__0.toSeq\n        val xs_00 = xs_0.toSeq\n        val ys_00 = ys_0.toSeq\n        val xs_000 = xs_00.toSeq\n        val ys_000 = ys_00.toSeq\n        val xs_0000 = xs_000.toSeq\n        val ys_0000 = ys_000.toSeq\n        val xs_00000 = xs_0000.toSeq\n        val ys_00000 = ys_0000.toSeq\n        val xs_000000 = xs_00000.toSeq\n        val ys_000000 = ys_00000.toSeq\n        val xs_0000000 = xs_000000.toSeq\n        val ys_0000000 = ys_000000.toSeq\n        val xs_00000000 = xs_0000000.toSeq\n        val ys_00000000 = ys_0000000.toSeq\n        val xs_000000000 = xs_00000000.toSeq\n        val ys_000000000 = ys_00000000.toSeq\n        val xs_0000000000 = xs_000000000.toSeq\n        val ys_0000000000 = ys_000000",
    "        if (x > y) {\n            return -1l\n        } else {\n            var i = x\n            var j = y\n            while (i <= j) {\n                if (i % 2 == 0 && j % 2 == 0) {\n                    return i\n                }\n                i = i + 1\n                j = j - 1\n            }\n            return -1l\n        }",
    "        val xs = range(x, y)\n        val xs$ = xs.toList\n        val ys = range(y, x)\n        val ys$ = ys.toList\n        val xs$_ = xs$.map(x$ -> x$ + 1)\n        val ys$_ = ys$.map(y$ -> y$ + 1)\n        val xs$__ = xs$_.zip(ys$_).map(tuple -> tuple._1 + tuple._2)\n        val xs$__$ = xs$__.filter(i -> i % 2 == 0)\n        val xs$__$_ = xs$__$.map(i -> i / 2)\n        val xs$__$__ = xs$__$_.zip(ys$_).map(tuple -> tuple._1 + tuple._2)\n        val xs$__$__$ = xs$__$__.filter(i -> i % 2 == 0)\n        val xs$__$__$_ = xs$__$__$.map(i -> i / 2)\n        val xs$__$__$__ = xs$__$__$_.zip(ys$_).map(tuple -> tuple._1 + tuple._2)\n        val xs$__$__$__$ = xs$__$__$__.filter(i -> i % 2 == 0)\n        val xs$__$__$__$_ = xs$__$__$__$.map(i -> i / 2)\n        val xs$__$__$__$__ = xs$__$__$__$_.zip(ys$_).map(tuple -> tuple._1 + tuple._2)\n        val xs$__$__$__$__$ = xs$__$__$__$__.filter(i -> i % 2 == 0)\n        val xs$__$__$__$__$_ = xs$__$__$__$__$.map(i -> i / 2)\n        val xs$__$__$__$__$__ = xs$__$__$__$__$_.zip(ys$_).map(tuple ->",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_plus_ys = xs.zip(ys).map(x_y -> x_y._1 + x_y._2).toSeq\n        val xs_plus_ys_plus_xs = xs_plus_ys.zip(xs).map(x_y_x -> x_y_x._1 + x_y_x._2).toSeq\n        val xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs.zip(ys).map(x_y_x_y -> x_y_x_y._1 + x_y_x_y._2).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys.zip(xs).map(x_y_x_y_x -> x_y_x_y_x._1 + x_y_x_y_x._2).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(xs).map(x_y_x_y_x_y -> x_y_x_y_x_y._1 + x_y_x_y_x_y._2).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys.zip(xs).map(x_y_x_y_x_y_x -> x_y_x_y_x_y_x._1 + x_y_x_y_x_y_x._2).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs_",
    "        if (x > y) {\n            return -1l\n        }\n        if (x == y) {\n            return x\n        }\n        if (x == 0) {\n            return 0l\n        }\n        if (x == 1) {\n            return 2l\n        }\n        if (x == 2) {\n            return 4l\n        }\n        if (x == 3) {\n            return 6l\n        }\n        if (x == 4) {\n            return 8l\n        }\n        if (x == 5) {\n            return 10l\n        }\n        if (x == 6) {\n            return 12l\n        }\n        if (x == 7) {\n            return 14l\n        }\n        if (x == 8) {\n            return 16l\n        }\n        if (x == 9) {\n            return 18l\n        }\n        if (x == 10) {\n            return 20l\n        }\n        if (x == 11) {\n            return 22l\n        }\n        if (x == 12) {\n            return 24l\n        }\n        if (x == 13) {\n            return 26l\n        }\n        if (x == 14) {\n            return 28l\n        }\n        if (x == 15) {\n            return 30l\n        }\n        if (x == 16) {\n            return 32l\n        }\n        if (x == 17) {\n            return 34l\n        }\n        if (x == 18) {\n            return 36l\n        }\n        if (x == 19) {\n            return 38l\n        }\n        if (x == 20) {\n            return 40l\n        }\n        if (x == 21) {\n            return 42l\n        }\n        if (x == 22) {\n            return 44l\n        }\n        if (x == 23) {\n            return 46l\n        }\n        if (x == 24) {\n            return 48l\n        }\n        if (x == 25) {\n            return 50l\n        }\n        if (x == 26) {\n            return 52l\n        }\n        if (x == 27) {\n            return 54l\n        }\n        if",
    "        val xs = range(x, y)\n        val xs$ = xs.toList\n        val ys = range(y, x)\n        val ys$ = ys.toList\n        val xs$_ = xs$.map(_.toLong)\n        val ys$_ = ys$.map(_.toLong)\n        val xs$_$ = xs$_.zip(ys$_)\n        val xs$_$_ = xs$_$.map(x$y -> x$y._1 + x$y._2)\n        val xs$_$_$ = xs$_$_.filter(_.isEven)\n        val xs$_$_$_ = xs$_$_$.map(_.toLong)\n        val xs$_$_$_$ = xs$_$_$_.max()\n        val xs$_$_$_$_ = xs$_$_$_$ == -1l ? -1l : xs$_$_$_$\n        return xs$_$_$_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val xs_max = xs_len.max\n        val ys_max = ys_len.max\n        val xs_min = xs_len.min\n        val ys_min = ys_len.min\n        val xs_max_i = xs_max.getAsInt\n        val ys_max_i = ys_max.getAsInt\n        val xs_min_i = xs_min.getAsInt\n        val ys_min_i = ys_min.getAsInt\n        val xs_max_j = xs_max.getAsLong\n        val ys_max_j = ys_max.getAsLong\n        val xs_min_j = xs_min.getAsLong\n        val ys_min_j = ys_min.getAsLong\n        val xs_max_k = xs_max.getAsDouble\n        val ys_max_k = ys_max.getAsDouble\n        val xs_min_k = xs_min.getAsDouble\n        val ys_min_k = ys_min.getAsDouble\n        val xs_max_l = xs_max.getAsFloat\n        val ys_max_l = ys_max.getAsFloat\n        val xs_min_l = xs_min.getAsFloat\n        val ys_min_l = ys_min.getAsFloat\n        val xs_max_m = xs_max.getAsShort\n        val ys_max_m = ys_max.getAsShort\n        val xs_min_m = xs_min.getAsShort\n        val ys_min_m = ys_min.getAsShort\n        val xs_max_n = xs_max.getAsByte\n        val ys_max_n = ys_max.getAsByte\n        val xs_min_n = xs_min.",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        if (xs_len == 0) {\n            return -1l\n        } else if (ys_len == 0) {\n            return xs_len\n        } else if (xs_len == 1 && ys_len == 1) {\n            return xs_len\n        } else if (xs_len > ys_len) {\n            return -1l\n        } else if (xs_len < ys_len) {\n            return xs_len\n        } else {\n            val xs_iter = xs.iterator\n            val ys_iter = ys.iterator\n            var x = xs_iter.next\n            var y = ys_iter.next\n            var x_len = xs_len\n            var y_len = ys_len\n            var x_iter = xs_iter\n            var y_iter = ys_iter\n            var x_prev = x\n            var y_prev = y\n            var x_prev_len = x_len\n            var y_prev_len = y_len\n            var x_prev_iter = x_iter\n            var y_prev_iter = y_iter\n            var x_prev_prev = x_prev\n            var y_prev_prev = y_prev\n            var x_prev_prev_len = x_prev_len\n            var y_prev_prev_len = y_prev_len\n            var x_prev_prev_iter = x_prev_iter\n            var y_prev_prev_iter = y_prev_iter\n            var x_prev_prev_prev = x_prev_prev\n            var y_prev_prev_prev = y_prev_prev\n            var x_prev_prev_prev_len = x_prev_prev_len\n            var y_prev_prev_prev_len = y_prev_prev_len\n            var x_prev_prev_prev_iter = x_prev_prev_iter\n            var y_prev_prev_prev_iter = y_prev_prev_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_ = xs.toSeq\n        val ys_ = ys.toSeq\n        val xs__ = xs_.toSeq\n        val ys__ = ys_.toSeq\n        val xs___ = xs__.toSeq\n        val ys___ = ys__.toSeq\n        val xs____ = xs___.toSeq\n        val ys____ = ys___.toSeq\n        val xs___0 = xs____.toSeq\n        val ys___0 = ys____.toSeq\n        val xs__0 = xs___0.toSeq\n        val ys__0 = ys___0.toSeq\n        val xs_0 = xs__0.toSeq\n        val ys_0 = ys__0.toSeq\n        val xs_00 = xs_0.toSeq\n        val ys_00 = ys_0.toSeq\n        val xs_000 = xs_00.toSeq\n        val ys_000 = ys_00.toSeq\n        val xs_0000 = xs_000.toSeq\n        val ys_0000 = ys_000.toSeq\n        val xs_00000 = xs_0000.toSeq\n        val ys_00000 = ys_0000.toSeq\n        val xs_000000 = xs_00000.toSeq\n        val ys_000000 = ys_00000.toSeq\n        val xs_0000000 = xs_000000.toSeq\n        val ys_0000000 = ys_000000.toSeq\n        val xs_00000000 = xs_0000000.toSeq\n        val ys_00000000 = ys_0000000.toSeq\n        val xs_000000000 = xs_00000000.toSeq\n        val ys_000000000 = ys_00000000.toSeq\n        val xs_0000000000 = xs_000000000.toSeq\n        val ys_0000000000 = ys_000000",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_min = ys.min\n        val xs_min = xs.min\n        val ys_max = ys.max\n        val xs_max_inclusive = xs_max.isInclusive\n        val ys_min_inclusive = ys_min.isInclusive\n        val xs_min_inclusive = xs_min.isInclusive\n        val ys_max_inclusive = ys_max.isInclusive\n        val xs_max_lt_ys_min = xs_max < ys_min\n        val ys_min_lt_xs_max = ys_min < xs_max\n        val xs_min_lt_ys_max = xs_min < ys_max\n        val xs_max_lt_ys_min_inclusive = xs_max_lt_ys_min && xs_max_inclusive\n        val ys_min_lt_xs_max_inclusive = ys_min_lt_xs_max && ys_min_inclusive\n        val xs_min_lt_ys_max_inclusive = xs_min_lt_ys_max && xs_min_inclusive\n        val xs_max_lt_ys_min_inclusive = xs_max_lt_ys_min && xs_max_inclusive\n        val ys_min_lt_xs_max_inclusive = ys_min_lt_xs_max && ys_min_inclusive\n        val xs_min_lt_ys_max_inclusive = xs_min_lt_ys_max && xs_min_inclusive\n        val xs_max_lt_ys_min_inclusive = xs_max_lt_ys_min && xs_max_inclusive\n        val ys_min_lt_xs_max_inclusive = ys_min_lt_xs_max && ys_min_inclusive\n        val xs_min_lt_ys_max_inclusive = x",
    "        if (x > y) {\n            return -1l\n        } else {\n            var i = x\n            var j = y\n            while (i <= j) {\n                if (i % 2 == 0 && j % 2 == 0) {\n                    return i\n                }\n                i = i + 1\n                j = j - 1\n            }\n            return -1l\n        }",
    "        if (x > y) {\n            throw new IllegalArgumentException(\"x must be less than or equal to y\")\n        }\n        if (x == y) {\n            return x\n        }\n        if (x == 0) {\n            return -1\n        }\n        if (x == 1) {\n            return 2\n        }\n        if (x == 2) {\n            return 4\n        }\n        if (x == 3) {\n            return 6\n        }\n        if (x == 4) {\n            return 8\n        }\n        if (x == 5) {\n            return 10\n        }\n        if (x == 6) {\n            return 12\n        }\n        if (x == 7) {\n            return 14\n        }\n        if (x == 8) {\n            return 16\n        }\n        if (x == 9) {\n            return 18\n        }\n        if (x == 10) {\n            return 20\n        }\n        if (x == 11) {\n            return 22\n        }\n        if (x == 12) {\n            return 24\n        }\n        if (x == 13) {\n            return 26\n        }\n        if (x == 14) {\n            return 28\n        }\n        if (x == 15) {\n            return 30\n        }\n        if (x == 16) {\n            return 32\n        }\n        if (x == 17) {\n            return 34\n        }\n        if (x == 18) {\n            return 36\n        }\n        if (x == 19) {\n            return 38\n        }\n        if (x == 20) {\n            return 40\n        }\n        if (x == 21) {\n            return 42\n        }\n        if (x == 22) {\n            return 44\n        }\n        if (x == 23) {\n            return 46\n        }\n        if (x == 24) {\n            return 48\n        }\n        if (x == 25) {\n            return 50\n        }\n        if (x == 26) {\n            return 52\n        }\n        if (x == 27) {\n            return 54\n        }\n        if (x == 28) {\n            return 56\n        }\n",
    "        val xs = range(x, y)\n        val ys = range(y, x)\n        val xs_plus_ys = xs + ys\n        val xs_plus_ys_plus_1 = xs_plus_ys + 1\n        val xs_plus_ys_plus_1_div_2 = xs_plus_ys_plus_1 / 2\n        val xs_plus_ys_plus_1_div_2_minus_1 = xs_plus_ys_plus_1_div_2 - 1\n        val xs_plus_ys_plus_1_div_2_minus_1_div_2 = xs_plus_ys_plus_1_div_2_minus_1 / 2\n        val xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1 = xs_plus_ys_plus_1_div_2_minus_1_div_2 - 1\n        val xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1_div_2 = xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1 / 2\n        val xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1_div_2_minus_1 = xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1_div_2 - 1\n        val xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1_div_2_minus_1_div_2 = xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1_div_2_minus_1 / 2\n        val xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1_div_2_minus_1_div_2_minus_1 = xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1_div",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_plus_ys = xs + ys\n        val xs_plus_ys_plus_1 = xs_plus_ys + 1l\n        val xs_plus_ys_plus_1_div_2 = xs_plus_ys_plus_1 / 2l\n        val xs_plus_ys_plus_1_div_2_minus_1 = xs_plus_ys_plus_1_div_2 - 1l\n        val xs_plus_ys_plus_1_div_2_minus_1_div_2 = xs_plus_ys_plus_1_div_2_minus_1 / 2l\n        val xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1 = xs_plus_ys_plus_1_div_2_minus_1_div_2 - 1l\n        val xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1_div_2 = xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1 / 2l\n        val xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1_div_2_minus_1 = xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1_div_2 - 1l\n        val xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1_div_2_minus_1_div_2 = xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1_div_2_minus_1 / 2l\n        val xs_plus_ys_plus_1_div_2_minus_1_div_2_minus_1_div_2_minus_1_div_2_minus_1 = xs_plus_ys_plus_1_div_2_minus_1_div_2",
    "        if (x > y) {\n            return -1l\n        } else {\n            var i = x\n            var j = y\n            var k = 0l\n            while (i <= j) {\n                k = i * (i + 1) / 2l + j * (j + 1) / 2l\n                if (k > y) {\n                    j -= 1l\n                } else if (k < x) {\n                    i += 1l\n                } else {\n                    return k\n                }\n            }\n            return -1l\n        }",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_plus_ys = xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs = xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs$ = xs.toSeq\n        val ys$ = ys.toSeq\n        val xs$_ = xs$.toSeq\n        val ys$_ = ys$.toSeq\n        val xs$__ = xs$_.toSeq\n        val ys$__ = ys$_.toSeq\n        val xs$___ = xs$__.toSeq\n        val ys$___ = ys$__.toSeq\n        val xs$____ = xs$___.toSeq\n        val ys$____ = ys$___.toSeq\n        val xs$_____ = xs$____.toSeq\n        val ys$_____ = ys$____.toSeq\n        val xs$______ = xs$_____.toSeq\n        val ys$______ = ys$_____.toSeq\n        val xs$_______ = xs$______.toSeq\n        val ys$_______ = ys$______.toSeq\n        val xs$________ = xs$_______.toSeq\n        val ys$________ = ys$_______.toSeq\n        val xs$_________ = xs$________.toSeq\n        val ys$_________ = ys$________.toSeq\n        val xs$__________ = xs$_________.toSeq\n        val ys$__________ = ys$_________.toSeq\n        val xs$___________ = xs$__________.toSeq\n        val ys$___________ = ys$__________.toSeq\n        val xs$____________ = xs$___________.toSeq\n        val ys$____________ = ys$___________.toSeq\n        val xs$_____________ = xs$____________.toSeq\n        val ys$_____________ = ys$____________.toSeq\n        val xs$______________ = xs$_____________.toSeq\n        val ys$______________ = ys$_____________.toSeq\n",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val xs_max = xs_len.max\n        val ys_max = ys_len.max\n        val xs_min = xs_len.min\n        val ys_min = ys_len.min\n        val xs_max_idx = xs_max.toInt\n        val ys_max_idx = ys_max.toInt\n        val xs_min_idx = xs_min.toInt\n        val ys_min_idx = ys_min.toInt\n        val xs_max_val = xs_max.toLong\n        val ys_max_val = ys_max.toLong\n        val xs_min_val = xs_min.toLong\n        val ys_min_val = ys_min.toLong\n        val xs_max_idx_val = xs_max_idx.toLong\n        val ys_max_idx_val = ys_max_idx.toLong\n        val xs_min_idx_val = xs_min_idx.toLong\n        val ys_min_idx_val = ys_min_idx.toLong\n        val xs_max_val_val = xs_max_val.toLong\n        val ys_max_val_val = ys_max_val.toLong\n        val xs_min_val_val = xs_min_val.toLong\n        val ys_min_val_val = ys_min_val.toLong\n        val xs_max_idx_val_val = xs_max_idx_val.toLong\n        val ys_max_idx_val_val = ys_max_idx_val.toLong\n        val xs_min_idx_val_val = xs_min_idx_val.toLong\n        val ys_min_idx_val_val",
    "        if (x > y) {\n            return -1l\n        } else {\n            var i = x\n            var j = y\n            while (i <= j) {\n                if (i % 2 == 0 && j % 2 == 0) {\n                    return i\n                }\n                i = i + 1\n                j = j - 1\n            }\n            return -1l\n        }",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_min = ys.min\n        val xs_max_plus_1 = xs_max + 1\n        val ys_min_minus_1 = ys_min - 1\n        val xs_max_plus_1_minus_ys_min_minus_1 = xs_max_plus_1 - ys_min_minus_1\n        val xs_max_plus_1_minus_ys_min_minus_1_max = xs_max_plus_1_minus_ys_min_minus_1.max\n        val xs_max_plus_1_minus_ys_min_minus_1_max_plus_1 = xs_max_plus_1_minus_ys_min_minus_1_max + 1\n        val xs_max_plus_1_minus_ys_min_minus_1_max_plus_1_minus_ys_min_minus_1 = xs_max_plus_1_minus_ys_min_minus_1_max_plus_1 - ys_min_minus_1\n        val xs_max_plus_1_minus_ys_min_minus_1_max_plus_1_minus_ys_min_minus_1_max = xs_max_plus_1_minus_ys_min_minus_1_max_plus_1_minus_ys_min_minus_1.max\n        val xs_max_plus_1_minus_ys_min_minus_1_max_plus_1_minus_ys_min_minus_1_max_plus_1 = xs_max_plus_1_minus_ys_min_minus_1_max_plus_1_minus_ys_min_minus_1_max + 1\n        val xs_max_plus_1_minus_ys_min_minus_1_max_plus_1_minus_ys_min_minus_1_max_plus_1_minus_ys_min_minus_1 = xs_max_plus_1_minus_ys_min_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_min = ys.min\n        val xs_max_inclusive = xs_max.toSeq.toList\n        val ys_min_inclusive = ys_min.toSeq.toList\n        val xs_max_inclusive_max = xs_max_inclusive.max\n        val ys_min_inclusive_min = ys_min_inclusive.min\n        val xs_max_inclusive_max_inclusive = xs_max_inclusive_max.toSeq.toList\n        val ys_min_inclusive_min_inclusive = ys_min_inclusive_min.toSeq.toList\n        val xs_max_inclusive_max_inclusive_max = xs_max_inclusive_max_inclusive.max\n        val ys_min_inclusive_min_inclusive_min = ys_min_inclusive_min_inclusive.min\n        val xs_max_inclusive_max_inclusive_max_inclusive = xs_max_inclusive_max_inclusive_max.toSeq.toList\n        val ys_min_inclusive_min_inclusive_min_inclusive = ys_min_inclusive_min_inclusive_min.toSeq.toList\n        val xs_max_inclusive_max_inclusive_max_inclusive_max = xs_max_inclusive_max_inclusive_max_inclusive.max\n        val ys_min_inclusive_min_inclusive_min_inclusive_min = ys_min_inclusive_min_inclusive_min_inclusive.min\n        val xs_max_inclusive_max_inclusive_max_inclusive_max_inclusive = xs_max_inclusive_max_inclusive_max_inclusive_max.toSeq.toList\n        val ys_min_inclusive_min_inclusive_min_inclusive_min_inclusive = ys_min_",
    "        val xs = x.toInt\n        val ys = y.toInt\n        val xs_max = xs.max\n        val ys_max = ys.max\n        val xs_min = xs.min\n        val ys_min = ys.min\n        val xs_diff = xs_max - xs_min\n        val ys_diff = ys_max - ys_min\n        val xs_diff_abs = xs_diff.abs\n        val ys_diff_abs = ys_diff.abs\n        val xs_diff_abs_div_ys_diff_abs = xs_diff_abs / ys_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_floor = xs_diff_abs_div_ys_diff_abs.floor\n        val xs_diff_abs_div_ys_diff_abs_ceil = xs_diff_abs_div_ys_diff_abs.ceil\n        val xs_diff_abs_div_ys_diff_abs_max = xs_diff_abs_div_ys_diff_abs.max\n        val xs_diff_abs_div_ys_diff_abs_min = xs_diff_abs_div_ys_diff_abs.min\n        val xs_diff_abs_div_ys_diff_abs_abs = xs_diff_abs_div_ys_diff_abs.abs\n        val xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs = xs_diff_abs_div_ys_diff_abs / ys_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs_floor = xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs.floor\n        val xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs_ceil = xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs.ceil\n        val xs_diff_abs_div_ys",
    "        val xs = range(x, y)\n        val xs2 = xs.filter(x => x % 2 == 0)\n        val xs3 = xs2.filter(x => x % 2 == 0)\n        val xs4 = xs3.filter(x => x % 2 == 0)\n        val xs5 = xs4.filter(x => x % 2 == 0)\n        val xs6 = xs5.filter(x => x % 2 == 0)\n        val xs7 = xs6.filter(x => x % 2 == 0)\n        val xs8 = xs7.filter(x => x % 2 == 0)\n        val xs9 = xs8.filter(x => x % 2 == 0)\n        val xs10 = xs9.filter(x => x % 2 == 0)\n        val xs11 = xs10.filter(x => x % 2 == 0)\n        val xs12 = xs11.filter(x => x % 2 == 0)\n        val xs13 = xs12.filter(x => x % 2 == 0)\n        val xs14 = xs13.filter(x => x % 2 == 0)\n        val xs15 = xs14.filter(x => x % 2 == 0)\n        val xs16 = xs15.filter(x => x % 2 == 0)\n        val xs17 = xs16.filter(x => x % 2 == 0)\n        val xs18 = xs17.filter(x => x % 2 == 0)\n        val xs19 = xs18.filter(x => x % 2 == 0)\n        val xs20 = xs19.filter(x => x % 2 == 0)\n        val xs21 = xs20.filter(x => x % 2 == 0)\n        val xs22 = xs21.filter(x => x % 2 == 0)\n        val xs23 = xs22.filter(x => x % 2 == 0)\n        val xs24 = xs23.filter(x => x % 2 == 0)\n        val xs25 = xs24.filter(x => x % 2 ==",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs$ = xs.toIterator\n        val ys$ = ys.toIterator\n        var x$ = xs$\n        var y$ = ys$\n        var x$1 = x$\n        var y$1 = y$\n        var x$2 = x$1\n        var y$2 = y$1\n        var x$3 = x$2\n        var y$3 = y$2\n        var x$4 = x$3\n        var y$4 = y$3\n        var x$5 = x$4\n        var y$5 = y$4\n        var x$6 = x$5\n        var y$6 = y$5\n        var x$7 = x$6\n        var y$7 = y$6\n        var x$8 = x$7\n        var y$8 = y$7\n        var x$9 = x$8\n        var y$9 = y$8\n        var x$10 = x$9\n        var y$10 = y$9\n        var x$11 = x$10\n        var y$11 = y$10\n        var x$12 = x$11\n        var y$12 = y$11\n        var x$13 = x$12\n        var y$13 = y$12\n        var x$14 = x$13\n        var y$14 = y$13\n        var x$15 = x$14\n        var y$15 = y$14\n        var x$16 = x$15\n        var y$16 = y$15\n        var x$17 = x$16\n        var y$17 = y$16\n        var x$18 = x$17\n        var y$18 = y$17\n        var x$19 = x$18\n        var y$19 = y$18\n        var x$20 = x$19\n        var y$20 = y$19\n        var x$21 = x$20\n        var y$21 = y$20\n        var x$22 = x$21\n        var y$22 = y$21\n        var x$23 = x$22\n",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_plus_ys = xs.zip(ys).map(x_y -> x_y._1 + x_y._2).toSeq\n        val xs_plus_ys_plus_xs = xs_plus_ys.zip(xs).map(x_y_x -> x_y_x._1 + x_y_x._2 + x_y_x._1).toSeq\n        val xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs.zip(ys).map(x_y_x_y -> x_y_x_y._1 + x_y_x_y._2 + x_y_x_y._1 + x_y_x_y._2).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys.zip(xs).map(x_y_x_y_x -> x_y_x_y_x._1 + x_y_x_y_x._2 + x_y_x_y_x._1 + x_y_x_y_x._2 + x_y_x_y_x._1).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(xs).map(x_y_x_y_x_y -> x_y_x_y_x_y._1 + x_y_x_y_x_y._2 + x_y_x_y_x_y._1 + x_y_x_y_x_y._2 + x_y_x_y_x_y._1 + x_y_x_y_x_y._2).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val xs_max = xs_len.max\n        val ys_max = ys_len.max\n        val xs_min = xs_len.min\n        val ys_min = ys_len.min\n        val xs_diff = xs_max - xs_min\n        val ys_diff = ys_max - ys_min\n        val xs_diff_abs = xs_diff.abs\n        val ys_diff_abs = ys_diff.abs\n        val xs_diff_abs_max = xs_diff_abs.max\n        val ys_diff_abs_max = ys_diff_abs.max\n        val xs_diff_abs_min = xs_diff_abs.min\n        val ys_diff_abs_min = ys_diff_abs.min\n        val xs_diff_abs_diff = xs_diff_abs_max - xs_diff_abs_min\n        val ys_diff_abs_diff = ys_diff_abs_max - ys_diff_abs_min\n        val xs_diff_abs_diff_abs = xs_diff_abs_diff.abs\n        val ys_diff_abs_diff_abs = ys_diff_abs_diff.abs\n        val xs_diff_abs_diff_abs_max = xs_diff_abs_diff_abs.max\n        val ys_diff_abs_diff_abs_max = ys_diff_abs_diff_abs.max\n        val xs_diff_abs_diff_abs_min = xs_diff_abs_diff_abs.min\n        val ys_diff_abs_diff_abs_min = ys_diff_abs_diff_abs.min\n        val xs_diff_abs_diff_abs_diff = xs_diff_abs_diff_abs_max - xs_diff_abs_diff_abs_min\n        val ys_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_y = xs.zip(ys)\n        val xs_y_max = xs_y.max\n        val xs_y_max_val = xs_y_max._1\n        val xs_y_max_val_y = xs_y_max_val.y\n        val xs_y_max_val_y_max = xs_y_max_val_y.max\n        val xs_y_max_val_y_max_val = xs_y_max_val_y_max.y\n        val xs_y_max_val_y_max_val_x = xs_y_max_val_y_max_val.x\n        val xs_y_max_val_y_max_val_x_max = xs_y_max_val_y_max_val_x.max\n        val xs_y_max_val_y_max_val_x_max_y = xs_y_max_val_y_max_val_x_max.y\n        val xs_y_max_val_y_max_val_x_max_y_max = xs_y_max_val_y_max_val_x_max_y.max\n        val xs_y_max_val_y_max_val_x_max_y_max_x = xs_y_max_val_y_max_val_x_max_y_max_x.max\n        val xs_y_max_val_y_max_val_x_max_y_max_x_max = xs_y_max_val_y_max_val_x_max_y_max_x_max.max\n        val xs_y_max_val_y_max_val_x_max_y_max_x_max_y = xs_y_max_val_y_max_val_x_max_y_max_x_max_y.max\n        val xs_y_max_val_y_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_plus_ys = xs + ys\n        val xs_plus_ys_plus_1 = xs_plus_ys + 1l\n        val xs_plus_ys_plus_1_minus_xs = xs_plus_ys_plus_1 - xs\n        val xs_plus_ys_plus_1_minus_ys = xs_plus_ys_plus_1 - ys\n        val xs_plus_ys_plus_1_minus_xs_minus_ys = xs_plus_ys_plus_1 - xs_plus_ys\n        val xs_plus_ys_plus_1_minus_ys_minus_xs = xs_plus_ys_plus_1 - ys_plus_ys\n        val xs_plus_ys_plus_1_minus_xs_minus_ys_minus_1 = xs_plus_ys_plus_1 - xs_plus_ys_minus_1\n        val xs_plus_ys_plus_1_minus_ys_minus_xs_minus_1 = xs_plus_ys_plus_1 - ys_plus_ys_minus_1\n        val xs_plus_ys_plus_1_minus_xs_minus_ys_minus_1_minus_1 = xs_plus_ys_plus_1 - xs_plus_ys_minus_1_minus_1\n        val xs_plus_ys_plus_1_minus_ys_minus_xs_minus_1_minus_1 = xs_plus_ys_plus_1 - ys_plus_ys_minus_1_minus_1\n        val xs_plus_ys_plus_1_minus_xs_minus_ys_minus_1_minus_1_minus_1 = xs_plus_ys_plus_1 - xs_plus_ys_minus_1_minus_1_minus_1\n        val xs_plus_ys_plus_1_minus_ys_minus_xs_minus_1_minus_1_minus_1_minus_1 = xs_plus_ys_plus",
    "        if (x > y) {\n            return -1l\n        }\n        if (x == y) {\n            return x\n        }\n        if (x == 0) {\n            return 0l\n        }\n        if (x == 1) {\n            return 2l\n        }\n        if (x == 2) {\n            return 4l\n        }\n        if (x % 2 == 0) {\n            return 2l * chooseNum(x / 2, y)\n        }\n        return 2l * chooseNum(x / 2, y) + chooseNum(x / 2, y - 1)",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_max = ys.max\n        val xs_min = xs.min\n        val ys_min = ys.min\n        val xs_max_inclusive = xs_max.toSeq.toList\n        val ys_max_inclusive = ys_max.toSeq.toList\n        val xs_min_inclusive = xs_min.toSeq.toList\n        val ys_min_inclusive = ys_min.toSeq.toList\n        val xs_max_inclusive_max = xs_max_inclusive.max\n        val ys_max_inclusive_max = ys_max_inclusive.max\n        val xs_min_inclusive_min = xs_min_inclusive.min\n        val ys_min_inclusive_min = ys_min_inclusive.min\n        val xs_max_inclusive_max_inclusive = xs_max_inclusive_max.toSeq.toList\n        val ys_max_inclusive_max_inclusive = ys_max_inclusive_max.toSeq.toList\n        val xs_min_inclusive_min_inclusive = xs_min_inclusive_min.toSeq.toList\n        val ys_min_inclusive_min_inclusive = ys_min_inclusive_min.toSeq.toList\n        val xs_max_inclusive_max_inclusive_max = xs_max_inclusive_max_inclusive.max\n        val ys_max_inclusive_max_inclusive_max = ys_max_inclusive_max_inclusive.max\n        val xs_min_inclusive_min_inclusive_min = xs_min_inclusive_min_inclusive.min\n        val ys_min_inclusive_min_inclusive_min = ys_min_inclusive_min_inclusive.min\n        val xs_max_inclusive_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val x_min = xs_len.min\n        val y_min = ys_len.min\n        val x_max = xs_len.max\n        val y_max = ys_len.max\n        val x_diff = x_max - x_min\n        val y_diff = y_max - y_min\n        val x_diff_abs = x_diff.abs\n        val y_diff_abs = y_diff.abs\n        val x_diff_abs_div_y_diff_abs = x_diff_abs / y_diff_abs\n        val x_diff_abs_div_y_diff_abs_floor = x_diff_abs_div_y_diff_abs.floor\n        val x_diff_abs_div_y_diff_abs_ceil = x_diff_abs_div_y_diff_abs.ceil\n        val x_diff_abs_div_y_diff_abs_round = x_diff_abs_div_y_diff_abs.round\n        val x_diff_abs_div_y_diff_abs_to_i = x_diff_abs_div_y_diff_abs.to_i\n        val x_diff_abs_div_y_diff_abs_to_l = x_diff_abs_div_y_diff_abs.to_l\n        val x_diff_abs_div_y_diff_abs_to_f = x_diff_abs_div_y_diff_abs.to_f\n        val x_diff_abs_div_y_diff_abs_to_d = x_diff_abs_div_y_diff_abs.to_d\n        val x_diff_abs_div_y_diff_abs_to_b = x_diff_abs_div_y_diff_abs.to_b\n        val x_diff_abs_div_y_diff_abs_to_s = x_diff_abs_div_y_diff_abs.to_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val xs_max = xs_len.max\n        val ys_max = ys_len.max\n        val xs_min = xs_len.min\n        val ys_min = ys_len.min\n        val xs_max_i = xs_max.getAsInt\n        val ys_max_i = ys_max.getAsInt\n        val xs_min_i = xs_min.getAsInt\n        val ys_min_i = ys_min.getAsInt\n        val xs_max_j = xs_max.getAsLong\n        val ys_max_j = ys_max.getAsLong\n        val xs_min_j = xs_min.getAsLong\n        val ys_min_j = ys_min.getAsLong\n        val xs_max_k = xs_max.getAsDouble\n        val ys_max_k = ys_max.getAsDouble\n        val xs_min_k = xs_min.getAsDouble\n        val ys_min_k = ys_min.getAsDouble\n        val xs_max_l = xs_max.getAsFloat\n        val ys_max_l = ys_max.getAsFloat\n        val xs_min_l = xs_min.getAsFloat\n        val ys_min_l = ys_min.getAsFloat\n        val xs_max_m = xs_max.getAsShort\n        val ys_max_m = ys_max.getAsShort\n        val xs_min_m = xs_min.getAsShort\n        val ys_min_m = ys_min.getAsShort\n        val xs_max_n = xs_max.getAsByte\n        val ys_max_n = ys_max.getAsByte\n        val xs_min_n = xs_min.",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val xs_max = xs_len.max\n        val ys_max = ys_len.max\n        val xs_min = xs_len.min\n        val ys_min = ys_len.min\n        val xs_diff = xs_max - xs_min\n        val ys_diff = ys_max - ys_min\n        val xs_diff_abs = xs_diff.abs\n        val ys_diff_abs = ys_diff.abs\n        val xs_diff_abs_div_ys_diff_abs = xs_diff_abs / ys_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_floor = xs_diff_abs_div_ys_diff_abs.floor\n        val xs_diff_abs_div_ys_diff_abs_ceil = xs_diff_abs_div_ys_diff_abs.ceiling\n        val xs_diff_abs_div_ys_diff_abs_max = xs_diff_abs_div_ys_diff_abs.max\n        val xs_diff_abs_div_ys_diff_abs_min = xs_diff_abs_div_ys_diff_abs.min\n        val xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs = xs_diff_abs_div_ys_diff_abs / ys_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs_floor = xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs.floor\n        val xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs_ceil = xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs.ceiling\n        val xs_diff_abs_div_ys_diff",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_max = ys.max\n        val xs_min = xs.min\n        val ys_min = ys.min\n        val xs_diff = xs_max - xs_min\n        val ys_diff = ys_max - ys_min\n        val xs_diff_abs = xs_diff.abs\n        val ys_diff_abs = ys_diff.abs\n        val xs_diff_abs_div_ys_diff_abs = xs_diff_abs / ys_diff_abs\n        val ys_diff_abs_div_xs_diff_abs = ys_diff_abs / xs_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs = xs_diff_abs_div_ys_diff_abs / ys_diff_abs_div_ys_diff_abs\n        val ys_diff_abs_div_xs_diff_abs_div_xs_diff_abs = ys_diff_abs_div_xs_diff_abs / xs_diff_abs_div_xs_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs_div_ys_diff_abs = xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs / ys_diff_abs_div_ys_diff_abs_div_ys_diff_abs\n        val ys_diff_abs_div_xs_diff_abs_div_xs_diff_abs_div_xs_diff_abs = ys_diff_abs_div_xs_diff_abs_div_xs_diff_abs / xs_diff_abs_div_xs_diff_abs_div_xs_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs_div_ys_diff_abs_div_ys_diff_abs = xs_diff_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_y = xs.zip(ys)\n        val xs_y_zipped = xs_y.zip(xs_y)\n        val xs_y_zipped_to_list = xs_y_zipped.toList\n        val xs_y_zipped_to_list_to_list = xs_y_zipped_to_list.toList\n        val xs_y_zipped_to_list_to_list_to_list = xs_y_zipped_to_list_to_list.toList\n        val xs_y_zipped_to_list_to_list_to_list_to_list = xs_y_zipped_to_list_to_list_to_list.toList\n        val xs_y_zipped_to_list_to_list_to_list_to_list_to_list = xs_y_zipped_to_list_to_list_to_list_to_list.toList\n        val xs_y_zipped_to_list_to_list_to_list_to_list_to_list_to_list = xs_y_zipped_to_list_to_list_to_list_to_list_to_list.toList\n        val xs_y_zipped_to_list_to_list_to_list_to_list_to_list_to_list_to_list = xs_y_zipped_to_list_to_list_to_list_to_list_to_list_to_list.toList\n        val xs_y_zipped_to_list_to_list_to_list_to_list_to_list_to_list_to_list_to_list = xs_y_zipped_to_list_to_list_to_list_to_list_to_list_to_list_to_list.toList\n        val xs_y_zipped_to_list_to_list_to_list_to_list_to_list",
    "        if (x > y) {\n            throw new IllegalArgumentException(\"x must be <= y\")\n        }\n        if (x == y) {\n            return x\n        }\n        var i = x\n        while (i <= y) {\n            if (i % 2 == 0) {\n                return i\n            }\n            i = i + 1\n        }\n        return -1",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val xs_max = xs_len.max\n        val ys_max = ys_len.max\n        val xs_min = xs_len.min\n        val ys_min = ys_len.min\n        val xs_diff = xs_max - xs_min\n        val ys_diff = ys_max - ys_min\n        val xs_diff_abs = xs_diff.abs\n        val ys_diff_abs = ys_diff.abs\n        val xs_diff_abs_max = xs_diff_abs.max\n        val ys_diff_abs_max = ys_diff_abs.max\n        val xs_diff_abs_min = xs_diff_abs.min\n        val ys_diff_abs_min = ys_diff_abs.min\n        val xs_diff_abs_diff = xs_diff_abs_max - xs_diff_abs_min\n        val ys_diff_abs_diff = ys_diff_abs_max - ys_diff_abs_min\n        val xs_diff_abs_diff_abs = xs_diff_abs_diff.abs\n        val ys_diff_abs_diff_abs = ys_diff_abs_diff.abs\n        val xs_diff_abs_diff_abs_max = xs_diff_abs_diff_abs.max\n        val ys_diff_abs_diff_abs_max = ys_diff_abs_diff_abs.max\n        val xs_diff_abs_diff_abs_min = xs_diff_abs_diff_abs.min\n        val ys_diff_abs_diff_abs_min = ys_diff_abs_diff_abs.min\n        val xs_diff_abs_diff_abs_diff = xs_diff_abs_diff_abs_max - xs_diff_abs_diff_abs_min\n        val ys_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_y = xs.zip(ys)\n        val xs_y_to_long = xs_y.map(x_y -> x_y._1.toLong + x_y._2.toLong)\n        val xs_y_to_long_to_max = xs_y_to_long.map(x_y_l -> {\n            val x_y_l_max = x_y_l.max\n            if (x_y_l_max.isDefined && x_y_l_max.get() > 0) {\n                return x_y_l_max\n            } else {\n                return -1l\n            }\n        })\n        val xs_y_to_long_to_max_to_seq = xs_y_to_long_to_max.toSeq\n        val xs_y_to_long_to_max_to_seq_to_long = xs_y_to_long_to_max_to_seq.map(x_y_l_m -> x_y_l_m.max)\n        val xs_y_to_long_to_max_to_seq_to_long_to_max = xs_y_to_long_to_max_to_seq_to_long.map(x_y_l_m_m -> {\n            val x_y_l_m_m_max = x_y_l_m_m.max\n            if (x_y_l_m_m_max.isDefined && x_y_l_m_m_max.get() > 0) {\n                return x_y_l_m_m_max\n            } else {\n                return -1l\n            }\n        })\n        val xs_y_to_long_to_max_to_seq_to_long_to_max_to_seq = xs_y_to_long_to_max_to_seq_to_long_to_max.toSeq\n        val xs_y_to_long_",
    "        if (x > y) {\n            throw new IllegalArgumentException(\"x must be less than or equal to y\")\n        }\n        if (x == y) {\n            return x\n        }\n        if (x == 0) {\n            return -1\n        }\n        if (x == 1) {\n            return 2\n        }\n        if (x == 2) {\n            return 4\n        }\n        if (x % 2 == 0) {\n            return 2 * x\n        }\n        return 2 * x - 1",
    "        val xs = x.toInt\n        val ys = y.toInt\n        val xs_plus_1 = xs + 1\n        val ys_plus_1 = ys + 1\n        val xs_plus_1_div_ys = xs_plus_1 / ys\n        val xs_plus_1_mod_ys = xs_plus_1 % ys\n        val xs_plus_1_div_ys_plus_1 = xs_plus_1_div_ys + 1\n        val xs_plus_1_mod_ys_plus_1 = xs_plus_1_mod_ys + 1\n        val xs_plus_1_div_ys_plus_1_mod_ys = xs_plus_1_div_ys_plus_1 % ys\n        val xs_plus_1_mod_ys_plus_1_div_ys = xs_plus_1_mod_ys_plus_1 / ys\n        val xs_plus_1_div_ys_plus_1_mod_ys_plus_1 = xs_plus_1_div_ys_plus_1_mod_ys + 1\n        val xs_plus_1_mod_ys_plus_1_div_ys_plus_1_mod_ys = xs_plus_1_mod_ys_plus_1_div_ys % ys\n        val xs_plus_1_div_ys_plus_1_mod_ys_plus_1_div_ys_plus_1 = xs_plus_1_div_ys_plus_1_mod_ys_plus_1 / ys\n        val xs_plus_1_mod_ys_plus_1_div_ys_plus_1_mod_ys_plus_1_div_ys_plus_1 = xs_plus_1_mod_ys_plus_1_div_ys_plus_1_mod_ys_plus_1 / ys\n        val xs_plus_1_mod_ys_plus_1_div_ys_plus_1_mod_ys_plus_1_div_ys_plus_1_mod_ys = xs_plus",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_plus_ys = xs + ys\n        val xs_plus_ys_plus_1 = xs_plus_ys + 1\n        val xs_plus_ys_plus_1_minus_xs = xs_plus_ys_plus_1 - xs\n        val xs_plus_ys_plus_1_minus_xs_plus_ys = xs_plus_ys_plus_1 - xs_plus_ys\n        val xs_plus_ys_plus_1_minus_xs_plus_ys_plus_1 = xs_plus_ys_plus_1 - xs_plus_ys_plus_1\n        val xs_plus_ys_plus_1_minus_xs_plus_ys_plus_1_minus_ys = xs_plus_ys_plus_1 - xs_plus_ys_plus_1_minus_ys\n        val xs_plus_ys_plus_1_minus_xs_plus_ys_plus_1_minus_ys_plus_ys = xs_plus_ys_plus_1 - xs_plus_ys_plus_1_minus_ys_plus_ys\n        val xs_plus_ys_plus_1_minus_xs_plus_ys_plus_1_minus_ys_plus_ys_plus_1 = xs_plus_ys_plus_1 - xs_plus_ys_plus_1_minus_ys_plus_ys_plus_1\n        val xs_plus_ys_plus_1_minus_xs_plus_ys_plus_1_minus_ys_plus_ys_plus_1_minus_ys = xs_plus_ys_plus_1 - xs_plus_ys_plus_1_minus_ys_plus_ys_plus_1_minus_ys\n        val xs_plus_ys_plus_1_minus_xs_plus_ys_plus_1_minus_ys_plus_ys_plus_1_minus_ys_plus_ys = xs_plus_ys_plus_1 - xs_plus_ys_plus_1_minus",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_plus_ys = xs.zip(ys).map(x_y -> x_y._1 + x_y._2)\n        val xs_plus_ys_plus_1 = xs_plus_ys.zip(Seq(1)).map(x_y_plus_1 -> x_y_plus_1._1 + x_y_plus_1._2)\n        val xs_plus_ys_plus_1_plus_1 = xs_plus_ys_plus_1.zip(Seq(1)).map(x_y_plus_1_plus_1 -> x_y_plus_1_plus_1._1 + x_y_plus_1_plus_1._2)\n        val xs_plus_ys_plus_1_plus_1_plus_1 = xs_plus_ys_plus_1_plus_1.zip(Seq(1)).map(x_y_plus_1_plus_1_plus_1 -> x_y_plus_1_plus_1_plus_1._1 + x_y_plus_1_plus_1_plus_1._2)\n        val xs_plus_ys_plus_1_plus_1_plus_1_plus_1 = xs_plus_ys_plus_1_plus_1_plus_1.zip(Seq(1)).map(x_y_plus_1_plus_1_plus_1_plus_1 -> x_y_plus_1_plus_1_plus_1_plus_1._1 + x_y_plus_1_plus_1_plus_1_plus_1._2)\n        val xs_plus_ys_plus_1_plus_1_plus_1_plus_1_plus_1 = xs_plus_ys_plus_1_plus_1_plus_1_plus_1.zip(Seq(1)).map(x_y_plus_1_plus_1_plus_1_plus_1_plus_1 -> x_y_plus_1_plus_1_plus_1_plus_",
    "        val xs = x.toString\n        val ys = y.toString\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val x_str = xs.substring(xs_len - 1, xs_len)\n        val y_str = ys.substring(ys_len - 1, ys_len)\n        val x_int = x_str.toInt\n        val y_int = y_str.toInt\n        val x_int_max = x_int.max\n        val y_int_max = y_int.max\n        val x_int_min = x_int.min\n        val y_int_min = y_int.min\n        val x_int_diff = x_int_max - x_int_min\n        val y_int_diff = y_int_max - y_int_min\n        val x_int_diff_abs = x_int_diff.abs\n        val y_int_diff_abs = y_int_diff.abs\n        val x_int_diff_abs_div_2 = x_int_diff_abs / 2\n        val y_int_diff_abs_div_2 = y_int_diff_abs / 2\n        val x_int_diff_abs_div_2_minus_y_int_diff_abs = x_int_diff_abs_div_2 - y_int_diff_abs\n        val x_int_diff_abs_div_2_minus_y_int_diff_abs_div_2 = x_int_diff_abs_div_2_minus_y_int_diff_abs / 2\n        val x_int_diff_abs_div_2_minus_y_int_diff_abs_div_2_minus_y_int_diff_abs = x_int_diff_abs_div_2_minus_y_int_diff_abs_div_2 - y_int_diff_abs\n        val x_int_diff_abs_div_2_minus_y_int_diff_abs_div_2_minus_y_int_diff_abs_div_2 = x_int_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_min = ys.min\n        val xs_max_minus_ys_min = xs_max - ys_min\n        val xs_max_minus_ys_min_div_2 = xs_max_minus_ys_min / 2\n        val xs_max_minus_ys_min_div_2_plus_ys_min = xs_max_minus_ys_min_div_2 + ys_min\n        val xs_max_minus_ys_min_div_2_plus_ys_min_div_2 = xs_max_minus_ys_min_div_2_plus_ys_min / 2\n        val xs_max_minus_ys_min_div_2_plus_ys_min_div_2_plus_ys_min = xs_max_minus_ys_min_div_2_plus_ys_min_div_2 + ys_min\n        val xs_max_minus_ys_min_div_2_plus_ys_min_div_2_plus_ys_min_div_2 = xs_max_minus_ys_min_div_2_plus_ys_min_div_2_plus_ys_min / 2\n        val xs_max_minus_ys_min_div_2_plus_ys_min_div_2_plus_ys_min_div_2_plus_ys_min = xs_max_minus_ys_min_div_2_plus_ys_min_div_2_plus_ys_min_div_2 + ys_min\n        val xs_max_minus_ys_min_div_2_plus_ys_min_div_2_plus_ys_min_div_2_plus_ys_min_div_2 = xs_max_minus_ys_min_div_2_plus_ys_min_div_2_plus_ys_min_div_2_plus_ys_min / 2\n        val xs_max_minus_ys_min_div",
    "        if (x > y) {\n            throw new IllegalArgumentException(\"x must be <= y\")\n        }\n        var nums = new ArrayList()\n        for (i <- x) {\n            nums.add(i)\n        }\n        for (i <- y) {\n            nums.add(i)\n        }\n        var nums2 = mutable.List.empty()\n        for (i <- nums) {\n            nums2 = nums2.append(i)\n        }\n        var nums3 = mutable.List.empty()\n        for (i <- nums2) {\n            nums3 = nums3.append(i)\n        }\n        var nums4 = mutable.List.empty()\n        for (i <- nums3) {\n            nums4 = nums4.append(i)\n        }\n        var nums5 = mutable.List.empty()\n        for (i <- nums4) {\n            nums5 = nums5.append(i)\n        }\n        var nums6 = mutable.List.empty()\n        for (i <- nums5) {\n            nums6 = nums6.append(i)\n        }\n        var nums7 = mutable.List.empty()\n        for (i <- nums6) {\n            nums7 = nums7.append(i)\n        }\n        var nums8 = mutable.List.empty()\n        for (i <- nums7) {\n            nums8 = nums8.append(i)\n        }\n        var nums9 = mutable.List.empty()\n        for (i <- nums8) {\n            nums9 = nums9.append(i)\n        }\n        var nums10 = mutable.List.empty()\n        for (i <- nums9) {\n            nums10 = nums10.append(i)\n        }\n        var nums11 = mutable.List.empty()\n        for (i <- nums10) {\n            nums11 = nums11.append(i)\n        }\n        var nums12 = mutable.List.empty()\n",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_min = ys.min\n        val xs_min = xs.min\n        val ys_max = ys.max\n        val xs_max_minus_ys_min = xs_max - ys_min\n        val ys_max_minus_xs_min = ys_max - xs_min\n        val xs_max_minus_ys_min_div_ys_max_minus_xs_min = xs_max_minus_ys_min / ys_max_minus_xs_min\n        val ys_max_minus_xs_min_div_xs_max_minus_ys_min = ys_max_minus_xs_min / xs_max_minus_ys_min\n        val xs_max_minus_ys_min_div_ys_max_minus_xs_min_times_ys_max_minus_xs_min = xs_max_minus_ys_min / ys_max_minus_xs_min\n        val ys_max_minus_xs_min_div_xs_max_minus_ys_min_times_xs_max_minus_ys_min = ys_max_minus_xs_min / xs_max_minus_ys_min\n        val xs_max_minus_ys_min_div_ys_max_minus_xs_min_times_ys_max_minus_xs_min_times_xs_max_minus_ys_min = xs_max_minus_ys_min / ys_max_minus_xs_min\n        val ys_max_minus_xs_min_div_xs_max_minus_ys_min_times_xs_max_minus_ys_min_times_ys_max_minus_xs_min = ys_max_minus_xs_min / xs_max_minus_ys_min\n        val xs_max_minus_ys_min_div_ys_max_minus_xs_min_times_ys_max_minus_xs_min_times_ys_max",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        if (xs_len < ys_len) {\n            return -1l\n        }\n        val xs_tail = xs.tail\n        val ys_tail = ys.tail\n        val xs_head = xs.head\n        val ys_head = ys.head\n        val xs_head_len = xs_head.length\n        val ys_head_len = ys_head.length\n        val xs_head_tail = xs_head.tail\n        val ys_head_tail = ys_head.tail\n        val xs_head_tail_len = xs_head_tail.length\n        val ys_head_tail_len = ys_head_tail.length\n        val xs_head_tail_tail = xs_head_tail.tail\n        val ys_head_tail_tail_len = ys_head_tail_tail.length\n        val xs_head_tail_tail_tail = xs_head_tail_tail.tail\n        val ys_head_tail_tail_tail_len = ys_head_tail_tail_tail.length\n        val xs_head_tail_tail_tail_tail = xs_head_tail_tail_tail.tail\n        val ys_head_tail_tail_tail_tail_len = ys_head_tail_tail_tail_tail.length\n        val xs_head_tail_tail_tail_tail_tail = xs_head_tail_tail_tail_tail.tail\n        val ys_head_tail_tail_tail_tail_tail_len = ys_head_tail_tail_tail_tail_tail.length\n        val xs_head_tail_tail_tail_tail_tail_tail = xs_head_tail_tail_tail_tail_tail.tail\n        val ys_head_tail_tail_tail_tail_tail_tail_len = ys_head_tail_tail_tail",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_max = xs.max\n        val ys_min = ys.min\n        val xs_min = xs.min\n        val ys_max = ys.max\n        val xs_max_plus_ys_min = xs_max + ys_min\n        val xs_min_plus_ys_max = xs_min + ys_max\n        val xs_max_plus_ys_min_plus_ys_max = xs_max_plus_ys_min + ys_max\n        val xs_min_plus_ys_min_plus_ys_max = xs_min_plus_ys_min + ys_max\n        val xs_max_plus_ys_min_plus_ys_max_plus_ys_max = xs_max_plus_ys_min_plus_ys_max + ys_max\n        val xs_min_plus_ys_min_plus_ys_max_plus_ys_max = xs_min_plus_ys_min_plus_ys_max + ys_max\n        val xs_max_plus_ys_min_plus_ys_max_plus_ys_max_plus_ys_max = xs_max_plus_ys_min_plus_ys_max_plus_ys_max + ys_max\n        val xs_min_plus_ys_min_plus_ys_max_plus_ys_max_plus_ys_max_plus_ys_max = xs_min_plus_ys_min_plus_ys_max_plus_ys_max_plus_ys_max + ys_max\n        val xs_max_plus_ys_min_plus_ys_max_plus_ys_max_plus_ys_max_plus_ys_max_plus_ys_max = xs_max_plus_ys_min_plus_ys_max_plus_ys_max_plus_ys_max_plus_ys_max + ys_max\n        val xs_min_plus_ys_min_plus_ys_max_",
    "        val xs = range(x, y)\n        val xs2 = xs.filter(x => x % 2 == 0)\n        val ys = range(y, x)\n        val ys2 = ys.filter(y => y % 2 == 0)\n        val xs3 = xs2.intersect(ys2)\n        if (xs3.isEmpty) {\n            return -1l\n        } else {\n            return xs3.max\n        }",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_y = xs.zip(ys).map(x_y -> x_y._1 + x_y._2).toSeq\n        val xs_y_even = xs_y.filter(x_y -> x_y % 2 == 0).toSeq\n        val xs_y_even_max = xs_y_even.maxBy(x_y -> x_y)\n        val xs_y_even_max_val = xs_y_even_max._1\n        if (xs_y_even_max_val > y) {\n            return -1l\n        } else if (xs_y_even_max_val < x) {\n            return -1l\n        } else {\n            return xs_y_even_max_val\n        }",
    "        if (x > y) {\n            return -1l\n        } else if (x == y) {\n            return x\n        } else {\n            return y\n        }",
    "        if (x > y) {\n            return -1l\n        } else {\n            var i = x\n            while (i <= y) {\n                if (i % 2 == 0) {\n                    return i\n                }\n                i = i + 1\n            }\n            return -1l\n        }",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_y = xs.zip(ys)\n        val xs_y_max = xs_y.max\n        val xs_y_max_i = xs_y_max._1\n        val xs_y_max_j = xs_y_max._2\n        val xs_y_max_i_j = xs_y_max_i.zip(xs_y_max_j)\n        val xs_y_max_i_j_max = xs_y_max_i_j.max\n        val xs_y_max_i_j_max_i = xs_y_max_i_j_max._1\n        val xs_y_max_i_j_max_j = xs_y_max_i_j_max._2\n        val xs_y_max_i_j_max_i_j = xs_y_max_i_j_max_i.zip(xs_y_max_i_j_max_j)\n        val xs_y_max_i_j_max_i_j_max = xs_y_max_i_j_max_i_j.max\n        val xs_y_max_i_j_max_i_j_max_i = xs_y_max_i_j_max_i_j_max._1\n        val xs_y_max_i_j_max_i_j_max_j = xs_y_max_i_j_max_i_j_max._2\n        val xs_y_max_i_j_max_i_j_max_i_j = xs_y_max_i_j_max_i_j_max_i.zip(xs_y_max_i_j_max_i_j_max_j)\n        val xs_y_max_i_j_max_i_j_max_i_j_max = xs_y_max_i_j_max_i_j_max_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_plus_ys = xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs = xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus",
    "        if (x > y) {\n            return -1l\n        }\n        if (x == y) {\n            return x\n        }\n        if (x == 0) {\n            return 0l\n        }\n        if (x == 1) {\n            return 2l\n        }\n        if (x == 2) {\n            return 4l\n        }\n        if (x % 2 == 0) {\n            return x\n        }\n        if (x % 2 == 1) {\n            return x + 2\n        }",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_plus_ys = xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs = xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys.zip(xs).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys = xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs_plus_ys_plus_xs.zip(ys).toSeq\n        val xs_plus_ys_plus_xs_plus_ys_plus_xs_plus",
    "        if (x > y) {\n            return -1l\n        } else {\n            var result = 0l\n            var i = x\n            while (i <= y) {\n                if (i % 2 == 0) {\n                    result = i\n                }\n                i = i + 1\n            }\n            return result\n        }",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val xs_max = xs_len.max\n        val ys_max = ys_len.max\n        val xs_min = xs_len.min\n        val ys_min = ys_len.min\n        val xs_max_i = xs_max.get\n        val ys_max_i = ys_max.get\n        val xs_min_i = xs_min.get\n        val ys_min_i = ys_min.get\n        val xs_max_i_i = xs_max_i.get\n        val ys_max_i_i = ys_max_i.get\n        val xs_min_i_i = xs_min_i.get\n        val ys_min_i_i = ys_min_i.get\n        val xs_max_i_i_i = xs_max_i_i.get\n        val ys_max_i_i_i = ys_max_i_i.get\n        val xs_min_i_i_i = xs_min_i_i.get\n        val ys_min_i_i_i = ys_min_i_i.get\n        val xs_max_i_i_i_i = xs_max_i_i_i.get\n        val ys_max_i_i_i_i = ys_max_i_i_i.get\n        val xs_min_i_i_i_i = xs_min_i_i_i.get\n        val ys_min_i_i_i_i = ys_min_i_i_i.get\n        val xs_max_i_i_i_i_i = xs_max_i_i_i_i.get\n        val ys_max_i_i_i_i_i = ys_max_i_i_",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs_len = xs.length\n        val ys_len = ys.length\n        val xs_max = xs_len.max\n        val ys_max = ys_len.max\n        val xs_min = xs_len.min\n        val ys_min = ys_len.min\n        val xs_diff = xs_max - xs_min\n        val ys_diff = ys_max - ys_min\n        val xs_diff_abs = xs_diff.abs\n        val ys_diff_abs = ys_diff.abs\n        val xs_diff_abs_div_ys_diff_abs = xs_diff_abs / ys_diff_abs\n        val ys_diff_abs_div_xs_diff_abs = ys_diff_abs / xs_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_div_xs_diff_abs = xs_diff_abs_div_ys_diff_abs / xs_diff_abs_div_xs_diff_abs\n        val ys_diff_abs_div_xs_diff_abs_div_ys_diff_abs = ys_diff_abs_div_xs_diff_abs / ys_diff_abs_div_ys_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_div_xs_diff_abs_div_ys_diff_abs = xs_diff_abs_div_ys_diff_abs_div_xs_diff_abs_div_ys_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_div_xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs = xs_diff_abs_div_ys_diff_abs_div_xs_diff_abs_div_ys_diff_abs_div_ys_diff_abs\n        val xs_diff_abs_div_ys_diff_abs_div_xs_diff_abs_div_ys",
    "        val xs = scala.math.Long.range(x, y)\n        val xs2 = xs.filter(x => x % 2 == 0)\n        val xs3 = xs2.filter(x => x <= y)\n        if (xs3.isEmpty()) {\n            return -1l\n        } else {\n            return xs3.max()\n        }",
    "        val xs = x.toSeq\n        val ys = y.toSeq\n        val xs$ = xs.toSeq\n        val ys$ = ys.toSeq\n        val xs$_ = xs$.toSeq\n        val ys$_ = ys$.toSeq\n        val xs$__ = xs$_.toSeq\n        val ys$__ = ys$_.toSeq\n        val xs$___ = xs$__.toSeq\n        val ys$___ = ys$__.toSeq\n        val xs$____ = xs$___.toSeq\n        val ys$____ = ys$___.toSeq\n        val xs$_____ = xs$____.toSeq\n        val ys$_____ = ys$____.toSeq\n        val xs$______ = xs$_____.toSeq\n        val ys$______ = ys$_____.toSeq\n        val xs$_______ = xs$______.toSeq\n        val ys$_______ = ys$______.toSeq\n        val xs$________ = xs$_______.toSeq\n        val ys$________ = ys$_______.toSeq\n        val xs$_________ = xs$________.toSeq\n        val ys$_________ = ys$________.toSeq\n        val xs$__________ = xs$_________.toSeq\n        val ys$__________ = ys$_________.toSeq\n        val xs$___________ = xs$__________.toSeq\n        val ys$___________ = ys$__________.toSeq\n        val xs$____________ = xs$___________.toSeq\n        val ys$____________ = ys$___________.toSeq\n        val xs$_____________ = xs$____________.toSeq\n        val ys$_____________ = ys$____________.toSeq\n        val xs$______________ = xs$_____________.toSeq\n        val ys$______________ = ys$_____________.toSeq\n",
    "        if (x > y) {\n            return -1l\n        } else {\n            return _.max(y - x + 1l, x)\n        }",
    "        if (x > y) {\n            throw new IllegalArgumentException(\"x must be less than or equal to y\")\n        }\n        if (x == y) {\n            return x\n        }\n        if (x == 0) {\n            return -1\n        }\n        if (x == 1) {\n            return 2\n        }\n        if (x == 2) {\n            return 4\n        }\n        if (x % 2 == 0) {\n            return 2 * x\n        }\n        return 2 * x - 1"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}